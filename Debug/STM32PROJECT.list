
STM32PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073e0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000778  080074ec  080074ec  000084ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c64  08007c64  00009068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007c64  08007c64  00008c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c6c  08007c6c  00009068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c6c  08007c6c  00008c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007c70  08007c70  00008c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08007c74  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cf4  20000068  08007cdc  00009068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d5c  08007cdc  00009d5c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ec9c  00000000  00000000  00009091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000280d  00000000  00000000  00017d2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d8  00000000  00000000  0001a540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d5a  00000000  00000000  0001b618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000194de  00000000  00000000  0001c372  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001438e  00000000  00000000  00035850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d8d7  00000000  00000000  00049bde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d74b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005120  00000000  00000000  000d74f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000dc618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	080074d4 	.word	0x080074d4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	080074d4 	.word	0x080074d4

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <__aeabi_frsub>:
 8000170:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000174:	e002      	b.n	800017c <__addsf3>
 8000176:	bf00      	nop

08000178 <__aeabi_fsub>:
 8000178:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800017c <__addsf3>:
 800017c:	0042      	lsls	r2, r0, #1
 800017e:	bf1f      	itttt	ne
 8000180:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000184:	ea92 0f03 	teqne	r2, r3
 8000188:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800018c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000190:	d06a      	beq.n	8000268 <__addsf3+0xec>
 8000192:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000196:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800019a:	bfc1      	itttt	gt
 800019c:	18d2      	addgt	r2, r2, r3
 800019e:	4041      	eorgt	r1, r0
 80001a0:	4048      	eorgt	r0, r1
 80001a2:	4041      	eorgt	r1, r0
 80001a4:	bfb8      	it	lt
 80001a6:	425b      	neglt	r3, r3
 80001a8:	2b19      	cmp	r3, #25
 80001aa:	bf88      	it	hi
 80001ac:	4770      	bxhi	lr
 80001ae:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80001b2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001b6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4240      	negne	r0, r0
 80001be:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001c6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001ca:	bf18      	it	ne
 80001cc:	4249      	negne	r1, r1
 80001ce:	ea92 0f03 	teq	r2, r3
 80001d2:	d03f      	beq.n	8000254 <__addsf3+0xd8>
 80001d4:	f1a2 0201 	sub.w	r2, r2, #1
 80001d8:	fa41 fc03 	asr.w	ip, r1, r3
 80001dc:	eb10 000c 	adds.w	r0, r0, ip
 80001e0:	f1c3 0320 	rsb	r3, r3, #32
 80001e4:	fa01 f103 	lsl.w	r1, r1, r3
 80001e8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001ec:	d502      	bpl.n	80001f4 <__addsf3+0x78>
 80001ee:	4249      	negs	r1, r1
 80001f0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001f4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001f8:	d313      	bcc.n	8000222 <__addsf3+0xa6>
 80001fa:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001fe:	d306      	bcc.n	800020e <__addsf3+0x92>
 8000200:	0840      	lsrs	r0, r0, #1
 8000202:	ea4f 0131 	mov.w	r1, r1, rrx
 8000206:	f102 0201 	add.w	r2, r2, #1
 800020a:	2afe      	cmp	r2, #254	@ 0xfe
 800020c:	d251      	bcs.n	80002b2 <__addsf3+0x136>
 800020e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000212:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000216:	bf08      	it	eq
 8000218:	f020 0001 	biceq.w	r0, r0, #1
 800021c:	ea40 0003 	orr.w	r0, r0, r3
 8000220:	4770      	bx	lr
 8000222:	0049      	lsls	r1, r1, #1
 8000224:	eb40 0000 	adc.w	r0, r0, r0
 8000228:	3a01      	subs	r2, #1
 800022a:	bf28      	it	cs
 800022c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000230:	d2ed      	bcs.n	800020e <__addsf3+0x92>
 8000232:	fab0 fc80 	clz	ip, r0
 8000236:	f1ac 0c08 	sub.w	ip, ip, #8
 800023a:	ebb2 020c 	subs.w	r2, r2, ip
 800023e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000242:	bfaa      	itet	ge
 8000244:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000248:	4252      	neglt	r2, r2
 800024a:	4318      	orrge	r0, r3
 800024c:	bfbc      	itt	lt
 800024e:	40d0      	lsrlt	r0, r2
 8000250:	4318      	orrlt	r0, r3
 8000252:	4770      	bx	lr
 8000254:	f092 0f00 	teq	r2, #0
 8000258:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800025c:	bf06      	itte	eq
 800025e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000262:	3201      	addeq	r2, #1
 8000264:	3b01      	subne	r3, #1
 8000266:	e7b5      	b.n	80001d4 <__addsf3+0x58>
 8000268:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800026c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000270:	bf18      	it	ne
 8000272:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000276:	d021      	beq.n	80002bc <__addsf3+0x140>
 8000278:	ea92 0f03 	teq	r2, r3
 800027c:	d004      	beq.n	8000288 <__addsf3+0x10c>
 800027e:	f092 0f00 	teq	r2, #0
 8000282:	bf08      	it	eq
 8000284:	4608      	moveq	r0, r1
 8000286:	4770      	bx	lr
 8000288:	ea90 0f01 	teq	r0, r1
 800028c:	bf1c      	itt	ne
 800028e:	2000      	movne	r0, #0
 8000290:	4770      	bxne	lr
 8000292:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000296:	d104      	bne.n	80002a2 <__addsf3+0x126>
 8000298:	0040      	lsls	r0, r0, #1
 800029a:	bf28      	it	cs
 800029c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80002a0:	4770      	bx	lr
 80002a2:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80002a6:	bf3c      	itt	cc
 80002a8:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80002ac:	4770      	bxcc	lr
 80002ae:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80002b2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80002b6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002ba:	4770      	bx	lr
 80002bc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002c0:	bf16      	itet	ne
 80002c2:	4608      	movne	r0, r1
 80002c4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002c8:	4601      	movne	r1, r0
 80002ca:	0242      	lsls	r2, r0, #9
 80002cc:	bf06      	itte	eq
 80002ce:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002d2:	ea90 0f01 	teqeq	r0, r1
 80002d6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002da:	4770      	bx	lr

080002dc <__aeabi_ui2f>:
 80002dc:	f04f 0300 	mov.w	r3, #0
 80002e0:	e004      	b.n	80002ec <__aeabi_i2f+0x8>
 80002e2:	bf00      	nop

080002e4 <__aeabi_i2f>:
 80002e4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002e8:	bf48      	it	mi
 80002ea:	4240      	negmi	r0, r0
 80002ec:	ea5f 0c00 	movs.w	ip, r0
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002f8:	4601      	mov	r1, r0
 80002fa:	f04f 0000 	mov.w	r0, #0
 80002fe:	e01c      	b.n	800033a <__aeabi_l2f+0x2a>

08000300 <__aeabi_ul2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f04f 0300 	mov.w	r3, #0
 800030c:	e00a      	b.n	8000324 <__aeabi_l2f+0x14>
 800030e:	bf00      	nop

08000310 <__aeabi_l2f>:
 8000310:	ea50 0201 	orrs.w	r2, r0, r1
 8000314:	bf08      	it	eq
 8000316:	4770      	bxeq	lr
 8000318:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800031c:	d502      	bpl.n	8000324 <__aeabi_l2f+0x14>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	ea5f 0c01 	movs.w	ip, r1
 8000328:	bf02      	ittt	eq
 800032a:	4684      	moveq	ip, r0
 800032c:	4601      	moveq	r1, r0
 800032e:	2000      	moveq	r0, #0
 8000330:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000334:	bf08      	it	eq
 8000336:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800033a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800033e:	fabc f28c 	clz	r2, ip
 8000342:	3a08      	subs	r2, #8
 8000344:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000348:	db10      	blt.n	800036c <__aeabi_l2f+0x5c>
 800034a:	fa01 fc02 	lsl.w	ip, r1, r2
 800034e:	4463      	add	r3, ip
 8000350:	fa00 fc02 	lsl.w	ip, r0, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800035c:	fa20 f202 	lsr.w	r2, r0, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	f020 0001 	biceq.w	r0, r0, #1
 800036a:	4770      	bx	lr
 800036c:	f102 0220 	add.w	r2, r2, #32
 8000370:	fa01 fc02 	lsl.w	ip, r1, r2
 8000374:	f1c2 0220 	rsb	r2, r2, #32
 8000378:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800037c:	fa21 f202 	lsr.w	r2, r1, r2
 8000380:	eb43 0002 	adc.w	r0, r3, r2
 8000384:	bf08      	it	eq
 8000386:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800038a:	4770      	bx	lr

0800038c <__aeabi_fmul>:
 800038c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000390:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000394:	bf1e      	ittt	ne
 8000396:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800039a:	ea92 0f0c 	teqne	r2, ip
 800039e:	ea93 0f0c 	teqne	r3, ip
 80003a2:	d06f      	beq.n	8000484 <__aeabi_fmul+0xf8>
 80003a4:	441a      	add	r2, r3
 80003a6:	ea80 0c01 	eor.w	ip, r0, r1
 80003aa:	0240      	lsls	r0, r0, #9
 80003ac:	bf18      	it	ne
 80003ae:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003b2:	d01e      	beq.n	80003f2 <__aeabi_fmul+0x66>
 80003b4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80003b8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003bc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003c0:	fba0 3101 	umull	r3, r1, r0, r1
 80003c4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003c8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003cc:	bf3e      	ittt	cc
 80003ce:	0049      	lslcc	r1, r1, #1
 80003d0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003d4:	005b      	lslcc	r3, r3, #1
 80003d6:	ea40 0001 	orr.w	r0, r0, r1
 80003da:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003de:	2afd      	cmp	r2, #253	@ 0xfd
 80003e0:	d81d      	bhi.n	800041e <__aeabi_fmul+0x92>
 80003e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ea:	bf08      	it	eq
 80003ec:	f020 0001 	biceq.w	r0, r0, #1
 80003f0:	4770      	bx	lr
 80003f2:	f090 0f00 	teq	r0, #0
 80003f6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003fa:	bf08      	it	eq
 80003fc:	0249      	lsleq	r1, r1, #9
 80003fe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000402:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000406:	3a7f      	subs	r2, #127	@ 0x7f
 8000408:	bfc2      	ittt	gt
 800040a:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800040e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000412:	4770      	bxgt	lr
 8000414:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000418:	f04f 0300 	mov.w	r3, #0
 800041c:	3a01      	subs	r2, #1
 800041e:	dc5d      	bgt.n	80004dc <__aeabi_fmul+0x150>
 8000420:	f112 0f19 	cmn.w	r2, #25
 8000424:	bfdc      	itt	le
 8000426:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800042a:	4770      	bxle	lr
 800042c:	f1c2 0200 	rsb	r2, r2, #0
 8000430:	0041      	lsls	r1, r0, #1
 8000432:	fa21 f102 	lsr.w	r1, r1, r2
 8000436:	f1c2 0220 	rsb	r2, r2, #32
 800043a:	fa00 fc02 	lsl.w	ip, r0, r2
 800043e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000442:	f140 0000 	adc.w	r0, r0, #0
 8000446:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800044a:	bf08      	it	eq
 800044c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000450:	4770      	bx	lr
 8000452:	f092 0f00 	teq	r2, #0
 8000456:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800045a:	bf02      	ittt	eq
 800045c:	0040      	lsleq	r0, r0, #1
 800045e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000462:	3a01      	subeq	r2, #1
 8000464:	d0f9      	beq.n	800045a <__aeabi_fmul+0xce>
 8000466:	ea40 000c 	orr.w	r0, r0, ip
 800046a:	f093 0f00 	teq	r3, #0
 800046e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000472:	bf02      	ittt	eq
 8000474:	0049      	lsleq	r1, r1, #1
 8000476:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800047a:	3b01      	subeq	r3, #1
 800047c:	d0f9      	beq.n	8000472 <__aeabi_fmul+0xe6>
 800047e:	ea41 010c 	orr.w	r1, r1, ip
 8000482:	e78f      	b.n	80003a4 <__aeabi_fmul+0x18>
 8000484:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000488:	ea92 0f0c 	teq	r2, ip
 800048c:	bf18      	it	ne
 800048e:	ea93 0f0c 	teqne	r3, ip
 8000492:	d00a      	beq.n	80004aa <__aeabi_fmul+0x11e>
 8000494:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000498:	bf18      	it	ne
 800049a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800049e:	d1d8      	bne.n	8000452 <__aeabi_fmul+0xc6>
 80004a0:	ea80 0001 	eor.w	r0, r0, r1
 80004a4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004a8:	4770      	bx	lr
 80004aa:	f090 0f00 	teq	r0, #0
 80004ae:	bf17      	itett	ne
 80004b0:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80004b4:	4608      	moveq	r0, r1
 80004b6:	f091 0f00 	teqne	r1, #0
 80004ba:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80004be:	d014      	beq.n	80004ea <__aeabi_fmul+0x15e>
 80004c0:	ea92 0f0c 	teq	r2, ip
 80004c4:	d101      	bne.n	80004ca <__aeabi_fmul+0x13e>
 80004c6:	0242      	lsls	r2, r0, #9
 80004c8:	d10f      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004ca:	ea93 0f0c 	teq	r3, ip
 80004ce:	d103      	bne.n	80004d8 <__aeabi_fmul+0x14c>
 80004d0:	024b      	lsls	r3, r1, #9
 80004d2:	bf18      	it	ne
 80004d4:	4608      	movne	r0, r1
 80004d6:	d108      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004d8:	ea80 0001 	eor.w	r0, r0, r1
 80004dc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004e0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004e4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004e8:	4770      	bx	lr
 80004ea:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ee:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004f2:	4770      	bx	lr

080004f4 <__aeabi_fdiv>:
 80004f4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004fc:	bf1e      	ittt	ne
 80004fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000502:	ea92 0f0c 	teqne	r2, ip
 8000506:	ea93 0f0c 	teqne	r3, ip
 800050a:	d069      	beq.n	80005e0 <__aeabi_fdiv+0xec>
 800050c:	eba2 0203 	sub.w	r2, r2, r3
 8000510:	ea80 0c01 	eor.w	ip, r0, r1
 8000514:	0249      	lsls	r1, r1, #9
 8000516:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800051a:	d037      	beq.n	800058c <__aeabi_fdiv+0x98>
 800051c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000520:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000524:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000528:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800052c:	428b      	cmp	r3, r1
 800052e:	bf38      	it	cc
 8000530:	005b      	lslcc	r3, r3, #1
 8000532:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000536:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800053a:	428b      	cmp	r3, r1
 800053c:	bf24      	itt	cs
 800053e:	1a5b      	subcs	r3, r3, r1
 8000540:	ea40 000c 	orrcs.w	r0, r0, ip
 8000544:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000548:	bf24      	itt	cs
 800054a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800054e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000552:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000556:	bf24      	itt	cs
 8000558:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800055c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000560:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000564:	bf24      	itt	cs
 8000566:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800056a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800056e:	011b      	lsls	r3, r3, #4
 8000570:	bf18      	it	ne
 8000572:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000576:	d1e0      	bne.n	800053a <__aeabi_fdiv+0x46>
 8000578:	2afd      	cmp	r2, #253	@ 0xfd
 800057a:	f63f af50 	bhi.w	800041e <__aeabi_fmul+0x92>
 800057e:	428b      	cmp	r3, r1
 8000580:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000584:	bf08      	it	eq
 8000586:	f020 0001 	biceq.w	r0, r0, #1
 800058a:	4770      	bx	lr
 800058c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000590:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000594:	327f      	adds	r2, #127	@ 0x7f
 8000596:	bfc2      	ittt	gt
 8000598:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800059c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005a0:	4770      	bxgt	lr
 80005a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80005a6:	f04f 0300 	mov.w	r3, #0
 80005aa:	3a01      	subs	r2, #1
 80005ac:	e737      	b.n	800041e <__aeabi_fmul+0x92>
 80005ae:	f092 0f00 	teq	r2, #0
 80005b2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80005b6:	bf02      	ittt	eq
 80005b8:	0040      	lsleq	r0, r0, #1
 80005ba:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80005be:	3a01      	subeq	r2, #1
 80005c0:	d0f9      	beq.n	80005b6 <__aeabi_fdiv+0xc2>
 80005c2:	ea40 000c 	orr.w	r0, r0, ip
 80005c6:	f093 0f00 	teq	r3, #0
 80005ca:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005ce:	bf02      	ittt	eq
 80005d0:	0049      	lsleq	r1, r1, #1
 80005d2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005d6:	3b01      	subeq	r3, #1
 80005d8:	d0f9      	beq.n	80005ce <__aeabi_fdiv+0xda>
 80005da:	ea41 010c 	orr.w	r1, r1, ip
 80005de:	e795      	b.n	800050c <__aeabi_fdiv+0x18>
 80005e0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005e4:	ea92 0f0c 	teq	r2, ip
 80005e8:	d108      	bne.n	80005fc <__aeabi_fdiv+0x108>
 80005ea:	0242      	lsls	r2, r0, #9
 80005ec:	f47f af7d 	bne.w	80004ea <__aeabi_fmul+0x15e>
 80005f0:	ea93 0f0c 	teq	r3, ip
 80005f4:	f47f af70 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 80005f8:	4608      	mov	r0, r1
 80005fa:	e776      	b.n	80004ea <__aeabi_fmul+0x15e>
 80005fc:	ea93 0f0c 	teq	r3, ip
 8000600:	d104      	bne.n	800060c <__aeabi_fdiv+0x118>
 8000602:	024b      	lsls	r3, r1, #9
 8000604:	f43f af4c 	beq.w	80004a0 <__aeabi_fmul+0x114>
 8000608:	4608      	mov	r0, r1
 800060a:	e76e      	b.n	80004ea <__aeabi_fmul+0x15e>
 800060c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000610:	bf18      	it	ne
 8000612:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000616:	d1ca      	bne.n	80005ae <__aeabi_fdiv+0xba>
 8000618:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800061c:	f47f af5c 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 8000620:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000624:	f47f af3c 	bne.w	80004a0 <__aeabi_fmul+0x114>
 8000628:	e75f      	b.n	80004ea <__aeabi_fmul+0x15e>
 800062a:	bf00      	nop

0800062c <__gesf2>:
 800062c:	f04f 3cff 	mov.w	ip, #4294967295
 8000630:	e006      	b.n	8000640 <__cmpsf2+0x4>
 8000632:	bf00      	nop

08000634 <__lesf2>:
 8000634:	f04f 0c01 	mov.w	ip, #1
 8000638:	e002      	b.n	8000640 <__cmpsf2+0x4>
 800063a:	bf00      	nop

0800063c <__cmpsf2>:
 800063c:	f04f 0c01 	mov.w	ip, #1
 8000640:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000644:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000648:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800064c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000650:	bf18      	it	ne
 8000652:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000656:	d011      	beq.n	800067c <__cmpsf2+0x40>
 8000658:	b001      	add	sp, #4
 800065a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800065e:	bf18      	it	ne
 8000660:	ea90 0f01 	teqne	r0, r1
 8000664:	bf58      	it	pl
 8000666:	ebb2 0003 	subspl.w	r0, r2, r3
 800066a:	bf88      	it	hi
 800066c:	17c8      	asrhi	r0, r1, #31
 800066e:	bf38      	it	cc
 8000670:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000674:	bf18      	it	ne
 8000676:	f040 0001 	orrne.w	r0, r0, #1
 800067a:	4770      	bx	lr
 800067c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000680:	d102      	bne.n	8000688 <__cmpsf2+0x4c>
 8000682:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000686:	d105      	bne.n	8000694 <__cmpsf2+0x58>
 8000688:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800068c:	d1e4      	bne.n	8000658 <__cmpsf2+0x1c>
 800068e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000692:	d0e1      	beq.n	8000658 <__cmpsf2+0x1c>
 8000694:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop

0800069c <__aeabi_cfrcmple>:
 800069c:	4684      	mov	ip, r0
 800069e:	4608      	mov	r0, r1
 80006a0:	4661      	mov	r1, ip
 80006a2:	e7ff      	b.n	80006a4 <__aeabi_cfcmpeq>

080006a4 <__aeabi_cfcmpeq>:
 80006a4:	b50f      	push	{r0, r1, r2, r3, lr}
 80006a6:	f7ff ffc9 	bl	800063c <__cmpsf2>
 80006aa:	2800      	cmp	r0, #0
 80006ac:	bf48      	it	mi
 80006ae:	f110 0f00 	cmnmi.w	r0, #0
 80006b2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006b4 <__aeabi_fcmpeq>:
 80006b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006b8:	f7ff fff4 	bl	80006a4 <__aeabi_cfcmpeq>
 80006bc:	bf0c      	ite	eq
 80006be:	2001      	moveq	r0, #1
 80006c0:	2000      	movne	r0, #0
 80006c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006c6:	bf00      	nop

080006c8 <__aeabi_fcmplt>:
 80006c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006cc:	f7ff ffea 	bl	80006a4 <__aeabi_cfcmpeq>
 80006d0:	bf34      	ite	cc
 80006d2:	2001      	movcc	r0, #1
 80006d4:	2000      	movcs	r0, #0
 80006d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006da:	bf00      	nop

080006dc <__aeabi_fcmple>:
 80006dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e0:	f7ff ffe0 	bl	80006a4 <__aeabi_cfcmpeq>
 80006e4:	bf94      	ite	ls
 80006e6:	2001      	movls	r0, #1
 80006e8:	2000      	movhi	r0, #0
 80006ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ee:	bf00      	nop

080006f0 <__aeabi_fcmpge>:
 80006f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f4:	f7ff ffd2 	bl	800069c <__aeabi_cfrcmple>
 80006f8:	bf94      	ite	ls
 80006fa:	2001      	movls	r0, #1
 80006fc:	2000      	movhi	r0, #0
 80006fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000702:	bf00      	nop

08000704 <__aeabi_fcmpgt>:
 8000704:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000708:	f7ff ffc8 	bl	800069c <__aeabi_cfrcmple>
 800070c:	bf34      	ite	cc
 800070e:	2001      	movcc	r0, #1
 8000710:	2000      	movcs	r0, #0
 8000712:	f85d fb08 	ldr.w	pc, [sp], #8
 8000716:	bf00      	nop

08000718 <__aeabi_fcmpun>:
 8000718:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800071c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000720:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000724:	d102      	bne.n	800072c <__aeabi_fcmpun+0x14>
 8000726:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800072a:	d108      	bne.n	800073e <__aeabi_fcmpun+0x26>
 800072c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000730:	d102      	bne.n	8000738 <__aeabi_fcmpun+0x20>
 8000732:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000736:	d102      	bne.n	800073e <__aeabi_fcmpun+0x26>
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	4770      	bx	lr
 800073e:	f04f 0001 	mov.w	r0, #1
 8000742:	4770      	bx	lr

08000744 <__aeabi_f2iz>:
 8000744:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000748:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800074c:	d30f      	bcc.n	800076e <__aeabi_f2iz+0x2a>
 800074e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000752:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000756:	d90d      	bls.n	8000774 <__aeabi_f2iz+0x30>
 8000758:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800075c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000760:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000764:	fa23 f002 	lsr.w	r0, r3, r2
 8000768:	bf18      	it	ne
 800076a:	4240      	negne	r0, r0
 800076c:	4770      	bx	lr
 800076e:	f04f 0000 	mov.w	r0, #0
 8000772:	4770      	bx	lr
 8000774:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000778:	d101      	bne.n	800077e <__aeabi_f2iz+0x3a>
 800077a:	0242      	lsls	r2, r0, #9
 800077c:	d105      	bne.n	800078a <__aeabi_f2iz+0x46>
 800077e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000782:	bf08      	it	eq
 8000784:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000788:	4770      	bx	lr
 800078a:	f04f 0000 	mov.w	r0, #0
 800078e:	4770      	bx	lr

08000790 <__aeabi_f2uiz>:
 8000790:	0042      	lsls	r2, r0, #1
 8000792:	d20e      	bcs.n	80007b2 <__aeabi_f2uiz+0x22>
 8000794:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000798:	d30b      	bcc.n	80007b2 <__aeabi_f2uiz+0x22>
 800079a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800079e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80007a2:	d409      	bmi.n	80007b8 <__aeabi_f2uiz+0x28>
 80007a4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80007a8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80007ac:	fa23 f002 	lsr.w	r0, r3, r2
 80007b0:	4770      	bx	lr
 80007b2:	f04f 0000 	mov.w	r0, #0
 80007b6:	4770      	bx	lr
 80007b8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80007bc:	d101      	bne.n	80007c2 <__aeabi_f2uiz+0x32>
 80007be:	0242      	lsls	r2, r0, #9
 80007c0:	d102      	bne.n	80007c8 <__aeabi_f2uiz+0x38>
 80007c2:	f04f 30ff 	mov.w	r0, #4294967295
 80007c6:	4770      	bx	lr
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop

080007d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b088      	sub	sp, #32
 80007d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d6:	f107 0310 	add.w	r3, r7, #16
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e4:	4b24      	ldr	r3, [pc, #144]	@ (8000878 <MX_GPIO_Init+0xa8>)
 80007e6:	699b      	ldr	r3, [r3, #24]
 80007e8:	4a23      	ldr	r2, [pc, #140]	@ (8000878 <MX_GPIO_Init+0xa8>)
 80007ea:	f043 0310 	orr.w	r3, r3, #16
 80007ee:	6193      	str	r3, [r2, #24]
 80007f0:	4b21      	ldr	r3, [pc, #132]	@ (8000878 <MX_GPIO_Init+0xa8>)
 80007f2:	699b      	ldr	r3, [r3, #24]
 80007f4:	f003 0310 	and.w	r3, r3, #16
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007fc:	4b1e      	ldr	r3, [pc, #120]	@ (8000878 <MX_GPIO_Init+0xa8>)
 80007fe:	699b      	ldr	r3, [r3, #24]
 8000800:	4a1d      	ldr	r2, [pc, #116]	@ (8000878 <MX_GPIO_Init+0xa8>)
 8000802:	f043 0320 	orr.w	r3, r3, #32
 8000806:	6193      	str	r3, [r2, #24]
 8000808:	4b1b      	ldr	r3, [pc, #108]	@ (8000878 <MX_GPIO_Init+0xa8>)
 800080a:	699b      	ldr	r3, [r3, #24]
 800080c:	f003 0320 	and.w	r3, r3, #32
 8000810:	60bb      	str	r3, [r7, #8]
 8000812:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000814:	4b18      	ldr	r3, [pc, #96]	@ (8000878 <MX_GPIO_Init+0xa8>)
 8000816:	699b      	ldr	r3, [r3, #24]
 8000818:	4a17      	ldr	r2, [pc, #92]	@ (8000878 <MX_GPIO_Init+0xa8>)
 800081a:	f043 0308 	orr.w	r3, r3, #8
 800081e:	6193      	str	r3, [r2, #24]
 8000820:	4b15      	ldr	r3, [pc, #84]	@ (8000878 <MX_GPIO_Init+0xa8>)
 8000822:	699b      	ldr	r3, [r3, #24]
 8000824:	f003 0308 	and.w	r3, r3, #8
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082c:	4b12      	ldr	r3, [pc, #72]	@ (8000878 <MX_GPIO_Init+0xa8>)
 800082e:	699b      	ldr	r3, [r3, #24]
 8000830:	4a11      	ldr	r2, [pc, #68]	@ (8000878 <MX_GPIO_Init+0xa8>)
 8000832:	f043 0304 	orr.w	r3, r3, #4
 8000836:	6193      	str	r3, [r2, #24]
 8000838:	4b0f      	ldr	r3, [pc, #60]	@ (8000878 <MX_GPIO_Init+0xa8>)
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	f003 0304 	and.w	r3, r3, #4
 8000840:	603b      	str	r3, [r7, #0]
 8000842:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000844:	2200      	movs	r2, #0
 8000846:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800084a:	480c      	ldr	r0, [pc, #48]	@ (800087c <MX_GPIO_Init+0xac>)
 800084c:	f002 ff18 	bl	8003680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000850:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000854:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000856:	2301      	movs	r3, #1
 8000858:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085e:	2302      	movs	r3, #2
 8000860:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000862:	f107 0310 	add.w	r3, r7, #16
 8000866:	4619      	mov	r1, r3
 8000868:	4804      	ldr	r0, [pc, #16]	@ (800087c <MX_GPIO_Init+0xac>)
 800086a:	f002 fd85 	bl	8003378 <HAL_GPIO_Init>

}
 800086e:	bf00      	nop
 8000870:	3720      	adds	r7, #32
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40021000 	.word	0x40021000
 800087c:	40011000 	.word	0x40011000

08000880 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000884:	4b12      	ldr	r3, [pc, #72]	@ (80008d0 <MX_I2C1_Init+0x50>)
 8000886:	4a13      	ldr	r2, [pc, #76]	@ (80008d4 <MX_I2C1_Init+0x54>)
 8000888:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800088a:	4b11      	ldr	r3, [pc, #68]	@ (80008d0 <MX_I2C1_Init+0x50>)
 800088c:	4a12      	ldr	r2, [pc, #72]	@ (80008d8 <MX_I2C1_Init+0x58>)
 800088e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000890:	4b0f      	ldr	r3, [pc, #60]	@ (80008d0 <MX_I2C1_Init+0x50>)
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000896:	4b0e      	ldr	r3, [pc, #56]	@ (80008d0 <MX_I2C1_Init+0x50>)
 8000898:	2200      	movs	r2, #0
 800089a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800089c:	4b0c      	ldr	r3, [pc, #48]	@ (80008d0 <MX_I2C1_Init+0x50>)
 800089e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80008a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008a4:	4b0a      	ldr	r3, [pc, #40]	@ (80008d0 <MX_I2C1_Init+0x50>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008aa:	4b09      	ldr	r3, [pc, #36]	@ (80008d0 <MX_I2C1_Init+0x50>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008b0:	4b07      	ldr	r3, [pc, #28]	@ (80008d0 <MX_I2C1_Init+0x50>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008b6:	4b06      	ldr	r3, [pc, #24]	@ (80008d0 <MX_I2C1_Init+0x50>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008bc:	4804      	ldr	r0, [pc, #16]	@ (80008d0 <MX_I2C1_Init+0x50>)
 80008be:	f002 fef7 	bl	80036b0 <HAL_I2C_Init>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008c8:	f000 f927 	bl	8000b1a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008cc:	bf00      	nop
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20000084 	.word	0x20000084
 80008d4:	40005400 	.word	0x40005400
 80008d8:	00061a80 	.word	0x00061a80

080008dc <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80008e0:	4b12      	ldr	r3, [pc, #72]	@ (800092c <MX_I2C2_Init+0x50>)
 80008e2:	4a13      	ldr	r2, [pc, #76]	@ (8000930 <MX_I2C2_Init+0x54>)
 80008e4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80008e6:	4b11      	ldr	r3, [pc, #68]	@ (800092c <MX_I2C2_Init+0x50>)
 80008e8:	4a12      	ldr	r2, [pc, #72]	@ (8000934 <MX_I2C2_Init+0x58>)
 80008ea:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008ec:	4b0f      	ldr	r3, [pc, #60]	@ (800092c <MX_I2C2_Init+0x50>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80008f2:	4b0e      	ldr	r3, [pc, #56]	@ (800092c <MX_I2C2_Init+0x50>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008f8:	4b0c      	ldr	r3, [pc, #48]	@ (800092c <MX_I2C2_Init+0x50>)
 80008fa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80008fe:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000900:	4b0a      	ldr	r3, [pc, #40]	@ (800092c <MX_I2C2_Init+0x50>)
 8000902:	2200      	movs	r2, #0
 8000904:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000906:	4b09      	ldr	r3, [pc, #36]	@ (800092c <MX_I2C2_Init+0x50>)
 8000908:	2200      	movs	r2, #0
 800090a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800090c:	4b07      	ldr	r3, [pc, #28]	@ (800092c <MX_I2C2_Init+0x50>)
 800090e:	2200      	movs	r2, #0
 8000910:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000912:	4b06      	ldr	r3, [pc, #24]	@ (800092c <MX_I2C2_Init+0x50>)
 8000914:	2200      	movs	r2, #0
 8000916:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000918:	4804      	ldr	r0, [pc, #16]	@ (800092c <MX_I2C2_Init+0x50>)
 800091a:	f002 fec9 	bl	80036b0 <HAL_I2C_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000924:	f000 f8f9 	bl	8000b1a <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000928:	bf00      	nop
 800092a:	bd80      	pop	{r7, pc}
 800092c:	200000d8 	.word	0x200000d8
 8000930:	40005800 	.word	0x40005800
 8000934:	00061a80 	.word	0x00061a80

08000938 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08a      	sub	sp, #40	@ 0x28
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000940:	f107 0318 	add.w	r3, r7, #24
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4a2b      	ldr	r2, [pc, #172]	@ (8000a00 <HAL_I2C_MspInit+0xc8>)
 8000954:	4293      	cmp	r3, r2
 8000956:	d124      	bne.n	80009a2 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000958:	4b2a      	ldr	r3, [pc, #168]	@ (8000a04 <HAL_I2C_MspInit+0xcc>)
 800095a:	699b      	ldr	r3, [r3, #24]
 800095c:	4a29      	ldr	r2, [pc, #164]	@ (8000a04 <HAL_I2C_MspInit+0xcc>)
 800095e:	f043 0308 	orr.w	r3, r3, #8
 8000962:	6193      	str	r3, [r2, #24]
 8000964:	4b27      	ldr	r3, [pc, #156]	@ (8000a04 <HAL_I2C_MspInit+0xcc>)
 8000966:	699b      	ldr	r3, [r3, #24]
 8000968:	f003 0308 	and.w	r3, r3, #8
 800096c:	617b      	str	r3, [r7, #20]
 800096e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 8000970:	23c0      	movs	r3, #192	@ 0xc0
 8000972:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000974:	2312      	movs	r3, #18
 8000976:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000978:	2303      	movs	r3, #3
 800097a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800097c:	f107 0318 	add.w	r3, r7, #24
 8000980:	4619      	mov	r1, r3
 8000982:	4821      	ldr	r0, [pc, #132]	@ (8000a08 <HAL_I2C_MspInit+0xd0>)
 8000984:	f002 fcf8 	bl	8003378 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000988:	4b1e      	ldr	r3, [pc, #120]	@ (8000a04 <HAL_I2C_MspInit+0xcc>)
 800098a:	69db      	ldr	r3, [r3, #28]
 800098c:	4a1d      	ldr	r2, [pc, #116]	@ (8000a04 <HAL_I2C_MspInit+0xcc>)
 800098e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000992:	61d3      	str	r3, [r2, #28]
 8000994:	4b1b      	ldr	r3, [pc, #108]	@ (8000a04 <HAL_I2C_MspInit+0xcc>)
 8000996:	69db      	ldr	r3, [r3, #28]
 8000998:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800099c:	613b      	str	r3, [r7, #16]
 800099e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80009a0:	e029      	b.n	80009f6 <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	4a19      	ldr	r2, [pc, #100]	@ (8000a0c <HAL_I2C_MspInit+0xd4>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d124      	bne.n	80009f6 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ac:	4b15      	ldr	r3, [pc, #84]	@ (8000a04 <HAL_I2C_MspInit+0xcc>)
 80009ae:	699b      	ldr	r3, [r3, #24]
 80009b0:	4a14      	ldr	r2, [pc, #80]	@ (8000a04 <HAL_I2C_MspInit+0xcc>)
 80009b2:	f043 0308 	orr.w	r3, r3, #8
 80009b6:	6193      	str	r3, [r2, #24]
 80009b8:	4b12      	ldr	r3, [pc, #72]	@ (8000a04 <HAL_I2C_MspInit+0xcc>)
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	f003 0308 	and.w	r3, r3, #8
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GYRO_SCL_Pin|GYRO_SDA_Pin;
 80009c4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80009c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009ca:	2312      	movs	r3, #18
 80009cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009ce:	2303      	movs	r3, #3
 80009d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d2:	f107 0318 	add.w	r3, r7, #24
 80009d6:	4619      	mov	r1, r3
 80009d8:	480b      	ldr	r0, [pc, #44]	@ (8000a08 <HAL_I2C_MspInit+0xd0>)
 80009da:	f002 fccd 	bl	8003378 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80009de:	4b09      	ldr	r3, [pc, #36]	@ (8000a04 <HAL_I2C_MspInit+0xcc>)
 80009e0:	69db      	ldr	r3, [r3, #28]
 80009e2:	4a08      	ldr	r2, [pc, #32]	@ (8000a04 <HAL_I2C_MspInit+0xcc>)
 80009e4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80009e8:	61d3      	str	r3, [r2, #28]
 80009ea:	4b06      	ldr	r3, [pc, #24]	@ (8000a04 <HAL_I2C_MspInit+0xcc>)
 80009ec:	69db      	ldr	r3, [r3, #28]
 80009ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80009f2:	60bb      	str	r3, [r7, #8]
 80009f4:	68bb      	ldr	r3, [r7, #8]
}
 80009f6:	bf00      	nop
 80009f8:	3728      	adds	r7, #40	@ 0x28
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40005400 	.word	0x40005400
 8000a04:	40021000 	.word	0x40021000
 8000a08:	40010c00 	.word	0x40010c00
 8000a0c:	40005800 	.word	0x40005800

08000a10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a14:	f002 fb46 	bl	80030a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a18:	f000 f83a 	bl	8000a90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a1c:	f7ff fed8 	bl	80007d0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a20:	f7ff ff2e 	bl	8000880 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000a24:	f002 f97e 	bl	8002d24 <MX_TIM1_Init>
  MX_I2C2_Init();
 8000a28:	f7ff ff58 	bl	80008dc <MX_I2C2_Init>
  MX_TIM3_Init();
 8000a2c:	f002 fa1c 	bl	8002e68 <MX_TIM3_Init>
  MX_SPI2_Init();
 8000a30:	f002 f85c 	bl	8002aec <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init(); // 初始化OLED
 8000a34:	f000 f946 	bl	8000cc4 <OLED_Init>
  OLED_InitBuffer(); // 初始化双缓冲
 8000a38:	f000 f876 	bl	8000b28 <OLED_InitBuffer>
  OLED_ClearBuffer(); // 清空缓冲区
 8000a3c:	f000 f888 	bl	8000b50 <OLED_ClearBuffer>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); // 启动PWM
 8000a40:	2104      	movs	r1, #4
 8000a42:	480f      	ldr	r0, [pc, #60]	@ (8000a80 <main+0x70>)
 8000a44:	f003 fff8 	bl	8004a38 <HAL_TIM_PWM_Start>

  OLED_InitAnimationManager(&g_AnimationManager); // 初始化动画管理器
 8000a48:	480e      	ldr	r0, [pc, #56]	@ (8000a84 <main+0x74>)
 8000a4a:	f001 fe35 	bl	80026b8 <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&Menu_AnimationManager); // 初始化菜单动画管理器
 8000a4e:	480e      	ldr	r0, [pc, #56]	@ (8000a88 <main+0x78>)
 8000a50:	f001 fe32 	bl	80026b8 <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&Cursor_AnimationManager); // 初始化光标动画管理器
 8000a54:	480d      	ldr	r0, [pc, #52]	@ (8000a8c <main+0x7c>)
 8000a56:	f001 fe2f 	bl	80026b8 <OLED_InitAnimationManager>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {    
    #pragma region OLED_UI_SETTINGS // UI设置
    OLED_ClearBuffer();
 8000a5a:	f000 f879 	bl	8000b50 <OLED_ClearBuffer>
    System_UI_Loop(); // UI循环
 8000a5e:	f000 fc31 	bl	80012c4 <System_UI_Loop>

    OLED_UpdateAnimationManager(&g_AnimationManager); // 更新动画管理器
 8000a62:	4808      	ldr	r0, [pc, #32]	@ (8000a84 <main+0x74>)
 8000a64:	f001 feda 	bl	800281c <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&Menu_AnimationManager); // 更新菜单动画管理器
 8000a68:	4807      	ldr	r0, [pc, #28]	@ (8000a88 <main+0x78>)
 8000a6a:	f001 fed7 	bl	800281c <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&Cursor_AnimationManager); // 更新光标动画管理器
 8000a6e:	4807      	ldr	r0, [pc, #28]	@ (8000a8c <main+0x7c>)
 8000a70:	f001 fed4 	bl	800281c <OLED_UpdateAnimationManager>
    OLED_DisplayFPS(); // 显示FPS
 8000a74:	f000 fbf8 	bl	8001268 <OLED_DisplayFPS>
    OLED_UpdateDisplayVSync(); // 更新显示
 8000a78:	f000 f876 	bl	8000b68 <OLED_UpdateDisplayVSync>
    OLED_ClearBuffer();
 8000a7c:	bf00      	nop
 8000a7e:	e7ec      	b.n	8000a5a <main+0x4a>
 8000a80:	20001b80 	.word	0x20001b80
 8000a84:	20001530 	.word	0x20001530
 8000a88:	20000948 	.word	0x20000948
 8000a8c:	20000f3c 	.word	0x20000f3c

08000a90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b090      	sub	sp, #64	@ 0x40
 8000a94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a96:	f107 0318 	add.w	r3, r7, #24
 8000a9a:	2228      	movs	r2, #40	@ 0x28
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f004 fe1a 	bl	80056d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aa4:	1d3b      	adds	r3, r7, #4
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]
 8000aae:	60da      	str	r2, [r3, #12]
 8000ab0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ab6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000aba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000abc:	2300      	movs	r3, #0
 8000abe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ac8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000acc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ace:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ad4:	f107 0318 	add.w	r3, r7, #24
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f003 fa85 	bl	8003fe8 <HAL_RCC_OscConfig>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000ae4:	f000 f819 	bl	8000b1a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ae8:	230f      	movs	r3, #15
 8000aea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aec:	2302      	movs	r3, #2
 8000aee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000af0:	2300      	movs	r3, #0
 8000af2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000af4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000af8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000afa:	2300      	movs	r3, #0
 8000afc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000afe:	1d3b      	adds	r3, r7, #4
 8000b00:	2102      	movs	r1, #2
 8000b02:	4618      	mov	r0, r3
 8000b04:	f003 fcf2 	bl	80044ec <HAL_RCC_ClockConfig>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000b0e:	f000 f804 	bl	8000b1a <Error_Handler>
  }
}
 8000b12:	bf00      	nop
 8000b14:	3740      	adds	r7, #64	@ 0x40
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}

08000b1a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b1e:	b672      	cpsid	i
}
 8000b20:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b22:	bf00      	nop
 8000b24:	e7fd      	b.n	8000b22 <Error_Handler+0x8>
	...

08000b28 <OLED_InitBuffer>:
        0x22, 0x00, 0x07  // 页地址范围: 0-7
};

// 初始化缓冲区
void OLED_InitBuffer(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
    // 清空缓冲区
    memset(OLED_BackBuffer, 0, sizeof(OLED_BackBuffer));
 8000b2c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b30:	2100      	movs	r1, #0
 8000b32:	4805      	ldr	r0, [pc, #20]	@ (8000b48 <OLED_InitBuffer+0x20>)
 8000b34:	f004 fdd0 	bl	80056d8 <memset>
    memset(OLED_FrontBuffer, 0, sizeof(OLED_FrontBuffer));
 8000b38:	f240 4201 	movw	r2, #1025	@ 0x401
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4803      	ldr	r0, [pc, #12]	@ (8000b4c <OLED_InitBuffer+0x24>)
 8000b40:	f004 fdca 	bl	80056d8 <memset>
}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	2000012c 	.word	0x2000012c
 8000b4c:	2000052c 	.word	0x2000052c

08000b50 <OLED_ClearBuffer>:

// 清空缓冲区
void OLED_ClearBuffer(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
    // 重置缓冲区为全0 (全黑)
    memset(OLED_BackBuffer, 0, sizeof(OLED_BackBuffer));
 8000b54:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b58:	2100      	movs	r1, #0
 8000b5a:	4802      	ldr	r0, [pc, #8]	@ (8000b64 <OLED_ClearBuffer+0x14>)
 8000b5c:	f004 fdbc 	bl	80056d8 <memset>
}
 8000b60:	bf00      	nop
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	2000012c 	.word	0x2000012c

08000b68 <OLED_UpdateDisplayVSync>:
//     }
//     return oled_update_flag;
// }

void OLED_UpdateDisplayVSync(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af02      	add	r7, sp, #8
    // }
    // oled_update_flag = 1;
    // oled_last_update_time = HAL_GetTick();

    // 交换前后缓冲区
    OLED_FrontBuffer[0] = 0x40;
 8000b6e:	4b14      	ldr	r3, [pc, #80]	@ (8000bc0 <OLED_UpdateDisplayVSync+0x58>)
 8000b70:	2240      	movs	r2, #64	@ 0x40
 8000b72:	701a      	strb	r2, [r3, #0]
    memcpy(OLED_FrontBuffer + 1, OLED_BackBuffer, 128 * 8); // 复制当前缓冲区到前缓冲区
 8000b74:	4a13      	ldr	r2, [pc, #76]	@ (8000bc4 <OLED_UpdateDisplayVSync+0x5c>)
 8000b76:	4b14      	ldr	r3, [pc, #80]	@ (8000bc8 <OLED_UpdateDisplayVSync+0x60>)
 8000b78:	4610      	mov	r0, r2
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b80:	461a      	mov	r2, r3
 8000b82:	f004 fdf1 	bl	8005768 <memcpy>

    // 一次性发送所有命令
    for (uint8_t i = 0; i < sizeof(cmds); i++)
 8000b86:	2300      	movs	r3, #0
 8000b88:	71fb      	strb	r3, [r7, #7]
 8000b8a:	e008      	b.n	8000b9e <OLED_UpdateDisplayVSync+0x36>
    {
        OLED_SendCommand(cmds[i]);
 8000b8c:	79fb      	ldrb	r3, [r7, #7]
 8000b8e:	4a0f      	ldr	r2, [pc, #60]	@ (8000bcc <OLED_UpdateDisplayVSync+0x64>)
 8000b90:	5cd3      	ldrb	r3, [r2, r3]
 8000b92:	4618      	mov	r0, r3
 8000b94:	f000 f87c 	bl	8000c90 <OLED_SendCommand>
    for (uint8_t i = 0; i < sizeof(cmds); i++)
 8000b98:	79fb      	ldrb	r3, [r7, #7]
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	71fb      	strb	r3, [r7, #7]
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	2b07      	cmp	r3, #7
 8000ba2:	d9f3      	bls.n	8000b8c <OLED_UpdateDisplayVSync+0x24>
    }

    // 一次发送全部数据
    HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDR << 1, OLED_FrontBuffer, 1025, HAL_MAX_DELAY);
 8000ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba8:	9300      	str	r3, [sp, #0]
 8000baa:	f240 4301 	movw	r3, #1025	@ 0x401
 8000bae:	4a04      	ldr	r2, [pc, #16]	@ (8000bc0 <OLED_UpdateDisplayVSync+0x58>)
 8000bb0:	2178      	movs	r1, #120	@ 0x78
 8000bb2:	4807      	ldr	r0, [pc, #28]	@ (8000bd0 <OLED_UpdateDisplayVSync+0x68>)
 8000bb4:	f002 fec0 	bl	8003938 <HAL_I2C_Master_Transmit>
}
 8000bb8:	bf00      	nop
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	2000052c 	.word	0x2000052c
 8000bc4:	2000052d 	.word	0x2000052d
 8000bc8:	2000012c 	.word	0x2000012c
 8000bcc:	20000000 	.word	0x20000000
 8000bd0:	20000084 	.word	0x20000084

08000bd4 <OLED_WritePixel>:

void OLED_WritePixel(int16_t x, int16_t y, uint8_t color)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	80fb      	strh	r3, [r7, #6]
 8000bde:	460b      	mov	r3, r1
 8000be0:	80bb      	strh	r3, [r7, #4]
 8000be2:	4613      	mov	r3, r2
 8000be4:	70fb      	strb	r3, [r7, #3]
    // 边界检查
    if (x >= 128 || x < 0 || y >= 64 || y < 0) // 添加负坐标检查
 8000be6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bea:	2b7f      	cmp	r3, #127	@ 0x7f
 8000bec:	dc48      	bgt.n	8000c80 <OLED_WritePixel+0xac>
 8000bee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	db44      	blt.n	8000c80 <OLED_WritePixel+0xac>
 8000bf6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000bfa:	2b3f      	cmp	r3, #63	@ 0x3f
 8000bfc:	dc40      	bgt.n	8000c80 <OLED_WritePixel+0xac>
 8000bfe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	db3c      	blt.n	8000c80 <OLED_WritePixel+0xac>
        return;

    // 计算像素所在的字节位置
    uint16_t byte_index = x + (y / 8) * 128;
 8000c06:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	da00      	bge.n	8000c10 <OLED_WritePixel+0x3c>
 8000c0e:	3307      	adds	r3, #7
 8000c10:	10db      	asrs	r3, r3, #3
 8000c12:	b21b      	sxth	r3, r3
 8000c14:	b29b      	uxth	r3, r3
 8000c16:	01db      	lsls	r3, r3, #7
 8000c18:	b29a      	uxth	r2, r3
 8000c1a:	88fb      	ldrh	r3, [r7, #6]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	81fb      	strh	r3, [r7, #14]
    uint8_t bit_position = y % 8;
 8000c20:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000c24:	425a      	negs	r2, r3
 8000c26:	f003 0307 	and.w	r3, r3, #7
 8000c2a:	f002 0207 	and.w	r2, r2, #7
 8000c2e:	bf58      	it	pl
 8000c30:	4253      	negpl	r3, r2
 8000c32:	b21b      	sxth	r3, r3
 8000c34:	737b      	strb	r3, [r7, #13]

    if (color) // 如果需要点亮像素
 8000c36:	78fb      	ldrb	r3, [r7, #3]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d00f      	beq.n	8000c5c <OLED_WritePixel+0x88>
        OLED_BackBuffer[byte_index] |= (1 << bit_position);
 8000c3c:	89fb      	ldrh	r3, [r7, #14]
 8000c3e:	4a13      	ldr	r2, [pc, #76]	@ (8000c8c <OLED_WritePixel+0xb8>)
 8000c40:	5cd3      	ldrb	r3, [r2, r3]
 8000c42:	b25a      	sxtb	r2, r3
 8000c44:	7b7b      	ldrb	r3, [r7, #13]
 8000c46:	2101      	movs	r1, #1
 8000c48:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4c:	b25b      	sxtb	r3, r3
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	b25a      	sxtb	r2, r3
 8000c52:	89fb      	ldrh	r3, [r7, #14]
 8000c54:	b2d1      	uxtb	r1, r2
 8000c56:	4a0d      	ldr	r2, [pc, #52]	@ (8000c8c <OLED_WritePixel+0xb8>)
 8000c58:	54d1      	strb	r1, [r2, r3]
 8000c5a:	e012      	b.n	8000c82 <OLED_WritePixel+0xae>
    else // 如果需要熄灭像素
        OLED_BackBuffer[byte_index] &= ~(1 << bit_position);
 8000c5c:	89fb      	ldrh	r3, [r7, #14]
 8000c5e:	4a0b      	ldr	r2, [pc, #44]	@ (8000c8c <OLED_WritePixel+0xb8>)
 8000c60:	5cd3      	ldrb	r3, [r2, r3]
 8000c62:	b25a      	sxtb	r2, r3
 8000c64:	7b7b      	ldrb	r3, [r7, #13]
 8000c66:	2101      	movs	r1, #1
 8000c68:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6c:	b25b      	sxtb	r3, r3
 8000c6e:	43db      	mvns	r3, r3
 8000c70:	b25b      	sxtb	r3, r3
 8000c72:	4013      	ands	r3, r2
 8000c74:	b25a      	sxtb	r2, r3
 8000c76:	89fb      	ldrh	r3, [r7, #14]
 8000c78:	b2d1      	uxtb	r1, r2
 8000c7a:	4a04      	ldr	r2, [pc, #16]	@ (8000c8c <OLED_WritePixel+0xb8>)
 8000c7c:	54d1      	strb	r1, [r2, r3]
 8000c7e:	e000      	b.n	8000c82 <OLED_WritePixel+0xae>
        return;
 8000c80:	bf00      	nop
}
 8000c82:	3714      	adds	r7, #20
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bc80      	pop	{r7}
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	2000012c 	.word	0x2000012c

08000c90 <OLED_SendCommand>:

void OLED_SendCommand(uint8_t command)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af02      	add	r7, sp, #8
 8000c96:	4603      	mov	r3, r0
 8000c98:	71fb      	strb	r3, [r7, #7]
    uint8_t data[2];
    data[0] = 0x00; // Co = 0, D/C# = 0
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	733b      	strb	r3, [r7, #12]
    data[1] = command;
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDR << 1, data, 2, HAL_MAX_DELAY);
 8000ca2:	f107 020c 	add.w	r2, r7, #12
 8000ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8000caa:	9300      	str	r3, [sp, #0]
 8000cac:	2302      	movs	r3, #2
 8000cae:	2178      	movs	r1, #120	@ 0x78
 8000cb0:	4803      	ldr	r0, [pc, #12]	@ (8000cc0 <OLED_SendCommand+0x30>)
 8000cb2:	f002 fe41 	bl	8003938 <HAL_I2C_Master_Transmit>
}
 8000cb6:	bf00      	nop
 8000cb8:	3710      	adds	r7, #16
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20000084 	.word	0x20000084

08000cc4 <OLED_Init>:
    OLED_UpdateDisplayVSync();
}

// 更新OLED初始化函数来使用双缓冲
void OLED_Init()
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
    HAL_Delay(100); // 等待OLED上电稳定
 8000cc8:	2064      	movs	r0, #100	@ 0x64
 8000cca:	f002 fa4d 	bl	8003168 <HAL_Delay>

    // 初始化命令序列
    OLED_SendCommand(0xAE); // 关闭显示
 8000cce:	20ae      	movs	r0, #174	@ 0xae
 8000cd0:	f7ff ffde 	bl	8000c90 <OLED_SendCommand>
    OLED_SendCommand(0xD5); // 设置显示时钟分频比/振荡器频率
 8000cd4:	20d5      	movs	r0, #213	@ 0xd5
 8000cd6:	f7ff ffdb 	bl	8000c90 <OLED_SendCommand>
    OLED_SendCommand(0x80); // 推荐值
 8000cda:	2080      	movs	r0, #128	@ 0x80
 8000cdc:	f7ff ffd8 	bl	8000c90 <OLED_SendCommand>
    OLED_SendCommand(0xA8); // 设置多路复用比
 8000ce0:	20a8      	movs	r0, #168	@ 0xa8
 8000ce2:	f7ff ffd5 	bl	8000c90 <OLED_SendCommand>
    OLED_SendCommand(0x3F); // 默认 0x3F (1/64 duty)
 8000ce6:	203f      	movs	r0, #63	@ 0x3f
 8000ce8:	f7ff ffd2 	bl	8000c90 <OLED_SendCommand>
    OLED_SendCommand(0xD3); // 设置显示偏移
 8000cec:	20d3      	movs	r0, #211	@ 0xd3
 8000cee:	f7ff ffcf 	bl	8000c90 <OLED_SendCommand>
    OLED_SendCommand(0x00); // 无偏移
 8000cf2:	2000      	movs	r0, #0
 8000cf4:	f7ff ffcc 	bl	8000c90 <OLED_SendCommand>
    OLED_SendCommand(0x40); // 设置显示开始行 (0x40-0x7F)
 8000cf8:	2040      	movs	r0, #64	@ 0x40
 8000cfa:	f7ff ffc9 	bl	8000c90 <OLED_SendCommand>
    OLED_SendCommand(0x8D); // 电荷泵设置
 8000cfe:	208d      	movs	r0, #141	@ 0x8d
 8000d00:	f7ff ffc6 	bl	8000c90 <OLED_SendCommand>
    OLED_SendCommand(0x14); // 启用电荷泵
 8000d04:	2014      	movs	r0, #20
 8000d06:	f7ff ffc3 	bl	8000c90 <OLED_SendCommand>
    OLED_SendCommand(0x20); // 设置内存寻址模式
 8000d0a:	2020      	movs	r0, #32
 8000d0c:	f7ff ffc0 	bl	8000c90 <OLED_SendCommand>
    OLED_SendCommand(0x00); // 水平寻址模式
 8000d10:	2000      	movs	r0, #0
 8000d12:	f7ff ffbd 	bl	8000c90 <OLED_SendCommand>
    OLED_SendCommand(0xA1); // 段重映射，列地址127映射到SEG0
 8000d16:	20a1      	movs	r0, #161	@ 0xa1
 8000d18:	f7ff ffba 	bl	8000c90 <OLED_SendCommand>
    OLED_SendCommand(0xC8); // COM输出扫描方向，从COM[N-1]到COM0
 8000d1c:	20c8      	movs	r0, #200	@ 0xc8
 8000d1e:	f7ff ffb7 	bl	8000c90 <OLED_SendCommand>
    OLED_SendCommand(0xDA); // COM硬件配置
 8000d22:	20da      	movs	r0, #218	@ 0xda
 8000d24:	f7ff ffb4 	bl	8000c90 <OLED_SendCommand>
    OLED_SendCommand(0x12); // 交替COM配置，使能COM左/右重映射
 8000d28:	2012      	movs	r0, #18
 8000d2a:	f7ff ffb1 	bl	8000c90 <OLED_SendCommand>
    OLED_SendCommand(0x81); // 设置对比度控制
 8000d2e:	2081      	movs	r0, #129	@ 0x81
 8000d30:	f7ff ffae 	bl	8000c90 <OLED_SendCommand>
    OLED_SendCommand(0xCF); // 对比度值(0-255)
 8000d34:	20cf      	movs	r0, #207	@ 0xcf
 8000d36:	f7ff ffab 	bl	8000c90 <OLED_SendCommand>
    OLED_SendCommand(0xD9); // 设置预充电周期
 8000d3a:	20d9      	movs	r0, #217	@ 0xd9
 8000d3c:	f7ff ffa8 	bl	8000c90 <OLED_SendCommand>
    OLED_SendCommand(0xF1); // 第1和第2阶段的预充电周期
 8000d40:	20f1      	movs	r0, #241	@ 0xf1
 8000d42:	f7ff ffa5 	bl	8000c90 <OLED_SendCommand>
    OLED_SendCommand(0xDB); // 设置VCOMH解除选择电平
 8000d46:	20db      	movs	r0, #219	@ 0xdb
 8000d48:	f7ff ffa2 	bl	8000c90 <OLED_SendCommand>
    OLED_SendCommand(0x30); // 约0.83xVcc
 8000d4c:	2030      	movs	r0, #48	@ 0x30
 8000d4e:	f7ff ff9f 	bl	8000c90 <OLED_SendCommand>
    OLED_SendCommand(0xA4); // 显示RAM内容
 8000d52:	20a4      	movs	r0, #164	@ 0xa4
 8000d54:	f7ff ff9c 	bl	8000c90 <OLED_SendCommand>
    OLED_SendCommand(0xA6); // 正常显示(非反显)
 8000d58:	20a6      	movs	r0, #166	@ 0xa6
 8000d5a:	f7ff ff99 	bl	8000c90 <OLED_SendCommand>
    OLED_SendCommand(0x2E); // 禁用滚动
 8000d5e:	202e      	movs	r0, #46	@ 0x2e
 8000d60:	f7ff ff96 	bl	8000c90 <OLED_SendCommand>

    // 初始化缓冲区
    OLED_InitBuffer();
 8000d64:	f7ff fee0 	bl	8000b28 <OLED_InitBuffer>

    // 清屏
    OLED_ClearBuffer();
 8000d68:	f7ff fef2 	bl	8000b50 <OLED_ClearBuffer>

    // 开启显示
    OLED_SendCommand(0xAF);
 8000d6c:	20af      	movs	r0, #175	@ 0xaf
 8000d6e:	f7ff ff8f 	bl	8000c90 <OLED_SendCommand>
}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
	...

08000d78 <OLED_InvertArea>:

// 区域反色功能 - 将指定矩形区域内的像素颜色反转 //! UPDATEDISPLAY REQUIRED
void OLED_InvertArea(int16_t x, int16_t y, uint8_t width, uint8_t height)
{
 8000d78:	b490      	push	{r4, r7}
 8000d7a:	b086      	sub	sp, #24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4604      	mov	r4, r0
 8000d80:	4608      	mov	r0, r1
 8000d82:	4611      	mov	r1, r2
 8000d84:	461a      	mov	r2, r3
 8000d86:	4623      	mov	r3, r4
 8000d88:	80fb      	strh	r3, [r7, #6]
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	80bb      	strh	r3, [r7, #4]
 8000d8e:	460b      	mov	r3, r1
 8000d90:	70fb      	strb	r3, [r7, #3]
 8000d92:	4613      	mov	r3, r2
 8000d94:	70bb      	strb	r3, [r7, #2]
    if (width == 0 || height == 0)
 8000d96:	78fb      	ldrb	r3, [r7, #3]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d079      	beq.n	8000e90 <OLED_InvertArea+0x118>
 8000d9c:	78bb      	ldrb	r3, [r7, #2]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d076      	beq.n	8000e90 <OLED_InvertArea+0x118>
        return;

    int16_t x_start_on_screen = x;
 8000da2:	88fb      	ldrh	r3, [r7, #6]
 8000da4:	82fb      	strh	r3, [r7, #22]
    int16_t y_start_on_screen = y;
 8000da6:	88bb      	ldrh	r3, [r7, #4]
 8000da8:	82bb      	strh	r3, [r7, #20]
    int16_t x_end_on_screen = x + width - 1;
 8000daa:	78fb      	ldrb	r3, [r7, #3]
 8000dac:	b29a      	uxth	r2, r3
 8000dae:	88fb      	ldrh	r3, [r7, #6]
 8000db0:	4413      	add	r3, r2
 8000db2:	b29b      	uxth	r3, r3
 8000db4:	3b01      	subs	r3, #1
 8000db6:	b29b      	uxth	r3, r3
 8000db8:	827b      	strh	r3, [r7, #18]
    int16_t y_end_on_screen = y + height - 1;
 8000dba:	78bb      	ldrb	r3, [r7, #2]
 8000dbc:	b29a      	uxth	r2, r3
 8000dbe:	88bb      	ldrh	r3, [r7, #4]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	3b01      	subs	r3, #1
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	823b      	strh	r3, [r7, #16]

    // Clip to screen boundaries
    if (x_start_on_screen < 0)
 8000dca:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	da01      	bge.n	8000dd6 <OLED_InvertArea+0x5e>
        x_start_on_screen = 0;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	82fb      	strh	r3, [r7, #22]
    if (y_start_on_screen < 0)
 8000dd6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	da01      	bge.n	8000de2 <OLED_InvertArea+0x6a>
        y_start_on_screen = 0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	82bb      	strh	r3, [r7, #20]
    if (x_end_on_screen >= OLED_WIDTH)
 8000de2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000de6:	2b7f      	cmp	r3, #127	@ 0x7f
 8000de8:	dd01      	ble.n	8000dee <OLED_InvertArea+0x76>
        x_end_on_screen = OLED_WIDTH - 1;
 8000dea:	237f      	movs	r3, #127	@ 0x7f
 8000dec:	827b      	strh	r3, [r7, #18]
    if (y_end_on_screen >= OLED_HEIGHT)
 8000dee:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000df2:	2b3f      	cmp	r3, #63	@ 0x3f
 8000df4:	dd01      	ble.n	8000dfa <OLED_InvertArea+0x82>
        y_end_on_screen = OLED_HEIGHT - 1;
 8000df6:	233f      	movs	r3, #63	@ 0x3f
 8000df8:	823b      	strh	r3, [r7, #16]

    // If clipped area is invalid (e.g., entirely off-screen after clipping)
    if (x_start_on_screen > x_end_on_screen || y_start_on_screen > y_end_on_screen)
 8000dfa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000dfe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000e02:	429a      	cmp	r2, r3
 8000e04:	dc46      	bgt.n	8000e94 <OLED_InvertArea+0x11c>
 8000e06:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000e0a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	dc40      	bgt.n	8000e94 <OLED_InvertArea+0x11c>
        return;

    for (int16_t j = y_start_on_screen; j <= y_end_on_screen; j++)
 8000e12:	8abb      	ldrh	r3, [r7, #20]
 8000e14:	81fb      	strh	r3, [r7, #14]
 8000e16:	e034      	b.n	8000e82 <OLED_InvertArea+0x10a>
    {
        for (int16_t i = x_start_on_screen; i <= x_end_on_screen; i++)
 8000e18:	8afb      	ldrh	r3, [r7, #22]
 8000e1a:	81bb      	strh	r3, [r7, #12]
 8000e1c:	e025      	b.n	8000e6a <OLED_InvertArea+0xf2>
        {
            // 计算当前像素在缓冲区中的位置
            // i and j are guaranteed to be within screen bounds here
            uint16_t byte_index = (uint16_t)i + ((uint16_t)j / 8) * OLED_WIDTH;
 8000e1e:	89fb      	ldrh	r3, [r7, #14]
 8000e20:	08db      	lsrs	r3, r3, #3
 8000e22:	b29b      	uxth	r3, r3
 8000e24:	01db      	lsls	r3, r3, #7
 8000e26:	b29a      	uxth	r2, r3
 8000e28:	89bb      	ldrh	r3, [r7, #12]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	817b      	strh	r3, [r7, #10]
            uint8_t bit_position = (uint8_t)j % 8;
 8000e2e:	89fb      	ldrh	r3, [r7, #14]
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	f003 0307 	and.w	r3, r3, #7
 8000e36:	727b      	strb	r3, [r7, #9]

            // Check buffer bounds just in case, though clipping should prevent out-of-bounds.
            if (byte_index < sizeof(OLED_BackBuffer))
 8000e38:	897b      	ldrh	r3, [r7, #10]
 8000e3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e3e:	d20e      	bcs.n	8000e5e <OLED_InvertArea+0xe6>
            {
                OLED_BackBuffer[byte_index] ^= (1 << bit_position);
 8000e40:	897b      	ldrh	r3, [r7, #10]
 8000e42:	4a17      	ldr	r2, [pc, #92]	@ (8000ea0 <OLED_InvertArea+0x128>)
 8000e44:	5cd3      	ldrb	r3, [r2, r3]
 8000e46:	b25a      	sxtb	r2, r3
 8000e48:	7a7b      	ldrb	r3, [r7, #9]
 8000e4a:	2101      	movs	r1, #1
 8000e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e50:	b25b      	sxtb	r3, r3
 8000e52:	4053      	eors	r3, r2
 8000e54:	b25a      	sxtb	r2, r3
 8000e56:	897b      	ldrh	r3, [r7, #10]
 8000e58:	b2d1      	uxtb	r1, r2
 8000e5a:	4a11      	ldr	r2, [pc, #68]	@ (8000ea0 <OLED_InvertArea+0x128>)
 8000e5c:	54d1      	strb	r1, [r2, r3]
        for (int16_t i = x_start_on_screen; i <= x_end_on_screen; i++)
 8000e5e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000e62:	b29b      	uxth	r3, r3
 8000e64:	3301      	adds	r3, #1
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	81bb      	strh	r3, [r7, #12]
 8000e6a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000e6e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000e72:	429a      	cmp	r2, r3
 8000e74:	ddd3      	ble.n	8000e1e <OLED_InvertArea+0xa6>
    for (int16_t j = y_start_on_screen; j <= y_end_on_screen; j++)
 8000e76:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e7a:	b29b      	uxth	r3, r3
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	b29b      	uxth	r3, r3
 8000e80:	81fb      	strh	r3, [r7, #14]
 8000e82:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000e86:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	ddc4      	ble.n	8000e18 <OLED_InvertArea+0xa0>
 8000e8e:	e002      	b.n	8000e96 <OLED_InvertArea+0x11e>
        return;
 8000e90:	bf00      	nop
 8000e92:	e000      	b.n	8000e96 <OLED_InvertArea+0x11e>
        return;
 8000e94:	bf00      	nop
            }
        }
    }
}
 8000e96:	3718      	adds	r7, #24
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bc90      	pop	{r4, r7}
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	2000012c 	.word	0x2000012c

08000ea4 <OLED_DisplayChar>:
    OLED_SendCommand(0x00 + (x & 0x0F));        // 设置低4位列地址
    OLED_SendCommand(0x10 + ((x >> 4) & 0x0F)); // 设置高4位列地址
}

void OLED_DisplayChar(int16_t x, int16_t y, char ch) //! UPDATEDISPLAY REQUIRED
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b087      	sub	sp, #28
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	80fb      	strh	r3, [r7, #6]
 8000eae:	460b      	mov	r3, r1
 8000eb0:	80bb      	strh	r3, [r7, #4]
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	70fb      	strb	r3, [r7, #3]
    const uint8_t font_width = 6;
 8000eb6:	2306      	movs	r3, #6
 8000eb8:	757b      	strb	r3, [r7, #21]
    const uint8_t font_height = 8;
 8000eba:	2308      	movs	r3, #8
 8000ebc:	753b      	strb	r3, [r7, #20]

    if (ch < 32)
 8000ebe:	78fb      	ldrb	r3, [r7, #3]
 8000ec0:	2b1f      	cmp	r3, #31
 8000ec2:	d976      	bls.n	8000fb2 <OLED_DisplayChar+0x10e>
        return;

    uint8_t c = ch - 32;
 8000ec4:	78fb      	ldrb	r3, [r7, #3]
 8000ec6:	3b20      	subs	r3, #32
 8000ec8:	74fb      	strb	r3, [r7, #19]

    for (uint8_t char_col = 0; char_col < font_width; char_col++)
 8000eca:	2300      	movs	r3, #0
 8000ecc:	75fb      	strb	r3, [r7, #23]
 8000ece:	e06b      	b.n	8000fa8 <OLED_DisplayChar+0x104>
    {
        int16_t screen_x = x + char_col;
 8000ed0:	7dfb      	ldrb	r3, [r7, #23]
 8000ed2:	b29a      	uxth	r2, r3
 8000ed4:	88fb      	ldrh	r3, [r7, #6]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	b29b      	uxth	r3, r3
 8000eda:	823b      	strh	r3, [r7, #16]
        if (screen_x < 0 || screen_x >= OLED_WIDTH)
 8000edc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	db5d      	blt.n	8000fa0 <OLED_DisplayChar+0xfc>
 8000ee4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000ee8:	2b7f      	cmp	r3, #127	@ 0x7f
 8000eea:	dc59      	bgt.n	8000fa0 <OLED_DisplayChar+0xfc>
            continue;

        if ((c * font_width + char_col) >= sizeof(OLED_FONT_6x8))
 8000eec:	7cfb      	ldrb	r3, [r7, #19]
 8000eee:	7d7a      	ldrb	r2, [r7, #21]
 8000ef0:	fb03 f202 	mul.w	r2, r3, r2
 8000ef4:	7dfb      	ldrb	r3, [r7, #23]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	461a      	mov	r2, r3
 8000efa:	f240 2321 	movw	r3, #545	@ 0x221
 8000efe:	429a      	cmp	r2, r3
 8000f00:	d859      	bhi.n	8000fb6 <OLED_DisplayChar+0x112>
            break;
        uint8_t font_data_col = OLED_FONT_6x8[c * font_width + char_col];
 8000f02:	7cfb      	ldrb	r3, [r7, #19]
 8000f04:	7d7a      	ldrb	r2, [r7, #21]
 8000f06:	fb03 f202 	mul.w	r2, r3, r2
 8000f0a:	7dfb      	ldrb	r3, [r7, #23]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	4a2c      	ldr	r2, [pc, #176]	@ (8000fc0 <OLED_DisplayChar+0x11c>)
 8000f10:	5cd3      	ldrb	r3, [r2, r3]
 8000f12:	73fb      	strb	r3, [r7, #15]

        for (uint8_t char_row_bit = 0; char_row_bit < font_height; char_row_bit++)
 8000f14:	2300      	movs	r3, #0
 8000f16:	75bb      	strb	r3, [r7, #22]
 8000f18:	e03d      	b.n	8000f96 <OLED_DisplayChar+0xf2>
        {
            int16_t screen_y = y + char_row_bit;
 8000f1a:	7dbb      	ldrb	r3, [r7, #22]
 8000f1c:	b29a      	uxth	r2, r3
 8000f1e:	88bb      	ldrh	r3, [r7, #4]
 8000f20:	4413      	add	r3, r2
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	81bb      	strh	r3, [r7, #12]
            if (screen_y < 0 || screen_y >= OLED_HEIGHT)
 8000f26:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	db2f      	blt.n	8000f8e <OLED_DisplayChar+0xea>
 8000f2e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000f32:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f34:	dc2b      	bgt.n	8000f8e <OLED_DisplayChar+0xea>
                continue;

            if ((font_data_col >> char_row_bit) & 0x01)
 8000f36:	7bfa      	ldrb	r2, [r7, #15]
 8000f38:	7dbb      	ldrb	r3, [r7, #22]
 8000f3a:	fa42 f303 	asr.w	r3, r2, r3
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d024      	beq.n	8000f90 <OLED_DisplayChar+0xec>
            {
                uint8_t page = (uint8_t)screen_y / 8;
 8000f46:	89bb      	ldrh	r3, [r7, #12]
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	08db      	lsrs	r3, r3, #3
 8000f4c:	72fb      	strb	r3, [r7, #11]
                uint8_t bit_offset_in_page = (uint8_t)screen_y % 8;
 8000f4e:	89bb      	ldrh	r3, [r7, #12]
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	f003 0307 	and.w	r3, r3, #7
 8000f56:	72bb      	strb	r3, [r7, #10]
                uint16_t buffer_index = (uint16_t)screen_x + page * OLED_WIDTH;
 8000f58:	7afb      	ldrb	r3, [r7, #11]
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	01db      	lsls	r3, r3, #7
 8000f5e:	b29a      	uxth	r2, r3
 8000f60:	8a3b      	ldrh	r3, [r7, #16]
 8000f62:	4413      	add	r3, r2
 8000f64:	813b      	strh	r3, [r7, #8]

                if (buffer_index < sizeof(OLED_BackBuffer))
 8000f66:	893b      	ldrh	r3, [r7, #8]
 8000f68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f6c:	d210      	bcs.n	8000f90 <OLED_DisplayChar+0xec>
                {
                    OLED_BackBuffer[buffer_index] |= (1 << bit_offset_in_page);
 8000f6e:	893b      	ldrh	r3, [r7, #8]
 8000f70:	4a14      	ldr	r2, [pc, #80]	@ (8000fc4 <OLED_DisplayChar+0x120>)
 8000f72:	5cd3      	ldrb	r3, [r2, r3]
 8000f74:	b25a      	sxtb	r2, r3
 8000f76:	7abb      	ldrb	r3, [r7, #10]
 8000f78:	2101      	movs	r1, #1
 8000f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7e:	b25b      	sxtb	r3, r3
 8000f80:	4313      	orrs	r3, r2
 8000f82:	b25a      	sxtb	r2, r3
 8000f84:	893b      	ldrh	r3, [r7, #8]
 8000f86:	b2d1      	uxtb	r1, r2
 8000f88:	4a0e      	ldr	r2, [pc, #56]	@ (8000fc4 <OLED_DisplayChar+0x120>)
 8000f8a:	54d1      	strb	r1, [r2, r3]
 8000f8c:	e000      	b.n	8000f90 <OLED_DisplayChar+0xec>
                continue;
 8000f8e:	bf00      	nop
        for (uint8_t char_row_bit = 0; char_row_bit < font_height; char_row_bit++)
 8000f90:	7dbb      	ldrb	r3, [r7, #22]
 8000f92:	3301      	adds	r3, #1
 8000f94:	75bb      	strb	r3, [r7, #22]
 8000f96:	7dba      	ldrb	r2, [r7, #22]
 8000f98:	7d3b      	ldrb	r3, [r7, #20]
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	d3bd      	bcc.n	8000f1a <OLED_DisplayChar+0x76>
 8000f9e:	e000      	b.n	8000fa2 <OLED_DisplayChar+0xfe>
            continue;
 8000fa0:	bf00      	nop
    for (uint8_t char_col = 0; char_col < font_width; char_col++)
 8000fa2:	7dfb      	ldrb	r3, [r7, #23]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	75fb      	strb	r3, [r7, #23]
 8000fa8:	7dfa      	ldrb	r2, [r7, #23]
 8000faa:	7d7b      	ldrb	r3, [r7, #21]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d38f      	bcc.n	8000ed0 <OLED_DisplayChar+0x2c>
 8000fb0:	e002      	b.n	8000fb8 <OLED_DisplayChar+0x114>
        return;
 8000fb2:	bf00      	nop
 8000fb4:	e000      	b.n	8000fb8 <OLED_DisplayChar+0x114>
            break;
 8000fb6:	bf00      	nop
                }
            }
        }
    }
}
 8000fb8:	371c      	adds	r7, #28
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bc80      	pop	{r7}
 8000fbe:	4770      	bx	lr
 8000fc0:	080075f0 	.word	0x080075f0
 8000fc4:	2000012c 	.word	0x2000012c

08000fc8 <OLED_DisplayCharInverted>:

void OLED_DisplayCharInverted(int16_t x, int16_t y, char ch, uint8_t inverted) //! UPDATEDISPLAY REQUIRED
{
 8000fc8:	b490      	push	{r4, r7}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4604      	mov	r4, r0
 8000fd0:	4608      	mov	r0, r1
 8000fd2:	4611      	mov	r1, r2
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	4623      	mov	r3, r4
 8000fd8:	80fb      	strh	r3, [r7, #6]
 8000fda:	4603      	mov	r3, r0
 8000fdc:	80bb      	strh	r3, [r7, #4]
 8000fde:	460b      	mov	r3, r1
 8000fe0:	70fb      	strb	r3, [r7, #3]
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	70bb      	strb	r3, [r7, #2]
    const uint8_t font_width = 6;
 8000fe6:	2306      	movs	r3, #6
 8000fe8:	753b      	strb	r3, [r7, #20]
    const uint8_t font_height = 8;
 8000fea:	2308      	movs	r3, #8
 8000fec:	74fb      	strb	r3, [r7, #19]

    if (ch < 32)
 8000fee:	78fb      	ldrb	r3, [r7, #3]
 8000ff0:	2b1f      	cmp	r3, #31
 8000ff2:	f240 8090 	bls.w	8001116 <OLED_DisplayCharInverted+0x14e>
        return;

    uint8_t c = ch - 32;
 8000ff6:	78fb      	ldrb	r3, [r7, #3]
 8000ff8:	3b20      	subs	r3, #32
 8000ffa:	74bb      	strb	r3, [r7, #18]

    for (uint8_t char_col = 0; char_col < font_width; char_col++)
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	75fb      	strb	r3, [r7, #23]
 8001000:	e083      	b.n	800110a <OLED_DisplayCharInverted+0x142>
    {
        int16_t screen_x = x + char_col;
 8001002:	7dfb      	ldrb	r3, [r7, #23]
 8001004:	b29a      	uxth	r2, r3
 8001006:	88fb      	ldrh	r3, [r7, #6]
 8001008:	4413      	add	r3, r2
 800100a:	b29b      	uxth	r3, r3
 800100c:	823b      	strh	r3, [r7, #16]
        if (screen_x < 0 || screen_x >= OLED_WIDTH)
 800100e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001012:	2b00      	cmp	r3, #0
 8001014:	db75      	blt.n	8001102 <OLED_DisplayCharInverted+0x13a>
 8001016:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800101a:	2b7f      	cmp	r3, #127	@ 0x7f
 800101c:	dc71      	bgt.n	8001102 <OLED_DisplayCharInverted+0x13a>
            continue;

        if ((c * font_width + char_col) >= sizeof(OLED_FONT_6x8))
 800101e:	7cbb      	ldrb	r3, [r7, #18]
 8001020:	7d3a      	ldrb	r2, [r7, #20]
 8001022:	fb03 f202 	mul.w	r2, r3, r2
 8001026:	7dfb      	ldrb	r3, [r7, #23]
 8001028:	4413      	add	r3, r2
 800102a:	461a      	mov	r2, r3
 800102c:	f240 2321 	movw	r3, #545	@ 0x221
 8001030:	429a      	cmp	r2, r3
 8001032:	d872      	bhi.n	800111a <OLED_DisplayCharInverted+0x152>
            break;
        uint8_t font_data_col = OLED_FONT_6x8[c * font_width + char_col];
 8001034:	7cbb      	ldrb	r3, [r7, #18]
 8001036:	7d3a      	ldrb	r2, [r7, #20]
 8001038:	fb03 f202 	mul.w	r2, r3, r2
 800103c:	7dfb      	ldrb	r3, [r7, #23]
 800103e:	4413      	add	r3, r2
 8001040:	4a38      	ldr	r2, [pc, #224]	@ (8001124 <OLED_DisplayCharInverted+0x15c>)
 8001042:	5cd3      	ldrb	r3, [r2, r3]
 8001044:	75bb      	strb	r3, [r7, #22]

        if (inverted)
 8001046:	78bb      	ldrb	r3, [r7, #2]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d002      	beq.n	8001052 <OLED_DisplayCharInverted+0x8a>
        {
            font_data_col = ~font_data_col;
 800104c:	7dbb      	ldrb	r3, [r7, #22]
 800104e:	43db      	mvns	r3, r3
 8001050:	75bb      	strb	r3, [r7, #22]
        }

        for (uint8_t char_row_bit = 0; char_row_bit < font_height; char_row_bit++)
 8001052:	2300      	movs	r3, #0
 8001054:	757b      	strb	r3, [r7, #21]
 8001056:	e04f      	b.n	80010f8 <OLED_DisplayCharInverted+0x130>
        {
            int16_t screen_y = y + char_row_bit;
 8001058:	7d7b      	ldrb	r3, [r7, #21]
 800105a:	b29a      	uxth	r2, r3
 800105c:	88bb      	ldrh	r3, [r7, #4]
 800105e:	4413      	add	r3, r2
 8001060:	b29b      	uxth	r3, r3
 8001062:	81fb      	strh	r3, [r7, #14]
            if (screen_y < 0 || screen_y >= OLED_HEIGHT)
 8001064:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001068:	2b00      	cmp	r3, #0
 800106a:	db41      	blt.n	80010f0 <OLED_DisplayCharInverted+0x128>
 800106c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001070:	2b3f      	cmp	r3, #63	@ 0x3f
 8001072:	dc3d      	bgt.n	80010f0 <OLED_DisplayCharInverted+0x128>
                continue;

            uint8_t page = (uint8_t)screen_y / 8;
 8001074:	89fb      	ldrh	r3, [r7, #14]
 8001076:	b2db      	uxtb	r3, r3
 8001078:	08db      	lsrs	r3, r3, #3
 800107a:	737b      	strb	r3, [r7, #13]
            uint8_t bit_offset_in_page = (uint8_t)screen_y % 8;
 800107c:	89fb      	ldrh	r3, [r7, #14]
 800107e:	b2db      	uxtb	r3, r3
 8001080:	f003 0307 	and.w	r3, r3, #7
 8001084:	733b      	strb	r3, [r7, #12]
            uint16_t buffer_index = (uint16_t)screen_x + page * OLED_WIDTH;
 8001086:	7b7b      	ldrb	r3, [r7, #13]
 8001088:	b29b      	uxth	r3, r3
 800108a:	01db      	lsls	r3, r3, #7
 800108c:	b29a      	uxth	r2, r3
 800108e:	8a3b      	ldrh	r3, [r7, #16]
 8001090:	4413      	add	r3, r2
 8001092:	817b      	strh	r3, [r7, #10]

            if (buffer_index < sizeof(OLED_BackBuffer))
 8001094:	897b      	ldrh	r3, [r7, #10]
 8001096:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800109a:	d22a      	bcs.n	80010f2 <OLED_DisplayCharInverted+0x12a>
            {
                if ((font_data_col >> char_row_bit) & 0x01)
 800109c:	7dba      	ldrb	r2, [r7, #22]
 800109e:	7d7b      	ldrb	r3, [r7, #21]
 80010a0:	fa42 f303 	asr.w	r3, r2, r3
 80010a4:	f003 0301 	and.w	r3, r3, #1
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d00f      	beq.n	80010cc <OLED_DisplayCharInverted+0x104>
                {
                    OLED_BackBuffer[buffer_index] |= (1 << bit_offset_in_page);
 80010ac:	897b      	ldrh	r3, [r7, #10]
 80010ae:	4a1e      	ldr	r2, [pc, #120]	@ (8001128 <OLED_DisplayCharInverted+0x160>)
 80010b0:	5cd3      	ldrb	r3, [r2, r3]
 80010b2:	b25a      	sxtb	r2, r3
 80010b4:	7b3b      	ldrb	r3, [r7, #12]
 80010b6:	2101      	movs	r1, #1
 80010b8:	fa01 f303 	lsl.w	r3, r1, r3
 80010bc:	b25b      	sxtb	r3, r3
 80010be:	4313      	orrs	r3, r2
 80010c0:	b25a      	sxtb	r2, r3
 80010c2:	897b      	ldrh	r3, [r7, #10]
 80010c4:	b2d1      	uxtb	r1, r2
 80010c6:	4a18      	ldr	r2, [pc, #96]	@ (8001128 <OLED_DisplayCharInverted+0x160>)
 80010c8:	54d1      	strb	r1, [r2, r3]
 80010ca:	e012      	b.n	80010f2 <OLED_DisplayCharInverted+0x12a>
                }
                else
                {
                    OLED_BackBuffer[buffer_index] &= ~(1 << bit_offset_in_page);
 80010cc:	897b      	ldrh	r3, [r7, #10]
 80010ce:	4a16      	ldr	r2, [pc, #88]	@ (8001128 <OLED_DisplayCharInverted+0x160>)
 80010d0:	5cd3      	ldrb	r3, [r2, r3]
 80010d2:	b25a      	sxtb	r2, r3
 80010d4:	7b3b      	ldrb	r3, [r7, #12]
 80010d6:	2101      	movs	r1, #1
 80010d8:	fa01 f303 	lsl.w	r3, r1, r3
 80010dc:	b25b      	sxtb	r3, r3
 80010de:	43db      	mvns	r3, r3
 80010e0:	b25b      	sxtb	r3, r3
 80010e2:	4013      	ands	r3, r2
 80010e4:	b25a      	sxtb	r2, r3
 80010e6:	897b      	ldrh	r3, [r7, #10]
 80010e8:	b2d1      	uxtb	r1, r2
 80010ea:	4a0f      	ldr	r2, [pc, #60]	@ (8001128 <OLED_DisplayCharInverted+0x160>)
 80010ec:	54d1      	strb	r1, [r2, r3]
 80010ee:	e000      	b.n	80010f2 <OLED_DisplayCharInverted+0x12a>
                continue;
 80010f0:	bf00      	nop
        for (uint8_t char_row_bit = 0; char_row_bit < font_height; char_row_bit++)
 80010f2:	7d7b      	ldrb	r3, [r7, #21]
 80010f4:	3301      	adds	r3, #1
 80010f6:	757b      	strb	r3, [r7, #21]
 80010f8:	7d7a      	ldrb	r2, [r7, #21]
 80010fa:	7cfb      	ldrb	r3, [r7, #19]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d3ab      	bcc.n	8001058 <OLED_DisplayCharInverted+0x90>
 8001100:	e000      	b.n	8001104 <OLED_DisplayCharInverted+0x13c>
            continue;
 8001102:	bf00      	nop
    for (uint8_t char_col = 0; char_col < font_width; char_col++)
 8001104:	7dfb      	ldrb	r3, [r7, #23]
 8001106:	3301      	adds	r3, #1
 8001108:	75fb      	strb	r3, [r7, #23]
 800110a:	7dfa      	ldrb	r2, [r7, #23]
 800110c:	7d3b      	ldrb	r3, [r7, #20]
 800110e:	429a      	cmp	r2, r3
 8001110:	f4ff af77 	bcc.w	8001002 <OLED_DisplayCharInverted+0x3a>
 8001114:	e002      	b.n	800111c <OLED_DisplayCharInverted+0x154>
        return;
 8001116:	bf00      	nop
 8001118:	e000      	b.n	800111c <OLED_DisplayCharInverted+0x154>
            break;
 800111a:	bf00      	nop
                }
            }
        }
    }
}
 800111c:	3718      	adds	r7, #24
 800111e:	46bd      	mov	sp, r7
 8001120:	bc90      	pop	{r4, r7}
 8001122:	4770      	bx	lr
 8001124:	080075f0 	.word	0x080075f0
 8001128:	2000012c 	.word	0x2000012c

0800112c <OLED_DisplayString>:

void OLED_DisplayString(int16_t x, int16_t y, char *str) //! UPDATEDISPLAY REQUIRED
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	603a      	str	r2, [r7, #0]
 8001136:	80fb      	strh	r3, [r7, #6]
 8001138:	460b      	mov	r3, r1
 800113a:	80bb      	strh	r3, [r7, #4]
    uint8_t j = 0;
 800113c:	2300      	movs	r3, #0
 800113e:	73fb      	strb	r3, [r7, #15]
    const uint8_t font_width = 6;
 8001140:	2306      	movs	r3, #6
 8001142:	73bb      	strb	r3, [r7, #14]
    const uint8_t font_height = 8;
 8001144:	2308      	movs	r3, #8
 8001146:	737b      	strb	r3, [r7, #13]

    if (y >= OLED_HEIGHT || (y + font_height - 1) < 0)
 8001148:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800114c:	2b3f      	cmp	r3, #63	@ 0x3f
 800114e:	dc34      	bgt.n	80011ba <OLED_DisplayString+0x8e>
 8001150:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001154:	7b7b      	ldrb	r3, [r7, #13]
 8001156:	4413      	add	r3, r2
 8001158:	2b00      	cmp	r3, #0
 800115a:	dd2e      	ble.n	80011ba <OLED_DisplayString+0x8e>
    {
        return;
    }

    int16_t current_char_x;
    while (str[j] != '\0')
 800115c:	e026      	b.n	80011ac <OLED_DisplayString+0x80>
    {
        current_char_x = x + (j * font_width);
 800115e:	7bfb      	ldrb	r3, [r7, #15]
 8001160:	b29b      	uxth	r3, r3
 8001162:	7bba      	ldrb	r2, [r7, #14]
 8001164:	b292      	uxth	r2, r2
 8001166:	fb02 f303 	mul.w	r3, r2, r3
 800116a:	b29a      	uxth	r2, r3
 800116c:	88fb      	ldrh	r3, [r7, #6]
 800116e:	4413      	add	r3, r2
 8001170:	b29b      	uxth	r3, r3
 8001172:	817b      	strh	r3, [r7, #10]
        if (current_char_x >= OLED_WIDTH)
 8001174:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001178:	2b7f      	cmp	r3, #127	@ 0x7f
 800117a:	dc20      	bgt.n	80011be <OLED_DisplayString+0x92>
        {
            break;
        }
        if ((current_char_x + font_width - 1) < 0)
 800117c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001180:	7bbb      	ldrb	r3, [r7, #14]
 8001182:	4413      	add	r3, r2
 8001184:	2b00      	cmp	r3, #0
 8001186:	dc03      	bgt.n	8001190 <OLED_DisplayString+0x64>
        {
            j++;
 8001188:	7bfb      	ldrb	r3, [r7, #15]
 800118a:	3301      	adds	r3, #1
 800118c:	73fb      	strb	r3, [r7, #15]
            continue;
 800118e:	e00d      	b.n	80011ac <OLED_DisplayString+0x80>
        }
        OLED_DisplayChar(current_char_x, y, str[j]);
 8001190:	7bfb      	ldrb	r3, [r7, #15]
 8001192:	683a      	ldr	r2, [r7, #0]
 8001194:	4413      	add	r3, r2
 8001196:	781a      	ldrb	r2, [r3, #0]
 8001198:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800119c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff fe7f 	bl	8000ea4 <OLED_DisplayChar>
        j++;
 80011a6:	7bfb      	ldrb	r3, [r7, #15]
 80011a8:	3301      	adds	r3, #1
 80011aa:	73fb      	strb	r3, [r7, #15]
    while (str[j] != '\0')
 80011ac:	7bfb      	ldrb	r3, [r7, #15]
 80011ae:	683a      	ldr	r2, [r7, #0]
 80011b0:	4413      	add	r3, r2
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d1d2      	bne.n	800115e <OLED_DisplayString+0x32>
 80011b8:	e002      	b.n	80011c0 <OLED_DisplayString+0x94>
        return;
 80011ba:	bf00      	nop
 80011bc:	e000      	b.n	80011c0 <OLED_DisplayString+0x94>
            break;
 80011be:	bf00      	nop
    }
}
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <OLED_DisplayStringInverted>:

void OLED_DisplayStringInverted(int16_t x, int16_t y, char *str, uint8_t inverted) //! UPDATEDISPLAY REQUIRED
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b086      	sub	sp, #24
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	60ba      	str	r2, [r7, #8]
 80011ce:	461a      	mov	r2, r3
 80011d0:	4603      	mov	r3, r0
 80011d2:	81fb      	strh	r3, [r7, #14]
 80011d4:	460b      	mov	r3, r1
 80011d6:	81bb      	strh	r3, [r7, #12]
 80011d8:	4613      	mov	r3, r2
 80011da:	71fb      	strb	r3, [r7, #7]
    uint8_t j = 0;
 80011dc:	2300      	movs	r3, #0
 80011de:	75fb      	strb	r3, [r7, #23]
    const uint8_t font_width = 6;
 80011e0:	2306      	movs	r3, #6
 80011e2:	75bb      	strb	r3, [r7, #22]
    const uint8_t font_height = 8;
 80011e4:	2308      	movs	r3, #8
 80011e6:	757b      	strb	r3, [r7, #21]

    if (y >= OLED_HEIGHT || (y + font_height - 1) < 0)
 80011e8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80011ec:	2b3f      	cmp	r3, #63	@ 0x3f
 80011ee:	dc34      	bgt.n	800125a <OLED_DisplayStringInverted+0x94>
 80011f0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80011f4:	7d7b      	ldrb	r3, [r7, #21]
 80011f6:	4413      	add	r3, r2
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	dd2e      	ble.n	800125a <OLED_DisplayStringInverted+0x94>
    {
        return;
    }

    int16_t current_char_x;
    while (str[j] != '\0')
 80011fc:	e026      	b.n	800124c <OLED_DisplayStringInverted+0x86>
    {
        current_char_x = x + (j * font_width);
 80011fe:	7dfb      	ldrb	r3, [r7, #23]
 8001200:	b29b      	uxth	r3, r3
 8001202:	7dba      	ldrb	r2, [r7, #22]
 8001204:	b292      	uxth	r2, r2
 8001206:	fb02 f303 	mul.w	r3, r2, r3
 800120a:	b29a      	uxth	r2, r3
 800120c:	89fb      	ldrh	r3, [r7, #14]
 800120e:	4413      	add	r3, r2
 8001210:	b29b      	uxth	r3, r3
 8001212:	827b      	strh	r3, [r7, #18]
        if (current_char_x >= OLED_WIDTH)
 8001214:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001218:	2b7f      	cmp	r3, #127	@ 0x7f
 800121a:	dc20      	bgt.n	800125e <OLED_DisplayStringInverted+0x98>
        {
            break;
        }
        if ((current_char_x + font_width - 1) < 0)
 800121c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001220:	7dbb      	ldrb	r3, [r7, #22]
 8001222:	4413      	add	r3, r2
 8001224:	2b00      	cmp	r3, #0
 8001226:	dc03      	bgt.n	8001230 <OLED_DisplayStringInverted+0x6a>
        {
            j++;
 8001228:	7dfb      	ldrb	r3, [r7, #23]
 800122a:	3301      	adds	r3, #1
 800122c:	75fb      	strb	r3, [r7, #23]
            continue;
 800122e:	e00d      	b.n	800124c <OLED_DisplayStringInverted+0x86>
        }
        OLED_DisplayCharInverted(current_char_x, y, str[j], inverted);
 8001230:	7dfb      	ldrb	r3, [r7, #23]
 8001232:	68ba      	ldr	r2, [r7, #8]
 8001234:	4413      	add	r3, r2
 8001236:	781a      	ldrb	r2, [r3, #0]
 8001238:	79fb      	ldrb	r3, [r7, #7]
 800123a:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 800123e:	f9b7 0012 	ldrsh.w	r0, [r7, #18]
 8001242:	f7ff fec1 	bl	8000fc8 <OLED_DisplayCharInverted>
        j++;
 8001246:	7dfb      	ldrb	r3, [r7, #23]
 8001248:	3301      	adds	r3, #1
 800124a:	75fb      	strb	r3, [r7, #23]
    while (str[j] != '\0')
 800124c:	7dfb      	ldrb	r3, [r7, #23]
 800124e:	68ba      	ldr	r2, [r7, #8]
 8001250:	4413      	add	r3, r2
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d1d2      	bne.n	80011fe <OLED_DisplayStringInverted+0x38>
 8001258:	e002      	b.n	8001260 <OLED_DisplayStringInverted+0x9a>
        return;
 800125a:	bf00      	nop
 800125c:	e000      	b.n	8001260 <OLED_DisplayStringInverted+0x9a>
            break;
 800125e:	bf00      	nop
    }
}
 8001260:	3718      	adds	r7, #24
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
	...

08001268 <OLED_DisplayFPS>:

    OLED_DisplayString(x, y, str);
}

void OLED_DisplayFPS() //! UPDATEDISPLAY REQUIRED
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
    static uint32_t last_time = 0;
    static uint32_t frame_count = 0;
    static char fps_str[16];
    frame_count++;
 800126c:	4b11      	ldr	r3, [pc, #68]	@ (80012b4 <OLED_DisplayFPS+0x4c>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	3301      	adds	r3, #1
 8001272:	4a10      	ldr	r2, [pc, #64]	@ (80012b4 <OLED_DisplayFPS+0x4c>)
 8001274:	6013      	str	r3, [r2, #0]

    // 每秒更新一次FPS
    if (HAL_GetTick() - last_time >= 1000)
 8001276:	f001 ff6d 	bl	8003154 <HAL_GetTick>
 800127a:	4602      	mov	r2, r0
 800127c:	4b0e      	ldr	r3, [pc, #56]	@ (80012b8 <OLED_DisplayFPS+0x50>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001286:	d30e      	bcc.n	80012a6 <OLED_DisplayFPS+0x3e>
    {
        sprintf(fps_str, "FPS:%d", frame_count);
 8001288:	4b0a      	ldr	r3, [pc, #40]	@ (80012b4 <OLED_DisplayFPS+0x4c>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	461a      	mov	r2, r3
 800128e:	490b      	ldr	r1, [pc, #44]	@ (80012bc <OLED_DisplayFPS+0x54>)
 8001290:	480b      	ldr	r0, [pc, #44]	@ (80012c0 <OLED_DisplayFPS+0x58>)
 8001292:	f004 f9ff 	bl	8005694 <siprintf>
        frame_count = 0;
 8001296:	4b07      	ldr	r3, [pc, #28]	@ (80012b4 <OLED_DisplayFPS+0x4c>)
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
        last_time = HAL_GetTick();
 800129c:	f001 ff5a 	bl	8003154 <HAL_GetTick>
 80012a0:	4603      	mov	r3, r0
 80012a2:	4a05      	ldr	r2, [pc, #20]	@ (80012b8 <OLED_DisplayFPS+0x50>)
 80012a4:	6013      	str	r3, [r2, #0]
    }
    OLED_DisplayString(80, 56, fps_str);
 80012a6:	4a06      	ldr	r2, [pc, #24]	@ (80012c0 <OLED_DisplayFPS+0x58>)
 80012a8:	2138      	movs	r1, #56	@ 0x38
 80012aa:	2050      	movs	r0, #80	@ 0x50
 80012ac:	f7ff ff3e 	bl	800112c <OLED_DisplayString>
}
 80012b0:	bf00      	nop
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20000930 	.word	0x20000930
 80012b8:	20000934 	.word	0x20000934
 80012bc:	08007500 	.word	0x08007500
 80012c0:	20000938 	.word	0x20000938

080012c4 <System_UI_Loop>:
#define OLED_UI_GAP_Y 9 + 13
#define StartTweenTime 3000
#define TweenStyle EASE_INOUT_CUBIC

void System_UI_Loop()
{
 80012c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012c6:	b089      	sub	sp, #36	@ 0x24
 80012c8:	af04      	add	r7, sp, #16
    static bool isFirstRun = true;  
    float x, y, x1, y1;
    if (isFirstRun)
 80012ca:	4bba      	ldr	r3, [pc, #744]	@ (80015b4 <System_UI_Loop+0x2f0>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	f000 809a 	beq.w	8001408 <System_UI_Loop+0x144>
    {
        OLED_MoveObject(&Cursor_AnimationManager, "Cursor", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * menuSelection, OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * menuSelection, StartTweenTime, TweenStyle);
 80012d4:	4bb8      	ldr	r3, [pc, #736]	@ (80015b8 <System_UI_Loop+0x2f4>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	461a      	mov	r2, r3
 80012da:	4613      	mov	r3, r2
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	4413      	add	r3, r2
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	4413      	add	r3, r2
 80012e4:	3303      	adds	r3, #3
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7fe fffc 	bl	80002e4 <__aeabi_i2f>
 80012ec:	4604      	mov	r4, r0
 80012ee:	4bb2      	ldr	r3, [pc, #712]	@ (80015b8 <System_UI_Loop+0x2f4>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	461a      	mov	r2, r3
 80012f4:	4613      	mov	r3, r2
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	4413      	add	r3, r2
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	4413      	add	r3, r2
 80012fe:	3303      	adds	r3, #3
 8001300:	4618      	mov	r0, r3
 8001302:	f7fe ffef 	bl	80002e4 <__aeabi_i2f>
 8001306:	4603      	mov	r3, r0
 8001308:	2206      	movs	r2, #6
 800130a:	9203      	str	r2, [sp, #12]
 800130c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001310:	9202      	str	r2, [sp, #8]
 8001312:	9301      	str	r3, [sp, #4]
 8001314:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	4623      	mov	r3, r4
 800131c:	4aa7      	ldr	r2, [pc, #668]	@ (80015bc <System_UI_Loop+0x2f8>)
 800131e:	49a8      	ldr	r1, [pc, #672]	@ (80015c0 <System_UI_Loop+0x2fc>)
 8001320:	48a8      	ldr	r0, [pc, #672]	@ (80015c4 <System_UI_Loop+0x300>)
 8001322:	f001 fa2a 	bl	800277a <OLED_MoveObject>
        OLED_MoveObject(&Cursor_AnimationManager, "CursorScale",  0, 10, strlen("Settings")*6+ 3, 10 , StartTweenTime, TweenStyle);
 8001326:	2306      	movs	r3, #6
 8001328:	9303      	str	r3, [sp, #12]
 800132a:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800132e:	9302      	str	r3, [sp, #8]
 8001330:	4ba5      	ldr	r3, [pc, #660]	@ (80015c8 <System_UI_Loop+0x304>)
 8001332:	9301      	str	r3, [sp, #4]
 8001334:	4ba5      	ldr	r3, [pc, #660]	@ (80015cc <System_UI_Loop+0x308>)
 8001336:	9300      	str	r3, [sp, #0]
 8001338:	4ba3      	ldr	r3, [pc, #652]	@ (80015c8 <System_UI_Loop+0x304>)
 800133a:	f04f 0200 	mov.w	r2, #0
 800133e:	49a4      	ldr	r1, [pc, #656]	@ (80015d0 <System_UI_Loop+0x30c>)
 8001340:	48a0      	ldr	r0, [pc, #640]	@ (80015c4 <System_UI_Loop+0x300>)
 8001342:	f001 fa1a 	bl	800277a <OLED_MoveObject>
        OLED_MoveObject(&Menu_AnimationManager, "SettingsButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, StartTweenTime, TweenStyle);
 8001346:	2306      	movs	r3, #6
 8001348:	9303      	str	r3, [sp, #12]
 800134a:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800134e:	9302      	str	r3, [sp, #8]
 8001350:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8001354:	9301      	str	r3, [sp, #4]
 8001356:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800135a:	9300      	str	r3, [sp, #0]
 800135c:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8001360:	4a96      	ldr	r2, [pc, #600]	@ (80015bc <System_UI_Loop+0x2f8>)
 8001362:	499c      	ldr	r1, [pc, #624]	@ (80015d4 <System_UI_Loop+0x310>)
 8001364:	489c      	ldr	r0, [pc, #624]	@ (80015d8 <System_UI_Loop+0x314>)
 8001366:	f001 fa08 	bl	800277a <OLED_MoveObject>
        HAL_Delay(100);
 800136a:	2064      	movs	r0, #100	@ 0x64
 800136c:	f001 fefc 	bl	8003168 <HAL_Delay>
        OLED_MoveObject(&Menu_AnimationManager, "StatusButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, StartTweenTime, TweenStyle);
 8001370:	2306      	movs	r3, #6
 8001372:	9303      	str	r3, [sp, #12]
 8001374:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8001378:	9302      	str	r3, [sp, #8]
 800137a:	4b98      	ldr	r3, [pc, #608]	@ (80015dc <System_UI_Loop+0x318>)
 800137c:	9301      	str	r3, [sp, #4]
 800137e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001382:	9300      	str	r3, [sp, #0]
 8001384:	4b95      	ldr	r3, [pc, #596]	@ (80015dc <System_UI_Loop+0x318>)
 8001386:	4a8d      	ldr	r2, [pc, #564]	@ (80015bc <System_UI_Loop+0x2f8>)
 8001388:	4995      	ldr	r1, [pc, #596]	@ (80015e0 <System_UI_Loop+0x31c>)
 800138a:	4893      	ldr	r0, [pc, #588]	@ (80015d8 <System_UI_Loop+0x314>)
 800138c:	f001 f9f5 	bl	800277a <OLED_MoveObject>
        HAL_Delay(100);
 8001390:	2064      	movs	r0, #100	@ 0x64
 8001392:	f001 fee9 	bl	8003168 <HAL_Delay>
        OLED_MoveObject(&Menu_AnimationManager, "GamesButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, StartTweenTime, TweenStyle);
 8001396:	2306      	movs	r3, #6
 8001398:	9303      	str	r3, [sp, #12]
 800139a:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800139e:	9302      	str	r3, [sp, #8]
 80013a0:	4b90      	ldr	r3, [pc, #576]	@ (80015e4 <System_UI_Loop+0x320>)
 80013a2:	9301      	str	r3, [sp, #4]
 80013a4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	4b8e      	ldr	r3, [pc, #568]	@ (80015e4 <System_UI_Loop+0x320>)
 80013ac:	4a83      	ldr	r2, [pc, #524]	@ (80015bc <System_UI_Loop+0x2f8>)
 80013ae:	498e      	ldr	r1, [pc, #568]	@ (80015e8 <System_UI_Loop+0x324>)
 80013b0:	4889      	ldr	r0, [pc, #548]	@ (80015d8 <System_UI_Loop+0x314>)
 80013b2:	f001 f9e2 	bl	800277a <OLED_MoveObject>
        HAL_Delay(100);
 80013b6:	2064      	movs	r0, #100	@ 0x64
 80013b8:	f001 fed6 	bl	8003168 <HAL_Delay>
        OLED_MoveObject(&Menu_AnimationManager, "AboutButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 4, OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 4, StartTweenTime, TweenStyle);
 80013bc:	2306      	movs	r3, #6
 80013be:	9303      	str	r3, [sp, #12]
 80013c0:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80013c4:	9302      	str	r3, [sp, #8]
 80013c6:	4b89      	ldr	r3, [pc, #548]	@ (80015ec <System_UI_Loop+0x328>)
 80013c8:	9301      	str	r3, [sp, #4]
 80013ca:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013ce:	9300      	str	r3, [sp, #0]
 80013d0:	4b86      	ldr	r3, [pc, #536]	@ (80015ec <System_UI_Loop+0x328>)
 80013d2:	4a7a      	ldr	r2, [pc, #488]	@ (80015bc <System_UI_Loop+0x2f8>)
 80013d4:	4986      	ldr	r1, [pc, #536]	@ (80015f0 <System_UI_Loop+0x32c>)
 80013d6:	4880      	ldr	r0, [pc, #512]	@ (80015d8 <System_UI_Loop+0x314>)
 80013d8:	f001 f9cf 	bl	800277a <OLED_MoveObject>
        HAL_Delay(100);
 80013dc:	2064      	movs	r0, #100	@ 0x64
 80013de:	f001 fec3 	bl	8003168 <HAL_Delay>
        OLED_MoveObject(&Menu_AnimationManager, "ToolsButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 5, OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 5, StartTweenTime, TweenStyle);
 80013e2:	2306      	movs	r3, #6
 80013e4:	9303      	str	r3, [sp, #12]
 80013e6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80013ea:	9302      	str	r3, [sp, #8]
 80013ec:	4b81      	ldr	r3, [pc, #516]	@ (80015f4 <System_UI_Loop+0x330>)
 80013ee:	9301      	str	r3, [sp, #4]
 80013f0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013f4:	9300      	str	r3, [sp, #0]
 80013f6:	4b7f      	ldr	r3, [pc, #508]	@ (80015f4 <System_UI_Loop+0x330>)
 80013f8:	4a70      	ldr	r2, [pc, #448]	@ (80015bc <System_UI_Loop+0x2f8>)
 80013fa:	497f      	ldr	r1, [pc, #508]	@ (80015f8 <System_UI_Loop+0x334>)
 80013fc:	4876      	ldr	r0, [pc, #472]	@ (80015d8 <System_UI_Loop+0x314>)
 80013fe:	f001 f9bc 	bl	800277a <OLED_MoveObject>
        isFirstRun = false;
 8001402:	4b6c      	ldr	r3, [pc, #432]	@ (80015b4 <System_UI_Loop+0x2f0>)
 8001404:	2200      	movs	r2, #0
 8001406:	701a      	strb	r2, [r3, #0]
    }

    #pragma region pager

    OLED_DoTweenObject(&Menu_AnimationManager, "SettingsButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (2 - menuSelection), 500, EASE_OUT_CIRC, true);
 8001408:	4b6b      	ldr	r3, [pc, #428]	@ (80015b8 <System_UI_Loop+0x2f4>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	f1c3 0202 	rsb	r2, r3, #2
 8001410:	4613      	mov	r3, r2
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	4413      	add	r3, r2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	4413      	add	r3, r2
 800141a:	3303      	adds	r3, #3
 800141c:	4618      	mov	r0, r3
 800141e:	f7fe ff61 	bl	80002e4 <__aeabi_i2f>
 8001422:	4603      	mov	r3, r0
 8001424:	2201      	movs	r2, #1
 8001426:	9202      	str	r2, [sp, #8]
 8001428:	220b      	movs	r2, #11
 800142a:	9201      	str	r2, [sp, #4]
 800142c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001430:	9200      	str	r2, [sp, #0]
 8001432:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001436:	4967      	ldr	r1, [pc, #412]	@ (80015d4 <System_UI_Loop+0x310>)
 8001438:	4867      	ldr	r0, [pc, #412]	@ (80015d8 <System_UI_Loop+0x314>)
 800143a:	f001 fa3f 	bl	80028bc <OLED_DoTweenObject>
    OLED_DoTweenObject(&Menu_AnimationManager, "StatusButton",   OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (3 - menuSelection), 500, EASE_OUT_CIRC, true);
 800143e:	4b5e      	ldr	r3, [pc, #376]	@ (80015b8 <System_UI_Loop+0x2f4>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	f1c3 0203 	rsb	r2, r3, #3
 8001446:	4613      	mov	r3, r2
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	4413      	add	r3, r2
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	4413      	add	r3, r2
 8001450:	3303      	adds	r3, #3
 8001452:	4618      	mov	r0, r3
 8001454:	f7fe ff46 	bl	80002e4 <__aeabi_i2f>
 8001458:	4603      	mov	r3, r0
 800145a:	2201      	movs	r2, #1
 800145c:	9202      	str	r2, [sp, #8]
 800145e:	220b      	movs	r2, #11
 8001460:	9201      	str	r2, [sp, #4]
 8001462:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001466:	9200      	str	r2, [sp, #0]
 8001468:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800146c:	495c      	ldr	r1, [pc, #368]	@ (80015e0 <System_UI_Loop+0x31c>)
 800146e:	485a      	ldr	r0, [pc, #360]	@ (80015d8 <System_UI_Loop+0x314>)
 8001470:	f001 fa24 	bl	80028bc <OLED_DoTweenObject>
    OLED_DoTweenObject(&Menu_AnimationManager, "GamesButton",    OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (4 - menuSelection), 500, EASE_OUT_CIRC, true);
 8001474:	4b50      	ldr	r3, [pc, #320]	@ (80015b8 <System_UI_Loop+0x2f4>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	f1c3 0204 	rsb	r2, r3, #4
 800147c:	4613      	mov	r3, r2
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	4413      	add	r3, r2
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	4413      	add	r3, r2
 8001486:	3303      	adds	r3, #3
 8001488:	4618      	mov	r0, r3
 800148a:	f7fe ff2b 	bl	80002e4 <__aeabi_i2f>
 800148e:	4603      	mov	r3, r0
 8001490:	2201      	movs	r2, #1
 8001492:	9202      	str	r2, [sp, #8]
 8001494:	220b      	movs	r2, #11
 8001496:	9201      	str	r2, [sp, #4]
 8001498:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800149c:	9200      	str	r2, [sp, #0]
 800149e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014a2:	4951      	ldr	r1, [pc, #324]	@ (80015e8 <System_UI_Loop+0x324>)
 80014a4:	484c      	ldr	r0, [pc, #304]	@ (80015d8 <System_UI_Loop+0x314>)
 80014a6:	f001 fa09 	bl	80028bc <OLED_DoTweenObject>
    OLED_DoTweenObject(&Menu_AnimationManager, "AboutButton",    OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (5 - menuSelection), 500, EASE_OUT_CIRC, true);
 80014aa:	4b43      	ldr	r3, [pc, #268]	@ (80015b8 <System_UI_Loop+0x2f4>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	f1c3 0205 	rsb	r2, r3, #5
 80014b2:	4613      	mov	r3, r2
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	4413      	add	r3, r2
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	4413      	add	r3, r2
 80014bc:	3303      	adds	r3, #3
 80014be:	4618      	mov	r0, r3
 80014c0:	f7fe ff10 	bl	80002e4 <__aeabi_i2f>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2201      	movs	r2, #1
 80014c8:	9202      	str	r2, [sp, #8]
 80014ca:	220b      	movs	r2, #11
 80014cc:	9201      	str	r2, [sp, #4]
 80014ce:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80014d2:	9200      	str	r2, [sp, #0]
 80014d4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014d8:	4945      	ldr	r1, [pc, #276]	@ (80015f0 <System_UI_Loop+0x32c>)
 80014da:	483f      	ldr	r0, [pc, #252]	@ (80015d8 <System_UI_Loop+0x314>)
 80014dc:	f001 f9ee 	bl	80028bc <OLED_DoTweenObject>
    OLED_DoTweenObject(&Menu_AnimationManager, "ToolsButton",    OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (6 - menuSelection), 500, EASE_OUT_CIRC, true);
 80014e0:	4b35      	ldr	r3, [pc, #212]	@ (80015b8 <System_UI_Loop+0x2f4>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	f1c3 0206 	rsb	r2, r3, #6
 80014e8:	4613      	mov	r3, r2
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	4413      	add	r3, r2
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	4413      	add	r3, r2
 80014f2:	3303      	adds	r3, #3
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7fe fef5 	bl	80002e4 <__aeabi_i2f>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2201      	movs	r2, #1
 80014fe:	9202      	str	r2, [sp, #8]
 8001500:	220b      	movs	r2, #11
 8001502:	9201      	str	r2, [sp, #4]
 8001504:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001508:	9200      	str	r2, [sp, #0]
 800150a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800150e:	493a      	ldr	r1, [pc, #232]	@ (80015f8 <System_UI_Loop+0x334>)
 8001510:	4831      	ldr	r0, [pc, #196]	@ (80015d8 <System_UI_Loop+0x314>)
 8001512:	f001 f9d3 	bl	80028bc <OLED_DoTweenObject>


    #pragma endregion pager

    #pragma region OLED_Buttons
    OLED_GetObjectPosition(&Menu_AnimationManager, "SettingsButton", &x, &y);
 8001516:	f107 0308 	add.w	r3, r7, #8
 800151a:	f107 020c 	add.w	r2, r7, #12
 800151e:	492d      	ldr	r1, [pc, #180]	@ (80015d4 <System_UI_Loop+0x310>)
 8001520:	482d      	ldr	r0, [pc, #180]	@ (80015d8 <System_UI_Loop+0x314>)
 8001522:	f001 f906 	bl	8002732 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Settings");
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff f90b 	bl	8000744 <__aeabi_f2iz>
 800152e:	4603      	mov	r3, r0
 8001530:	b21c      	sxth	r4, r3
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff f905 	bl	8000744 <__aeabi_f2iz>
 800153a:	4603      	mov	r3, r0
 800153c:	b21b      	sxth	r3, r3
 800153e:	4a2f      	ldr	r2, [pc, #188]	@ (80015fc <System_UI_Loop+0x338>)
 8001540:	4619      	mov	r1, r3
 8001542:	4620      	mov	r0, r4
 8001544:	f7ff fdf2 	bl	800112c <OLED_DisplayString>
    OLED_GetObjectPosition(&Menu_AnimationManager, "StatusButton", &x, &y);
 8001548:	f107 0308 	add.w	r3, r7, #8
 800154c:	f107 020c 	add.w	r2, r7, #12
 8001550:	4923      	ldr	r1, [pc, #140]	@ (80015e0 <System_UI_Loop+0x31c>)
 8001552:	4821      	ldr	r0, [pc, #132]	@ (80015d8 <System_UI_Loop+0x314>)
 8001554:	f001 f8ed 	bl	8002732 <OLED_GetObjectPosition>
    OLED_DisplayString(x , y, "Status");
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff f8f2 	bl	8000744 <__aeabi_f2iz>
 8001560:	4603      	mov	r3, r0
 8001562:	b21c      	sxth	r4, r3
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff f8ec 	bl	8000744 <__aeabi_f2iz>
 800156c:	4603      	mov	r3, r0
 800156e:	b21b      	sxth	r3, r3
 8001570:	4a23      	ldr	r2, [pc, #140]	@ (8001600 <System_UI_Loop+0x33c>)
 8001572:	4619      	mov	r1, r3
 8001574:	4620      	mov	r0, r4
 8001576:	f7ff fdd9 	bl	800112c <OLED_DisplayString>
    OLED_GetObjectPosition(&Menu_AnimationManager, "GamesButton", &x, &y);
 800157a:	f107 0308 	add.w	r3, r7, #8
 800157e:	f107 020c 	add.w	r2, r7, #12
 8001582:	4919      	ldr	r1, [pc, #100]	@ (80015e8 <System_UI_Loop+0x324>)
 8001584:	4814      	ldr	r0, [pc, #80]	@ (80015d8 <System_UI_Loop+0x314>)
 8001586:	f001 f8d4 	bl	8002732 <OLED_GetObjectPosition>
    OLED_DisplayString(x , y, "Games");
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff f8d9 	bl	8000744 <__aeabi_f2iz>
 8001592:	4603      	mov	r3, r0
 8001594:	b21c      	sxth	r4, r3
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff f8d3 	bl	8000744 <__aeabi_f2iz>
 800159e:	4603      	mov	r3, r0
 80015a0:	b21b      	sxth	r3, r3
 80015a2:	4a18      	ldr	r2, [pc, #96]	@ (8001604 <System_UI_Loop+0x340>)
 80015a4:	4619      	mov	r1, r3
 80015a6:	4620      	mov	r0, r4
 80015a8:	f7ff fdc0 	bl	800112c <OLED_DisplayString>
    OLED_GetObjectPosition(&Menu_AnimationManager, "AboutButton", &x, &y);
 80015ac:	f107 0308 	add.w	r3, r7, #8
 80015b0:	e02a      	b.n	8001608 <System_UI_Loop+0x344>
 80015b2:	bf00      	nop
 80015b4:	20000009 	.word	0x20000009
 80015b8:	20000008 	.word	0x20000008
 80015bc:	c2b40000 	.word	0xc2b40000
 80015c0:	08007508 	.word	0x08007508
 80015c4:	20000f3c 	.word	0x20000f3c
 80015c8:	41200000 	.word	0x41200000
 80015cc:	424c0000 	.word	0x424c0000
 80015d0:	08007510 	.word	0x08007510
 80015d4:	0800751c 	.word	0x0800751c
 80015d8:	20000948 	.word	0x20000948
 80015dc:	41e80000 	.word	0x41e80000
 80015e0:	0800752c 	.word	0x0800752c
 80015e4:	42280000 	.word	0x42280000
 80015e8:	0800753c 	.word	0x0800753c
 80015ec:	425c0000 	.word	0x425c0000
 80015f0:	08007548 	.word	0x08007548
 80015f4:	42880000 	.word	0x42880000
 80015f8:	08007554 	.word	0x08007554
 80015fc:	08007560 	.word	0x08007560
 8001600:	0800756c 	.word	0x0800756c
 8001604:	08007574 	.word	0x08007574
 8001608:	f107 020c 	add.w	r2, r7, #12
 800160c:	4998      	ldr	r1, [pc, #608]	@ (8001870 <System_UI_Loop+0x5ac>)
 800160e:	4899      	ldr	r0, [pc, #612]	@ (8001874 <System_UI_Loop+0x5b0>)
 8001610:	f001 f88f 	bl	8002732 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "About");
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff f894 	bl	8000744 <__aeabi_f2iz>
 800161c:	4603      	mov	r3, r0
 800161e:	b21c      	sxth	r4, r3
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff f88e 	bl	8000744 <__aeabi_f2iz>
 8001628:	4603      	mov	r3, r0
 800162a:	b21b      	sxth	r3, r3
 800162c:	4a92      	ldr	r2, [pc, #584]	@ (8001878 <System_UI_Loop+0x5b4>)
 800162e:	4619      	mov	r1, r3
 8001630:	4620      	mov	r0, r4
 8001632:	f7ff fd7b 	bl	800112c <OLED_DisplayString>
    OLED_GetObjectPosition(&Menu_AnimationManager, "ToolsButton", &x, &y);
 8001636:	f107 0308 	add.w	r3, r7, #8
 800163a:	f107 020c 	add.w	r2, r7, #12
 800163e:	498f      	ldr	r1, [pc, #572]	@ (800187c <System_UI_Loop+0x5b8>)
 8001640:	488c      	ldr	r0, [pc, #560]	@ (8001874 <System_UI_Loop+0x5b0>)
 8001642:	f001 f876 	bl	8002732 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Tools");
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff f87b 	bl	8000744 <__aeabi_f2iz>
 800164e:	4603      	mov	r3, r0
 8001650:	b21c      	sxth	r4, r3
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff f875 	bl	8000744 <__aeabi_f2iz>
 800165a:	4603      	mov	r3, r0
 800165c:	b21b      	sxth	r3, r3
 800165e:	4a88      	ldr	r2, [pc, #544]	@ (8001880 <System_UI_Loop+0x5bc>)
 8001660:	4619      	mov	r1, r3
 8001662:	4620      	mov	r0, r4
 8001664:	f7ff fd62 	bl	800112c <OLED_DisplayString>
    #pragma endregion OLED_Buttons
    if (!isFirstRun)
 8001668:	4b86      	ldr	r3, [pc, #536]	@ (8001884 <System_UI_Loop+0x5c0>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	f083 0301 	eor.w	r3, r3, #1
 8001670:	b2db      	uxtb	r3, r3
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <System_UI_Loop+0x3b6>
        SystemGetsSignal();
 8001676:	f000 f91f 	bl	80018b8 <SystemGetsSignal>
    #pragma region OLED_Cursor
    OLED_GetObjectPosition(&Cursor_AnimationManager, "Cursor", &x, &y);
 800167a:	f107 0308 	add.w	r3, r7, #8
 800167e:	f107 020c 	add.w	r2, r7, #12
 8001682:	4981      	ldr	r1, [pc, #516]	@ (8001888 <System_UI_Loop+0x5c4>)
 8001684:	4881      	ldr	r0, [pc, #516]	@ (800188c <System_UI_Loop+0x5c8>)
 8001686:	f001 f854 	bl	8002732 <OLED_GetObjectPosition>
    OLED_GetObjectPosition(&Cursor_AnimationManager, "CursorScale", &x1, &y1);
 800168a:	463b      	mov	r3, r7
 800168c:	1d3a      	adds	r2, r7, #4
 800168e:	4980      	ldr	r1, [pc, #512]	@ (8001890 <System_UI_Loop+0x5cc>)
 8001690:	487e      	ldr	r0, [pc, #504]	@ (800188c <System_UI_Loop+0x5c8>)
 8001692:	f001 f84e 	bl	8002732 <OLED_GetObjectPosition>
    
    OLED_InvertArea(x - 2, y - 2, x1, y1); // 绘制光标
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800169c:	4618      	mov	r0, r3
 800169e:	f7fe fd6b 	bl	8000178 <__aeabi_fsub>
 80016a2:	4603      	mov	r3, r0
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff f84d 	bl	8000744 <__aeabi_f2iz>
 80016aa:	4603      	mov	r3, r0
 80016ac:	b21c      	sxth	r4, r3
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7fe fd5f 	bl	8000178 <__aeabi_fsub>
 80016ba:	4603      	mov	r3, r0
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff f841 	bl	8000744 <__aeabi_f2iz>
 80016c2:	4603      	mov	r3, r0
 80016c4:	b21d      	sxth	r5, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff f861 	bl	8000790 <__aeabi_f2uiz>
 80016ce:	4603      	mov	r3, r0
 80016d0:	b2de      	uxtb	r6, r3
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff f85b 	bl	8000790 <__aeabi_f2uiz>
 80016da:	4603      	mov	r3, r0
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	4632      	mov	r2, r6
 80016e0:	4629      	mov	r1, r5
 80016e2:	4620      	mov	r0, r4
 80016e4:	f7ff fb48 	bl	8000d78 <OLED_InvertArea>
    #pragma endregion OLED_Cursor

    OLED_DoTweenObject(&Cursor_AnimationManager, "CursorScale", strlen("Settings")*6+ 3+10, 40, 2000, EASE_IN_BOUNCE, true);
 80016e8:	2301      	movs	r3, #1
 80016ea:	9302      	str	r3, [sp, #8]
 80016ec:	2310      	movs	r3, #16
 80016ee:	9301      	str	r3, [sp, #4]
 80016f0:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80016f4:	9300      	str	r3, [sp, #0]
 80016f6:	4b67      	ldr	r3, [pc, #412]	@ (8001894 <System_UI_Loop+0x5d0>)
 80016f8:	4a67      	ldr	r2, [pc, #412]	@ (8001898 <System_UI_Loop+0x5d4>)
 80016fa:	4965      	ldr	r1, [pc, #404]	@ (8001890 <System_UI_Loop+0x5cc>)
 80016fc:	4863      	ldr	r0, [pc, #396]	@ (800188c <System_UI_Loop+0x5c8>)
 80016fe:	f001 f8dd 	bl	80028bc <OLED_DoTweenObject>

    switch (menuSelection)
 8001702:	4b66      	ldr	r3, [pc, #408]	@ (800189c <System_UI_Loop+0x5d8>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	3b01      	subs	r3, #1
 8001708:	2b04      	cmp	r3, #4
 800170a:	f200 809f 	bhi.w	800184c <System_UI_Loop+0x588>
 800170e:	a201      	add	r2, pc, #4	@ (adr r2, 8001714 <System_UI_Loop+0x450>)
 8001710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001714:	08001729 	.word	0x08001729
 8001718:	0800176f 	.word	0x0800176f
 800171c:	080017b5 	.word	0x080017b5
 8001720:	080017fb 	.word	0x080017fb
 8001724:	08001807 	.word	0x08001807
    {
    case 1:
        OLED_DisplayString((OLED_WIDTH - strlen("Settings For STM") * 6) / 2, 0, "Settings For STM");
 8001728:	4a5d      	ldr	r2, [pc, #372]	@ (80018a0 <System_UI_Loop+0x5dc>)
 800172a:	2100      	movs	r1, #0
 800172c:	2010      	movs	r0, #16
 800172e:	f7ff fcfd 	bl	800112c <OLED_DisplayString>
        OLED_InvertArea(x - 2, y - 2, strlen("Settings"), 10); // 绘制光标
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001738:	4618      	mov	r0, r3
 800173a:	f7fe fd1d 	bl	8000178 <__aeabi_fsub>
 800173e:	4603      	mov	r3, r0
 8001740:	4618      	mov	r0, r3
 8001742:	f7fe ffff 	bl	8000744 <__aeabi_f2iz>
 8001746:	4603      	mov	r3, r0
 8001748:	b21c      	sxth	r4, r3
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001750:	4618      	mov	r0, r3
 8001752:	f7fe fd11 	bl	8000178 <__aeabi_fsub>
 8001756:	4603      	mov	r3, r0
 8001758:	4618      	mov	r0, r3
 800175a:	f7fe fff3 	bl	8000744 <__aeabi_f2iz>
 800175e:	4603      	mov	r3, r0
 8001760:	b219      	sxth	r1, r3
 8001762:	230a      	movs	r3, #10
 8001764:	2208      	movs	r2, #8
 8001766:	4620      	mov	r0, r4
 8001768:	f7ff fb06 	bl	8000d78 <OLED_InvertArea>
        break;
 800176c:	e072      	b.n	8001854 <System_UI_Loop+0x590>
    case 2:
        OLED_DisplayString((OLED_WIDTH - strlen("Machine States") * 6) / 2, 0, "Machine States");
 800176e:	4a4d      	ldr	r2, [pc, #308]	@ (80018a4 <System_UI_Loop+0x5e0>)
 8001770:	2100      	movs	r1, #0
 8001772:	2016      	movs	r0, #22
 8001774:	f7ff fcda 	bl	800112c <OLED_DisplayString>
        OLED_InvertArea(x - 2, y - 2, strlen("States"), 10); // 绘制光标
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800177e:	4618      	mov	r0, r3
 8001780:	f7fe fcfa 	bl	8000178 <__aeabi_fsub>
 8001784:	4603      	mov	r3, r0
 8001786:	4618      	mov	r0, r3
 8001788:	f7fe ffdc 	bl	8000744 <__aeabi_f2iz>
 800178c:	4603      	mov	r3, r0
 800178e:	b21c      	sxth	r4, r3
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001796:	4618      	mov	r0, r3
 8001798:	f7fe fcee 	bl	8000178 <__aeabi_fsub>
 800179c:	4603      	mov	r3, r0
 800179e:	4618      	mov	r0, r3
 80017a0:	f7fe ffd0 	bl	8000744 <__aeabi_f2iz>
 80017a4:	4603      	mov	r3, r0
 80017a6:	b219      	sxth	r1, r3
 80017a8:	230a      	movs	r3, #10
 80017aa:	2206      	movs	r2, #6
 80017ac:	4620      	mov	r0, r4
 80017ae:	f7ff fae3 	bl	8000d78 <OLED_InvertArea>
        break;
 80017b2:	e04f      	b.n	8001854 <System_UI_Loop+0x590>
    case 3:
        OLED_DisplayString((OLED_WIDTH - strlen("Epicful Games") * 6) / 2, 0, "Epicful Games");
 80017b4:	4a3c      	ldr	r2, [pc, #240]	@ (80018a8 <System_UI_Loop+0x5e4>)
 80017b6:	2100      	movs	r1, #0
 80017b8:	2019      	movs	r0, #25
 80017ba:	f7ff fcb7 	bl	800112c <OLED_DisplayString>
        OLED_InvertArea(x - 2, y - 2, strlen("Games"), 10); // 绘制光标
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7fe fcd7 	bl	8000178 <__aeabi_fsub>
 80017ca:	4603      	mov	r3, r0
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7fe ffb9 	bl	8000744 <__aeabi_f2iz>
 80017d2:	4603      	mov	r3, r0
 80017d4:	b21c      	sxth	r4, r3
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80017dc:	4618      	mov	r0, r3
 80017de:	f7fe fccb 	bl	8000178 <__aeabi_fsub>
 80017e2:	4603      	mov	r3, r0
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7fe ffad 	bl	8000744 <__aeabi_f2iz>
 80017ea:	4603      	mov	r3, r0
 80017ec:	b219      	sxth	r1, r3
 80017ee:	230a      	movs	r3, #10
 80017f0:	2205      	movs	r2, #5
 80017f2:	4620      	mov	r0, r4
 80017f4:	f7ff fac0 	bl	8000d78 <OLED_InvertArea>
        break;
 80017f8:	e02c      	b.n	8001854 <System_UI_Loop+0x590>
    case 4:
        OLED_DisplayString((OLED_WIDTH - strlen("About Developer") * 6) / 2, 0, "About Developer");
 80017fa:	4a2c      	ldr	r2, [pc, #176]	@ (80018ac <System_UI_Loop+0x5e8>)
 80017fc:	2100      	movs	r1, #0
 80017fe:	2013      	movs	r0, #19
 8001800:	f7ff fc94 	bl	800112c <OLED_DisplayString>
        break;
 8001804:	e026      	b.n	8001854 <System_UI_Loop+0x590>
    case 5:
        OLED_DisplayString((OLED_WIDTH - strlen("Tools For You") * 6) / 2, 0, "Tools For You");
 8001806:	4a2a      	ldr	r2, [pc, #168]	@ (80018b0 <System_UI_Loop+0x5ec>)
 8001808:	2100      	movs	r1, #0
 800180a:	2019      	movs	r0, #25
 800180c:	f7ff fc8e 	bl	800112c <OLED_DisplayString>
        OLED_InvertArea(x - 2, y - 2, strlen("Tools"), 10); // 绘制光标
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001816:	4618      	mov	r0, r3
 8001818:	f7fe fcae 	bl	8000178 <__aeabi_fsub>
 800181c:	4603      	mov	r3, r0
 800181e:	4618      	mov	r0, r3
 8001820:	f7fe ff90 	bl	8000744 <__aeabi_f2iz>
 8001824:	4603      	mov	r3, r0
 8001826:	b21c      	sxth	r4, r3
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800182e:	4618      	mov	r0, r3
 8001830:	f7fe fca2 	bl	8000178 <__aeabi_fsub>
 8001834:	4603      	mov	r3, r0
 8001836:	4618      	mov	r0, r3
 8001838:	f7fe ff84 	bl	8000744 <__aeabi_f2iz>
 800183c:	4603      	mov	r3, r0
 800183e:	b219      	sxth	r1, r3
 8001840:	230a      	movs	r3, #10
 8001842:	2205      	movs	r2, #5
 8001844:	4620      	mov	r0, r4
 8001846:	f7ff fa97 	bl	8000d78 <OLED_InvertArea>
        break;
 800184a:	e003      	b.n	8001854 <System_UI_Loop+0x590>
    default:
        OLED_DrawTitleBar("UnikoZera's UI");
 800184c:	4819      	ldr	r0, [pc, #100]	@ (80018b4 <System_UI_Loop+0x5f0>)
 800184e:	f001 f88c 	bl	800296a <OLED_DrawTitleBar>
        break;
 8001852:	bf00      	nop
    }
    if (!isFirstRun)
 8001854:	4b0b      	ldr	r3, [pc, #44]	@ (8001884 <System_UI_Loop+0x5c0>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	f083 0301 	eor.w	r3, r3, #1
 800185c:	b2db      	uxtb	r3, r3
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <System_UI_Loop+0x5a2>
        SystemGetsSignal();
 8001862:	f000 f829 	bl	80018b8 <SystemGetsSignal>
}
 8001866:	bf00      	nop
 8001868:	3714      	adds	r7, #20
 800186a:	46bd      	mov	sp, r7
 800186c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800186e:	bf00      	nop
 8001870:	08007548 	.word	0x08007548
 8001874:	20000948 	.word	0x20000948
 8001878:	0800757c 	.word	0x0800757c
 800187c:	08007554 	.word	0x08007554
 8001880:	08007584 	.word	0x08007584
 8001884:	20000009 	.word	0x20000009
 8001888:	08007508 	.word	0x08007508
 800188c:	20000f3c 	.word	0x20000f3c
 8001890:	08007510 	.word	0x08007510
 8001894:	42200000 	.word	0x42200000
 8001898:	42740000 	.word	0x42740000
 800189c:	20000008 	.word	0x20000008
 80018a0:	0800758c 	.word	0x0800758c
 80018a4:	080075a0 	.word	0x080075a0
 80018a8:	080075b0 	.word	0x080075b0
 80018ac:	080075c0 	.word	0x080075c0
 80018b0:	080075d0 	.word	0x080075d0
 80018b4:	080075e0 	.word	0x080075e0

080018b8 <SystemGetsSignal>:

void SystemGetsSignal() //这里是旋钮数据的获取
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0

    menuSelection = 4; // 这里是旋钮数据的获取
 80018bc:	4b03      	ldr	r3, [pc, #12]	@ (80018cc <SystemGetsSignal+0x14>)
 80018be:	2204      	movs	r2, #4
 80018c0:	701a      	strb	r2, [r3, #0]


}
 80018c2:	bf00      	nop
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bc80      	pop	{r7}
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	20000008 	.word	0x20000008

080018d0 <EaseLinear>:
#include "stdint.h" // 添加 stdint.h 以支持标准整数类型
#include "oled_ui.h"
#pragma region TWEENS // 动画缓动函数全部在这里定义

static float EaseLinear(float t)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
    return t;
 80018d8:	687b      	ldr	r3, [r7, #4]
}
 80018da:	4618      	mov	r0, r3
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	bc80      	pop	{r7}
 80018e2:	4770      	bx	lr

080018e4 <EaseInQuad>:

static float EaseInQuad(float t)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
    return t * t;
 80018ec:	6879      	ldr	r1, [r7, #4]
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f7fe fd4c 	bl	800038c <__aeabi_fmul>
 80018f4:	4603      	mov	r3, r0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <EaseOutQuad>:

static float EaseOutQuad(float t)
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	b082      	sub	sp, #8
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
    return t * (2 - t);
 8001906:	6879      	ldr	r1, [r7, #4]
 8001908:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800190c:	f7fe fc34 	bl	8000178 <__aeabi_fsub>
 8001910:	4603      	mov	r3, r0
 8001912:	6879      	ldr	r1, [r7, #4]
 8001914:	4618      	mov	r0, r3
 8001916:	f7fe fd39 	bl	800038c <__aeabi_fmul>
 800191a:	4603      	mov	r3, r0
}
 800191c:	4618      	mov	r0, r3
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <EaseInOutQuad>:

static float EaseInOutQuad(float t)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
    return t < 0.5f ? 2 * t * t : -1 + (4 - 2 * t) * t;
 800192c:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f7fe fec9 	bl	80006c8 <__aeabi_fcmplt>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d00b      	beq.n	8001954 <EaseInOutQuad+0x30>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4619      	mov	r1, r3
 8001940:	4618      	mov	r0, r3
 8001942:	f7fe fc1b 	bl	800017c <__addsf3>
 8001946:	4603      	mov	r3, r0
 8001948:	6879      	ldr	r1, [r7, #4]
 800194a:	4618      	mov	r0, r3
 800194c:	f7fe fd1e 	bl	800038c <__aeabi_fmul>
 8001950:	4603      	mov	r3, r0
 8001952:	e016      	b.n	8001982 <EaseInOutQuad+0x5e>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	4619      	mov	r1, r3
 8001958:	4618      	mov	r0, r3
 800195a:	f7fe fc0f 	bl	800017c <__addsf3>
 800195e:	4603      	mov	r3, r0
 8001960:	4619      	mov	r1, r3
 8001962:	f04f 4081 	mov.w	r0, #1082130432	@ 0x40800000
 8001966:	f7fe fc07 	bl	8000178 <__aeabi_fsub>
 800196a:	4603      	mov	r3, r0
 800196c:	6879      	ldr	r1, [r7, #4]
 800196e:	4618      	mov	r0, r3
 8001970:	f7fe fd0c 	bl	800038c <__aeabi_fmul>
 8001974:	4603      	mov	r3, r0
 8001976:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800197a:	4618      	mov	r0, r3
 800197c:	f7fe fbfc 	bl	8000178 <__aeabi_fsub>
 8001980:	4603      	mov	r3, r0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <EaseInCubic>:

static float EaseInCubic(float t)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b082      	sub	sp, #8
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
    return t * t * t;
 8001992:	6879      	ldr	r1, [r7, #4]
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f7fe fcf9 	bl	800038c <__aeabi_fmul>
 800199a:	4603      	mov	r3, r0
 800199c:	6879      	ldr	r1, [r7, #4]
 800199e:	4618      	mov	r0, r3
 80019a0:	f7fe fcf4 	bl	800038c <__aeabi_fmul>
 80019a4:	4603      	mov	r3, r0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <EaseOutCubic>:

static float EaseOutCubic(float t)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b084      	sub	sp, #16
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
    float t1 = t - 1;
 80019b6:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f7fe fbdc 	bl	8000178 <__aeabi_fsub>
 80019c0:	4603      	mov	r3, r0
 80019c2:	60fb      	str	r3, [r7, #12]
    return t1 * t1 * t1 + 1;
 80019c4:	68f9      	ldr	r1, [r7, #12]
 80019c6:	68f8      	ldr	r0, [r7, #12]
 80019c8:	f7fe fce0 	bl	800038c <__aeabi_fmul>
 80019cc:	4603      	mov	r3, r0
 80019ce:	68f9      	ldr	r1, [r7, #12]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7fe fcdb 	bl	800038c <__aeabi_fmul>
 80019d6:	4603      	mov	r3, r0
 80019d8:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80019dc:	4618      	mov	r0, r3
 80019de:	f7fe fbcd 	bl	800017c <__addsf3>
 80019e2:	4603      	mov	r3, r0
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3710      	adds	r7, #16
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <EaseInOutCubic>:

static float EaseInOutCubic(float t)
{
 80019ec:	b590      	push	{r4, r7, lr}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
    return t < 0.5f ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;
 80019f4:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f7fe fe65 	bl	80006c8 <__aeabi_fcmplt>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d010      	beq.n	8001a26 <EaseInOutCubic+0x3a>
 8001a04:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f7fe fcbf 	bl	800038c <__aeabi_fmul>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	6879      	ldr	r1, [r7, #4]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7fe fcba 	bl	800038c <__aeabi_fmul>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	6879      	ldr	r1, [r7, #4]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7fe fcb5 	bl	800038c <__aeabi_fmul>
 8001a22:	4603      	mov	r3, r0
 8001a24:	e02f      	b.n	8001a86 <EaseInOutCubic+0x9a>
 8001a26:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f7fe fba4 	bl	8000178 <__aeabi_fsub>
 8001a30:	4603      	mov	r3, r0
 8001a32:	461c      	mov	r4, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4619      	mov	r1, r3
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7fe fb9f 	bl	800017c <__addsf3>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7fe fb97 	bl	8000178 <__aeabi_fsub>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4620      	mov	r0, r4
 8001a50:	f7fe fc9c 	bl	800038c <__aeabi_fmul>
 8001a54:	4603      	mov	r3, r0
 8001a56:	461c      	mov	r4, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7fe fb8d 	bl	800017c <__addsf3>
 8001a62:	4603      	mov	r3, r0
 8001a64:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7fe fb85 	bl	8000178 <__aeabi_fsub>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	4619      	mov	r1, r3
 8001a72:	4620      	mov	r0, r4
 8001a74:	f7fe fc8a 	bl	800038c <__aeabi_fmul>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7fe fb7c 	bl	800017c <__addsf3>
 8001a84:	4603      	mov	r3, r0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd90      	pop	{r4, r7, pc}
	...

08001a90 <EaseInExpo>:

// 在现有EaseType_t枚举中添加这些新类型
// 指数缓动
static float EaseInExpo(float t)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
    return (t == 0) ? 0 : powf(2, 10 * (t - 1));
 8001a98:	f04f 0100 	mov.w	r1, #0
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f7fe fe09 	bl	80006b4 <__aeabi_fcmpeq>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d111      	bne.n	8001acc <EaseInExpo+0x3c>
 8001aa8:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f7fe fb63 	bl	8000178 <__aeabi_fsub>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	4908      	ldr	r1, [pc, #32]	@ (8001ad8 <EaseInExpo+0x48>)
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7fe fc68 	bl	800038c <__aeabi_fmul>
 8001abc:	4603      	mov	r3, r0
 8001abe:	4619      	mov	r1, r3
 8001ac0:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001ac4:	f004 faaa 	bl	800601c <powf>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	e001      	b.n	8001ad0 <EaseInExpo+0x40>
 8001acc:	f04f 0300 	mov.w	r3, #0
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	41200000 	.word	0x41200000

08001adc <EaseOutExpo>:

static float EaseOutExpo(float t)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
    return (t == 1) ? 1 : (1 - powf(2, -10 * t));
 8001ae4:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f7fe fde3 	bl	80006b4 <__aeabi_fcmpeq>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d111      	bne.n	8001b18 <EaseOutExpo+0x3c>
 8001af4:	490b      	ldr	r1, [pc, #44]	@ (8001b24 <EaseOutExpo+0x48>)
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f7fe fc48 	bl	800038c <__aeabi_fmul>
 8001afc:	4603      	mov	r3, r0
 8001afe:	4619      	mov	r1, r3
 8001b00:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001b04:	f004 fa8a 	bl	800601c <powf>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001b10:	f7fe fb32 	bl	8000178 <__aeabi_fsub>
 8001b14:	4603      	mov	r3, r0
 8001b16:	e001      	b.n	8001b1c <EaseOutExpo+0x40>
 8001b18:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3708      	adds	r7, #8
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	c1200000 	.word	0xc1200000

08001b28 <EaseInOutExpo>:

static float EaseInOutExpo(float t)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
    if (t == 0)
 8001b30:	f04f 0100 	mov.w	r1, #0
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f7fe fdbd 	bl	80006b4 <__aeabi_fcmpeq>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d002      	beq.n	8001b46 <EaseInOutExpo+0x1e>
        return 0;
 8001b40:	f04f 0300 	mov.w	r3, #0
 8001b44:	e045      	b.n	8001bd2 <EaseInOutExpo+0xaa>
    if (t == 1)
 8001b46:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f7fe fdb2 	bl	80006b4 <__aeabi_fcmpeq>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d002      	beq.n	8001b5c <EaseInOutExpo+0x34>
        return 1;
 8001b56:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001b5a:	e03a      	b.n	8001bd2 <EaseInOutExpo+0xaa>
    if (t < 0.5f)
 8001b5c:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f7fe fdb1 	bl	80006c8 <__aeabi_fcmplt>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d016      	beq.n	8001b9a <EaseInOutExpo+0x72>
        return powf(2, 20 * t - 10) / 2;
 8001b6c:	491b      	ldr	r1, [pc, #108]	@ (8001bdc <EaseInOutExpo+0xb4>)
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f7fe fc0c 	bl	800038c <__aeabi_fmul>
 8001b74:	4603      	mov	r3, r0
 8001b76:	491a      	ldr	r1, [pc, #104]	@ (8001be0 <EaseInOutExpo+0xb8>)
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7fe fafd 	bl	8000178 <__aeabi_fsub>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	4619      	mov	r1, r3
 8001b82:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001b86:	f004 fa49 	bl	800601c <powf>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7fe fcaf 	bl	80004f4 <__aeabi_fdiv>
 8001b96:	4603      	mov	r3, r0
 8001b98:	e01b      	b.n	8001bd2 <EaseInOutExpo+0xaa>
    return (2 - powf(2, -20 * t + 10)) / 2;
 8001b9a:	4912      	ldr	r1, [pc, #72]	@ (8001be4 <EaseInOutExpo+0xbc>)
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f7fe fbf5 	bl	800038c <__aeabi_fmul>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	490e      	ldr	r1, [pc, #56]	@ (8001be0 <EaseInOutExpo+0xb8>)
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7fe fae8 	bl	800017c <__addsf3>
 8001bac:	4603      	mov	r3, r0
 8001bae:	4619      	mov	r1, r3
 8001bb0:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001bb4:	f004 fa32 	bl	800601c <powf>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	4619      	mov	r1, r3
 8001bbc:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001bc0:	f7fe fada 	bl	8000178 <__aeabi_fsub>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7fe fc92 	bl	80004f4 <__aeabi_fdiv>
 8001bd0:	4603      	mov	r3, r0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	41a00000 	.word	0x41a00000
 8001be0:	41200000 	.word	0x41200000
 8001be4:	c1a00000 	.word	0xc1a00000

08001be8 <EaseInCirc>:

// 圆形曲线缓动
static float EaseInCirc(float t)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
    return 1 - sqrtf(1 - t * t);
 8001bf0:	6879      	ldr	r1, [r7, #4]
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f7fe fbca 	bl	800038c <__aeabi_fmul>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001c00:	f7fe faba 	bl	8000178 <__aeabi_fsub>
 8001c04:	4603      	mov	r3, r0
 8001c06:	4618      	mov	r0, r3
 8001c08:	f004 fa55 	bl	80060b6 <sqrtf>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	4619      	mov	r1, r3
 8001c10:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001c14:	f7fe fab0 	bl	8000178 <__aeabi_fsub>
 8001c18:	4603      	mov	r3, r0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <EaseOutCirc>:

static float EaseOutCirc(float t)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b082      	sub	sp, #8
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
    return sqrtf(1 - powf(t - 1, 2));
 8001c2a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f7fe faa2 	bl	8000178 <__aeabi_fsub>
 8001c34:	4603      	mov	r3, r0
 8001c36:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f004 f9ee 	bl	800601c <powf>
 8001c40:	4603      	mov	r3, r0
 8001c42:	4619      	mov	r1, r3
 8001c44:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001c48:	f7fe fa96 	bl	8000178 <__aeabi_fsub>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f004 fa31 	bl	80060b6 <sqrtf>
 8001c54:	4603      	mov	r3, r0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <EaseInOutCirc>:

static float EaseInOutCirc(float t)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b082      	sub	sp, #8
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
    if (t < 0.5f)
 8001c66:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f7fe fd2c 	bl	80006c8 <__aeabi_fcmplt>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d022      	beq.n	8001cbc <EaseInOutCirc+0x5e>
        return (1 - sqrtf(1 - powf(2 * t, 2))) / 2;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7fe fa7e 	bl	800017c <__addsf3>
 8001c80:	4603      	mov	r3, r0
 8001c82:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001c86:	4618      	mov	r0, r3
 8001c88:	f004 f9c8 	bl	800601c <powf>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	4619      	mov	r1, r3
 8001c90:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001c94:	f7fe fa70 	bl	8000178 <__aeabi_fsub>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f004 fa0b 	bl	80060b6 <sqrtf>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001ca8:	f7fe fa66 	bl	8000178 <__aeabi_fsub>
 8001cac:	4603      	mov	r3, r0
 8001cae:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7fe fc1e 	bl	80004f4 <__aeabi_fdiv>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	e027      	b.n	8001d0c <EaseInOutCirc+0xae>
    return (sqrtf(1 - powf(-2 * t + 2, 2)) + 1) / 2;
 8001cbc:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f7fe fb63 	bl	800038c <__aeabi_fmul>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7fe fa55 	bl	800017c <__addsf3>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f004 f99f 	bl	800601c <powf>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001ce6:	f7fe fa47 	bl	8000178 <__aeabi_fsub>
 8001cea:	4603      	mov	r3, r0
 8001cec:	4618      	mov	r0, r3
 8001cee:	f004 f9e2 	bl	80060b6 <sqrtf>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7fe fa3f 	bl	800017c <__addsf3>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7fe fbf5 	bl	80004f4 <__aeabi_fdiv>
 8001d0a:	4603      	mov	r3, r0
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3708      	adds	r7, #8
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <EaseInElastic>:

// 弹性缓动
static float EaseInElastic(float t)
{
 8001d14:	b590      	push	{r4, r7, lr}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
    const float c4 = (2 * 3.14159f) / 3;
 8001d1c:	4b22      	ldr	r3, [pc, #136]	@ (8001da8 <EaseInElastic+0x94>)
 8001d1e:	60fb      	str	r3, [r7, #12]

    if (t == 0)
 8001d20:	f04f 0100 	mov.w	r1, #0
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f7fe fcc5 	bl	80006b4 <__aeabi_fcmpeq>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d002      	beq.n	8001d36 <EaseInElastic+0x22>
        return 0;
 8001d30:	f04f 0300 	mov.w	r3, #0
 8001d34:	e034      	b.n	8001da0 <EaseInElastic+0x8c>
    if (t == 1)
 8001d36:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f7fe fcba 	bl	80006b4 <__aeabi_fcmpeq>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d002      	beq.n	8001d4c <EaseInElastic+0x38>
        return 1;
 8001d46:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001d4a:	e029      	b.n	8001da0 <EaseInElastic+0x8c>
    return -powf(2, 10 * t - 10) * sinf((t * 10 - 10.75f) * c4);
 8001d4c:	4917      	ldr	r1, [pc, #92]	@ (8001dac <EaseInElastic+0x98>)
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f7fe fb1c 	bl	800038c <__aeabi_fmul>
 8001d54:	4603      	mov	r3, r0
 8001d56:	4915      	ldr	r1, [pc, #84]	@ (8001dac <EaseInElastic+0x98>)
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7fe fa0d 	bl	8000178 <__aeabi_fsub>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	4619      	mov	r1, r3
 8001d62:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001d66:	f004 f959 	bl	800601c <powf>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 8001d70:	490e      	ldr	r1, [pc, #56]	@ (8001dac <EaseInElastic+0x98>)
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f7fe fb0a 	bl	800038c <__aeabi_fmul>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	490d      	ldr	r1, [pc, #52]	@ (8001db0 <EaseInElastic+0x9c>)
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7fe f9fb 	bl	8000178 <__aeabi_fsub>
 8001d82:	4603      	mov	r3, r0
 8001d84:	68f9      	ldr	r1, [r7, #12]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7fe fb00 	bl	800038c <__aeabi_fmul>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f004 f9e4 	bl	800615c <sinf>
 8001d94:	4603      	mov	r3, r0
 8001d96:	4619      	mov	r1, r3
 8001d98:	4620      	mov	r0, r4
 8001d9a:	f7fe faf7 	bl	800038c <__aeabi_fmul>
 8001d9e:	4603      	mov	r3, r0
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3714      	adds	r7, #20
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd90      	pop	{r4, r7, pc}
 8001da8:	40060a8b 	.word	0x40060a8b
 8001dac:	41200000 	.word	0x41200000
 8001db0:	412c0000 	.word	0x412c0000

08001db4 <EaseOutElastic>:

static float EaseOutElastic(float t)
{
 8001db4:	b590      	push	{r4, r7, lr}
 8001db6:	b085      	sub	sp, #20
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
    const float c4 = (2 * 3.14159f) / 3;
 8001dbc:	4b22      	ldr	r3, [pc, #136]	@ (8001e48 <EaseOutElastic+0x94>)
 8001dbe:	60fb      	str	r3, [r7, #12]

    if (t == 0)
 8001dc0:	f04f 0100 	mov.w	r1, #0
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f7fe fc75 	bl	80006b4 <__aeabi_fcmpeq>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d002      	beq.n	8001dd6 <EaseOutElastic+0x22>
        return 0;
 8001dd0:	f04f 0300 	mov.w	r3, #0
 8001dd4:	e034      	b.n	8001e40 <EaseOutElastic+0x8c>
    if (t == 1)
 8001dd6:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f7fe fc6a 	bl	80006b4 <__aeabi_fcmpeq>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d002      	beq.n	8001dec <EaseOutElastic+0x38>
        return 1;
 8001de6:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001dea:	e029      	b.n	8001e40 <EaseOutElastic+0x8c>
    return powf(2, -10 * t) * sinf((t * 10 - 0.75f) * c4) + 1;
 8001dec:	4917      	ldr	r1, [pc, #92]	@ (8001e4c <EaseOutElastic+0x98>)
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f7fe facc 	bl	800038c <__aeabi_fmul>
 8001df4:	4603      	mov	r3, r0
 8001df6:	4619      	mov	r1, r3
 8001df8:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001dfc:	f004 f90e 	bl	800601c <powf>
 8001e00:	4604      	mov	r4, r0
 8001e02:	4913      	ldr	r1, [pc, #76]	@ (8001e50 <EaseOutElastic+0x9c>)
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f7fe fac1 	bl	800038c <__aeabi_fmul>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	f04f 517d 	mov.w	r1, #1061158912	@ 0x3f400000
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7fe f9b1 	bl	8000178 <__aeabi_fsub>
 8001e16:	4603      	mov	r3, r0
 8001e18:	68f9      	ldr	r1, [r7, #12]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7fe fab6 	bl	800038c <__aeabi_fmul>
 8001e20:	4603      	mov	r3, r0
 8001e22:	4618      	mov	r0, r3
 8001e24:	f004 f99a 	bl	800615c <sinf>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4620      	mov	r0, r4
 8001e2e:	f7fe faad 	bl	800038c <__aeabi_fmul>
 8001e32:	4603      	mov	r3, r0
 8001e34:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7fe f99f 	bl	800017c <__addsf3>
 8001e3e:	4603      	mov	r3, r0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3714      	adds	r7, #20
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd90      	pop	{r4, r7, pc}
 8001e48:	40060a8b 	.word	0x40060a8b
 8001e4c:	c1200000 	.word	0xc1200000
 8001e50:	41200000 	.word	0x41200000

08001e54 <EaseInOutElastic>:

static float EaseInOutElastic(float t)
{
 8001e54:	b590      	push	{r4, r7, lr}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
    const float c5 = (2 * 3.14159f) / 4.5f;
 8001e5c:	4b44      	ldr	r3, [pc, #272]	@ (8001f70 <EaseInOutElastic+0x11c>)
 8001e5e:	60fb      	str	r3, [r7, #12]

    if (t == 0)
 8001e60:	f04f 0100 	mov.w	r1, #0
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f7fe fc25 	bl	80006b4 <__aeabi_fcmpeq>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d002      	beq.n	8001e76 <EaseInOutElastic+0x22>
        return 0;
 8001e70:	f04f 0300 	mov.w	r3, #0
 8001e74:	e077      	b.n	8001f66 <EaseInOutElastic+0x112>
    if (t == 1)
 8001e76:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f7fe fc1a 	bl	80006b4 <__aeabi_fcmpeq>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d002      	beq.n	8001e8c <EaseInOutElastic+0x38>
        return 1;
 8001e86:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001e8a:	e06c      	b.n	8001f66 <EaseInOutElastic+0x112>
    if (t < 0.5f)
 8001e8c:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f7fe fc19 	bl	80006c8 <__aeabi_fcmplt>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d030      	beq.n	8001efe <EaseInOutElastic+0xaa>
        return -(powf(2, 20 * t - 10) * sinf((20 * t - 11.125f) * c5)) / 2;
 8001e9c:	4935      	ldr	r1, [pc, #212]	@ (8001f74 <EaseInOutElastic+0x120>)
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f7fe fa74 	bl	800038c <__aeabi_fmul>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	4934      	ldr	r1, [pc, #208]	@ (8001f78 <EaseInOutElastic+0x124>)
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7fe f965 	bl	8000178 <__aeabi_fsub>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001eb6:	f004 f8b1 	bl	800601c <powf>
 8001eba:	4604      	mov	r4, r0
 8001ebc:	492d      	ldr	r1, [pc, #180]	@ (8001f74 <EaseInOutElastic+0x120>)
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f7fe fa64 	bl	800038c <__aeabi_fmul>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	492d      	ldr	r1, [pc, #180]	@ (8001f7c <EaseInOutElastic+0x128>)
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7fe f955 	bl	8000178 <__aeabi_fsub>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	68f9      	ldr	r1, [r7, #12]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7fe fa5a 	bl	800038c <__aeabi_fmul>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	4618      	mov	r0, r3
 8001edc:	f004 f93e 	bl	800615c <sinf>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4620      	mov	r0, r4
 8001ee6:	f7fe fa51 	bl	800038c <__aeabi_fmul>
 8001eea:	4603      	mov	r3, r0
 8001eec:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001ef0:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7fe fafd 	bl	80004f4 <__aeabi_fdiv>
 8001efa:	4603      	mov	r3, r0
 8001efc:	e033      	b.n	8001f66 <EaseInOutElastic+0x112>
    return (powf(2, -20 * t + 10) * sinf((20 * t - 11.125f) * c5)) / 2 + 1;
 8001efe:	4920      	ldr	r1, [pc, #128]	@ (8001f80 <EaseInOutElastic+0x12c>)
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f7fe fa43 	bl	800038c <__aeabi_fmul>
 8001f06:	4603      	mov	r3, r0
 8001f08:	491b      	ldr	r1, [pc, #108]	@ (8001f78 <EaseInOutElastic+0x124>)
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7fe f936 	bl	800017c <__addsf3>
 8001f10:	4603      	mov	r3, r0
 8001f12:	4619      	mov	r1, r3
 8001f14:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001f18:	f004 f880 	bl	800601c <powf>
 8001f1c:	4604      	mov	r4, r0
 8001f1e:	4915      	ldr	r1, [pc, #84]	@ (8001f74 <EaseInOutElastic+0x120>)
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f7fe fa33 	bl	800038c <__aeabi_fmul>
 8001f26:	4603      	mov	r3, r0
 8001f28:	4914      	ldr	r1, [pc, #80]	@ (8001f7c <EaseInOutElastic+0x128>)
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7fe f924 	bl	8000178 <__aeabi_fsub>
 8001f30:	4603      	mov	r3, r0
 8001f32:	68f9      	ldr	r1, [r7, #12]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7fe fa29 	bl	800038c <__aeabi_fmul>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f004 f90d 	bl	800615c <sinf>
 8001f42:	4603      	mov	r3, r0
 8001f44:	4619      	mov	r1, r3
 8001f46:	4620      	mov	r0, r4
 8001f48:	f7fe fa20 	bl	800038c <__aeabi_fmul>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7fe face 	bl	80004f4 <__aeabi_fdiv>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7fe f90c 	bl	800017c <__addsf3>
 8001f64:	4603      	mov	r3, r0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3714      	adds	r7, #20
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd90      	pop	{r4, r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	3fb2b8b9 	.word	0x3fb2b8b9
 8001f74:	41a00000 	.word	0x41a00000
 8001f78:	41200000 	.word	0x41200000
 8001f7c:	41320000 	.word	0x41320000
 8001f80:	c1a00000 	.word	0xc1a00000

08001f84 <EaseOutBounce>:

static float EaseOutBounce(float t)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
    const float n1 = 7.5625f;
 8001f8c:	4b45      	ldr	r3, [pc, #276]	@ (80020a4 <EaseOutBounce+0x120>)
 8001f8e:	60fb      	str	r3, [r7, #12]
    const float d1 = 2.75f;
 8001f90:	4b45      	ldr	r3, [pc, #276]	@ (80020a8 <EaseOutBounce+0x124>)
 8001f92:	60bb      	str	r3, [r7, #8]

    if (t < 1 / d1)
 8001f94:	68b9      	ldr	r1, [r7, #8]
 8001f96:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001f9a:	f7fe faab 	bl	80004f4 <__aeabi_fdiv>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f7fe fb90 	bl	80006c8 <__aeabi_fcmplt>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d00a      	beq.n	8001fc4 <EaseOutBounce+0x40>
    {
        return n1 * t * t;
 8001fae:	6879      	ldr	r1, [r7, #4]
 8001fb0:	68f8      	ldr	r0, [r7, #12]
 8001fb2:	f7fe f9eb 	bl	800038c <__aeabi_fmul>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	6879      	ldr	r1, [r7, #4]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7fe f9e6 	bl	800038c <__aeabi_fmul>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	e06a      	b.n	800209a <EaseOutBounce+0x116>
    }
    else if (t < 2 / d1)
 8001fc4:	68b9      	ldr	r1, [r7, #8]
 8001fc6:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001fca:	f7fe fa93 	bl	80004f4 <__aeabi_fdiv>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f7fe fb78 	bl	80006c8 <__aeabi_fcmplt>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d01c      	beq.n	8002018 <EaseOutBounce+0x94>
    {
        t -= 1.5f / d1;
 8001fde:	68b9      	ldr	r1, [r7, #8]
 8001fe0:	f04f 507f 	mov.w	r0, #1069547520	@ 0x3fc00000
 8001fe4:	f7fe fa86 	bl	80004f4 <__aeabi_fdiv>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	4619      	mov	r1, r3
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f7fe f8c3 	bl	8000178 <__aeabi_fsub>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	607b      	str	r3, [r7, #4]
        return n1 * t * t + 0.75f;
 8001ff6:	6879      	ldr	r1, [r7, #4]
 8001ff8:	68f8      	ldr	r0, [r7, #12]
 8001ffa:	f7fe f9c7 	bl	800038c <__aeabi_fmul>
 8001ffe:	4603      	mov	r3, r0
 8002000:	6879      	ldr	r1, [r7, #4]
 8002002:	4618      	mov	r0, r3
 8002004:	f7fe f9c2 	bl	800038c <__aeabi_fmul>
 8002008:	4603      	mov	r3, r0
 800200a:	f04f 517d 	mov.w	r1, #1061158912	@ 0x3f400000
 800200e:	4618      	mov	r0, r3
 8002010:	f7fe f8b4 	bl	800017c <__addsf3>
 8002014:	4603      	mov	r3, r0
 8002016:	e040      	b.n	800209a <EaseOutBounce+0x116>
    }
    else if (t < 2.5f / d1)
 8002018:	68b9      	ldr	r1, [r7, #8]
 800201a:	4824      	ldr	r0, [pc, #144]	@ (80020ac <EaseOutBounce+0x128>)
 800201c:	f7fe fa6a 	bl	80004f4 <__aeabi_fdiv>
 8002020:	4603      	mov	r3, r0
 8002022:	4619      	mov	r1, r3
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f7fe fb4f 	bl	80006c8 <__aeabi_fcmplt>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d01a      	beq.n	8002066 <EaseOutBounce+0xe2>
    {
        t -= 2.25f / d1;
 8002030:	68b9      	ldr	r1, [r7, #8]
 8002032:	481f      	ldr	r0, [pc, #124]	@ (80020b0 <EaseOutBounce+0x12c>)
 8002034:	f7fe fa5e 	bl	80004f4 <__aeabi_fdiv>
 8002038:	4603      	mov	r3, r0
 800203a:	4619      	mov	r1, r3
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f7fe f89b 	bl	8000178 <__aeabi_fsub>
 8002042:	4603      	mov	r3, r0
 8002044:	607b      	str	r3, [r7, #4]
        return n1 * t * t + 0.9375f;
 8002046:	6879      	ldr	r1, [r7, #4]
 8002048:	68f8      	ldr	r0, [r7, #12]
 800204a:	f7fe f99f 	bl	800038c <__aeabi_fmul>
 800204e:	4603      	mov	r3, r0
 8002050:	6879      	ldr	r1, [r7, #4]
 8002052:	4618      	mov	r0, r3
 8002054:	f7fe f99a 	bl	800038c <__aeabi_fmul>
 8002058:	4603      	mov	r3, r0
 800205a:	4916      	ldr	r1, [pc, #88]	@ (80020b4 <EaseOutBounce+0x130>)
 800205c:	4618      	mov	r0, r3
 800205e:	f7fe f88d 	bl	800017c <__addsf3>
 8002062:	4603      	mov	r3, r0
 8002064:	e019      	b.n	800209a <EaseOutBounce+0x116>
    }
    else
    {
        t -= 2.625f / d1;
 8002066:	68b9      	ldr	r1, [r7, #8]
 8002068:	4813      	ldr	r0, [pc, #76]	@ (80020b8 <EaseOutBounce+0x134>)
 800206a:	f7fe fa43 	bl	80004f4 <__aeabi_fdiv>
 800206e:	4603      	mov	r3, r0
 8002070:	4619      	mov	r1, r3
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f7fe f880 	bl	8000178 <__aeabi_fsub>
 8002078:	4603      	mov	r3, r0
 800207a:	607b      	str	r3, [r7, #4]
        return n1 * t * t + 0.984375f;
 800207c:	6879      	ldr	r1, [r7, #4]
 800207e:	68f8      	ldr	r0, [r7, #12]
 8002080:	f7fe f984 	bl	800038c <__aeabi_fmul>
 8002084:	4603      	mov	r3, r0
 8002086:	6879      	ldr	r1, [r7, #4]
 8002088:	4618      	mov	r0, r3
 800208a:	f7fe f97f 	bl	800038c <__aeabi_fmul>
 800208e:	4603      	mov	r3, r0
 8002090:	490a      	ldr	r1, [pc, #40]	@ (80020bc <EaseOutBounce+0x138>)
 8002092:	4618      	mov	r0, r3
 8002094:	f7fe f872 	bl	800017c <__addsf3>
 8002098:	4603      	mov	r3, r0
    }
}
 800209a:	4618      	mov	r0, r3
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40f20000 	.word	0x40f20000
 80020a8:	40300000 	.word	0x40300000
 80020ac:	40200000 	.word	0x40200000
 80020b0:	40100000 	.word	0x40100000
 80020b4:	3f700000 	.word	0x3f700000
 80020b8:	40280000 	.word	0x40280000
 80020bc:	3f7c0000 	.word	0x3f7c0000

080020c0 <EaseInBounce>:

// 反弹缓动
static float EaseInBounce(float t)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
    return 1 - EaseOutBounce(1 - t);
 80020c8:	6879      	ldr	r1, [r7, #4]
 80020ca:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80020ce:	f7fe f853 	bl	8000178 <__aeabi_fsub>
 80020d2:	4603      	mov	r3, r0
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff ff55 	bl	8001f84 <EaseOutBounce>
 80020da:	4603      	mov	r3, r0
 80020dc:	4619      	mov	r1, r3
 80020de:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80020e2:	f7fe f849 	bl	8000178 <__aeabi_fsub>
 80020e6:	4603      	mov	r3, r0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3708      	adds	r7, #8
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <EaseInOutBounce>:

static float EaseInOutBounce(float t)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
    if (t < 0.5f)
 80020f8:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f7fe fae3 	bl	80006c8 <__aeabi_fcmplt>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d010      	beq.n	800212a <EaseInOutBounce+0x3a>
        return EaseInBounce(t * 2) * 0.5f;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	4619      	mov	r1, r3
 800210c:	4618      	mov	r0, r3
 800210e:	f7fe f835 	bl	800017c <__addsf3>
 8002112:	4603      	mov	r3, r0
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff ffd3 	bl	80020c0 <EaseInBounce>
 800211a:	4603      	mov	r3, r0
 800211c:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8002120:	4618      	mov	r0, r3
 8002122:	f7fe f933 	bl	800038c <__aeabi_fmul>
 8002126:	4603      	mov	r3, r0
 8002128:	e01b      	b.n	8002162 <EaseInOutBounce+0x72>
    return EaseOutBounce(t * 2 - 1) * 0.5f + 0.5f;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4619      	mov	r1, r3
 800212e:	4618      	mov	r0, r3
 8002130:	f7fe f824 	bl	800017c <__addsf3>
 8002134:	4603      	mov	r3, r0
 8002136:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800213a:	4618      	mov	r0, r3
 800213c:	f7fe f81c 	bl	8000178 <__aeabi_fsub>
 8002140:	4603      	mov	r3, r0
 8002142:	4618      	mov	r0, r3
 8002144:	f7ff ff1e 	bl	8001f84 <EaseOutBounce>
 8002148:	4603      	mov	r3, r0
 800214a:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800214e:	4618      	mov	r0, r3
 8002150:	f7fe f91c 	bl	800038c <__aeabi_fmul>
 8002154:	4603      	mov	r3, r0
 8002156:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800215a:	4618      	mov	r0, r3
 800215c:	f7fe f80e 	bl	800017c <__addsf3>
 8002160:	4603      	mov	r3, r0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
	...

0800216c <EaseInBack>:

// 背越式缓动
static float EaseInBack(float t)
{
 800216c:	b590      	push	{r4, r7, lr}
 800216e:	b085      	sub	sp, #20
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
    const float c1 = 1.70158f;
 8002174:	4b15      	ldr	r3, [pc, #84]	@ (80021cc <EaseInBack+0x60>)
 8002176:	60fb      	str	r3, [r7, #12]
    const float c3 = c1 + 1;
 8002178:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800217c:	68f8      	ldr	r0, [r7, #12]
 800217e:	f7fd fffd 	bl	800017c <__addsf3>
 8002182:	4603      	mov	r3, r0
 8002184:	60bb      	str	r3, [r7, #8]

    return c3 * t * t * t - c1 * t * t;
 8002186:	6879      	ldr	r1, [r7, #4]
 8002188:	68b8      	ldr	r0, [r7, #8]
 800218a:	f7fe f8ff 	bl	800038c <__aeabi_fmul>
 800218e:	4603      	mov	r3, r0
 8002190:	6879      	ldr	r1, [r7, #4]
 8002192:	4618      	mov	r0, r3
 8002194:	f7fe f8fa 	bl	800038c <__aeabi_fmul>
 8002198:	4603      	mov	r3, r0
 800219a:	6879      	ldr	r1, [r7, #4]
 800219c:	4618      	mov	r0, r3
 800219e:	f7fe f8f5 	bl	800038c <__aeabi_fmul>
 80021a2:	4603      	mov	r3, r0
 80021a4:	461c      	mov	r4, r3
 80021a6:	6879      	ldr	r1, [r7, #4]
 80021a8:	68f8      	ldr	r0, [r7, #12]
 80021aa:	f7fe f8ef 	bl	800038c <__aeabi_fmul>
 80021ae:	4603      	mov	r3, r0
 80021b0:	6879      	ldr	r1, [r7, #4]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7fe f8ea 	bl	800038c <__aeabi_fmul>
 80021b8:	4603      	mov	r3, r0
 80021ba:	4619      	mov	r1, r3
 80021bc:	4620      	mov	r0, r4
 80021be:	f7fd ffdb 	bl	8000178 <__aeabi_fsub>
 80021c2:	4603      	mov	r3, r0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3714      	adds	r7, #20
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd90      	pop	{r4, r7, pc}
 80021cc:	3fd9cd60 	.word	0x3fd9cd60

080021d0 <EaseOutBack>:

static float EaseOutBack(float t)
{
 80021d0:	b590      	push	{r4, r7, lr}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
    const float c1 = 1.70158f;
 80021d8:	4b1c      	ldr	r3, [pc, #112]	@ (800224c <EaseOutBack+0x7c>)
 80021da:	60fb      	str	r3, [r7, #12]
    const float c3 = c1 + 1;
 80021dc:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80021e0:	68f8      	ldr	r0, [r7, #12]
 80021e2:	f7fd ffcb 	bl	800017c <__addsf3>
 80021e6:	4603      	mov	r3, r0
 80021e8:	60bb      	str	r3, [r7, #8]

    return 1 + c3 * powf(t - 1, 3) + c1 * powf(t - 1, 2);
 80021ea:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f7fd ffc2 	bl	8000178 <__aeabi_fsub>
 80021f4:	4603      	mov	r3, r0
 80021f6:	4916      	ldr	r1, [pc, #88]	@ (8002250 <EaseOutBack+0x80>)
 80021f8:	4618      	mov	r0, r3
 80021fa:	f003 ff0f 	bl	800601c <powf>
 80021fe:	4603      	mov	r3, r0
 8002200:	68b9      	ldr	r1, [r7, #8]
 8002202:	4618      	mov	r0, r3
 8002204:	f7fe f8c2 	bl	800038c <__aeabi_fmul>
 8002208:	4603      	mov	r3, r0
 800220a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800220e:	4618      	mov	r0, r3
 8002210:	f7fd ffb4 	bl	800017c <__addsf3>
 8002214:	4603      	mov	r3, r0
 8002216:	461c      	mov	r4, r3
 8002218:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f7fd ffab 	bl	8000178 <__aeabi_fsub>
 8002222:	4603      	mov	r3, r0
 8002224:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002228:	4618      	mov	r0, r3
 800222a:	f003 fef7 	bl	800601c <powf>
 800222e:	4603      	mov	r3, r0
 8002230:	68f9      	ldr	r1, [r7, #12]
 8002232:	4618      	mov	r0, r3
 8002234:	f7fe f8aa 	bl	800038c <__aeabi_fmul>
 8002238:	4603      	mov	r3, r0
 800223a:	4619      	mov	r1, r3
 800223c:	4620      	mov	r0, r4
 800223e:	f7fd ff9d 	bl	800017c <__addsf3>
 8002242:	4603      	mov	r3, r0
}
 8002244:	4618      	mov	r0, r3
 8002246:	3714      	adds	r7, #20
 8002248:	46bd      	mov	sp, r7
 800224a:	bd90      	pop	{r4, r7, pc}
 800224c:	3fd9cd60 	.word	0x3fd9cd60
 8002250:	40400000 	.word	0x40400000

08002254 <EaseInOutBack>:

static float EaseInOutBack(float t)
{
 8002254:	b5b0      	push	{r4, r5, r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
    const float c1 = 1.70158f;
 800225c:	4b40      	ldr	r3, [pc, #256]	@ (8002360 <EaseInOutBack+0x10c>)
 800225e:	60fb      	str	r3, [r7, #12]
    const float c2 = c1 * 1.525f;
 8002260:	4940      	ldr	r1, [pc, #256]	@ (8002364 <EaseInOutBack+0x110>)
 8002262:	68f8      	ldr	r0, [r7, #12]
 8002264:	f7fe f892 	bl	800038c <__aeabi_fmul>
 8002268:	4603      	mov	r3, r0
 800226a:	60bb      	str	r3, [r7, #8]

    if (t < 0.5f)
 800226c:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f7fe fa29 	bl	80006c8 <__aeabi_fcmplt>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d02c      	beq.n	80022d6 <EaseInOutBack+0x82>
        return (powf(2 * t, 2) * ((c2 + 1) * 2 * t - c2)) / 2;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4619      	mov	r1, r3
 8002280:	4618      	mov	r0, r3
 8002282:	f7fd ff7b 	bl	800017c <__addsf3>
 8002286:	4603      	mov	r3, r0
 8002288:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800228c:	4618      	mov	r0, r3
 800228e:	f003 fec5 	bl	800601c <powf>
 8002292:	4604      	mov	r4, r0
 8002294:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002298:	68b8      	ldr	r0, [r7, #8]
 800229a:	f7fd ff6f 	bl	800017c <__addsf3>
 800229e:	4603      	mov	r3, r0
 80022a0:	4619      	mov	r1, r3
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7fd ff6a 	bl	800017c <__addsf3>
 80022a8:	4603      	mov	r3, r0
 80022aa:	6879      	ldr	r1, [r7, #4]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7fe f86d 	bl	800038c <__aeabi_fmul>
 80022b2:	4603      	mov	r3, r0
 80022b4:	68b9      	ldr	r1, [r7, #8]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7fd ff5e 	bl	8000178 <__aeabi_fsub>
 80022bc:	4603      	mov	r3, r0
 80022be:	4619      	mov	r1, r3
 80022c0:	4620      	mov	r0, r4
 80022c2:	f7fe f863 	bl	800038c <__aeabi_fmul>
 80022c6:	4603      	mov	r3, r0
 80022c8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7fe f911 	bl	80004f4 <__aeabi_fdiv>
 80022d2:	4603      	mov	r3, r0
 80022d4:	e03f      	b.n	8002356 <EaseInOutBack+0x102>
    return (powf(2 * t - 2, 2) * ((c2 + 1) * (t * 2 - 2) + c2) + 2) / 2;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4619      	mov	r1, r3
 80022da:	4618      	mov	r0, r3
 80022dc:	f7fd ff4e 	bl	800017c <__addsf3>
 80022e0:	4603      	mov	r3, r0
 80022e2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7fd ff46 	bl	8000178 <__aeabi_fsub>
 80022ec:	4603      	mov	r3, r0
 80022ee:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80022f2:	4618      	mov	r0, r3
 80022f4:	f003 fe92 	bl	800601c <powf>
 80022f8:	4604      	mov	r4, r0
 80022fa:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80022fe:	68b8      	ldr	r0, [r7, #8]
 8002300:	f7fd ff3c 	bl	800017c <__addsf3>
 8002304:	4603      	mov	r3, r0
 8002306:	461d      	mov	r5, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4619      	mov	r1, r3
 800230c:	4618      	mov	r0, r3
 800230e:	f7fd ff35 	bl	800017c <__addsf3>
 8002312:	4603      	mov	r3, r0
 8002314:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002318:	4618      	mov	r0, r3
 800231a:	f7fd ff2d 	bl	8000178 <__aeabi_fsub>
 800231e:	4603      	mov	r3, r0
 8002320:	4619      	mov	r1, r3
 8002322:	4628      	mov	r0, r5
 8002324:	f7fe f832 	bl	800038c <__aeabi_fmul>
 8002328:	4603      	mov	r3, r0
 800232a:	68b9      	ldr	r1, [r7, #8]
 800232c:	4618      	mov	r0, r3
 800232e:	f7fd ff25 	bl	800017c <__addsf3>
 8002332:	4603      	mov	r3, r0
 8002334:	4619      	mov	r1, r3
 8002336:	4620      	mov	r0, r4
 8002338:	f7fe f828 	bl	800038c <__aeabi_fmul>
 800233c:	4603      	mov	r3, r0
 800233e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002342:	4618      	mov	r0, r3
 8002344:	f7fd ff1a 	bl	800017c <__addsf3>
 8002348:	4603      	mov	r3, r0
 800234a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800234e:	4618      	mov	r0, r3
 8002350:	f7fe f8d0 	bl	80004f4 <__aeabi_fdiv>
 8002354:	4603      	mov	r3, r0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3710      	adds	r7, #16
 800235a:	46bd      	mov	sp, r7
 800235c:	bdb0      	pop	{r4, r5, r7, pc}
 800235e:	bf00      	nop
 8002360:	3fd9cd60 	.word	0x3fd9cd60
 8002364:	3fc33333 	.word	0x3fc33333

08002368 <EaseInSine>:

// 正弦缓动
static float EaseInSine(float t)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
    return 1 - cosf((t * 3.14159f) / 2);
 8002370:	490c      	ldr	r1, [pc, #48]	@ (80023a4 <EaseInSine+0x3c>)
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f7fe f80a 	bl	800038c <__aeabi_fmul>
 8002378:	4603      	mov	r3, r0
 800237a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800237e:	4618      	mov	r0, r3
 8002380:	f7fe f8b8 	bl	80004f4 <__aeabi_fdiv>
 8002384:	4603      	mov	r3, r0
 8002386:	4618      	mov	r0, r3
 8002388:	f003 feb0 	bl	80060ec <cosf>
 800238c:	4603      	mov	r3, r0
 800238e:	4619      	mov	r1, r3
 8002390:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8002394:	f7fd fef0 	bl	8000178 <__aeabi_fsub>
 8002398:	4603      	mov	r3, r0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	40490fd0 	.word	0x40490fd0

080023a8 <EaseOutSine>:

static float EaseOutSine(float t)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
    return sinf((t * 3.14159f) / 2);
 80023b0:	4909      	ldr	r1, [pc, #36]	@ (80023d8 <EaseOutSine+0x30>)
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f7fd ffea 	bl	800038c <__aeabi_fmul>
 80023b8:	4603      	mov	r3, r0
 80023ba:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80023be:	4618      	mov	r0, r3
 80023c0:	f7fe f898 	bl	80004f4 <__aeabi_fdiv>
 80023c4:	4603      	mov	r3, r0
 80023c6:	4618      	mov	r0, r3
 80023c8:	f003 fec8 	bl	800615c <sinf>
 80023cc:	4603      	mov	r3, r0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	40490fd0 	.word	0x40490fd0

080023dc <EaseInOutSine>:

static float EaseInOutSine(float t)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
    return -(cosf(3.14159f * t) - 1) / 2;
 80023e4:	490d      	ldr	r1, [pc, #52]	@ (800241c <EaseInOutSine+0x40>)
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f7fd ffd0 	bl	800038c <__aeabi_fmul>
 80023ec:	4603      	mov	r3, r0
 80023ee:	4618      	mov	r0, r3
 80023f0:	f003 fe7c 	bl	80060ec <cosf>
 80023f4:	4603      	mov	r3, r0
 80023f6:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7fd febc 	bl	8000178 <__aeabi_fsub>
 8002400:	4603      	mov	r3, r0
 8002402:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002406:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800240a:	4618      	mov	r0, r3
 800240c:	f7fe f872 	bl	80004f4 <__aeabi_fdiv>
 8002410:	4603      	mov	r3, r0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40490fd0 	.word	0x40490fd0

08002420 <GetEaseValue>:

static float GetEaseValue(float progress, EaseType_t easeType)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	460b      	mov	r3, r1
 800242a:	70fb      	strb	r3, [r7, #3]
    switch (easeType)
 800242c:	78fb      	ldrb	r3, [r7, #3]
 800242e:	2b18      	cmp	r3, #24
 8002430:	f200 80b3 	bhi.w	800259a <GetEaseValue+0x17a>
 8002434:	a201      	add	r2, pc, #4	@ (adr r2, 800243c <GetEaseValue+0x1c>)
 8002436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800243a:	bf00      	nop
 800243c:	080024a1 	.word	0x080024a1
 8002440:	080024ab 	.word	0x080024ab
 8002444:	080024b5 	.word	0x080024b5
 8002448:	080024bf 	.word	0x080024bf
 800244c:	080024c9 	.word	0x080024c9
 8002450:	080024d3 	.word	0x080024d3
 8002454:	080024dd 	.word	0x080024dd
 8002458:	080024e7 	.word	0x080024e7
 800245c:	080024f1 	.word	0x080024f1
 8002460:	080024fb 	.word	0x080024fb
 8002464:	08002505 	.word	0x08002505
 8002468:	0800250f 	.word	0x0800250f
 800246c:	08002519 	.word	0x08002519
 8002470:	08002523 	.word	0x08002523
 8002474:	0800252d 	.word	0x0800252d
 8002478:	08002537 	.word	0x08002537
 800247c:	08002541 	.word	0x08002541
 8002480:	0800254b 	.word	0x0800254b
 8002484:	08002555 	.word	0x08002555
 8002488:	0800255f 	.word	0x0800255f
 800248c:	08002569 	.word	0x08002569
 8002490:	08002573 	.word	0x08002573
 8002494:	0800257d 	.word	0x0800257d
 8002498:	08002587 	.word	0x08002587
 800249c:	08002591 	.word	0x08002591
    {
    case EASE_LINEAR:
        return EaseLinear(progress);
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f7ff fa15 	bl	80018d0 <EaseLinear>
 80024a6:	4603      	mov	r3, r0
 80024a8:	e078      	b.n	800259c <GetEaseValue+0x17c>
    case EASE_IN_QUAD:
        return EaseInQuad(progress);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f7ff fa1a 	bl	80018e4 <EaseInQuad>
 80024b0:	4603      	mov	r3, r0
 80024b2:	e073      	b.n	800259c <GetEaseValue+0x17c>
    case EASE_OUT_QUAD:
        return EaseOutQuad(progress);
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f7ff fa22 	bl	80018fe <EaseOutQuad>
 80024ba:	4603      	mov	r3, r0
 80024bc:	e06e      	b.n	800259c <GetEaseValue+0x17c>
    case EASE_INOUT_QUAD:
        return EaseInOutQuad(progress);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f7ff fa30 	bl	8001924 <EaseInOutQuad>
 80024c4:	4603      	mov	r3, r0
 80024c6:	e069      	b.n	800259c <GetEaseValue+0x17c>
    case EASE_IN_CUBIC:
        return EaseInCubic(progress);
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f7ff fa5e 	bl	800198a <EaseInCubic>
 80024ce:	4603      	mov	r3, r0
 80024d0:	e064      	b.n	800259c <GetEaseValue+0x17c>
    case EASE_OUT_CUBIC:
        return EaseOutCubic(progress);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f7ff fa6b 	bl	80019ae <EaseOutCubic>
 80024d8:	4603      	mov	r3, r0
 80024da:	e05f      	b.n	800259c <GetEaseValue+0x17c>
    case EASE_INOUT_CUBIC:
        return EaseInOutCubic(progress);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f7ff fa85 	bl	80019ec <EaseInOutCubic>
 80024e2:	4603      	mov	r3, r0
 80024e4:	e05a      	b.n	800259c <GetEaseValue+0x17c>
    case EASE_IN_EXPO:
        return EaseInExpo(progress);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f7ff fad2 	bl	8001a90 <EaseInExpo>
 80024ec:	4603      	mov	r3, r0
 80024ee:	e055      	b.n	800259c <GetEaseValue+0x17c>
    case EASE_OUT_EXPO:
        return EaseOutExpo(progress);
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f7ff faf3 	bl	8001adc <EaseOutExpo>
 80024f6:	4603      	mov	r3, r0
 80024f8:	e050      	b.n	800259c <GetEaseValue+0x17c>
    case EASE_INOUT_EXPO:
        return EaseInOutExpo(progress);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f7ff fb14 	bl	8001b28 <EaseInOutExpo>
 8002500:	4603      	mov	r3, r0
 8002502:	e04b      	b.n	800259c <GetEaseValue+0x17c>
    case EASE_IN_CIRC:
        return EaseInCirc(progress);
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f7ff fb6f 	bl	8001be8 <EaseInCirc>
 800250a:	4603      	mov	r3, r0
 800250c:	e046      	b.n	800259c <GetEaseValue+0x17c>
    case EASE_OUT_CIRC:
        return EaseOutCirc(progress);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f7ff fb87 	bl	8001c22 <EaseOutCirc>
 8002514:	4603      	mov	r3, r0
 8002516:	e041      	b.n	800259c <GetEaseValue+0x17c>
    case EASE_INOUT_CIRC:
        return EaseInOutCirc(progress);
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f7ff fba0 	bl	8001c5e <EaseInOutCirc>
 800251e:	4603      	mov	r3, r0
 8002520:	e03c      	b.n	800259c <GetEaseValue+0x17c>
    case EASE_IN_ELASTIC:
        return EaseInElastic(progress);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f7ff fbf6 	bl	8001d14 <EaseInElastic>
 8002528:	4603      	mov	r3, r0
 800252a:	e037      	b.n	800259c <GetEaseValue+0x17c>
    case EASE_OUT_ELASTIC:
        return EaseOutElastic(progress);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f7ff fc41 	bl	8001db4 <EaseOutElastic>
 8002532:	4603      	mov	r3, r0
 8002534:	e032      	b.n	800259c <GetEaseValue+0x17c>
    case EASE_INOUT_ELASTIC:
        return EaseInOutElastic(progress);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f7ff fc8c 	bl	8001e54 <EaseInOutElastic>
 800253c:	4603      	mov	r3, r0
 800253e:	e02d      	b.n	800259c <GetEaseValue+0x17c>
    case EASE_IN_BOUNCE:
        return EaseInBounce(progress);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f7ff fdbd 	bl	80020c0 <EaseInBounce>
 8002546:	4603      	mov	r3, r0
 8002548:	e028      	b.n	800259c <GetEaseValue+0x17c>
    case EASE_OUT_BOUNCE:
        return EaseOutBounce(progress);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f7ff fd1a 	bl	8001f84 <EaseOutBounce>
 8002550:	4603      	mov	r3, r0
 8002552:	e023      	b.n	800259c <GetEaseValue+0x17c>
    case EASE_INOUT_BOUNCE:
        return EaseInOutBounce(progress);
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f7ff fdcb 	bl	80020f0 <EaseInOutBounce>
 800255a:	4603      	mov	r3, r0
 800255c:	e01e      	b.n	800259c <GetEaseValue+0x17c>
    case EASE_IN_BACK:
        return EaseInBack(progress);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f7ff fe04 	bl	800216c <EaseInBack>
 8002564:	4603      	mov	r3, r0
 8002566:	e019      	b.n	800259c <GetEaseValue+0x17c>
    case EASE_OUT_BACK:
        return EaseOutBack(progress);
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f7ff fe31 	bl	80021d0 <EaseOutBack>
 800256e:	4603      	mov	r3, r0
 8002570:	e014      	b.n	800259c <GetEaseValue+0x17c>
    case EASE_INOUT_BACK:
        return EaseInOutBack(progress);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f7ff fe6e 	bl	8002254 <EaseInOutBack>
 8002578:	4603      	mov	r3, r0
 800257a:	e00f      	b.n	800259c <GetEaseValue+0x17c>
    case EASE_IN_SINE:
        return EaseInSine(progress);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f7ff fef3 	bl	8002368 <EaseInSine>
 8002582:	4603      	mov	r3, r0
 8002584:	e00a      	b.n	800259c <GetEaseValue+0x17c>
    case EASE_OUT_SINE:
        return EaseOutSine(progress);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f7ff ff0e 	bl	80023a8 <EaseOutSine>
 800258c:	4603      	mov	r3, r0
 800258e:	e005      	b.n	800259c <GetEaseValue+0x17c>
    case EASE_INOUT_SINE:
        return EaseInOutSine(progress);
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f7ff ff23 	bl	80023dc <EaseInOutSine>
 8002596:	4603      	mov	r3, r0
 8002598:	e000      	b.n	800259c <GetEaseValue+0x17c>
    default:
        return progress;
 800259a:	687b      	ldr	r3, [r7, #4]
    }
}
 800259c:	4618      	mov	r0, r3
 800259e:	3708      	adds	r7, #8
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <OLED_InitAnimation>:

#pragma region ANIMATIONTWEENS
// 这里是底层动画实现
void OLED_InitAnimation(Animation_t *anim, float startValue, float endValue,
                        uint32_t duration, EaseType_t easeType)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]
 80025b0:	603b      	str	r3, [r7, #0]
    anim->startTime = HAL_GetTick();
 80025b2:	f000 fdcf 	bl	8003154 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	601a      	str	r2, [r3, #0]
    anim->duration = duration;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	683a      	ldr	r2, [r7, #0]
 80025c0:	605a      	str	r2, [r3, #4]
    anim->startValue = startValue;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	68ba      	ldr	r2, [r7, #8]
 80025c6:	609a      	str	r2, [r3, #8]
    anim->endValue = endValue;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	60da      	str	r2, [r3, #12]
    anim->currentValue = startValue;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	68ba      	ldr	r2, [r7, #8]
 80025d2:	611a      	str	r2, [r3, #16]
    anim->isActive = 1;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2201      	movs	r2, #1
 80025d8:	751a      	strb	r2, [r3, #20]
    anim->easeType = easeType;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	7e3a      	ldrb	r2, [r7, #24]
 80025de:	755a      	strb	r2, [r3, #21]
}
 80025e0:	bf00      	nop
 80025e2:	3710      	adds	r7, #16
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <OLED_UpdateAnimation>:

// 更新动画状态，返回isActive的值
uint8_t OLED_UpdateAnimation(Animation_t *anim, uint32_t currentTime)
{
 80025e8:	b590      	push	{r4, r7, lr}
 80025ea:	b087      	sub	sp, #28
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
    if (!anim->isActive)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	7d1b      	ldrb	r3, [r3, #20]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d101      	bne.n	80025fe <OLED_UpdateAnimation+0x16>
        return 0;
 80025fa:	2300      	movs	r3, #0
 80025fc:	e04d      	b.n	800269a <OLED_UpdateAnimation+0xb2>

    uint32_t elapsedTime = currentTime - anim->startTime;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	683a      	ldr	r2, [r7, #0]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	617b      	str	r3, [r7, #20]

    // 动画完成
    if (elapsedTime >= anim->duration || anim->currentValue == anim->endValue) // 如果我的目标在指定的点上，也关闭isActive
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	697a      	ldr	r2, [r7, #20]
 800260e:	429a      	cmp	r2, r3
 8002610:	d20a      	bcs.n	8002628 <OLED_UpdateAnimation+0x40>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	691a      	ldr	r2, [r3, #16]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	4619      	mov	r1, r3
 800261c:	4610      	mov	r0, r2
 800261e:	f7fe f849 	bl	80006b4 <__aeabi_fcmpeq>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d008      	beq.n	800263a <OLED_UpdateAnimation+0x52>
    {
        anim->currentValue = anim->endValue;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	68da      	ldr	r2, [r3, #12]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	611a      	str	r2, [r3, #16]
        anim->isActive = 0;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	751a      	strb	r2, [r3, #20]
        return 0;
 8002636:	2300      	movs	r3, #0
 8002638:	e02f      	b.n	800269a <OLED_UpdateAnimation+0xb2>
    }

    // 计算当前进度 (0.0 - 1.0)
    float progress = (float)elapsedTime / anim->duration;
 800263a:	6978      	ldr	r0, [r7, #20]
 800263c:	f7fd fe4e 	bl	80002dc <__aeabi_ui2f>
 8002640:	4604      	mov	r4, r0
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	4618      	mov	r0, r3
 8002648:	f7fd fe48 	bl	80002dc <__aeabi_ui2f>
 800264c:	4603      	mov	r3, r0
 800264e:	4619      	mov	r1, r3
 8002650:	4620      	mov	r0, r4
 8002652:	f7fd ff4f 	bl	80004f4 <__aeabi_fdiv>
 8002656:	4603      	mov	r3, r0
 8002658:	613b      	str	r3, [r7, #16]

    // 应用缓动函数
    float easedProgress = GetEaseValue(progress, anim->easeType);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	7d5b      	ldrb	r3, [r3, #21]
 800265e:	4619      	mov	r1, r3
 8002660:	6938      	ldr	r0, [r7, #16]
 8002662:	f7ff fedd 	bl	8002420 <GetEaseValue>
 8002666:	60f8      	str	r0, [r7, #12]

    // 计算当前值
    anim->currentValue = anim->startValue + (anim->endValue - anim->startValue) * easedProgress;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	689c      	ldr	r4, [r3, #8]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	68da      	ldr	r2, [r3, #12]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	4619      	mov	r1, r3
 8002676:	4610      	mov	r0, r2
 8002678:	f7fd fd7e 	bl	8000178 <__aeabi_fsub>
 800267c:	4603      	mov	r3, r0
 800267e:	68f9      	ldr	r1, [r7, #12]
 8002680:	4618      	mov	r0, r3
 8002682:	f7fd fe83 	bl	800038c <__aeabi_fmul>
 8002686:	4603      	mov	r3, r0
 8002688:	4619      	mov	r1, r3
 800268a:	4620      	mov	r0, r4
 800268c:	f7fd fd76 	bl	800017c <__addsf3>
 8002690:	4603      	mov	r3, r0
 8002692:	461a      	mov	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	611a      	str	r2, [r3, #16]

    return 1;
 8002698:	2301      	movs	r3, #1
}
 800269a:	4618      	mov	r0, r3
 800269c:	371c      	adds	r7, #28
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd90      	pop	{r4, r7, pc}

080026a2 <OLED_GetAnimationValue>:

// 获取当前动画值
float OLED_GetAnimationValue(Animation_t *anim)
{
 80026a2:	b480      	push	{r7}
 80026a4:	b083      	sub	sp, #12
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
    return anim->currentValue;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	691b      	ldr	r3, [r3, #16]
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bc80      	pop	{r7}
 80026b6:	4770      	bx	lr

080026b8 <OLED_InitAnimationManager>:
AnimationManager_t Menu_AnimationManager;
AnimationManager_t Cursor_AnimationManager;
AnimationManager_t g_AnimationManager; // 全局动画管理器

void OLED_InitAnimationManager(AnimationManager_t *manager) // 这是初始化一个动画管理器，填入你的manager名字，在系统初始化时候调用它
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
    manager->count = 0;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 25f0 	strb.w	r2, [r3, #1520]	@ 0x5f0
    memset(manager->taggedAnimations, 0, sizeof(manager->taggedAnimations));
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f44f 62be 	mov.w	r2, #1520	@ 0x5f0
 80026ce:	2100      	movs	r1, #0
 80026d0:	4618      	mov	r0, r3
 80026d2:	f003 f801 	bl	80056d8 <memset>
}
 80026d6:	bf00      	nop
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <OLED_FindTaggedAnimation>:

TaggedAnimation_t *OLED_FindTaggedAnimation(AnimationManager_t *manager, const char *tag) // 查找对应manager的标签对应的动画tag
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b084      	sub	sp, #16
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
 80026e6:	6039      	str	r1, [r7, #0]
    for (uint8_t i = 0; i < manager->count; i++)
 80026e8:	2300      	movs	r3, #0
 80026ea:	73fb      	strb	r3, [r7, #15]
 80026ec:	e016      	b.n	800271c <OLED_FindTaggedAnimation+0x3e>
    {
        if (strcmp(manager->taggedAnimations[i].tag, tag) == 0)
 80026ee:	7bfb      	ldrb	r3, [r7, #15]
 80026f0:	224c      	movs	r2, #76	@ 0x4c
 80026f2:	fb02 f303 	mul.w	r3, r2, r3
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	4413      	add	r3, r2
 80026fa:	6839      	ldr	r1, [r7, #0]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7fd fd25 	bl	800014c <strcmp>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d106      	bne.n	8002716 <OLED_FindTaggedAnimation+0x38>
        {
            return &manager->taggedAnimations[i];
 8002708:	7bfb      	ldrb	r3, [r7, #15]
 800270a:	224c      	movs	r2, #76	@ 0x4c
 800270c:	fb02 f303 	mul.w	r3, r2, r3
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	4413      	add	r3, r2
 8002714:	e009      	b.n	800272a <OLED_FindTaggedAnimation+0x4c>
    for (uint8_t i = 0; i < manager->count; i++)
 8002716:	7bfb      	ldrb	r3, [r7, #15]
 8002718:	3301      	adds	r3, #1
 800271a:	73fb      	strb	r3, [r7, #15]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f893 35f0 	ldrb.w	r3, [r3, #1520]	@ 0x5f0
 8002722:	7bfa      	ldrb	r2, [r7, #15]
 8002724:	429a      	cmp	r2, r3
 8002726:	d3e2      	bcc.n	80026ee <OLED_FindTaggedAnimation+0x10>
        }
    }
    return NULL;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3710      	adds	r7, #16
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <OLED_GetObjectPosition>:

uint8_t OLED_GetObjectPosition(AnimationManager_t *manager, const char *tag, float *x, float *y) // 获取tag当前位置
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b086      	sub	sp, #24
 8002736:	af00      	add	r7, sp, #0
 8002738:	60f8      	str	r0, [r7, #12]
 800273a:	60b9      	str	r1, [r7, #8]
 800273c:	607a      	str	r2, [r7, #4]
 800273e:	603b      	str	r3, [r7, #0]
    TaggedAnimation_t *anim = OLED_FindTaggedAnimation(manager, tag);
 8002740:	68b9      	ldr	r1, [r7, #8]
 8002742:	68f8      	ldr	r0, [r7, #12]
 8002744:	f7ff ffcb 	bl	80026de <OLED_FindTaggedAnimation>
 8002748:	6178      	str	r0, [r7, #20]
    if (anim)
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d00f      	beq.n	8002770 <OLED_GetObjectPosition+0x3e>
    {
        if (x)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d003      	beq.n	800275e <OLED_GetObjectPosition+0x2c>
            *x = anim->currentX;
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	601a      	str	r2, [r3, #0]
        if (y)
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d003      	beq.n	800276c <OLED_GetObjectPosition+0x3a>
            *y = anim->currentY;
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	601a      	str	r2, [r3, #0]
        return 1;
 800276c:	2301      	movs	r3, #1
 800276e:	e000      	b.n	8002772 <OLED_GetObjectPosition+0x40>
    }
    return 0;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3718      	adds	r7, #24
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <OLED_MoveObject>:

// 移动指定标签的对象
void OLED_MoveObject(AnimationManager_t *manager, const char *tag,
                     float startX, float startY, float targetX, float targetY,
                     uint32_t duration, EaseType_t easeType) // 这个函数是用来移动一个对象的，tag是对象的标签，startX和startY是起始坐标，targetX和targetY是目标坐标，duration是动画持续时间，easeType是缓动类型
{
 800277a:	b580      	push	{r7, lr}
 800277c:	b088      	sub	sp, #32
 800277e:	af02      	add	r7, sp, #8
 8002780:	60f8      	str	r0, [r7, #12]
 8002782:	60b9      	str	r1, [r7, #8]
 8002784:	607a      	str	r2, [r7, #4]
 8002786:	603b      	str	r3, [r7, #0]
    // 查找已存在的动画
    TaggedAnimation_t *anim = OLED_FindTaggedAnimation(manager, tag);
 8002788:	68b9      	ldr	r1, [r7, #8]
 800278a:	68f8      	ldr	r0, [r7, #12]
 800278c:	f7ff ffa7 	bl	80026de <OLED_FindTaggedAnimation>
 8002790:	6178      	str	r0, [r7, #20]

    // 如果没找到并且还有可用槽位，创建新的动画
    if (anim == NULL)
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d122      	bne.n	80027de <OLED_MoveObject+0x64>
    {
        if (manager->count >= MAX_ANIMATIONS)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f893 35f0 	ldrb.w	r3, [r3, #1520]	@ 0x5f0
 800279e:	2b13      	cmp	r3, #19
 80027a0:	d838      	bhi.n	8002814 <OLED_MoveObject+0x9a>
            return; // 动画已满，无法添加

        anim = &manager->taggedAnimations[manager->count++];
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f893 35f0 	ldrb.w	r3, [r3, #1520]	@ 0x5f0
 80027a8:	1c5a      	adds	r2, r3, #1
 80027aa:	b2d1      	uxtb	r1, r2
 80027ac:	68fa      	ldr	r2, [r7, #12]
 80027ae:	f882 15f0 	strb.w	r1, [r2, #1520]	@ 0x5f0
 80027b2:	461a      	mov	r2, r3
 80027b4:	234c      	movs	r3, #76	@ 0x4c
 80027b6:	fb02 f303 	mul.w	r3, r2, r3
 80027ba:	68fa      	ldr	r2, [r7, #12]
 80027bc:	4413      	add	r3, r2
 80027be:	617b      	str	r3, [r7, #20]
        strncpy(anim->tag, tag, sizeof(anim->tag) - 1);
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	220f      	movs	r2, #15
 80027c4:	68b9      	ldr	r1, [r7, #8]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f002 ff8e 	bl	80056e8 <strncpy>
        anim->tag[sizeof(anim->tag) - 1] = '\0'; // 确保字符串结束
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	2200      	movs	r2, #0
 80027d0:	73da      	strb	r2, [r3, #15]
        anim->currentX = startX;
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	645a      	str	r2, [r3, #68]	@ 0x44
        anim->currentY = startY;
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	683a      	ldr	r2, [r7, #0]
 80027dc:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    // 初始化或更新X和Y坐标的动画
    OLED_InitAnimation(&anim->xAnimation, startX, targetX, duration, easeType);
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	f103 0010 	add.w	r0, r3, #16
 80027e4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80027e8:	9300      	str	r3, [sp, #0]
 80027ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027ec:	6a3a      	ldr	r2, [r7, #32]
 80027ee:	6879      	ldr	r1, [r7, #4]
 80027f0:	f7ff fed8 	bl	80025a4 <OLED_InitAnimation>
    OLED_InitAnimation(&anim->yAnimation, startY, targetY, duration, easeType);
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 80027fa:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80027fe:	9300      	str	r3, [sp, #0]
 8002800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002802:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002804:	6839      	ldr	r1, [r7, #0]
 8002806:	f7ff fecd 	bl	80025a4 <OLED_InitAnimation>
    anim->isActive = 1;
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	2201      	movs	r2, #1
 800280e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002812:	e000      	b.n	8002816 <OLED_MoveObject+0x9c>
            return; // 动画已满，无法添加
 8002814:	bf00      	nop
}
 8002816:	3718      	adds	r7, #24
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <OLED_UpdateAnimationManager>:

// 更新manager里面的所有动画!
void OLED_UpdateAnimationManager(AnimationManager_t *manager) //! 这里需要使用OLED_UpdateDisplayVSync()来更新显示
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b086      	sub	sp, #24
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
    uint32_t currentTime = HAL_GetTick();
 8002824:	f000 fc96 	bl	8003154 <HAL_GetTick>
 8002828:	6138      	str	r0, [r7, #16]

    for (uint8_t i = 0; i < manager->count; i++)
 800282a:	2300      	movs	r3, #0
 800282c:	75fb      	strb	r3, [r7, #23]
 800282e:	e03a      	b.n	80028a6 <OLED_UpdateAnimationManager+0x8a>
    {
        TaggedAnimation_t *anim = &manager->taggedAnimations[i];
 8002830:	7dfb      	ldrb	r3, [r7, #23]
 8002832:	224c      	movs	r2, #76	@ 0x4c
 8002834:	fb02 f303 	mul.w	r3, r2, r3
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	4413      	add	r3, r2
 800283c:	60fb      	str	r3, [r7, #12]
        if (!anim->isActive)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002844:	2b00      	cmp	r3, #0
 8002846:	d02a      	beq.n	800289e <OLED_UpdateAnimationManager+0x82>
            continue;

        uint8_t activeX = OLED_UpdateAnimation(&anim->xAnimation, currentTime);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	3310      	adds	r3, #16
 800284c:	6939      	ldr	r1, [r7, #16]
 800284e:	4618      	mov	r0, r3
 8002850:	f7ff feca 	bl	80025e8 <OLED_UpdateAnimation>
 8002854:	4603      	mov	r3, r0
 8002856:	72fb      	strb	r3, [r7, #11]
        uint8_t activeY = OLED_UpdateAnimation(&anim->yAnimation, currentTime);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	3328      	adds	r3, #40	@ 0x28
 800285c:	6939      	ldr	r1, [r7, #16]
 800285e:	4618      	mov	r0, r3
 8002860:	f7ff fec2 	bl	80025e8 <OLED_UpdateAnimation>
 8002864:	4603      	mov	r3, r0
 8002866:	72bb      	strb	r3, [r7, #10]

        anim->currentX = OLED_GetAnimationValue(&anim->xAnimation);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	3310      	adds	r3, #16
 800286c:	4618      	mov	r0, r3
 800286e:	f7ff ff18 	bl	80026a2 <OLED_GetAnimationValue>
 8002872:	4602      	mov	r2, r0
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	645a      	str	r2, [r3, #68]	@ 0x44
        anim->currentY = OLED_GetAnimationValue(&anim->yAnimation);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	3328      	adds	r3, #40	@ 0x28
 800287c:	4618      	mov	r0, r3
 800287e:	f7ff ff10 	bl	80026a2 <OLED_GetAnimationValue>
 8002882:	4602      	mov	r2, r0
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	649a      	str	r2, [r3, #72]	@ 0x48

        // 如果两个动画都结束，则标记该对象动画为非活跃
        if (!activeX && !activeY)
 8002888:	7afb      	ldrb	r3, [r7, #11]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d108      	bne.n	80028a0 <OLED_UpdateAnimationManager+0x84>
 800288e:	7abb      	ldrb	r3, [r7, #10]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d105      	bne.n	80028a0 <OLED_UpdateAnimationManager+0x84>
            anim->isActive = 0;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800289c:	e000      	b.n	80028a0 <OLED_UpdateAnimationManager+0x84>
            continue;
 800289e:	bf00      	nop
    for (uint8_t i = 0; i < manager->count; i++)
 80028a0:	7dfb      	ldrb	r3, [r7, #23]
 80028a2:	3301      	adds	r3, #1
 80028a4:	75fb      	strb	r3, [r7, #23]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f893 35f0 	ldrb.w	r3, [r3, #1520]	@ 0x5f0
 80028ac:	7dfa      	ldrb	r2, [r7, #23]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d3be      	bcc.n	8002830 <OLED_UpdateAnimationManager+0x14>
    }
}
 80028b2:	bf00      	nop
 80028b4:	bf00      	nop
 80028b6:	3718      	adds	r7, #24
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <OLED_DoTweenObject>:
    return 0; // 如果没有找到，返回0表示非活跃
}

// 这个函数是用来移动一个对象的，tag是对象的标签，targetX和targetY是目标坐标，duration是动画持续时间，easeType是缓动类型 bool为是可以在while循环里面使用
void OLED_DoTweenObject(AnimationManager_t *manager, const char *tag, float targetX, float targetY, uint32_t duration, EaseType_t easeType, bool enablePrevMutiUseCalling)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b08a      	sub	sp, #40	@ 0x28
 80028c0:	af04      	add	r7, sp, #16
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	607a      	str	r2, [r7, #4]
 80028c8:	603b      	str	r3, [r7, #0]
    TaggedAnimation_t *anim = OLED_FindTaggedAnimation(manager, tag);
 80028ca:	68b9      	ldr	r1, [r7, #8]
 80028cc:	68f8      	ldr	r0, [r7, #12]
 80028ce:	f7ff ff06 	bl	80026de <OLED_FindTaggedAnimation>
 80028d2:	6178      	str	r0, [r7, #20]
    if (enablePrevMutiUseCalling)
 80028d4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d01a      	beq.n	8002912 <OLED_DoTweenObject+0x56>
    {
        if (anim && !(anim->isActive)) // 找到了动画，而且它不是正在tween的时候
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d03f      	beq.n	8002962 <OLED_DoTweenObject+0xa6>
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d13a      	bne.n	8002962 <OLED_DoTweenObject+0xa6>
        {
            OLED_MoveObject(manager, tag, anim->currentX, anim->currentY, targetX, targetY, duration, easeType);
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 80028f4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80028f8:	9303      	str	r3, [sp, #12]
 80028fa:	6a3b      	ldr	r3, [r7, #32]
 80028fc:	9302      	str	r3, [sp, #8]
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	9301      	str	r3, [sp, #4]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	9300      	str	r3, [sp, #0]
 8002906:	460b      	mov	r3, r1
 8002908:	68b9      	ldr	r1, [r7, #8]
 800290a:	68f8      	ldr	r0, [r7, #12]
 800290c:	f7ff ff35 	bl	800277a <OLED_MoveObject>
        if (anim && (anim->currentX != targetX || anim->currentY != targetY))
        {
            OLED_MoveObject(manager, tag, anim->currentX, anim->currentY, targetX, targetY, duration, easeType);
        }
    }
}
 8002910:	e027      	b.n	8002962 <OLED_DoTweenObject+0xa6>
        if (anim && (anim->currentX != targetX || anim->currentY != targetY))
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d024      	beq.n	8002962 <OLED_DoTweenObject+0xa6>
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800291c:	4619      	mov	r1, r3
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f7fd fec8 	bl	80006b4 <__aeabi_fcmpeq>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d009      	beq.n	800293e <OLED_DoTweenObject+0x82>
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800292e:	4619      	mov	r1, r3
 8002930:	6838      	ldr	r0, [r7, #0]
 8002932:	f7fd febf 	bl	80006b4 <__aeabi_fcmpeq>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d000      	beq.n	800293e <OLED_DoTweenObject+0x82>
}
 800293c:	e011      	b.n	8002962 <OLED_DoTweenObject+0xa6>
            OLED_MoveObject(manager, tag, anim->currentX, anim->currentY, targetX, targetY, duration, easeType);
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8002946:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800294a:	9303      	str	r3, [sp, #12]
 800294c:	6a3b      	ldr	r3, [r7, #32]
 800294e:	9302      	str	r3, [sp, #8]
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	9301      	str	r3, [sp, #4]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	9300      	str	r3, [sp, #0]
 8002958:	460b      	mov	r3, r1
 800295a:	68b9      	ldr	r1, [r7, #8]
 800295c:	68f8      	ldr	r0, [r7, #12]
 800295e:	f7ff ff0c 	bl	800277a <OLED_MoveObject>
}
 8002962:	bf00      	nop
 8002964:	3718      	adds	r7, #24
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <OLED_DrawTitleBar>:

#pragma region OLED_EPICFUL_UI

// 绘制UI标题栏
void OLED_DrawTitleBar(char *title) // 确保标题长度不超过22个字符 //! UPDATEDISPLAY REQUIRED
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b086      	sub	sp, #24
 800296e:	af02      	add	r7, sp, #8
 8002970:	6078      	str	r0, [r7, #4]
    unsigned char titleLength = strlen(title) * 6;
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f7fd fbf4 	bl	8000160 <strlen>
 8002978:	4603      	mov	r3, r0
 800297a:	b2db      	uxtb	r3, r3
 800297c:	461a      	mov	r2, r3
 800297e:	0052      	lsls	r2, r2, #1
 8002980:	4413      	add	r3, r2
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	73fb      	strb	r3, [r7, #15]

    // 绘制标题栏背景 (白色填充)
    OLED_DrawFilledRectangle(0, 0, OLED_WIDTH, 8, 1);
 8002986:	2301      	movs	r3, #1
 8002988:	9300      	str	r3, [sp, #0]
 800298a:	2308      	movs	r3, #8
 800298c:	2280      	movs	r2, #128	@ 0x80
 800298e:	2100      	movs	r1, #0
 8002990:	2000      	movs	r0, #0
 8002992:	f000 f810 	bl	80029b6 <OLED_DrawFilledRectangle>

    // 显示标题 (黑底白字，反色效果)
    OLED_DisplayStringInverted((OLED_WIDTH - titleLength) / 2, 0, title, 1);
 8002996:	7bfb      	ldrb	r3, [r7, #15]
 8002998:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800299c:	0fda      	lsrs	r2, r3, #31
 800299e:	4413      	add	r3, r2
 80029a0:	105b      	asrs	r3, r3, #1
 80029a2:	b218      	sxth	r0, r3
 80029a4:	2301      	movs	r3, #1
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	2100      	movs	r1, #0
 80029aa:	f7fe fc0c 	bl	80011c6 <OLED_DisplayStringInverted>
}
 80029ae:	bf00      	nop
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <OLED_DrawFilledRectangle>:
    }
}

// 绘制填充矩形
void OLED_DrawFilledRectangle(int16_t x, int16_t y, uint8_t width, uint8_t height, uint8_t color) //! UPDATEDISPLAY REQUIRED
{
 80029b6:	b590      	push	{r4, r7, lr}
 80029b8:	b087      	sub	sp, #28
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	4604      	mov	r4, r0
 80029be:	4608      	mov	r0, r1
 80029c0:	4611      	mov	r1, r2
 80029c2:	461a      	mov	r2, r3
 80029c4:	4623      	mov	r3, r4
 80029c6:	80fb      	strh	r3, [r7, #6]
 80029c8:	4603      	mov	r3, r0
 80029ca:	80bb      	strh	r3, [r7, #4]
 80029cc:	460b      	mov	r3, r1
 80029ce:	70fb      	strb	r3, [r7, #3]
 80029d0:	4613      	mov	r3, r2
 80029d2:	70bb      	strb	r3, [r7, #2]
    // Initial check for zero dimensions
    if (width == 0 || height == 0)
 80029d4:	78fb      	ldrb	r3, [r7, #3]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d07e      	beq.n	8002ad8 <OLED_DrawFilledRectangle+0x122>
 80029da:	78bb      	ldrb	r3, [r7, #2]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d07b      	beq.n	8002ad8 <OLED_DrawFilledRectangle+0x122>
    {
        return;
    }

    // Use int16_t for width and height internally for clipping calculations
    int16_t current_width = width;
 80029e0:	78fb      	ldrb	r3, [r7, #3]
 80029e2:	82fb      	strh	r3, [r7, #22]
    int16_t current_height = height;
 80029e4:	78bb      	ldrb	r3, [r7, #2]
 80029e6:	82bb      	strh	r3, [r7, #20]

    // Clip left edge: if x is negative, adjust width and set x to 0
    if (x < 0)
 80029e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	da06      	bge.n	80029fe <OLED_DrawFilledRectangle+0x48>
    {
        current_width += x; // x is negative, so this reduces width
 80029f0:	8afa      	ldrh	r2, [r7, #22]
 80029f2:	88fb      	ldrh	r3, [r7, #6]
 80029f4:	4413      	add	r3, r2
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	82fb      	strh	r3, [r7, #22]
        x = 0;
 80029fa:	2300      	movs	r3, #0
 80029fc:	80fb      	strh	r3, [r7, #6]
    }

    // Clip top edge: if y is negative, adjust height and set y to 0
    if (y < 0)
 80029fe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	da06      	bge.n	8002a14 <OLED_DrawFilledRectangle+0x5e>
    {
        current_height += y; // y is negative, so this reduces height
 8002a06:	8aba      	ldrh	r2, [r7, #20]
 8002a08:	88bb      	ldrh	r3, [r7, #4]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	82bb      	strh	r3, [r7, #20]
        y = 0;
 8002a10:	2300      	movs	r3, #0
 8002a12:	80bb      	strh	r3, [r7, #4]
    }

    // If width or height became non-positive after left/top clipping, nothing to draw
    if (current_width <= 0 || current_height <= 0)
 8002a14:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	dd5f      	ble.n	8002adc <OLED_DrawFilledRectangle+0x126>
 8002a1c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	dd5b      	ble.n	8002adc <OLED_DrawFilledRectangle+0x126>
        return;
    }

    // Check if the adjusted rectangle is entirely off-screen to the right or bottom
    // At this point, x and y are >= 0.
    if (x >= OLED_WIDTH || y >= OLED_HEIGHT)
 8002a24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a28:	2b7f      	cmp	r3, #127	@ 0x7f
 8002a2a:	dc59      	bgt.n	8002ae0 <OLED_DrawFilledRectangle+0x12a>
 8002a2c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002a30:	2b3f      	cmp	r3, #63	@ 0x3f
 8002a32:	dc55      	bgt.n	8002ae0 <OLED_DrawFilledRectangle+0x12a>
    {
        return;
    }

    // Clip right edge: if x + current_width extends beyond OLED_WIDTH
    if (x + current_width > OLED_WIDTH)
 8002a34:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002a38:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	2b80      	cmp	r3, #128	@ 0x80
 8002a40:	dd04      	ble.n	8002a4c <OLED_DrawFilledRectangle+0x96>
    {
        current_width = OLED_WIDTH - x;
 8002a42:	88fb      	ldrh	r3, [r7, #6]
 8002a44:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	82fb      	strh	r3, [r7, #22]
    }

    // Clip bottom edge: if y + current_height extends beyond OLED_HEIGHT
    if (y + current_height > OLED_HEIGHT)
 8002a4c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002a50:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002a54:	4413      	add	r3, r2
 8002a56:	2b40      	cmp	r3, #64	@ 0x40
 8002a58:	dd04      	ble.n	8002a64 <OLED_DrawFilledRectangle+0xae>
    {
        current_height = OLED_HEIGHT - y;
 8002a5a:	88bb      	ldrh	r3, [r7, #4]
 8002a5c:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	82bb      	strh	r3, [r7, #20]
    }

    // If width or height became non-positive after right/bottom clipping, nothing to draw
    if (current_width <= 0 || current_height <= 0)
 8002a64:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	dd3b      	ble.n	8002ae4 <OLED_DrawFilledRectangle+0x12e>
 8002a6c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	dd37      	ble.n	8002ae4 <OLED_DrawFilledRectangle+0x12e>
    {
        return;
    }

    // Cast coordinates and dimensions to uint8_t for drawing
    uint8_t final_x = (uint8_t)x;
 8002a74:	88fb      	ldrh	r3, [r7, #6]
 8002a76:	747b      	strb	r3, [r7, #17]
    uint8_t final_y = (uint8_t)y;
 8002a78:	88bb      	ldrh	r3, [r7, #4]
 8002a7a:	743b      	strb	r3, [r7, #16]
    uint8_t final_width = (uint8_t)current_width;
 8002a7c:	8afb      	ldrh	r3, [r7, #22]
 8002a7e:	73fb      	strb	r3, [r7, #15]
    uint8_t final_height = (uint8_t)current_height;
 8002a80:	8abb      	ldrh	r3, [r7, #20]
 8002a82:	73bb      	strb	r3, [r7, #14]

    uint8_t x2 = final_x + final_width - 1;
 8002a84:	7c7a      	ldrb	r2, [r7, #17]
 8002a86:	7bfb      	ldrb	r3, [r7, #15]
 8002a88:	4413      	add	r3, r2
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	737b      	strb	r3, [r7, #13]
    uint8_t y2 = final_y + final_height - 1;
 8002a90:	7c3a      	ldrb	r2, [r7, #16]
 8002a92:	7bbb      	ldrb	r3, [r7, #14]
 8002a94:	4413      	add	r3, r2
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	733b      	strb	r3, [r7, #12]

    // 逐像素填充
    for (uint8_t j = final_y; j <= y2; j++)
 8002a9c:	7c3b      	ldrb	r3, [r7, #16]
 8002a9e:	74fb      	strb	r3, [r7, #19]
 8002aa0:	e015      	b.n	8002ace <OLED_DrawFilledRectangle+0x118>
    {
        for (uint8_t i = final_x; i <= x2; i++)
 8002aa2:	7c7b      	ldrb	r3, [r7, #17]
 8002aa4:	74bb      	strb	r3, [r7, #18]
 8002aa6:	e00b      	b.n	8002ac0 <OLED_DrawFilledRectangle+0x10a>
        {
            OLED_WritePixel(i, j, color);
 8002aa8:	7cbb      	ldrb	r3, [r7, #18]
 8002aaa:	b21b      	sxth	r3, r3
 8002aac:	7cfa      	ldrb	r2, [r7, #19]
 8002aae:	b211      	sxth	r1, r2
 8002ab0:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7fe f88d 	bl	8000bd4 <OLED_WritePixel>
        for (uint8_t i = final_x; i <= x2; i++)
 8002aba:	7cbb      	ldrb	r3, [r7, #18]
 8002abc:	3301      	adds	r3, #1
 8002abe:	74bb      	strb	r3, [r7, #18]
 8002ac0:	7cba      	ldrb	r2, [r7, #18]
 8002ac2:	7b7b      	ldrb	r3, [r7, #13]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d9ef      	bls.n	8002aa8 <OLED_DrawFilledRectangle+0xf2>
    for (uint8_t j = final_y; j <= y2; j++)
 8002ac8:	7cfb      	ldrb	r3, [r7, #19]
 8002aca:	3301      	adds	r3, #1
 8002acc:	74fb      	strb	r3, [r7, #19]
 8002ace:	7cfa      	ldrb	r2, [r7, #19]
 8002ad0:	7b3b      	ldrb	r3, [r7, #12]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d9e5      	bls.n	8002aa2 <OLED_DrawFilledRectangle+0xec>
 8002ad6:	e006      	b.n	8002ae6 <OLED_DrawFilledRectangle+0x130>
        return;
 8002ad8:	bf00      	nop
 8002ada:	e004      	b.n	8002ae6 <OLED_DrawFilledRectangle+0x130>
        return;
 8002adc:	bf00      	nop
 8002ade:	e002      	b.n	8002ae6 <OLED_DrawFilledRectangle+0x130>
        return;
 8002ae0:	bf00      	nop
 8002ae2:	e000      	b.n	8002ae6 <OLED_DrawFilledRectangle+0x130>
        return;
 8002ae4:	bf00      	nop
        }
    }
}
 8002ae6:	371c      	adds	r7, #28
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd90      	pop	{r4, r7, pc}

08002aec <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002af0:	4b17      	ldr	r3, [pc, #92]	@ (8002b50 <MX_SPI2_Init+0x64>)
 8002af2:	4a18      	ldr	r2, [pc, #96]	@ (8002b54 <MX_SPI2_Init+0x68>)
 8002af4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002af6:	4b16      	ldr	r3, [pc, #88]	@ (8002b50 <MX_SPI2_Init+0x64>)
 8002af8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002afc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002afe:	4b14      	ldr	r3, [pc, #80]	@ (8002b50 <MX_SPI2_Init+0x64>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b04:	4b12      	ldr	r3, [pc, #72]	@ (8002b50 <MX_SPI2_Init+0x64>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b0a:	4b11      	ldr	r3, [pc, #68]	@ (8002b50 <MX_SPI2_Init+0x64>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b10:	4b0f      	ldr	r3, [pc, #60]	@ (8002b50 <MX_SPI2_Init+0x64>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002b16:	4b0e      	ldr	r3, [pc, #56]	@ (8002b50 <MX_SPI2_Init+0x64>)
 8002b18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b1c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b1e:	4b0c      	ldr	r3, [pc, #48]	@ (8002b50 <MX_SPI2_Init+0x64>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b24:	4b0a      	ldr	r3, [pc, #40]	@ (8002b50 <MX_SPI2_Init+0x64>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b2a:	4b09      	ldr	r3, [pc, #36]	@ (8002b50 <MX_SPI2_Init+0x64>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b30:	4b07      	ldr	r3, [pc, #28]	@ (8002b50 <MX_SPI2_Init+0x64>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002b36:	4b06      	ldr	r3, [pc, #24]	@ (8002b50 <MX_SPI2_Init+0x64>)
 8002b38:	220a      	movs	r2, #10
 8002b3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002b3c:	4804      	ldr	r0, [pc, #16]	@ (8002b50 <MX_SPI2_Init+0x64>)
 8002b3e:	f001 fe4f 	bl	80047e0 <HAL_SPI_Init>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002b48:	f7fd ffe7 	bl	8000b1a <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002b4c:	bf00      	nop
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	20001b24 	.word	0x20001b24
 8002b54:	40003800 	.word	0x40003800

08002b58 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b088      	sub	sp, #32
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b60:	f107 0310 	add.w	r3, r7, #16
 8002b64:	2200      	movs	r2, #0
 8002b66:	601a      	str	r2, [r3, #0]
 8002b68:	605a      	str	r2, [r3, #4]
 8002b6a:	609a      	str	r2, [r3, #8]
 8002b6c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a1c      	ldr	r2, [pc, #112]	@ (8002be4 <HAL_SPI_MspInit+0x8c>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d131      	bne.n	8002bdc <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002b78:	4b1b      	ldr	r3, [pc, #108]	@ (8002be8 <HAL_SPI_MspInit+0x90>)
 8002b7a:	69db      	ldr	r3, [r3, #28]
 8002b7c:	4a1a      	ldr	r2, [pc, #104]	@ (8002be8 <HAL_SPI_MspInit+0x90>)
 8002b7e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b82:	61d3      	str	r3, [r2, #28]
 8002b84:	4b18      	ldr	r3, [pc, #96]	@ (8002be8 <HAL_SPI_MspInit+0x90>)
 8002b86:	69db      	ldr	r3, [r3, #28]
 8002b88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b8c:	60fb      	str	r3, [r7, #12]
 8002b8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b90:	4b15      	ldr	r3, [pc, #84]	@ (8002be8 <HAL_SPI_MspInit+0x90>)
 8002b92:	699b      	ldr	r3, [r3, #24]
 8002b94:	4a14      	ldr	r2, [pc, #80]	@ (8002be8 <HAL_SPI_MspInit+0x90>)
 8002b96:	f043 0308 	orr.w	r3, r3, #8
 8002b9a:	6193      	str	r3, [r2, #24]
 8002b9c:	4b12      	ldr	r3, [pc, #72]	@ (8002be8 <HAL_SPI_MspInit+0x90>)
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	f003 0308 	and.w	r3, r3, #8
 8002ba4:	60bb      	str	r3, [r7, #8]
 8002ba6:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = IPS_SCK_Pin|IPS_MOSI_Pin;
 8002ba8:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8002bac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bae:	2302      	movs	r3, #2
 8002bb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bb6:	f107 0310 	add.w	r3, r7, #16
 8002bba:	4619      	mov	r1, r3
 8002bbc:	480b      	ldr	r0, [pc, #44]	@ (8002bec <HAL_SPI_MspInit+0x94>)
 8002bbe:	f000 fbdb 	bl	8003378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IPS_MISO_Pin;
 8002bc2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002bc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(IPS_MISO_GPIO_Port, &GPIO_InitStruct);
 8002bd0:	f107 0310 	add.w	r3, r7, #16
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	4805      	ldr	r0, [pc, #20]	@ (8002bec <HAL_SPI_MspInit+0x94>)
 8002bd8:	f000 fbce 	bl	8003378 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002bdc:	bf00      	nop
 8002bde:	3720      	adds	r7, #32
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	40003800 	.word	0x40003800
 8002be8:	40021000 	.word	0x40021000
 8002bec:	40010c00 	.word	0x40010c00

08002bf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b085      	sub	sp, #20
 8002bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002bf6:	4b15      	ldr	r3, [pc, #84]	@ (8002c4c <HAL_MspInit+0x5c>)
 8002bf8:	699b      	ldr	r3, [r3, #24]
 8002bfa:	4a14      	ldr	r2, [pc, #80]	@ (8002c4c <HAL_MspInit+0x5c>)
 8002bfc:	f043 0301 	orr.w	r3, r3, #1
 8002c00:	6193      	str	r3, [r2, #24]
 8002c02:	4b12      	ldr	r3, [pc, #72]	@ (8002c4c <HAL_MspInit+0x5c>)
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	60bb      	str	r3, [r7, #8]
 8002c0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c0e:	4b0f      	ldr	r3, [pc, #60]	@ (8002c4c <HAL_MspInit+0x5c>)
 8002c10:	69db      	ldr	r3, [r3, #28]
 8002c12:	4a0e      	ldr	r2, [pc, #56]	@ (8002c4c <HAL_MspInit+0x5c>)
 8002c14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c18:	61d3      	str	r3, [r2, #28]
 8002c1a:	4b0c      	ldr	r3, [pc, #48]	@ (8002c4c <HAL_MspInit+0x5c>)
 8002c1c:	69db      	ldr	r3, [r3, #28]
 8002c1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c22:	607b      	str	r3, [r7, #4]
 8002c24:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002c26:	4b0a      	ldr	r3, [pc, #40]	@ (8002c50 <HAL_MspInit+0x60>)
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	60fb      	str	r3, [r7, #12]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002c32:	60fb      	str	r3, [r7, #12]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002c3a:	60fb      	str	r3, [r7, #12]
 8002c3c:	4a04      	ldr	r2, [pc, #16]	@ (8002c50 <HAL_MspInit+0x60>)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c42:	bf00      	nop
 8002c44:	3714      	adds	r7, #20
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bc80      	pop	{r7}
 8002c4a:	4770      	bx	lr
 8002c4c:	40021000 	.word	0x40021000
 8002c50:	40010000 	.word	0x40010000

08002c54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c58:	bf00      	nop
 8002c5a:	e7fd      	b.n	8002c58 <NMI_Handler+0x4>

08002c5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c60:	bf00      	nop
 8002c62:	e7fd      	b.n	8002c60 <HardFault_Handler+0x4>

08002c64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c68:	bf00      	nop
 8002c6a:	e7fd      	b.n	8002c68 <MemManage_Handler+0x4>

08002c6c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c70:	bf00      	nop
 8002c72:	e7fd      	b.n	8002c70 <BusFault_Handler+0x4>

08002c74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c78:	bf00      	nop
 8002c7a:	e7fd      	b.n	8002c78 <UsageFault_Handler+0x4>

08002c7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c80:	bf00      	nop
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bc80      	pop	{r7}
 8002c86:	4770      	bx	lr

08002c88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c8c:	bf00      	nop
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bc80      	pop	{r7}
 8002c92:	4770      	bx	lr

08002c94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c98:	bf00      	nop
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bc80      	pop	{r7}
 8002c9e:	4770      	bx	lr

08002ca0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ca4:	f000 fa44 	bl	8003130 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ca8:	bf00      	nop
 8002caa:	bd80      	pop	{r7, pc}

08002cac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b086      	sub	sp, #24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cb4:	4a14      	ldr	r2, [pc, #80]	@ (8002d08 <_sbrk+0x5c>)
 8002cb6:	4b15      	ldr	r3, [pc, #84]	@ (8002d0c <_sbrk+0x60>)
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cc0:	4b13      	ldr	r3, [pc, #76]	@ (8002d10 <_sbrk+0x64>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d102      	bne.n	8002cce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cc8:	4b11      	ldr	r3, [pc, #68]	@ (8002d10 <_sbrk+0x64>)
 8002cca:	4a12      	ldr	r2, [pc, #72]	@ (8002d14 <_sbrk+0x68>)
 8002ccc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cce:	4b10      	ldr	r3, [pc, #64]	@ (8002d10 <_sbrk+0x64>)
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d207      	bcs.n	8002cec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002cdc:	f002 fd18 	bl	8005710 <__errno>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	220c      	movs	r2, #12
 8002ce4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8002cea:	e009      	b.n	8002d00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cec:	4b08      	ldr	r3, [pc, #32]	@ (8002d10 <_sbrk+0x64>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cf2:	4b07      	ldr	r3, [pc, #28]	@ (8002d10 <_sbrk+0x64>)
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	4a05      	ldr	r2, [pc, #20]	@ (8002d10 <_sbrk+0x64>)
 8002cfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3718      	adds	r7, #24
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	20005000 	.word	0x20005000
 8002d0c:	00000400 	.word	0x00000400
 8002d10:	20001b7c 	.word	0x20001b7c
 8002d14:	20001d60 	.word	0x20001d60

08002d18 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d1c:	bf00      	nop
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bc80      	pop	{r7}
 8002d22:	4770      	bx	lr

08002d24 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b096      	sub	sp, #88	@ 0x58
 8002d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d2a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002d2e:	2200      	movs	r2, #0
 8002d30:	601a      	str	r2, [r3, #0]
 8002d32:	605a      	str	r2, [r3, #4]
 8002d34:	609a      	str	r2, [r3, #8]
 8002d36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d38:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	601a      	str	r2, [r3, #0]
 8002d40:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d46:	2200      	movs	r2, #0
 8002d48:	601a      	str	r2, [r3, #0]
 8002d4a:	605a      	str	r2, [r3, #4]
 8002d4c:	609a      	str	r2, [r3, #8]
 8002d4e:	60da      	str	r2, [r3, #12]
 8002d50:	611a      	str	r2, [r3, #16]
 8002d52:	615a      	str	r2, [r3, #20]
 8002d54:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002d56:	1d3b      	adds	r3, r7, #4
 8002d58:	2220      	movs	r2, #32
 8002d5a:	2100      	movs	r1, #0
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f002 fcbb 	bl	80056d8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002d62:	4b3f      	ldr	r3, [pc, #252]	@ (8002e60 <MX_TIM1_Init+0x13c>)
 8002d64:	4a3f      	ldr	r2, [pc, #252]	@ (8002e64 <MX_TIM1_Init+0x140>)
 8002d66:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 720-1;
 8002d68:	4b3d      	ldr	r3, [pc, #244]	@ (8002e60 <MX_TIM1_Init+0x13c>)
 8002d6a:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8002d6e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d70:	4b3b      	ldr	r3, [pc, #236]	@ (8002e60 <MX_TIM1_Init+0x13c>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000-1;
 8002d76:	4b3a      	ldr	r3, [pc, #232]	@ (8002e60 <MX_TIM1_Init+0x13c>)
 8002d78:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8002d7c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d7e:	4b38      	ldr	r3, [pc, #224]	@ (8002e60 <MX_TIM1_Init+0x13c>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002d84:	4b36      	ldr	r3, [pc, #216]	@ (8002e60 <MX_TIM1_Init+0x13c>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d8a:	4b35      	ldr	r3, [pc, #212]	@ (8002e60 <MX_TIM1_Init+0x13c>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002d90:	4833      	ldr	r0, [pc, #204]	@ (8002e60 <MX_TIM1_Init+0x13c>)
 8002d92:	f001 fda9 	bl	80048e8 <HAL_TIM_Base_Init>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d001      	beq.n	8002da0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002d9c:	f7fd febd 	bl	8000b1a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002da0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002da4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002da6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002daa:	4619      	mov	r1, r3
 8002dac:	482c      	ldr	r0, [pc, #176]	@ (8002e60 <MX_TIM1_Init+0x13c>)
 8002dae:	f002 f849 	bl	8004e44 <HAL_TIM_ConfigClockSource>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002db8:	f7fd feaf 	bl	8000b1a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002dbc:	4828      	ldr	r0, [pc, #160]	@ (8002e60 <MX_TIM1_Init+0x13c>)
 8002dbe:	f001 fde2 	bl	8004986 <HAL_TIM_PWM_Init>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d001      	beq.n	8002dcc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002dc8:	f7fd fea7 	bl	8000b1a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002dd4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002dd8:	4619      	mov	r1, r3
 8002dda:	4821      	ldr	r0, [pc, #132]	@ (8002e60 <MX_TIM1_Init+0x13c>)
 8002ddc:	f002 fbaa 	bl	8005534 <HAL_TIMEx_MasterConfigSynchronization>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8002de6:	f7fd fe98 	bl	8000b1a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002dea:	2360      	movs	r3, #96	@ 0x60
 8002dec:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002dee:	2300      	movs	r3, #0
 8002df0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002df2:	2300      	movs	r3, #0
 8002df4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002df6:	2300      	movs	r3, #0
 8002df8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002e02:	2300      	movs	r3, #0
 8002e04:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e0a:	2204      	movs	r2, #4
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	4814      	ldr	r0, [pc, #80]	@ (8002e60 <MX_TIM1_Init+0x13c>)
 8002e10:	f001 ff56 	bl	8004cc0 <HAL_TIM_PWM_ConfigChannel>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8002e1a:	f7fd fe7e 	bl	8000b1a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002e22:	2300      	movs	r3, #0
 8002e24:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002e26:	2300      	movs	r3, #0
 8002e28:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002e32:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002e36:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002e3c:	1d3b      	adds	r3, r7, #4
 8002e3e:	4619      	mov	r1, r3
 8002e40:	4807      	ldr	r0, [pc, #28]	@ (8002e60 <MX_TIM1_Init+0x13c>)
 8002e42:	f002 fbd5 	bl	80055f0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8002e4c:	f7fd fe65 	bl	8000b1a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002e50:	4803      	ldr	r0, [pc, #12]	@ (8002e60 <MX_TIM1_Init+0x13c>)
 8002e52:	f000 f8cd 	bl	8002ff0 <HAL_TIM_MspPostInit>

}
 8002e56:	bf00      	nop
 8002e58:	3758      	adds	r7, #88	@ 0x58
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	20001b80 	.word	0x20001b80
 8002e64:	40012c00 	.word	0x40012c00

08002e68 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b08c      	sub	sp, #48	@ 0x30
 8002e6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002e6e:	f107 030c 	add.w	r3, r7, #12
 8002e72:	2224      	movs	r2, #36	@ 0x24
 8002e74:	2100      	movs	r1, #0
 8002e76:	4618      	mov	r0, r3
 8002e78:	f002 fc2e 	bl	80056d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e7c:	1d3b      	adds	r3, r7, #4
 8002e7e:	2200      	movs	r2, #0
 8002e80:	601a      	str	r2, [r3, #0]
 8002e82:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002e84:	4b20      	ldr	r3, [pc, #128]	@ (8002f08 <MX_TIM3_Init+0xa0>)
 8002e86:	4a21      	ldr	r2, [pc, #132]	@ (8002f0c <MX_TIM3_Init+0xa4>)
 8002e88:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002e8a:	4b1f      	ldr	r3, [pc, #124]	@ (8002f08 <MX_TIM3_Init+0xa0>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e90:	4b1d      	ldr	r3, [pc, #116]	@ (8002f08 <MX_TIM3_Init+0xa0>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8002e96:	4b1c      	ldr	r3, [pc, #112]	@ (8002f08 <MX_TIM3_Init+0xa0>)
 8002e98:	2264      	movs	r2, #100	@ 0x64
 8002e9a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e9c:	4b1a      	ldr	r3, [pc, #104]	@ (8002f08 <MX_TIM3_Init+0xa0>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ea2:	4b19      	ldr	r3, [pc, #100]	@ (8002f08 <MX_TIM3_Init+0xa0>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002eac:	2300      	movs	r3, #0
 8002eae:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8002eb8:	230a      	movs	r3, #10
 8002eba:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8002ec8:	230a      	movs	r3, #10
 8002eca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002ecc:	f107 030c 	add.w	r3, r7, #12
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	480d      	ldr	r0, [pc, #52]	@ (8002f08 <MX_TIM3_Init+0xa0>)
 8002ed4:	f001 fe52 	bl	8004b7c <HAL_TIM_Encoder_Init>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8002ede:	f7fd fe1c 	bl	8000b1a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002eea:	1d3b      	adds	r3, r7, #4
 8002eec:	4619      	mov	r1, r3
 8002eee:	4806      	ldr	r0, [pc, #24]	@ (8002f08 <MX_TIM3_Init+0xa0>)
 8002ef0:	f002 fb20 	bl	8005534 <HAL_TIMEx_MasterConfigSynchronization>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8002efa:	f7fd fe0e 	bl	8000b1a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002efe:	bf00      	nop
 8002f00:	3730      	adds	r7, #48	@ 0x30
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	20001bc8 	.word	0x20001bc8
 8002f0c:	40000400 	.word	0x40000400

08002f10 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b085      	sub	sp, #20
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a09      	ldr	r2, [pc, #36]	@ (8002f44 <HAL_TIM_Base_MspInit+0x34>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d10b      	bne.n	8002f3a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f22:	4b09      	ldr	r3, [pc, #36]	@ (8002f48 <HAL_TIM_Base_MspInit+0x38>)
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	4a08      	ldr	r2, [pc, #32]	@ (8002f48 <HAL_TIM_Base_MspInit+0x38>)
 8002f28:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002f2c:	6193      	str	r3, [r2, #24]
 8002f2e:	4b06      	ldr	r3, [pc, #24]	@ (8002f48 <HAL_TIM_Base_MspInit+0x38>)
 8002f30:	699b      	ldr	r3, [r3, #24]
 8002f32:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f36:	60fb      	str	r3, [r7, #12]
 8002f38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002f3a:	bf00      	nop
 8002f3c:	3714      	adds	r7, #20
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bc80      	pop	{r7}
 8002f42:	4770      	bx	lr
 8002f44:	40012c00 	.word	0x40012c00
 8002f48:	40021000 	.word	0x40021000

08002f4c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b08a      	sub	sp, #40	@ 0x28
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f54:	f107 0314 	add.w	r3, r7, #20
 8002f58:	2200      	movs	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]
 8002f5c:	605a      	str	r2, [r3, #4]
 8002f5e:	609a      	str	r2, [r3, #8]
 8002f60:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM3)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a1e      	ldr	r2, [pc, #120]	@ (8002fe0 <HAL_TIM_Encoder_MspInit+0x94>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d135      	bne.n	8002fd8 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f6c:	4b1d      	ldr	r3, [pc, #116]	@ (8002fe4 <HAL_TIM_Encoder_MspInit+0x98>)
 8002f6e:	69db      	ldr	r3, [r3, #28]
 8002f70:	4a1c      	ldr	r2, [pc, #112]	@ (8002fe4 <HAL_TIM_Encoder_MspInit+0x98>)
 8002f72:	f043 0302 	orr.w	r3, r3, #2
 8002f76:	61d3      	str	r3, [r2, #28]
 8002f78:	4b1a      	ldr	r3, [pc, #104]	@ (8002fe4 <HAL_TIM_Encoder_MspInit+0x98>)
 8002f7a:	69db      	ldr	r3, [r3, #28]
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	613b      	str	r3, [r7, #16]
 8002f82:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f84:	4b17      	ldr	r3, [pc, #92]	@ (8002fe4 <HAL_TIM_Encoder_MspInit+0x98>)
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	4a16      	ldr	r2, [pc, #88]	@ (8002fe4 <HAL_TIM_Encoder_MspInit+0x98>)
 8002f8a:	f043 0308 	orr.w	r3, r3, #8
 8002f8e:	6193      	str	r3, [r2, #24]
 8002f90:	4b14      	ldr	r3, [pc, #80]	@ (8002fe4 <HAL_TIM_Encoder_MspInit+0x98>)
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	f003 0308 	and.w	r3, r3, #8
 8002f98:	60fb      	str	r3, [r7, #12]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Encoder_CH1_Pin|Encoder_CH2_Pin;
 8002f9c:	2330      	movs	r3, #48	@ 0x30
 8002f9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fa8:	f107 0314 	add.w	r3, r7, #20
 8002fac:	4619      	mov	r1, r3
 8002fae:	480e      	ldr	r0, [pc, #56]	@ (8002fe8 <HAL_TIM_Encoder_MspInit+0x9c>)
 8002fb0:	f000 f9e2 	bl	8003378 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8002fb4:	4b0d      	ldr	r3, [pc, #52]	@ (8002fec <HAL_TIM_Encoder_MspInit+0xa0>)
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fbc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002fc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc4:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002fc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fcc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002fd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fd2:	4a06      	ldr	r2, [pc, #24]	@ (8002fec <HAL_TIM_Encoder_MspInit+0xa0>)
 8002fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd6:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002fd8:	bf00      	nop
 8002fda:	3728      	adds	r7, #40	@ 0x28
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	40000400 	.word	0x40000400
 8002fe4:	40021000 	.word	0x40021000
 8002fe8:	40010c00 	.word	0x40010c00
 8002fec:	40010000 	.word	0x40010000

08002ff0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b088      	sub	sp, #32
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ff8:	f107 0310 	add.w	r3, r7, #16
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	601a      	str	r2, [r3, #0]
 8003000:	605a      	str	r2, [r3, #4]
 8003002:	609a      	str	r2, [r3, #8]
 8003004:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a10      	ldr	r2, [pc, #64]	@ (800304c <HAL_TIM_MspPostInit+0x5c>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d118      	bne.n	8003042 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003010:	4b0f      	ldr	r3, [pc, #60]	@ (8003050 <HAL_TIM_MspPostInit+0x60>)
 8003012:	699b      	ldr	r3, [r3, #24]
 8003014:	4a0e      	ldr	r2, [pc, #56]	@ (8003050 <HAL_TIM_MspPostInit+0x60>)
 8003016:	f043 0304 	orr.w	r3, r3, #4
 800301a:	6193      	str	r3, [r2, #24]
 800301c:	4b0c      	ldr	r3, [pc, #48]	@ (8003050 <HAL_TIM_MspPostInit+0x60>)
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	f003 0304 	and.w	r3, r3, #4
 8003024:	60fb      	str	r3, [r7, #12]
 8003026:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003028:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800302c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800302e:	2302      	movs	r3, #2
 8003030:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003032:	2302      	movs	r3, #2
 8003034:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003036:	f107 0310 	add.w	r3, r7, #16
 800303a:	4619      	mov	r1, r3
 800303c:	4805      	ldr	r0, [pc, #20]	@ (8003054 <HAL_TIM_MspPostInit+0x64>)
 800303e:	f000 f99b 	bl	8003378 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003042:	bf00      	nop
 8003044:	3720      	adds	r7, #32
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	40012c00 	.word	0x40012c00
 8003050:	40021000 	.word	0x40021000
 8003054:	40010800 	.word	0x40010800

08003058 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003058:	f7ff fe5e 	bl	8002d18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800305c:	480b      	ldr	r0, [pc, #44]	@ (800308c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800305e:	490c      	ldr	r1, [pc, #48]	@ (8003090 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003060:	4a0c      	ldr	r2, [pc, #48]	@ (8003094 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003062:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003064:	e002      	b.n	800306c <LoopCopyDataInit>

08003066 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003066:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003068:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800306a:	3304      	adds	r3, #4

0800306c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800306c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800306e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003070:	d3f9      	bcc.n	8003066 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003072:	4a09      	ldr	r2, [pc, #36]	@ (8003098 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003074:	4c09      	ldr	r4, [pc, #36]	@ (800309c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003076:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003078:	e001      	b.n	800307e <LoopFillZerobss>

0800307a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800307a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800307c:	3204      	adds	r2, #4

0800307e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800307e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003080:	d3fb      	bcc.n	800307a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003082:	f002 fb4b 	bl	800571c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003086:	f7fd fcc3 	bl	8000a10 <main>
  bx lr
 800308a:	4770      	bx	lr
  ldr r0, =_sdata
 800308c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003090:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8003094:	08007c74 	.word	0x08007c74
  ldr r2, =_sbss
 8003098:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800309c:	20001d5c 	.word	0x20001d5c

080030a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80030a0:	e7fe      	b.n	80030a0 <ADC1_2_IRQHandler>
	...

080030a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030a8:	4b08      	ldr	r3, [pc, #32]	@ (80030cc <HAL_Init+0x28>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a07      	ldr	r2, [pc, #28]	@ (80030cc <HAL_Init+0x28>)
 80030ae:	f043 0310 	orr.w	r3, r3, #16
 80030b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030b4:	2003      	movs	r0, #3
 80030b6:	f000 f92b 	bl	8003310 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030ba:	200f      	movs	r0, #15
 80030bc:	f000 f808 	bl	80030d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030c0:	f7ff fd96 	bl	8002bf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	40022000 	.word	0x40022000

080030d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030d8:	4b12      	ldr	r3, [pc, #72]	@ (8003124 <HAL_InitTick+0x54>)
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	4b12      	ldr	r3, [pc, #72]	@ (8003128 <HAL_InitTick+0x58>)
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	4619      	mov	r1, r3
 80030e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80030e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80030ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ee:	4618      	mov	r0, r3
 80030f0:	f000 f935 	bl	800335e <HAL_SYSTICK_Config>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e00e      	b.n	800311c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2b0f      	cmp	r3, #15
 8003102:	d80a      	bhi.n	800311a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003104:	2200      	movs	r2, #0
 8003106:	6879      	ldr	r1, [r7, #4]
 8003108:	f04f 30ff 	mov.w	r0, #4294967295
 800310c:	f000 f90b 	bl	8003326 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003110:	4a06      	ldr	r2, [pc, #24]	@ (800312c <HAL_InitTick+0x5c>)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003116:	2300      	movs	r3, #0
 8003118:	e000      	b.n	800311c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
}
 800311c:	4618      	mov	r0, r3
 800311e:	3708      	adds	r7, #8
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	2000000c 	.word	0x2000000c
 8003128:	20000014 	.word	0x20000014
 800312c:	20000010 	.word	0x20000010

08003130 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003130:	b480      	push	{r7}
 8003132:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003134:	4b05      	ldr	r3, [pc, #20]	@ (800314c <HAL_IncTick+0x1c>)
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	461a      	mov	r2, r3
 800313a:	4b05      	ldr	r3, [pc, #20]	@ (8003150 <HAL_IncTick+0x20>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4413      	add	r3, r2
 8003140:	4a03      	ldr	r2, [pc, #12]	@ (8003150 <HAL_IncTick+0x20>)
 8003142:	6013      	str	r3, [r2, #0]
}
 8003144:	bf00      	nop
 8003146:	46bd      	mov	sp, r7
 8003148:	bc80      	pop	{r7}
 800314a:	4770      	bx	lr
 800314c:	20000014 	.word	0x20000014
 8003150:	20001c10 	.word	0x20001c10

08003154 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
  return uwTick;
 8003158:	4b02      	ldr	r3, [pc, #8]	@ (8003164 <HAL_GetTick+0x10>)
 800315a:	681b      	ldr	r3, [r3, #0]
}
 800315c:	4618      	mov	r0, r3
 800315e:	46bd      	mov	sp, r7
 8003160:	bc80      	pop	{r7}
 8003162:	4770      	bx	lr
 8003164:	20001c10 	.word	0x20001c10

08003168 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003170:	f7ff fff0 	bl	8003154 <HAL_GetTick>
 8003174:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003180:	d005      	beq.n	800318e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003182:	4b0a      	ldr	r3, [pc, #40]	@ (80031ac <HAL_Delay+0x44>)
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	461a      	mov	r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	4413      	add	r3, r2
 800318c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800318e:	bf00      	nop
 8003190:	f7ff ffe0 	bl	8003154 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	429a      	cmp	r2, r3
 800319e:	d8f7      	bhi.n	8003190 <HAL_Delay+0x28>
  {
  }
}
 80031a0:	bf00      	nop
 80031a2:	bf00      	nop
 80031a4:	3710      	adds	r7, #16
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	20000014 	.word	0x20000014

080031b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b085      	sub	sp, #20
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f003 0307 	and.w	r3, r3, #7
 80031be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031c0:	4b0c      	ldr	r3, [pc, #48]	@ (80031f4 <__NVIC_SetPriorityGrouping+0x44>)
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031c6:	68ba      	ldr	r2, [r7, #8]
 80031c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80031cc:	4013      	ands	r3, r2
 80031ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80031dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031e2:	4a04      	ldr	r2, [pc, #16]	@ (80031f4 <__NVIC_SetPriorityGrouping+0x44>)
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	60d3      	str	r3, [r2, #12]
}
 80031e8:	bf00      	nop
 80031ea:	3714      	adds	r7, #20
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bc80      	pop	{r7}
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	e000ed00 	.word	0xe000ed00

080031f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031f8:	b480      	push	{r7}
 80031fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031fc:	4b04      	ldr	r3, [pc, #16]	@ (8003210 <__NVIC_GetPriorityGrouping+0x18>)
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	0a1b      	lsrs	r3, r3, #8
 8003202:	f003 0307 	and.w	r3, r3, #7
}
 8003206:	4618      	mov	r0, r3
 8003208:	46bd      	mov	sp, r7
 800320a:	bc80      	pop	{r7}
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	e000ed00 	.word	0xe000ed00

08003214 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	4603      	mov	r3, r0
 800321c:	6039      	str	r1, [r7, #0]
 800321e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003224:	2b00      	cmp	r3, #0
 8003226:	db0a      	blt.n	800323e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	b2da      	uxtb	r2, r3
 800322c:	490c      	ldr	r1, [pc, #48]	@ (8003260 <__NVIC_SetPriority+0x4c>)
 800322e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003232:	0112      	lsls	r2, r2, #4
 8003234:	b2d2      	uxtb	r2, r2
 8003236:	440b      	add	r3, r1
 8003238:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800323c:	e00a      	b.n	8003254 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	b2da      	uxtb	r2, r3
 8003242:	4908      	ldr	r1, [pc, #32]	@ (8003264 <__NVIC_SetPriority+0x50>)
 8003244:	79fb      	ldrb	r3, [r7, #7]
 8003246:	f003 030f 	and.w	r3, r3, #15
 800324a:	3b04      	subs	r3, #4
 800324c:	0112      	lsls	r2, r2, #4
 800324e:	b2d2      	uxtb	r2, r2
 8003250:	440b      	add	r3, r1
 8003252:	761a      	strb	r2, [r3, #24]
}
 8003254:	bf00      	nop
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	bc80      	pop	{r7}
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	e000e100 	.word	0xe000e100
 8003264:	e000ed00 	.word	0xe000ed00

08003268 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003268:	b480      	push	{r7}
 800326a:	b089      	sub	sp, #36	@ 0x24
 800326c:	af00      	add	r7, sp, #0
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	60b9      	str	r1, [r7, #8]
 8003272:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f003 0307 	and.w	r3, r3, #7
 800327a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	f1c3 0307 	rsb	r3, r3, #7
 8003282:	2b04      	cmp	r3, #4
 8003284:	bf28      	it	cs
 8003286:	2304      	movcs	r3, #4
 8003288:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	3304      	adds	r3, #4
 800328e:	2b06      	cmp	r3, #6
 8003290:	d902      	bls.n	8003298 <NVIC_EncodePriority+0x30>
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	3b03      	subs	r3, #3
 8003296:	e000      	b.n	800329a <NVIC_EncodePriority+0x32>
 8003298:	2300      	movs	r3, #0
 800329a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800329c:	f04f 32ff 	mov.w	r2, #4294967295
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	fa02 f303 	lsl.w	r3, r2, r3
 80032a6:	43da      	mvns	r2, r3
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	401a      	ands	r2, r3
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032b0:	f04f 31ff 	mov.w	r1, #4294967295
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	fa01 f303 	lsl.w	r3, r1, r3
 80032ba:	43d9      	mvns	r1, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032c0:	4313      	orrs	r3, r2
         );
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3724      	adds	r7, #36	@ 0x24
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bc80      	pop	{r7}
 80032ca:	4770      	bx	lr

080032cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	3b01      	subs	r3, #1
 80032d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032dc:	d301      	bcc.n	80032e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032de:	2301      	movs	r3, #1
 80032e0:	e00f      	b.n	8003302 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032e2:	4a0a      	ldr	r2, [pc, #40]	@ (800330c <SysTick_Config+0x40>)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	3b01      	subs	r3, #1
 80032e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032ea:	210f      	movs	r1, #15
 80032ec:	f04f 30ff 	mov.w	r0, #4294967295
 80032f0:	f7ff ff90 	bl	8003214 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032f4:	4b05      	ldr	r3, [pc, #20]	@ (800330c <SysTick_Config+0x40>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032fa:	4b04      	ldr	r3, [pc, #16]	@ (800330c <SysTick_Config+0x40>)
 80032fc:	2207      	movs	r2, #7
 80032fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	3708      	adds	r7, #8
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	e000e010 	.word	0xe000e010

08003310 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f7ff ff49 	bl	80031b0 <__NVIC_SetPriorityGrouping>
}
 800331e:	bf00      	nop
 8003320:	3708      	adds	r7, #8
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}

08003326 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003326:	b580      	push	{r7, lr}
 8003328:	b086      	sub	sp, #24
 800332a:	af00      	add	r7, sp, #0
 800332c:	4603      	mov	r3, r0
 800332e:	60b9      	str	r1, [r7, #8]
 8003330:	607a      	str	r2, [r7, #4]
 8003332:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003334:	2300      	movs	r3, #0
 8003336:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003338:	f7ff ff5e 	bl	80031f8 <__NVIC_GetPriorityGrouping>
 800333c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	68b9      	ldr	r1, [r7, #8]
 8003342:	6978      	ldr	r0, [r7, #20]
 8003344:	f7ff ff90 	bl	8003268 <NVIC_EncodePriority>
 8003348:	4602      	mov	r2, r0
 800334a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800334e:	4611      	mov	r1, r2
 8003350:	4618      	mov	r0, r3
 8003352:	f7ff ff5f 	bl	8003214 <__NVIC_SetPriority>
}
 8003356:	bf00      	nop
 8003358:	3718      	adds	r7, #24
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800335e:	b580      	push	{r7, lr}
 8003360:	b082      	sub	sp, #8
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f7ff ffb0 	bl	80032cc <SysTick_Config>
 800336c:	4603      	mov	r3, r0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3708      	adds	r7, #8
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
	...

08003378 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003378:	b480      	push	{r7}
 800337a:	b08b      	sub	sp, #44	@ 0x2c
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003382:	2300      	movs	r3, #0
 8003384:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003386:	2300      	movs	r3, #0
 8003388:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800338a:	e169      	b.n	8003660 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800338c:	2201      	movs	r2, #1
 800338e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003390:	fa02 f303 	lsl.w	r3, r2, r3
 8003394:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	69fa      	ldr	r2, [r7, #28]
 800339c:	4013      	ands	r3, r2
 800339e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	f040 8158 	bne.w	800365a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	4a9a      	ldr	r2, [pc, #616]	@ (8003618 <HAL_GPIO_Init+0x2a0>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d05e      	beq.n	8003472 <HAL_GPIO_Init+0xfa>
 80033b4:	4a98      	ldr	r2, [pc, #608]	@ (8003618 <HAL_GPIO_Init+0x2a0>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d875      	bhi.n	80034a6 <HAL_GPIO_Init+0x12e>
 80033ba:	4a98      	ldr	r2, [pc, #608]	@ (800361c <HAL_GPIO_Init+0x2a4>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d058      	beq.n	8003472 <HAL_GPIO_Init+0xfa>
 80033c0:	4a96      	ldr	r2, [pc, #600]	@ (800361c <HAL_GPIO_Init+0x2a4>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d86f      	bhi.n	80034a6 <HAL_GPIO_Init+0x12e>
 80033c6:	4a96      	ldr	r2, [pc, #600]	@ (8003620 <HAL_GPIO_Init+0x2a8>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d052      	beq.n	8003472 <HAL_GPIO_Init+0xfa>
 80033cc:	4a94      	ldr	r2, [pc, #592]	@ (8003620 <HAL_GPIO_Init+0x2a8>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d869      	bhi.n	80034a6 <HAL_GPIO_Init+0x12e>
 80033d2:	4a94      	ldr	r2, [pc, #592]	@ (8003624 <HAL_GPIO_Init+0x2ac>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d04c      	beq.n	8003472 <HAL_GPIO_Init+0xfa>
 80033d8:	4a92      	ldr	r2, [pc, #584]	@ (8003624 <HAL_GPIO_Init+0x2ac>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d863      	bhi.n	80034a6 <HAL_GPIO_Init+0x12e>
 80033de:	4a92      	ldr	r2, [pc, #584]	@ (8003628 <HAL_GPIO_Init+0x2b0>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d046      	beq.n	8003472 <HAL_GPIO_Init+0xfa>
 80033e4:	4a90      	ldr	r2, [pc, #576]	@ (8003628 <HAL_GPIO_Init+0x2b0>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d85d      	bhi.n	80034a6 <HAL_GPIO_Init+0x12e>
 80033ea:	2b12      	cmp	r3, #18
 80033ec:	d82a      	bhi.n	8003444 <HAL_GPIO_Init+0xcc>
 80033ee:	2b12      	cmp	r3, #18
 80033f0:	d859      	bhi.n	80034a6 <HAL_GPIO_Init+0x12e>
 80033f2:	a201      	add	r2, pc, #4	@ (adr r2, 80033f8 <HAL_GPIO_Init+0x80>)
 80033f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f8:	08003473 	.word	0x08003473
 80033fc:	0800344d 	.word	0x0800344d
 8003400:	0800345f 	.word	0x0800345f
 8003404:	080034a1 	.word	0x080034a1
 8003408:	080034a7 	.word	0x080034a7
 800340c:	080034a7 	.word	0x080034a7
 8003410:	080034a7 	.word	0x080034a7
 8003414:	080034a7 	.word	0x080034a7
 8003418:	080034a7 	.word	0x080034a7
 800341c:	080034a7 	.word	0x080034a7
 8003420:	080034a7 	.word	0x080034a7
 8003424:	080034a7 	.word	0x080034a7
 8003428:	080034a7 	.word	0x080034a7
 800342c:	080034a7 	.word	0x080034a7
 8003430:	080034a7 	.word	0x080034a7
 8003434:	080034a7 	.word	0x080034a7
 8003438:	080034a7 	.word	0x080034a7
 800343c:	08003455 	.word	0x08003455
 8003440:	08003469 	.word	0x08003469
 8003444:	4a79      	ldr	r2, [pc, #484]	@ (800362c <HAL_GPIO_Init+0x2b4>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d013      	beq.n	8003472 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800344a:	e02c      	b.n	80034a6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	623b      	str	r3, [r7, #32]
          break;
 8003452:	e029      	b.n	80034a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	3304      	adds	r3, #4
 800345a:	623b      	str	r3, [r7, #32]
          break;
 800345c:	e024      	b.n	80034a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	3308      	adds	r3, #8
 8003464:	623b      	str	r3, [r7, #32]
          break;
 8003466:	e01f      	b.n	80034a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	330c      	adds	r3, #12
 800346e:	623b      	str	r3, [r7, #32]
          break;
 8003470:	e01a      	b.n	80034a8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d102      	bne.n	8003480 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800347a:	2304      	movs	r3, #4
 800347c:	623b      	str	r3, [r7, #32]
          break;
 800347e:	e013      	b.n	80034a8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	2b01      	cmp	r3, #1
 8003486:	d105      	bne.n	8003494 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003488:	2308      	movs	r3, #8
 800348a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	69fa      	ldr	r2, [r7, #28]
 8003490:	611a      	str	r2, [r3, #16]
          break;
 8003492:	e009      	b.n	80034a8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003494:	2308      	movs	r3, #8
 8003496:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	69fa      	ldr	r2, [r7, #28]
 800349c:	615a      	str	r2, [r3, #20]
          break;
 800349e:	e003      	b.n	80034a8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80034a0:	2300      	movs	r3, #0
 80034a2:	623b      	str	r3, [r7, #32]
          break;
 80034a4:	e000      	b.n	80034a8 <HAL_GPIO_Init+0x130>
          break;
 80034a6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	2bff      	cmp	r3, #255	@ 0xff
 80034ac:	d801      	bhi.n	80034b2 <HAL_GPIO_Init+0x13a>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	e001      	b.n	80034b6 <HAL_GPIO_Init+0x13e>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	3304      	adds	r3, #4
 80034b6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	2bff      	cmp	r3, #255	@ 0xff
 80034bc:	d802      	bhi.n	80034c4 <HAL_GPIO_Init+0x14c>
 80034be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	e002      	b.n	80034ca <HAL_GPIO_Init+0x152>
 80034c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c6:	3b08      	subs	r3, #8
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	210f      	movs	r1, #15
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	fa01 f303 	lsl.w	r3, r1, r3
 80034d8:	43db      	mvns	r3, r3
 80034da:	401a      	ands	r2, r3
 80034dc:	6a39      	ldr	r1, [r7, #32]
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	fa01 f303 	lsl.w	r3, r1, r3
 80034e4:	431a      	orrs	r2, r3
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	f000 80b1 	beq.w	800365a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80034f8:	4b4d      	ldr	r3, [pc, #308]	@ (8003630 <HAL_GPIO_Init+0x2b8>)
 80034fa:	699b      	ldr	r3, [r3, #24]
 80034fc:	4a4c      	ldr	r2, [pc, #304]	@ (8003630 <HAL_GPIO_Init+0x2b8>)
 80034fe:	f043 0301 	orr.w	r3, r3, #1
 8003502:	6193      	str	r3, [r2, #24]
 8003504:	4b4a      	ldr	r3, [pc, #296]	@ (8003630 <HAL_GPIO_Init+0x2b8>)
 8003506:	699b      	ldr	r3, [r3, #24]
 8003508:	f003 0301 	and.w	r3, r3, #1
 800350c:	60bb      	str	r3, [r7, #8]
 800350e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003510:	4a48      	ldr	r2, [pc, #288]	@ (8003634 <HAL_GPIO_Init+0x2bc>)
 8003512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003514:	089b      	lsrs	r3, r3, #2
 8003516:	3302      	adds	r3, #2
 8003518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800351c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800351e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003520:	f003 0303 	and.w	r3, r3, #3
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	220f      	movs	r2, #15
 8003528:	fa02 f303 	lsl.w	r3, r2, r3
 800352c:	43db      	mvns	r3, r3
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	4013      	ands	r3, r2
 8003532:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a40      	ldr	r2, [pc, #256]	@ (8003638 <HAL_GPIO_Init+0x2c0>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d013      	beq.n	8003564 <HAL_GPIO_Init+0x1ec>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a3f      	ldr	r2, [pc, #252]	@ (800363c <HAL_GPIO_Init+0x2c4>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d00d      	beq.n	8003560 <HAL_GPIO_Init+0x1e8>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a3e      	ldr	r2, [pc, #248]	@ (8003640 <HAL_GPIO_Init+0x2c8>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d007      	beq.n	800355c <HAL_GPIO_Init+0x1e4>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4a3d      	ldr	r2, [pc, #244]	@ (8003644 <HAL_GPIO_Init+0x2cc>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d101      	bne.n	8003558 <HAL_GPIO_Init+0x1e0>
 8003554:	2303      	movs	r3, #3
 8003556:	e006      	b.n	8003566 <HAL_GPIO_Init+0x1ee>
 8003558:	2304      	movs	r3, #4
 800355a:	e004      	b.n	8003566 <HAL_GPIO_Init+0x1ee>
 800355c:	2302      	movs	r3, #2
 800355e:	e002      	b.n	8003566 <HAL_GPIO_Init+0x1ee>
 8003560:	2301      	movs	r3, #1
 8003562:	e000      	b.n	8003566 <HAL_GPIO_Init+0x1ee>
 8003564:	2300      	movs	r3, #0
 8003566:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003568:	f002 0203 	and.w	r2, r2, #3
 800356c:	0092      	lsls	r2, r2, #2
 800356e:	4093      	lsls	r3, r2
 8003570:	68fa      	ldr	r2, [r7, #12]
 8003572:	4313      	orrs	r3, r2
 8003574:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003576:	492f      	ldr	r1, [pc, #188]	@ (8003634 <HAL_GPIO_Init+0x2bc>)
 8003578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800357a:	089b      	lsrs	r3, r3, #2
 800357c:	3302      	adds	r3, #2
 800357e:	68fa      	ldr	r2, [r7, #12]
 8003580:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d006      	beq.n	800359e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003590:	4b2d      	ldr	r3, [pc, #180]	@ (8003648 <HAL_GPIO_Init+0x2d0>)
 8003592:	689a      	ldr	r2, [r3, #8]
 8003594:	492c      	ldr	r1, [pc, #176]	@ (8003648 <HAL_GPIO_Init+0x2d0>)
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	4313      	orrs	r3, r2
 800359a:	608b      	str	r3, [r1, #8]
 800359c:	e006      	b.n	80035ac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800359e:	4b2a      	ldr	r3, [pc, #168]	@ (8003648 <HAL_GPIO_Init+0x2d0>)
 80035a0:	689a      	ldr	r2, [r3, #8]
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	43db      	mvns	r3, r3
 80035a6:	4928      	ldr	r1, [pc, #160]	@ (8003648 <HAL_GPIO_Init+0x2d0>)
 80035a8:	4013      	ands	r3, r2
 80035aa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d006      	beq.n	80035c6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80035b8:	4b23      	ldr	r3, [pc, #140]	@ (8003648 <HAL_GPIO_Init+0x2d0>)
 80035ba:	68da      	ldr	r2, [r3, #12]
 80035bc:	4922      	ldr	r1, [pc, #136]	@ (8003648 <HAL_GPIO_Init+0x2d0>)
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	60cb      	str	r3, [r1, #12]
 80035c4:	e006      	b.n	80035d4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80035c6:	4b20      	ldr	r3, [pc, #128]	@ (8003648 <HAL_GPIO_Init+0x2d0>)
 80035c8:	68da      	ldr	r2, [r3, #12]
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	43db      	mvns	r3, r3
 80035ce:	491e      	ldr	r1, [pc, #120]	@ (8003648 <HAL_GPIO_Init+0x2d0>)
 80035d0:	4013      	ands	r3, r2
 80035d2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d006      	beq.n	80035ee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80035e0:	4b19      	ldr	r3, [pc, #100]	@ (8003648 <HAL_GPIO_Init+0x2d0>)
 80035e2:	685a      	ldr	r2, [r3, #4]
 80035e4:	4918      	ldr	r1, [pc, #96]	@ (8003648 <HAL_GPIO_Init+0x2d0>)
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	604b      	str	r3, [r1, #4]
 80035ec:	e006      	b.n	80035fc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80035ee:	4b16      	ldr	r3, [pc, #88]	@ (8003648 <HAL_GPIO_Init+0x2d0>)
 80035f0:	685a      	ldr	r2, [r3, #4]
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	43db      	mvns	r3, r3
 80035f6:	4914      	ldr	r1, [pc, #80]	@ (8003648 <HAL_GPIO_Init+0x2d0>)
 80035f8:	4013      	ands	r3, r2
 80035fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d021      	beq.n	800364c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003608:	4b0f      	ldr	r3, [pc, #60]	@ (8003648 <HAL_GPIO_Init+0x2d0>)
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	490e      	ldr	r1, [pc, #56]	@ (8003648 <HAL_GPIO_Init+0x2d0>)
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	4313      	orrs	r3, r2
 8003612:	600b      	str	r3, [r1, #0]
 8003614:	e021      	b.n	800365a <HAL_GPIO_Init+0x2e2>
 8003616:	bf00      	nop
 8003618:	10320000 	.word	0x10320000
 800361c:	10310000 	.word	0x10310000
 8003620:	10220000 	.word	0x10220000
 8003624:	10210000 	.word	0x10210000
 8003628:	10120000 	.word	0x10120000
 800362c:	10110000 	.word	0x10110000
 8003630:	40021000 	.word	0x40021000
 8003634:	40010000 	.word	0x40010000
 8003638:	40010800 	.word	0x40010800
 800363c:	40010c00 	.word	0x40010c00
 8003640:	40011000 	.word	0x40011000
 8003644:	40011400 	.word	0x40011400
 8003648:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800364c:	4b0b      	ldr	r3, [pc, #44]	@ (800367c <HAL_GPIO_Init+0x304>)
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	43db      	mvns	r3, r3
 8003654:	4909      	ldr	r1, [pc, #36]	@ (800367c <HAL_GPIO_Init+0x304>)
 8003656:	4013      	ands	r3, r2
 8003658:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800365a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800365c:	3301      	adds	r3, #1
 800365e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003666:	fa22 f303 	lsr.w	r3, r2, r3
 800366a:	2b00      	cmp	r3, #0
 800366c:	f47f ae8e 	bne.w	800338c <HAL_GPIO_Init+0x14>
  }
}
 8003670:	bf00      	nop
 8003672:	bf00      	nop
 8003674:	372c      	adds	r7, #44	@ 0x2c
 8003676:	46bd      	mov	sp, r7
 8003678:	bc80      	pop	{r7}
 800367a:	4770      	bx	lr
 800367c:	40010400 	.word	0x40010400

08003680 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	460b      	mov	r3, r1
 800368a:	807b      	strh	r3, [r7, #2]
 800368c:	4613      	mov	r3, r2
 800368e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003690:	787b      	ldrb	r3, [r7, #1]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d003      	beq.n	800369e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003696:	887a      	ldrh	r2, [r7, #2]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800369c:	e003      	b.n	80036a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800369e:	887b      	ldrh	r3, [r7, #2]
 80036a0:	041a      	lsls	r2, r3, #16
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	611a      	str	r2, [r3, #16]
}
 80036a6:	bf00      	nop
 80036a8:	370c      	adds	r7, #12
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bc80      	pop	{r7}
 80036ae:	4770      	bx	lr

080036b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d101      	bne.n	80036c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e12b      	b.n	800391a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d106      	bne.n	80036dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f7fd f92e 	bl	8000938 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2224      	movs	r2, #36	@ 0x24
 80036e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f022 0201 	bic.w	r2, r2, #1
 80036f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003702:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003712:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003714:	f001 f832 	bl	800477c <HAL_RCC_GetPCLK1Freq>
 8003718:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	4a81      	ldr	r2, [pc, #516]	@ (8003924 <HAL_I2C_Init+0x274>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d807      	bhi.n	8003734 <HAL_I2C_Init+0x84>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	4a80      	ldr	r2, [pc, #512]	@ (8003928 <HAL_I2C_Init+0x278>)
 8003728:	4293      	cmp	r3, r2
 800372a:	bf94      	ite	ls
 800372c:	2301      	movls	r3, #1
 800372e:	2300      	movhi	r3, #0
 8003730:	b2db      	uxtb	r3, r3
 8003732:	e006      	b.n	8003742 <HAL_I2C_Init+0x92>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	4a7d      	ldr	r2, [pc, #500]	@ (800392c <HAL_I2C_Init+0x27c>)
 8003738:	4293      	cmp	r3, r2
 800373a:	bf94      	ite	ls
 800373c:	2301      	movls	r3, #1
 800373e:	2300      	movhi	r3, #0
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2b00      	cmp	r3, #0
 8003744:	d001      	beq.n	800374a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e0e7      	b.n	800391a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	4a78      	ldr	r2, [pc, #480]	@ (8003930 <HAL_I2C_Init+0x280>)
 800374e:	fba2 2303 	umull	r2, r3, r2, r3
 8003752:	0c9b      	lsrs	r3, r3, #18
 8003754:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68ba      	ldr	r2, [r7, #8]
 8003766:	430a      	orrs	r2, r1
 8003768:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	6a1b      	ldr	r3, [r3, #32]
 8003770:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	4a6a      	ldr	r2, [pc, #424]	@ (8003924 <HAL_I2C_Init+0x274>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d802      	bhi.n	8003784 <HAL_I2C_Init+0xd4>
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	3301      	adds	r3, #1
 8003782:	e009      	b.n	8003798 <HAL_I2C_Init+0xe8>
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800378a:	fb02 f303 	mul.w	r3, r2, r3
 800378e:	4a69      	ldr	r2, [pc, #420]	@ (8003934 <HAL_I2C_Init+0x284>)
 8003790:	fba2 2303 	umull	r2, r3, r2, r3
 8003794:	099b      	lsrs	r3, r3, #6
 8003796:	3301      	adds	r3, #1
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	6812      	ldr	r2, [r2, #0]
 800379c:	430b      	orrs	r3, r1
 800379e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	69db      	ldr	r3, [r3, #28]
 80037a6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80037aa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	495c      	ldr	r1, [pc, #368]	@ (8003924 <HAL_I2C_Init+0x274>)
 80037b4:	428b      	cmp	r3, r1
 80037b6:	d819      	bhi.n	80037ec <HAL_I2C_Init+0x13c>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	1e59      	subs	r1, r3, #1
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	005b      	lsls	r3, r3, #1
 80037c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80037c6:	1c59      	adds	r1, r3, #1
 80037c8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80037cc:	400b      	ands	r3, r1
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00a      	beq.n	80037e8 <HAL_I2C_Init+0x138>
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	1e59      	subs	r1, r3, #1
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	005b      	lsls	r3, r3, #1
 80037dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80037e0:	3301      	adds	r3, #1
 80037e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037e6:	e051      	b.n	800388c <HAL_I2C_Init+0x1dc>
 80037e8:	2304      	movs	r3, #4
 80037ea:	e04f      	b.n	800388c <HAL_I2C_Init+0x1dc>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d111      	bne.n	8003818 <HAL_I2C_Init+0x168>
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	1e58      	subs	r0, r3, #1
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6859      	ldr	r1, [r3, #4]
 80037fc:	460b      	mov	r3, r1
 80037fe:	005b      	lsls	r3, r3, #1
 8003800:	440b      	add	r3, r1
 8003802:	fbb0 f3f3 	udiv	r3, r0, r3
 8003806:	3301      	adds	r3, #1
 8003808:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800380c:	2b00      	cmp	r3, #0
 800380e:	bf0c      	ite	eq
 8003810:	2301      	moveq	r3, #1
 8003812:	2300      	movne	r3, #0
 8003814:	b2db      	uxtb	r3, r3
 8003816:	e012      	b.n	800383e <HAL_I2C_Init+0x18e>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	1e58      	subs	r0, r3, #1
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6859      	ldr	r1, [r3, #4]
 8003820:	460b      	mov	r3, r1
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	440b      	add	r3, r1
 8003826:	0099      	lsls	r1, r3, #2
 8003828:	440b      	add	r3, r1
 800382a:	fbb0 f3f3 	udiv	r3, r0, r3
 800382e:	3301      	adds	r3, #1
 8003830:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003834:	2b00      	cmp	r3, #0
 8003836:	bf0c      	ite	eq
 8003838:	2301      	moveq	r3, #1
 800383a:	2300      	movne	r3, #0
 800383c:	b2db      	uxtb	r3, r3
 800383e:	2b00      	cmp	r3, #0
 8003840:	d001      	beq.n	8003846 <HAL_I2C_Init+0x196>
 8003842:	2301      	movs	r3, #1
 8003844:	e022      	b.n	800388c <HAL_I2C_Init+0x1dc>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d10e      	bne.n	800386c <HAL_I2C_Init+0x1bc>
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	1e58      	subs	r0, r3, #1
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6859      	ldr	r1, [r3, #4]
 8003856:	460b      	mov	r3, r1
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	440b      	add	r3, r1
 800385c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003860:	3301      	adds	r3, #1
 8003862:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003866:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800386a:	e00f      	b.n	800388c <HAL_I2C_Init+0x1dc>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	1e58      	subs	r0, r3, #1
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6859      	ldr	r1, [r3, #4]
 8003874:	460b      	mov	r3, r1
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	440b      	add	r3, r1
 800387a:	0099      	lsls	r1, r3, #2
 800387c:	440b      	add	r3, r1
 800387e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003882:	3301      	adds	r3, #1
 8003884:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003888:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800388c:	6879      	ldr	r1, [r7, #4]
 800388e:	6809      	ldr	r1, [r1, #0]
 8003890:	4313      	orrs	r3, r2
 8003892:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	69da      	ldr	r2, [r3, #28]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a1b      	ldr	r3, [r3, #32]
 80038a6:	431a      	orrs	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	430a      	orrs	r2, r1
 80038ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80038ba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	6911      	ldr	r1, [r2, #16]
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	68d2      	ldr	r2, [r2, #12]
 80038c6:	4311      	orrs	r1, r2
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	6812      	ldr	r2, [r2, #0]
 80038cc:	430b      	orrs	r3, r1
 80038ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	695a      	ldr	r2, [r3, #20]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	431a      	orrs	r2, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	430a      	orrs	r2, r1
 80038ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f042 0201 	orr.w	r2, r2, #1
 80038fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2220      	movs	r2, #32
 8003906:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3710      	adds	r7, #16
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	000186a0 	.word	0x000186a0
 8003928:	001e847f 	.word	0x001e847f
 800392c:	003d08ff 	.word	0x003d08ff
 8003930:	431bde83 	.word	0x431bde83
 8003934:	10624dd3 	.word	0x10624dd3

08003938 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b088      	sub	sp, #32
 800393c:	af02      	add	r7, sp, #8
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	607a      	str	r2, [r7, #4]
 8003942:	461a      	mov	r2, r3
 8003944:	460b      	mov	r3, r1
 8003946:	817b      	strh	r3, [r7, #10]
 8003948:	4613      	mov	r3, r2
 800394a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800394c:	f7ff fc02 	bl	8003154 <HAL_GetTick>
 8003950:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b20      	cmp	r3, #32
 800395c:	f040 80e0 	bne.w	8003b20 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	9300      	str	r3, [sp, #0]
 8003964:	2319      	movs	r3, #25
 8003966:	2201      	movs	r2, #1
 8003968:	4970      	ldr	r1, [pc, #448]	@ (8003b2c <HAL_I2C_Master_Transmit+0x1f4>)
 800396a:	68f8      	ldr	r0, [r7, #12]
 800396c:	f000 f964 	bl	8003c38 <I2C_WaitOnFlagUntilTimeout>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d001      	beq.n	800397a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003976:	2302      	movs	r3, #2
 8003978:	e0d3      	b.n	8003b22 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003980:	2b01      	cmp	r3, #1
 8003982:	d101      	bne.n	8003988 <HAL_I2C_Master_Transmit+0x50>
 8003984:	2302      	movs	r3, #2
 8003986:	e0cc      	b.n	8003b22 <HAL_I2C_Master_Transmit+0x1ea>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0301 	and.w	r3, r3, #1
 800399a:	2b01      	cmp	r3, #1
 800399c:	d007      	beq.n	80039ae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f042 0201 	orr.w	r2, r2, #1
 80039ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80039bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2221      	movs	r2, #33	@ 0x21
 80039c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2210      	movs	r2, #16
 80039ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	893a      	ldrh	r2, [r7, #8]
 80039de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039e4:	b29a      	uxth	r2, r3
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	4a50      	ldr	r2, [pc, #320]	@ (8003b30 <HAL_I2C_Master_Transmit+0x1f8>)
 80039ee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80039f0:	8979      	ldrh	r1, [r7, #10]
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	6a3a      	ldr	r2, [r7, #32]
 80039f6:	68f8      	ldr	r0, [r7, #12]
 80039f8:	f000 f89c 	bl	8003b34 <I2C_MasterRequestWrite>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d001      	beq.n	8003a06 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e08d      	b.n	8003b22 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a06:	2300      	movs	r3, #0
 8003a08:	613b      	str	r3, [r7, #16]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	695b      	ldr	r3, [r3, #20]
 8003a10:	613b      	str	r3, [r7, #16]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	699b      	ldr	r3, [r3, #24]
 8003a18:	613b      	str	r3, [r7, #16]
 8003a1a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003a1c:	e066      	b.n	8003aec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a1e:	697a      	ldr	r2, [r7, #20]
 8003a20:	6a39      	ldr	r1, [r7, #32]
 8003a22:	68f8      	ldr	r0, [r7, #12]
 8003a24:	f000 fa22 	bl	8003e6c <I2C_WaitOnTXEFlagUntilTimeout>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00d      	beq.n	8003a4a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a32:	2b04      	cmp	r3, #4
 8003a34:	d107      	bne.n	8003a46 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a44:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e06b      	b.n	8003b22 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a4e:	781a      	ldrb	r2, [r3, #0]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a5a:	1c5a      	adds	r2, r3, #1
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	3b01      	subs	r3, #1
 8003a68:	b29a      	uxth	r2, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a72:	3b01      	subs	r3, #1
 8003a74:	b29a      	uxth	r2, r3
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	695b      	ldr	r3, [r3, #20]
 8003a80:	f003 0304 	and.w	r3, r3, #4
 8003a84:	2b04      	cmp	r3, #4
 8003a86:	d11b      	bne.n	8003ac0 <HAL_I2C_Master_Transmit+0x188>
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d017      	beq.n	8003ac0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a94:	781a      	ldrb	r2, [r3, #0]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa0:	1c5a      	adds	r2, r3, #1
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	3b01      	subs	r3, #1
 8003aae:	b29a      	uxth	r2, r3
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ab8:	3b01      	subs	r3, #1
 8003aba:	b29a      	uxth	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ac0:	697a      	ldr	r2, [r7, #20]
 8003ac2:	6a39      	ldr	r1, [r7, #32]
 8003ac4:	68f8      	ldr	r0, [r7, #12]
 8003ac6:	f000 fa19 	bl	8003efc <I2C_WaitOnBTFFlagUntilTimeout>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d00d      	beq.n	8003aec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad4:	2b04      	cmp	r3, #4
 8003ad6:	d107      	bne.n	8003ae8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ae6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e01a      	b.n	8003b22 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d194      	bne.n	8003a1e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2220      	movs	r2, #32
 8003b08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	e000      	b.n	8003b22 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003b20:	2302      	movs	r3, #2
  }
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3718      	adds	r7, #24
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	00100002 	.word	0x00100002
 8003b30:	ffff0000 	.word	0xffff0000

08003b34 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b088      	sub	sp, #32
 8003b38:	af02      	add	r7, sp, #8
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	607a      	str	r2, [r7, #4]
 8003b3e:	603b      	str	r3, [r7, #0]
 8003b40:	460b      	mov	r3, r1
 8003b42:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b48:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	2b08      	cmp	r3, #8
 8003b4e:	d006      	beq.n	8003b5e <I2C_MasterRequestWrite+0x2a>
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d003      	beq.n	8003b5e <I2C_MasterRequestWrite+0x2a>
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003b5c:	d108      	bne.n	8003b70 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b6c:	601a      	str	r2, [r3, #0]
 8003b6e:	e00b      	b.n	8003b88 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b74:	2b12      	cmp	r3, #18
 8003b76:	d107      	bne.n	8003b88 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b86:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	9300      	str	r3, [sp, #0]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003b94:	68f8      	ldr	r0, [r7, #12]
 8003b96:	f000 f84f 	bl	8003c38 <I2C_WaitOnFlagUntilTimeout>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d00d      	beq.n	8003bbc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003baa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bae:	d103      	bne.n	8003bb8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003bb6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e035      	b.n	8003c28 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	691b      	ldr	r3, [r3, #16]
 8003bc0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003bc4:	d108      	bne.n	8003bd8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003bc6:	897b      	ldrh	r3, [r7, #10]
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	461a      	mov	r2, r3
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003bd4:	611a      	str	r2, [r3, #16]
 8003bd6:	e01b      	b.n	8003c10 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003bd8:	897b      	ldrh	r3, [r7, #10]
 8003bda:	11db      	asrs	r3, r3, #7
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	f003 0306 	and.w	r3, r3, #6
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	f063 030f 	orn	r3, r3, #15
 8003be8:	b2da      	uxtb	r2, r3
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	490e      	ldr	r1, [pc, #56]	@ (8003c30 <I2C_MasterRequestWrite+0xfc>)
 8003bf6:	68f8      	ldr	r0, [r7, #12]
 8003bf8:	f000 f898 	bl	8003d2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d001      	beq.n	8003c06 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e010      	b.n	8003c28 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003c06:	897b      	ldrh	r3, [r7, #10]
 8003c08:	b2da      	uxtb	r2, r3
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	4907      	ldr	r1, [pc, #28]	@ (8003c34 <I2C_MasterRequestWrite+0x100>)
 8003c16:	68f8      	ldr	r0, [r7, #12]
 8003c18:	f000 f888 	bl	8003d2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d001      	beq.n	8003c26 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e000      	b.n	8003c28 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3718      	adds	r7, #24
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	00010008 	.word	0x00010008
 8003c34:	00010002 	.word	0x00010002

08003c38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	603b      	str	r3, [r7, #0]
 8003c44:	4613      	mov	r3, r2
 8003c46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c48:	e048      	b.n	8003cdc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c50:	d044      	beq.n	8003cdc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c52:	f7ff fa7f 	bl	8003154 <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	683a      	ldr	r2, [r7, #0]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d302      	bcc.n	8003c68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d139      	bne.n	8003cdc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	0c1b      	lsrs	r3, r3, #16
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d10d      	bne.n	8003c8e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	695b      	ldr	r3, [r3, #20]
 8003c78:	43da      	mvns	r2, r3
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	bf0c      	ite	eq
 8003c84:	2301      	moveq	r3, #1
 8003c86:	2300      	movne	r3, #0
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	e00c      	b.n	8003ca8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	699b      	ldr	r3, [r3, #24]
 8003c94:	43da      	mvns	r2, r3
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	4013      	ands	r3, r2
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	bf0c      	ite	eq
 8003ca0:	2301      	moveq	r3, #1
 8003ca2:	2300      	movne	r3, #0
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	79fb      	ldrb	r3, [r7, #7]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d116      	bne.n	8003cdc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc8:	f043 0220 	orr.w	r2, r3, #32
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e023      	b.n	8003d24 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	0c1b      	lsrs	r3, r3, #16
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d10d      	bne.n	8003d02 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	695b      	ldr	r3, [r3, #20]
 8003cec:	43da      	mvns	r2, r3
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	bf0c      	ite	eq
 8003cf8:	2301      	moveq	r3, #1
 8003cfa:	2300      	movne	r3, #0
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	461a      	mov	r2, r3
 8003d00:	e00c      	b.n	8003d1c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	699b      	ldr	r3, [r3, #24]
 8003d08:	43da      	mvns	r2, r3
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	bf0c      	ite	eq
 8003d14:	2301      	moveq	r3, #1
 8003d16:	2300      	movne	r3, #0
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	79fb      	ldrb	r3, [r7, #7]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d093      	beq.n	8003c4a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d22:	2300      	movs	r3, #0
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3710      	adds	r7, #16
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	607a      	str	r2, [r7, #4]
 8003d38:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d3a:	e071      	b.n	8003e20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d4a:	d123      	bne.n	8003d94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d5a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003d64:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2220      	movs	r2, #32
 8003d70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d80:	f043 0204 	orr.w	r2, r3, #4
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e067      	b.n	8003e64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d9a:	d041      	beq.n	8003e20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d9c:	f7ff f9da 	bl	8003154 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d302      	bcc.n	8003db2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d136      	bne.n	8003e20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	0c1b      	lsrs	r3, r3, #16
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d10c      	bne.n	8003dd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	43da      	mvns	r2, r3
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	bf14      	ite	ne
 8003dce:	2301      	movne	r3, #1
 8003dd0:	2300      	moveq	r3, #0
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	e00b      	b.n	8003dee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	699b      	ldr	r3, [r3, #24]
 8003ddc:	43da      	mvns	r2, r3
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	4013      	ands	r3, r2
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	bf14      	ite	ne
 8003de8:	2301      	movne	r3, #1
 8003dea:	2300      	moveq	r3, #0
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d016      	beq.n	8003e20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2220      	movs	r2, #32
 8003dfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e0c:	f043 0220 	orr.w	r2, r3, #32
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e021      	b.n	8003e64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	0c1b      	lsrs	r3, r3, #16
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d10c      	bne.n	8003e44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	695b      	ldr	r3, [r3, #20]
 8003e30:	43da      	mvns	r2, r3
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	4013      	ands	r3, r2
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	bf14      	ite	ne
 8003e3c:	2301      	movne	r3, #1
 8003e3e:	2300      	moveq	r3, #0
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	e00b      	b.n	8003e5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	699b      	ldr	r3, [r3, #24]
 8003e4a:	43da      	mvns	r2, r3
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	4013      	ands	r3, r2
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	bf14      	ite	ne
 8003e56:	2301      	movne	r3, #1
 8003e58:	2300      	moveq	r3, #0
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	f47f af6d 	bne.w	8003d3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003e62:	2300      	movs	r3, #0
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3710      	adds	r7, #16
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e78:	e034      	b.n	8003ee4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e7a:	68f8      	ldr	r0, [r7, #12]
 8003e7c:	f000 f886 	bl	8003f8c <I2C_IsAcknowledgeFailed>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d001      	beq.n	8003e8a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e034      	b.n	8003ef4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e90:	d028      	beq.n	8003ee4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e92:	f7ff f95f 	bl	8003154 <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	68ba      	ldr	r2, [r7, #8]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d302      	bcc.n	8003ea8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d11d      	bne.n	8003ee4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eb2:	2b80      	cmp	r3, #128	@ 0x80
 8003eb4:	d016      	beq.n	8003ee4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2220      	movs	r2, #32
 8003ec0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed0:	f043 0220 	orr.w	r2, r3, #32
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e007      	b.n	8003ef4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	695b      	ldr	r3, [r3, #20]
 8003eea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eee:	2b80      	cmp	r3, #128	@ 0x80
 8003ef0:	d1c3      	bne.n	8003e7a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003ef2:	2300      	movs	r3, #0
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3710      	adds	r7, #16
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f08:	e034      	b.n	8003f74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f0a:	68f8      	ldr	r0, [r7, #12]
 8003f0c:	f000 f83e 	bl	8003f8c <I2C_IsAcknowledgeFailed>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d001      	beq.n	8003f1a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e034      	b.n	8003f84 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f20:	d028      	beq.n	8003f74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f22:	f7ff f917 	bl	8003154 <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	68ba      	ldr	r2, [r7, #8]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d302      	bcc.n	8003f38 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d11d      	bne.n	8003f74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	f003 0304 	and.w	r3, r3, #4
 8003f42:	2b04      	cmp	r3, #4
 8003f44:	d016      	beq.n	8003f74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2220      	movs	r2, #32
 8003f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f60:	f043 0220 	orr.w	r2, r3, #32
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e007      	b.n	8003f84 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	695b      	ldr	r3, [r3, #20]
 8003f7a:	f003 0304 	and.w	r3, r3, #4
 8003f7e:	2b04      	cmp	r3, #4
 8003f80:	d1c3      	bne.n	8003f0a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003f82:	2300      	movs	r3, #0
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3710      	adds	r7, #16
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	695b      	ldr	r3, [r3, #20]
 8003f9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fa2:	d11b      	bne.n	8003fdc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003fac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2220      	movs	r2, #32
 8003fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc8:	f043 0204 	orr.w	r2, r3, #4
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e000      	b.n	8003fde <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	370c      	adds	r7, #12
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bc80      	pop	{r7}
 8003fe6:	4770      	bx	lr

08003fe8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b086      	sub	sp, #24
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d101      	bne.n	8003ffa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e272      	b.n	80044e0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0301 	and.w	r3, r3, #1
 8004002:	2b00      	cmp	r3, #0
 8004004:	f000 8087 	beq.w	8004116 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004008:	4b92      	ldr	r3, [pc, #584]	@ (8004254 <HAL_RCC_OscConfig+0x26c>)
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f003 030c 	and.w	r3, r3, #12
 8004010:	2b04      	cmp	r3, #4
 8004012:	d00c      	beq.n	800402e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004014:	4b8f      	ldr	r3, [pc, #572]	@ (8004254 <HAL_RCC_OscConfig+0x26c>)
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f003 030c 	and.w	r3, r3, #12
 800401c:	2b08      	cmp	r3, #8
 800401e:	d112      	bne.n	8004046 <HAL_RCC_OscConfig+0x5e>
 8004020:	4b8c      	ldr	r3, [pc, #560]	@ (8004254 <HAL_RCC_OscConfig+0x26c>)
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004028:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800402c:	d10b      	bne.n	8004046 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800402e:	4b89      	ldr	r3, [pc, #548]	@ (8004254 <HAL_RCC_OscConfig+0x26c>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d06c      	beq.n	8004114 <HAL_RCC_OscConfig+0x12c>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d168      	bne.n	8004114 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e24c      	b.n	80044e0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800404e:	d106      	bne.n	800405e <HAL_RCC_OscConfig+0x76>
 8004050:	4b80      	ldr	r3, [pc, #512]	@ (8004254 <HAL_RCC_OscConfig+0x26c>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a7f      	ldr	r2, [pc, #508]	@ (8004254 <HAL_RCC_OscConfig+0x26c>)
 8004056:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800405a:	6013      	str	r3, [r2, #0]
 800405c:	e02e      	b.n	80040bc <HAL_RCC_OscConfig+0xd4>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d10c      	bne.n	8004080 <HAL_RCC_OscConfig+0x98>
 8004066:	4b7b      	ldr	r3, [pc, #492]	@ (8004254 <HAL_RCC_OscConfig+0x26c>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a7a      	ldr	r2, [pc, #488]	@ (8004254 <HAL_RCC_OscConfig+0x26c>)
 800406c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004070:	6013      	str	r3, [r2, #0]
 8004072:	4b78      	ldr	r3, [pc, #480]	@ (8004254 <HAL_RCC_OscConfig+0x26c>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a77      	ldr	r2, [pc, #476]	@ (8004254 <HAL_RCC_OscConfig+0x26c>)
 8004078:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800407c:	6013      	str	r3, [r2, #0]
 800407e:	e01d      	b.n	80040bc <HAL_RCC_OscConfig+0xd4>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004088:	d10c      	bne.n	80040a4 <HAL_RCC_OscConfig+0xbc>
 800408a:	4b72      	ldr	r3, [pc, #456]	@ (8004254 <HAL_RCC_OscConfig+0x26c>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a71      	ldr	r2, [pc, #452]	@ (8004254 <HAL_RCC_OscConfig+0x26c>)
 8004090:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004094:	6013      	str	r3, [r2, #0]
 8004096:	4b6f      	ldr	r3, [pc, #444]	@ (8004254 <HAL_RCC_OscConfig+0x26c>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a6e      	ldr	r2, [pc, #440]	@ (8004254 <HAL_RCC_OscConfig+0x26c>)
 800409c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040a0:	6013      	str	r3, [r2, #0]
 80040a2:	e00b      	b.n	80040bc <HAL_RCC_OscConfig+0xd4>
 80040a4:	4b6b      	ldr	r3, [pc, #428]	@ (8004254 <HAL_RCC_OscConfig+0x26c>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a6a      	ldr	r2, [pc, #424]	@ (8004254 <HAL_RCC_OscConfig+0x26c>)
 80040aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040ae:	6013      	str	r3, [r2, #0]
 80040b0:	4b68      	ldr	r3, [pc, #416]	@ (8004254 <HAL_RCC_OscConfig+0x26c>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a67      	ldr	r2, [pc, #412]	@ (8004254 <HAL_RCC_OscConfig+0x26c>)
 80040b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040ba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d013      	beq.n	80040ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040c4:	f7ff f846 	bl	8003154 <HAL_GetTick>
 80040c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ca:	e008      	b.n	80040de <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040cc:	f7ff f842 	bl	8003154 <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	2b64      	cmp	r3, #100	@ 0x64
 80040d8:	d901      	bls.n	80040de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e200      	b.n	80044e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040de:	4b5d      	ldr	r3, [pc, #372]	@ (8004254 <HAL_RCC_OscConfig+0x26c>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d0f0      	beq.n	80040cc <HAL_RCC_OscConfig+0xe4>
 80040ea:	e014      	b.n	8004116 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ec:	f7ff f832 	bl	8003154 <HAL_GetTick>
 80040f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040f2:	e008      	b.n	8004106 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040f4:	f7ff f82e 	bl	8003154 <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	2b64      	cmp	r3, #100	@ 0x64
 8004100:	d901      	bls.n	8004106 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e1ec      	b.n	80044e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004106:	4b53      	ldr	r3, [pc, #332]	@ (8004254 <HAL_RCC_OscConfig+0x26c>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d1f0      	bne.n	80040f4 <HAL_RCC_OscConfig+0x10c>
 8004112:	e000      	b.n	8004116 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004114:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0302 	and.w	r3, r3, #2
 800411e:	2b00      	cmp	r3, #0
 8004120:	d063      	beq.n	80041ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004122:	4b4c      	ldr	r3, [pc, #304]	@ (8004254 <HAL_RCC_OscConfig+0x26c>)
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f003 030c 	and.w	r3, r3, #12
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00b      	beq.n	8004146 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800412e:	4b49      	ldr	r3, [pc, #292]	@ (8004254 <HAL_RCC_OscConfig+0x26c>)
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	f003 030c 	and.w	r3, r3, #12
 8004136:	2b08      	cmp	r3, #8
 8004138:	d11c      	bne.n	8004174 <HAL_RCC_OscConfig+0x18c>
 800413a:	4b46      	ldr	r3, [pc, #280]	@ (8004254 <HAL_RCC_OscConfig+0x26c>)
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d116      	bne.n	8004174 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004146:	4b43      	ldr	r3, [pc, #268]	@ (8004254 <HAL_RCC_OscConfig+0x26c>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0302 	and.w	r3, r3, #2
 800414e:	2b00      	cmp	r3, #0
 8004150:	d005      	beq.n	800415e <HAL_RCC_OscConfig+0x176>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	2b01      	cmp	r3, #1
 8004158:	d001      	beq.n	800415e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e1c0      	b.n	80044e0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800415e:	4b3d      	ldr	r3, [pc, #244]	@ (8004254 <HAL_RCC_OscConfig+0x26c>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	00db      	lsls	r3, r3, #3
 800416c:	4939      	ldr	r1, [pc, #228]	@ (8004254 <HAL_RCC_OscConfig+0x26c>)
 800416e:	4313      	orrs	r3, r2
 8004170:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004172:	e03a      	b.n	80041ea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d020      	beq.n	80041be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800417c:	4b36      	ldr	r3, [pc, #216]	@ (8004258 <HAL_RCC_OscConfig+0x270>)
 800417e:	2201      	movs	r2, #1
 8004180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004182:	f7fe ffe7 	bl	8003154 <HAL_GetTick>
 8004186:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004188:	e008      	b.n	800419c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800418a:	f7fe ffe3 	bl	8003154 <HAL_GetTick>
 800418e:	4602      	mov	r2, r0
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	2b02      	cmp	r3, #2
 8004196:	d901      	bls.n	800419c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004198:	2303      	movs	r3, #3
 800419a:	e1a1      	b.n	80044e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800419c:	4b2d      	ldr	r3, [pc, #180]	@ (8004254 <HAL_RCC_OscConfig+0x26c>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0302 	and.w	r3, r3, #2
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d0f0      	beq.n	800418a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041a8:	4b2a      	ldr	r3, [pc, #168]	@ (8004254 <HAL_RCC_OscConfig+0x26c>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	695b      	ldr	r3, [r3, #20]
 80041b4:	00db      	lsls	r3, r3, #3
 80041b6:	4927      	ldr	r1, [pc, #156]	@ (8004254 <HAL_RCC_OscConfig+0x26c>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	600b      	str	r3, [r1, #0]
 80041bc:	e015      	b.n	80041ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041be:	4b26      	ldr	r3, [pc, #152]	@ (8004258 <HAL_RCC_OscConfig+0x270>)
 80041c0:	2200      	movs	r2, #0
 80041c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041c4:	f7fe ffc6 	bl	8003154 <HAL_GetTick>
 80041c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041ca:	e008      	b.n	80041de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041cc:	f7fe ffc2 	bl	8003154 <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d901      	bls.n	80041de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e180      	b.n	80044e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041de:	4b1d      	ldr	r3, [pc, #116]	@ (8004254 <HAL_RCC_OscConfig+0x26c>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0302 	and.w	r3, r3, #2
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d1f0      	bne.n	80041cc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0308 	and.w	r3, r3, #8
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d03a      	beq.n	800426c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d019      	beq.n	8004232 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041fe:	4b17      	ldr	r3, [pc, #92]	@ (800425c <HAL_RCC_OscConfig+0x274>)
 8004200:	2201      	movs	r2, #1
 8004202:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004204:	f7fe ffa6 	bl	8003154 <HAL_GetTick>
 8004208:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800420a:	e008      	b.n	800421e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800420c:	f7fe ffa2 	bl	8003154 <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	2b02      	cmp	r3, #2
 8004218:	d901      	bls.n	800421e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e160      	b.n	80044e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800421e:	4b0d      	ldr	r3, [pc, #52]	@ (8004254 <HAL_RCC_OscConfig+0x26c>)
 8004220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004222:	f003 0302 	and.w	r3, r3, #2
 8004226:	2b00      	cmp	r3, #0
 8004228:	d0f0      	beq.n	800420c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800422a:	2001      	movs	r0, #1
 800422c:	f000 faba 	bl	80047a4 <RCC_Delay>
 8004230:	e01c      	b.n	800426c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004232:	4b0a      	ldr	r3, [pc, #40]	@ (800425c <HAL_RCC_OscConfig+0x274>)
 8004234:	2200      	movs	r2, #0
 8004236:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004238:	f7fe ff8c 	bl	8003154 <HAL_GetTick>
 800423c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800423e:	e00f      	b.n	8004260 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004240:	f7fe ff88 	bl	8003154 <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	2b02      	cmp	r3, #2
 800424c:	d908      	bls.n	8004260 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e146      	b.n	80044e0 <HAL_RCC_OscConfig+0x4f8>
 8004252:	bf00      	nop
 8004254:	40021000 	.word	0x40021000
 8004258:	42420000 	.word	0x42420000
 800425c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004260:	4b92      	ldr	r3, [pc, #584]	@ (80044ac <HAL_RCC_OscConfig+0x4c4>)
 8004262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004264:	f003 0302 	and.w	r3, r3, #2
 8004268:	2b00      	cmp	r3, #0
 800426a:	d1e9      	bne.n	8004240 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0304 	and.w	r3, r3, #4
 8004274:	2b00      	cmp	r3, #0
 8004276:	f000 80a6 	beq.w	80043c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800427a:	2300      	movs	r3, #0
 800427c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800427e:	4b8b      	ldr	r3, [pc, #556]	@ (80044ac <HAL_RCC_OscConfig+0x4c4>)
 8004280:	69db      	ldr	r3, [r3, #28]
 8004282:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d10d      	bne.n	80042a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800428a:	4b88      	ldr	r3, [pc, #544]	@ (80044ac <HAL_RCC_OscConfig+0x4c4>)
 800428c:	69db      	ldr	r3, [r3, #28]
 800428e:	4a87      	ldr	r2, [pc, #540]	@ (80044ac <HAL_RCC_OscConfig+0x4c4>)
 8004290:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004294:	61d3      	str	r3, [r2, #28]
 8004296:	4b85      	ldr	r3, [pc, #532]	@ (80044ac <HAL_RCC_OscConfig+0x4c4>)
 8004298:	69db      	ldr	r3, [r3, #28]
 800429a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800429e:	60bb      	str	r3, [r7, #8]
 80042a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042a2:	2301      	movs	r3, #1
 80042a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042a6:	4b82      	ldr	r3, [pc, #520]	@ (80044b0 <HAL_RCC_OscConfig+0x4c8>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d118      	bne.n	80042e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042b2:	4b7f      	ldr	r3, [pc, #508]	@ (80044b0 <HAL_RCC_OscConfig+0x4c8>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a7e      	ldr	r2, [pc, #504]	@ (80044b0 <HAL_RCC_OscConfig+0x4c8>)
 80042b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042be:	f7fe ff49 	bl	8003154 <HAL_GetTick>
 80042c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042c4:	e008      	b.n	80042d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042c6:	f7fe ff45 	bl	8003154 <HAL_GetTick>
 80042ca:	4602      	mov	r2, r0
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	2b64      	cmp	r3, #100	@ 0x64
 80042d2:	d901      	bls.n	80042d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	e103      	b.n	80044e0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042d8:	4b75      	ldr	r3, [pc, #468]	@ (80044b0 <HAL_RCC_OscConfig+0x4c8>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d0f0      	beq.n	80042c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d106      	bne.n	80042fa <HAL_RCC_OscConfig+0x312>
 80042ec:	4b6f      	ldr	r3, [pc, #444]	@ (80044ac <HAL_RCC_OscConfig+0x4c4>)
 80042ee:	6a1b      	ldr	r3, [r3, #32]
 80042f0:	4a6e      	ldr	r2, [pc, #440]	@ (80044ac <HAL_RCC_OscConfig+0x4c4>)
 80042f2:	f043 0301 	orr.w	r3, r3, #1
 80042f6:	6213      	str	r3, [r2, #32]
 80042f8:	e02d      	b.n	8004356 <HAL_RCC_OscConfig+0x36e>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d10c      	bne.n	800431c <HAL_RCC_OscConfig+0x334>
 8004302:	4b6a      	ldr	r3, [pc, #424]	@ (80044ac <HAL_RCC_OscConfig+0x4c4>)
 8004304:	6a1b      	ldr	r3, [r3, #32]
 8004306:	4a69      	ldr	r2, [pc, #420]	@ (80044ac <HAL_RCC_OscConfig+0x4c4>)
 8004308:	f023 0301 	bic.w	r3, r3, #1
 800430c:	6213      	str	r3, [r2, #32]
 800430e:	4b67      	ldr	r3, [pc, #412]	@ (80044ac <HAL_RCC_OscConfig+0x4c4>)
 8004310:	6a1b      	ldr	r3, [r3, #32]
 8004312:	4a66      	ldr	r2, [pc, #408]	@ (80044ac <HAL_RCC_OscConfig+0x4c4>)
 8004314:	f023 0304 	bic.w	r3, r3, #4
 8004318:	6213      	str	r3, [r2, #32]
 800431a:	e01c      	b.n	8004356 <HAL_RCC_OscConfig+0x36e>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	2b05      	cmp	r3, #5
 8004322:	d10c      	bne.n	800433e <HAL_RCC_OscConfig+0x356>
 8004324:	4b61      	ldr	r3, [pc, #388]	@ (80044ac <HAL_RCC_OscConfig+0x4c4>)
 8004326:	6a1b      	ldr	r3, [r3, #32]
 8004328:	4a60      	ldr	r2, [pc, #384]	@ (80044ac <HAL_RCC_OscConfig+0x4c4>)
 800432a:	f043 0304 	orr.w	r3, r3, #4
 800432e:	6213      	str	r3, [r2, #32]
 8004330:	4b5e      	ldr	r3, [pc, #376]	@ (80044ac <HAL_RCC_OscConfig+0x4c4>)
 8004332:	6a1b      	ldr	r3, [r3, #32]
 8004334:	4a5d      	ldr	r2, [pc, #372]	@ (80044ac <HAL_RCC_OscConfig+0x4c4>)
 8004336:	f043 0301 	orr.w	r3, r3, #1
 800433a:	6213      	str	r3, [r2, #32]
 800433c:	e00b      	b.n	8004356 <HAL_RCC_OscConfig+0x36e>
 800433e:	4b5b      	ldr	r3, [pc, #364]	@ (80044ac <HAL_RCC_OscConfig+0x4c4>)
 8004340:	6a1b      	ldr	r3, [r3, #32]
 8004342:	4a5a      	ldr	r2, [pc, #360]	@ (80044ac <HAL_RCC_OscConfig+0x4c4>)
 8004344:	f023 0301 	bic.w	r3, r3, #1
 8004348:	6213      	str	r3, [r2, #32]
 800434a:	4b58      	ldr	r3, [pc, #352]	@ (80044ac <HAL_RCC_OscConfig+0x4c4>)
 800434c:	6a1b      	ldr	r3, [r3, #32]
 800434e:	4a57      	ldr	r2, [pc, #348]	@ (80044ac <HAL_RCC_OscConfig+0x4c4>)
 8004350:	f023 0304 	bic.w	r3, r3, #4
 8004354:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d015      	beq.n	800438a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800435e:	f7fe fef9 	bl	8003154 <HAL_GetTick>
 8004362:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004364:	e00a      	b.n	800437c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004366:	f7fe fef5 	bl	8003154 <HAL_GetTick>
 800436a:	4602      	mov	r2, r0
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004374:	4293      	cmp	r3, r2
 8004376:	d901      	bls.n	800437c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e0b1      	b.n	80044e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800437c:	4b4b      	ldr	r3, [pc, #300]	@ (80044ac <HAL_RCC_OscConfig+0x4c4>)
 800437e:	6a1b      	ldr	r3, [r3, #32]
 8004380:	f003 0302 	and.w	r3, r3, #2
 8004384:	2b00      	cmp	r3, #0
 8004386:	d0ee      	beq.n	8004366 <HAL_RCC_OscConfig+0x37e>
 8004388:	e014      	b.n	80043b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800438a:	f7fe fee3 	bl	8003154 <HAL_GetTick>
 800438e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004390:	e00a      	b.n	80043a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004392:	f7fe fedf 	bl	8003154 <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d901      	bls.n	80043a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e09b      	b.n	80044e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043a8:	4b40      	ldr	r3, [pc, #256]	@ (80044ac <HAL_RCC_OscConfig+0x4c4>)
 80043aa:	6a1b      	ldr	r3, [r3, #32]
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d1ee      	bne.n	8004392 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80043b4:	7dfb      	ldrb	r3, [r7, #23]
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d105      	bne.n	80043c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043ba:	4b3c      	ldr	r3, [pc, #240]	@ (80044ac <HAL_RCC_OscConfig+0x4c4>)
 80043bc:	69db      	ldr	r3, [r3, #28]
 80043be:	4a3b      	ldr	r2, [pc, #236]	@ (80044ac <HAL_RCC_OscConfig+0x4c4>)
 80043c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	69db      	ldr	r3, [r3, #28]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	f000 8087 	beq.w	80044de <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043d0:	4b36      	ldr	r3, [pc, #216]	@ (80044ac <HAL_RCC_OscConfig+0x4c4>)
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f003 030c 	and.w	r3, r3, #12
 80043d8:	2b08      	cmp	r3, #8
 80043da:	d061      	beq.n	80044a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	69db      	ldr	r3, [r3, #28]
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d146      	bne.n	8004472 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043e4:	4b33      	ldr	r3, [pc, #204]	@ (80044b4 <HAL_RCC_OscConfig+0x4cc>)
 80043e6:	2200      	movs	r2, #0
 80043e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ea:	f7fe feb3 	bl	8003154 <HAL_GetTick>
 80043ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043f0:	e008      	b.n	8004404 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043f2:	f7fe feaf 	bl	8003154 <HAL_GetTick>
 80043f6:	4602      	mov	r2, r0
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d901      	bls.n	8004404 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	e06d      	b.n	80044e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004404:	4b29      	ldr	r3, [pc, #164]	@ (80044ac <HAL_RCC_OscConfig+0x4c4>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d1f0      	bne.n	80043f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6a1b      	ldr	r3, [r3, #32]
 8004414:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004418:	d108      	bne.n	800442c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800441a:	4b24      	ldr	r3, [pc, #144]	@ (80044ac <HAL_RCC_OscConfig+0x4c4>)
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	4921      	ldr	r1, [pc, #132]	@ (80044ac <HAL_RCC_OscConfig+0x4c4>)
 8004428:	4313      	orrs	r3, r2
 800442a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800442c:	4b1f      	ldr	r3, [pc, #124]	@ (80044ac <HAL_RCC_OscConfig+0x4c4>)
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a19      	ldr	r1, [r3, #32]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800443c:	430b      	orrs	r3, r1
 800443e:	491b      	ldr	r1, [pc, #108]	@ (80044ac <HAL_RCC_OscConfig+0x4c4>)
 8004440:	4313      	orrs	r3, r2
 8004442:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004444:	4b1b      	ldr	r3, [pc, #108]	@ (80044b4 <HAL_RCC_OscConfig+0x4cc>)
 8004446:	2201      	movs	r2, #1
 8004448:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800444a:	f7fe fe83 	bl	8003154 <HAL_GetTick>
 800444e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004450:	e008      	b.n	8004464 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004452:	f7fe fe7f 	bl	8003154 <HAL_GetTick>
 8004456:	4602      	mov	r2, r0
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	2b02      	cmp	r3, #2
 800445e:	d901      	bls.n	8004464 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e03d      	b.n	80044e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004464:	4b11      	ldr	r3, [pc, #68]	@ (80044ac <HAL_RCC_OscConfig+0x4c4>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d0f0      	beq.n	8004452 <HAL_RCC_OscConfig+0x46a>
 8004470:	e035      	b.n	80044de <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004472:	4b10      	ldr	r3, [pc, #64]	@ (80044b4 <HAL_RCC_OscConfig+0x4cc>)
 8004474:	2200      	movs	r2, #0
 8004476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004478:	f7fe fe6c 	bl	8003154 <HAL_GetTick>
 800447c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800447e:	e008      	b.n	8004492 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004480:	f7fe fe68 	bl	8003154 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	2b02      	cmp	r3, #2
 800448c:	d901      	bls.n	8004492 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e026      	b.n	80044e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004492:	4b06      	ldr	r3, [pc, #24]	@ (80044ac <HAL_RCC_OscConfig+0x4c4>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1f0      	bne.n	8004480 <HAL_RCC_OscConfig+0x498>
 800449e:	e01e      	b.n	80044de <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	69db      	ldr	r3, [r3, #28]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d107      	bne.n	80044b8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e019      	b.n	80044e0 <HAL_RCC_OscConfig+0x4f8>
 80044ac:	40021000 	.word	0x40021000
 80044b0:	40007000 	.word	0x40007000
 80044b4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80044b8:	4b0b      	ldr	r3, [pc, #44]	@ (80044e8 <HAL_RCC_OscConfig+0x500>)
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a1b      	ldr	r3, [r3, #32]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d106      	bne.n	80044da <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d001      	beq.n	80044de <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e000      	b.n	80044e0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80044de:	2300      	movs	r3, #0
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3718      	adds	r7, #24
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	40021000 	.word	0x40021000

080044ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d101      	bne.n	8004500 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e0d0      	b.n	80046a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004500:	4b6a      	ldr	r3, [pc, #424]	@ (80046ac <HAL_RCC_ClockConfig+0x1c0>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0307 	and.w	r3, r3, #7
 8004508:	683a      	ldr	r2, [r7, #0]
 800450a:	429a      	cmp	r2, r3
 800450c:	d910      	bls.n	8004530 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800450e:	4b67      	ldr	r3, [pc, #412]	@ (80046ac <HAL_RCC_ClockConfig+0x1c0>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f023 0207 	bic.w	r2, r3, #7
 8004516:	4965      	ldr	r1, [pc, #404]	@ (80046ac <HAL_RCC_ClockConfig+0x1c0>)
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	4313      	orrs	r3, r2
 800451c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800451e:	4b63      	ldr	r3, [pc, #396]	@ (80046ac <HAL_RCC_ClockConfig+0x1c0>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0307 	and.w	r3, r3, #7
 8004526:	683a      	ldr	r2, [r7, #0]
 8004528:	429a      	cmp	r2, r3
 800452a:	d001      	beq.n	8004530 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e0b8      	b.n	80046a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0302 	and.w	r3, r3, #2
 8004538:	2b00      	cmp	r3, #0
 800453a:	d020      	beq.n	800457e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0304 	and.w	r3, r3, #4
 8004544:	2b00      	cmp	r3, #0
 8004546:	d005      	beq.n	8004554 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004548:	4b59      	ldr	r3, [pc, #356]	@ (80046b0 <HAL_RCC_ClockConfig+0x1c4>)
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	4a58      	ldr	r2, [pc, #352]	@ (80046b0 <HAL_RCC_ClockConfig+0x1c4>)
 800454e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004552:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0308 	and.w	r3, r3, #8
 800455c:	2b00      	cmp	r3, #0
 800455e:	d005      	beq.n	800456c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004560:	4b53      	ldr	r3, [pc, #332]	@ (80046b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	4a52      	ldr	r2, [pc, #328]	@ (80046b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004566:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800456a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800456c:	4b50      	ldr	r3, [pc, #320]	@ (80046b0 <HAL_RCC_ClockConfig+0x1c4>)
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	494d      	ldr	r1, [pc, #308]	@ (80046b0 <HAL_RCC_ClockConfig+0x1c4>)
 800457a:	4313      	orrs	r3, r2
 800457c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0301 	and.w	r3, r3, #1
 8004586:	2b00      	cmp	r3, #0
 8004588:	d040      	beq.n	800460c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	2b01      	cmp	r3, #1
 8004590:	d107      	bne.n	80045a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004592:	4b47      	ldr	r3, [pc, #284]	@ (80046b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d115      	bne.n	80045ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e07f      	b.n	80046a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d107      	bne.n	80045ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045aa:	4b41      	ldr	r3, [pc, #260]	@ (80046b0 <HAL_RCC_ClockConfig+0x1c4>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d109      	bne.n	80045ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e073      	b.n	80046a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045ba:	4b3d      	ldr	r3, [pc, #244]	@ (80046b0 <HAL_RCC_ClockConfig+0x1c4>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0302 	and.w	r3, r3, #2
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d101      	bne.n	80045ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e06b      	b.n	80046a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045ca:	4b39      	ldr	r3, [pc, #228]	@ (80046b0 <HAL_RCC_ClockConfig+0x1c4>)
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	f023 0203 	bic.w	r2, r3, #3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	4936      	ldr	r1, [pc, #216]	@ (80046b0 <HAL_RCC_ClockConfig+0x1c4>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045dc:	f7fe fdba 	bl	8003154 <HAL_GetTick>
 80045e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045e2:	e00a      	b.n	80045fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045e4:	f7fe fdb6 	bl	8003154 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d901      	bls.n	80045fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e053      	b.n	80046a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045fa:	4b2d      	ldr	r3, [pc, #180]	@ (80046b0 <HAL_RCC_ClockConfig+0x1c4>)
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f003 020c 	and.w	r2, r3, #12
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	429a      	cmp	r2, r3
 800460a:	d1eb      	bne.n	80045e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800460c:	4b27      	ldr	r3, [pc, #156]	@ (80046ac <HAL_RCC_ClockConfig+0x1c0>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0307 	and.w	r3, r3, #7
 8004614:	683a      	ldr	r2, [r7, #0]
 8004616:	429a      	cmp	r2, r3
 8004618:	d210      	bcs.n	800463c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800461a:	4b24      	ldr	r3, [pc, #144]	@ (80046ac <HAL_RCC_ClockConfig+0x1c0>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f023 0207 	bic.w	r2, r3, #7
 8004622:	4922      	ldr	r1, [pc, #136]	@ (80046ac <HAL_RCC_ClockConfig+0x1c0>)
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	4313      	orrs	r3, r2
 8004628:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800462a:	4b20      	ldr	r3, [pc, #128]	@ (80046ac <HAL_RCC_ClockConfig+0x1c0>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0307 	and.w	r3, r3, #7
 8004632:	683a      	ldr	r2, [r7, #0]
 8004634:	429a      	cmp	r2, r3
 8004636:	d001      	beq.n	800463c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e032      	b.n	80046a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0304 	and.w	r3, r3, #4
 8004644:	2b00      	cmp	r3, #0
 8004646:	d008      	beq.n	800465a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004648:	4b19      	ldr	r3, [pc, #100]	@ (80046b0 <HAL_RCC_ClockConfig+0x1c4>)
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	4916      	ldr	r1, [pc, #88]	@ (80046b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004656:	4313      	orrs	r3, r2
 8004658:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0308 	and.w	r3, r3, #8
 8004662:	2b00      	cmp	r3, #0
 8004664:	d009      	beq.n	800467a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004666:	4b12      	ldr	r3, [pc, #72]	@ (80046b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	00db      	lsls	r3, r3, #3
 8004674:	490e      	ldr	r1, [pc, #56]	@ (80046b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004676:	4313      	orrs	r3, r2
 8004678:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800467a:	f000 f821 	bl	80046c0 <HAL_RCC_GetSysClockFreq>
 800467e:	4602      	mov	r2, r0
 8004680:	4b0b      	ldr	r3, [pc, #44]	@ (80046b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	091b      	lsrs	r3, r3, #4
 8004686:	f003 030f 	and.w	r3, r3, #15
 800468a:	490a      	ldr	r1, [pc, #40]	@ (80046b4 <HAL_RCC_ClockConfig+0x1c8>)
 800468c:	5ccb      	ldrb	r3, [r1, r3]
 800468e:	fa22 f303 	lsr.w	r3, r2, r3
 8004692:	4a09      	ldr	r2, [pc, #36]	@ (80046b8 <HAL_RCC_ClockConfig+0x1cc>)
 8004694:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004696:	4b09      	ldr	r3, [pc, #36]	@ (80046bc <HAL_RCC_ClockConfig+0x1d0>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4618      	mov	r0, r3
 800469c:	f7fe fd18 	bl	80030d0 <HAL_InitTick>

  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3710      	adds	r7, #16
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	40022000 	.word	0x40022000
 80046b0:	40021000 	.word	0x40021000
 80046b4:	08007814 	.word	0x08007814
 80046b8:	2000000c 	.word	0x2000000c
 80046bc:	20000010 	.word	0x20000010

080046c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b087      	sub	sp, #28
 80046c4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80046c6:	2300      	movs	r3, #0
 80046c8:	60fb      	str	r3, [r7, #12]
 80046ca:	2300      	movs	r3, #0
 80046cc:	60bb      	str	r3, [r7, #8]
 80046ce:	2300      	movs	r3, #0
 80046d0:	617b      	str	r3, [r7, #20]
 80046d2:	2300      	movs	r3, #0
 80046d4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80046d6:	2300      	movs	r3, #0
 80046d8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80046da:	4b1e      	ldr	r3, [pc, #120]	@ (8004754 <HAL_RCC_GetSysClockFreq+0x94>)
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f003 030c 	and.w	r3, r3, #12
 80046e6:	2b04      	cmp	r3, #4
 80046e8:	d002      	beq.n	80046f0 <HAL_RCC_GetSysClockFreq+0x30>
 80046ea:	2b08      	cmp	r3, #8
 80046ec:	d003      	beq.n	80046f6 <HAL_RCC_GetSysClockFreq+0x36>
 80046ee:	e027      	b.n	8004740 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80046f0:	4b19      	ldr	r3, [pc, #100]	@ (8004758 <HAL_RCC_GetSysClockFreq+0x98>)
 80046f2:	613b      	str	r3, [r7, #16]
      break;
 80046f4:	e027      	b.n	8004746 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	0c9b      	lsrs	r3, r3, #18
 80046fa:	f003 030f 	and.w	r3, r3, #15
 80046fe:	4a17      	ldr	r2, [pc, #92]	@ (800475c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004700:	5cd3      	ldrb	r3, [r2, r3]
 8004702:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d010      	beq.n	8004730 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800470e:	4b11      	ldr	r3, [pc, #68]	@ (8004754 <HAL_RCC_GetSysClockFreq+0x94>)
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	0c5b      	lsrs	r3, r3, #17
 8004714:	f003 0301 	and.w	r3, r3, #1
 8004718:	4a11      	ldr	r2, [pc, #68]	@ (8004760 <HAL_RCC_GetSysClockFreq+0xa0>)
 800471a:	5cd3      	ldrb	r3, [r2, r3]
 800471c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a0d      	ldr	r2, [pc, #52]	@ (8004758 <HAL_RCC_GetSysClockFreq+0x98>)
 8004722:	fb03 f202 	mul.w	r2, r3, r2
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	fbb2 f3f3 	udiv	r3, r2, r3
 800472c:	617b      	str	r3, [r7, #20]
 800472e:	e004      	b.n	800473a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a0c      	ldr	r2, [pc, #48]	@ (8004764 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004734:	fb02 f303 	mul.w	r3, r2, r3
 8004738:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	613b      	str	r3, [r7, #16]
      break;
 800473e:	e002      	b.n	8004746 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004740:	4b05      	ldr	r3, [pc, #20]	@ (8004758 <HAL_RCC_GetSysClockFreq+0x98>)
 8004742:	613b      	str	r3, [r7, #16]
      break;
 8004744:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004746:	693b      	ldr	r3, [r7, #16]
}
 8004748:	4618      	mov	r0, r3
 800474a:	371c      	adds	r7, #28
 800474c:	46bd      	mov	sp, r7
 800474e:	bc80      	pop	{r7}
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	40021000 	.word	0x40021000
 8004758:	007a1200 	.word	0x007a1200
 800475c:	0800782c 	.word	0x0800782c
 8004760:	0800783c 	.word	0x0800783c
 8004764:	003d0900 	.word	0x003d0900

08004768 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004768:	b480      	push	{r7}
 800476a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800476c:	4b02      	ldr	r3, [pc, #8]	@ (8004778 <HAL_RCC_GetHCLKFreq+0x10>)
 800476e:	681b      	ldr	r3, [r3, #0]
}
 8004770:	4618      	mov	r0, r3
 8004772:	46bd      	mov	sp, r7
 8004774:	bc80      	pop	{r7}
 8004776:	4770      	bx	lr
 8004778:	2000000c 	.word	0x2000000c

0800477c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004780:	f7ff fff2 	bl	8004768 <HAL_RCC_GetHCLKFreq>
 8004784:	4602      	mov	r2, r0
 8004786:	4b05      	ldr	r3, [pc, #20]	@ (800479c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	0a1b      	lsrs	r3, r3, #8
 800478c:	f003 0307 	and.w	r3, r3, #7
 8004790:	4903      	ldr	r1, [pc, #12]	@ (80047a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004792:	5ccb      	ldrb	r3, [r1, r3]
 8004794:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004798:	4618      	mov	r0, r3
 800479a:	bd80      	pop	{r7, pc}
 800479c:	40021000 	.word	0x40021000
 80047a0:	08007824 	.word	0x08007824

080047a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b085      	sub	sp, #20
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80047ac:	4b0a      	ldr	r3, [pc, #40]	@ (80047d8 <RCC_Delay+0x34>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a0a      	ldr	r2, [pc, #40]	@ (80047dc <RCC_Delay+0x38>)
 80047b2:	fba2 2303 	umull	r2, r3, r2, r3
 80047b6:	0a5b      	lsrs	r3, r3, #9
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	fb02 f303 	mul.w	r3, r2, r3
 80047be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80047c0:	bf00      	nop
  }
  while (Delay --);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	1e5a      	subs	r2, r3, #1
 80047c6:	60fa      	str	r2, [r7, #12]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d1f9      	bne.n	80047c0 <RCC_Delay+0x1c>
}
 80047cc:	bf00      	nop
 80047ce:	bf00      	nop
 80047d0:	3714      	adds	r7, #20
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bc80      	pop	{r7}
 80047d6:	4770      	bx	lr
 80047d8:	2000000c 	.word	0x2000000c
 80047dc:	10624dd3 	.word	0x10624dd3

080047e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b082      	sub	sp, #8
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d101      	bne.n	80047f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e076      	b.n	80048e0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d108      	bne.n	800480c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004802:	d009      	beq.n	8004818 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	61da      	str	r2, [r3, #28]
 800480a:	e005      	b.n	8004818 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004824:	b2db      	uxtb	r3, r3
 8004826:	2b00      	cmp	r3, #0
 8004828:	d106      	bne.n	8004838 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f7fe f990 	bl	8002b58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2202      	movs	r2, #2
 800483c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800484e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004860:	431a      	orrs	r2, r3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800486a:	431a      	orrs	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	691b      	ldr	r3, [r3, #16]
 8004870:	f003 0302 	and.w	r3, r3, #2
 8004874:	431a      	orrs	r2, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	695b      	ldr	r3, [r3, #20]
 800487a:	f003 0301 	and.w	r3, r3, #1
 800487e:	431a      	orrs	r2, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	699b      	ldr	r3, [r3, #24]
 8004884:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004888:	431a      	orrs	r2, r3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	69db      	ldr	r3, [r3, #28]
 800488e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004892:	431a      	orrs	r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a1b      	ldr	r3, [r3, #32]
 8004898:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800489c:	ea42 0103 	orr.w	r1, r2, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048a4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	430a      	orrs	r2, r1
 80048ae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	0c1a      	lsrs	r2, r3, #16
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f002 0204 	and.w	r2, r2, #4
 80048be:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	69da      	ldr	r2, [r3, #28]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80048ce:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2201      	movs	r2, #1
 80048da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80048de:	2300      	movs	r3, #0
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3708      	adds	r7, #8
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d101      	bne.n	80048fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e041      	b.n	800497e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004900:	b2db      	uxtb	r3, r3
 8004902:	2b00      	cmp	r3, #0
 8004904:	d106      	bne.n	8004914 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f7fe fafe 	bl	8002f10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2202      	movs	r2, #2
 8004918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	3304      	adds	r3, #4
 8004924:	4619      	mov	r1, r3
 8004926:	4610      	mov	r0, r2
 8004928:	f000 fb54 	bl	8004fd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	3708      	adds	r7, #8
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}

08004986 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004986:	b580      	push	{r7, lr}
 8004988:	b082      	sub	sp, #8
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d101      	bne.n	8004998 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e041      	b.n	8004a1c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d106      	bne.n	80049b2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f000 f839 	bl	8004a24 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2202      	movs	r2, #2
 80049b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	3304      	adds	r3, #4
 80049c2:	4619      	mov	r1, r3
 80049c4:	4610      	mov	r0, r2
 80049c6:	f000 fb05 	bl	8004fd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2201      	movs	r2, #1
 80049ce:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2201      	movs	r2, #1
 80049d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2201      	movs	r2, #1
 80049de:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2201      	movs	r2, #1
 80049e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2201      	movs	r2, #1
 80049ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2201      	movs	r2, #1
 80049f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2201      	movs	r2, #1
 80049fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2201      	movs	r2, #1
 8004a06:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2201      	movs	r2, #1
 8004a16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a1a:	2300      	movs	r3, #0
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3708      	adds	r7, #8
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004a2c:	bf00      	nop
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bc80      	pop	{r7}
 8004a34:	4770      	bx	lr
	...

08004a38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d109      	bne.n	8004a5c <HAL_TIM_PWM_Start+0x24>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	bf14      	ite	ne
 8004a54:	2301      	movne	r3, #1
 8004a56:	2300      	moveq	r3, #0
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	e022      	b.n	8004aa2 <HAL_TIM_PWM_Start+0x6a>
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	2b04      	cmp	r3, #4
 8004a60:	d109      	bne.n	8004a76 <HAL_TIM_PWM_Start+0x3e>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	bf14      	ite	ne
 8004a6e:	2301      	movne	r3, #1
 8004a70:	2300      	moveq	r3, #0
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	e015      	b.n	8004aa2 <HAL_TIM_PWM_Start+0x6a>
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	2b08      	cmp	r3, #8
 8004a7a:	d109      	bne.n	8004a90 <HAL_TIM_PWM_Start+0x58>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	bf14      	ite	ne
 8004a88:	2301      	movne	r3, #1
 8004a8a:	2300      	moveq	r3, #0
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	e008      	b.n	8004aa2 <HAL_TIM_PWM_Start+0x6a>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	bf14      	ite	ne
 8004a9c:	2301      	movne	r3, #1
 8004a9e:	2300      	moveq	r3, #0
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d001      	beq.n	8004aaa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e05e      	b.n	8004b68 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d104      	bne.n	8004aba <HAL_TIM_PWM_Start+0x82>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2202      	movs	r2, #2
 8004ab4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ab8:	e013      	b.n	8004ae2 <HAL_TIM_PWM_Start+0xaa>
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	2b04      	cmp	r3, #4
 8004abe:	d104      	bne.n	8004aca <HAL_TIM_PWM_Start+0x92>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2202      	movs	r2, #2
 8004ac4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ac8:	e00b      	b.n	8004ae2 <HAL_TIM_PWM_Start+0xaa>
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	2b08      	cmp	r3, #8
 8004ace:	d104      	bne.n	8004ada <HAL_TIM_PWM_Start+0xa2>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2202      	movs	r2, #2
 8004ad4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ad8:	e003      	b.n	8004ae2 <HAL_TIM_PWM_Start+0xaa>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2202      	movs	r2, #2
 8004ade:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	6839      	ldr	r1, [r7, #0]
 8004aea:	4618      	mov	r0, r3
 8004aec:	f000 fcfe 	bl	80054ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a1e      	ldr	r2, [pc, #120]	@ (8004b70 <HAL_TIM_PWM_Start+0x138>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d107      	bne.n	8004b0a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004b08:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a18      	ldr	r2, [pc, #96]	@ (8004b70 <HAL_TIM_PWM_Start+0x138>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d00e      	beq.n	8004b32 <HAL_TIM_PWM_Start+0xfa>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b1c:	d009      	beq.n	8004b32 <HAL_TIM_PWM_Start+0xfa>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a14      	ldr	r2, [pc, #80]	@ (8004b74 <HAL_TIM_PWM_Start+0x13c>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d004      	beq.n	8004b32 <HAL_TIM_PWM_Start+0xfa>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a12      	ldr	r2, [pc, #72]	@ (8004b78 <HAL_TIM_PWM_Start+0x140>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d111      	bne.n	8004b56 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	f003 0307 	and.w	r3, r3, #7
 8004b3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2b06      	cmp	r3, #6
 8004b42:	d010      	beq.n	8004b66 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f042 0201 	orr.w	r2, r2, #1
 8004b52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b54:	e007      	b.n	8004b66 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f042 0201 	orr.w	r2, r2, #1
 8004b64:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3710      	adds	r7, #16
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	40012c00 	.word	0x40012c00
 8004b74:	40000400 	.word	0x40000400
 8004b78:	40000800 	.word	0x40000800

08004b7c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b086      	sub	sp, #24
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d101      	bne.n	8004b90 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e093      	b.n	8004cb8 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d106      	bne.n	8004baa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f7fe f9d1 	bl	8002f4c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2202      	movs	r2, #2
 8004bae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	6812      	ldr	r2, [r2, #0]
 8004bbc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004bc0:	f023 0307 	bic.w	r3, r3, #7
 8004bc4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	3304      	adds	r3, #4
 8004bce:	4619      	mov	r1, r3
 8004bd0:	4610      	mov	r0, r2
 8004bd2:	f000 f9ff 	bl	8004fd4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	699b      	ldr	r3, [r3, #24]
 8004be4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	6a1b      	ldr	r3, [r3, #32]
 8004bec:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	697a      	ldr	r2, [r7, #20]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bfe:	f023 0303 	bic.w	r3, r3, #3
 8004c02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	689a      	ldr	r2, [r3, #8]
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	699b      	ldr	r3, [r3, #24]
 8004c0c:	021b      	lsls	r3, r3, #8
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	693a      	ldr	r2, [r7, #16]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004c1c:	f023 030c 	bic.w	r3, r3, #12
 8004c20:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004c28:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	68da      	ldr	r2, [r3, #12]
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	69db      	ldr	r3, [r3, #28]
 8004c36:	021b      	lsls	r3, r3, #8
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	693a      	ldr	r2, [r7, #16]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	011a      	lsls	r2, r3, #4
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	6a1b      	ldr	r3, [r3, #32]
 8004c4a:	031b      	lsls	r3, r3, #12
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	693a      	ldr	r2, [r7, #16]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004c5a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	685a      	ldr	r2, [r3, #4]
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	695b      	ldr	r3, [r3, #20]
 8004c64:	011b      	lsls	r3, r3, #4
 8004c66:	4313      	orrs	r3, r2
 8004c68:	68fa      	ldr	r2, [r7, #12]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	697a      	ldr	r2, [r7, #20]
 8004c74:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	693a      	ldr	r2, [r7, #16]
 8004c7c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	68fa      	ldr	r2, [r7, #12]
 8004c84:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2201      	movs	r2, #1
 8004c92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004cb6:	2300      	movs	r3, #0
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3718      	adds	r7, #24
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b086      	sub	sp, #24
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d101      	bne.n	8004cde <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004cda:	2302      	movs	r3, #2
 8004cdc:	e0ae      	b.n	8004e3c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2b0c      	cmp	r3, #12
 8004cea:	f200 809f 	bhi.w	8004e2c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004cee:	a201      	add	r2, pc, #4	@ (adr r2, 8004cf4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf4:	08004d29 	.word	0x08004d29
 8004cf8:	08004e2d 	.word	0x08004e2d
 8004cfc:	08004e2d 	.word	0x08004e2d
 8004d00:	08004e2d 	.word	0x08004e2d
 8004d04:	08004d69 	.word	0x08004d69
 8004d08:	08004e2d 	.word	0x08004e2d
 8004d0c:	08004e2d 	.word	0x08004e2d
 8004d10:	08004e2d 	.word	0x08004e2d
 8004d14:	08004dab 	.word	0x08004dab
 8004d18:	08004e2d 	.word	0x08004e2d
 8004d1c:	08004e2d 	.word	0x08004e2d
 8004d20:	08004e2d 	.word	0x08004e2d
 8004d24:	08004deb 	.word	0x08004deb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68b9      	ldr	r1, [r7, #8]
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f000 f9be 	bl	80050b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	699a      	ldr	r2, [r3, #24]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f042 0208 	orr.w	r2, r2, #8
 8004d42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	699a      	ldr	r2, [r3, #24]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f022 0204 	bic.w	r2, r2, #4
 8004d52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	6999      	ldr	r1, [r3, #24]
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	691a      	ldr	r2, [r3, #16]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	430a      	orrs	r2, r1
 8004d64:	619a      	str	r2, [r3, #24]
      break;
 8004d66:	e064      	b.n	8004e32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68b9      	ldr	r1, [r7, #8]
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f000 fa04 	bl	800517c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	699a      	ldr	r2, [r3, #24]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	699a      	ldr	r2, [r3, #24]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	6999      	ldr	r1, [r3, #24]
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	691b      	ldr	r3, [r3, #16]
 8004d9e:	021a      	lsls	r2, r3, #8
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	430a      	orrs	r2, r1
 8004da6:	619a      	str	r2, [r3, #24]
      break;
 8004da8:	e043      	b.n	8004e32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	68b9      	ldr	r1, [r7, #8]
 8004db0:	4618      	mov	r0, r3
 8004db2:	f000 fa4d 	bl	8005250 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	69da      	ldr	r2, [r3, #28]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f042 0208 	orr.w	r2, r2, #8
 8004dc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	69da      	ldr	r2, [r3, #28]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f022 0204 	bic.w	r2, r2, #4
 8004dd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	69d9      	ldr	r1, [r3, #28]
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	691a      	ldr	r2, [r3, #16]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	430a      	orrs	r2, r1
 8004de6:	61da      	str	r2, [r3, #28]
      break;
 8004de8:	e023      	b.n	8004e32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	68b9      	ldr	r1, [r7, #8]
 8004df0:	4618      	mov	r0, r3
 8004df2:	f000 fa97 	bl	8005324 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	69da      	ldr	r2, [r3, #28]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	69da      	ldr	r2, [r3, #28]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	69d9      	ldr	r1, [r3, #28]
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	021a      	lsls	r2, r3, #8
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	430a      	orrs	r2, r1
 8004e28:	61da      	str	r2, [r3, #28]
      break;
 8004e2a:	e002      	b.n	8004e32 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	75fb      	strb	r3, [r7, #23]
      break;
 8004e30:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004e3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3718      	adds	r7, #24
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d101      	bne.n	8004e60 <HAL_TIM_ConfigClockSource+0x1c>
 8004e5c:	2302      	movs	r3, #2
 8004e5e:	e0b4      	b.n	8004fca <HAL_TIM_ConfigClockSource+0x186>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2202      	movs	r2, #2
 8004e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004e7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004e86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68ba      	ldr	r2, [r7, #8]
 8004e8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e98:	d03e      	beq.n	8004f18 <HAL_TIM_ConfigClockSource+0xd4>
 8004e9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e9e:	f200 8087 	bhi.w	8004fb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ea2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ea6:	f000 8086 	beq.w	8004fb6 <HAL_TIM_ConfigClockSource+0x172>
 8004eaa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004eae:	d87f      	bhi.n	8004fb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004eb0:	2b70      	cmp	r3, #112	@ 0x70
 8004eb2:	d01a      	beq.n	8004eea <HAL_TIM_ConfigClockSource+0xa6>
 8004eb4:	2b70      	cmp	r3, #112	@ 0x70
 8004eb6:	d87b      	bhi.n	8004fb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004eb8:	2b60      	cmp	r3, #96	@ 0x60
 8004eba:	d050      	beq.n	8004f5e <HAL_TIM_ConfigClockSource+0x11a>
 8004ebc:	2b60      	cmp	r3, #96	@ 0x60
 8004ebe:	d877      	bhi.n	8004fb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ec0:	2b50      	cmp	r3, #80	@ 0x50
 8004ec2:	d03c      	beq.n	8004f3e <HAL_TIM_ConfigClockSource+0xfa>
 8004ec4:	2b50      	cmp	r3, #80	@ 0x50
 8004ec6:	d873      	bhi.n	8004fb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ec8:	2b40      	cmp	r3, #64	@ 0x40
 8004eca:	d058      	beq.n	8004f7e <HAL_TIM_ConfigClockSource+0x13a>
 8004ecc:	2b40      	cmp	r3, #64	@ 0x40
 8004ece:	d86f      	bhi.n	8004fb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ed0:	2b30      	cmp	r3, #48	@ 0x30
 8004ed2:	d064      	beq.n	8004f9e <HAL_TIM_ConfigClockSource+0x15a>
 8004ed4:	2b30      	cmp	r3, #48	@ 0x30
 8004ed6:	d86b      	bhi.n	8004fb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ed8:	2b20      	cmp	r3, #32
 8004eda:	d060      	beq.n	8004f9e <HAL_TIM_ConfigClockSource+0x15a>
 8004edc:	2b20      	cmp	r3, #32
 8004ede:	d867      	bhi.n	8004fb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d05c      	beq.n	8004f9e <HAL_TIM_ConfigClockSource+0x15a>
 8004ee4:	2b10      	cmp	r3, #16
 8004ee6:	d05a      	beq.n	8004f9e <HAL_TIM_ConfigClockSource+0x15a>
 8004ee8:	e062      	b.n	8004fb0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004efa:	f000 fad8 	bl	80054ae <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004f0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68ba      	ldr	r2, [r7, #8]
 8004f14:	609a      	str	r2, [r3, #8]
      break;
 8004f16:	e04f      	b.n	8004fb8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f28:	f000 fac1 	bl	80054ae <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	689a      	ldr	r2, [r3, #8]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004f3a:	609a      	str	r2, [r3, #8]
      break;
 8004f3c:	e03c      	b.n	8004fb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	f000 fa38 	bl	80053c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2150      	movs	r1, #80	@ 0x50
 8004f56:	4618      	mov	r0, r3
 8004f58:	f000 fa8f 	bl	800547a <TIM_ITRx_SetConfig>
      break;
 8004f5c:	e02c      	b.n	8004fb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	f000 fa56 	bl	800541c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2160      	movs	r1, #96	@ 0x60
 8004f76:	4618      	mov	r0, r3
 8004f78:	f000 fa7f 	bl	800547a <TIM_ITRx_SetConfig>
      break;
 8004f7c:	e01c      	b.n	8004fb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	f000 fa18 	bl	80053c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2140      	movs	r1, #64	@ 0x40
 8004f96:	4618      	mov	r0, r3
 8004f98:	f000 fa6f 	bl	800547a <TIM_ITRx_SetConfig>
      break;
 8004f9c:	e00c      	b.n	8004fb8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4619      	mov	r1, r3
 8004fa8:	4610      	mov	r0, r2
 8004faa:	f000 fa66 	bl	800547a <TIM_ITRx_SetConfig>
      break;
 8004fae:	e003      	b.n	8004fb8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	73fb      	strb	r3, [r7, #15]
      break;
 8004fb4:	e000      	b.n	8004fb8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004fb6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3710      	adds	r7, #16
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
	...

08004fd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b085      	sub	sp, #20
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a2f      	ldr	r2, [pc, #188]	@ (80050a4 <TIM_Base_SetConfig+0xd0>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d00b      	beq.n	8005004 <TIM_Base_SetConfig+0x30>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ff2:	d007      	beq.n	8005004 <TIM_Base_SetConfig+0x30>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4a2c      	ldr	r2, [pc, #176]	@ (80050a8 <TIM_Base_SetConfig+0xd4>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d003      	beq.n	8005004 <TIM_Base_SetConfig+0x30>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a2b      	ldr	r2, [pc, #172]	@ (80050ac <TIM_Base_SetConfig+0xd8>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d108      	bne.n	8005016 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800500a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	68fa      	ldr	r2, [r7, #12]
 8005012:	4313      	orrs	r3, r2
 8005014:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a22      	ldr	r2, [pc, #136]	@ (80050a4 <TIM_Base_SetConfig+0xd0>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d00b      	beq.n	8005036 <TIM_Base_SetConfig+0x62>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005024:	d007      	beq.n	8005036 <TIM_Base_SetConfig+0x62>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a1f      	ldr	r2, [pc, #124]	@ (80050a8 <TIM_Base_SetConfig+0xd4>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d003      	beq.n	8005036 <TIM_Base_SetConfig+0x62>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a1e      	ldr	r2, [pc, #120]	@ (80050ac <TIM_Base_SetConfig+0xd8>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d108      	bne.n	8005048 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800503c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	4313      	orrs	r3, r2
 8005046:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	695b      	ldr	r3, [r3, #20]
 8005052:	4313      	orrs	r3, r2
 8005054:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	68fa      	ldr	r2, [r7, #12]
 800505a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	689a      	ldr	r2, [r3, #8]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4a0d      	ldr	r2, [pc, #52]	@ (80050a4 <TIM_Base_SetConfig+0xd0>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d103      	bne.n	800507c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	691a      	ldr	r2, [r3, #16]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	f003 0301 	and.w	r3, r3, #1
 800508a:	2b00      	cmp	r3, #0
 800508c:	d005      	beq.n	800509a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	f023 0201 	bic.w	r2, r3, #1
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	611a      	str	r2, [r3, #16]
  }
}
 800509a:	bf00      	nop
 800509c:	3714      	adds	r7, #20
 800509e:	46bd      	mov	sp, r7
 80050a0:	bc80      	pop	{r7}
 80050a2:	4770      	bx	lr
 80050a4:	40012c00 	.word	0x40012c00
 80050a8:	40000400 	.word	0x40000400
 80050ac:	40000800 	.word	0x40000800

080050b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b087      	sub	sp, #28
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a1b      	ldr	r3, [r3, #32]
 80050be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6a1b      	ldr	r3, [r3, #32]
 80050c4:	f023 0201 	bic.w	r2, r3, #1
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f023 0303 	bic.w	r3, r3, #3
 80050e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68fa      	ldr	r2, [r7, #12]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	f023 0302 	bic.w	r3, r3, #2
 80050f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	697a      	ldr	r2, [r7, #20]
 8005100:	4313      	orrs	r3, r2
 8005102:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a1c      	ldr	r2, [pc, #112]	@ (8005178 <TIM_OC1_SetConfig+0xc8>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d10c      	bne.n	8005126 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	f023 0308 	bic.w	r3, r3, #8
 8005112:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	697a      	ldr	r2, [r7, #20]
 800511a:	4313      	orrs	r3, r2
 800511c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	f023 0304 	bic.w	r3, r3, #4
 8005124:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a13      	ldr	r2, [pc, #76]	@ (8005178 <TIM_OC1_SetConfig+0xc8>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d111      	bne.n	8005152 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005134:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800513c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	695b      	ldr	r3, [r3, #20]
 8005142:	693a      	ldr	r2, [r7, #16]
 8005144:	4313      	orrs	r3, r2
 8005146:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	699b      	ldr	r3, [r3, #24]
 800514c:	693a      	ldr	r2, [r7, #16]
 800514e:	4313      	orrs	r3, r2
 8005150:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	693a      	ldr	r2, [r7, #16]
 8005156:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	68fa      	ldr	r2, [r7, #12]
 800515c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	685a      	ldr	r2, [r3, #4]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	697a      	ldr	r2, [r7, #20]
 800516a:	621a      	str	r2, [r3, #32]
}
 800516c:	bf00      	nop
 800516e:	371c      	adds	r7, #28
 8005170:	46bd      	mov	sp, r7
 8005172:	bc80      	pop	{r7}
 8005174:	4770      	bx	lr
 8005176:	bf00      	nop
 8005178:	40012c00 	.word	0x40012c00

0800517c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800517c:	b480      	push	{r7}
 800517e:	b087      	sub	sp, #28
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a1b      	ldr	r3, [r3, #32]
 800518a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a1b      	ldr	r3, [r3, #32]
 8005190:	f023 0210 	bic.w	r2, r3, #16
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	699b      	ldr	r3, [r3, #24]
 80051a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	021b      	lsls	r3, r3, #8
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	4313      	orrs	r3, r2
 80051be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	f023 0320 	bic.w	r3, r3, #32
 80051c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	011b      	lsls	r3, r3, #4
 80051ce:	697a      	ldr	r2, [r7, #20]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a1d      	ldr	r2, [pc, #116]	@ (800524c <TIM_OC2_SetConfig+0xd0>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d10d      	bne.n	80051f8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	011b      	lsls	r3, r3, #4
 80051ea:	697a      	ldr	r2, [r7, #20]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4a14      	ldr	r2, [pc, #80]	@ (800524c <TIM_OC2_SetConfig+0xd0>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d113      	bne.n	8005228 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005206:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800520e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	695b      	ldr	r3, [r3, #20]
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	693a      	ldr	r2, [r7, #16]
 8005218:	4313      	orrs	r3, r2
 800521a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	699b      	ldr	r3, [r3, #24]
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	693a      	ldr	r2, [r7, #16]
 8005224:	4313      	orrs	r3, r2
 8005226:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	693a      	ldr	r2, [r7, #16]
 800522c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	685a      	ldr	r2, [r3, #4]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	697a      	ldr	r2, [r7, #20]
 8005240:	621a      	str	r2, [r3, #32]
}
 8005242:	bf00      	nop
 8005244:	371c      	adds	r7, #28
 8005246:	46bd      	mov	sp, r7
 8005248:	bc80      	pop	{r7}
 800524a:	4770      	bx	lr
 800524c:	40012c00 	.word	0x40012c00

08005250 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005250:	b480      	push	{r7}
 8005252:	b087      	sub	sp, #28
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a1b      	ldr	r3, [r3, #32]
 800525e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6a1b      	ldr	r3, [r3, #32]
 8005264:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	69db      	ldr	r3, [r3, #28]
 8005276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800527e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f023 0303 	bic.w	r3, r3, #3
 8005286:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68fa      	ldr	r2, [r7, #12]
 800528e:	4313      	orrs	r3, r2
 8005290:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005298:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	021b      	lsls	r3, r3, #8
 80052a0:	697a      	ldr	r2, [r7, #20]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a1d      	ldr	r2, [pc, #116]	@ (8005320 <TIM_OC3_SetConfig+0xd0>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d10d      	bne.n	80052ca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80052b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	021b      	lsls	r3, r3, #8
 80052bc:	697a      	ldr	r2, [r7, #20]
 80052be:	4313      	orrs	r3, r2
 80052c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80052c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a14      	ldr	r2, [pc, #80]	@ (8005320 <TIM_OC3_SetConfig+0xd0>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d113      	bne.n	80052fa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80052d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80052e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	695b      	ldr	r3, [r3, #20]
 80052e6:	011b      	lsls	r3, r3, #4
 80052e8:	693a      	ldr	r2, [r7, #16]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	011b      	lsls	r3, r3, #4
 80052f4:	693a      	ldr	r2, [r7, #16]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	693a      	ldr	r2, [r7, #16]
 80052fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	68fa      	ldr	r2, [r7, #12]
 8005304:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	685a      	ldr	r2, [r3, #4]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	697a      	ldr	r2, [r7, #20]
 8005312:	621a      	str	r2, [r3, #32]
}
 8005314:	bf00      	nop
 8005316:	371c      	adds	r7, #28
 8005318:	46bd      	mov	sp, r7
 800531a:	bc80      	pop	{r7}
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	40012c00 	.word	0x40012c00

08005324 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005324:	b480      	push	{r7}
 8005326:	b087      	sub	sp, #28
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a1b      	ldr	r3, [r3, #32]
 8005332:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6a1b      	ldr	r3, [r3, #32]
 8005338:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	69db      	ldr	r3, [r3, #28]
 800534a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005352:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800535a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	021b      	lsls	r3, r3, #8
 8005362:	68fa      	ldr	r2, [r7, #12]
 8005364:	4313      	orrs	r3, r2
 8005366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800536e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	031b      	lsls	r3, r3, #12
 8005376:	693a      	ldr	r2, [r7, #16]
 8005378:	4313      	orrs	r3, r2
 800537a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4a0f      	ldr	r2, [pc, #60]	@ (80053bc <TIM_OC4_SetConfig+0x98>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d109      	bne.n	8005398 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800538a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	695b      	ldr	r3, [r3, #20]
 8005390:	019b      	lsls	r3, r3, #6
 8005392:	697a      	ldr	r2, [r7, #20]
 8005394:	4313      	orrs	r3, r2
 8005396:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	697a      	ldr	r2, [r7, #20]
 800539c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	685a      	ldr	r2, [r3, #4]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	693a      	ldr	r2, [r7, #16]
 80053b0:	621a      	str	r2, [r3, #32]
}
 80053b2:	bf00      	nop
 80053b4:	371c      	adds	r7, #28
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bc80      	pop	{r7}
 80053ba:	4770      	bx	lr
 80053bc:	40012c00 	.word	0x40012c00

080053c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b087      	sub	sp, #28
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6a1b      	ldr	r3, [r3, #32]
 80053d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6a1b      	ldr	r3, [r3, #32]
 80053d6:	f023 0201 	bic.w	r2, r3, #1
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	699b      	ldr	r3, [r3, #24]
 80053e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80053ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	011b      	lsls	r3, r3, #4
 80053f0:	693a      	ldr	r2, [r7, #16]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	f023 030a 	bic.w	r3, r3, #10
 80053fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80053fe:	697a      	ldr	r2, [r7, #20]
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	4313      	orrs	r3, r2
 8005404:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	693a      	ldr	r2, [r7, #16]
 800540a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	621a      	str	r2, [r3, #32]
}
 8005412:	bf00      	nop
 8005414:	371c      	adds	r7, #28
 8005416:	46bd      	mov	sp, r7
 8005418:	bc80      	pop	{r7}
 800541a:	4770      	bx	lr

0800541c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800541c:	b480      	push	{r7}
 800541e:	b087      	sub	sp, #28
 8005420:	af00      	add	r7, sp, #0
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6a1b      	ldr	r3, [r3, #32]
 800542c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6a1b      	ldr	r3, [r3, #32]
 8005432:	f023 0210 	bic.w	r2, r3, #16
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	699b      	ldr	r3, [r3, #24]
 800543e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005446:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	031b      	lsls	r3, r3, #12
 800544c:	693a      	ldr	r2, [r7, #16]
 800544e:	4313      	orrs	r3, r2
 8005450:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005458:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	011b      	lsls	r3, r3, #4
 800545e:	697a      	ldr	r2, [r7, #20]
 8005460:	4313      	orrs	r3, r2
 8005462:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	693a      	ldr	r2, [r7, #16]
 8005468:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	697a      	ldr	r2, [r7, #20]
 800546e:	621a      	str	r2, [r3, #32]
}
 8005470:	bf00      	nop
 8005472:	371c      	adds	r7, #28
 8005474:	46bd      	mov	sp, r7
 8005476:	bc80      	pop	{r7}
 8005478:	4770      	bx	lr

0800547a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800547a:	b480      	push	{r7}
 800547c:	b085      	sub	sp, #20
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
 8005482:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005490:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005492:	683a      	ldr	r2, [r7, #0]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	4313      	orrs	r3, r2
 8005498:	f043 0307 	orr.w	r3, r3, #7
 800549c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	68fa      	ldr	r2, [r7, #12]
 80054a2:	609a      	str	r2, [r3, #8]
}
 80054a4:	bf00      	nop
 80054a6:	3714      	adds	r7, #20
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bc80      	pop	{r7}
 80054ac:	4770      	bx	lr

080054ae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054ae:	b480      	push	{r7}
 80054b0:	b087      	sub	sp, #28
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	60f8      	str	r0, [r7, #12]
 80054b6:	60b9      	str	r1, [r7, #8]
 80054b8:	607a      	str	r2, [r7, #4]
 80054ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80054c8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	021a      	lsls	r2, r3, #8
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	431a      	orrs	r2, r3
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	697a      	ldr	r2, [r7, #20]
 80054d8:	4313      	orrs	r3, r2
 80054da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	697a      	ldr	r2, [r7, #20]
 80054e0:	609a      	str	r2, [r3, #8]
}
 80054e2:	bf00      	nop
 80054e4:	371c      	adds	r7, #28
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bc80      	pop	{r7}
 80054ea:	4770      	bx	lr

080054ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b087      	sub	sp, #28
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	f003 031f 	and.w	r3, r3, #31
 80054fe:	2201      	movs	r2, #1
 8005500:	fa02 f303 	lsl.w	r3, r2, r3
 8005504:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6a1a      	ldr	r2, [r3, #32]
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	43db      	mvns	r3, r3
 800550e:	401a      	ands	r2, r3
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6a1a      	ldr	r2, [r3, #32]
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	f003 031f 	and.w	r3, r3, #31
 800551e:	6879      	ldr	r1, [r7, #4]
 8005520:	fa01 f303 	lsl.w	r3, r1, r3
 8005524:	431a      	orrs	r2, r3
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	621a      	str	r2, [r3, #32]
}
 800552a:	bf00      	nop
 800552c:	371c      	adds	r7, #28
 800552e:	46bd      	mov	sp, r7
 8005530:	bc80      	pop	{r7}
 8005532:	4770      	bx	lr

08005534 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005534:	b480      	push	{r7}
 8005536:	b085      	sub	sp, #20
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005544:	2b01      	cmp	r3, #1
 8005546:	d101      	bne.n	800554c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005548:	2302      	movs	r3, #2
 800554a:	e046      	b.n	80055da <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2202      	movs	r2, #2
 8005558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005572:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	4313      	orrs	r3, r2
 800557c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68fa      	ldr	r2, [r7, #12]
 8005584:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a16      	ldr	r2, [pc, #88]	@ (80055e4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d00e      	beq.n	80055ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005598:	d009      	beq.n	80055ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a12      	ldr	r2, [pc, #72]	@ (80055e8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d004      	beq.n	80055ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a10      	ldr	r2, [pc, #64]	@ (80055ec <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d10c      	bne.n	80055c8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	68ba      	ldr	r2, [r7, #8]
 80055bc:	4313      	orrs	r3, r2
 80055be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68ba      	ldr	r2, [r7, #8]
 80055c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3714      	adds	r7, #20
 80055de:	46bd      	mov	sp, r7
 80055e0:	bc80      	pop	{r7}
 80055e2:	4770      	bx	lr
 80055e4:	40012c00 	.word	0x40012c00
 80055e8:	40000400 	.word	0x40000400
 80055ec:	40000800 	.word	0x40000800

080055f0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b085      	sub	sp, #20
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80055fa:	2300      	movs	r3, #0
 80055fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005604:	2b01      	cmp	r3, #1
 8005606:	d101      	bne.n	800560c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005608:	2302      	movs	r3, #2
 800560a:	e03d      	b.n	8005688 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	4313      	orrs	r3, r2
 8005620:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	4313      	orrs	r3, r2
 800562e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	4313      	orrs	r3, r2
 800563c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4313      	orrs	r3, r2
 800564a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	4313      	orrs	r3, r2
 8005658:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	695b      	ldr	r3, [r3, #20]
 8005664:	4313      	orrs	r3, r2
 8005666:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	69db      	ldr	r3, [r3, #28]
 8005672:	4313      	orrs	r3, r2
 8005674:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	68fa      	ldr	r2, [r7, #12]
 800567c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005686:	2300      	movs	r3, #0
}
 8005688:	4618      	mov	r0, r3
 800568a:	3714      	adds	r7, #20
 800568c:	46bd      	mov	sp, r7
 800568e:	bc80      	pop	{r7}
 8005690:	4770      	bx	lr
	...

08005694 <siprintf>:
 8005694:	b40e      	push	{r1, r2, r3}
 8005696:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800569a:	b510      	push	{r4, lr}
 800569c:	2400      	movs	r4, #0
 800569e:	b09d      	sub	sp, #116	@ 0x74
 80056a0:	ab1f      	add	r3, sp, #124	@ 0x7c
 80056a2:	9002      	str	r0, [sp, #8]
 80056a4:	9006      	str	r0, [sp, #24]
 80056a6:	9107      	str	r1, [sp, #28]
 80056a8:	9104      	str	r1, [sp, #16]
 80056aa:	4809      	ldr	r0, [pc, #36]	@ (80056d0 <siprintf+0x3c>)
 80056ac:	4909      	ldr	r1, [pc, #36]	@ (80056d4 <siprintf+0x40>)
 80056ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80056b2:	9105      	str	r1, [sp, #20]
 80056b4:	6800      	ldr	r0, [r0, #0]
 80056b6:	a902      	add	r1, sp, #8
 80056b8:	9301      	str	r3, [sp, #4]
 80056ba:	941b      	str	r4, [sp, #108]	@ 0x6c
 80056bc:	f000 f9b4 	bl	8005a28 <_svfiprintf_r>
 80056c0:	9b02      	ldr	r3, [sp, #8]
 80056c2:	701c      	strb	r4, [r3, #0]
 80056c4:	b01d      	add	sp, #116	@ 0x74
 80056c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056ca:	b003      	add	sp, #12
 80056cc:	4770      	bx	lr
 80056ce:	bf00      	nop
 80056d0:	20000018 	.word	0x20000018
 80056d4:	ffff0208 	.word	0xffff0208

080056d8 <memset>:
 80056d8:	4603      	mov	r3, r0
 80056da:	4402      	add	r2, r0
 80056dc:	4293      	cmp	r3, r2
 80056de:	d100      	bne.n	80056e2 <memset+0xa>
 80056e0:	4770      	bx	lr
 80056e2:	f803 1b01 	strb.w	r1, [r3], #1
 80056e6:	e7f9      	b.n	80056dc <memset+0x4>

080056e8 <strncpy>:
 80056e8:	4603      	mov	r3, r0
 80056ea:	b510      	push	{r4, lr}
 80056ec:	3901      	subs	r1, #1
 80056ee:	b132      	cbz	r2, 80056fe <strncpy+0x16>
 80056f0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80056f4:	3a01      	subs	r2, #1
 80056f6:	f803 4b01 	strb.w	r4, [r3], #1
 80056fa:	2c00      	cmp	r4, #0
 80056fc:	d1f7      	bne.n	80056ee <strncpy+0x6>
 80056fe:	2100      	movs	r1, #0
 8005700:	441a      	add	r2, r3
 8005702:	4293      	cmp	r3, r2
 8005704:	d100      	bne.n	8005708 <strncpy+0x20>
 8005706:	bd10      	pop	{r4, pc}
 8005708:	f803 1b01 	strb.w	r1, [r3], #1
 800570c:	e7f9      	b.n	8005702 <strncpy+0x1a>
	...

08005710 <__errno>:
 8005710:	4b01      	ldr	r3, [pc, #4]	@ (8005718 <__errno+0x8>)
 8005712:	6818      	ldr	r0, [r3, #0]
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop
 8005718:	20000018 	.word	0x20000018

0800571c <__libc_init_array>:
 800571c:	b570      	push	{r4, r5, r6, lr}
 800571e:	2600      	movs	r6, #0
 8005720:	4d0c      	ldr	r5, [pc, #48]	@ (8005754 <__libc_init_array+0x38>)
 8005722:	4c0d      	ldr	r4, [pc, #52]	@ (8005758 <__libc_init_array+0x3c>)
 8005724:	1b64      	subs	r4, r4, r5
 8005726:	10a4      	asrs	r4, r4, #2
 8005728:	42a6      	cmp	r6, r4
 800572a:	d109      	bne.n	8005740 <__libc_init_array+0x24>
 800572c:	f001 fed2 	bl	80074d4 <_init>
 8005730:	2600      	movs	r6, #0
 8005732:	4d0a      	ldr	r5, [pc, #40]	@ (800575c <__libc_init_array+0x40>)
 8005734:	4c0a      	ldr	r4, [pc, #40]	@ (8005760 <__libc_init_array+0x44>)
 8005736:	1b64      	subs	r4, r4, r5
 8005738:	10a4      	asrs	r4, r4, #2
 800573a:	42a6      	cmp	r6, r4
 800573c:	d105      	bne.n	800574a <__libc_init_array+0x2e>
 800573e:	bd70      	pop	{r4, r5, r6, pc}
 8005740:	f855 3b04 	ldr.w	r3, [r5], #4
 8005744:	4798      	blx	r3
 8005746:	3601      	adds	r6, #1
 8005748:	e7ee      	b.n	8005728 <__libc_init_array+0xc>
 800574a:	f855 3b04 	ldr.w	r3, [r5], #4
 800574e:	4798      	blx	r3
 8005750:	3601      	adds	r6, #1
 8005752:	e7f2      	b.n	800573a <__libc_init_array+0x1e>
 8005754:	08007c6c 	.word	0x08007c6c
 8005758:	08007c6c 	.word	0x08007c6c
 800575c:	08007c6c 	.word	0x08007c6c
 8005760:	08007c70 	.word	0x08007c70

08005764 <__retarget_lock_acquire_recursive>:
 8005764:	4770      	bx	lr

08005766 <__retarget_lock_release_recursive>:
 8005766:	4770      	bx	lr

08005768 <memcpy>:
 8005768:	440a      	add	r2, r1
 800576a:	4291      	cmp	r1, r2
 800576c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005770:	d100      	bne.n	8005774 <memcpy+0xc>
 8005772:	4770      	bx	lr
 8005774:	b510      	push	{r4, lr}
 8005776:	f811 4b01 	ldrb.w	r4, [r1], #1
 800577a:	4291      	cmp	r1, r2
 800577c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005780:	d1f9      	bne.n	8005776 <memcpy+0xe>
 8005782:	bd10      	pop	{r4, pc}

08005784 <_free_r>:
 8005784:	b538      	push	{r3, r4, r5, lr}
 8005786:	4605      	mov	r5, r0
 8005788:	2900      	cmp	r1, #0
 800578a:	d040      	beq.n	800580e <_free_r+0x8a>
 800578c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005790:	1f0c      	subs	r4, r1, #4
 8005792:	2b00      	cmp	r3, #0
 8005794:	bfb8      	it	lt
 8005796:	18e4      	addlt	r4, r4, r3
 8005798:	f000 f8de 	bl	8005958 <__malloc_lock>
 800579c:	4a1c      	ldr	r2, [pc, #112]	@ (8005810 <_free_r+0x8c>)
 800579e:	6813      	ldr	r3, [r2, #0]
 80057a0:	b933      	cbnz	r3, 80057b0 <_free_r+0x2c>
 80057a2:	6063      	str	r3, [r4, #4]
 80057a4:	6014      	str	r4, [r2, #0]
 80057a6:	4628      	mov	r0, r5
 80057a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80057ac:	f000 b8da 	b.w	8005964 <__malloc_unlock>
 80057b0:	42a3      	cmp	r3, r4
 80057b2:	d908      	bls.n	80057c6 <_free_r+0x42>
 80057b4:	6820      	ldr	r0, [r4, #0]
 80057b6:	1821      	adds	r1, r4, r0
 80057b8:	428b      	cmp	r3, r1
 80057ba:	bf01      	itttt	eq
 80057bc:	6819      	ldreq	r1, [r3, #0]
 80057be:	685b      	ldreq	r3, [r3, #4]
 80057c0:	1809      	addeq	r1, r1, r0
 80057c2:	6021      	streq	r1, [r4, #0]
 80057c4:	e7ed      	b.n	80057a2 <_free_r+0x1e>
 80057c6:	461a      	mov	r2, r3
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	b10b      	cbz	r3, 80057d0 <_free_r+0x4c>
 80057cc:	42a3      	cmp	r3, r4
 80057ce:	d9fa      	bls.n	80057c6 <_free_r+0x42>
 80057d0:	6811      	ldr	r1, [r2, #0]
 80057d2:	1850      	adds	r0, r2, r1
 80057d4:	42a0      	cmp	r0, r4
 80057d6:	d10b      	bne.n	80057f0 <_free_r+0x6c>
 80057d8:	6820      	ldr	r0, [r4, #0]
 80057da:	4401      	add	r1, r0
 80057dc:	1850      	adds	r0, r2, r1
 80057de:	4283      	cmp	r3, r0
 80057e0:	6011      	str	r1, [r2, #0]
 80057e2:	d1e0      	bne.n	80057a6 <_free_r+0x22>
 80057e4:	6818      	ldr	r0, [r3, #0]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	4408      	add	r0, r1
 80057ea:	6010      	str	r0, [r2, #0]
 80057ec:	6053      	str	r3, [r2, #4]
 80057ee:	e7da      	b.n	80057a6 <_free_r+0x22>
 80057f0:	d902      	bls.n	80057f8 <_free_r+0x74>
 80057f2:	230c      	movs	r3, #12
 80057f4:	602b      	str	r3, [r5, #0]
 80057f6:	e7d6      	b.n	80057a6 <_free_r+0x22>
 80057f8:	6820      	ldr	r0, [r4, #0]
 80057fa:	1821      	adds	r1, r4, r0
 80057fc:	428b      	cmp	r3, r1
 80057fe:	bf01      	itttt	eq
 8005800:	6819      	ldreq	r1, [r3, #0]
 8005802:	685b      	ldreq	r3, [r3, #4]
 8005804:	1809      	addeq	r1, r1, r0
 8005806:	6021      	streq	r1, [r4, #0]
 8005808:	6063      	str	r3, [r4, #4]
 800580a:	6054      	str	r4, [r2, #4]
 800580c:	e7cb      	b.n	80057a6 <_free_r+0x22>
 800580e:	bd38      	pop	{r3, r4, r5, pc}
 8005810:	20001d58 	.word	0x20001d58

08005814 <sbrk_aligned>:
 8005814:	b570      	push	{r4, r5, r6, lr}
 8005816:	4e0f      	ldr	r6, [pc, #60]	@ (8005854 <sbrk_aligned+0x40>)
 8005818:	460c      	mov	r4, r1
 800581a:	6831      	ldr	r1, [r6, #0]
 800581c:	4605      	mov	r5, r0
 800581e:	b911      	cbnz	r1, 8005826 <sbrk_aligned+0x12>
 8005820:	f000 fba8 	bl	8005f74 <_sbrk_r>
 8005824:	6030      	str	r0, [r6, #0]
 8005826:	4621      	mov	r1, r4
 8005828:	4628      	mov	r0, r5
 800582a:	f000 fba3 	bl	8005f74 <_sbrk_r>
 800582e:	1c43      	adds	r3, r0, #1
 8005830:	d103      	bne.n	800583a <sbrk_aligned+0x26>
 8005832:	f04f 34ff 	mov.w	r4, #4294967295
 8005836:	4620      	mov	r0, r4
 8005838:	bd70      	pop	{r4, r5, r6, pc}
 800583a:	1cc4      	adds	r4, r0, #3
 800583c:	f024 0403 	bic.w	r4, r4, #3
 8005840:	42a0      	cmp	r0, r4
 8005842:	d0f8      	beq.n	8005836 <sbrk_aligned+0x22>
 8005844:	1a21      	subs	r1, r4, r0
 8005846:	4628      	mov	r0, r5
 8005848:	f000 fb94 	bl	8005f74 <_sbrk_r>
 800584c:	3001      	adds	r0, #1
 800584e:	d1f2      	bne.n	8005836 <sbrk_aligned+0x22>
 8005850:	e7ef      	b.n	8005832 <sbrk_aligned+0x1e>
 8005852:	bf00      	nop
 8005854:	20001d54 	.word	0x20001d54

08005858 <_malloc_r>:
 8005858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800585c:	1ccd      	adds	r5, r1, #3
 800585e:	f025 0503 	bic.w	r5, r5, #3
 8005862:	3508      	adds	r5, #8
 8005864:	2d0c      	cmp	r5, #12
 8005866:	bf38      	it	cc
 8005868:	250c      	movcc	r5, #12
 800586a:	2d00      	cmp	r5, #0
 800586c:	4606      	mov	r6, r0
 800586e:	db01      	blt.n	8005874 <_malloc_r+0x1c>
 8005870:	42a9      	cmp	r1, r5
 8005872:	d904      	bls.n	800587e <_malloc_r+0x26>
 8005874:	230c      	movs	r3, #12
 8005876:	6033      	str	r3, [r6, #0]
 8005878:	2000      	movs	r0, #0
 800587a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800587e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005954 <_malloc_r+0xfc>
 8005882:	f000 f869 	bl	8005958 <__malloc_lock>
 8005886:	f8d8 3000 	ldr.w	r3, [r8]
 800588a:	461c      	mov	r4, r3
 800588c:	bb44      	cbnz	r4, 80058e0 <_malloc_r+0x88>
 800588e:	4629      	mov	r1, r5
 8005890:	4630      	mov	r0, r6
 8005892:	f7ff ffbf 	bl	8005814 <sbrk_aligned>
 8005896:	1c43      	adds	r3, r0, #1
 8005898:	4604      	mov	r4, r0
 800589a:	d158      	bne.n	800594e <_malloc_r+0xf6>
 800589c:	f8d8 4000 	ldr.w	r4, [r8]
 80058a0:	4627      	mov	r7, r4
 80058a2:	2f00      	cmp	r7, #0
 80058a4:	d143      	bne.n	800592e <_malloc_r+0xd6>
 80058a6:	2c00      	cmp	r4, #0
 80058a8:	d04b      	beq.n	8005942 <_malloc_r+0xea>
 80058aa:	6823      	ldr	r3, [r4, #0]
 80058ac:	4639      	mov	r1, r7
 80058ae:	4630      	mov	r0, r6
 80058b0:	eb04 0903 	add.w	r9, r4, r3
 80058b4:	f000 fb5e 	bl	8005f74 <_sbrk_r>
 80058b8:	4581      	cmp	r9, r0
 80058ba:	d142      	bne.n	8005942 <_malloc_r+0xea>
 80058bc:	6821      	ldr	r1, [r4, #0]
 80058be:	4630      	mov	r0, r6
 80058c0:	1a6d      	subs	r5, r5, r1
 80058c2:	4629      	mov	r1, r5
 80058c4:	f7ff ffa6 	bl	8005814 <sbrk_aligned>
 80058c8:	3001      	adds	r0, #1
 80058ca:	d03a      	beq.n	8005942 <_malloc_r+0xea>
 80058cc:	6823      	ldr	r3, [r4, #0]
 80058ce:	442b      	add	r3, r5
 80058d0:	6023      	str	r3, [r4, #0]
 80058d2:	f8d8 3000 	ldr.w	r3, [r8]
 80058d6:	685a      	ldr	r2, [r3, #4]
 80058d8:	bb62      	cbnz	r2, 8005934 <_malloc_r+0xdc>
 80058da:	f8c8 7000 	str.w	r7, [r8]
 80058de:	e00f      	b.n	8005900 <_malloc_r+0xa8>
 80058e0:	6822      	ldr	r2, [r4, #0]
 80058e2:	1b52      	subs	r2, r2, r5
 80058e4:	d420      	bmi.n	8005928 <_malloc_r+0xd0>
 80058e6:	2a0b      	cmp	r2, #11
 80058e8:	d917      	bls.n	800591a <_malloc_r+0xc2>
 80058ea:	1961      	adds	r1, r4, r5
 80058ec:	42a3      	cmp	r3, r4
 80058ee:	6025      	str	r5, [r4, #0]
 80058f0:	bf18      	it	ne
 80058f2:	6059      	strne	r1, [r3, #4]
 80058f4:	6863      	ldr	r3, [r4, #4]
 80058f6:	bf08      	it	eq
 80058f8:	f8c8 1000 	streq.w	r1, [r8]
 80058fc:	5162      	str	r2, [r4, r5]
 80058fe:	604b      	str	r3, [r1, #4]
 8005900:	4630      	mov	r0, r6
 8005902:	f000 f82f 	bl	8005964 <__malloc_unlock>
 8005906:	f104 000b 	add.w	r0, r4, #11
 800590a:	1d23      	adds	r3, r4, #4
 800590c:	f020 0007 	bic.w	r0, r0, #7
 8005910:	1ac2      	subs	r2, r0, r3
 8005912:	bf1c      	itt	ne
 8005914:	1a1b      	subne	r3, r3, r0
 8005916:	50a3      	strne	r3, [r4, r2]
 8005918:	e7af      	b.n	800587a <_malloc_r+0x22>
 800591a:	6862      	ldr	r2, [r4, #4]
 800591c:	42a3      	cmp	r3, r4
 800591e:	bf0c      	ite	eq
 8005920:	f8c8 2000 	streq.w	r2, [r8]
 8005924:	605a      	strne	r2, [r3, #4]
 8005926:	e7eb      	b.n	8005900 <_malloc_r+0xa8>
 8005928:	4623      	mov	r3, r4
 800592a:	6864      	ldr	r4, [r4, #4]
 800592c:	e7ae      	b.n	800588c <_malloc_r+0x34>
 800592e:	463c      	mov	r4, r7
 8005930:	687f      	ldr	r7, [r7, #4]
 8005932:	e7b6      	b.n	80058a2 <_malloc_r+0x4a>
 8005934:	461a      	mov	r2, r3
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	42a3      	cmp	r3, r4
 800593a:	d1fb      	bne.n	8005934 <_malloc_r+0xdc>
 800593c:	2300      	movs	r3, #0
 800593e:	6053      	str	r3, [r2, #4]
 8005940:	e7de      	b.n	8005900 <_malloc_r+0xa8>
 8005942:	230c      	movs	r3, #12
 8005944:	4630      	mov	r0, r6
 8005946:	6033      	str	r3, [r6, #0]
 8005948:	f000 f80c 	bl	8005964 <__malloc_unlock>
 800594c:	e794      	b.n	8005878 <_malloc_r+0x20>
 800594e:	6005      	str	r5, [r0, #0]
 8005950:	e7d6      	b.n	8005900 <_malloc_r+0xa8>
 8005952:	bf00      	nop
 8005954:	20001d58 	.word	0x20001d58

08005958 <__malloc_lock>:
 8005958:	4801      	ldr	r0, [pc, #4]	@ (8005960 <__malloc_lock+0x8>)
 800595a:	f7ff bf03 	b.w	8005764 <__retarget_lock_acquire_recursive>
 800595e:	bf00      	nop
 8005960:	20001d50 	.word	0x20001d50

08005964 <__malloc_unlock>:
 8005964:	4801      	ldr	r0, [pc, #4]	@ (800596c <__malloc_unlock+0x8>)
 8005966:	f7ff befe 	b.w	8005766 <__retarget_lock_release_recursive>
 800596a:	bf00      	nop
 800596c:	20001d50 	.word	0x20001d50

08005970 <__ssputs_r>:
 8005970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005974:	461f      	mov	r7, r3
 8005976:	688e      	ldr	r6, [r1, #8]
 8005978:	4682      	mov	sl, r0
 800597a:	42be      	cmp	r6, r7
 800597c:	460c      	mov	r4, r1
 800597e:	4690      	mov	r8, r2
 8005980:	680b      	ldr	r3, [r1, #0]
 8005982:	d82d      	bhi.n	80059e0 <__ssputs_r+0x70>
 8005984:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005988:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800598c:	d026      	beq.n	80059dc <__ssputs_r+0x6c>
 800598e:	6965      	ldr	r5, [r4, #20]
 8005990:	6909      	ldr	r1, [r1, #16]
 8005992:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005996:	eba3 0901 	sub.w	r9, r3, r1
 800599a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800599e:	1c7b      	adds	r3, r7, #1
 80059a0:	444b      	add	r3, r9
 80059a2:	106d      	asrs	r5, r5, #1
 80059a4:	429d      	cmp	r5, r3
 80059a6:	bf38      	it	cc
 80059a8:	461d      	movcc	r5, r3
 80059aa:	0553      	lsls	r3, r2, #21
 80059ac:	d527      	bpl.n	80059fe <__ssputs_r+0x8e>
 80059ae:	4629      	mov	r1, r5
 80059b0:	f7ff ff52 	bl	8005858 <_malloc_r>
 80059b4:	4606      	mov	r6, r0
 80059b6:	b360      	cbz	r0, 8005a12 <__ssputs_r+0xa2>
 80059b8:	464a      	mov	r2, r9
 80059ba:	6921      	ldr	r1, [r4, #16]
 80059bc:	f7ff fed4 	bl	8005768 <memcpy>
 80059c0:	89a3      	ldrh	r3, [r4, #12]
 80059c2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80059c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059ca:	81a3      	strh	r3, [r4, #12]
 80059cc:	6126      	str	r6, [r4, #16]
 80059ce:	444e      	add	r6, r9
 80059d0:	6026      	str	r6, [r4, #0]
 80059d2:	463e      	mov	r6, r7
 80059d4:	6165      	str	r5, [r4, #20]
 80059d6:	eba5 0509 	sub.w	r5, r5, r9
 80059da:	60a5      	str	r5, [r4, #8]
 80059dc:	42be      	cmp	r6, r7
 80059de:	d900      	bls.n	80059e2 <__ssputs_r+0x72>
 80059e0:	463e      	mov	r6, r7
 80059e2:	4632      	mov	r2, r6
 80059e4:	4641      	mov	r1, r8
 80059e6:	6820      	ldr	r0, [r4, #0]
 80059e8:	f000 faaa 	bl	8005f40 <memmove>
 80059ec:	2000      	movs	r0, #0
 80059ee:	68a3      	ldr	r3, [r4, #8]
 80059f0:	1b9b      	subs	r3, r3, r6
 80059f2:	60a3      	str	r3, [r4, #8]
 80059f4:	6823      	ldr	r3, [r4, #0]
 80059f6:	4433      	add	r3, r6
 80059f8:	6023      	str	r3, [r4, #0]
 80059fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059fe:	462a      	mov	r2, r5
 8005a00:	f000 fad6 	bl	8005fb0 <_realloc_r>
 8005a04:	4606      	mov	r6, r0
 8005a06:	2800      	cmp	r0, #0
 8005a08:	d1e0      	bne.n	80059cc <__ssputs_r+0x5c>
 8005a0a:	4650      	mov	r0, sl
 8005a0c:	6921      	ldr	r1, [r4, #16]
 8005a0e:	f7ff feb9 	bl	8005784 <_free_r>
 8005a12:	230c      	movs	r3, #12
 8005a14:	f8ca 3000 	str.w	r3, [sl]
 8005a18:	89a3      	ldrh	r3, [r4, #12]
 8005a1a:	f04f 30ff 	mov.w	r0, #4294967295
 8005a1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a22:	81a3      	strh	r3, [r4, #12]
 8005a24:	e7e9      	b.n	80059fa <__ssputs_r+0x8a>
	...

08005a28 <_svfiprintf_r>:
 8005a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a2c:	4698      	mov	r8, r3
 8005a2e:	898b      	ldrh	r3, [r1, #12]
 8005a30:	4607      	mov	r7, r0
 8005a32:	061b      	lsls	r3, r3, #24
 8005a34:	460d      	mov	r5, r1
 8005a36:	4614      	mov	r4, r2
 8005a38:	b09d      	sub	sp, #116	@ 0x74
 8005a3a:	d510      	bpl.n	8005a5e <_svfiprintf_r+0x36>
 8005a3c:	690b      	ldr	r3, [r1, #16]
 8005a3e:	b973      	cbnz	r3, 8005a5e <_svfiprintf_r+0x36>
 8005a40:	2140      	movs	r1, #64	@ 0x40
 8005a42:	f7ff ff09 	bl	8005858 <_malloc_r>
 8005a46:	6028      	str	r0, [r5, #0]
 8005a48:	6128      	str	r0, [r5, #16]
 8005a4a:	b930      	cbnz	r0, 8005a5a <_svfiprintf_r+0x32>
 8005a4c:	230c      	movs	r3, #12
 8005a4e:	603b      	str	r3, [r7, #0]
 8005a50:	f04f 30ff 	mov.w	r0, #4294967295
 8005a54:	b01d      	add	sp, #116	@ 0x74
 8005a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a5a:	2340      	movs	r3, #64	@ 0x40
 8005a5c:	616b      	str	r3, [r5, #20]
 8005a5e:	2300      	movs	r3, #0
 8005a60:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a62:	2320      	movs	r3, #32
 8005a64:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005a68:	2330      	movs	r3, #48	@ 0x30
 8005a6a:	f04f 0901 	mov.w	r9, #1
 8005a6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a72:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005c0c <_svfiprintf_r+0x1e4>
 8005a76:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005a7a:	4623      	mov	r3, r4
 8005a7c:	469a      	mov	sl, r3
 8005a7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a82:	b10a      	cbz	r2, 8005a88 <_svfiprintf_r+0x60>
 8005a84:	2a25      	cmp	r2, #37	@ 0x25
 8005a86:	d1f9      	bne.n	8005a7c <_svfiprintf_r+0x54>
 8005a88:	ebba 0b04 	subs.w	fp, sl, r4
 8005a8c:	d00b      	beq.n	8005aa6 <_svfiprintf_r+0x7e>
 8005a8e:	465b      	mov	r3, fp
 8005a90:	4622      	mov	r2, r4
 8005a92:	4629      	mov	r1, r5
 8005a94:	4638      	mov	r0, r7
 8005a96:	f7ff ff6b 	bl	8005970 <__ssputs_r>
 8005a9a:	3001      	adds	r0, #1
 8005a9c:	f000 80a7 	beq.w	8005bee <_svfiprintf_r+0x1c6>
 8005aa0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005aa2:	445a      	add	r2, fp
 8005aa4:	9209      	str	r2, [sp, #36]	@ 0x24
 8005aa6:	f89a 3000 	ldrb.w	r3, [sl]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	f000 809f 	beq.w	8005bee <_svfiprintf_r+0x1c6>
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	f04f 32ff 	mov.w	r2, #4294967295
 8005ab6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005aba:	f10a 0a01 	add.w	sl, sl, #1
 8005abe:	9304      	str	r3, [sp, #16]
 8005ac0:	9307      	str	r3, [sp, #28]
 8005ac2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005ac6:	931a      	str	r3, [sp, #104]	@ 0x68
 8005ac8:	4654      	mov	r4, sl
 8005aca:	2205      	movs	r2, #5
 8005acc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ad0:	484e      	ldr	r0, [pc, #312]	@ (8005c0c <_svfiprintf_r+0x1e4>)
 8005ad2:	f000 fa5f 	bl	8005f94 <memchr>
 8005ad6:	9a04      	ldr	r2, [sp, #16]
 8005ad8:	b9d8      	cbnz	r0, 8005b12 <_svfiprintf_r+0xea>
 8005ada:	06d0      	lsls	r0, r2, #27
 8005adc:	bf44      	itt	mi
 8005ade:	2320      	movmi	r3, #32
 8005ae0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ae4:	0711      	lsls	r1, r2, #28
 8005ae6:	bf44      	itt	mi
 8005ae8:	232b      	movmi	r3, #43	@ 0x2b
 8005aea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005aee:	f89a 3000 	ldrb.w	r3, [sl]
 8005af2:	2b2a      	cmp	r3, #42	@ 0x2a
 8005af4:	d015      	beq.n	8005b22 <_svfiprintf_r+0xfa>
 8005af6:	4654      	mov	r4, sl
 8005af8:	2000      	movs	r0, #0
 8005afa:	f04f 0c0a 	mov.w	ip, #10
 8005afe:	9a07      	ldr	r2, [sp, #28]
 8005b00:	4621      	mov	r1, r4
 8005b02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b06:	3b30      	subs	r3, #48	@ 0x30
 8005b08:	2b09      	cmp	r3, #9
 8005b0a:	d94b      	bls.n	8005ba4 <_svfiprintf_r+0x17c>
 8005b0c:	b1b0      	cbz	r0, 8005b3c <_svfiprintf_r+0x114>
 8005b0e:	9207      	str	r2, [sp, #28]
 8005b10:	e014      	b.n	8005b3c <_svfiprintf_r+0x114>
 8005b12:	eba0 0308 	sub.w	r3, r0, r8
 8005b16:	fa09 f303 	lsl.w	r3, r9, r3
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	46a2      	mov	sl, r4
 8005b1e:	9304      	str	r3, [sp, #16]
 8005b20:	e7d2      	b.n	8005ac8 <_svfiprintf_r+0xa0>
 8005b22:	9b03      	ldr	r3, [sp, #12]
 8005b24:	1d19      	adds	r1, r3, #4
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	9103      	str	r1, [sp, #12]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	bfbb      	ittet	lt
 8005b2e:	425b      	neglt	r3, r3
 8005b30:	f042 0202 	orrlt.w	r2, r2, #2
 8005b34:	9307      	strge	r3, [sp, #28]
 8005b36:	9307      	strlt	r3, [sp, #28]
 8005b38:	bfb8      	it	lt
 8005b3a:	9204      	strlt	r2, [sp, #16]
 8005b3c:	7823      	ldrb	r3, [r4, #0]
 8005b3e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005b40:	d10a      	bne.n	8005b58 <_svfiprintf_r+0x130>
 8005b42:	7863      	ldrb	r3, [r4, #1]
 8005b44:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b46:	d132      	bne.n	8005bae <_svfiprintf_r+0x186>
 8005b48:	9b03      	ldr	r3, [sp, #12]
 8005b4a:	3402      	adds	r4, #2
 8005b4c:	1d1a      	adds	r2, r3, #4
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	9203      	str	r2, [sp, #12]
 8005b52:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005b56:	9305      	str	r3, [sp, #20]
 8005b58:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005c10 <_svfiprintf_r+0x1e8>
 8005b5c:	2203      	movs	r2, #3
 8005b5e:	4650      	mov	r0, sl
 8005b60:	7821      	ldrb	r1, [r4, #0]
 8005b62:	f000 fa17 	bl	8005f94 <memchr>
 8005b66:	b138      	cbz	r0, 8005b78 <_svfiprintf_r+0x150>
 8005b68:	2240      	movs	r2, #64	@ 0x40
 8005b6a:	9b04      	ldr	r3, [sp, #16]
 8005b6c:	eba0 000a 	sub.w	r0, r0, sl
 8005b70:	4082      	lsls	r2, r0
 8005b72:	4313      	orrs	r3, r2
 8005b74:	3401      	adds	r4, #1
 8005b76:	9304      	str	r3, [sp, #16]
 8005b78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b7c:	2206      	movs	r2, #6
 8005b7e:	4825      	ldr	r0, [pc, #148]	@ (8005c14 <_svfiprintf_r+0x1ec>)
 8005b80:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005b84:	f000 fa06 	bl	8005f94 <memchr>
 8005b88:	2800      	cmp	r0, #0
 8005b8a:	d036      	beq.n	8005bfa <_svfiprintf_r+0x1d2>
 8005b8c:	4b22      	ldr	r3, [pc, #136]	@ (8005c18 <_svfiprintf_r+0x1f0>)
 8005b8e:	bb1b      	cbnz	r3, 8005bd8 <_svfiprintf_r+0x1b0>
 8005b90:	9b03      	ldr	r3, [sp, #12]
 8005b92:	3307      	adds	r3, #7
 8005b94:	f023 0307 	bic.w	r3, r3, #7
 8005b98:	3308      	adds	r3, #8
 8005b9a:	9303      	str	r3, [sp, #12]
 8005b9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b9e:	4433      	add	r3, r6
 8005ba0:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ba2:	e76a      	b.n	8005a7a <_svfiprintf_r+0x52>
 8005ba4:	460c      	mov	r4, r1
 8005ba6:	2001      	movs	r0, #1
 8005ba8:	fb0c 3202 	mla	r2, ip, r2, r3
 8005bac:	e7a8      	b.n	8005b00 <_svfiprintf_r+0xd8>
 8005bae:	2300      	movs	r3, #0
 8005bb0:	f04f 0c0a 	mov.w	ip, #10
 8005bb4:	4619      	mov	r1, r3
 8005bb6:	3401      	adds	r4, #1
 8005bb8:	9305      	str	r3, [sp, #20]
 8005bba:	4620      	mov	r0, r4
 8005bbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005bc0:	3a30      	subs	r2, #48	@ 0x30
 8005bc2:	2a09      	cmp	r2, #9
 8005bc4:	d903      	bls.n	8005bce <_svfiprintf_r+0x1a6>
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d0c6      	beq.n	8005b58 <_svfiprintf_r+0x130>
 8005bca:	9105      	str	r1, [sp, #20]
 8005bcc:	e7c4      	b.n	8005b58 <_svfiprintf_r+0x130>
 8005bce:	4604      	mov	r4, r0
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	fb0c 2101 	mla	r1, ip, r1, r2
 8005bd6:	e7f0      	b.n	8005bba <_svfiprintf_r+0x192>
 8005bd8:	ab03      	add	r3, sp, #12
 8005bda:	9300      	str	r3, [sp, #0]
 8005bdc:	462a      	mov	r2, r5
 8005bde:	4638      	mov	r0, r7
 8005be0:	4b0e      	ldr	r3, [pc, #56]	@ (8005c1c <_svfiprintf_r+0x1f4>)
 8005be2:	a904      	add	r1, sp, #16
 8005be4:	f3af 8000 	nop.w
 8005be8:	1c42      	adds	r2, r0, #1
 8005bea:	4606      	mov	r6, r0
 8005bec:	d1d6      	bne.n	8005b9c <_svfiprintf_r+0x174>
 8005bee:	89ab      	ldrh	r3, [r5, #12]
 8005bf0:	065b      	lsls	r3, r3, #25
 8005bf2:	f53f af2d 	bmi.w	8005a50 <_svfiprintf_r+0x28>
 8005bf6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005bf8:	e72c      	b.n	8005a54 <_svfiprintf_r+0x2c>
 8005bfa:	ab03      	add	r3, sp, #12
 8005bfc:	9300      	str	r3, [sp, #0]
 8005bfe:	462a      	mov	r2, r5
 8005c00:	4638      	mov	r0, r7
 8005c02:	4b06      	ldr	r3, [pc, #24]	@ (8005c1c <_svfiprintf_r+0x1f4>)
 8005c04:	a904      	add	r1, sp, #16
 8005c06:	f000 f87d 	bl	8005d04 <_printf_i>
 8005c0a:	e7ed      	b.n	8005be8 <_svfiprintf_r+0x1c0>
 8005c0c:	0800783e 	.word	0x0800783e
 8005c10:	08007844 	.word	0x08007844
 8005c14:	08007848 	.word	0x08007848
 8005c18:	00000000 	.word	0x00000000
 8005c1c:	08005971 	.word	0x08005971

08005c20 <_printf_common>:
 8005c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c24:	4616      	mov	r6, r2
 8005c26:	4698      	mov	r8, r3
 8005c28:	688a      	ldr	r2, [r1, #8]
 8005c2a:	690b      	ldr	r3, [r1, #16]
 8005c2c:	4607      	mov	r7, r0
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	bfb8      	it	lt
 8005c32:	4613      	movlt	r3, r2
 8005c34:	6033      	str	r3, [r6, #0]
 8005c36:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005c3a:	460c      	mov	r4, r1
 8005c3c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005c40:	b10a      	cbz	r2, 8005c46 <_printf_common+0x26>
 8005c42:	3301      	adds	r3, #1
 8005c44:	6033      	str	r3, [r6, #0]
 8005c46:	6823      	ldr	r3, [r4, #0]
 8005c48:	0699      	lsls	r1, r3, #26
 8005c4a:	bf42      	ittt	mi
 8005c4c:	6833      	ldrmi	r3, [r6, #0]
 8005c4e:	3302      	addmi	r3, #2
 8005c50:	6033      	strmi	r3, [r6, #0]
 8005c52:	6825      	ldr	r5, [r4, #0]
 8005c54:	f015 0506 	ands.w	r5, r5, #6
 8005c58:	d106      	bne.n	8005c68 <_printf_common+0x48>
 8005c5a:	f104 0a19 	add.w	sl, r4, #25
 8005c5e:	68e3      	ldr	r3, [r4, #12]
 8005c60:	6832      	ldr	r2, [r6, #0]
 8005c62:	1a9b      	subs	r3, r3, r2
 8005c64:	42ab      	cmp	r3, r5
 8005c66:	dc2b      	bgt.n	8005cc0 <_printf_common+0xa0>
 8005c68:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005c6c:	6822      	ldr	r2, [r4, #0]
 8005c6e:	3b00      	subs	r3, #0
 8005c70:	bf18      	it	ne
 8005c72:	2301      	movne	r3, #1
 8005c74:	0692      	lsls	r2, r2, #26
 8005c76:	d430      	bmi.n	8005cda <_printf_common+0xba>
 8005c78:	4641      	mov	r1, r8
 8005c7a:	4638      	mov	r0, r7
 8005c7c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005c80:	47c8      	blx	r9
 8005c82:	3001      	adds	r0, #1
 8005c84:	d023      	beq.n	8005cce <_printf_common+0xae>
 8005c86:	6823      	ldr	r3, [r4, #0]
 8005c88:	6922      	ldr	r2, [r4, #16]
 8005c8a:	f003 0306 	and.w	r3, r3, #6
 8005c8e:	2b04      	cmp	r3, #4
 8005c90:	bf14      	ite	ne
 8005c92:	2500      	movne	r5, #0
 8005c94:	6833      	ldreq	r3, [r6, #0]
 8005c96:	f04f 0600 	mov.w	r6, #0
 8005c9a:	bf08      	it	eq
 8005c9c:	68e5      	ldreq	r5, [r4, #12]
 8005c9e:	f104 041a 	add.w	r4, r4, #26
 8005ca2:	bf08      	it	eq
 8005ca4:	1aed      	subeq	r5, r5, r3
 8005ca6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005caa:	bf08      	it	eq
 8005cac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	bfc4      	itt	gt
 8005cb4:	1a9b      	subgt	r3, r3, r2
 8005cb6:	18ed      	addgt	r5, r5, r3
 8005cb8:	42b5      	cmp	r5, r6
 8005cba:	d11a      	bne.n	8005cf2 <_printf_common+0xd2>
 8005cbc:	2000      	movs	r0, #0
 8005cbe:	e008      	b.n	8005cd2 <_printf_common+0xb2>
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	4652      	mov	r2, sl
 8005cc4:	4641      	mov	r1, r8
 8005cc6:	4638      	mov	r0, r7
 8005cc8:	47c8      	blx	r9
 8005cca:	3001      	adds	r0, #1
 8005ccc:	d103      	bne.n	8005cd6 <_printf_common+0xb6>
 8005cce:	f04f 30ff 	mov.w	r0, #4294967295
 8005cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cd6:	3501      	adds	r5, #1
 8005cd8:	e7c1      	b.n	8005c5e <_printf_common+0x3e>
 8005cda:	2030      	movs	r0, #48	@ 0x30
 8005cdc:	18e1      	adds	r1, r4, r3
 8005cde:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005ce2:	1c5a      	adds	r2, r3, #1
 8005ce4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005ce8:	4422      	add	r2, r4
 8005cea:	3302      	adds	r3, #2
 8005cec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005cf0:	e7c2      	b.n	8005c78 <_printf_common+0x58>
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	4622      	mov	r2, r4
 8005cf6:	4641      	mov	r1, r8
 8005cf8:	4638      	mov	r0, r7
 8005cfa:	47c8      	blx	r9
 8005cfc:	3001      	adds	r0, #1
 8005cfe:	d0e6      	beq.n	8005cce <_printf_common+0xae>
 8005d00:	3601      	adds	r6, #1
 8005d02:	e7d9      	b.n	8005cb8 <_printf_common+0x98>

08005d04 <_printf_i>:
 8005d04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d08:	7e0f      	ldrb	r7, [r1, #24]
 8005d0a:	4691      	mov	r9, r2
 8005d0c:	2f78      	cmp	r7, #120	@ 0x78
 8005d0e:	4680      	mov	r8, r0
 8005d10:	460c      	mov	r4, r1
 8005d12:	469a      	mov	sl, r3
 8005d14:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005d16:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005d1a:	d807      	bhi.n	8005d2c <_printf_i+0x28>
 8005d1c:	2f62      	cmp	r7, #98	@ 0x62
 8005d1e:	d80a      	bhi.n	8005d36 <_printf_i+0x32>
 8005d20:	2f00      	cmp	r7, #0
 8005d22:	f000 80d1 	beq.w	8005ec8 <_printf_i+0x1c4>
 8005d26:	2f58      	cmp	r7, #88	@ 0x58
 8005d28:	f000 80b8 	beq.w	8005e9c <_printf_i+0x198>
 8005d2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d30:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005d34:	e03a      	b.n	8005dac <_printf_i+0xa8>
 8005d36:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005d3a:	2b15      	cmp	r3, #21
 8005d3c:	d8f6      	bhi.n	8005d2c <_printf_i+0x28>
 8005d3e:	a101      	add	r1, pc, #4	@ (adr r1, 8005d44 <_printf_i+0x40>)
 8005d40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d44:	08005d9d 	.word	0x08005d9d
 8005d48:	08005db1 	.word	0x08005db1
 8005d4c:	08005d2d 	.word	0x08005d2d
 8005d50:	08005d2d 	.word	0x08005d2d
 8005d54:	08005d2d 	.word	0x08005d2d
 8005d58:	08005d2d 	.word	0x08005d2d
 8005d5c:	08005db1 	.word	0x08005db1
 8005d60:	08005d2d 	.word	0x08005d2d
 8005d64:	08005d2d 	.word	0x08005d2d
 8005d68:	08005d2d 	.word	0x08005d2d
 8005d6c:	08005d2d 	.word	0x08005d2d
 8005d70:	08005eaf 	.word	0x08005eaf
 8005d74:	08005ddb 	.word	0x08005ddb
 8005d78:	08005e69 	.word	0x08005e69
 8005d7c:	08005d2d 	.word	0x08005d2d
 8005d80:	08005d2d 	.word	0x08005d2d
 8005d84:	08005ed1 	.word	0x08005ed1
 8005d88:	08005d2d 	.word	0x08005d2d
 8005d8c:	08005ddb 	.word	0x08005ddb
 8005d90:	08005d2d 	.word	0x08005d2d
 8005d94:	08005d2d 	.word	0x08005d2d
 8005d98:	08005e71 	.word	0x08005e71
 8005d9c:	6833      	ldr	r3, [r6, #0]
 8005d9e:	1d1a      	adds	r2, r3, #4
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	6032      	str	r2, [r6, #0]
 8005da4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005da8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005dac:	2301      	movs	r3, #1
 8005dae:	e09c      	b.n	8005eea <_printf_i+0x1e6>
 8005db0:	6833      	ldr	r3, [r6, #0]
 8005db2:	6820      	ldr	r0, [r4, #0]
 8005db4:	1d19      	adds	r1, r3, #4
 8005db6:	6031      	str	r1, [r6, #0]
 8005db8:	0606      	lsls	r6, r0, #24
 8005dba:	d501      	bpl.n	8005dc0 <_printf_i+0xbc>
 8005dbc:	681d      	ldr	r5, [r3, #0]
 8005dbe:	e003      	b.n	8005dc8 <_printf_i+0xc4>
 8005dc0:	0645      	lsls	r5, r0, #25
 8005dc2:	d5fb      	bpl.n	8005dbc <_printf_i+0xb8>
 8005dc4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005dc8:	2d00      	cmp	r5, #0
 8005dca:	da03      	bge.n	8005dd4 <_printf_i+0xd0>
 8005dcc:	232d      	movs	r3, #45	@ 0x2d
 8005dce:	426d      	negs	r5, r5
 8005dd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005dd4:	230a      	movs	r3, #10
 8005dd6:	4858      	ldr	r0, [pc, #352]	@ (8005f38 <_printf_i+0x234>)
 8005dd8:	e011      	b.n	8005dfe <_printf_i+0xfa>
 8005dda:	6821      	ldr	r1, [r4, #0]
 8005ddc:	6833      	ldr	r3, [r6, #0]
 8005dde:	0608      	lsls	r0, r1, #24
 8005de0:	f853 5b04 	ldr.w	r5, [r3], #4
 8005de4:	d402      	bmi.n	8005dec <_printf_i+0xe8>
 8005de6:	0649      	lsls	r1, r1, #25
 8005de8:	bf48      	it	mi
 8005dea:	b2ad      	uxthmi	r5, r5
 8005dec:	2f6f      	cmp	r7, #111	@ 0x6f
 8005dee:	6033      	str	r3, [r6, #0]
 8005df0:	bf14      	ite	ne
 8005df2:	230a      	movne	r3, #10
 8005df4:	2308      	moveq	r3, #8
 8005df6:	4850      	ldr	r0, [pc, #320]	@ (8005f38 <_printf_i+0x234>)
 8005df8:	2100      	movs	r1, #0
 8005dfa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005dfe:	6866      	ldr	r6, [r4, #4]
 8005e00:	2e00      	cmp	r6, #0
 8005e02:	60a6      	str	r6, [r4, #8]
 8005e04:	db05      	blt.n	8005e12 <_printf_i+0x10e>
 8005e06:	6821      	ldr	r1, [r4, #0]
 8005e08:	432e      	orrs	r6, r5
 8005e0a:	f021 0104 	bic.w	r1, r1, #4
 8005e0e:	6021      	str	r1, [r4, #0]
 8005e10:	d04b      	beq.n	8005eaa <_printf_i+0x1a6>
 8005e12:	4616      	mov	r6, r2
 8005e14:	fbb5 f1f3 	udiv	r1, r5, r3
 8005e18:	fb03 5711 	mls	r7, r3, r1, r5
 8005e1c:	5dc7      	ldrb	r7, [r0, r7]
 8005e1e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005e22:	462f      	mov	r7, r5
 8005e24:	42bb      	cmp	r3, r7
 8005e26:	460d      	mov	r5, r1
 8005e28:	d9f4      	bls.n	8005e14 <_printf_i+0x110>
 8005e2a:	2b08      	cmp	r3, #8
 8005e2c:	d10b      	bne.n	8005e46 <_printf_i+0x142>
 8005e2e:	6823      	ldr	r3, [r4, #0]
 8005e30:	07df      	lsls	r7, r3, #31
 8005e32:	d508      	bpl.n	8005e46 <_printf_i+0x142>
 8005e34:	6923      	ldr	r3, [r4, #16]
 8005e36:	6861      	ldr	r1, [r4, #4]
 8005e38:	4299      	cmp	r1, r3
 8005e3a:	bfde      	ittt	le
 8005e3c:	2330      	movle	r3, #48	@ 0x30
 8005e3e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005e42:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005e46:	1b92      	subs	r2, r2, r6
 8005e48:	6122      	str	r2, [r4, #16]
 8005e4a:	464b      	mov	r3, r9
 8005e4c:	4621      	mov	r1, r4
 8005e4e:	4640      	mov	r0, r8
 8005e50:	f8cd a000 	str.w	sl, [sp]
 8005e54:	aa03      	add	r2, sp, #12
 8005e56:	f7ff fee3 	bl	8005c20 <_printf_common>
 8005e5a:	3001      	adds	r0, #1
 8005e5c:	d14a      	bne.n	8005ef4 <_printf_i+0x1f0>
 8005e5e:	f04f 30ff 	mov.w	r0, #4294967295
 8005e62:	b004      	add	sp, #16
 8005e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e68:	6823      	ldr	r3, [r4, #0]
 8005e6a:	f043 0320 	orr.w	r3, r3, #32
 8005e6e:	6023      	str	r3, [r4, #0]
 8005e70:	2778      	movs	r7, #120	@ 0x78
 8005e72:	4832      	ldr	r0, [pc, #200]	@ (8005f3c <_printf_i+0x238>)
 8005e74:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005e78:	6823      	ldr	r3, [r4, #0]
 8005e7a:	6831      	ldr	r1, [r6, #0]
 8005e7c:	061f      	lsls	r7, r3, #24
 8005e7e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005e82:	d402      	bmi.n	8005e8a <_printf_i+0x186>
 8005e84:	065f      	lsls	r7, r3, #25
 8005e86:	bf48      	it	mi
 8005e88:	b2ad      	uxthmi	r5, r5
 8005e8a:	6031      	str	r1, [r6, #0]
 8005e8c:	07d9      	lsls	r1, r3, #31
 8005e8e:	bf44      	itt	mi
 8005e90:	f043 0320 	orrmi.w	r3, r3, #32
 8005e94:	6023      	strmi	r3, [r4, #0]
 8005e96:	b11d      	cbz	r5, 8005ea0 <_printf_i+0x19c>
 8005e98:	2310      	movs	r3, #16
 8005e9a:	e7ad      	b.n	8005df8 <_printf_i+0xf4>
 8005e9c:	4826      	ldr	r0, [pc, #152]	@ (8005f38 <_printf_i+0x234>)
 8005e9e:	e7e9      	b.n	8005e74 <_printf_i+0x170>
 8005ea0:	6823      	ldr	r3, [r4, #0]
 8005ea2:	f023 0320 	bic.w	r3, r3, #32
 8005ea6:	6023      	str	r3, [r4, #0]
 8005ea8:	e7f6      	b.n	8005e98 <_printf_i+0x194>
 8005eaa:	4616      	mov	r6, r2
 8005eac:	e7bd      	b.n	8005e2a <_printf_i+0x126>
 8005eae:	6833      	ldr	r3, [r6, #0]
 8005eb0:	6825      	ldr	r5, [r4, #0]
 8005eb2:	1d18      	adds	r0, r3, #4
 8005eb4:	6961      	ldr	r1, [r4, #20]
 8005eb6:	6030      	str	r0, [r6, #0]
 8005eb8:	062e      	lsls	r6, r5, #24
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	d501      	bpl.n	8005ec2 <_printf_i+0x1be>
 8005ebe:	6019      	str	r1, [r3, #0]
 8005ec0:	e002      	b.n	8005ec8 <_printf_i+0x1c4>
 8005ec2:	0668      	lsls	r0, r5, #25
 8005ec4:	d5fb      	bpl.n	8005ebe <_printf_i+0x1ba>
 8005ec6:	8019      	strh	r1, [r3, #0]
 8005ec8:	2300      	movs	r3, #0
 8005eca:	4616      	mov	r6, r2
 8005ecc:	6123      	str	r3, [r4, #16]
 8005ece:	e7bc      	b.n	8005e4a <_printf_i+0x146>
 8005ed0:	6833      	ldr	r3, [r6, #0]
 8005ed2:	2100      	movs	r1, #0
 8005ed4:	1d1a      	adds	r2, r3, #4
 8005ed6:	6032      	str	r2, [r6, #0]
 8005ed8:	681e      	ldr	r6, [r3, #0]
 8005eda:	6862      	ldr	r2, [r4, #4]
 8005edc:	4630      	mov	r0, r6
 8005ede:	f000 f859 	bl	8005f94 <memchr>
 8005ee2:	b108      	cbz	r0, 8005ee8 <_printf_i+0x1e4>
 8005ee4:	1b80      	subs	r0, r0, r6
 8005ee6:	6060      	str	r0, [r4, #4]
 8005ee8:	6863      	ldr	r3, [r4, #4]
 8005eea:	6123      	str	r3, [r4, #16]
 8005eec:	2300      	movs	r3, #0
 8005eee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ef2:	e7aa      	b.n	8005e4a <_printf_i+0x146>
 8005ef4:	4632      	mov	r2, r6
 8005ef6:	4649      	mov	r1, r9
 8005ef8:	4640      	mov	r0, r8
 8005efa:	6923      	ldr	r3, [r4, #16]
 8005efc:	47d0      	blx	sl
 8005efe:	3001      	adds	r0, #1
 8005f00:	d0ad      	beq.n	8005e5e <_printf_i+0x15a>
 8005f02:	6823      	ldr	r3, [r4, #0]
 8005f04:	079b      	lsls	r3, r3, #30
 8005f06:	d413      	bmi.n	8005f30 <_printf_i+0x22c>
 8005f08:	68e0      	ldr	r0, [r4, #12]
 8005f0a:	9b03      	ldr	r3, [sp, #12]
 8005f0c:	4298      	cmp	r0, r3
 8005f0e:	bfb8      	it	lt
 8005f10:	4618      	movlt	r0, r3
 8005f12:	e7a6      	b.n	8005e62 <_printf_i+0x15e>
 8005f14:	2301      	movs	r3, #1
 8005f16:	4632      	mov	r2, r6
 8005f18:	4649      	mov	r1, r9
 8005f1a:	4640      	mov	r0, r8
 8005f1c:	47d0      	blx	sl
 8005f1e:	3001      	adds	r0, #1
 8005f20:	d09d      	beq.n	8005e5e <_printf_i+0x15a>
 8005f22:	3501      	adds	r5, #1
 8005f24:	68e3      	ldr	r3, [r4, #12]
 8005f26:	9903      	ldr	r1, [sp, #12]
 8005f28:	1a5b      	subs	r3, r3, r1
 8005f2a:	42ab      	cmp	r3, r5
 8005f2c:	dcf2      	bgt.n	8005f14 <_printf_i+0x210>
 8005f2e:	e7eb      	b.n	8005f08 <_printf_i+0x204>
 8005f30:	2500      	movs	r5, #0
 8005f32:	f104 0619 	add.w	r6, r4, #25
 8005f36:	e7f5      	b.n	8005f24 <_printf_i+0x220>
 8005f38:	0800784f 	.word	0x0800784f
 8005f3c:	08007860 	.word	0x08007860

08005f40 <memmove>:
 8005f40:	4288      	cmp	r0, r1
 8005f42:	b510      	push	{r4, lr}
 8005f44:	eb01 0402 	add.w	r4, r1, r2
 8005f48:	d902      	bls.n	8005f50 <memmove+0x10>
 8005f4a:	4284      	cmp	r4, r0
 8005f4c:	4623      	mov	r3, r4
 8005f4e:	d807      	bhi.n	8005f60 <memmove+0x20>
 8005f50:	1e43      	subs	r3, r0, #1
 8005f52:	42a1      	cmp	r1, r4
 8005f54:	d008      	beq.n	8005f68 <memmove+0x28>
 8005f56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005f5e:	e7f8      	b.n	8005f52 <memmove+0x12>
 8005f60:	4601      	mov	r1, r0
 8005f62:	4402      	add	r2, r0
 8005f64:	428a      	cmp	r2, r1
 8005f66:	d100      	bne.n	8005f6a <memmove+0x2a>
 8005f68:	bd10      	pop	{r4, pc}
 8005f6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005f72:	e7f7      	b.n	8005f64 <memmove+0x24>

08005f74 <_sbrk_r>:
 8005f74:	b538      	push	{r3, r4, r5, lr}
 8005f76:	2300      	movs	r3, #0
 8005f78:	4d05      	ldr	r5, [pc, #20]	@ (8005f90 <_sbrk_r+0x1c>)
 8005f7a:	4604      	mov	r4, r0
 8005f7c:	4608      	mov	r0, r1
 8005f7e:	602b      	str	r3, [r5, #0]
 8005f80:	f7fc fe94 	bl	8002cac <_sbrk>
 8005f84:	1c43      	adds	r3, r0, #1
 8005f86:	d102      	bne.n	8005f8e <_sbrk_r+0x1a>
 8005f88:	682b      	ldr	r3, [r5, #0]
 8005f8a:	b103      	cbz	r3, 8005f8e <_sbrk_r+0x1a>
 8005f8c:	6023      	str	r3, [r4, #0]
 8005f8e:	bd38      	pop	{r3, r4, r5, pc}
 8005f90:	20001d4c 	.word	0x20001d4c

08005f94 <memchr>:
 8005f94:	4603      	mov	r3, r0
 8005f96:	b510      	push	{r4, lr}
 8005f98:	b2c9      	uxtb	r1, r1
 8005f9a:	4402      	add	r2, r0
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	d101      	bne.n	8005fa6 <memchr+0x12>
 8005fa2:	2000      	movs	r0, #0
 8005fa4:	e003      	b.n	8005fae <memchr+0x1a>
 8005fa6:	7804      	ldrb	r4, [r0, #0]
 8005fa8:	3301      	adds	r3, #1
 8005faa:	428c      	cmp	r4, r1
 8005fac:	d1f6      	bne.n	8005f9c <memchr+0x8>
 8005fae:	bd10      	pop	{r4, pc}

08005fb0 <_realloc_r>:
 8005fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fb4:	4607      	mov	r7, r0
 8005fb6:	4614      	mov	r4, r2
 8005fb8:	460d      	mov	r5, r1
 8005fba:	b921      	cbnz	r1, 8005fc6 <_realloc_r+0x16>
 8005fbc:	4611      	mov	r1, r2
 8005fbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005fc2:	f7ff bc49 	b.w	8005858 <_malloc_r>
 8005fc6:	b92a      	cbnz	r2, 8005fd4 <_realloc_r+0x24>
 8005fc8:	f7ff fbdc 	bl	8005784 <_free_r>
 8005fcc:	4625      	mov	r5, r4
 8005fce:	4628      	mov	r0, r5
 8005fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fd4:	f000 f81a 	bl	800600c <_malloc_usable_size_r>
 8005fd8:	4284      	cmp	r4, r0
 8005fda:	4606      	mov	r6, r0
 8005fdc:	d802      	bhi.n	8005fe4 <_realloc_r+0x34>
 8005fde:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005fe2:	d8f4      	bhi.n	8005fce <_realloc_r+0x1e>
 8005fe4:	4621      	mov	r1, r4
 8005fe6:	4638      	mov	r0, r7
 8005fe8:	f7ff fc36 	bl	8005858 <_malloc_r>
 8005fec:	4680      	mov	r8, r0
 8005fee:	b908      	cbnz	r0, 8005ff4 <_realloc_r+0x44>
 8005ff0:	4645      	mov	r5, r8
 8005ff2:	e7ec      	b.n	8005fce <_realloc_r+0x1e>
 8005ff4:	42b4      	cmp	r4, r6
 8005ff6:	4622      	mov	r2, r4
 8005ff8:	4629      	mov	r1, r5
 8005ffa:	bf28      	it	cs
 8005ffc:	4632      	movcs	r2, r6
 8005ffe:	f7ff fbb3 	bl	8005768 <memcpy>
 8006002:	4629      	mov	r1, r5
 8006004:	4638      	mov	r0, r7
 8006006:	f7ff fbbd 	bl	8005784 <_free_r>
 800600a:	e7f1      	b.n	8005ff0 <_realloc_r+0x40>

0800600c <_malloc_usable_size_r>:
 800600c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006010:	1f18      	subs	r0, r3, #4
 8006012:	2b00      	cmp	r3, #0
 8006014:	bfbc      	itt	lt
 8006016:	580b      	ldrlt	r3, [r1, r0]
 8006018:	18c0      	addlt	r0, r0, r3
 800601a:	4770      	bx	lr

0800601c <powf>:
 800601c:	b570      	push	{r4, r5, r6, lr}
 800601e:	460c      	mov	r4, r1
 8006020:	4606      	mov	r6, r0
 8006022:	f000 fa43 	bl	80064ac <__ieee754_powf>
 8006026:	4621      	mov	r1, r4
 8006028:	4605      	mov	r5, r0
 800602a:	4620      	mov	r0, r4
 800602c:	f7fa fb74 	bl	8000718 <__aeabi_fcmpun>
 8006030:	bb68      	cbnz	r0, 800608e <powf+0x72>
 8006032:	2100      	movs	r1, #0
 8006034:	4630      	mov	r0, r6
 8006036:	f7fa fb3d 	bl	80006b4 <__aeabi_fcmpeq>
 800603a:	b190      	cbz	r0, 8006062 <powf+0x46>
 800603c:	2100      	movs	r1, #0
 800603e:	4620      	mov	r0, r4
 8006040:	f7fa fb38 	bl	80006b4 <__aeabi_fcmpeq>
 8006044:	2800      	cmp	r0, #0
 8006046:	d133      	bne.n	80060b0 <powf+0x94>
 8006048:	4620      	mov	r0, r4
 800604a:	f000 f8c1 	bl	80061d0 <finitef>
 800604e:	b1f0      	cbz	r0, 800608e <powf+0x72>
 8006050:	2100      	movs	r1, #0
 8006052:	4620      	mov	r0, r4
 8006054:	f7fa fb38 	bl	80006c8 <__aeabi_fcmplt>
 8006058:	b1c8      	cbz	r0, 800608e <powf+0x72>
 800605a:	f7ff fb59 	bl	8005710 <__errno>
 800605e:	2322      	movs	r3, #34	@ 0x22
 8006060:	e014      	b.n	800608c <powf+0x70>
 8006062:	4628      	mov	r0, r5
 8006064:	f000 f8b4 	bl	80061d0 <finitef>
 8006068:	b998      	cbnz	r0, 8006092 <powf+0x76>
 800606a:	4630      	mov	r0, r6
 800606c:	f000 f8b0 	bl	80061d0 <finitef>
 8006070:	b178      	cbz	r0, 8006092 <powf+0x76>
 8006072:	4620      	mov	r0, r4
 8006074:	f000 f8ac 	bl	80061d0 <finitef>
 8006078:	b158      	cbz	r0, 8006092 <powf+0x76>
 800607a:	4629      	mov	r1, r5
 800607c:	4628      	mov	r0, r5
 800607e:	f7fa fb4b 	bl	8000718 <__aeabi_fcmpun>
 8006082:	2800      	cmp	r0, #0
 8006084:	d0e9      	beq.n	800605a <powf+0x3e>
 8006086:	f7ff fb43 	bl	8005710 <__errno>
 800608a:	2321      	movs	r3, #33	@ 0x21
 800608c:	6003      	str	r3, [r0, #0]
 800608e:	4628      	mov	r0, r5
 8006090:	bd70      	pop	{r4, r5, r6, pc}
 8006092:	2100      	movs	r1, #0
 8006094:	4628      	mov	r0, r5
 8006096:	f7fa fb0d 	bl	80006b4 <__aeabi_fcmpeq>
 800609a:	2800      	cmp	r0, #0
 800609c:	d0f7      	beq.n	800608e <powf+0x72>
 800609e:	4630      	mov	r0, r6
 80060a0:	f000 f896 	bl	80061d0 <finitef>
 80060a4:	2800      	cmp	r0, #0
 80060a6:	d0f2      	beq.n	800608e <powf+0x72>
 80060a8:	4620      	mov	r0, r4
 80060aa:	f000 f891 	bl	80061d0 <finitef>
 80060ae:	e7d3      	b.n	8006058 <powf+0x3c>
 80060b0:	f04f 557e 	mov.w	r5, #1065353216	@ 0x3f800000
 80060b4:	e7eb      	b.n	800608e <powf+0x72>

080060b6 <sqrtf>:
 80060b6:	b538      	push	{r3, r4, r5, lr}
 80060b8:	4605      	mov	r5, r0
 80060ba:	f000 f891 	bl	80061e0 <__ieee754_sqrtf>
 80060be:	4629      	mov	r1, r5
 80060c0:	4604      	mov	r4, r0
 80060c2:	4628      	mov	r0, r5
 80060c4:	f7fa fb28 	bl	8000718 <__aeabi_fcmpun>
 80060c8:	b968      	cbnz	r0, 80060e6 <sqrtf+0x30>
 80060ca:	2100      	movs	r1, #0
 80060cc:	4628      	mov	r0, r5
 80060ce:	f7fa fafb 	bl	80006c8 <__aeabi_fcmplt>
 80060d2:	b140      	cbz	r0, 80060e6 <sqrtf+0x30>
 80060d4:	f7ff fb1c 	bl	8005710 <__errno>
 80060d8:	2321      	movs	r3, #33	@ 0x21
 80060da:	2100      	movs	r1, #0
 80060dc:	6003      	str	r3, [r0, #0]
 80060de:	4608      	mov	r0, r1
 80060e0:	f7fa fa08 	bl	80004f4 <__aeabi_fdiv>
 80060e4:	4604      	mov	r4, r0
 80060e6:	4620      	mov	r0, r4
 80060e8:	bd38      	pop	{r3, r4, r5, pc}
	...

080060ec <cosf>:
 80060ec:	b507      	push	{r0, r1, r2, lr}
 80060ee:	4a1a      	ldr	r2, [pc, #104]	@ (8006158 <cosf+0x6c>)
 80060f0:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 80060f4:	4293      	cmp	r3, r2
 80060f6:	4601      	mov	r1, r0
 80060f8:	d805      	bhi.n	8006106 <cosf+0x1a>
 80060fa:	2100      	movs	r1, #0
 80060fc:	b003      	add	sp, #12
 80060fe:	f85d eb04 	ldr.w	lr, [sp], #4
 8006102:	f000 b8dd 	b.w	80062c0 <__kernel_cosf>
 8006106:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800610a:	d304      	bcc.n	8006116 <cosf+0x2a>
 800610c:	f7fa f834 	bl	8000178 <__aeabi_fsub>
 8006110:	b003      	add	sp, #12
 8006112:	f85d fb04 	ldr.w	pc, [sp], #4
 8006116:	4669      	mov	r1, sp
 8006118:	f000 fd28 	bl	8006b6c <__ieee754_rem_pio2f>
 800611c:	f000 0203 	and.w	r2, r0, #3
 8006120:	2a01      	cmp	r2, #1
 8006122:	d007      	beq.n	8006134 <cosf+0x48>
 8006124:	2a02      	cmp	r2, #2
 8006126:	d00c      	beq.n	8006142 <cosf+0x56>
 8006128:	b982      	cbnz	r2, 800614c <cosf+0x60>
 800612a:	9901      	ldr	r1, [sp, #4]
 800612c:	9800      	ldr	r0, [sp, #0]
 800612e:	f000 f8c7 	bl	80062c0 <__kernel_cosf>
 8006132:	e7ed      	b.n	8006110 <cosf+0x24>
 8006134:	9901      	ldr	r1, [sp, #4]
 8006136:	9800      	ldr	r0, [sp, #0]
 8006138:	f000 f942 	bl	80063c0 <__kernel_sinf>
 800613c:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8006140:	e7e6      	b.n	8006110 <cosf+0x24>
 8006142:	9901      	ldr	r1, [sp, #4]
 8006144:	9800      	ldr	r0, [sp, #0]
 8006146:	f000 f8bb 	bl	80062c0 <__kernel_cosf>
 800614a:	e7f7      	b.n	800613c <cosf+0x50>
 800614c:	2201      	movs	r2, #1
 800614e:	9901      	ldr	r1, [sp, #4]
 8006150:	9800      	ldr	r0, [sp, #0]
 8006152:	f000 f935 	bl	80063c0 <__kernel_sinf>
 8006156:	e7db      	b.n	8006110 <cosf+0x24>
 8006158:	3f490fd8 	.word	0x3f490fd8

0800615c <sinf>:
 800615c:	b507      	push	{r0, r1, r2, lr}
 800615e:	4a1b      	ldr	r2, [pc, #108]	@ (80061cc <sinf+0x70>)
 8006160:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8006164:	4293      	cmp	r3, r2
 8006166:	4601      	mov	r1, r0
 8006168:	d806      	bhi.n	8006178 <sinf+0x1c>
 800616a:	2200      	movs	r2, #0
 800616c:	2100      	movs	r1, #0
 800616e:	b003      	add	sp, #12
 8006170:	f85d eb04 	ldr.w	lr, [sp], #4
 8006174:	f000 b924 	b.w	80063c0 <__kernel_sinf>
 8006178:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800617c:	d304      	bcc.n	8006188 <sinf+0x2c>
 800617e:	f7f9 fffb 	bl	8000178 <__aeabi_fsub>
 8006182:	b003      	add	sp, #12
 8006184:	f85d fb04 	ldr.w	pc, [sp], #4
 8006188:	4669      	mov	r1, sp
 800618a:	f000 fcef 	bl	8006b6c <__ieee754_rem_pio2f>
 800618e:	f000 0003 	and.w	r0, r0, #3
 8006192:	2801      	cmp	r0, #1
 8006194:	d008      	beq.n	80061a8 <sinf+0x4c>
 8006196:	2802      	cmp	r0, #2
 8006198:	d00b      	beq.n	80061b2 <sinf+0x56>
 800619a:	b990      	cbnz	r0, 80061c2 <sinf+0x66>
 800619c:	2201      	movs	r2, #1
 800619e:	9901      	ldr	r1, [sp, #4]
 80061a0:	9800      	ldr	r0, [sp, #0]
 80061a2:	f000 f90d 	bl	80063c0 <__kernel_sinf>
 80061a6:	e7ec      	b.n	8006182 <sinf+0x26>
 80061a8:	9901      	ldr	r1, [sp, #4]
 80061aa:	9800      	ldr	r0, [sp, #0]
 80061ac:	f000 f888 	bl	80062c0 <__kernel_cosf>
 80061b0:	e7e7      	b.n	8006182 <sinf+0x26>
 80061b2:	2201      	movs	r2, #1
 80061b4:	9901      	ldr	r1, [sp, #4]
 80061b6:	9800      	ldr	r0, [sp, #0]
 80061b8:	f000 f902 	bl	80063c0 <__kernel_sinf>
 80061bc:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 80061c0:	e7df      	b.n	8006182 <sinf+0x26>
 80061c2:	9901      	ldr	r1, [sp, #4]
 80061c4:	9800      	ldr	r0, [sp, #0]
 80061c6:	f000 f87b 	bl	80062c0 <__kernel_cosf>
 80061ca:	e7f7      	b.n	80061bc <sinf+0x60>
 80061cc:	3f490fd8 	.word	0x3f490fd8

080061d0 <finitef>:
 80061d0:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80061d4:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 80061d8:	bfac      	ite	ge
 80061da:	2000      	movge	r0, #0
 80061dc:	2001      	movlt	r0, #1
 80061de:	4770      	bx	lr

080061e0 <__ieee754_sqrtf>:
 80061e0:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 80061e4:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80061e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061ec:	4603      	mov	r3, r0
 80061ee:	4604      	mov	r4, r0
 80061f0:	d30a      	bcc.n	8006208 <__ieee754_sqrtf+0x28>
 80061f2:	4601      	mov	r1, r0
 80061f4:	f7fa f8ca 	bl	800038c <__aeabi_fmul>
 80061f8:	4601      	mov	r1, r0
 80061fa:	4620      	mov	r0, r4
 80061fc:	f7f9 ffbe 	bl	800017c <__addsf3>
 8006200:	4604      	mov	r4, r0
 8006202:	4620      	mov	r0, r4
 8006204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006208:	2a00      	cmp	r2, #0
 800620a:	d0fa      	beq.n	8006202 <__ieee754_sqrtf+0x22>
 800620c:	2800      	cmp	r0, #0
 800620e:	da06      	bge.n	800621e <__ieee754_sqrtf+0x3e>
 8006210:	4601      	mov	r1, r0
 8006212:	f7f9 ffb1 	bl	8000178 <__aeabi_fsub>
 8006216:	4601      	mov	r1, r0
 8006218:	f7fa f96c 	bl	80004f4 <__aeabi_fdiv>
 800621c:	e7f0      	b.n	8006200 <__ieee754_sqrtf+0x20>
 800621e:	f010 41ff 	ands.w	r1, r0, #2139095040	@ 0x7f800000
 8006222:	d03c      	beq.n	800629e <__ieee754_sqrtf+0xbe>
 8006224:	15c2      	asrs	r2, r0, #23
 8006226:	2400      	movs	r4, #0
 8006228:	2019      	movs	r0, #25
 800622a:	4626      	mov	r6, r4
 800622c:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8006230:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006234:	f1a2 057f 	sub.w	r5, r2, #127	@ 0x7f
 8006238:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800623c:	07d2      	lsls	r2, r2, #31
 800623e:	bf58      	it	pl
 8006240:	005b      	lslpl	r3, r3, #1
 8006242:	106d      	asrs	r5, r5, #1
 8006244:	005b      	lsls	r3, r3, #1
 8006246:	1872      	adds	r2, r6, r1
 8006248:	429a      	cmp	r2, r3
 800624a:	bfcf      	iteee	gt
 800624c:	461a      	movgt	r2, r3
 800624e:	1856      	addle	r6, r2, r1
 8006250:	1864      	addle	r4, r4, r1
 8006252:	1a9a      	suble	r2, r3, r2
 8006254:	3801      	subs	r0, #1
 8006256:	ea4f 0342 	mov.w	r3, r2, lsl #1
 800625a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800625e:	d1f2      	bne.n	8006246 <__ieee754_sqrtf+0x66>
 8006260:	b1ba      	cbz	r2, 8006292 <__ieee754_sqrtf+0xb2>
 8006262:	4e15      	ldr	r6, [pc, #84]	@ (80062b8 <__ieee754_sqrtf+0xd8>)
 8006264:	4f15      	ldr	r7, [pc, #84]	@ (80062bc <__ieee754_sqrtf+0xdc>)
 8006266:	6830      	ldr	r0, [r6, #0]
 8006268:	6839      	ldr	r1, [r7, #0]
 800626a:	f7f9 ff85 	bl	8000178 <__aeabi_fsub>
 800626e:	f8d6 8000 	ldr.w	r8, [r6]
 8006272:	4601      	mov	r1, r0
 8006274:	4640      	mov	r0, r8
 8006276:	f7fa fa31 	bl	80006dc <__aeabi_fcmple>
 800627a:	b150      	cbz	r0, 8006292 <__ieee754_sqrtf+0xb2>
 800627c:	6830      	ldr	r0, [r6, #0]
 800627e:	6839      	ldr	r1, [r7, #0]
 8006280:	f7f9 ff7c 	bl	800017c <__addsf3>
 8006284:	6836      	ldr	r6, [r6, #0]
 8006286:	4601      	mov	r1, r0
 8006288:	4630      	mov	r0, r6
 800628a:	f7fa fa1d 	bl	80006c8 <__aeabi_fcmplt>
 800628e:	b170      	cbz	r0, 80062ae <__ieee754_sqrtf+0xce>
 8006290:	3402      	adds	r4, #2
 8006292:	1064      	asrs	r4, r4, #1
 8006294:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 8006298:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 800629c:	e7b1      	b.n	8006202 <__ieee754_sqrtf+0x22>
 800629e:	005b      	lsls	r3, r3, #1
 80062a0:	0218      	lsls	r0, r3, #8
 80062a2:	460a      	mov	r2, r1
 80062a4:	f101 0101 	add.w	r1, r1, #1
 80062a8:	d5f9      	bpl.n	800629e <__ieee754_sqrtf+0xbe>
 80062aa:	4252      	negs	r2, r2
 80062ac:	e7bb      	b.n	8006226 <__ieee754_sqrtf+0x46>
 80062ae:	3401      	adds	r4, #1
 80062b0:	f024 0401 	bic.w	r4, r4, #1
 80062b4:	e7ed      	b.n	8006292 <__ieee754_sqrtf+0xb2>
 80062b6:	bf00      	nop
 80062b8:	08007878 	.word	0x08007878
 80062bc:	08007874 	.word	0x08007874

080062c0 <__kernel_cosf>:
 80062c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062c4:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 80062c8:	f1b5 5f48 	cmp.w	r5, #838860800	@ 0x32000000
 80062cc:	4606      	mov	r6, r0
 80062ce:	4688      	mov	r8, r1
 80062d0:	d203      	bcs.n	80062da <__kernel_cosf+0x1a>
 80062d2:	f7fa fa37 	bl	8000744 <__aeabi_f2iz>
 80062d6:	2800      	cmp	r0, #0
 80062d8:	d05c      	beq.n	8006394 <__kernel_cosf+0xd4>
 80062da:	4631      	mov	r1, r6
 80062dc:	4630      	mov	r0, r6
 80062de:	f7fa f855 	bl	800038c <__aeabi_fmul>
 80062e2:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80062e6:	4604      	mov	r4, r0
 80062e8:	f7fa f850 	bl	800038c <__aeabi_fmul>
 80062ec:	492b      	ldr	r1, [pc, #172]	@ (800639c <__kernel_cosf+0xdc>)
 80062ee:	4607      	mov	r7, r0
 80062f0:	4620      	mov	r0, r4
 80062f2:	f7fa f84b 	bl	800038c <__aeabi_fmul>
 80062f6:	492a      	ldr	r1, [pc, #168]	@ (80063a0 <__kernel_cosf+0xe0>)
 80062f8:	f7f9 ff40 	bl	800017c <__addsf3>
 80062fc:	4621      	mov	r1, r4
 80062fe:	f7fa f845 	bl	800038c <__aeabi_fmul>
 8006302:	4928      	ldr	r1, [pc, #160]	@ (80063a4 <__kernel_cosf+0xe4>)
 8006304:	f7f9 ff38 	bl	8000178 <__aeabi_fsub>
 8006308:	4621      	mov	r1, r4
 800630a:	f7fa f83f 	bl	800038c <__aeabi_fmul>
 800630e:	4926      	ldr	r1, [pc, #152]	@ (80063a8 <__kernel_cosf+0xe8>)
 8006310:	f7f9 ff34 	bl	800017c <__addsf3>
 8006314:	4621      	mov	r1, r4
 8006316:	f7fa f839 	bl	800038c <__aeabi_fmul>
 800631a:	4924      	ldr	r1, [pc, #144]	@ (80063ac <__kernel_cosf+0xec>)
 800631c:	f7f9 ff2c 	bl	8000178 <__aeabi_fsub>
 8006320:	4621      	mov	r1, r4
 8006322:	f7fa f833 	bl	800038c <__aeabi_fmul>
 8006326:	4922      	ldr	r1, [pc, #136]	@ (80063b0 <__kernel_cosf+0xf0>)
 8006328:	f7f9 ff28 	bl	800017c <__addsf3>
 800632c:	4621      	mov	r1, r4
 800632e:	f7fa f82d 	bl	800038c <__aeabi_fmul>
 8006332:	4621      	mov	r1, r4
 8006334:	f7fa f82a 	bl	800038c <__aeabi_fmul>
 8006338:	4641      	mov	r1, r8
 800633a:	4604      	mov	r4, r0
 800633c:	4630      	mov	r0, r6
 800633e:	f7fa f825 	bl	800038c <__aeabi_fmul>
 8006342:	4601      	mov	r1, r0
 8006344:	4620      	mov	r0, r4
 8006346:	f7f9 ff17 	bl	8000178 <__aeabi_fsub>
 800634a:	4b1a      	ldr	r3, [pc, #104]	@ (80063b4 <__kernel_cosf+0xf4>)
 800634c:	4604      	mov	r4, r0
 800634e:	429d      	cmp	r5, r3
 8006350:	d80a      	bhi.n	8006368 <__kernel_cosf+0xa8>
 8006352:	4601      	mov	r1, r0
 8006354:	4638      	mov	r0, r7
 8006356:	f7f9 ff0f 	bl	8000178 <__aeabi_fsub>
 800635a:	4601      	mov	r1, r0
 800635c:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8006360:	f7f9 ff0a 	bl	8000178 <__aeabi_fsub>
 8006364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006368:	4b13      	ldr	r3, [pc, #76]	@ (80063b8 <__kernel_cosf+0xf8>)
 800636a:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800636e:	429d      	cmp	r5, r3
 8006370:	bf8c      	ite	hi
 8006372:	4d12      	ldrhi	r5, [pc, #72]	@ (80063bc <__kernel_cosf+0xfc>)
 8006374:	f105 457f 	addls.w	r5, r5, #4278190080	@ 0xff000000
 8006378:	4629      	mov	r1, r5
 800637a:	f7f9 fefd 	bl	8000178 <__aeabi_fsub>
 800637e:	4629      	mov	r1, r5
 8006380:	4606      	mov	r6, r0
 8006382:	4638      	mov	r0, r7
 8006384:	f7f9 fef8 	bl	8000178 <__aeabi_fsub>
 8006388:	4621      	mov	r1, r4
 800638a:	f7f9 fef5 	bl	8000178 <__aeabi_fsub>
 800638e:	4601      	mov	r1, r0
 8006390:	4630      	mov	r0, r6
 8006392:	e7e5      	b.n	8006360 <__kernel_cosf+0xa0>
 8006394:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8006398:	e7e4      	b.n	8006364 <__kernel_cosf+0xa4>
 800639a:	bf00      	nop
 800639c:	ad47d74e 	.word	0xad47d74e
 80063a0:	310f74f6 	.word	0x310f74f6
 80063a4:	3493f27c 	.word	0x3493f27c
 80063a8:	37d00d01 	.word	0x37d00d01
 80063ac:	3ab60b61 	.word	0x3ab60b61
 80063b0:	3d2aaaab 	.word	0x3d2aaaab
 80063b4:	3e999999 	.word	0x3e999999
 80063b8:	3f480000 	.word	0x3f480000
 80063bc:	3e900000 	.word	0x3e900000

080063c0 <__kernel_sinf>:
 80063c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063c4:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 80063c8:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80063cc:	4604      	mov	r4, r0
 80063ce:	460f      	mov	r7, r1
 80063d0:	4691      	mov	r9, r2
 80063d2:	d203      	bcs.n	80063dc <__kernel_sinf+0x1c>
 80063d4:	f7fa f9b6 	bl	8000744 <__aeabi_f2iz>
 80063d8:	2800      	cmp	r0, #0
 80063da:	d035      	beq.n	8006448 <__kernel_sinf+0x88>
 80063dc:	4621      	mov	r1, r4
 80063de:	4620      	mov	r0, r4
 80063e0:	f7f9 ffd4 	bl	800038c <__aeabi_fmul>
 80063e4:	4605      	mov	r5, r0
 80063e6:	4601      	mov	r1, r0
 80063e8:	4620      	mov	r0, r4
 80063ea:	f7f9 ffcf 	bl	800038c <__aeabi_fmul>
 80063ee:	4929      	ldr	r1, [pc, #164]	@ (8006494 <__kernel_sinf+0xd4>)
 80063f0:	4606      	mov	r6, r0
 80063f2:	4628      	mov	r0, r5
 80063f4:	f7f9 ffca 	bl	800038c <__aeabi_fmul>
 80063f8:	4927      	ldr	r1, [pc, #156]	@ (8006498 <__kernel_sinf+0xd8>)
 80063fa:	f7f9 febd 	bl	8000178 <__aeabi_fsub>
 80063fe:	4629      	mov	r1, r5
 8006400:	f7f9 ffc4 	bl	800038c <__aeabi_fmul>
 8006404:	4925      	ldr	r1, [pc, #148]	@ (800649c <__kernel_sinf+0xdc>)
 8006406:	f7f9 feb9 	bl	800017c <__addsf3>
 800640a:	4629      	mov	r1, r5
 800640c:	f7f9 ffbe 	bl	800038c <__aeabi_fmul>
 8006410:	4923      	ldr	r1, [pc, #140]	@ (80064a0 <__kernel_sinf+0xe0>)
 8006412:	f7f9 feb1 	bl	8000178 <__aeabi_fsub>
 8006416:	4629      	mov	r1, r5
 8006418:	f7f9 ffb8 	bl	800038c <__aeabi_fmul>
 800641c:	4921      	ldr	r1, [pc, #132]	@ (80064a4 <__kernel_sinf+0xe4>)
 800641e:	f7f9 fead 	bl	800017c <__addsf3>
 8006422:	4680      	mov	r8, r0
 8006424:	f1b9 0f00 	cmp.w	r9, #0
 8006428:	d111      	bne.n	800644e <__kernel_sinf+0x8e>
 800642a:	4601      	mov	r1, r0
 800642c:	4628      	mov	r0, r5
 800642e:	f7f9 ffad 	bl	800038c <__aeabi_fmul>
 8006432:	491d      	ldr	r1, [pc, #116]	@ (80064a8 <__kernel_sinf+0xe8>)
 8006434:	f7f9 fea0 	bl	8000178 <__aeabi_fsub>
 8006438:	4631      	mov	r1, r6
 800643a:	f7f9 ffa7 	bl	800038c <__aeabi_fmul>
 800643e:	4601      	mov	r1, r0
 8006440:	4620      	mov	r0, r4
 8006442:	f7f9 fe9b 	bl	800017c <__addsf3>
 8006446:	4604      	mov	r4, r0
 8006448:	4620      	mov	r0, r4
 800644a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800644e:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8006452:	4638      	mov	r0, r7
 8006454:	f7f9 ff9a 	bl	800038c <__aeabi_fmul>
 8006458:	4641      	mov	r1, r8
 800645a:	4681      	mov	r9, r0
 800645c:	4630      	mov	r0, r6
 800645e:	f7f9 ff95 	bl	800038c <__aeabi_fmul>
 8006462:	4601      	mov	r1, r0
 8006464:	4648      	mov	r0, r9
 8006466:	f7f9 fe87 	bl	8000178 <__aeabi_fsub>
 800646a:	4629      	mov	r1, r5
 800646c:	f7f9 ff8e 	bl	800038c <__aeabi_fmul>
 8006470:	4639      	mov	r1, r7
 8006472:	f7f9 fe81 	bl	8000178 <__aeabi_fsub>
 8006476:	490c      	ldr	r1, [pc, #48]	@ (80064a8 <__kernel_sinf+0xe8>)
 8006478:	4605      	mov	r5, r0
 800647a:	4630      	mov	r0, r6
 800647c:	f7f9 ff86 	bl	800038c <__aeabi_fmul>
 8006480:	4601      	mov	r1, r0
 8006482:	4628      	mov	r0, r5
 8006484:	f7f9 fe7a 	bl	800017c <__addsf3>
 8006488:	4601      	mov	r1, r0
 800648a:	4620      	mov	r0, r4
 800648c:	f7f9 fe74 	bl	8000178 <__aeabi_fsub>
 8006490:	e7d9      	b.n	8006446 <__kernel_sinf+0x86>
 8006492:	bf00      	nop
 8006494:	2f2ec9d3 	.word	0x2f2ec9d3
 8006498:	32d72f34 	.word	0x32d72f34
 800649c:	3638ef1b 	.word	0x3638ef1b
 80064a0:	39500d01 	.word	0x39500d01
 80064a4:	3c088889 	.word	0x3c088889
 80064a8:	3e2aaaab 	.word	0x3e2aaaab

080064ac <__ieee754_powf>:
 80064ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064b0:	f031 4b00 	bics.w	fp, r1, #2147483648	@ 0x80000000
 80064b4:	4681      	mov	r9, r0
 80064b6:	460f      	mov	r7, r1
 80064b8:	4606      	mov	r6, r0
 80064ba:	460c      	mov	r4, r1
 80064bc:	b087      	sub	sp, #28
 80064be:	d10c      	bne.n	80064da <__ieee754_powf+0x2e>
 80064c0:	f480 0680 	eor.w	r6, r0, #4194304	@ 0x400000
 80064c4:	0076      	lsls	r6, r6, #1
 80064c6:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 80064ca:	f240 8310 	bls.w	8006aee <__ieee754_powf+0x642>
 80064ce:	4639      	mov	r1, r7
 80064d0:	4648      	mov	r0, r9
 80064d2:	f7f9 fe53 	bl	800017c <__addsf3>
 80064d6:	4601      	mov	r1, r0
 80064d8:	e043      	b.n	8006562 <__ieee754_powf+0xb6>
 80064da:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 80064de:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 80064e2:	d802      	bhi.n	80064ea <__ieee754_powf+0x3e>
 80064e4:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 80064e8:	d908      	bls.n	80064fc <__ieee754_powf+0x50>
 80064ea:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 80064ee:	d1ee      	bne.n	80064ce <__ieee754_powf+0x22>
 80064f0:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 80064f4:	0064      	lsls	r4, r4, #1
 80064f6:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 80064fa:	e7e6      	b.n	80064ca <__ieee754_powf+0x1e>
 80064fc:	2800      	cmp	r0, #0
 80064fe:	da1f      	bge.n	8006540 <__ieee754_powf+0x94>
 8006500:	f1bb 4f97 	cmp.w	fp, #1266679808	@ 0x4b800000
 8006504:	f080 82f8 	bcs.w	8006af8 <__ieee754_powf+0x64c>
 8006508:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 800650c:	d32f      	bcc.n	800656e <__ieee754_powf+0xc2>
 800650e:	ea4f 53eb 	mov.w	r3, fp, asr #23
 8006512:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8006516:	fa4b f503 	asr.w	r5, fp, r3
 800651a:	fa05 f303 	lsl.w	r3, r5, r3
 800651e:	455b      	cmp	r3, fp
 8006520:	d123      	bne.n	800656a <__ieee754_powf+0xbe>
 8006522:	f005 0501 	and.w	r5, r5, #1
 8006526:	f1c5 0502 	rsb	r5, r5, #2
 800652a:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 800652e:	d11f      	bne.n	8006570 <__ieee754_powf+0xc4>
 8006530:	2c00      	cmp	r4, #0
 8006532:	4649      	mov	r1, r9
 8006534:	da15      	bge.n	8006562 <__ieee754_powf+0xb6>
 8006536:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800653a:	f7f9 ffdb 	bl	80004f4 <__aeabi_fdiv>
 800653e:	e7ca      	b.n	80064d6 <__ieee754_powf+0x2a>
 8006540:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 8006544:	d111      	bne.n	800656a <__ieee754_powf+0xbe>
 8006546:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800654a:	f000 82d0 	beq.w	8006aee <__ieee754_powf+0x642>
 800654e:	d904      	bls.n	800655a <__ieee754_powf+0xae>
 8006550:	2c00      	cmp	r4, #0
 8006552:	f280 82cf 	bge.w	8006af4 <__ieee754_powf+0x648>
 8006556:	2100      	movs	r1, #0
 8006558:	e003      	b.n	8006562 <__ieee754_powf+0xb6>
 800655a:	2c00      	cmp	r4, #0
 800655c:	dafb      	bge.n	8006556 <__ieee754_powf+0xaa>
 800655e:	f107 4100 	add.w	r1, r7, #2147483648	@ 0x80000000
 8006562:	4608      	mov	r0, r1
 8006564:	b007      	add	sp, #28
 8006566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800656a:	2500      	movs	r5, #0
 800656c:	e7dd      	b.n	800652a <__ieee754_powf+0x7e>
 800656e:	2500      	movs	r5, #0
 8006570:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8006574:	d104      	bne.n	8006580 <__ieee754_powf+0xd4>
 8006576:	4649      	mov	r1, r9
 8006578:	4648      	mov	r0, r9
 800657a:	f7f9 ff07 	bl	800038c <__aeabi_fmul>
 800657e:	e7aa      	b.n	80064d6 <__ieee754_powf+0x2a>
 8006580:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8006584:	f040 82bd 	bne.w	8006b02 <__ieee754_powf+0x656>
 8006588:	2e00      	cmp	r6, #0
 800658a:	f2c0 82ba 	blt.w	8006b02 <__ieee754_powf+0x656>
 800658e:	4648      	mov	r0, r9
 8006590:	b007      	add	sp, #28
 8006592:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006596:	f7ff be23 	b.w	80061e0 <__ieee754_sqrtf>
 800659a:	2d01      	cmp	r5, #1
 800659c:	d1e1      	bne.n	8006562 <__ieee754_powf+0xb6>
 800659e:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 80065a2:	e798      	b.n	80064d6 <__ieee754_powf+0x2a>
 80065a4:	0ff3      	lsrs	r3, r6, #31
 80065a6:	3b01      	subs	r3, #1
 80065a8:	9303      	str	r3, [sp, #12]
 80065aa:	432b      	orrs	r3, r5
 80065ac:	d101      	bne.n	80065b2 <__ieee754_powf+0x106>
 80065ae:	4649      	mov	r1, r9
 80065b0:	e2c5      	b.n	8006b3e <__ieee754_powf+0x692>
 80065b2:	f1bb 4f9a 	cmp.w	fp, #1291845632	@ 0x4d000000
 80065b6:	f240 809b 	bls.w	80066f0 <__ieee754_powf+0x244>
 80065ba:	4b46      	ldr	r3, [pc, #280]	@ (80066d4 <__ieee754_powf+0x228>)
 80065bc:	4598      	cmp	r8, r3
 80065be:	d807      	bhi.n	80065d0 <__ieee754_powf+0x124>
 80065c0:	2c00      	cmp	r4, #0
 80065c2:	da0a      	bge.n	80065da <__ieee754_powf+0x12e>
 80065c4:	2000      	movs	r0, #0
 80065c6:	b007      	add	sp, #28
 80065c8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065cc:	f000 bc9d 	b.w	8006f0a <__math_oflowf>
 80065d0:	4b41      	ldr	r3, [pc, #260]	@ (80066d8 <__ieee754_powf+0x22c>)
 80065d2:	4598      	cmp	r8, r3
 80065d4:	d907      	bls.n	80065e6 <__ieee754_powf+0x13a>
 80065d6:	2c00      	cmp	r4, #0
 80065d8:	dcf4      	bgt.n	80065c4 <__ieee754_powf+0x118>
 80065da:	2000      	movs	r0, #0
 80065dc:	b007      	add	sp, #28
 80065de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065e2:	f000 bc8e 	b.w	8006f02 <__math_uflowf>
 80065e6:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80065ea:	f7f9 fdc5 	bl	8000178 <__aeabi_fsub>
 80065ee:	493b      	ldr	r1, [pc, #236]	@ (80066dc <__ieee754_powf+0x230>)
 80065f0:	4606      	mov	r6, r0
 80065f2:	f7f9 fecb 	bl	800038c <__aeabi_fmul>
 80065f6:	493a      	ldr	r1, [pc, #232]	@ (80066e0 <__ieee754_powf+0x234>)
 80065f8:	4680      	mov	r8, r0
 80065fa:	4630      	mov	r0, r6
 80065fc:	f7f9 fec6 	bl	800038c <__aeabi_fmul>
 8006600:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 8006604:	4681      	mov	r9, r0
 8006606:	4630      	mov	r0, r6
 8006608:	f7f9 fec0 	bl	800038c <__aeabi_fmul>
 800660c:	4601      	mov	r1, r0
 800660e:	4835      	ldr	r0, [pc, #212]	@ (80066e4 <__ieee754_powf+0x238>)
 8006610:	f7f9 fdb2 	bl	8000178 <__aeabi_fsub>
 8006614:	4631      	mov	r1, r6
 8006616:	f7f9 feb9 	bl	800038c <__aeabi_fmul>
 800661a:	4601      	mov	r1, r0
 800661c:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 8006620:	f7f9 fdaa 	bl	8000178 <__aeabi_fsub>
 8006624:	4631      	mov	r1, r6
 8006626:	4682      	mov	sl, r0
 8006628:	4630      	mov	r0, r6
 800662a:	f7f9 feaf 	bl	800038c <__aeabi_fmul>
 800662e:	4601      	mov	r1, r0
 8006630:	4650      	mov	r0, sl
 8006632:	f7f9 feab 	bl	800038c <__aeabi_fmul>
 8006636:	492c      	ldr	r1, [pc, #176]	@ (80066e8 <__ieee754_powf+0x23c>)
 8006638:	f7f9 fea8 	bl	800038c <__aeabi_fmul>
 800663c:	4601      	mov	r1, r0
 800663e:	4648      	mov	r0, r9
 8006640:	f7f9 fd9a 	bl	8000178 <__aeabi_fsub>
 8006644:	4601      	mov	r1, r0
 8006646:	4606      	mov	r6, r0
 8006648:	4640      	mov	r0, r8
 800664a:	f7f9 fd97 	bl	800017c <__addsf3>
 800664e:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 8006652:	f02b 0b0f 	bic.w	fp, fp, #15
 8006656:	4641      	mov	r1, r8
 8006658:	4658      	mov	r0, fp
 800665a:	f7f9 fd8d 	bl	8000178 <__aeabi_fsub>
 800665e:	4601      	mov	r1, r0
 8006660:	4630      	mov	r0, r6
 8006662:	f7f9 fd89 	bl	8000178 <__aeabi_fsub>
 8006666:	9b03      	ldr	r3, [sp, #12]
 8006668:	3d01      	subs	r5, #1
 800666a:	f36f 040b 	bfc	r4, #0, #12
 800666e:	431d      	orrs	r5, r3
 8006670:	4606      	mov	r6, r0
 8006672:	4621      	mov	r1, r4
 8006674:	4638      	mov	r0, r7
 8006676:	bf14      	ite	ne
 8006678:	f04f 557e 	movne.w	r5, #1065353216	@ 0x3f800000
 800667c:	4d1b      	ldreq	r5, [pc, #108]	@ (80066ec <__ieee754_powf+0x240>)
 800667e:	f7f9 fd7b 	bl	8000178 <__aeabi_fsub>
 8006682:	4659      	mov	r1, fp
 8006684:	f7f9 fe82 	bl	800038c <__aeabi_fmul>
 8006688:	4639      	mov	r1, r7
 800668a:	4680      	mov	r8, r0
 800668c:	4630      	mov	r0, r6
 800668e:	f7f9 fe7d 	bl	800038c <__aeabi_fmul>
 8006692:	4601      	mov	r1, r0
 8006694:	4640      	mov	r0, r8
 8006696:	f7f9 fd71 	bl	800017c <__addsf3>
 800669a:	4621      	mov	r1, r4
 800669c:	4606      	mov	r6, r0
 800669e:	4658      	mov	r0, fp
 80066a0:	f7f9 fe74 	bl	800038c <__aeabi_fmul>
 80066a4:	4601      	mov	r1, r0
 80066a6:	4607      	mov	r7, r0
 80066a8:	4630      	mov	r0, r6
 80066aa:	f7f9 fd67 	bl	800017c <__addsf3>
 80066ae:	2800      	cmp	r0, #0
 80066b0:	4604      	mov	r4, r0
 80066b2:	4680      	mov	r8, r0
 80066b4:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 80066b8:	f340 813f 	ble.w	800693a <__ieee754_powf+0x48e>
 80066bc:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 80066c0:	f240 8128 	bls.w	8006914 <__ieee754_powf+0x468>
 80066c4:	2100      	movs	r1, #0
 80066c6:	4628      	mov	r0, r5
 80066c8:	f7f9 fffe 	bl	80006c8 <__aeabi_fcmplt>
 80066cc:	3800      	subs	r0, #0
 80066ce:	bf18      	it	ne
 80066d0:	2001      	movne	r0, #1
 80066d2:	e778      	b.n	80065c6 <__ieee754_powf+0x11a>
 80066d4:	3f7ffff3 	.word	0x3f7ffff3
 80066d8:	3f800007 	.word	0x3f800007
 80066dc:	3fb8aa00 	.word	0x3fb8aa00
 80066e0:	36eca570 	.word	0x36eca570
 80066e4:	3eaaaaab 	.word	0x3eaaaaab
 80066e8:	3fb8aa3b 	.word	0x3fb8aa3b
 80066ec:	bf800000 	.word	0xbf800000
 80066f0:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 80066f4:	f040 810a 	bne.w	800690c <__ieee754_powf+0x460>
 80066f8:	f04f 4197 	mov.w	r1, #1266679808	@ 0x4b800000
 80066fc:	f7f9 fe46 	bl	800038c <__aeabi_fmul>
 8006700:	f06f 0217 	mvn.w	r2, #23
 8006704:	4682      	mov	sl, r0
 8006706:	ea4f 53ea 	mov.w	r3, sl, asr #23
 800670a:	3b7f      	subs	r3, #127	@ 0x7f
 800670c:	441a      	add	r2, r3
 800670e:	4b95      	ldr	r3, [pc, #596]	@ (8006964 <__ieee754_powf+0x4b8>)
 8006710:	f3ca 0a16 	ubfx	sl, sl, #0, #23
 8006714:	459a      	cmp	sl, r3
 8006716:	f04a 567e 	orr.w	r6, sl, #1065353216	@ 0x3f800000
 800671a:	dd06      	ble.n	800672a <__ieee754_powf+0x27e>
 800671c:	4b92      	ldr	r3, [pc, #584]	@ (8006968 <__ieee754_powf+0x4bc>)
 800671e:	459a      	cmp	sl, r3
 8006720:	f340 80f6 	ble.w	8006910 <__ieee754_powf+0x464>
 8006724:	3201      	adds	r2, #1
 8006726:	f5a6 0600 	sub.w	r6, r6, #8388608	@ 0x800000
 800672a:	2300      	movs	r3, #0
 800672c:	9301      	str	r3, [sp, #4]
 800672e:	9205      	str	r2, [sp, #20]
 8006730:	4b8e      	ldr	r3, [pc, #568]	@ (800696c <__ieee754_powf+0x4c0>)
 8006732:	9a01      	ldr	r2, [sp, #4]
 8006734:	4630      	mov	r0, r6
 8006736:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 800673a:	46b2      	mov	sl, r6
 800673c:	4659      	mov	r1, fp
 800673e:	f7f9 fd1b 	bl	8000178 <__aeabi_fsub>
 8006742:	4631      	mov	r1, r6
 8006744:	4681      	mov	r9, r0
 8006746:	4658      	mov	r0, fp
 8006748:	f7f9 fd18 	bl	800017c <__addsf3>
 800674c:	4601      	mov	r1, r0
 800674e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8006752:	f7f9 fecf 	bl	80004f4 <__aeabi_fdiv>
 8006756:	4601      	mov	r1, r0
 8006758:	9004      	str	r0, [sp, #16]
 800675a:	4648      	mov	r0, r9
 800675c:	f7f9 fe16 	bl	800038c <__aeabi_fmul>
 8006760:	9002      	str	r0, [sp, #8]
 8006762:	9b02      	ldr	r3, [sp, #8]
 8006764:	1076      	asrs	r6, r6, #1
 8006766:	f36f 030b 	bfc	r3, #0, #12
 800676a:	4698      	mov	r8, r3
 800676c:	f046 5600 	orr.w	r6, r6, #536870912	@ 0x20000000
 8006770:	9b01      	ldr	r3, [sp, #4]
 8006772:	f506 2680 	add.w	r6, r6, #262144	@ 0x40000
 8006776:	eb06 5643 	add.w	r6, r6, r3, lsl #21
 800677a:	4631      	mov	r1, r6
 800677c:	4640      	mov	r0, r8
 800677e:	f7f9 fe05 	bl	800038c <__aeabi_fmul>
 8006782:	4601      	mov	r1, r0
 8006784:	4648      	mov	r0, r9
 8006786:	f7f9 fcf7 	bl	8000178 <__aeabi_fsub>
 800678a:	4659      	mov	r1, fp
 800678c:	4681      	mov	r9, r0
 800678e:	4630      	mov	r0, r6
 8006790:	f7f9 fcf2 	bl	8000178 <__aeabi_fsub>
 8006794:	4601      	mov	r1, r0
 8006796:	4650      	mov	r0, sl
 8006798:	f7f9 fcee 	bl	8000178 <__aeabi_fsub>
 800679c:	4641      	mov	r1, r8
 800679e:	f7f9 fdf5 	bl	800038c <__aeabi_fmul>
 80067a2:	4601      	mov	r1, r0
 80067a4:	4648      	mov	r0, r9
 80067a6:	f7f9 fce7 	bl	8000178 <__aeabi_fsub>
 80067aa:	9b04      	ldr	r3, [sp, #16]
 80067ac:	4619      	mov	r1, r3
 80067ae:	f7f9 fded 	bl	800038c <__aeabi_fmul>
 80067b2:	9902      	ldr	r1, [sp, #8]
 80067b4:	4683      	mov	fp, r0
 80067b6:	4608      	mov	r0, r1
 80067b8:	f7f9 fde8 	bl	800038c <__aeabi_fmul>
 80067bc:	4606      	mov	r6, r0
 80067be:	496c      	ldr	r1, [pc, #432]	@ (8006970 <__ieee754_powf+0x4c4>)
 80067c0:	f7f9 fde4 	bl	800038c <__aeabi_fmul>
 80067c4:	496b      	ldr	r1, [pc, #428]	@ (8006974 <__ieee754_powf+0x4c8>)
 80067c6:	f7f9 fcd9 	bl	800017c <__addsf3>
 80067ca:	4631      	mov	r1, r6
 80067cc:	f7f9 fdde 	bl	800038c <__aeabi_fmul>
 80067d0:	4969      	ldr	r1, [pc, #420]	@ (8006978 <__ieee754_powf+0x4cc>)
 80067d2:	f7f9 fcd3 	bl	800017c <__addsf3>
 80067d6:	4631      	mov	r1, r6
 80067d8:	f7f9 fdd8 	bl	800038c <__aeabi_fmul>
 80067dc:	4967      	ldr	r1, [pc, #412]	@ (800697c <__ieee754_powf+0x4d0>)
 80067de:	f7f9 fccd 	bl	800017c <__addsf3>
 80067e2:	4631      	mov	r1, r6
 80067e4:	f7f9 fdd2 	bl	800038c <__aeabi_fmul>
 80067e8:	4965      	ldr	r1, [pc, #404]	@ (8006980 <__ieee754_powf+0x4d4>)
 80067ea:	f7f9 fcc7 	bl	800017c <__addsf3>
 80067ee:	4631      	mov	r1, r6
 80067f0:	f7f9 fdcc 	bl	800038c <__aeabi_fmul>
 80067f4:	4963      	ldr	r1, [pc, #396]	@ (8006984 <__ieee754_powf+0x4d8>)
 80067f6:	f7f9 fcc1 	bl	800017c <__addsf3>
 80067fa:	4631      	mov	r1, r6
 80067fc:	4681      	mov	r9, r0
 80067fe:	4630      	mov	r0, r6
 8006800:	f7f9 fdc4 	bl	800038c <__aeabi_fmul>
 8006804:	4601      	mov	r1, r0
 8006806:	4648      	mov	r0, r9
 8006808:	f7f9 fdc0 	bl	800038c <__aeabi_fmul>
 800680c:	4606      	mov	r6, r0
 800680e:	4641      	mov	r1, r8
 8006810:	9802      	ldr	r0, [sp, #8]
 8006812:	f7f9 fcb3 	bl	800017c <__addsf3>
 8006816:	4659      	mov	r1, fp
 8006818:	f7f9 fdb8 	bl	800038c <__aeabi_fmul>
 800681c:	4631      	mov	r1, r6
 800681e:	f7f9 fcad 	bl	800017c <__addsf3>
 8006822:	4641      	mov	r1, r8
 8006824:	4681      	mov	r9, r0
 8006826:	4640      	mov	r0, r8
 8006828:	f7f9 fdb0 	bl	800038c <__aeabi_fmul>
 800682c:	4956      	ldr	r1, [pc, #344]	@ (8006988 <__ieee754_powf+0x4dc>)
 800682e:	4682      	mov	sl, r0
 8006830:	f7f9 fca4 	bl	800017c <__addsf3>
 8006834:	4649      	mov	r1, r9
 8006836:	f7f9 fca1 	bl	800017c <__addsf3>
 800683a:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 800683e:	f026 060f 	bic.w	r6, r6, #15
 8006842:	4631      	mov	r1, r6
 8006844:	4640      	mov	r0, r8
 8006846:	f7f9 fda1 	bl	800038c <__aeabi_fmul>
 800684a:	494f      	ldr	r1, [pc, #316]	@ (8006988 <__ieee754_powf+0x4dc>)
 800684c:	4680      	mov	r8, r0
 800684e:	4630      	mov	r0, r6
 8006850:	f7f9 fc92 	bl	8000178 <__aeabi_fsub>
 8006854:	4651      	mov	r1, sl
 8006856:	f7f9 fc8f 	bl	8000178 <__aeabi_fsub>
 800685a:	4601      	mov	r1, r0
 800685c:	4648      	mov	r0, r9
 800685e:	f7f9 fc8b 	bl	8000178 <__aeabi_fsub>
 8006862:	9902      	ldr	r1, [sp, #8]
 8006864:	f7f9 fd92 	bl	800038c <__aeabi_fmul>
 8006868:	4631      	mov	r1, r6
 800686a:	4681      	mov	r9, r0
 800686c:	4658      	mov	r0, fp
 800686e:	f7f9 fd8d 	bl	800038c <__aeabi_fmul>
 8006872:	4601      	mov	r1, r0
 8006874:	4648      	mov	r0, r9
 8006876:	f7f9 fc81 	bl	800017c <__addsf3>
 800687a:	4682      	mov	sl, r0
 800687c:	4601      	mov	r1, r0
 800687e:	4640      	mov	r0, r8
 8006880:	f7f9 fc7c 	bl	800017c <__addsf3>
 8006884:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 8006888:	f026 060f 	bic.w	r6, r6, #15
 800688c:	4630      	mov	r0, r6
 800688e:	493f      	ldr	r1, [pc, #252]	@ (800698c <__ieee754_powf+0x4e0>)
 8006890:	f7f9 fd7c 	bl	800038c <__aeabi_fmul>
 8006894:	4641      	mov	r1, r8
 8006896:	4681      	mov	r9, r0
 8006898:	4630      	mov	r0, r6
 800689a:	f7f9 fc6d 	bl	8000178 <__aeabi_fsub>
 800689e:	4601      	mov	r1, r0
 80068a0:	4650      	mov	r0, sl
 80068a2:	f7f9 fc69 	bl	8000178 <__aeabi_fsub>
 80068a6:	493a      	ldr	r1, [pc, #232]	@ (8006990 <__ieee754_powf+0x4e4>)
 80068a8:	f7f9 fd70 	bl	800038c <__aeabi_fmul>
 80068ac:	4939      	ldr	r1, [pc, #228]	@ (8006994 <__ieee754_powf+0x4e8>)
 80068ae:	4680      	mov	r8, r0
 80068b0:	4630      	mov	r0, r6
 80068b2:	f7f9 fd6b 	bl	800038c <__aeabi_fmul>
 80068b6:	4601      	mov	r1, r0
 80068b8:	4640      	mov	r0, r8
 80068ba:	f7f9 fc5f 	bl	800017c <__addsf3>
 80068be:	4b36      	ldr	r3, [pc, #216]	@ (8006998 <__ieee754_powf+0x4ec>)
 80068c0:	9a01      	ldr	r2, [sp, #4]
 80068c2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80068c6:	f7f9 fc59 	bl	800017c <__addsf3>
 80068ca:	9a05      	ldr	r2, [sp, #20]
 80068cc:	4606      	mov	r6, r0
 80068ce:	4610      	mov	r0, r2
 80068d0:	f7f9 fd08 	bl	80002e4 <__aeabi_i2f>
 80068d4:	4680      	mov	r8, r0
 80068d6:	4b31      	ldr	r3, [pc, #196]	@ (800699c <__ieee754_powf+0x4f0>)
 80068d8:	9a01      	ldr	r2, [sp, #4]
 80068da:	4631      	mov	r1, r6
 80068dc:	f853 a022 	ldr.w	sl, [r3, r2, lsl #2]
 80068e0:	4648      	mov	r0, r9
 80068e2:	f7f9 fc4b 	bl	800017c <__addsf3>
 80068e6:	4651      	mov	r1, sl
 80068e8:	f7f9 fc48 	bl	800017c <__addsf3>
 80068ec:	4641      	mov	r1, r8
 80068ee:	f7f9 fc45 	bl	800017c <__addsf3>
 80068f2:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 80068f6:	f02b 0b0f 	bic.w	fp, fp, #15
 80068fa:	4641      	mov	r1, r8
 80068fc:	4658      	mov	r0, fp
 80068fe:	f7f9 fc3b 	bl	8000178 <__aeabi_fsub>
 8006902:	4651      	mov	r1, sl
 8006904:	f7f9 fc38 	bl	8000178 <__aeabi_fsub>
 8006908:	4649      	mov	r1, r9
 800690a:	e6a6      	b.n	800665a <__ieee754_powf+0x1ae>
 800690c:	2200      	movs	r2, #0
 800690e:	e6fa      	b.n	8006706 <__ieee754_powf+0x25a>
 8006910:	2301      	movs	r3, #1
 8006912:	e70b      	b.n	800672c <__ieee754_powf+0x280>
 8006914:	d148      	bne.n	80069a8 <__ieee754_powf+0x4fc>
 8006916:	4922      	ldr	r1, [pc, #136]	@ (80069a0 <__ieee754_powf+0x4f4>)
 8006918:	4630      	mov	r0, r6
 800691a:	f7f9 fc2f 	bl	800017c <__addsf3>
 800691e:	4639      	mov	r1, r7
 8006920:	4681      	mov	r9, r0
 8006922:	4620      	mov	r0, r4
 8006924:	f7f9 fc28 	bl	8000178 <__aeabi_fsub>
 8006928:	4601      	mov	r1, r0
 800692a:	4648      	mov	r0, r9
 800692c:	f7f9 feea 	bl	8000704 <__aeabi_fcmpgt>
 8006930:	2800      	cmp	r0, #0
 8006932:	f47f aec7 	bne.w	80066c4 <__ieee754_powf+0x218>
 8006936:	2386      	movs	r3, #134	@ 0x86
 8006938:	e03b      	b.n	80069b2 <__ieee754_powf+0x506>
 800693a:	4a1a      	ldr	r2, [pc, #104]	@ (80069a4 <__ieee754_powf+0x4f8>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d907      	bls.n	8006950 <__ieee754_powf+0x4a4>
 8006940:	2100      	movs	r1, #0
 8006942:	4628      	mov	r0, r5
 8006944:	f7f9 fec0 	bl	80006c8 <__aeabi_fcmplt>
 8006948:	3800      	subs	r0, #0
 800694a:	bf18      	it	ne
 800694c:	2001      	movne	r0, #1
 800694e:	e645      	b.n	80065dc <__ieee754_powf+0x130>
 8006950:	d12a      	bne.n	80069a8 <__ieee754_powf+0x4fc>
 8006952:	4639      	mov	r1, r7
 8006954:	f7f9 fc10 	bl	8000178 <__aeabi_fsub>
 8006958:	4631      	mov	r1, r6
 800695a:	f7f9 fec9 	bl	80006f0 <__aeabi_fcmpge>
 800695e:	2800      	cmp	r0, #0
 8006960:	d0e9      	beq.n	8006936 <__ieee754_powf+0x48a>
 8006962:	e7ed      	b.n	8006940 <__ieee754_powf+0x494>
 8006964:	001cc471 	.word	0x001cc471
 8006968:	005db3d6 	.word	0x005db3d6
 800696c:	0800788c 	.word	0x0800788c
 8006970:	3e53f142 	.word	0x3e53f142
 8006974:	3e6c3255 	.word	0x3e6c3255
 8006978:	3e8ba305 	.word	0x3e8ba305
 800697c:	3eaaaaab 	.word	0x3eaaaaab
 8006980:	3edb6db7 	.word	0x3edb6db7
 8006984:	3f19999a 	.word	0x3f19999a
 8006988:	40400000 	.word	0x40400000
 800698c:	3f763800 	.word	0x3f763800
 8006990:	3f76384f 	.word	0x3f76384f
 8006994:	369dc3a0 	.word	0x369dc3a0
 8006998:	0800787c 	.word	0x0800787c
 800699c:	08007884 	.word	0x08007884
 80069a0:	3338aa3c 	.word	0x3338aa3c
 80069a4:	43160000 	.word	0x43160000
 80069a8:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 80069ac:	f240 809b 	bls.w	8006ae6 <__ieee754_powf+0x63a>
 80069b0:	15db      	asrs	r3, r3, #23
 80069b2:	f44f 0400 	mov.w	r4, #8388608	@ 0x800000
 80069b6:	3b7e      	subs	r3, #126	@ 0x7e
 80069b8:	411c      	asrs	r4, r3
 80069ba:	4444      	add	r4, r8
 80069bc:	f3c4 53c7 	ubfx	r3, r4, #23, #8
 80069c0:	4961      	ldr	r1, [pc, #388]	@ (8006b48 <__ieee754_powf+0x69c>)
 80069c2:	3b7f      	subs	r3, #127	@ 0x7f
 80069c4:	4119      	asrs	r1, r3
 80069c6:	4021      	ands	r1, r4
 80069c8:	f3c4 0416 	ubfx	r4, r4, #0, #23
 80069cc:	f1c3 0317 	rsb	r3, r3, #23
 80069d0:	f444 0400 	orr.w	r4, r4, #8388608	@ 0x800000
 80069d4:	4638      	mov	r0, r7
 80069d6:	411c      	asrs	r4, r3
 80069d8:	f1b8 0f00 	cmp.w	r8, #0
 80069dc:	bfb8      	it	lt
 80069de:	4264      	neglt	r4, r4
 80069e0:	f7f9 fbca 	bl	8000178 <__aeabi_fsub>
 80069e4:	4607      	mov	r7, r0
 80069e6:	4631      	mov	r1, r6
 80069e8:	4638      	mov	r0, r7
 80069ea:	f7f9 fbc7 	bl	800017c <__addsf3>
 80069ee:	f420 687f 	bic.w	r8, r0, #4080	@ 0xff0
 80069f2:	f028 080f 	bic.w	r8, r8, #15
 80069f6:	4640      	mov	r0, r8
 80069f8:	4954      	ldr	r1, [pc, #336]	@ (8006b4c <__ieee754_powf+0x6a0>)
 80069fa:	f7f9 fcc7 	bl	800038c <__aeabi_fmul>
 80069fe:	4639      	mov	r1, r7
 8006a00:	4681      	mov	r9, r0
 8006a02:	4640      	mov	r0, r8
 8006a04:	f7f9 fbb8 	bl	8000178 <__aeabi_fsub>
 8006a08:	4601      	mov	r1, r0
 8006a0a:	4630      	mov	r0, r6
 8006a0c:	f7f9 fbb4 	bl	8000178 <__aeabi_fsub>
 8006a10:	494f      	ldr	r1, [pc, #316]	@ (8006b50 <__ieee754_powf+0x6a4>)
 8006a12:	f7f9 fcbb 	bl	800038c <__aeabi_fmul>
 8006a16:	494f      	ldr	r1, [pc, #316]	@ (8006b54 <__ieee754_powf+0x6a8>)
 8006a18:	4606      	mov	r6, r0
 8006a1a:	4640      	mov	r0, r8
 8006a1c:	f7f9 fcb6 	bl	800038c <__aeabi_fmul>
 8006a20:	4601      	mov	r1, r0
 8006a22:	4630      	mov	r0, r6
 8006a24:	f7f9 fbaa 	bl	800017c <__addsf3>
 8006a28:	4607      	mov	r7, r0
 8006a2a:	4601      	mov	r1, r0
 8006a2c:	4648      	mov	r0, r9
 8006a2e:	f7f9 fba5 	bl	800017c <__addsf3>
 8006a32:	4649      	mov	r1, r9
 8006a34:	4606      	mov	r6, r0
 8006a36:	f7f9 fb9f 	bl	8000178 <__aeabi_fsub>
 8006a3a:	4601      	mov	r1, r0
 8006a3c:	4638      	mov	r0, r7
 8006a3e:	f7f9 fb9b 	bl	8000178 <__aeabi_fsub>
 8006a42:	4631      	mov	r1, r6
 8006a44:	4680      	mov	r8, r0
 8006a46:	4630      	mov	r0, r6
 8006a48:	f7f9 fca0 	bl	800038c <__aeabi_fmul>
 8006a4c:	4607      	mov	r7, r0
 8006a4e:	4942      	ldr	r1, [pc, #264]	@ (8006b58 <__ieee754_powf+0x6ac>)
 8006a50:	f7f9 fc9c 	bl	800038c <__aeabi_fmul>
 8006a54:	4941      	ldr	r1, [pc, #260]	@ (8006b5c <__ieee754_powf+0x6b0>)
 8006a56:	f7f9 fb8f 	bl	8000178 <__aeabi_fsub>
 8006a5a:	4639      	mov	r1, r7
 8006a5c:	f7f9 fc96 	bl	800038c <__aeabi_fmul>
 8006a60:	493f      	ldr	r1, [pc, #252]	@ (8006b60 <__ieee754_powf+0x6b4>)
 8006a62:	f7f9 fb8b 	bl	800017c <__addsf3>
 8006a66:	4639      	mov	r1, r7
 8006a68:	f7f9 fc90 	bl	800038c <__aeabi_fmul>
 8006a6c:	493d      	ldr	r1, [pc, #244]	@ (8006b64 <__ieee754_powf+0x6b8>)
 8006a6e:	f7f9 fb83 	bl	8000178 <__aeabi_fsub>
 8006a72:	4639      	mov	r1, r7
 8006a74:	f7f9 fc8a 	bl	800038c <__aeabi_fmul>
 8006a78:	493b      	ldr	r1, [pc, #236]	@ (8006b68 <__ieee754_powf+0x6bc>)
 8006a7a:	f7f9 fb7f 	bl	800017c <__addsf3>
 8006a7e:	4639      	mov	r1, r7
 8006a80:	f7f9 fc84 	bl	800038c <__aeabi_fmul>
 8006a84:	4601      	mov	r1, r0
 8006a86:	4630      	mov	r0, r6
 8006a88:	f7f9 fb76 	bl	8000178 <__aeabi_fsub>
 8006a8c:	4607      	mov	r7, r0
 8006a8e:	4601      	mov	r1, r0
 8006a90:	4630      	mov	r0, r6
 8006a92:	f7f9 fc7b 	bl	800038c <__aeabi_fmul>
 8006a96:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8006a9a:	4681      	mov	r9, r0
 8006a9c:	4638      	mov	r0, r7
 8006a9e:	f7f9 fb6b 	bl	8000178 <__aeabi_fsub>
 8006aa2:	4601      	mov	r1, r0
 8006aa4:	4648      	mov	r0, r9
 8006aa6:	f7f9 fd25 	bl	80004f4 <__aeabi_fdiv>
 8006aaa:	4641      	mov	r1, r8
 8006aac:	4607      	mov	r7, r0
 8006aae:	4630      	mov	r0, r6
 8006ab0:	f7f9 fc6c 	bl	800038c <__aeabi_fmul>
 8006ab4:	4641      	mov	r1, r8
 8006ab6:	f7f9 fb61 	bl	800017c <__addsf3>
 8006aba:	4601      	mov	r1, r0
 8006abc:	4638      	mov	r0, r7
 8006abe:	f7f9 fb5b 	bl	8000178 <__aeabi_fsub>
 8006ac2:	4631      	mov	r1, r6
 8006ac4:	f7f9 fb58 	bl	8000178 <__aeabi_fsub>
 8006ac8:	4601      	mov	r1, r0
 8006aca:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8006ace:	f7f9 fb53 	bl	8000178 <__aeabi_fsub>
 8006ad2:	eb00 53c4 	add.w	r3, r0, r4, lsl #23
 8006ad6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006ada:	da06      	bge.n	8006aea <__ieee754_powf+0x63e>
 8006adc:	4621      	mov	r1, r4
 8006ade:	f000 f9af 	bl	8006e40 <scalbnf>
 8006ae2:	4629      	mov	r1, r5
 8006ae4:	e549      	b.n	800657a <__ieee754_powf+0xce>
 8006ae6:	2400      	movs	r4, #0
 8006ae8:	e77d      	b.n	80069e6 <__ieee754_powf+0x53a>
 8006aea:	4618      	mov	r0, r3
 8006aec:	e7f9      	b.n	8006ae2 <__ieee754_powf+0x636>
 8006aee:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8006af2:	e536      	b.n	8006562 <__ieee754_powf+0xb6>
 8006af4:	4639      	mov	r1, r7
 8006af6:	e534      	b.n	8006562 <__ieee754_powf+0xb6>
 8006af8:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 8006afc:	f43f ad23 	beq.w	8006546 <__ieee754_powf+0x9a>
 8006b00:	2502      	movs	r5, #2
 8006b02:	4648      	mov	r0, r9
 8006b04:	f000 f998 	bl	8006e38 <fabsf>
 8006b08:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8006b0c:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8006b10:	46c2      	mov	sl, r8
 8006b12:	4601      	mov	r1, r0
 8006b14:	d003      	beq.n	8006b1e <__ieee754_powf+0x672>
 8006b16:	f1b8 0f00 	cmp.w	r8, #0
 8006b1a:	f47f ad43 	bne.w	80065a4 <__ieee754_powf+0xf8>
 8006b1e:	2c00      	cmp	r4, #0
 8006b20:	da04      	bge.n	8006b2c <__ieee754_powf+0x680>
 8006b22:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8006b26:	f7f9 fce5 	bl	80004f4 <__aeabi_fdiv>
 8006b2a:	4601      	mov	r1, r0
 8006b2c:	2e00      	cmp	r6, #0
 8006b2e:	f6bf ad18 	bge.w	8006562 <__ieee754_powf+0xb6>
 8006b32:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8006b36:	ea58 0805 	orrs.w	r8, r8, r5
 8006b3a:	f47f ad2e 	bne.w	800659a <__ieee754_powf+0xee>
 8006b3e:	4608      	mov	r0, r1
 8006b40:	f7f9 fb1a 	bl	8000178 <__aeabi_fsub>
 8006b44:	4601      	mov	r1, r0
 8006b46:	e4f8      	b.n	800653a <__ieee754_powf+0x8e>
 8006b48:	ff800000 	.word	0xff800000
 8006b4c:	3f317200 	.word	0x3f317200
 8006b50:	3f317218 	.word	0x3f317218
 8006b54:	35bfbe8c 	.word	0x35bfbe8c
 8006b58:	3331bb4c 	.word	0x3331bb4c
 8006b5c:	35ddea0e 	.word	0x35ddea0e
 8006b60:	388ab355 	.word	0x388ab355
 8006b64:	3b360b61 	.word	0x3b360b61
 8006b68:	3e2aaaab 	.word	0x3e2aaaab

08006b6c <__ieee754_rem_pio2f>:
 8006b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b70:	4aa4      	ldr	r2, [pc, #656]	@ (8006e04 <__ieee754_rem_pio2f+0x298>)
 8006b72:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 8006b76:	4590      	cmp	r8, r2
 8006b78:	460c      	mov	r4, r1
 8006b7a:	4682      	mov	sl, r0
 8006b7c:	b087      	sub	sp, #28
 8006b7e:	d804      	bhi.n	8006b8a <__ieee754_rem_pio2f+0x1e>
 8006b80:	2300      	movs	r3, #0
 8006b82:	6008      	str	r0, [r1, #0]
 8006b84:	604b      	str	r3, [r1, #4]
 8006b86:	2500      	movs	r5, #0
 8006b88:	e01d      	b.n	8006bc6 <__ieee754_rem_pio2f+0x5a>
 8006b8a:	4a9f      	ldr	r2, [pc, #636]	@ (8006e08 <__ieee754_rem_pio2f+0x29c>)
 8006b8c:	4590      	cmp	r8, r2
 8006b8e:	d84f      	bhi.n	8006c30 <__ieee754_rem_pio2f+0xc4>
 8006b90:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 8006b94:	2800      	cmp	r0, #0
 8006b96:	499d      	ldr	r1, [pc, #628]	@ (8006e0c <__ieee754_rem_pio2f+0x2a0>)
 8006b98:	4f9d      	ldr	r7, [pc, #628]	@ (8006e10 <__ieee754_rem_pio2f+0x2a4>)
 8006b9a:	f025 050f 	bic.w	r5, r5, #15
 8006b9e:	dd24      	ble.n	8006bea <__ieee754_rem_pio2f+0x7e>
 8006ba0:	f7f9 faea 	bl	8000178 <__aeabi_fsub>
 8006ba4:	42bd      	cmp	r5, r7
 8006ba6:	4606      	mov	r6, r0
 8006ba8:	d011      	beq.n	8006bce <__ieee754_rem_pio2f+0x62>
 8006baa:	499a      	ldr	r1, [pc, #616]	@ (8006e14 <__ieee754_rem_pio2f+0x2a8>)
 8006bac:	f7f9 fae4 	bl	8000178 <__aeabi_fsub>
 8006bb0:	4601      	mov	r1, r0
 8006bb2:	4605      	mov	r5, r0
 8006bb4:	4630      	mov	r0, r6
 8006bb6:	f7f9 fadf 	bl	8000178 <__aeabi_fsub>
 8006bba:	4996      	ldr	r1, [pc, #600]	@ (8006e14 <__ieee754_rem_pio2f+0x2a8>)
 8006bbc:	f7f9 fadc 	bl	8000178 <__aeabi_fsub>
 8006bc0:	6025      	str	r5, [r4, #0]
 8006bc2:	2501      	movs	r5, #1
 8006bc4:	6060      	str	r0, [r4, #4]
 8006bc6:	4628      	mov	r0, r5
 8006bc8:	b007      	add	sp, #28
 8006bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bce:	4992      	ldr	r1, [pc, #584]	@ (8006e18 <__ieee754_rem_pio2f+0x2ac>)
 8006bd0:	f7f9 fad2 	bl	8000178 <__aeabi_fsub>
 8006bd4:	4991      	ldr	r1, [pc, #580]	@ (8006e1c <__ieee754_rem_pio2f+0x2b0>)
 8006bd6:	4606      	mov	r6, r0
 8006bd8:	f7f9 face 	bl	8000178 <__aeabi_fsub>
 8006bdc:	4601      	mov	r1, r0
 8006bde:	4605      	mov	r5, r0
 8006be0:	4630      	mov	r0, r6
 8006be2:	f7f9 fac9 	bl	8000178 <__aeabi_fsub>
 8006be6:	498d      	ldr	r1, [pc, #564]	@ (8006e1c <__ieee754_rem_pio2f+0x2b0>)
 8006be8:	e7e8      	b.n	8006bbc <__ieee754_rem_pio2f+0x50>
 8006bea:	f7f9 fac7 	bl	800017c <__addsf3>
 8006bee:	42bd      	cmp	r5, r7
 8006bf0:	4606      	mov	r6, r0
 8006bf2:	d00f      	beq.n	8006c14 <__ieee754_rem_pio2f+0xa8>
 8006bf4:	4987      	ldr	r1, [pc, #540]	@ (8006e14 <__ieee754_rem_pio2f+0x2a8>)
 8006bf6:	f7f9 fac1 	bl	800017c <__addsf3>
 8006bfa:	4601      	mov	r1, r0
 8006bfc:	4605      	mov	r5, r0
 8006bfe:	4630      	mov	r0, r6
 8006c00:	f7f9 faba 	bl	8000178 <__aeabi_fsub>
 8006c04:	4983      	ldr	r1, [pc, #524]	@ (8006e14 <__ieee754_rem_pio2f+0x2a8>)
 8006c06:	f7f9 fab9 	bl	800017c <__addsf3>
 8006c0a:	6025      	str	r5, [r4, #0]
 8006c0c:	6060      	str	r0, [r4, #4]
 8006c0e:	f04f 35ff 	mov.w	r5, #4294967295
 8006c12:	e7d8      	b.n	8006bc6 <__ieee754_rem_pio2f+0x5a>
 8006c14:	4980      	ldr	r1, [pc, #512]	@ (8006e18 <__ieee754_rem_pio2f+0x2ac>)
 8006c16:	f7f9 fab1 	bl	800017c <__addsf3>
 8006c1a:	4980      	ldr	r1, [pc, #512]	@ (8006e1c <__ieee754_rem_pio2f+0x2b0>)
 8006c1c:	4606      	mov	r6, r0
 8006c1e:	f7f9 faad 	bl	800017c <__addsf3>
 8006c22:	4601      	mov	r1, r0
 8006c24:	4605      	mov	r5, r0
 8006c26:	4630      	mov	r0, r6
 8006c28:	f7f9 faa6 	bl	8000178 <__aeabi_fsub>
 8006c2c:	497b      	ldr	r1, [pc, #492]	@ (8006e1c <__ieee754_rem_pio2f+0x2b0>)
 8006c2e:	e7ea      	b.n	8006c06 <__ieee754_rem_pio2f+0x9a>
 8006c30:	4a7b      	ldr	r2, [pc, #492]	@ (8006e20 <__ieee754_rem_pio2f+0x2b4>)
 8006c32:	4590      	cmp	r8, r2
 8006c34:	f200 8095 	bhi.w	8006d62 <__ieee754_rem_pio2f+0x1f6>
 8006c38:	f000 f8fe 	bl	8006e38 <fabsf>
 8006c3c:	4979      	ldr	r1, [pc, #484]	@ (8006e24 <__ieee754_rem_pio2f+0x2b8>)
 8006c3e:	4606      	mov	r6, r0
 8006c40:	f7f9 fba4 	bl	800038c <__aeabi_fmul>
 8006c44:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8006c48:	f7f9 fa98 	bl	800017c <__addsf3>
 8006c4c:	f7f9 fd7a 	bl	8000744 <__aeabi_f2iz>
 8006c50:	4605      	mov	r5, r0
 8006c52:	f7f9 fb47 	bl	80002e4 <__aeabi_i2f>
 8006c56:	496d      	ldr	r1, [pc, #436]	@ (8006e0c <__ieee754_rem_pio2f+0x2a0>)
 8006c58:	4681      	mov	r9, r0
 8006c5a:	f7f9 fb97 	bl	800038c <__aeabi_fmul>
 8006c5e:	4601      	mov	r1, r0
 8006c60:	4630      	mov	r0, r6
 8006c62:	f7f9 fa89 	bl	8000178 <__aeabi_fsub>
 8006c66:	496b      	ldr	r1, [pc, #428]	@ (8006e14 <__ieee754_rem_pio2f+0x2a8>)
 8006c68:	4607      	mov	r7, r0
 8006c6a:	4648      	mov	r0, r9
 8006c6c:	f7f9 fb8e 	bl	800038c <__aeabi_fmul>
 8006c70:	2d1f      	cmp	r5, #31
 8006c72:	4606      	mov	r6, r0
 8006c74:	dc0e      	bgt.n	8006c94 <__ieee754_rem_pio2f+0x128>
 8006c76:	4a6c      	ldr	r2, [pc, #432]	@ (8006e28 <__ieee754_rem_pio2f+0x2bc>)
 8006c78:	1e69      	subs	r1, r5, #1
 8006c7a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8006c7e:	f02a 4300 	bic.w	r3, sl, #2147483648	@ 0x80000000
 8006c82:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d004      	beq.n	8006c94 <__ieee754_rem_pio2f+0x128>
 8006c8a:	4631      	mov	r1, r6
 8006c8c:	4638      	mov	r0, r7
 8006c8e:	f7f9 fa73 	bl	8000178 <__aeabi_fsub>
 8006c92:	e00b      	b.n	8006cac <__ieee754_rem_pio2f+0x140>
 8006c94:	4631      	mov	r1, r6
 8006c96:	4638      	mov	r0, r7
 8006c98:	f7f9 fa6e 	bl	8000178 <__aeabi_fsub>
 8006c9c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8006ca0:	ebc3 53d8 	rsb	r3, r3, r8, lsr #23
 8006ca4:	2b08      	cmp	r3, #8
 8006ca6:	ea4f 5be8 	mov.w	fp, r8, asr #23
 8006caa:	dc01      	bgt.n	8006cb0 <__ieee754_rem_pio2f+0x144>
 8006cac:	6020      	str	r0, [r4, #0]
 8006cae:	e026      	b.n	8006cfe <__ieee754_rem_pio2f+0x192>
 8006cb0:	4959      	ldr	r1, [pc, #356]	@ (8006e18 <__ieee754_rem_pio2f+0x2ac>)
 8006cb2:	4648      	mov	r0, r9
 8006cb4:	f7f9 fb6a 	bl	800038c <__aeabi_fmul>
 8006cb8:	4606      	mov	r6, r0
 8006cba:	4601      	mov	r1, r0
 8006cbc:	4638      	mov	r0, r7
 8006cbe:	f7f9 fa5b 	bl	8000178 <__aeabi_fsub>
 8006cc2:	4601      	mov	r1, r0
 8006cc4:	4680      	mov	r8, r0
 8006cc6:	4638      	mov	r0, r7
 8006cc8:	f7f9 fa56 	bl	8000178 <__aeabi_fsub>
 8006ccc:	4631      	mov	r1, r6
 8006cce:	f7f9 fa53 	bl	8000178 <__aeabi_fsub>
 8006cd2:	4606      	mov	r6, r0
 8006cd4:	4951      	ldr	r1, [pc, #324]	@ (8006e1c <__ieee754_rem_pio2f+0x2b0>)
 8006cd6:	4648      	mov	r0, r9
 8006cd8:	f7f9 fb58 	bl	800038c <__aeabi_fmul>
 8006cdc:	4631      	mov	r1, r6
 8006cde:	f7f9 fa4b 	bl	8000178 <__aeabi_fsub>
 8006ce2:	4601      	mov	r1, r0
 8006ce4:	4606      	mov	r6, r0
 8006ce6:	4640      	mov	r0, r8
 8006ce8:	f7f9 fa46 	bl	8000178 <__aeabi_fsub>
 8006cec:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8006cf0:	ebab 0b03 	sub.w	fp, fp, r3
 8006cf4:	f1bb 0f19 	cmp.w	fp, #25
 8006cf8:	dc18      	bgt.n	8006d2c <__ieee754_rem_pio2f+0x1c0>
 8006cfa:	4647      	mov	r7, r8
 8006cfc:	6020      	str	r0, [r4, #0]
 8006cfe:	f8d4 8000 	ldr.w	r8, [r4]
 8006d02:	4638      	mov	r0, r7
 8006d04:	4641      	mov	r1, r8
 8006d06:	f7f9 fa37 	bl	8000178 <__aeabi_fsub>
 8006d0a:	4631      	mov	r1, r6
 8006d0c:	f7f9 fa34 	bl	8000178 <__aeabi_fsub>
 8006d10:	f1ba 0f00 	cmp.w	sl, #0
 8006d14:	6060      	str	r0, [r4, #4]
 8006d16:	f6bf af56 	bge.w	8006bc6 <__ieee754_rem_pio2f+0x5a>
 8006d1a:	f108 4800 	add.w	r8, r8, #2147483648	@ 0x80000000
 8006d1e:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8006d22:	f8c4 8000 	str.w	r8, [r4]
 8006d26:	6060      	str	r0, [r4, #4]
 8006d28:	426d      	negs	r5, r5
 8006d2a:	e74c      	b.n	8006bc6 <__ieee754_rem_pio2f+0x5a>
 8006d2c:	493f      	ldr	r1, [pc, #252]	@ (8006e2c <__ieee754_rem_pio2f+0x2c0>)
 8006d2e:	4648      	mov	r0, r9
 8006d30:	f7f9 fb2c 	bl	800038c <__aeabi_fmul>
 8006d34:	4606      	mov	r6, r0
 8006d36:	4601      	mov	r1, r0
 8006d38:	4640      	mov	r0, r8
 8006d3a:	f7f9 fa1d 	bl	8000178 <__aeabi_fsub>
 8006d3e:	4601      	mov	r1, r0
 8006d40:	4607      	mov	r7, r0
 8006d42:	4640      	mov	r0, r8
 8006d44:	f7f9 fa18 	bl	8000178 <__aeabi_fsub>
 8006d48:	4631      	mov	r1, r6
 8006d4a:	f7f9 fa15 	bl	8000178 <__aeabi_fsub>
 8006d4e:	4606      	mov	r6, r0
 8006d50:	4937      	ldr	r1, [pc, #220]	@ (8006e30 <__ieee754_rem_pio2f+0x2c4>)
 8006d52:	4648      	mov	r0, r9
 8006d54:	f7f9 fb1a 	bl	800038c <__aeabi_fmul>
 8006d58:	4631      	mov	r1, r6
 8006d5a:	f7f9 fa0d 	bl	8000178 <__aeabi_fsub>
 8006d5e:	4606      	mov	r6, r0
 8006d60:	e793      	b.n	8006c8a <__ieee754_rem_pio2f+0x11e>
 8006d62:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8006d66:	d305      	bcc.n	8006d74 <__ieee754_rem_pio2f+0x208>
 8006d68:	4601      	mov	r1, r0
 8006d6a:	f7f9 fa05 	bl	8000178 <__aeabi_fsub>
 8006d6e:	6060      	str	r0, [r4, #4]
 8006d70:	6020      	str	r0, [r4, #0]
 8006d72:	e708      	b.n	8006b86 <__ieee754_rem_pio2f+0x1a>
 8006d74:	ea4f 56e8 	mov.w	r6, r8, asr #23
 8006d78:	3e86      	subs	r6, #134	@ 0x86
 8006d7a:	eba8 58c6 	sub.w	r8, r8, r6, lsl #23
 8006d7e:	4640      	mov	r0, r8
 8006d80:	f7f9 fce0 	bl	8000744 <__aeabi_f2iz>
 8006d84:	f7f9 faae 	bl	80002e4 <__aeabi_i2f>
 8006d88:	4601      	mov	r1, r0
 8006d8a:	9003      	str	r0, [sp, #12]
 8006d8c:	4640      	mov	r0, r8
 8006d8e:	f7f9 f9f3 	bl	8000178 <__aeabi_fsub>
 8006d92:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8006d96:	f7f9 faf9 	bl	800038c <__aeabi_fmul>
 8006d9a:	4607      	mov	r7, r0
 8006d9c:	f7f9 fcd2 	bl	8000744 <__aeabi_f2iz>
 8006da0:	f7f9 faa0 	bl	80002e4 <__aeabi_i2f>
 8006da4:	4601      	mov	r1, r0
 8006da6:	9004      	str	r0, [sp, #16]
 8006da8:	4605      	mov	r5, r0
 8006daa:	4638      	mov	r0, r7
 8006dac:	f7f9 f9e4 	bl	8000178 <__aeabi_fsub>
 8006db0:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8006db4:	f7f9 faea 	bl	800038c <__aeabi_fmul>
 8006db8:	2100      	movs	r1, #0
 8006dba:	9005      	str	r0, [sp, #20]
 8006dbc:	f7f9 fc7a 	bl	80006b4 <__aeabi_fcmpeq>
 8006dc0:	b1f0      	cbz	r0, 8006e00 <__ieee754_rem_pio2f+0x294>
 8006dc2:	2100      	movs	r1, #0
 8006dc4:	4628      	mov	r0, r5
 8006dc6:	f7f9 fc75 	bl	80006b4 <__aeabi_fcmpeq>
 8006dca:	2800      	cmp	r0, #0
 8006dcc:	bf14      	ite	ne
 8006dce:	2301      	movne	r3, #1
 8006dd0:	2302      	moveq	r3, #2
 8006dd2:	4a18      	ldr	r2, [pc, #96]	@ (8006e34 <__ieee754_rem_pio2f+0x2c8>)
 8006dd4:	4621      	mov	r1, r4
 8006dd6:	9201      	str	r2, [sp, #4]
 8006dd8:	2202      	movs	r2, #2
 8006dda:	a803      	add	r0, sp, #12
 8006ddc:	9200      	str	r2, [sp, #0]
 8006dde:	4632      	mov	r2, r6
 8006de0:	f000 f898 	bl	8006f14 <__kernel_rem_pio2f>
 8006de4:	f1ba 0f00 	cmp.w	sl, #0
 8006de8:	4605      	mov	r5, r0
 8006dea:	f6bf aeec 	bge.w	8006bc6 <__ieee754_rem_pio2f+0x5a>
 8006dee:	6823      	ldr	r3, [r4, #0]
 8006df0:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8006df4:	6023      	str	r3, [r4, #0]
 8006df6:	6863      	ldr	r3, [r4, #4]
 8006df8:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8006dfc:	6063      	str	r3, [r4, #4]
 8006dfe:	e793      	b.n	8006d28 <__ieee754_rem_pio2f+0x1bc>
 8006e00:	2303      	movs	r3, #3
 8006e02:	e7e6      	b.n	8006dd2 <__ieee754_rem_pio2f+0x266>
 8006e04:	3f490fd8 	.word	0x3f490fd8
 8006e08:	4016cbe3 	.word	0x4016cbe3
 8006e0c:	3fc90f80 	.word	0x3fc90f80
 8006e10:	3fc90fd0 	.word	0x3fc90fd0
 8006e14:	37354443 	.word	0x37354443
 8006e18:	37354400 	.word	0x37354400
 8006e1c:	2e85a308 	.word	0x2e85a308
 8006e20:	43490f80 	.word	0x43490f80
 8006e24:	3f22f984 	.word	0x3f22f984
 8006e28:	08007894 	.word	0x08007894
 8006e2c:	2e85a300 	.word	0x2e85a300
 8006e30:	248d3132 	.word	0x248d3132
 8006e34:	08007914 	.word	0x08007914

08006e38 <fabsf>:
 8006e38:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8006e3c:	4770      	bx	lr
	...

08006e40 <scalbnf>:
 8006e40:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8006e44:	b538      	push	{r3, r4, r5, lr}
 8006e46:	4603      	mov	r3, r0
 8006e48:	460d      	mov	r5, r1
 8006e4a:	4604      	mov	r4, r0
 8006e4c:	d02e      	beq.n	8006eac <scalbnf+0x6c>
 8006e4e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8006e52:	d304      	bcc.n	8006e5e <scalbnf+0x1e>
 8006e54:	4601      	mov	r1, r0
 8006e56:	f7f9 f991 	bl	800017c <__addsf3>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	e026      	b.n	8006eac <scalbnf+0x6c>
 8006e5e:	f010 4fff 	tst.w	r0, #2139095040	@ 0x7f800000
 8006e62:	d118      	bne.n	8006e96 <scalbnf+0x56>
 8006e64:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
 8006e68:	f7f9 fa90 	bl	800038c <__aeabi_fmul>
 8006e6c:	4a17      	ldr	r2, [pc, #92]	@ (8006ecc <scalbnf+0x8c>)
 8006e6e:	4603      	mov	r3, r0
 8006e70:	4295      	cmp	r5, r2
 8006e72:	db0c      	blt.n	8006e8e <scalbnf+0x4e>
 8006e74:	4604      	mov	r4, r0
 8006e76:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8006e7a:	3a19      	subs	r2, #25
 8006e7c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8006e80:	428d      	cmp	r5, r1
 8006e82:	dd0a      	ble.n	8006e9a <scalbnf+0x5a>
 8006e84:	4912      	ldr	r1, [pc, #72]	@ (8006ed0 <scalbnf+0x90>)
 8006e86:	4618      	mov	r0, r3
 8006e88:	f361 001e 	bfi	r0, r1, #0, #31
 8006e8c:	e000      	b.n	8006e90 <scalbnf+0x50>
 8006e8e:	4911      	ldr	r1, [pc, #68]	@ (8006ed4 <scalbnf+0x94>)
 8006e90:	f7f9 fa7c 	bl	800038c <__aeabi_fmul>
 8006e94:	e7e1      	b.n	8006e5a <scalbnf+0x1a>
 8006e96:	0dd2      	lsrs	r2, r2, #23
 8006e98:	e7f0      	b.n	8006e7c <scalbnf+0x3c>
 8006e9a:	1951      	adds	r1, r2, r5
 8006e9c:	29fe      	cmp	r1, #254	@ 0xfe
 8006e9e:	dcf1      	bgt.n	8006e84 <scalbnf+0x44>
 8006ea0:	2900      	cmp	r1, #0
 8006ea2:	dd05      	ble.n	8006eb0 <scalbnf+0x70>
 8006ea4:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 8006ea8:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 8006eac:	4618      	mov	r0, r3
 8006eae:	bd38      	pop	{r3, r4, r5, pc}
 8006eb0:	f111 0f16 	cmn.w	r1, #22
 8006eb4:	da01      	bge.n	8006eba <scalbnf+0x7a>
 8006eb6:	4907      	ldr	r1, [pc, #28]	@ (8006ed4 <scalbnf+0x94>)
 8006eb8:	e7e5      	b.n	8006e86 <scalbnf+0x46>
 8006eba:	f101 0019 	add.w	r0, r1, #25
 8006ebe:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 8006ec2:	f04f 514c 	mov.w	r1, #855638016	@ 0x33000000
 8006ec6:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 8006eca:	e7e1      	b.n	8006e90 <scalbnf+0x50>
 8006ecc:	ffff3cb0 	.word	0xffff3cb0
 8006ed0:	7149f2ca 	.word	0x7149f2ca
 8006ed4:	0da24260 	.word	0x0da24260

08006ed8 <with_errnof>:
 8006ed8:	b538      	push	{r3, r4, r5, lr}
 8006eda:	4604      	mov	r4, r0
 8006edc:	460d      	mov	r5, r1
 8006ede:	f7fe fc17 	bl	8005710 <__errno>
 8006ee2:	6005      	str	r5, [r0, #0]
 8006ee4:	4620      	mov	r0, r4
 8006ee6:	bd38      	pop	{r3, r4, r5, pc}

08006ee8 <xflowf>:
 8006ee8:	b508      	push	{r3, lr}
 8006eea:	b140      	cbz	r0, 8006efe <xflowf+0x16>
 8006eec:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 8006ef0:	f7f9 fa4c 	bl	800038c <__aeabi_fmul>
 8006ef4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006ef8:	2122      	movs	r1, #34	@ 0x22
 8006efa:	f7ff bfed 	b.w	8006ed8 <with_errnof>
 8006efe:	4608      	mov	r0, r1
 8006f00:	e7f6      	b.n	8006ef0 <xflowf+0x8>

08006f02 <__math_uflowf>:
 8006f02:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 8006f06:	f7ff bfef 	b.w	8006ee8 <xflowf>

08006f0a <__math_oflowf>:
 8006f0a:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 8006f0e:	f7ff bfeb 	b.w	8006ee8 <xflowf>
	...

08006f14 <__kernel_rem_pio2f>:
 8006f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f18:	b0db      	sub	sp, #364	@ 0x16c
 8006f1a:	9202      	str	r2, [sp, #8]
 8006f1c:	9304      	str	r3, [sp, #16]
 8006f1e:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8006f20:	4bac      	ldr	r3, [pc, #688]	@ (80071d4 <__kernel_rem_pio2f+0x2c0>)
 8006f22:	9005      	str	r0, [sp, #20]
 8006f24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f28:	9100      	str	r1, [sp, #0]
 8006f2a:	9301      	str	r3, [sp, #4]
 8006f2c:	9b04      	ldr	r3, [sp, #16]
 8006f2e:	3b01      	subs	r3, #1
 8006f30:	9303      	str	r3, [sp, #12]
 8006f32:	9b02      	ldr	r3, [sp, #8]
 8006f34:	1d1a      	adds	r2, r3, #4
 8006f36:	f2c0 8099 	blt.w	800706c <__kernel_rem_pio2f+0x158>
 8006f3a:	1edc      	subs	r4, r3, #3
 8006f3c:	bf48      	it	mi
 8006f3e:	1d1c      	addmi	r4, r3, #4
 8006f40:	10e4      	asrs	r4, r4, #3
 8006f42:	2500      	movs	r5, #0
 8006f44:	f04f 0b00 	mov.w	fp, #0
 8006f48:	1c67      	adds	r7, r4, #1
 8006f4a:	00fb      	lsls	r3, r7, #3
 8006f4c:	9306      	str	r3, [sp, #24]
 8006f4e:	9b02      	ldr	r3, [sp, #8]
 8006f50:	9a03      	ldr	r2, [sp, #12]
 8006f52:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 8006f56:	9b01      	ldr	r3, [sp, #4]
 8006f58:	eba4 0802 	sub.w	r8, r4, r2
 8006f5c:	eb03 0902 	add.w	r9, r3, r2
 8006f60:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 8006f62:	ae1e      	add	r6, sp, #120	@ 0x78
 8006f64:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 8006f68:	454d      	cmp	r5, r9
 8006f6a:	f340 8081 	ble.w	8007070 <__kernel_rem_pio2f+0x15c>
 8006f6e:	9a04      	ldr	r2, [sp, #16]
 8006f70:	ab1e      	add	r3, sp, #120	@ 0x78
 8006f72:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 8006f76:	f04f 0900 	mov.w	r9, #0
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	f50d 7a8c 	add.w	sl, sp, #280	@ 0x118
 8006f80:	9a01      	ldr	r2, [sp, #4]
 8006f82:	4591      	cmp	r9, r2
 8006f84:	f340 809a 	ble.w	80070bc <__kernel_rem_pio2f+0x1a8>
 8006f88:	4613      	mov	r3, r2
 8006f8a:	aa0a      	add	r2, sp, #40	@ 0x28
 8006f8c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006f90:	9308      	str	r3, [sp, #32]
 8006f92:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 8006f94:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006f98:	9c01      	ldr	r4, [sp, #4]
 8006f9a:	9307      	str	r3, [sp, #28]
 8006f9c:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 8006fa0:	4646      	mov	r6, r8
 8006fa2:	4625      	mov	r5, r4
 8006fa4:	f04f 4987 	mov.w	r9, #1132462080	@ 0x43800000
 8006fa8:	ab5a      	add	r3, sp, #360	@ 0x168
 8006faa:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006fae:	f853 bc50 	ldr.w	fp, [r3, #-80]
 8006fb2:	f50d 7a8c 	add.w	sl, sp, #280	@ 0x118
 8006fb6:	2d00      	cmp	r5, #0
 8006fb8:	f300 8085 	bgt.w	80070c6 <__kernel_rem_pio2f+0x1b2>
 8006fbc:	4639      	mov	r1, r7
 8006fbe:	4658      	mov	r0, fp
 8006fc0:	f7ff ff3e 	bl	8006e40 <scalbnf>
 8006fc4:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 8006fc8:	4605      	mov	r5, r0
 8006fca:	f7f9 f9df 	bl	800038c <__aeabi_fmul>
 8006fce:	f000 fa3f 	bl	8007450 <floorf>
 8006fd2:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 8006fd6:	f7f9 f9d9 	bl	800038c <__aeabi_fmul>
 8006fda:	4601      	mov	r1, r0
 8006fdc:	4628      	mov	r0, r5
 8006fde:	f7f9 f8cb 	bl	8000178 <__aeabi_fsub>
 8006fe2:	4605      	mov	r5, r0
 8006fe4:	f7f9 fbae 	bl	8000744 <__aeabi_f2iz>
 8006fe8:	4606      	mov	r6, r0
 8006fea:	f7f9 f97b 	bl	80002e4 <__aeabi_i2f>
 8006fee:	4601      	mov	r1, r0
 8006ff0:	4628      	mov	r0, r5
 8006ff2:	f7f9 f8c1 	bl	8000178 <__aeabi_fsub>
 8006ff6:	2f00      	cmp	r7, #0
 8006ff8:	4681      	mov	r9, r0
 8006ffa:	f340 8081 	ble.w	8007100 <__kernel_rem_pio2f+0x1ec>
 8006ffe:	1e62      	subs	r2, r4, #1
 8007000:	ab0a      	add	r3, sp, #40	@ 0x28
 8007002:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8007006:	f1c7 0108 	rsb	r1, r7, #8
 800700a:	fa45 f301 	asr.w	r3, r5, r1
 800700e:	441e      	add	r6, r3
 8007010:	408b      	lsls	r3, r1
 8007012:	1aed      	subs	r5, r5, r3
 8007014:	ab0a      	add	r3, sp, #40	@ 0x28
 8007016:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800701a:	f1c7 0307 	rsb	r3, r7, #7
 800701e:	411d      	asrs	r5, r3
 8007020:	2d00      	cmp	r5, #0
 8007022:	dd7a      	ble.n	800711a <__kernel_rem_pio2f+0x206>
 8007024:	2200      	movs	r2, #0
 8007026:	4692      	mov	sl, r2
 8007028:	3601      	adds	r6, #1
 800702a:	4294      	cmp	r4, r2
 800702c:	f300 80aa 	bgt.w	8007184 <__kernel_rem_pio2f+0x270>
 8007030:	2f00      	cmp	r7, #0
 8007032:	dd05      	ble.n	8007040 <__kernel_rem_pio2f+0x12c>
 8007034:	2f01      	cmp	r7, #1
 8007036:	f000 80b6 	beq.w	80071a6 <__kernel_rem_pio2f+0x292>
 800703a:	2f02      	cmp	r7, #2
 800703c:	f000 80bd 	beq.w	80071ba <__kernel_rem_pio2f+0x2a6>
 8007040:	2d02      	cmp	r5, #2
 8007042:	d16a      	bne.n	800711a <__kernel_rem_pio2f+0x206>
 8007044:	4649      	mov	r1, r9
 8007046:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800704a:	f7f9 f895 	bl	8000178 <__aeabi_fsub>
 800704e:	4681      	mov	r9, r0
 8007050:	f1ba 0f00 	cmp.w	sl, #0
 8007054:	d061      	beq.n	800711a <__kernel_rem_pio2f+0x206>
 8007056:	4639      	mov	r1, r7
 8007058:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800705c:	f7ff fef0 	bl	8006e40 <scalbnf>
 8007060:	4601      	mov	r1, r0
 8007062:	4648      	mov	r0, r9
 8007064:	f7f9 f888 	bl	8000178 <__aeabi_fsub>
 8007068:	4681      	mov	r9, r0
 800706a:	e056      	b.n	800711a <__kernel_rem_pio2f+0x206>
 800706c:	2400      	movs	r4, #0
 800706e:	e768      	b.n	8006f42 <__kernel_rem_pio2f+0x2e>
 8007070:	eb18 0f05 	cmn.w	r8, r5
 8007074:	d407      	bmi.n	8007086 <__kernel_rem_pio2f+0x172>
 8007076:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 800707a:	f7f9 f933 	bl	80002e4 <__aeabi_i2f>
 800707e:	f846 0b04 	str.w	r0, [r6], #4
 8007082:	3501      	adds	r5, #1
 8007084:	e770      	b.n	8006f68 <__kernel_rem_pio2f+0x54>
 8007086:	4658      	mov	r0, fp
 8007088:	e7f9      	b.n	800707e <__kernel_rem_pio2f+0x16a>
 800708a:	9307      	str	r3, [sp, #28]
 800708c:	9b05      	ldr	r3, [sp, #20]
 800708e:	f85b 1d04 	ldr.w	r1, [fp, #-4]!
 8007092:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007096:	f7f9 f979 	bl	800038c <__aeabi_fmul>
 800709a:	4601      	mov	r1, r0
 800709c:	4630      	mov	r0, r6
 800709e:	f7f9 f86d 	bl	800017c <__addsf3>
 80070a2:	4606      	mov	r6, r0
 80070a4:	9b07      	ldr	r3, [sp, #28]
 80070a6:	f108 0801 	add.w	r8, r8, #1
 80070aa:	9a03      	ldr	r2, [sp, #12]
 80070ac:	4590      	cmp	r8, r2
 80070ae:	ddec      	ble.n	800708a <__kernel_rem_pio2f+0x176>
 80070b0:	f84a 6b04 	str.w	r6, [sl], #4
 80070b4:	f109 0901 	add.w	r9, r9, #1
 80070b8:	3504      	adds	r5, #4
 80070ba:	e761      	b.n	8006f80 <__kernel_rem_pio2f+0x6c>
 80070bc:	46ab      	mov	fp, r5
 80070be:	461e      	mov	r6, r3
 80070c0:	f04f 0800 	mov.w	r8, #0
 80070c4:	e7f1      	b.n	80070aa <__kernel_rem_pio2f+0x196>
 80070c6:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 80070ca:	4658      	mov	r0, fp
 80070cc:	f7f9 f95e 	bl	800038c <__aeabi_fmul>
 80070d0:	f7f9 fb38 	bl	8000744 <__aeabi_f2iz>
 80070d4:	f7f9 f906 	bl	80002e4 <__aeabi_i2f>
 80070d8:	4649      	mov	r1, r9
 80070da:	9009      	str	r0, [sp, #36]	@ 0x24
 80070dc:	f7f9 f956 	bl	800038c <__aeabi_fmul>
 80070e0:	4601      	mov	r1, r0
 80070e2:	4658      	mov	r0, fp
 80070e4:	f7f9 f848 	bl	8000178 <__aeabi_fsub>
 80070e8:	f7f9 fb2c 	bl	8000744 <__aeabi_f2iz>
 80070ec:	3d01      	subs	r5, #1
 80070ee:	f846 0b04 	str.w	r0, [r6], #4
 80070f2:	f85a 1025 	ldr.w	r1, [sl, r5, lsl #2]
 80070f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80070f8:	f7f9 f840 	bl	800017c <__addsf3>
 80070fc:	4683      	mov	fp, r0
 80070fe:	e75a      	b.n	8006fb6 <__kernel_rem_pio2f+0xa2>
 8007100:	d105      	bne.n	800710e <__kernel_rem_pio2f+0x1fa>
 8007102:	1e63      	subs	r3, r4, #1
 8007104:	aa0a      	add	r2, sp, #40	@ 0x28
 8007106:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 800710a:	11ed      	asrs	r5, r5, #7
 800710c:	e788      	b.n	8007020 <__kernel_rem_pio2f+0x10c>
 800710e:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8007112:	f7f9 faed 	bl	80006f0 <__aeabi_fcmpge>
 8007116:	4605      	mov	r5, r0
 8007118:	bb90      	cbnz	r0, 8007180 <__kernel_rem_pio2f+0x26c>
 800711a:	2100      	movs	r1, #0
 800711c:	4648      	mov	r0, r9
 800711e:	f7f9 fac9 	bl	80006b4 <__aeabi_fcmpeq>
 8007122:	2800      	cmp	r0, #0
 8007124:	f000 8090 	beq.w	8007248 <__kernel_rem_pio2f+0x334>
 8007128:	2200      	movs	r2, #0
 800712a:	1e63      	subs	r3, r4, #1
 800712c:	9901      	ldr	r1, [sp, #4]
 800712e:	428b      	cmp	r3, r1
 8007130:	da4a      	bge.n	80071c8 <__kernel_rem_pio2f+0x2b4>
 8007132:	2a00      	cmp	r2, #0
 8007134:	d076      	beq.n	8007224 <__kernel_rem_pio2f+0x310>
 8007136:	3c01      	subs	r4, #1
 8007138:	ab0a      	add	r3, sp, #40	@ 0x28
 800713a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800713e:	3f08      	subs	r7, #8
 8007140:	2b00      	cmp	r3, #0
 8007142:	d0f8      	beq.n	8007136 <__kernel_rem_pio2f+0x222>
 8007144:	4639      	mov	r1, r7
 8007146:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800714a:	f7ff fe79 	bl	8006e40 <scalbnf>
 800714e:	46a2      	mov	sl, r4
 8007150:	4607      	mov	r7, r0
 8007152:	f04f 596e 	mov.w	r9, #998244352	@ 0x3b800000
 8007156:	f50d 788c 	add.w	r8, sp, #280	@ 0x118
 800715a:	f1ba 0f00 	cmp.w	sl, #0
 800715e:	f280 80a1 	bge.w	80072a4 <__kernel_rem_pio2f+0x390>
 8007162:	4627      	mov	r7, r4
 8007164:	2200      	movs	r2, #0
 8007166:	2f00      	cmp	r7, #0
 8007168:	f2c0 80cb 	blt.w	8007302 <__kernel_rem_pio2f+0x3ee>
 800716c:	a946      	add	r1, sp, #280	@ 0x118
 800716e:	4690      	mov	r8, r2
 8007170:	f04f 0a00 	mov.w	sl, #0
 8007174:	4b18      	ldr	r3, [pc, #96]	@ (80071d8 <__kernel_rem_pio2f+0x2c4>)
 8007176:	eb01 0b87 	add.w	fp, r1, r7, lsl #2
 800717a:	eba4 0907 	sub.w	r9, r4, r7
 800717e:	e0b4      	b.n	80072ea <__kernel_rem_pio2f+0x3d6>
 8007180:	2502      	movs	r5, #2
 8007182:	e74f      	b.n	8007024 <__kernel_rem_pio2f+0x110>
 8007184:	f858 3b04 	ldr.w	r3, [r8], #4
 8007188:	f1ba 0f00 	cmp.w	sl, #0
 800718c:	d108      	bne.n	80071a0 <__kernel_rem_pio2f+0x28c>
 800718e:	b123      	cbz	r3, 800719a <__kernel_rem_pio2f+0x286>
 8007190:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8007194:	f848 3c04 	str.w	r3, [r8, #-4]
 8007198:	2301      	movs	r3, #1
 800719a:	469a      	mov	sl, r3
 800719c:	3201      	adds	r2, #1
 800719e:	e744      	b.n	800702a <__kernel_rem_pio2f+0x116>
 80071a0:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 80071a4:	e7f6      	b.n	8007194 <__kernel_rem_pio2f+0x280>
 80071a6:	1e62      	subs	r2, r4, #1
 80071a8:	ab0a      	add	r3, sp, #40	@ 0x28
 80071aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071b2:	a90a      	add	r1, sp, #40	@ 0x28
 80071b4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80071b8:	e742      	b.n	8007040 <__kernel_rem_pio2f+0x12c>
 80071ba:	1e62      	subs	r2, r4, #1
 80071bc:	ab0a      	add	r3, sp, #40	@ 0x28
 80071be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80071c6:	e7f4      	b.n	80071b2 <__kernel_rem_pio2f+0x29e>
 80071c8:	a90a      	add	r1, sp, #40	@ 0x28
 80071ca:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80071ce:	3b01      	subs	r3, #1
 80071d0:	430a      	orrs	r2, r1
 80071d2:	e7ab      	b.n	800712c <__kernel_rem_pio2f+0x218>
 80071d4:	08007c58 	.word	0x08007c58
 80071d8:	08007c2c 	.word	0x08007c2c
 80071dc:	3301      	adds	r3, #1
 80071de:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80071e2:	2900      	cmp	r1, #0
 80071e4:	d0fa      	beq.n	80071dc <__kernel_rem_pio2f+0x2c8>
 80071e6:	9a04      	ldr	r2, [sp, #16]
 80071e8:	a91e      	add	r1, sp, #120	@ 0x78
 80071ea:	18a2      	adds	r2, r4, r2
 80071ec:	1c66      	adds	r6, r4, #1
 80071ee:	eb01 0582 	add.w	r5, r1, r2, lsl #2
 80071f2:	441c      	add	r4, r3
 80071f4:	f50d 798c 	add.w	r9, sp, #280	@ 0x118
 80071f8:	42b4      	cmp	r4, r6
 80071fa:	f6ff aecf 	blt.w	8006f9c <__kernel_rem_pio2f+0x88>
 80071fe:	9b07      	ldr	r3, [sp, #28]
 8007200:	46ab      	mov	fp, r5
 8007202:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007206:	f7f9 f86d 	bl	80002e4 <__aeabi_i2f>
 800720a:	f04f 0a00 	mov.w	sl, #0
 800720e:	f04f 0800 	mov.w	r8, #0
 8007212:	6028      	str	r0, [r5, #0]
 8007214:	9b03      	ldr	r3, [sp, #12]
 8007216:	459a      	cmp	sl, r3
 8007218:	dd07      	ble.n	800722a <__kernel_rem_pio2f+0x316>
 800721a:	f849 8026 	str.w	r8, [r9, r6, lsl #2]
 800721e:	3504      	adds	r5, #4
 8007220:	3601      	adds	r6, #1
 8007222:	e7e9      	b.n	80071f8 <__kernel_rem_pio2f+0x2e4>
 8007224:	2301      	movs	r3, #1
 8007226:	9a08      	ldr	r2, [sp, #32]
 8007228:	e7d9      	b.n	80071de <__kernel_rem_pio2f+0x2ca>
 800722a:	9b05      	ldr	r3, [sp, #20]
 800722c:	f85b 0904 	ldr.w	r0, [fp], #-4
 8007230:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 8007234:	f7f9 f8aa 	bl	800038c <__aeabi_fmul>
 8007238:	4601      	mov	r1, r0
 800723a:	4640      	mov	r0, r8
 800723c:	f7f8 ff9e 	bl	800017c <__addsf3>
 8007240:	f10a 0a01 	add.w	sl, sl, #1
 8007244:	4680      	mov	r8, r0
 8007246:	e7e5      	b.n	8007214 <__kernel_rem_pio2f+0x300>
 8007248:	9b06      	ldr	r3, [sp, #24]
 800724a:	9a02      	ldr	r2, [sp, #8]
 800724c:	4648      	mov	r0, r9
 800724e:	1a99      	subs	r1, r3, r2
 8007250:	f7ff fdf6 	bl	8006e40 <scalbnf>
 8007254:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8007258:	4680      	mov	r8, r0
 800725a:	f7f9 fa49 	bl	80006f0 <__aeabi_fcmpge>
 800725e:	b1f8      	cbz	r0, 80072a0 <__kernel_rem_pio2f+0x38c>
 8007260:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 8007264:	4640      	mov	r0, r8
 8007266:	f7f9 f891 	bl	800038c <__aeabi_fmul>
 800726a:	f7f9 fa6b 	bl	8000744 <__aeabi_f2iz>
 800726e:	f7f9 f839 	bl	80002e4 <__aeabi_i2f>
 8007272:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8007276:	4681      	mov	r9, r0
 8007278:	f7f9 f888 	bl	800038c <__aeabi_fmul>
 800727c:	4601      	mov	r1, r0
 800727e:	4640      	mov	r0, r8
 8007280:	f7f8 ff7a 	bl	8000178 <__aeabi_fsub>
 8007284:	f7f9 fa5e 	bl	8000744 <__aeabi_f2iz>
 8007288:	ab0a      	add	r3, sp, #40	@ 0x28
 800728a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800728e:	4648      	mov	r0, r9
 8007290:	3401      	adds	r4, #1
 8007292:	3708      	adds	r7, #8
 8007294:	f7f9 fa56 	bl	8000744 <__aeabi_f2iz>
 8007298:	ab0a      	add	r3, sp, #40	@ 0x28
 800729a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800729e:	e751      	b.n	8007144 <__kernel_rem_pio2f+0x230>
 80072a0:	4640      	mov	r0, r8
 80072a2:	e7f7      	b.n	8007294 <__kernel_rem_pio2f+0x380>
 80072a4:	ab0a      	add	r3, sp, #40	@ 0x28
 80072a6:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80072aa:	f7f9 f81b 	bl	80002e4 <__aeabi_i2f>
 80072ae:	4639      	mov	r1, r7
 80072b0:	f7f9 f86c 	bl	800038c <__aeabi_fmul>
 80072b4:	4649      	mov	r1, r9
 80072b6:	f848 002a 	str.w	r0, [r8, sl, lsl #2]
 80072ba:	4638      	mov	r0, r7
 80072bc:	f7f9 f866 	bl	800038c <__aeabi_fmul>
 80072c0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80072c4:	4607      	mov	r7, r0
 80072c6:	e748      	b.n	800715a <__kernel_rem_pio2f+0x246>
 80072c8:	f853 0b04 	ldr.w	r0, [r3], #4
 80072cc:	f85b 1b04 	ldr.w	r1, [fp], #4
 80072d0:	9203      	str	r2, [sp, #12]
 80072d2:	9302      	str	r3, [sp, #8]
 80072d4:	f7f9 f85a 	bl	800038c <__aeabi_fmul>
 80072d8:	4601      	mov	r1, r0
 80072da:	4640      	mov	r0, r8
 80072dc:	f7f8 ff4e 	bl	800017c <__addsf3>
 80072e0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80072e4:	4680      	mov	r8, r0
 80072e6:	f10a 0a01 	add.w	sl, sl, #1
 80072ea:	9901      	ldr	r1, [sp, #4]
 80072ec:	458a      	cmp	sl, r1
 80072ee:	dc01      	bgt.n	80072f4 <__kernel_rem_pio2f+0x3e0>
 80072f0:	45ca      	cmp	sl, r9
 80072f2:	dde9      	ble.n	80072c8 <__kernel_rem_pio2f+0x3b4>
 80072f4:	ab5a      	add	r3, sp, #360	@ 0x168
 80072f6:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 80072fa:	f849 8ca0 	str.w	r8, [r9, #-160]
 80072fe:	3f01      	subs	r7, #1
 8007300:	e731      	b.n	8007166 <__kernel_rem_pio2f+0x252>
 8007302:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8007304:	2b02      	cmp	r3, #2
 8007306:	dc07      	bgt.n	8007318 <__kernel_rem_pio2f+0x404>
 8007308:	2b00      	cmp	r3, #0
 800730a:	dc4e      	bgt.n	80073aa <__kernel_rem_pio2f+0x496>
 800730c:	d02e      	beq.n	800736c <__kernel_rem_pio2f+0x458>
 800730e:	f006 0007 	and.w	r0, r6, #7
 8007312:	b05b      	add	sp, #364	@ 0x16c
 8007314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007318:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800731a:	2b03      	cmp	r3, #3
 800731c:	d1f7      	bne.n	800730e <__kernel_rem_pio2f+0x3fa>
 800731e:	f10d 0bc8 	add.w	fp, sp, #200	@ 0xc8
 8007322:	eb0b 0784 	add.w	r7, fp, r4, lsl #2
 8007326:	46b8      	mov	r8, r7
 8007328:	46a2      	mov	sl, r4
 800732a:	f1ba 0f00 	cmp.w	sl, #0
 800732e:	dc49      	bgt.n	80073c4 <__kernel_rem_pio2f+0x4b0>
 8007330:	46a1      	mov	r9, r4
 8007332:	f1b9 0f01 	cmp.w	r9, #1
 8007336:	dc60      	bgt.n	80073fa <__kernel_rem_pio2f+0x4e6>
 8007338:	2000      	movs	r0, #0
 800733a:	2c01      	cmp	r4, #1
 800733c:	dc76      	bgt.n	800742c <__kernel_rem_pio2f+0x518>
 800733e:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 8007340:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 8007342:	2d00      	cmp	r5, #0
 8007344:	d178      	bne.n	8007438 <__kernel_rem_pio2f+0x524>
 8007346:	9900      	ldr	r1, [sp, #0]
 8007348:	600a      	str	r2, [r1, #0]
 800734a:	460a      	mov	r2, r1
 800734c:	604b      	str	r3, [r1, #4]
 800734e:	6090      	str	r0, [r2, #8]
 8007350:	e7dd      	b.n	800730e <__kernel_rem_pio2f+0x3fa>
 8007352:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 8007356:	f7f8 ff11 	bl	800017c <__addsf3>
 800735a:	3c01      	subs	r4, #1
 800735c:	2c00      	cmp	r4, #0
 800735e:	daf8      	bge.n	8007352 <__kernel_rem_pio2f+0x43e>
 8007360:	b10d      	cbz	r5, 8007366 <__kernel_rem_pio2f+0x452>
 8007362:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8007366:	9b00      	ldr	r3, [sp, #0]
 8007368:	6018      	str	r0, [r3, #0]
 800736a:	e7d0      	b.n	800730e <__kernel_rem_pio2f+0x3fa>
 800736c:	2000      	movs	r0, #0
 800736e:	af32      	add	r7, sp, #200	@ 0xc8
 8007370:	e7f4      	b.n	800735c <__kernel_rem_pio2f+0x448>
 8007372:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 8007376:	f7f8 ff01 	bl	800017c <__addsf3>
 800737a:	f108 38ff 	add.w	r8, r8, #4294967295
 800737e:	f1b8 0f00 	cmp.w	r8, #0
 8007382:	daf6      	bge.n	8007372 <__kernel_rem_pio2f+0x45e>
 8007384:	b1ad      	cbz	r5, 80073b2 <__kernel_rem_pio2f+0x49e>
 8007386:	f100 4300 	add.w	r3, r0, #2147483648	@ 0x80000000
 800738a:	9a00      	ldr	r2, [sp, #0]
 800738c:	4601      	mov	r1, r0
 800738e:	6013      	str	r3, [r2, #0]
 8007390:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 8007392:	f7f8 fef1 	bl	8000178 <__aeabi_fsub>
 8007396:	f04f 0801 	mov.w	r8, #1
 800739a:	4544      	cmp	r4, r8
 800739c:	da0b      	bge.n	80073b6 <__kernel_rem_pio2f+0x4a2>
 800739e:	b10d      	cbz	r5, 80073a4 <__kernel_rem_pio2f+0x490>
 80073a0:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 80073a4:	9b00      	ldr	r3, [sp, #0]
 80073a6:	6058      	str	r0, [r3, #4]
 80073a8:	e7b1      	b.n	800730e <__kernel_rem_pio2f+0x3fa>
 80073aa:	46a0      	mov	r8, r4
 80073ac:	2000      	movs	r0, #0
 80073ae:	af32      	add	r7, sp, #200	@ 0xc8
 80073b0:	e7e5      	b.n	800737e <__kernel_rem_pio2f+0x46a>
 80073b2:	4603      	mov	r3, r0
 80073b4:	e7e9      	b.n	800738a <__kernel_rem_pio2f+0x476>
 80073b6:	f857 1f04 	ldr.w	r1, [r7, #4]!
 80073ba:	f7f8 fedf 	bl	800017c <__addsf3>
 80073be:	f108 0801 	add.w	r8, r8, #1
 80073c2:	e7ea      	b.n	800739a <__kernel_rem_pio2f+0x486>
 80073c4:	f8d8 3000 	ldr.w	r3, [r8]
 80073c8:	f858 2c04 	ldr.w	r2, [r8, #-4]
 80073cc:	4619      	mov	r1, r3
 80073ce:	4610      	mov	r0, r2
 80073d0:	9302      	str	r3, [sp, #8]
 80073d2:	9201      	str	r2, [sp, #4]
 80073d4:	f7f8 fed2 	bl	800017c <__addsf3>
 80073d8:	9a01      	ldr	r2, [sp, #4]
 80073da:	4601      	mov	r1, r0
 80073dc:	4681      	mov	r9, r0
 80073de:	4610      	mov	r0, r2
 80073e0:	f7f8 feca 	bl	8000178 <__aeabi_fsub>
 80073e4:	9b02      	ldr	r3, [sp, #8]
 80073e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80073ea:	4619      	mov	r1, r3
 80073ec:	f7f8 fec6 	bl	800017c <__addsf3>
 80073f0:	f848 0904 	str.w	r0, [r8], #-4
 80073f4:	f8c8 9000 	str.w	r9, [r8]
 80073f8:	e797      	b.n	800732a <__kernel_rem_pio2f+0x416>
 80073fa:	f857 3c04 	ldr.w	r3, [r7, #-4]
 80073fe:	f8d7 a000 	ldr.w	sl, [r7]
 8007402:	4618      	mov	r0, r3
 8007404:	4651      	mov	r1, sl
 8007406:	9301      	str	r3, [sp, #4]
 8007408:	f7f8 feb8 	bl	800017c <__addsf3>
 800740c:	9b01      	ldr	r3, [sp, #4]
 800740e:	4601      	mov	r1, r0
 8007410:	4680      	mov	r8, r0
 8007412:	4618      	mov	r0, r3
 8007414:	f7f8 feb0 	bl	8000178 <__aeabi_fsub>
 8007418:	4651      	mov	r1, sl
 800741a:	f7f8 feaf 	bl	800017c <__addsf3>
 800741e:	f847 0904 	str.w	r0, [r7], #-4
 8007422:	f109 39ff 	add.w	r9, r9, #4294967295
 8007426:	f8c7 8000 	str.w	r8, [r7]
 800742a:	e782      	b.n	8007332 <__kernel_rem_pio2f+0x41e>
 800742c:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 8007430:	f7f8 fea4 	bl	800017c <__addsf3>
 8007434:	3c01      	subs	r4, #1
 8007436:	e780      	b.n	800733a <__kernel_rem_pio2f+0x426>
 8007438:	9900      	ldr	r1, [sp, #0]
 800743a:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 800743e:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8007442:	600a      	str	r2, [r1, #0]
 8007444:	604b      	str	r3, [r1, #4]
 8007446:	460a      	mov	r2, r1
 8007448:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800744c:	e77f      	b.n	800734e <__kernel_rem_pio2f+0x43a>
 800744e:	bf00      	nop

08007450 <floorf>:
 8007450:	b570      	push	{r4, r5, r6, lr}
 8007452:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 8007456:	3d7f      	subs	r5, #127	@ 0x7f
 8007458:	2d16      	cmp	r5, #22
 800745a:	4601      	mov	r1, r0
 800745c:	4604      	mov	r4, r0
 800745e:	f020 4600 	bic.w	r6, r0, #2147483648	@ 0x80000000
 8007462:	dc26      	bgt.n	80074b2 <floorf+0x62>
 8007464:	2d00      	cmp	r5, #0
 8007466:	da0f      	bge.n	8007488 <floorf+0x38>
 8007468:	4917      	ldr	r1, [pc, #92]	@ (80074c8 <floorf+0x78>)
 800746a:	f7f8 fe87 	bl	800017c <__addsf3>
 800746e:	2100      	movs	r1, #0
 8007470:	f7f9 f948 	bl	8000704 <__aeabi_fcmpgt>
 8007474:	b130      	cbz	r0, 8007484 <floorf+0x34>
 8007476:	2c00      	cmp	r4, #0
 8007478:	da23      	bge.n	80074c2 <floorf+0x72>
 800747a:	2e00      	cmp	r6, #0
 800747c:	4c13      	ldr	r4, [pc, #76]	@ (80074cc <floorf+0x7c>)
 800747e:	bf08      	it	eq
 8007480:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8007484:	4621      	mov	r1, r4
 8007486:	e01a      	b.n	80074be <floorf+0x6e>
 8007488:	4e11      	ldr	r6, [pc, #68]	@ (80074d0 <floorf+0x80>)
 800748a:	412e      	asrs	r6, r5
 800748c:	4230      	tst	r0, r6
 800748e:	d016      	beq.n	80074be <floorf+0x6e>
 8007490:	490d      	ldr	r1, [pc, #52]	@ (80074c8 <floorf+0x78>)
 8007492:	f7f8 fe73 	bl	800017c <__addsf3>
 8007496:	2100      	movs	r1, #0
 8007498:	f7f9 f934 	bl	8000704 <__aeabi_fcmpgt>
 800749c:	2800      	cmp	r0, #0
 800749e:	d0f1      	beq.n	8007484 <floorf+0x34>
 80074a0:	2c00      	cmp	r4, #0
 80074a2:	bfbe      	ittt	lt
 80074a4:	f44f 0300 	movlt.w	r3, #8388608	@ 0x800000
 80074a8:	412b      	asrlt	r3, r5
 80074aa:	18e4      	addlt	r4, r4, r3
 80074ac:	ea24 0406 	bic.w	r4, r4, r6
 80074b0:	e7e8      	b.n	8007484 <floorf+0x34>
 80074b2:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 80074b6:	d302      	bcc.n	80074be <floorf+0x6e>
 80074b8:	f7f8 fe60 	bl	800017c <__addsf3>
 80074bc:	4601      	mov	r1, r0
 80074be:	4608      	mov	r0, r1
 80074c0:	bd70      	pop	{r4, r5, r6, pc}
 80074c2:	2400      	movs	r4, #0
 80074c4:	e7de      	b.n	8007484 <floorf+0x34>
 80074c6:	bf00      	nop
 80074c8:	7149f2ca 	.word	0x7149f2ca
 80074cc:	bf800000 	.word	0xbf800000
 80074d0:	007fffff 	.word	0x007fffff

080074d4 <_init>:
 80074d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074d6:	bf00      	nop
 80074d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074da:	bc08      	pop	{r3}
 80074dc:	469e      	mov	lr, r3
 80074de:	4770      	bx	lr

080074e0 <_fini>:
 80074e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074e2:	bf00      	nop
 80074e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074e6:	bc08      	pop	{r3}
 80074e8:	469e      	mov	lr, r3
 80074ea:	4770      	bx	lr
