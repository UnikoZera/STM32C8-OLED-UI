
STM32PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8f0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000924  0800a9fc  0800a9fc  0000b9fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b320  0800b320  0000d080  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b320  0800b320  0000c320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b328  0800b328  0000d080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b328  0800b328  0000c328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b32c  0800b32c  0000c32c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  0800b330  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004084  20000080  0800b3b0  0000d080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004104  0800b3b0  0000d104  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fc9b  00000000  00000000  0000d0a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003005  00000000  00000000  0001cd44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001128  00000000  00000000  0001fd50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d87  00000000  00000000  00020e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a6c8  00000000  00000000  00021bff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015a6f  00000000  00000000  0003c2c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e447  00000000  00000000  00051d36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e017d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005758  00000000  00000000  000e01c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000e5918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000080 	.word	0x20000080
 8000128:	00000000 	.word	0x00000000
 800012c:	0800a9e4 	.word	0x0800a9e4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000084 	.word	0x20000084
 8000148:	0800a9e4 	.word	0x0800a9e4

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <__aeabi_frsub>:
 8000170:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000174:	e002      	b.n	800017c <__addsf3>
 8000176:	bf00      	nop

08000178 <__aeabi_fsub>:
 8000178:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800017c <__addsf3>:
 800017c:	0042      	lsls	r2, r0, #1
 800017e:	bf1f      	itttt	ne
 8000180:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000184:	ea92 0f03 	teqne	r2, r3
 8000188:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800018c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000190:	d06a      	beq.n	8000268 <__addsf3+0xec>
 8000192:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000196:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800019a:	bfc1      	itttt	gt
 800019c:	18d2      	addgt	r2, r2, r3
 800019e:	4041      	eorgt	r1, r0
 80001a0:	4048      	eorgt	r0, r1
 80001a2:	4041      	eorgt	r1, r0
 80001a4:	bfb8      	it	lt
 80001a6:	425b      	neglt	r3, r3
 80001a8:	2b19      	cmp	r3, #25
 80001aa:	bf88      	it	hi
 80001ac:	4770      	bxhi	lr
 80001ae:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80001b2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001b6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4240      	negne	r0, r0
 80001be:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001c6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001ca:	bf18      	it	ne
 80001cc:	4249      	negne	r1, r1
 80001ce:	ea92 0f03 	teq	r2, r3
 80001d2:	d03f      	beq.n	8000254 <__addsf3+0xd8>
 80001d4:	f1a2 0201 	sub.w	r2, r2, #1
 80001d8:	fa41 fc03 	asr.w	ip, r1, r3
 80001dc:	eb10 000c 	adds.w	r0, r0, ip
 80001e0:	f1c3 0320 	rsb	r3, r3, #32
 80001e4:	fa01 f103 	lsl.w	r1, r1, r3
 80001e8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001ec:	d502      	bpl.n	80001f4 <__addsf3+0x78>
 80001ee:	4249      	negs	r1, r1
 80001f0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001f4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001f8:	d313      	bcc.n	8000222 <__addsf3+0xa6>
 80001fa:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001fe:	d306      	bcc.n	800020e <__addsf3+0x92>
 8000200:	0840      	lsrs	r0, r0, #1
 8000202:	ea4f 0131 	mov.w	r1, r1, rrx
 8000206:	f102 0201 	add.w	r2, r2, #1
 800020a:	2afe      	cmp	r2, #254	@ 0xfe
 800020c:	d251      	bcs.n	80002b2 <__addsf3+0x136>
 800020e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000212:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000216:	bf08      	it	eq
 8000218:	f020 0001 	biceq.w	r0, r0, #1
 800021c:	ea40 0003 	orr.w	r0, r0, r3
 8000220:	4770      	bx	lr
 8000222:	0049      	lsls	r1, r1, #1
 8000224:	eb40 0000 	adc.w	r0, r0, r0
 8000228:	3a01      	subs	r2, #1
 800022a:	bf28      	it	cs
 800022c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000230:	d2ed      	bcs.n	800020e <__addsf3+0x92>
 8000232:	fab0 fc80 	clz	ip, r0
 8000236:	f1ac 0c08 	sub.w	ip, ip, #8
 800023a:	ebb2 020c 	subs.w	r2, r2, ip
 800023e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000242:	bfaa      	itet	ge
 8000244:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000248:	4252      	neglt	r2, r2
 800024a:	4318      	orrge	r0, r3
 800024c:	bfbc      	itt	lt
 800024e:	40d0      	lsrlt	r0, r2
 8000250:	4318      	orrlt	r0, r3
 8000252:	4770      	bx	lr
 8000254:	f092 0f00 	teq	r2, #0
 8000258:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800025c:	bf06      	itte	eq
 800025e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000262:	3201      	addeq	r2, #1
 8000264:	3b01      	subne	r3, #1
 8000266:	e7b5      	b.n	80001d4 <__addsf3+0x58>
 8000268:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800026c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000270:	bf18      	it	ne
 8000272:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000276:	d021      	beq.n	80002bc <__addsf3+0x140>
 8000278:	ea92 0f03 	teq	r2, r3
 800027c:	d004      	beq.n	8000288 <__addsf3+0x10c>
 800027e:	f092 0f00 	teq	r2, #0
 8000282:	bf08      	it	eq
 8000284:	4608      	moveq	r0, r1
 8000286:	4770      	bx	lr
 8000288:	ea90 0f01 	teq	r0, r1
 800028c:	bf1c      	itt	ne
 800028e:	2000      	movne	r0, #0
 8000290:	4770      	bxne	lr
 8000292:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000296:	d104      	bne.n	80002a2 <__addsf3+0x126>
 8000298:	0040      	lsls	r0, r0, #1
 800029a:	bf28      	it	cs
 800029c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80002a0:	4770      	bx	lr
 80002a2:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80002a6:	bf3c      	itt	cc
 80002a8:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80002ac:	4770      	bxcc	lr
 80002ae:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80002b2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80002b6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002ba:	4770      	bx	lr
 80002bc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002c0:	bf16      	itet	ne
 80002c2:	4608      	movne	r0, r1
 80002c4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002c8:	4601      	movne	r1, r0
 80002ca:	0242      	lsls	r2, r0, #9
 80002cc:	bf06      	itte	eq
 80002ce:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002d2:	ea90 0f01 	teqeq	r0, r1
 80002d6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002da:	4770      	bx	lr

080002dc <__aeabi_ui2f>:
 80002dc:	f04f 0300 	mov.w	r3, #0
 80002e0:	e004      	b.n	80002ec <__aeabi_i2f+0x8>
 80002e2:	bf00      	nop

080002e4 <__aeabi_i2f>:
 80002e4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002e8:	bf48      	it	mi
 80002ea:	4240      	negmi	r0, r0
 80002ec:	ea5f 0c00 	movs.w	ip, r0
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002f8:	4601      	mov	r1, r0
 80002fa:	f04f 0000 	mov.w	r0, #0
 80002fe:	e01c      	b.n	800033a <__aeabi_l2f+0x2a>

08000300 <__aeabi_ul2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f04f 0300 	mov.w	r3, #0
 800030c:	e00a      	b.n	8000324 <__aeabi_l2f+0x14>
 800030e:	bf00      	nop

08000310 <__aeabi_l2f>:
 8000310:	ea50 0201 	orrs.w	r2, r0, r1
 8000314:	bf08      	it	eq
 8000316:	4770      	bxeq	lr
 8000318:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800031c:	d502      	bpl.n	8000324 <__aeabi_l2f+0x14>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	ea5f 0c01 	movs.w	ip, r1
 8000328:	bf02      	ittt	eq
 800032a:	4684      	moveq	ip, r0
 800032c:	4601      	moveq	r1, r0
 800032e:	2000      	moveq	r0, #0
 8000330:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000334:	bf08      	it	eq
 8000336:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800033a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800033e:	fabc f28c 	clz	r2, ip
 8000342:	3a08      	subs	r2, #8
 8000344:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000348:	db10      	blt.n	800036c <__aeabi_l2f+0x5c>
 800034a:	fa01 fc02 	lsl.w	ip, r1, r2
 800034e:	4463      	add	r3, ip
 8000350:	fa00 fc02 	lsl.w	ip, r0, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800035c:	fa20 f202 	lsr.w	r2, r0, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	f020 0001 	biceq.w	r0, r0, #1
 800036a:	4770      	bx	lr
 800036c:	f102 0220 	add.w	r2, r2, #32
 8000370:	fa01 fc02 	lsl.w	ip, r1, r2
 8000374:	f1c2 0220 	rsb	r2, r2, #32
 8000378:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800037c:	fa21 f202 	lsr.w	r2, r1, r2
 8000380:	eb43 0002 	adc.w	r0, r3, r2
 8000384:	bf08      	it	eq
 8000386:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800038a:	4770      	bx	lr

0800038c <__aeabi_fmul>:
 800038c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000390:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000394:	bf1e      	ittt	ne
 8000396:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800039a:	ea92 0f0c 	teqne	r2, ip
 800039e:	ea93 0f0c 	teqne	r3, ip
 80003a2:	d06f      	beq.n	8000484 <__aeabi_fmul+0xf8>
 80003a4:	441a      	add	r2, r3
 80003a6:	ea80 0c01 	eor.w	ip, r0, r1
 80003aa:	0240      	lsls	r0, r0, #9
 80003ac:	bf18      	it	ne
 80003ae:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003b2:	d01e      	beq.n	80003f2 <__aeabi_fmul+0x66>
 80003b4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80003b8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003bc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003c0:	fba0 3101 	umull	r3, r1, r0, r1
 80003c4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003c8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003cc:	bf3e      	ittt	cc
 80003ce:	0049      	lslcc	r1, r1, #1
 80003d0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003d4:	005b      	lslcc	r3, r3, #1
 80003d6:	ea40 0001 	orr.w	r0, r0, r1
 80003da:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003de:	2afd      	cmp	r2, #253	@ 0xfd
 80003e0:	d81d      	bhi.n	800041e <__aeabi_fmul+0x92>
 80003e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ea:	bf08      	it	eq
 80003ec:	f020 0001 	biceq.w	r0, r0, #1
 80003f0:	4770      	bx	lr
 80003f2:	f090 0f00 	teq	r0, #0
 80003f6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003fa:	bf08      	it	eq
 80003fc:	0249      	lsleq	r1, r1, #9
 80003fe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000402:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000406:	3a7f      	subs	r2, #127	@ 0x7f
 8000408:	bfc2      	ittt	gt
 800040a:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800040e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000412:	4770      	bxgt	lr
 8000414:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000418:	f04f 0300 	mov.w	r3, #0
 800041c:	3a01      	subs	r2, #1
 800041e:	dc5d      	bgt.n	80004dc <__aeabi_fmul+0x150>
 8000420:	f112 0f19 	cmn.w	r2, #25
 8000424:	bfdc      	itt	le
 8000426:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800042a:	4770      	bxle	lr
 800042c:	f1c2 0200 	rsb	r2, r2, #0
 8000430:	0041      	lsls	r1, r0, #1
 8000432:	fa21 f102 	lsr.w	r1, r1, r2
 8000436:	f1c2 0220 	rsb	r2, r2, #32
 800043a:	fa00 fc02 	lsl.w	ip, r0, r2
 800043e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000442:	f140 0000 	adc.w	r0, r0, #0
 8000446:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800044a:	bf08      	it	eq
 800044c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000450:	4770      	bx	lr
 8000452:	f092 0f00 	teq	r2, #0
 8000456:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800045a:	bf02      	ittt	eq
 800045c:	0040      	lsleq	r0, r0, #1
 800045e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000462:	3a01      	subeq	r2, #1
 8000464:	d0f9      	beq.n	800045a <__aeabi_fmul+0xce>
 8000466:	ea40 000c 	orr.w	r0, r0, ip
 800046a:	f093 0f00 	teq	r3, #0
 800046e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000472:	bf02      	ittt	eq
 8000474:	0049      	lsleq	r1, r1, #1
 8000476:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800047a:	3b01      	subeq	r3, #1
 800047c:	d0f9      	beq.n	8000472 <__aeabi_fmul+0xe6>
 800047e:	ea41 010c 	orr.w	r1, r1, ip
 8000482:	e78f      	b.n	80003a4 <__aeabi_fmul+0x18>
 8000484:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000488:	ea92 0f0c 	teq	r2, ip
 800048c:	bf18      	it	ne
 800048e:	ea93 0f0c 	teqne	r3, ip
 8000492:	d00a      	beq.n	80004aa <__aeabi_fmul+0x11e>
 8000494:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000498:	bf18      	it	ne
 800049a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800049e:	d1d8      	bne.n	8000452 <__aeabi_fmul+0xc6>
 80004a0:	ea80 0001 	eor.w	r0, r0, r1
 80004a4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004a8:	4770      	bx	lr
 80004aa:	f090 0f00 	teq	r0, #0
 80004ae:	bf17      	itett	ne
 80004b0:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80004b4:	4608      	moveq	r0, r1
 80004b6:	f091 0f00 	teqne	r1, #0
 80004ba:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80004be:	d014      	beq.n	80004ea <__aeabi_fmul+0x15e>
 80004c0:	ea92 0f0c 	teq	r2, ip
 80004c4:	d101      	bne.n	80004ca <__aeabi_fmul+0x13e>
 80004c6:	0242      	lsls	r2, r0, #9
 80004c8:	d10f      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004ca:	ea93 0f0c 	teq	r3, ip
 80004ce:	d103      	bne.n	80004d8 <__aeabi_fmul+0x14c>
 80004d0:	024b      	lsls	r3, r1, #9
 80004d2:	bf18      	it	ne
 80004d4:	4608      	movne	r0, r1
 80004d6:	d108      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004d8:	ea80 0001 	eor.w	r0, r0, r1
 80004dc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004e0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004e4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004e8:	4770      	bx	lr
 80004ea:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ee:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004f2:	4770      	bx	lr

080004f4 <__aeabi_fdiv>:
 80004f4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004fc:	bf1e      	ittt	ne
 80004fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000502:	ea92 0f0c 	teqne	r2, ip
 8000506:	ea93 0f0c 	teqne	r3, ip
 800050a:	d069      	beq.n	80005e0 <__aeabi_fdiv+0xec>
 800050c:	eba2 0203 	sub.w	r2, r2, r3
 8000510:	ea80 0c01 	eor.w	ip, r0, r1
 8000514:	0249      	lsls	r1, r1, #9
 8000516:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800051a:	d037      	beq.n	800058c <__aeabi_fdiv+0x98>
 800051c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000520:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000524:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000528:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800052c:	428b      	cmp	r3, r1
 800052e:	bf38      	it	cc
 8000530:	005b      	lslcc	r3, r3, #1
 8000532:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000536:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800053a:	428b      	cmp	r3, r1
 800053c:	bf24      	itt	cs
 800053e:	1a5b      	subcs	r3, r3, r1
 8000540:	ea40 000c 	orrcs.w	r0, r0, ip
 8000544:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000548:	bf24      	itt	cs
 800054a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800054e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000552:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000556:	bf24      	itt	cs
 8000558:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800055c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000560:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000564:	bf24      	itt	cs
 8000566:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800056a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800056e:	011b      	lsls	r3, r3, #4
 8000570:	bf18      	it	ne
 8000572:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000576:	d1e0      	bne.n	800053a <__aeabi_fdiv+0x46>
 8000578:	2afd      	cmp	r2, #253	@ 0xfd
 800057a:	f63f af50 	bhi.w	800041e <__aeabi_fmul+0x92>
 800057e:	428b      	cmp	r3, r1
 8000580:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000584:	bf08      	it	eq
 8000586:	f020 0001 	biceq.w	r0, r0, #1
 800058a:	4770      	bx	lr
 800058c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000590:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000594:	327f      	adds	r2, #127	@ 0x7f
 8000596:	bfc2      	ittt	gt
 8000598:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800059c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005a0:	4770      	bxgt	lr
 80005a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80005a6:	f04f 0300 	mov.w	r3, #0
 80005aa:	3a01      	subs	r2, #1
 80005ac:	e737      	b.n	800041e <__aeabi_fmul+0x92>
 80005ae:	f092 0f00 	teq	r2, #0
 80005b2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80005b6:	bf02      	ittt	eq
 80005b8:	0040      	lsleq	r0, r0, #1
 80005ba:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80005be:	3a01      	subeq	r2, #1
 80005c0:	d0f9      	beq.n	80005b6 <__aeabi_fdiv+0xc2>
 80005c2:	ea40 000c 	orr.w	r0, r0, ip
 80005c6:	f093 0f00 	teq	r3, #0
 80005ca:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005ce:	bf02      	ittt	eq
 80005d0:	0049      	lsleq	r1, r1, #1
 80005d2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005d6:	3b01      	subeq	r3, #1
 80005d8:	d0f9      	beq.n	80005ce <__aeabi_fdiv+0xda>
 80005da:	ea41 010c 	orr.w	r1, r1, ip
 80005de:	e795      	b.n	800050c <__aeabi_fdiv+0x18>
 80005e0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005e4:	ea92 0f0c 	teq	r2, ip
 80005e8:	d108      	bne.n	80005fc <__aeabi_fdiv+0x108>
 80005ea:	0242      	lsls	r2, r0, #9
 80005ec:	f47f af7d 	bne.w	80004ea <__aeabi_fmul+0x15e>
 80005f0:	ea93 0f0c 	teq	r3, ip
 80005f4:	f47f af70 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 80005f8:	4608      	mov	r0, r1
 80005fa:	e776      	b.n	80004ea <__aeabi_fmul+0x15e>
 80005fc:	ea93 0f0c 	teq	r3, ip
 8000600:	d104      	bne.n	800060c <__aeabi_fdiv+0x118>
 8000602:	024b      	lsls	r3, r1, #9
 8000604:	f43f af4c 	beq.w	80004a0 <__aeabi_fmul+0x114>
 8000608:	4608      	mov	r0, r1
 800060a:	e76e      	b.n	80004ea <__aeabi_fmul+0x15e>
 800060c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000610:	bf18      	it	ne
 8000612:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000616:	d1ca      	bne.n	80005ae <__aeabi_fdiv+0xba>
 8000618:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800061c:	f47f af5c 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 8000620:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000624:	f47f af3c 	bne.w	80004a0 <__aeabi_fmul+0x114>
 8000628:	e75f      	b.n	80004ea <__aeabi_fmul+0x15e>
 800062a:	bf00      	nop

0800062c <__gesf2>:
 800062c:	f04f 3cff 	mov.w	ip, #4294967295
 8000630:	e006      	b.n	8000640 <__cmpsf2+0x4>
 8000632:	bf00      	nop

08000634 <__lesf2>:
 8000634:	f04f 0c01 	mov.w	ip, #1
 8000638:	e002      	b.n	8000640 <__cmpsf2+0x4>
 800063a:	bf00      	nop

0800063c <__cmpsf2>:
 800063c:	f04f 0c01 	mov.w	ip, #1
 8000640:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000644:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000648:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800064c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000650:	bf18      	it	ne
 8000652:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000656:	d011      	beq.n	800067c <__cmpsf2+0x40>
 8000658:	b001      	add	sp, #4
 800065a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800065e:	bf18      	it	ne
 8000660:	ea90 0f01 	teqne	r0, r1
 8000664:	bf58      	it	pl
 8000666:	ebb2 0003 	subspl.w	r0, r2, r3
 800066a:	bf88      	it	hi
 800066c:	17c8      	asrhi	r0, r1, #31
 800066e:	bf38      	it	cc
 8000670:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000674:	bf18      	it	ne
 8000676:	f040 0001 	orrne.w	r0, r0, #1
 800067a:	4770      	bx	lr
 800067c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000680:	d102      	bne.n	8000688 <__cmpsf2+0x4c>
 8000682:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000686:	d105      	bne.n	8000694 <__cmpsf2+0x58>
 8000688:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800068c:	d1e4      	bne.n	8000658 <__cmpsf2+0x1c>
 800068e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000692:	d0e1      	beq.n	8000658 <__cmpsf2+0x1c>
 8000694:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop

0800069c <__aeabi_cfrcmple>:
 800069c:	4684      	mov	ip, r0
 800069e:	4608      	mov	r0, r1
 80006a0:	4661      	mov	r1, ip
 80006a2:	e7ff      	b.n	80006a4 <__aeabi_cfcmpeq>

080006a4 <__aeabi_cfcmpeq>:
 80006a4:	b50f      	push	{r0, r1, r2, r3, lr}
 80006a6:	f7ff ffc9 	bl	800063c <__cmpsf2>
 80006aa:	2800      	cmp	r0, #0
 80006ac:	bf48      	it	mi
 80006ae:	f110 0f00 	cmnmi.w	r0, #0
 80006b2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006b4 <__aeabi_fcmpeq>:
 80006b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006b8:	f7ff fff4 	bl	80006a4 <__aeabi_cfcmpeq>
 80006bc:	bf0c      	ite	eq
 80006be:	2001      	moveq	r0, #1
 80006c0:	2000      	movne	r0, #0
 80006c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006c6:	bf00      	nop

080006c8 <__aeabi_fcmplt>:
 80006c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006cc:	f7ff ffea 	bl	80006a4 <__aeabi_cfcmpeq>
 80006d0:	bf34      	ite	cc
 80006d2:	2001      	movcc	r0, #1
 80006d4:	2000      	movcs	r0, #0
 80006d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006da:	bf00      	nop

080006dc <__aeabi_fcmple>:
 80006dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e0:	f7ff ffe0 	bl	80006a4 <__aeabi_cfcmpeq>
 80006e4:	bf94      	ite	ls
 80006e6:	2001      	movls	r0, #1
 80006e8:	2000      	movhi	r0, #0
 80006ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ee:	bf00      	nop

080006f0 <__aeabi_fcmpge>:
 80006f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f4:	f7ff ffd2 	bl	800069c <__aeabi_cfrcmple>
 80006f8:	bf94      	ite	ls
 80006fa:	2001      	movls	r0, #1
 80006fc:	2000      	movhi	r0, #0
 80006fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000702:	bf00      	nop

08000704 <__aeabi_fcmpgt>:
 8000704:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000708:	f7ff ffc8 	bl	800069c <__aeabi_cfrcmple>
 800070c:	bf34      	ite	cc
 800070e:	2001      	movcc	r0, #1
 8000710:	2000      	movcs	r0, #0
 8000712:	f85d fb08 	ldr.w	pc, [sp], #8
 8000716:	bf00      	nop

08000718 <__aeabi_fcmpun>:
 8000718:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800071c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000720:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000724:	d102      	bne.n	800072c <__aeabi_fcmpun+0x14>
 8000726:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800072a:	d108      	bne.n	800073e <__aeabi_fcmpun+0x26>
 800072c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000730:	d102      	bne.n	8000738 <__aeabi_fcmpun+0x20>
 8000732:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000736:	d102      	bne.n	800073e <__aeabi_fcmpun+0x26>
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	4770      	bx	lr
 800073e:	f04f 0001 	mov.w	r0, #1
 8000742:	4770      	bx	lr

08000744 <__aeabi_f2iz>:
 8000744:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000748:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800074c:	d30f      	bcc.n	800076e <__aeabi_f2iz+0x2a>
 800074e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000752:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000756:	d90d      	bls.n	8000774 <__aeabi_f2iz+0x30>
 8000758:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800075c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000760:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000764:	fa23 f002 	lsr.w	r0, r3, r2
 8000768:	bf18      	it	ne
 800076a:	4240      	negne	r0, r0
 800076c:	4770      	bx	lr
 800076e:	f04f 0000 	mov.w	r0, #0
 8000772:	4770      	bx	lr
 8000774:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000778:	d101      	bne.n	800077e <__aeabi_f2iz+0x3a>
 800077a:	0242      	lsls	r2, r0, #9
 800077c:	d105      	bne.n	800078a <__aeabi_f2iz+0x46>
 800077e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000782:	bf08      	it	eq
 8000784:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000788:	4770      	bx	lr
 800078a:	f04f 0000 	mov.w	r0, #0
 800078e:	4770      	bx	lr

08000790 <__aeabi_f2uiz>:
 8000790:	0042      	lsls	r2, r0, #1
 8000792:	d20e      	bcs.n	80007b2 <__aeabi_f2uiz+0x22>
 8000794:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000798:	d30b      	bcc.n	80007b2 <__aeabi_f2uiz+0x22>
 800079a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800079e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80007a2:	d409      	bmi.n	80007b8 <__aeabi_f2uiz+0x28>
 80007a4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80007a8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80007ac:	fa23 f002 	lsr.w	r0, r3, r2
 80007b0:	4770      	bx	lr
 80007b2:	f04f 0000 	mov.w	r0, #0
 80007b6:	4770      	bx	lr
 80007b8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80007bc:	d101      	bne.n	80007c2 <__aeabi_f2uiz+0x32>
 80007be:	0242      	lsls	r2, r0, #9
 80007c0:	d102      	bne.n	80007c8 <__aeabi_f2uiz+0x38>
 80007c2:	f04f 30ff 	mov.w	r0, #4294967295
 80007c6:	4770      	bx	lr
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop

080007d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000808 <MX_DMA_Init+0x38>)
 80007d8:	695b      	ldr	r3, [r3, #20]
 80007da:	4a0b      	ldr	r2, [pc, #44]	@ (8000808 <MX_DMA_Init+0x38>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	6153      	str	r3, [r2, #20]
 80007e2:	4b09      	ldr	r3, [pc, #36]	@ (8000808 <MX_DMA_Init+0x38>)
 80007e4:	695b      	ldr	r3, [r3, #20]
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2100      	movs	r1, #0
 80007f2:	2010      	movs	r0, #16
 80007f4:	f005 f983 	bl	8005afe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80007f8:	2010      	movs	r0, #16
 80007fa:	f005 f99c 	bl	8005b36 <HAL_NVIC_EnableIRQ>

}
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40021000 	.word	0x40021000

0800080c <DrawBlock>:
#define INPUT_DEBOUNCE_MS 50             // Milliseconds for switch debounce
#define INPUT_PROCESSING_COOLDOWN_MS 200 // Minimum time between processing inputs

// Helper function to draw a block on the OLED (used by Snake)
static void DrawBlock(int16_t x, int16_t y, uint8_t color)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af02      	add	r7, sp, #8
 8000812:	4603      	mov	r3, r0
 8000814:	80fb      	strh	r3, [r7, #6]
 8000816:	460b      	mov	r3, r1
 8000818:	80bb      	strh	r3, [r7, #4]
 800081a:	4613      	mov	r3, r2
 800081c:	70fb      	strb	r3, [r7, #3]
    OLED_DrawFilledRectangle(x * SNAKE_BLOCK_SIZE, y * SNAKE_BLOCK_SIZE, SNAKE_BLOCK_SIZE, SNAKE_BLOCK_SIZE, color);
 800081e:	88fb      	ldrh	r3, [r7, #6]
 8000820:	009b      	lsls	r3, r3, #2
 8000822:	b29b      	uxth	r3, r3
 8000824:	b218      	sxth	r0, r3
 8000826:	88bb      	ldrh	r3, [r7, #4]
 8000828:	009b      	lsls	r3, r3, #2
 800082a:	b29b      	uxth	r3, r3
 800082c:	b219      	sxth	r1, r3
 800082e:	78fb      	ldrb	r3, [r7, #3]
 8000830:	9300      	str	r3, [sp, #0]
 8000832:	2304      	movs	r3, #4
 8000834:	2204      	movs	r2, #4
 8000836:	f004 fc7a 	bl	800512e <OLED_DrawFilledRectangle>
}
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
	...

08000844 <Snake_GenerateFood>:

// Function to generate food at a random position (used by Snake)
static void Snake_GenerateFood()
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
    bool food_on_snake;
    do
    {
        food_on_snake = false;
 800084a:	2300      	movs	r3, #0
 800084c:	71fb      	strb	r3, [r7, #7]
        food.pos.x = rand() % GAME_AREA_WIDTH;
 800084e:	f007 fc9d 	bl	800818c <rand>
 8000852:	4603      	mov	r3, r0
 8000854:	425a      	negs	r2, r3
 8000856:	f003 031f 	and.w	r3, r3, #31
 800085a:	f002 021f 	and.w	r2, r2, #31
 800085e:	bf58      	it	pl
 8000860:	4253      	negpl	r3, r2
 8000862:	b21a      	sxth	r2, r3
 8000864:	4b20      	ldr	r3, [pc, #128]	@ (80008e8 <Snake_GenerateFood+0xa4>)
 8000866:	801a      	strh	r2, [r3, #0]
        food.pos.y = rand() % GAME_AREA_HEIGHT;
 8000868:	f007 fc90 	bl	800818c <rand>
 800086c:	4602      	mov	r2, r0
 800086e:	4b1f      	ldr	r3, [pc, #124]	@ (80008ec <Snake_GenerateFood+0xa8>)
 8000870:	fb83 1302 	smull	r1, r3, r3, r2
 8000874:	4413      	add	r3, r2
 8000876:	10d9      	asrs	r1, r3, #3
 8000878:	17d3      	asrs	r3, r2, #31
 800087a:	1ac9      	subs	r1, r1, r3
 800087c:	460b      	mov	r3, r1
 800087e:	00db      	lsls	r3, r3, #3
 8000880:	1a5b      	subs	r3, r3, r1
 8000882:	005b      	lsls	r3, r3, #1
 8000884:	1ad1      	subs	r1, r2, r3
 8000886:	b20a      	sxth	r2, r1
 8000888:	4b17      	ldr	r3, [pc, #92]	@ (80008e8 <Snake_GenerateFood+0xa4>)
 800088a:	805a      	strh	r2, [r3, #2]
        for (uint16_t i = 0; i < snake.length; i++)
 800088c:	2300      	movs	r3, #0
 800088e:	80bb      	strh	r3, [r7, #4]
 8000890:	e019      	b.n	80008c6 <Snake_GenerateFood+0x82>
        {
            if (snake.body[i].x == food.pos.x && snake.body[i].y == food.pos.y)
 8000892:	88bb      	ldrh	r3, [r7, #4]
 8000894:	4a16      	ldr	r2, [pc, #88]	@ (80008f0 <Snake_GenerateFood+0xac>)
 8000896:	f932 2023 	ldrsh.w	r2, [r2, r3, lsl #2]
 800089a:	4b13      	ldr	r3, [pc, #76]	@ (80008e8 <Snake_GenerateFood+0xa4>)
 800089c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008a0:	429a      	cmp	r2, r3
 80008a2:	d10d      	bne.n	80008c0 <Snake_GenerateFood+0x7c>
 80008a4:	88bb      	ldrh	r3, [r7, #4]
 80008a6:	4a12      	ldr	r2, [pc, #72]	@ (80008f0 <Snake_GenerateFood+0xac>)
 80008a8:	009b      	lsls	r3, r3, #2
 80008aa:	4413      	add	r3, r2
 80008ac:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80008b0:	4b0d      	ldr	r3, [pc, #52]	@ (80008e8 <Snake_GenerateFood+0xa4>)
 80008b2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80008b6:	429a      	cmp	r2, r3
 80008b8:	d102      	bne.n	80008c0 <Snake_GenerateFood+0x7c>
            {
                food_on_snake = true;
 80008ba:	2301      	movs	r3, #1
 80008bc:	71fb      	strb	r3, [r7, #7]
                break;
 80008be:	e008      	b.n	80008d2 <Snake_GenerateFood+0x8e>
        for (uint16_t i = 0; i < snake.length; i++)
 80008c0:	88bb      	ldrh	r3, [r7, #4]
 80008c2:	3301      	adds	r3, #1
 80008c4:	80bb      	strh	r3, [r7, #4]
 80008c6:	4b0a      	ldr	r3, [pc, #40]	@ (80008f0 <Snake_GenerateFood+0xac>)
 80008c8:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 80008cc:	88ba      	ldrh	r2, [r7, #4]
 80008ce:	429a      	cmp	r2, r3
 80008d0:	d3df      	bcc.n	8000892 <Snake_GenerateFood+0x4e>
            }
        }
    } while (food_on_snake);
 80008d2:	79fb      	ldrb	r3, [r7, #7]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d1b8      	bne.n	800084a <Snake_GenerateFood+0x6>
    food.active = true;
 80008d8:	4b03      	ldr	r3, [pc, #12]	@ (80008e8 <Snake_GenerateFood+0xa4>)
 80008da:	2201      	movs	r2, #1
 80008dc:	711a      	strb	r2, [r3, #4]
}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000230 	.word	0x20000230
 80008ec:	92492493 	.word	0x92492493
 80008f0:	2000009c 	.word	0x2000009c

080008f4 <Snake_InitGame>:

void Snake_InitGame(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
    // srand(HAL_GetTick()); // Seed RNG if not done elsewhere
    gameOver = false;
 80008fa:	4b28      	ldr	r3, [pc, #160]	@ (800099c <Snake_InitGame+0xa8>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	701a      	strb	r2, [r3, #0]
    snake.length = 3;
 8000900:	4b27      	ldr	r3, [pc, #156]	@ (80009a0 <Snake_InitGame+0xac>)
 8000902:	2203      	movs	r2, #3
 8000904:	f8a3 2190 	strh.w	r2, [r3, #400]	@ 0x190
    snake.dir = DIR_RIGHT;
 8000908:	4b25      	ldr	r3, [pc, #148]	@ (80009a0 <Snake_InitGame+0xac>)
 800090a:	2203      	movs	r2, #3
 800090c:	f883 2192 	strb.w	r2, [r3, #402]	@ 0x192
    snake.body[0].x = GAME_AREA_WIDTH / 2;
 8000910:	4b23      	ldr	r3, [pc, #140]	@ (80009a0 <Snake_InitGame+0xac>)
 8000912:	2210      	movs	r2, #16
 8000914:	801a      	strh	r2, [r3, #0]
    snake.body[0].y = GAME_AREA_HEIGHT / 2;
 8000916:	4b22      	ldr	r3, [pc, #136]	@ (80009a0 <Snake_InitGame+0xac>)
 8000918:	2207      	movs	r2, #7
 800091a:	805a      	strh	r2, [r3, #2]
    snake.body[1].x = snake.body[0].x - 1;
 800091c:	4b20      	ldr	r3, [pc, #128]	@ (80009a0 <Snake_InitGame+0xac>)
 800091e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000922:	b29b      	uxth	r3, r3
 8000924:	3b01      	subs	r3, #1
 8000926:	b29b      	uxth	r3, r3
 8000928:	b21a      	sxth	r2, r3
 800092a:	4b1d      	ldr	r3, [pc, #116]	@ (80009a0 <Snake_InitGame+0xac>)
 800092c:	809a      	strh	r2, [r3, #4]
    snake.body[1].y = snake.body[0].y;
 800092e:	4b1c      	ldr	r3, [pc, #112]	@ (80009a0 <Snake_InitGame+0xac>)
 8000930:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000934:	4b1a      	ldr	r3, [pc, #104]	@ (80009a0 <Snake_InitGame+0xac>)
 8000936:	80da      	strh	r2, [r3, #6]
    snake.body[2].x = snake.body[0].x - 2;
 8000938:	4b19      	ldr	r3, [pc, #100]	@ (80009a0 <Snake_InitGame+0xac>)
 800093a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800093e:	b29b      	uxth	r3, r3
 8000940:	3b02      	subs	r3, #2
 8000942:	b29b      	uxth	r3, r3
 8000944:	b21a      	sxth	r2, r3
 8000946:	4b16      	ldr	r3, [pc, #88]	@ (80009a0 <Snake_InitGame+0xac>)
 8000948:	811a      	strh	r2, [r3, #8]
    snake.body[2].y = snake.body[0].y;
 800094a:	4b15      	ldr	r3, [pc, #84]	@ (80009a0 <Snake_InitGame+0xac>)
 800094c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000950:	4b13      	ldr	r3, [pc, #76]	@ (80009a0 <Snake_InitGame+0xac>)
 8000952:	815a      	strh	r2, [r3, #10]
    for (uint16_t i = snake.length; i < SNAKE_MAX_LENGTH; ++i)
 8000954:	4b12      	ldr	r3, [pc, #72]	@ (80009a0 <Snake_InitGame+0xac>)
 8000956:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 800095a:	80fb      	strh	r3, [r7, #6]
 800095c:	e00f      	b.n	800097e <Snake_InitGame+0x8a>
    {
        snake.body[i].x = -1;
 800095e:	88fb      	ldrh	r3, [r7, #6]
 8000960:	4a0f      	ldr	r2, [pc, #60]	@ (80009a0 <Snake_InitGame+0xac>)
 8000962:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000966:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
        snake.body[i].y = -1;
 800096a:	88fb      	ldrh	r3, [r7, #6]
 800096c:	4a0c      	ldr	r2, [pc, #48]	@ (80009a0 <Snake_InitGame+0xac>)
 800096e:	009b      	lsls	r3, r3, #2
 8000970:	4413      	add	r3, r2
 8000972:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000976:	805a      	strh	r2, [r3, #2]
    for (uint16_t i = snake.length; i < SNAKE_MAX_LENGTH; ++i)
 8000978:	88fb      	ldrh	r3, [r7, #6]
 800097a:	3301      	adds	r3, #1
 800097c:	80fb      	strh	r3, [r7, #6]
 800097e:	88fb      	ldrh	r3, [r7, #6]
 8000980:	2b63      	cmp	r3, #99	@ 0x63
 8000982:	d9ec      	bls.n	800095e <Snake_InitGame+0x6a>
    }
    Snake_GenerateFood();
 8000984:	f7ff ff5e 	bl	8000844 <Snake_GenerateFood>
    gameTickLast = HAL_GetTick();
 8000988:	f004 ffb4 	bl	80058f4 <HAL_GetTick>
 800098c:	4603      	mov	r3, r0
 800098e:	4a05      	ldr	r2, [pc, #20]	@ (80009a4 <Snake_InitGame+0xb0>)
 8000990:	6013      	str	r3, [r2, #0]
}
 8000992:	bf00      	nop
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000236 	.word	0x20000236
 80009a0:	2000009c 	.word	0x2000009c
 80009a4:	20000238 	.word	0x20000238

080009a8 <Snake_Draw>:

static void Snake_Draw(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
    for (uint16_t i = 0; i < snake.length; i++)
 80009ae:	2300      	movs	r3, #0
 80009b0:	80fb      	strh	r3, [r7, #6]
 80009b2:	e010      	b.n	80009d6 <Snake_Draw+0x2e>
    {
        DrawBlock(snake.body[i].x, snake.body[i].y, 1);
 80009b4:	88fb      	ldrh	r3, [r7, #6]
 80009b6:	4a1d      	ldr	r2, [pc, #116]	@ (8000a2c <Snake_Draw+0x84>)
 80009b8:	f932 0023 	ldrsh.w	r0, [r2, r3, lsl #2]
 80009bc:	88fb      	ldrh	r3, [r7, #6]
 80009be:	4a1b      	ldr	r2, [pc, #108]	@ (8000a2c <Snake_Draw+0x84>)
 80009c0:	009b      	lsls	r3, r3, #2
 80009c2:	4413      	add	r3, r2
 80009c4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80009c8:	2201      	movs	r2, #1
 80009ca:	4619      	mov	r1, r3
 80009cc:	f7ff ff1e 	bl	800080c <DrawBlock>
    for (uint16_t i = 0; i < snake.length; i++)
 80009d0:	88fb      	ldrh	r3, [r7, #6]
 80009d2:	3301      	adds	r3, #1
 80009d4:	80fb      	strh	r3, [r7, #6]
 80009d6:	4b15      	ldr	r3, [pc, #84]	@ (8000a2c <Snake_Draw+0x84>)
 80009d8:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 80009dc:	88fa      	ldrh	r2, [r7, #6]
 80009de:	429a      	cmp	r2, r3
 80009e0:	d3e8      	bcc.n	80009b4 <Snake_Draw+0xc>
    }
    if (food.active)
 80009e2:	4b13      	ldr	r3, [pc, #76]	@ (8000a30 <Snake_Draw+0x88>)
 80009e4:	791b      	ldrb	r3, [r3, #4]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d009      	beq.n	80009fe <Snake_Draw+0x56>
    {
        DrawBlock(food.pos.x, food.pos.y, 1);
 80009ea:	4b11      	ldr	r3, [pc, #68]	@ (8000a30 <Snake_Draw+0x88>)
 80009ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009f0:	4a0f      	ldr	r2, [pc, #60]	@ (8000a30 <Snake_Draw+0x88>)
 80009f2:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 80009f6:	2201      	movs	r2, #1
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff ff07 	bl	800080c <DrawBlock>
    }
    if (gameOver)
 80009fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000a34 <Snake_Draw+0x8c>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d00e      	beq.n	8000a24 <Snake_Draw+0x7c>
    {
        OLED_DisplayString(OLED_WIDTH / 2 - 3 * 6, OLED_HEIGHT / 2 - 4, "GAME");
 8000a06:	4a0c      	ldr	r2, [pc, #48]	@ (8000a38 <Snake_Draw+0x90>)
 8000a08:	211c      	movs	r1, #28
 8000a0a:	202e      	movs	r0, #46	@ 0x2e
 8000a0c:	f001 fd4e 	bl	80024ac <OLED_DisplayString>
        OLED_DisplayString(OLED_WIDTH / 2 - 3 * 6, OLED_HEIGHT / 2 + 4, "OVER");
 8000a10:	4a0a      	ldr	r2, [pc, #40]	@ (8000a3c <Snake_Draw+0x94>)
 8000a12:	2124      	movs	r1, #36	@ 0x24
 8000a14:	202e      	movs	r0, #46	@ 0x2e
 8000a16:	f001 fd49 	bl	80024ac <OLED_DisplayString>
        OLED_DisplayString(OLED_WIDTH / 2 - 5 * 6, OLED_HEIGHT / 2 + 12, "RST BTN=RS");
 8000a1a:	4a09      	ldr	r2, [pc, #36]	@ (8000a40 <Snake_Draw+0x98>)
 8000a1c:	212c      	movs	r1, #44	@ 0x2c
 8000a1e:	2022      	movs	r0, #34	@ 0x22
 8000a20:	f001 fd44 	bl	80024ac <OLED_DisplayString>
    }
}
 8000a24:	bf00      	nop
 8000a26:	3708      	adds	r7, #8
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	2000009c 	.word	0x2000009c
 8000a30:	20000230 	.word	0x20000230
 8000a34:	20000236 	.word	0x20000236
 8000a38:	0800a9fc 	.word	0x0800a9fc
 8000a3c:	0800aa04 	.word	0x0800aa04
 8000a40:	0800aa0c 	.word	0x0800aa0c

08000a44 <Snake_Update>:

static void Snake_Update(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
    if (gameOver)
 8000a4a:	4b5a      	ldr	r3, [pc, #360]	@ (8000bb4 <Snake_Update+0x170>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	f040 80ab 	bne.w	8000baa <Snake_Update+0x166>
        return;

    Point new_head = snake.body[0];
 8000a54:	4b58      	ldr	r3, [pc, #352]	@ (8000bb8 <Snake_Update+0x174>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	603b      	str	r3, [r7, #0]
    switch (snake.dir)
 8000a5a:	4b57      	ldr	r3, [pc, #348]	@ (8000bb8 <Snake_Update+0x174>)
 8000a5c:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8000a60:	2b03      	cmp	r3, #3
 8000a62:	d82b      	bhi.n	8000abc <Snake_Update+0x78>
 8000a64:	a201      	add	r2, pc, #4	@ (adr r2, 8000a6c <Snake_Update+0x28>)
 8000a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a6a:	bf00      	nop
 8000a6c:	08000a7d 	.word	0x08000a7d
 8000a70:	08000a8d 	.word	0x08000a8d
 8000a74:	08000a9d 	.word	0x08000a9d
 8000a78:	08000aad 	.word	0x08000aad
    {
    case DIR_UP:
        new_head.y--;
 8000a7c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000a80:	b29b      	uxth	r3, r3
 8000a82:	3b01      	subs	r3, #1
 8000a84:	b29b      	uxth	r3, r3
 8000a86:	b21b      	sxth	r3, r3
 8000a88:	807b      	strh	r3, [r7, #2]
        break;
 8000a8a:	e017      	b.n	8000abc <Snake_Update+0x78>
    case DIR_DOWN:
        new_head.y++;
 8000a8c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000a90:	b29b      	uxth	r3, r3
 8000a92:	3301      	adds	r3, #1
 8000a94:	b29b      	uxth	r3, r3
 8000a96:	b21b      	sxth	r3, r3
 8000a98:	807b      	strh	r3, [r7, #2]
        break;
 8000a9a:	e00f      	b.n	8000abc <Snake_Update+0x78>
    case DIR_LEFT:
        new_head.x--;
 8000a9c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000aa0:	b29b      	uxth	r3, r3
 8000aa2:	3b01      	subs	r3, #1
 8000aa4:	b29b      	uxth	r3, r3
 8000aa6:	b21b      	sxth	r3, r3
 8000aa8:	803b      	strh	r3, [r7, #0]
        break;
 8000aaa:	e007      	b.n	8000abc <Snake_Update+0x78>
    case DIR_RIGHT:
        new_head.x++;
 8000aac:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000ab0:	b29b      	uxth	r3, r3
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	b29b      	uxth	r3, r3
 8000ab6:	b21b      	sxth	r3, r3
 8000ab8:	803b      	strh	r3, [r7, #0]
        break;
 8000aba:	bf00      	nop
    }

    if (new_head.x < 0)
 8000abc:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	da02      	bge.n	8000aca <Snake_Update+0x86>
        new_head.x = GAME_AREA_WIDTH - 1;
 8000ac4:	231f      	movs	r3, #31
 8000ac6:	803b      	strh	r3, [r7, #0]
 8000ac8:	e005      	b.n	8000ad6 <Snake_Update+0x92>
    else if (new_head.x >= GAME_AREA_WIDTH)
 8000aca:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000ace:	2b1f      	cmp	r3, #31
 8000ad0:	dd01      	ble.n	8000ad6 <Snake_Update+0x92>
        new_head.x = 0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	803b      	strh	r3, [r7, #0]
    if (new_head.y < 0)
 8000ad6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	da02      	bge.n	8000ae4 <Snake_Update+0xa0>
        new_head.y = GAME_AREA_HEIGHT - 1;
 8000ade:	230d      	movs	r3, #13
 8000ae0:	807b      	strh	r3, [r7, #2]
 8000ae2:	e005      	b.n	8000af0 <Snake_Update+0xac>
    else if (new_head.y >= GAME_AREA_HEIGHT)
 8000ae4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000ae8:	2b0d      	cmp	r3, #13
 8000aea:	dd01      	ble.n	8000af0 <Snake_Update+0xac>
        new_head.y = 0;
 8000aec:	2300      	movs	r3, #0
 8000aee:	807b      	strh	r3, [r7, #2]

    for (uint16_t i = 0; i < snake.length - 1; i++) // Check up to length-1
 8000af0:	2300      	movs	r3, #0
 8000af2:	80fb      	strh	r3, [r7, #6]
 8000af4:	e018      	b.n	8000b28 <Snake_Update+0xe4>
    {
        if (new_head.x == snake.body[i].x && new_head.y == snake.body[i].y)
 8000af6:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000afa:	88fb      	ldrh	r3, [r7, #6]
 8000afc:	492e      	ldr	r1, [pc, #184]	@ (8000bb8 <Snake_Update+0x174>)
 8000afe:	f931 3023 	ldrsh.w	r3, [r1, r3, lsl #2]
 8000b02:	429a      	cmp	r2, r3
 8000b04:	d10d      	bne.n	8000b22 <Snake_Update+0xde>
 8000b06:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000b0a:	88fb      	ldrh	r3, [r7, #6]
 8000b0c:	492a      	ldr	r1, [pc, #168]	@ (8000bb8 <Snake_Update+0x174>)
 8000b0e:	009b      	lsls	r3, r3, #2
 8000b10:	440b      	add	r3, r1
 8000b12:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000b16:	429a      	cmp	r2, r3
 8000b18:	d103      	bne.n	8000b22 <Snake_Update+0xde>
        {
            gameOver = true;
 8000b1a:	4b26      	ldr	r3, [pc, #152]	@ (8000bb4 <Snake_Update+0x170>)
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	701a      	strb	r2, [r3, #0]
            return;
 8000b20:	e044      	b.n	8000bac <Snake_Update+0x168>
    for (uint16_t i = 0; i < snake.length - 1; i++) // Check up to length-1
 8000b22:	88fb      	ldrh	r3, [r7, #6]
 8000b24:	3301      	adds	r3, #1
 8000b26:	80fb      	strh	r3, [r7, #6]
 8000b28:	88fa      	ldrh	r2, [r7, #6]
 8000b2a:	4b23      	ldr	r3, [pc, #140]	@ (8000bb8 <Snake_Update+0x174>)
 8000b2c:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8000b30:	3b01      	subs	r3, #1
 8000b32:	429a      	cmp	r2, r3
 8000b34:	dbdf      	blt.n	8000af6 <Snake_Update+0xb2>
        }
    }

    if (food.active && new_head.x == food.pos.x && new_head.y == food.pos.y)
 8000b36:	4b21      	ldr	r3, [pc, #132]	@ (8000bbc <Snake_Update+0x178>)
 8000b38:	791b      	ldrb	r3, [r3, #4]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d01c      	beq.n	8000b78 <Snake_Update+0x134>
 8000b3e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000b42:	4b1e      	ldr	r3, [pc, #120]	@ (8000bbc <Snake_Update+0x178>)
 8000b44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d115      	bne.n	8000b78 <Snake_Update+0x134>
 8000b4c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000b50:	4b1a      	ldr	r3, [pc, #104]	@ (8000bbc <Snake_Update+0x178>)
 8000b52:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000b56:	429a      	cmp	r2, r3
 8000b58:	d10e      	bne.n	8000b78 <Snake_Update+0x134>
    {
        if (snake.length < SNAKE_MAX_LENGTH)
 8000b5a:	4b17      	ldr	r3, [pc, #92]	@ (8000bb8 <Snake_Update+0x174>)
 8000b5c:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8000b60:	2b63      	cmp	r3, #99	@ 0x63
 8000b62:	d807      	bhi.n	8000b74 <Snake_Update+0x130>
            snake.length++;
 8000b64:	4b14      	ldr	r3, [pc, #80]	@ (8000bb8 <Snake_Update+0x174>)
 8000b66:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	b29a      	uxth	r2, r3
 8000b6e:	4b12      	ldr	r3, [pc, #72]	@ (8000bb8 <Snake_Update+0x174>)
 8000b70:	f8a3 2190 	strh.w	r2, [r3, #400]	@ 0x190
        Snake_GenerateFood();
 8000b74:	f7ff fe66 	bl	8000844 <Snake_GenerateFood>
    }
    // No else needed for tail movement; body shift handles it.

    for (uint16_t i = snake.length - 1; i > 0; i--)
 8000b78:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb8 <Snake_Update+0x174>)
 8000b7a:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8000b7e:	3b01      	subs	r3, #1
 8000b80:	80bb      	strh	r3, [r7, #4]
 8000b82:	e00b      	b.n	8000b9c <Snake_Update+0x158>
    {
        snake.body[i] = snake.body[i - 1];
 8000b84:	88bb      	ldrh	r3, [r7, #4]
 8000b86:	1e5a      	subs	r2, r3, #1
 8000b88:	88bb      	ldrh	r3, [r7, #4]
 8000b8a:	490b      	ldr	r1, [pc, #44]	@ (8000bb8 <Snake_Update+0x174>)
 8000b8c:	480a      	ldr	r0, [pc, #40]	@ (8000bb8 <Snake_Update+0x174>)
 8000b8e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8000b92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (uint16_t i = snake.length - 1; i > 0; i--)
 8000b96:	88bb      	ldrh	r3, [r7, #4]
 8000b98:	3b01      	subs	r3, #1
 8000b9a:	80bb      	strh	r3, [r7, #4]
 8000b9c:	88bb      	ldrh	r3, [r7, #4]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d1f0      	bne.n	8000b84 <Snake_Update+0x140>
    }
    snake.body[0] = new_head;
 8000ba2:	4a05      	ldr	r2, [pc, #20]	@ (8000bb8 <Snake_Update+0x174>)
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	6013      	str	r3, [r2, #0]
 8000ba8:	e000      	b.n	8000bac <Snake_Update+0x168>
        return;
 8000baa:	bf00      	nop
}
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20000236 	.word	0x20000236
 8000bb8:	2000009c 	.word	0x2000009c
 8000bbc:	20000230 	.word	0x20000230

08000bc0 <Snake_HandleInput>:

void Snake_HandleInput(Direction input_dir)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	71fb      	strb	r3, [r7, #7]
    if ((snake.dir == DIR_UP && input_dir != DIR_DOWN) ||
 8000bca:	4b14      	ldr	r3, [pc, #80]	@ (8000c1c <Snake_HandleInput+0x5c>)
 8000bcc:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d102      	bne.n	8000bda <Snake_HandleInput+0x1a>
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d117      	bne.n	8000c0a <Snake_HandleInput+0x4a>
        (snake.dir == DIR_DOWN && input_dir != DIR_UP) ||
 8000bda:	4b10      	ldr	r3, [pc, #64]	@ (8000c1c <Snake_HandleInput+0x5c>)
 8000bdc:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
    if ((snake.dir == DIR_UP && input_dir != DIR_DOWN) ||
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d102      	bne.n	8000bea <Snake_HandleInput+0x2a>
        (snake.dir == DIR_DOWN && input_dir != DIR_UP) ||
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d10f      	bne.n	8000c0a <Snake_HandleInput+0x4a>
        (snake.dir == DIR_LEFT && input_dir != DIR_RIGHT) ||
 8000bea:	4b0c      	ldr	r3, [pc, #48]	@ (8000c1c <Snake_HandleInput+0x5c>)
 8000bec:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
        (snake.dir == DIR_DOWN && input_dir != DIR_UP) ||
 8000bf0:	2b02      	cmp	r3, #2
 8000bf2:	d102      	bne.n	8000bfa <Snake_HandleInput+0x3a>
        (snake.dir == DIR_LEFT && input_dir != DIR_RIGHT) ||
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	2b03      	cmp	r3, #3
 8000bf8:	d107      	bne.n	8000c0a <Snake_HandleInput+0x4a>
        (snake.dir == DIR_RIGHT && input_dir != DIR_LEFT))
 8000bfa:	4b08      	ldr	r3, [pc, #32]	@ (8000c1c <Snake_HandleInput+0x5c>)
 8000bfc:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
        (snake.dir == DIR_LEFT && input_dir != DIR_RIGHT) ||
 8000c00:	2b03      	cmp	r3, #3
 8000c02:	d106      	bne.n	8000c12 <Snake_HandleInput+0x52>
        (snake.dir == DIR_RIGHT && input_dir != DIR_LEFT))
 8000c04:	79fb      	ldrb	r3, [r7, #7]
 8000c06:	2b02      	cmp	r3, #2
 8000c08:	d003      	beq.n	8000c12 <Snake_HandleInput+0x52>
    {
        snake.dir = input_dir;
 8000c0a:	4a04      	ldr	r2, [pc, #16]	@ (8000c1c <Snake_HandleInput+0x5c>)
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
 8000c0e:	f882 3192 	strb.w	r3, [r2, #402]	@ 0x192
    }
}
 8000c12:	bf00      	nop
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bc80      	pop	{r7}
 8000c1a:	4770      	bx	lr
 8000c1c:	2000009c 	.word	0x2000009c

08000c20 <Snake_GameLoop>:

void Snake_GameLoop(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0
    static uint16_t LastCount;
    static bool preMutiTurn = false;

    if (FirstRun)
 8000c26:	4b60      	ldr	r3, [pc, #384]	@ (8000da8 <Snake_GameLoop+0x188>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d006      	beq.n	8000c3c <Snake_GameLoop+0x1c>
    {
        FirstRun = false;
 8000c2e:	4b5e      	ldr	r3, [pc, #376]	@ (8000da8 <Snake_GameLoop+0x188>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	701a      	strb	r2, [r3, #0]
        LastCount = count;
 8000c34:	4b5d      	ldr	r3, [pc, #372]	@ (8000dac <Snake_GameLoop+0x18c>)
 8000c36:	881a      	ldrh	r2, [r3, #0]
 8000c38:	4b5d      	ldr	r3, [pc, #372]	@ (8000db0 <Snake_GameLoop+0x190>)
 8000c3a:	801a      	strh	r2, [r3, #0]
    }

    if (!preMutiTurn)
 8000c3c:	4b5d      	ldr	r3, [pc, #372]	@ (8000db4 <Snake_GameLoop+0x194>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	f083 0301 	eor.w	r3, r3, #1
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d065      	beq.n	8000d16 <Snake_GameLoop+0xf6>
    {
        if (count - LastCount > 1)
 8000c4a:	4b58      	ldr	r3, [pc, #352]	@ (8000dac <Snake_GameLoop+0x18c>)
 8000c4c:	881b      	ldrh	r3, [r3, #0]
 8000c4e:	461a      	mov	r2, r3
 8000c50:	4b57      	ldr	r3, [pc, #348]	@ (8000db0 <Snake_GameLoop+0x190>)
 8000c52:	881b      	ldrh	r3, [r3, #0]
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	dd2a      	ble.n	8000cb0 <Snake_GameLoop+0x90>
        {
            if (snake.dir == DIR_UP)
 8000c5a:	4b57      	ldr	r3, [pc, #348]	@ (8000db8 <Snake_GameLoop+0x198>)
 8000c5c:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d103      	bne.n	8000c6c <Snake_GameLoop+0x4c>
                Snake_HandleInput(DIR_RIGHT);
 8000c64:	2003      	movs	r0, #3
 8000c66:	f7ff ffab 	bl	8000bc0 <Snake_HandleInput>
 8000c6a:	e019      	b.n	8000ca0 <Snake_GameLoop+0x80>
            else if (snake.dir == DIR_DOWN)
 8000c6c:	4b52      	ldr	r3, [pc, #328]	@ (8000db8 <Snake_GameLoop+0x198>)
 8000c6e:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d103      	bne.n	8000c7e <Snake_GameLoop+0x5e>
                Snake_HandleInput(DIR_LEFT);
 8000c76:	2002      	movs	r0, #2
 8000c78:	f7ff ffa2 	bl	8000bc0 <Snake_HandleInput>
 8000c7c:	e010      	b.n	8000ca0 <Snake_GameLoop+0x80>
            else if (snake.dir == DIR_LEFT)
 8000c7e:	4b4e      	ldr	r3, [pc, #312]	@ (8000db8 <Snake_GameLoop+0x198>)
 8000c80:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8000c84:	2b02      	cmp	r3, #2
 8000c86:	d103      	bne.n	8000c90 <Snake_GameLoop+0x70>
                Snake_HandleInput(DIR_UP);
 8000c88:	2000      	movs	r0, #0
 8000c8a:	f7ff ff99 	bl	8000bc0 <Snake_HandleInput>
 8000c8e:	e007      	b.n	8000ca0 <Snake_GameLoop+0x80>
            else if (snake.dir == DIR_RIGHT)
 8000c90:	4b49      	ldr	r3, [pc, #292]	@ (8000db8 <Snake_GameLoop+0x198>)
 8000c92:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8000c96:	2b03      	cmp	r3, #3
 8000c98:	d102      	bne.n	8000ca0 <Snake_GameLoop+0x80>
                Snake_HandleInput(DIR_DOWN);
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	f7ff ff90 	bl	8000bc0 <Snake_HandleInput>

            preMutiTurn = true;
 8000ca0:	4b44      	ldr	r3, [pc, #272]	@ (8000db4 <Snake_GameLoop+0x194>)
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	701a      	strb	r2, [r3, #0]
            LastCount = count;
 8000ca6:	4b41      	ldr	r3, [pc, #260]	@ (8000dac <Snake_GameLoop+0x18c>)
 8000ca8:	881a      	ldrh	r2, [r3, #0]
 8000caa:	4b41      	ldr	r3, [pc, #260]	@ (8000db0 <Snake_GameLoop+0x190>)
 8000cac:	801a      	strh	r2, [r3, #0]
 8000cae:	e032      	b.n	8000d16 <Snake_GameLoop+0xf6>
        }
        else if (count - LastCount < -1)
 8000cb0:	4b3e      	ldr	r3, [pc, #248]	@ (8000dac <Snake_GameLoop+0x18c>)
 8000cb2:	881b      	ldrh	r3, [r3, #0]
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	4b3e      	ldr	r3, [pc, #248]	@ (8000db0 <Snake_GameLoop+0x190>)
 8000cb8:	881b      	ldrh	r3, [r3, #0]
 8000cba:	1ad3      	subs	r3, r2, r3
 8000cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cc0:	da29      	bge.n	8000d16 <Snake_GameLoop+0xf6>
        {
            if (snake.dir == DIR_UP)
 8000cc2:	4b3d      	ldr	r3, [pc, #244]	@ (8000db8 <Snake_GameLoop+0x198>)
 8000cc4:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d103      	bne.n	8000cd4 <Snake_GameLoop+0xb4>
                Snake_HandleInput(DIR_LEFT);
 8000ccc:	2002      	movs	r0, #2
 8000cce:	f7ff ff77 	bl	8000bc0 <Snake_HandleInput>
 8000cd2:	e019      	b.n	8000d08 <Snake_GameLoop+0xe8>
            else if (snake.dir == DIR_DOWN)
 8000cd4:	4b38      	ldr	r3, [pc, #224]	@ (8000db8 <Snake_GameLoop+0x198>)
 8000cd6:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d103      	bne.n	8000ce6 <Snake_GameLoop+0xc6>
                Snake_HandleInput(DIR_RIGHT);
 8000cde:	2003      	movs	r0, #3
 8000ce0:	f7ff ff6e 	bl	8000bc0 <Snake_HandleInput>
 8000ce4:	e010      	b.n	8000d08 <Snake_GameLoop+0xe8>
            else if (snake.dir == DIR_LEFT)
 8000ce6:	4b34      	ldr	r3, [pc, #208]	@ (8000db8 <Snake_GameLoop+0x198>)
 8000ce8:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8000cec:	2b02      	cmp	r3, #2
 8000cee:	d103      	bne.n	8000cf8 <Snake_GameLoop+0xd8>
                Snake_HandleInput(DIR_DOWN);
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	f7ff ff65 	bl	8000bc0 <Snake_HandleInput>
 8000cf6:	e007      	b.n	8000d08 <Snake_GameLoop+0xe8>
            else if (snake.dir == DIR_RIGHT)
 8000cf8:	4b2f      	ldr	r3, [pc, #188]	@ (8000db8 <Snake_GameLoop+0x198>)
 8000cfa:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8000cfe:	2b03      	cmp	r3, #3
 8000d00:	d102      	bne.n	8000d08 <Snake_GameLoop+0xe8>
                Snake_HandleInput(DIR_UP);
 8000d02:	2000      	movs	r0, #0
 8000d04:	f7ff ff5c 	bl	8000bc0 <Snake_HandleInput>

            preMutiTurn = true;
 8000d08:	4b2a      	ldr	r3, [pc, #168]	@ (8000db4 <Snake_GameLoop+0x194>)
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	701a      	strb	r2, [r3, #0]
            LastCount = count;
 8000d0e:	4b27      	ldr	r3, [pc, #156]	@ (8000dac <Snake_GameLoop+0x18c>)
 8000d10:	881a      	ldrh	r2, [r3, #0]
 8000d12:	4b27      	ldr	r3, [pc, #156]	@ (8000db0 <Snake_GameLoop+0x190>)
 8000d14:	801a      	strh	r2, [r3, #0]
        }
    }

    if (HAL_GetTick() - gameTickLast >= GAME_TICK_MS)
 8000d16:	f004 fded 	bl	80058f4 <HAL_GetTick>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	4b27      	ldr	r3, [pc, #156]	@ (8000dbc <Snake_GameLoop+0x19c>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	2b63      	cmp	r3, #99	@ 0x63
 8000d24:	d909      	bls.n	8000d3a <Snake_GameLoop+0x11a>
    {
        Snake_Update();
 8000d26:	f7ff fe8d 	bl	8000a44 <Snake_Update>
        gameTickLast = HAL_GetTick();
 8000d2a:	f004 fde3 	bl	80058f4 <HAL_GetTick>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	4a22      	ldr	r2, [pc, #136]	@ (8000dbc <Snake_GameLoop+0x19c>)
 8000d32:	6013      	str	r3, [r2, #0]
        preMutiTurn = false;
 8000d34:	4b1f      	ldr	r3, [pc, #124]	@ (8000db4 <Snake_GameLoop+0x194>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	701a      	strb	r2, [r3, #0]
    }
    Snake_Draw();
 8000d3a:	f7ff fe35 	bl	80009a8 <Snake_Draw>

    if (gameOver)
 8000d3e:	4b20      	ldr	r3, [pc, #128]	@ (8000dc0 <Snake_GameLoop+0x1a0>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d01d      	beq.n	8000d82 <Snake_GameLoop+0x162>
    {
        if (HAL_GPIO_ReadPin(GAME_INPUT_RESTART_PORT, GAME_INPUT_RESTART_PIN) == GPIO_PIN_RESET)
 8000d46:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d4a:	481e      	ldr	r0, [pc, #120]	@ (8000dc4 <Snake_GameLoop+0x1a4>)
 8000d4c:	f005 f9f2 	bl	8006134 <HAL_GPIO_ReadPin>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d115      	bne.n	8000d82 <Snake_GameLoop+0x162>
        {
            HAL_Delay(INPUT_DEBOUNCE_MS);
 8000d56:	2032      	movs	r0, #50	@ 0x32
 8000d58:	f004 fdd6 	bl	8005908 <HAL_Delay>
            if (HAL_GPIO_ReadPin(GAME_INPUT_RESTART_PORT, GAME_INPUT_RESTART_PIN) == GPIO_PIN_RESET)
 8000d5c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d60:	4818      	ldr	r0, [pc, #96]	@ (8000dc4 <Snake_GameLoop+0x1a4>)
 8000d62:	f005 f9e7 	bl	8006134 <HAL_GPIO_ReadPin>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d10a      	bne.n	8000d82 <Snake_GameLoop+0x162>
            {
                Snake_InitGame();
 8000d6c:	f7ff fdc2 	bl	80008f4 <Snake_InitGame>
                while (HAL_GPIO_ReadPin(GAME_INPUT_RESTART_PORT, GAME_INPUT_RESTART_PIN) == GPIO_PIN_RESET)
 8000d70:	bf00      	nop
 8000d72:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d76:	4813      	ldr	r0, [pc, #76]	@ (8000dc4 <Snake_GameLoop+0x1a4>)
 8000d78:	f005 f9dc 	bl	8006134 <HAL_GPIO_ReadPin>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d0f7      	beq.n	8000d72 <Snake_GameLoop+0x152>
                    ;
            }
        }
    }
    char score_str[20];
    sprintf(score_str, "Score: %d", snake.length - 3);
 8000d82:	4b0d      	ldr	r3, [pc, #52]	@ (8000db8 <Snake_GameLoop+0x198>)
 8000d84:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8000d88:	1eda      	subs	r2, r3, #3
 8000d8a:	1d3b      	adds	r3, r7, #4
 8000d8c:	490e      	ldr	r1, [pc, #56]	@ (8000dc8 <Snake_GameLoop+0x1a8>)
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f007 fafc 	bl	800838c <siprintf>
    OLED_DisplayString(0, OLED_HEIGHT-8, score_str);
 8000d94:	1d3b      	adds	r3, r7, #4
 8000d96:	461a      	mov	r2, r3
 8000d98:	2138      	movs	r1, #56	@ 0x38
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	f001 fb86 	bl	80024ac <OLED_DisplayString>
}
 8000da0:	bf00      	nop
 8000da2:	3718      	adds	r7, #24
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	20000000 	.word	0x20000000
 8000dac:	20000358 	.word	0x20000358
 8000db0:	20000264 	.word	0x20000264
 8000db4:	20000266 	.word	0x20000266
 8000db8:	2000009c 	.word	0x2000009c
 8000dbc:	20000238 	.word	0x20000238
 8000dc0:	20000236 	.word	0x20000236
 8000dc4:	40010c00 	.word	0x40010c00
 8000dc8:	0800aa18 	.word	0x0800aa18

08000dcc <Game2048_AddRandomTile>:

#pragma region 2048 Game Definitions
// --- 2048 Game Implementation ---

static void Game2048_AddRandomTile()
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b092      	sub	sp, #72	@ 0x48
 8000dd0:	af00      	add	r7, sp, #0
    Point empty_tiles[GAME2048_BOARD_SIZE * GAME2048_BOARD_SIZE]; // Use GAME2048_BOARD_SIZE
    uint8_t num_empty_tiles = 0;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 8000dd8:	2300      	movs	r3, #0
 8000dda:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8000dde:	e035      	b.n	8000e4c <Game2048_AddRandomTile+0x80>
    {
        for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 8000de0:	2300      	movs	r3, #0
 8000de2:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8000de6:	e028      	b.n	8000e3a <Game2048_AddRandomTile+0x6e>
        {
            if (game2048_board[r][c].value == 0)
 8000de8:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8000dec:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8000df0:	493a      	ldr	r1, [pc, #232]	@ (8000edc <Game2048_AddRandomTile+0x110>)
 8000df2:	0092      	lsls	r2, r2, #2
 8000df4:	4413      	add	r3, r2
 8000df6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d118      	bne.n	8000e30 <Game2048_AddRandomTile+0x64>
            {
                empty_tiles[num_empty_tiles].x = c;
 8000dfe:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000e02:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8000e06:	b212      	sxth	r2, r2
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	3348      	adds	r3, #72	@ 0x48
 8000e0c:	443b      	add	r3, r7
 8000e0e:	f823 2c48 	strh.w	r2, [r3, #-72]
                empty_tiles[num_empty_tiles].y = r;
 8000e12:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000e16:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8000e1a:	b212      	sxth	r2, r2
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	3348      	adds	r3, #72	@ 0x48
 8000e20:	443b      	add	r3, r7
 8000e22:	f823 2c46 	strh.w	r2, [r3, #-70]
                num_empty_tiles++;
 8000e26:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 8000e30:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8000e34:	3301      	adds	r3, #1
 8000e36:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8000e3a:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8000e3e:	2b03      	cmp	r3, #3
 8000e40:	d9d2      	bls.n	8000de8 <Game2048_AddRandomTile+0x1c>
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 8000e42:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8000e46:	3301      	adds	r3, #1
 8000e48:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8000e4c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8000e50:	2b03      	cmp	r3, #3
 8000e52:	d9c5      	bls.n	8000de0 <Game2048_AddRandomTile+0x14>
            }
        }
    }
    if (num_empty_tiles > 0)
 8000e54:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d03a      	beq.n	8000ed2 <Game2048_AddRandomTile+0x106>
    {
        uint16_t rand_index = rand() % num_empty_tiles;
 8000e5c:	f007 f996 	bl	800818c <rand>
 8000e60:	4602      	mov	r2, r0
 8000e62:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000e66:	fb92 f1f3 	sdiv	r1, r2, r3
 8000e6a:	fb01 f303 	mul.w	r3, r1, r3
 8000e6e:	1ad3      	subs	r3, r2, r3
 8000e70:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        uint8_t r_pos = empty_tiles[rand_index].y;
 8000e74:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	3348      	adds	r3, #72	@ 0x48
 8000e7c:	443b      	add	r3, r7
 8000e7e:	f933 3c46 	ldrsh.w	r3, [r3, #-70]
 8000e82:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
        uint8_t c_pos = empty_tiles[rand_index].x;
 8000e86:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	3348      	adds	r3, #72	@ 0x48
 8000e8e:	443b      	add	r3, r7
 8000e90:	f933 3c48 	ldrsh.w	r3, [r3, #-72]
 8000e94:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
        game2048_board[r_pos][c_pos].value = (rand() % 10 == 0) ? 4 : 2;
 8000e98:	f007 f978 	bl	800818c <rand>
 8000e9c:	4601      	mov	r1, r0
 8000e9e:	4b10      	ldr	r3, [pc, #64]	@ (8000ee0 <Game2048_AddRandomTile+0x114>)
 8000ea0:	fb83 2301 	smull	r2, r3, r3, r1
 8000ea4:	109a      	asrs	r2, r3, #2
 8000ea6:	17cb      	asrs	r3, r1, #31
 8000ea8:	1ad2      	subs	r2, r2, r3
 8000eaa:	4613      	mov	r3, r2
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	4413      	add	r3, r2
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	1aca      	subs	r2, r1, r3
 8000eb4:	2a00      	cmp	r2, #0
 8000eb6:	d101      	bne.n	8000ebc <Game2048_AddRandomTile+0xf0>
 8000eb8:	2004      	movs	r0, #4
 8000eba:	e000      	b.n	8000ebe <Game2048_AddRandomTile+0xf2>
 8000ebc:	2002      	movs	r0, #2
 8000ebe:	f897 2041 	ldrb.w	r2, [r7, #65]	@ 0x41
 8000ec2:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000ec6:	4905      	ldr	r1, [pc, #20]	@ (8000edc <Game2048_AddRandomTile+0x110>)
 8000ec8:	0092      	lsls	r2, r2, #2
 8000eca:	4413      	add	r3, r2
 8000ecc:	4602      	mov	r2, r0
 8000ece:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    }
}
 8000ed2:	bf00      	nop
 8000ed4:	3748      	adds	r7, #72	@ 0x48
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	2000023c 	.word	0x2000023c
 8000ee0:	66666667 	.word	0x66666667

08000ee4 <Game2048_Init>:

void Game2048_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 8000eea:	2300      	movs	r3, #0
 8000eec:	71fb      	strb	r3, [r7, #7]
 8000eee:	e013      	b.n	8000f18 <Game2048_Init+0x34>
    {
        for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	71bb      	strb	r3, [r7, #6]
 8000ef4:	e00a      	b.n	8000f0c <Game2048_Init+0x28>
        {
            game2048_board[r][c].value = 0;
 8000ef6:	79fa      	ldrb	r2, [r7, #7]
 8000ef8:	79bb      	ldrb	r3, [r7, #6]
 8000efa:	4913      	ldr	r1, [pc, #76]	@ (8000f48 <Game2048_Init+0x64>)
 8000efc:	0092      	lsls	r2, r2, #2
 8000efe:	4413      	add	r3, r2
 8000f00:	2200      	movs	r2, #0
 8000f02:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 8000f06:	79bb      	ldrb	r3, [r7, #6]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	71bb      	strb	r3, [r7, #6]
 8000f0c:	79bb      	ldrb	r3, [r7, #6]
 8000f0e:	2b03      	cmp	r3, #3
 8000f10:	d9f1      	bls.n	8000ef6 <Game2048_Init+0x12>
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	3301      	adds	r3, #1
 8000f16:	71fb      	strb	r3, [r7, #7]
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	2b03      	cmp	r3, #3
 8000f1c:	d9e8      	bls.n	8000ef0 <Game2048_Init+0xc>
        }
    }
    game2048_score = 0;
 8000f1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f4c <Game2048_Init+0x68>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
    game2048_game_over = false;
 8000f24:	4b0a      	ldr	r3, [pc, #40]	@ (8000f50 <Game2048_Init+0x6c>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	701a      	strb	r2, [r3, #0]
    game2048_game_won = false;
 8000f2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f54 <Game2048_Init+0x70>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	701a      	strb	r2, [r3, #0]
    game2048_move_made_this_turn = false;
 8000f30:	4b09      	ldr	r3, [pc, #36]	@ (8000f58 <Game2048_Init+0x74>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	701a      	strb	r2, [r3, #0]
    Game2048_AddRandomTile();
 8000f36:	f7ff ff49 	bl	8000dcc <Game2048_AddRandomTile>

    OLED_UpdateDisplayVSync(); // Update display to show the initial state
 8000f3a:	f000 fec7 	bl	8001ccc <OLED_UpdateDisplayVSync>
}
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	2000023c 	.word	0x2000023c
 8000f4c:	2000025c 	.word	0x2000025c
 8000f50:	20000260 	.word	0x20000260
 8000f54:	20000261 	.word	0x20000261
 8000f58:	20000262 	.word	0x20000262

08000f5c <Game2048_Restart>:

void Game2048_Restart(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
    Game2048_Init();
 8000f60:	f7ff ffc0 	bl	8000ee4 <Game2048_Init>
}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <Game2048_DrawBoard>:

void Game2048_DrawBoard(void)
{
 8000f68:	b590      	push	{r4, r7, lr}
 8000f6a:	b089      	sub	sp, #36	@ 0x24
 8000f6c:	af02      	add	r7, sp, #8
    OLED_ClearBuffer();
 8000f6e:	f000 fe65 	bl	8001c3c <OLED_ClearBuffer>
    char str_buffer[10];
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 8000f72:	2300      	movs	r3, #0
 8000f74:	75fb      	strb	r3, [r7, #23]
 8000f76:	e068      	b.n	800104a <Game2048_DrawBoard+0xe2>
    {
        for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 8000f78:	2300      	movs	r3, #0
 8000f7a:	75bb      	strb	r3, [r7, #22]
 8000f7c:	e05f      	b.n	800103e <Game2048_DrawBoard+0xd6>
        {
            uint16_t val = game2048_board[r][c].value;
 8000f7e:	7dfa      	ldrb	r2, [r7, #23]
 8000f80:	7dbb      	ldrb	r3, [r7, #22]
 8000f82:	494d      	ldr	r1, [pc, #308]	@ (80010b8 <Game2048_DrawBoard+0x150>)
 8000f84:	0092      	lsls	r2, r2, #2
 8000f86:	4413      	add	r3, r2
 8000f88:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000f8c:	82bb      	strh	r3, [r7, #20]
            uint8_t tile_x = c * GAME2048_TILE_WIDTH;
 8000f8e:	7dbb      	ldrb	r3, [r7, #22]
 8000f90:	015b      	lsls	r3, r3, #5
 8000f92:	74fb      	strb	r3, [r7, #19]
            uint8_t tile_y = r * GAME2048_TILE_HEIGHT;
 8000f94:	7dfb      	ldrb	r3, [r7, #23]
 8000f96:	461a      	mov	r2, r3
 8000f98:	00d2      	lsls	r2, r2, #3
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	74bb      	strb	r3, [r7, #18]
            uint8_t tile_inner_width = GAME2048_TILE_WIDTH - 2 * GAME2048_TILE_PADDING;
 8000fa0:	231e      	movs	r3, #30
 8000fa2:	747b      	strb	r3, [r7, #17]
            uint8_t tile_inner_height = GAME2048_TILE_HEIGHT - 2 * GAME2048_TILE_PADDING;
 8000fa4:	230c      	movs	r3, #12
 8000fa6:	743b      	strb	r3, [r7, #16]

            OLED_DrawFilledRectangle(tile_x + GAME2048_TILE_PADDING,
 8000fa8:	7cfb      	ldrb	r3, [r7, #19]
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	3301      	adds	r3, #1
 8000fae:	b29b      	uxth	r3, r3
 8000fb0:	b218      	sxth	r0, r3
                                     tile_y + GAME2048_TILE_PADDING,
 8000fb2:	7cbb      	ldrb	r3, [r7, #18]
 8000fb4:	b29b      	uxth	r3, r3
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	b29b      	uxth	r3, r3
            OLED_DrawFilledRectangle(tile_x + GAME2048_TILE_PADDING,
 8000fba:	b219      	sxth	r1, r3
 8000fbc:	8abb      	ldrh	r3, [r7, #20]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	bf14      	ite	ne
 8000fc2:	2301      	movne	r3, #1
 8000fc4:	2300      	moveq	r3, #0
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	461c      	mov	r4, r3
 8000fca:	7c3b      	ldrb	r3, [r7, #16]
 8000fcc:	7c7a      	ldrb	r2, [r7, #17]
 8000fce:	9400      	str	r4, [sp, #0]
 8000fd0:	f004 f8ad 	bl	800512e <OLED_DrawFilledRectangle>
                                     tile_inner_width, tile_inner_height,
                                     (val == 0) ? 0 : 1);
            if (val > 0)
 8000fd4:	8abb      	ldrh	r3, [r7, #20]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d02e      	beq.n	8001038 <Game2048_DrawBoard+0xd0>
            {
                sprintf(str_buffer, "%d", val);
 8000fda:	8aba      	ldrh	r2, [r7, #20]
 8000fdc:	463b      	mov	r3, r7
 8000fde:	4937      	ldr	r1, [pc, #220]	@ (80010bc <Game2048_DrawBoard+0x154>)
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f007 f9d3 	bl	800838c <siprintf>
                uint8_t text_width = strlen(str_buffer) * 6;
 8000fe6:	463b      	mov	r3, r7
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff f8b9 	bl	8000160 <strlen>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	0052      	lsls	r2, r2, #1
 8000ff6:	4413      	add	r3, r2
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	73fb      	strb	r3, [r7, #15]
                uint8_t text_height = 8;
 8000ffc:	2308      	movs	r3, #8
 8000ffe:	73bb      	strb	r3, [r7, #14]
                uint8_t text_x = tile_x + (GAME2048_TILE_WIDTH - text_width) / 2;
 8001000:	7bfb      	ldrb	r3, [r7, #15]
 8001002:	f1c3 0320 	rsb	r3, r3, #32
 8001006:	0fda      	lsrs	r2, r3, #31
 8001008:	4413      	add	r3, r2
 800100a:	105b      	asrs	r3, r3, #1
 800100c:	b2da      	uxtb	r2, r3
 800100e:	7cfb      	ldrb	r3, [r7, #19]
 8001010:	4413      	add	r3, r2
 8001012:	737b      	strb	r3, [r7, #13]
                uint8_t text_y = tile_y + (GAME2048_TILE_HEIGHT - text_height) / 2;
 8001014:	7bbb      	ldrb	r3, [r7, #14]
 8001016:	f1c3 030e 	rsb	r3, r3, #14
 800101a:	0fda      	lsrs	r2, r3, #31
 800101c:	4413      	add	r3, r2
 800101e:	105b      	asrs	r3, r3, #1
 8001020:	b2da      	uxtb	r2, r3
 8001022:	7cbb      	ldrb	r3, [r7, #18]
 8001024:	4413      	add	r3, r2
 8001026:	733b      	strb	r3, [r7, #12]
                OLED_DisplayStringInverted(text_x, text_y, str_buffer, 1);
 8001028:	7b7b      	ldrb	r3, [r7, #13]
 800102a:	b218      	sxth	r0, r3
 800102c:	7b3b      	ldrb	r3, [r7, #12]
 800102e:	b219      	sxth	r1, r3
 8001030:	463a      	mov	r2, r7
 8001032:	2301      	movs	r3, #1
 8001034:	f001 fa87 	bl	8002546 <OLED_DisplayStringInverted>
        for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 8001038:	7dbb      	ldrb	r3, [r7, #22]
 800103a:	3301      	adds	r3, #1
 800103c:	75bb      	strb	r3, [r7, #22]
 800103e:	7dbb      	ldrb	r3, [r7, #22]
 8001040:	2b03      	cmp	r3, #3
 8001042:	d99c      	bls.n	8000f7e <Game2048_DrawBoard+0x16>
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 8001044:	7dfb      	ldrb	r3, [r7, #23]
 8001046:	3301      	adds	r3, #1
 8001048:	75fb      	strb	r3, [r7, #23]
 800104a:	7dfb      	ldrb	r3, [r7, #23]
 800104c:	2b03      	cmp	r3, #3
 800104e:	d993      	bls.n	8000f78 <Game2048_DrawBoard+0x10>
            }
        }
    }
    sprintf(str_buffer, "Scores:%lu", game2048_score);
 8001050:	4b1b      	ldr	r3, [pc, #108]	@ (80010c0 <Game2048_DrawBoard+0x158>)
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	463b      	mov	r3, r7
 8001056:	491b      	ldr	r1, [pc, #108]	@ (80010c4 <Game2048_DrawBoard+0x15c>)
 8001058:	4618      	mov	r0, r3
 800105a:	f007 f997 	bl	800838c <siprintf>
    OLED_DisplayString(0, OLED_HEIGHT - 8, str_buffer);
 800105e:	463b      	mov	r3, r7
 8001060:	461a      	mov	r2, r3
 8001062:	2138      	movs	r1, #56	@ 0x38
 8001064:	2000      	movs	r0, #0
 8001066:	f001 fa21 	bl	80024ac <OLED_DisplayString>

    if (game2048_game_over)
 800106a:	4b17      	ldr	r3, [pc, #92]	@ (80010c8 <Game2048_DrawBoard+0x160>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d014      	beq.n	800109c <Game2048_DrawBoard+0x134>
    {
        OLED_DrawFilledRectangle(0, 0, OLED_WIDTH, OLED_HEIGHT-8, 1);
 8001072:	2301      	movs	r3, #1
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	2338      	movs	r3, #56	@ 0x38
 8001078:	2280      	movs	r2, #128	@ 0x80
 800107a:	2100      	movs	r1, #0
 800107c:	2000      	movs	r0, #0
 800107e:	f004 f856 	bl	800512e <OLED_DrawFilledRectangle>
        OLED_DisplayStringInverted((OLED_WIDTH - 8 * 6) / 2, GAME_BOARD_DISPLAY_HEIGHT / 2 - 8, "GAME OVER", 1);
 8001082:	2301      	movs	r3, #1
 8001084:	4a11      	ldr	r2, [pc, #68]	@ (80010cc <Game2048_DrawBoard+0x164>)
 8001086:	2114      	movs	r1, #20
 8001088:	2028      	movs	r0, #40	@ 0x28
 800108a:	f001 fa5c 	bl	8002546 <OLED_DisplayStringInverted>
        OLED_DisplayStringInverted((OLED_WIDTH - 10 * 6) / 2, GAME_BOARD_DISPLAY_HEIGHT / 2, "RST BTN=RS", 1);
 800108e:	2301      	movs	r3, #1
 8001090:	4a0f      	ldr	r2, [pc, #60]	@ (80010d0 <Game2048_DrawBoard+0x168>)
 8001092:	211c      	movs	r1, #28
 8001094:	2022      	movs	r0, #34	@ 0x22
 8001096:	f001 fa56 	bl	8002546 <OLED_DisplayStringInverted>
    }
    else if (game2048_game_won)
    {
        OLED_DisplayString((OLED_WIDTH - 7 * 6) / 2, GAME_BOARD_DISPLAY_HEIGHT / 2 - 4, "YOU WIN!");
    }
}
 800109a:	e008      	b.n	80010ae <Game2048_DrawBoard+0x146>
    else if (game2048_game_won)
 800109c:	4b0d      	ldr	r3, [pc, #52]	@ (80010d4 <Game2048_DrawBoard+0x16c>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d004      	beq.n	80010ae <Game2048_DrawBoard+0x146>
        OLED_DisplayString((OLED_WIDTH - 7 * 6) / 2, GAME_BOARD_DISPLAY_HEIGHT / 2 - 4, "YOU WIN!");
 80010a4:	4a0c      	ldr	r2, [pc, #48]	@ (80010d8 <Game2048_DrawBoard+0x170>)
 80010a6:	2118      	movs	r1, #24
 80010a8:	202b      	movs	r0, #43	@ 0x2b
 80010aa:	f001 f9ff 	bl	80024ac <OLED_DisplayString>
}
 80010ae:	bf00      	nop
 80010b0:	371c      	adds	r7, #28
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd90      	pop	{r4, r7, pc}
 80010b6:	bf00      	nop
 80010b8:	2000023c 	.word	0x2000023c
 80010bc:	0800aa24 	.word	0x0800aa24
 80010c0:	2000025c 	.word	0x2000025c
 80010c4:	0800aa28 	.word	0x0800aa28
 80010c8:	20000260 	.word	0x20000260
 80010cc:	0800aa34 	.word	0x0800aa34
 80010d0:	0800aa0c 	.word	0x0800aa0c
 80010d4:	20000261 	.word	0x20000261
 80010d8:	0800aa40 	.word	0x0800aa40

080010dc <Game2048_CompactAndMerge>:

static void Game2048_CompactAndMerge(uint8_t line_idx, Direction dir, bool is_row)
{
 80010dc:	b490      	push	{r4, r7}
 80010de:	b08c      	sub	sp, #48	@ 0x30
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	71fb      	strb	r3, [r7, #7]
 80010e6:	460b      	mov	r3, r1
 80010e8:	71bb      	strb	r3, [r7, #6]
 80010ea:	4613      	mov	r3, r2
 80010ec:	717b      	strb	r3, [r7, #5]
    uint8_t line_size = GAME2048_BOARD_SIZE;          // Use GAME2048_BOARD_SIZE
 80010ee:	2304      	movs	r3, #4
 80010f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    uint16_t temp_line[GAME2048_BOARD_SIZE] = {0};    // Use GAME2048_BOARD_SIZE
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
    uint16_t original_line_copy[GAME2048_BOARD_SIZE]; // To check if anything changed

    for (uint8_t i = 0; i < line_size; ++i)
 80010fe:	2300      	movs	r3, #0
 8001100:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001104:	e01f      	b.n	8001146 <Game2048_CompactAndMerge+0x6a>
    {
        original_line_copy[i] = is_row ? game2048_board[line_idx][i].value : game2048_board[i][line_idx].value;
 8001106:	797b      	ldrb	r3, [r7, #5]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d008      	beq.n	800111e <Game2048_CompactAndMerge+0x42>
 800110c:	79fa      	ldrb	r2, [r7, #7]
 800110e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001112:	49c2      	ldr	r1, [pc, #776]	@ (800141c <Game2048_CompactAndMerge+0x340>)
 8001114:	0092      	lsls	r2, r2, #2
 8001116:	4413      	add	r3, r2
 8001118:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800111c:	e007      	b.n	800112e <Game2048_CompactAndMerge+0x52>
 800111e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	49bd      	ldr	r1, [pc, #756]	@ (800141c <Game2048_CompactAndMerge+0x340>)
 8001126:	0092      	lsls	r2, r2, #2
 8001128:	4413      	add	r3, r2
 800112a:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800112e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	3330      	adds	r3, #48	@ 0x30
 8001136:	443b      	add	r3, r7
 8001138:	f823 2c24 	strh.w	r2, [r3, #-36]
    for (uint8_t i = 0; i < line_size; ++i)
 800113c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001140:	3301      	adds	r3, #1
 8001142:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001146:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800114a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800114e:	429a      	cmp	r2, r3
 8001150:	d3d9      	bcc.n	8001106 <Game2048_CompactAndMerge+0x2a>
    }

    int8_t write_pos = 0;
 8001152:	2300      	movs	r3, #0
 8001154:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t increment = 1;
 8001158:	2301      	movs	r3, #1
 800115a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

    if (dir == DIR_DOWN || dir == DIR_RIGHT)
 800115e:	79bb      	ldrb	r3, [r7, #6]
 8001160:	2b01      	cmp	r3, #1
 8001162:	d002      	beq.n	800116a <Game2048_CompactAndMerge+0x8e>
 8001164:	79bb      	ldrb	r3, [r7, #6]
 8001166:	2b03      	cmp	r3, #3
 8001168:	d108      	bne.n	800117c <Game2048_CompactAndMerge+0xa0>
    {
        write_pos = line_size - 1;
 800116a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800116e:	3b01      	subs	r3, #1
 8001170:	b2db      	uxtb	r3, r3
 8001172:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
        increment = -1;
 8001176:	23ff      	movs	r3, #255	@ 0xff
 8001178:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    }

    int8_t compact_pos = write_pos;
 800117c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001180:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    for (int8_t i = 0; i < line_size; ++i)
 8001184:	2300      	movs	r3, #0
 8001186:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800118a:	e041      	b.n	8001210 <Game2048_CompactAndMerge+0x134>
    {
        int8_t read_pos_actual = (dir == DIR_DOWN || dir == DIR_RIGHT) ? (line_size - 1 - i) : i;
 800118c:	79bb      	ldrb	r3, [r7, #6]
 800118e:	2b01      	cmp	r3, #1
 8001190:	d002      	beq.n	8001198 <Game2048_CompactAndMerge+0xbc>
 8001192:	79bb      	ldrb	r3, [r7, #6]
 8001194:	2b03      	cmp	r3, #3
 8001196:	d109      	bne.n	80011ac <Game2048_CompactAndMerge+0xd0>
 8001198:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800119c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	3b01      	subs	r3, #1
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	b25b      	sxtb	r3, r3
 80011aa:	e001      	b.n	80011b0 <Game2048_CompactAndMerge+0xd4>
 80011ac:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80011b0:	f887 3020 	strb.w	r3, [r7, #32]
        uint16_t current_tile_value = is_row ? game2048_board[line_idx][read_pos_actual].value
 80011b4:	797b      	ldrb	r3, [r7, #5]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d008      	beq.n	80011cc <Game2048_CompactAndMerge+0xf0>
 80011ba:	79fa      	ldrb	r2, [r7, #7]
 80011bc:	f997 3020 	ldrsb.w	r3, [r7, #32]
 80011c0:	4996      	ldr	r1, [pc, #600]	@ (800141c <Game2048_CompactAndMerge+0x340>)
 80011c2:	0092      	lsls	r2, r2, #2
 80011c4:	4413      	add	r3, r2
 80011c6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80011ca:	e007      	b.n	80011dc <Game2048_CompactAndMerge+0x100>
                                             : game2048_board[read_pos_actual][line_idx].value;
 80011cc:	f997 2020 	ldrsb.w	r2, [r7, #32]
 80011d0:	79fb      	ldrb	r3, [r7, #7]
        uint16_t current_tile_value = is_row ? game2048_board[line_idx][read_pos_actual].value
 80011d2:	4992      	ldr	r1, [pc, #584]	@ (800141c <Game2048_CompactAndMerge+0x340>)
 80011d4:	0092      	lsls	r2, r2, #2
 80011d6:	4413      	add	r3, r2
 80011d8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80011dc:	83fb      	strh	r3, [r7, #30]
        if (current_tile_value != 0)
 80011de:	8bfb      	ldrh	r3, [r7, #30]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d00f      	beq.n	8001204 <Game2048_CompactAndMerge+0x128>
        {
            temp_line[compact_pos] = current_tile_value;
 80011e4:	f997 302c 	ldrsb.w	r3, [r7, #44]	@ 0x2c
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	3330      	adds	r3, #48	@ 0x30
 80011ec:	443b      	add	r3, r7
 80011ee:	8bfa      	ldrh	r2, [r7, #30]
 80011f0:	f823 2c1c 	strh.w	r2, [r3, #-28]
            compact_pos += increment;
 80011f4:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80011f8:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80011fc:	4413      	add	r3, r2
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    for (int8_t i = 0; i < line_size; ++i)
 8001204:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001208:	3301      	adds	r3, #1
 800120a:	b2db      	uxtb	r3, r3
 800120c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001210:	f997 202b 	ldrsb.w	r2, [r7, #43]	@ 0x2b
 8001214:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001218:	429a      	cmp	r2, r3
 800121a:	dbb7      	blt.n	800118c <Game2048_CompactAndMerge+0xb0>
        }
    }

    for (int8_t i = 0; i < line_size - 1; ++i)
 800121c:	2300      	movs	r3, #0
 800121e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8001222:	e078      	b.n	8001316 <Game2048_CompactAndMerge+0x23a>
    {
        int8_t current_idx = (dir == DIR_DOWN || dir == DIR_RIGHT) ? (line_size - 1 - i) : i;
 8001224:	79bb      	ldrb	r3, [r7, #6]
 8001226:	2b01      	cmp	r3, #1
 8001228:	d002      	beq.n	8001230 <Game2048_CompactAndMerge+0x154>
 800122a:	79bb      	ldrb	r3, [r7, #6]
 800122c:	2b03      	cmp	r3, #3
 800122e:	d109      	bne.n	8001244 <Game2048_CompactAndMerge+0x168>
 8001230:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001234:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	b2db      	uxtb	r3, r3
 800123c:	3b01      	subs	r3, #1
 800123e:	b2db      	uxtb	r3, r3
 8001240:	b25b      	sxtb	r3, r3
 8001242:	e001      	b.n	8001248 <Game2048_CompactAndMerge+0x16c>
 8001244:	f997 302a 	ldrsb.w	r3, [r7, #42]	@ 0x2a
 8001248:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        int8_t next_idx = current_idx + increment;
 800124c:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8001250:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001254:	4413      	add	r3, r2
 8001256:	b2db      	uxtb	r3, r3
 8001258:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        if (next_idx < 0 || next_idx >= line_size)
 800125c:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8001260:	2b00      	cmp	r3, #0
 8001262:	db51      	blt.n	8001308 <Game2048_CompactAndMerge+0x22c>
 8001264:	f997 2021 	ldrsb.w	r2, [r7, #33]	@ 0x21
 8001268:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800126c:	429a      	cmp	r2, r3
 800126e:	da4b      	bge.n	8001308 <Game2048_CompactAndMerge+0x22c>
            continue;

        if (temp_line[current_idx] != 0 && temp_line[current_idx] == temp_line[next_idx])
 8001270:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	3330      	adds	r3, #48	@ 0x30
 8001278:	443b      	add	r3, r7
 800127a:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d043      	beq.n	800130a <Game2048_CompactAndMerge+0x22e>
 8001282:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	3330      	adds	r3, #48	@ 0x30
 800128a:	443b      	add	r3, r7
 800128c:	f833 2c1c 	ldrh.w	r2, [r3, #-28]
 8001290:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	3330      	adds	r3, #48	@ 0x30
 8001298:	443b      	add	r3, r7
 800129a:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 800129e:	429a      	cmp	r2, r3
 80012a0:	d133      	bne.n	800130a <Game2048_CompactAndMerge+0x22e>
        {
            temp_line[current_idx] *= 2;
 80012a2:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	3330      	adds	r3, #48	@ 0x30
 80012aa:	443b      	add	r3, r7
 80012ac:	f833 2c1c 	ldrh.w	r2, [r3, #-28]
 80012b0:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 80012b4:	0052      	lsls	r2, r2, #1
 80012b6:	b292      	uxth	r2, r2
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	3330      	adds	r3, #48	@ 0x30
 80012bc:	443b      	add	r3, r7
 80012be:	f823 2c1c 	strh.w	r2, [r3, #-28]
            game2048_score += temp_line[current_idx];
 80012c2:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	3330      	adds	r3, #48	@ 0x30
 80012ca:	443b      	add	r3, r7
 80012cc:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 80012d0:	461a      	mov	r2, r3
 80012d2:	4b53      	ldr	r3, [pc, #332]	@ (8001420 <Game2048_CompactAndMerge+0x344>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4413      	add	r3, r2
 80012d8:	4a51      	ldr	r2, [pc, #324]	@ (8001420 <Game2048_CompactAndMerge+0x344>)
 80012da:	6013      	str	r3, [r2, #0]
            temp_line[next_idx] = 0;
 80012dc:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	3330      	adds	r3, #48	@ 0x30
 80012e4:	443b      	add	r3, r7
 80012e6:	2200      	movs	r2, #0
 80012e8:	f823 2c1c 	strh.w	r2, [r3, #-28]
            if (temp_line[current_idx] == 2048)
 80012ec:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	3330      	adds	r3, #48	@ 0x30
 80012f4:	443b      	add	r3, r7
 80012f6:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 80012fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80012fe:	d104      	bne.n	800130a <Game2048_CompactAndMerge+0x22e>
                game2048_game_won = true;
 8001300:	4b48      	ldr	r3, [pc, #288]	@ (8001424 <Game2048_CompactAndMerge+0x348>)
 8001302:	2201      	movs	r2, #1
 8001304:	701a      	strb	r2, [r3, #0]
 8001306:	e000      	b.n	800130a <Game2048_CompactAndMerge+0x22e>
            continue;
 8001308:	bf00      	nop
    for (int8_t i = 0; i < line_size - 1; ++i)
 800130a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800130e:	3301      	adds	r3, #1
 8001310:	b2db      	uxtb	r3, r3
 8001312:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8001316:	f997 202a 	ldrsb.w	r2, [r7, #42]	@ 0x2a
 800131a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800131e:	3b01      	subs	r3, #1
 8001320:	429a      	cmp	r2, r3
 8001322:	f6ff af7f 	blt.w	8001224 <Game2048_CompactAndMerge+0x148>
        }
    }

    compact_pos = write_pos;
 8001326:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800132a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    for (int8_t i = 0; i < line_size; ++i)
 800132e:	2300      	movs	r3, #0
 8001330:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 8001334:	e045      	b.n	80013c2 <Game2048_CompactAndMerge+0x2e6>
    {
        int8_t read_pos_temp = (dir == DIR_DOWN || dir == DIR_RIGHT) ? (line_size - 1 - i) : i;
 8001336:	79bb      	ldrb	r3, [r7, #6]
 8001338:	2b01      	cmp	r3, #1
 800133a:	d002      	beq.n	8001342 <Game2048_CompactAndMerge+0x266>
 800133c:	79bb      	ldrb	r3, [r7, #6]
 800133e:	2b03      	cmp	r3, #3
 8001340:	d109      	bne.n	8001356 <Game2048_CompactAndMerge+0x27a>
 8001342:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8001346:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	b2db      	uxtb	r3, r3
 800134e:	3b01      	subs	r3, #1
 8001350:	b2db      	uxtb	r3, r3
 8001352:	b25b      	sxtb	r3, r3
 8001354:	e001      	b.n	800135a <Game2048_CompactAndMerge+0x27e>
 8001356:	f997 3029 	ldrsb.w	r3, [r7, #41]	@ 0x29
 800135a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        // The condition "if (temp_line[read_pos_temp] != 0)" was problematic.
        // temp_line already contains the correct values, including zeros, after compaction and merging.
        // We should always write the value from temp_line to the board and advance compact_pos.
        if (is_row)
 800135e:	797b      	ldrb	r3, [r7, #5]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d010      	beq.n	8001386 <Game2048_CompactAndMerge+0x2aa>
        {
            game2048_board[line_idx][compact_pos].value = temp_line[read_pos_temp];
 8001364:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8001368:	79f9      	ldrb	r1, [r7, #7]
 800136a:	f997 202c 	ldrsb.w	r2, [r7, #44]	@ 0x2c
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	3330      	adds	r3, #48	@ 0x30
 8001372:	443b      	add	r3, r7
 8001374:	f833 4c1c 	ldrh.w	r4, [r3, #-28]
 8001378:	4828      	ldr	r0, [pc, #160]	@ (800141c <Game2048_CompactAndMerge+0x340>)
 800137a:	008b      	lsls	r3, r1, #2
 800137c:	4413      	add	r3, r2
 800137e:	4622      	mov	r2, r4
 8001380:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
 8001384:	e00f      	b.n	80013a6 <Game2048_CompactAndMerge+0x2ca>
        }
        else
        {
            game2048_board[compact_pos][line_idx].value = temp_line[read_pos_temp];
 8001386:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800138a:	f997 102c 	ldrsb.w	r1, [r7, #44]	@ 0x2c
 800138e:	79fa      	ldrb	r2, [r7, #7]
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	3330      	adds	r3, #48	@ 0x30
 8001394:	443b      	add	r3, r7
 8001396:	f833 4c1c 	ldrh.w	r4, [r3, #-28]
 800139a:	4820      	ldr	r0, [pc, #128]	@ (800141c <Game2048_CompactAndMerge+0x340>)
 800139c:	008b      	lsls	r3, r1, #2
 800139e:	4413      	add	r3, r2
 80013a0:	4622      	mov	r2, r4
 80013a2:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
        }
        compact_pos += increment; // compact_pos should always be updated.
 80013a6:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80013aa:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80013ae:	4413      	add	r3, r2
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    for (int8_t i = 0; i < line_size; ++i)
 80013b6:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80013ba:	3301      	adds	r3, #1
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 80013c2:	f997 2029 	ldrsb.w	r2, [r7, #41]	@ 0x29
 80013c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80013ca:	429a      	cmp	r2, r3
 80013cc:	dbb3      	blt.n	8001336 <Game2048_CompactAndMerge+0x25a>
    }

    for (uint8_t i = 0; i < line_size; ++i)
 80013ce:	2300      	movs	r3, #0
 80013d0:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 80013d4:	e02f      	b.n	8001436 <Game2048_CompactAndMerge+0x35a>
    {
        uint16_t current_val = is_row ? game2048_board[line_idx][i].value : game2048_board[i][line_idx].value;
 80013d6:	797b      	ldrb	r3, [r7, #5]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d008      	beq.n	80013ee <Game2048_CompactAndMerge+0x312>
 80013dc:	79fa      	ldrb	r2, [r7, #7]
 80013de:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80013e2:	490e      	ldr	r1, [pc, #56]	@ (800141c <Game2048_CompactAndMerge+0x340>)
 80013e4:	0092      	lsls	r2, r2, #2
 80013e6:	4413      	add	r3, r2
 80013e8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80013ec:	e007      	b.n	80013fe <Game2048_CompactAndMerge+0x322>
 80013ee:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80013f2:	79fb      	ldrb	r3, [r7, #7]
 80013f4:	4909      	ldr	r1, [pc, #36]	@ (800141c <Game2048_CompactAndMerge+0x340>)
 80013f6:	0092      	lsls	r2, r2, #2
 80013f8:	4413      	add	r3, r2
 80013fa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80013fe:	84bb      	strh	r3, [r7, #36]	@ 0x24
        if (original_line_copy[i] != current_val)
 8001400:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	3330      	adds	r3, #48	@ 0x30
 8001408:	443b      	add	r3, r7
 800140a:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800140e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001410:	429a      	cmp	r2, r3
 8001412:	d00b      	beq.n	800142c <Game2048_CompactAndMerge+0x350>
        {
            game2048_move_made_this_turn = true;
 8001414:	4b04      	ldr	r3, [pc, #16]	@ (8001428 <Game2048_CompactAndMerge+0x34c>)
 8001416:	2201      	movs	r2, #1
 8001418:	701a      	strb	r2, [r3, #0]
            break;
 800141a:	e013      	b.n	8001444 <Game2048_CompactAndMerge+0x368>
 800141c:	2000023c 	.word	0x2000023c
 8001420:	2000025c 	.word	0x2000025c
 8001424:	20000261 	.word	0x20000261
 8001428:	20000262 	.word	0x20000262
    for (uint8_t i = 0; i < line_size; ++i)
 800142c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001430:	3301      	adds	r3, #1
 8001432:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8001436:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800143a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800143e:	429a      	cmp	r2, r3
 8001440:	d3c9      	bcc.n	80013d6 <Game2048_CompactAndMerge+0x2fa>
        }
    }
}
 8001442:	bf00      	nop
 8001444:	bf00      	nop
 8001446:	3730      	adds	r7, #48	@ 0x30
 8001448:	46bd      	mov	sp, r7
 800144a:	bc90      	pop	{r4, r7}
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop

08001450 <Game2048_MoveUp>:

static void Game2048_MoveUp()
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
    for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 8001456:	2300      	movs	r3, #0
 8001458:	71fb      	strb	r3, [r7, #7]
 800145a:	e008      	b.n	800146e <Game2048_MoveUp+0x1e>
    {
        Game2048_CompactAndMerge(c, DIR_UP, false);
 800145c:	79fb      	ldrb	r3, [r7, #7]
 800145e:	2200      	movs	r2, #0
 8001460:	2100      	movs	r1, #0
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff fe3a 	bl	80010dc <Game2048_CompactAndMerge>
    for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 8001468:	79fb      	ldrb	r3, [r7, #7]
 800146a:	3301      	adds	r3, #1
 800146c:	71fb      	strb	r3, [r7, #7]
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	2b03      	cmp	r3, #3
 8001472:	d9f3      	bls.n	800145c <Game2048_MoveUp+0xc>
    }
}
 8001474:	bf00      	nop
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <Game2048_MoveDown>:

static void Game2048_MoveDown()
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b082      	sub	sp, #8
 8001482:	af00      	add	r7, sp, #0
    for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 8001484:	2300      	movs	r3, #0
 8001486:	71fb      	strb	r3, [r7, #7]
 8001488:	e008      	b.n	800149c <Game2048_MoveDown+0x1e>
    {
        Game2048_CompactAndMerge(c, DIR_DOWN, false);
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	2200      	movs	r2, #0
 800148e:	2101      	movs	r1, #1
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff fe23 	bl	80010dc <Game2048_CompactAndMerge>
    for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 8001496:	79fb      	ldrb	r3, [r7, #7]
 8001498:	3301      	adds	r3, #1
 800149a:	71fb      	strb	r3, [r7, #7]
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	2b03      	cmp	r3, #3
 80014a0:	d9f3      	bls.n	800148a <Game2048_MoveDown+0xc>
    }
}
 80014a2:	bf00      	nop
 80014a4:	bf00      	nop
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <Game2048_MoveLeft>:

static void Game2048_MoveLeft()
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 80014b2:	2300      	movs	r3, #0
 80014b4:	71fb      	strb	r3, [r7, #7]
 80014b6:	e008      	b.n	80014ca <Game2048_MoveLeft+0x1e>
    {
        Game2048_CompactAndMerge(r, DIR_LEFT, true);
 80014b8:	79fb      	ldrb	r3, [r7, #7]
 80014ba:	2201      	movs	r2, #1
 80014bc:	2102      	movs	r1, #2
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff fe0c 	bl	80010dc <Game2048_CompactAndMerge>
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 80014c4:	79fb      	ldrb	r3, [r7, #7]
 80014c6:	3301      	adds	r3, #1
 80014c8:	71fb      	strb	r3, [r7, #7]
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	2b03      	cmp	r3, #3
 80014ce:	d9f3      	bls.n	80014b8 <Game2048_MoveLeft+0xc>
    }
}
 80014d0:	bf00      	nop
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <Game2048_MoveRight>:

static void Game2048_MoveRight()
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b082      	sub	sp, #8
 80014de:	af00      	add	r7, sp, #0
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 80014e0:	2300      	movs	r3, #0
 80014e2:	71fb      	strb	r3, [r7, #7]
 80014e4:	e008      	b.n	80014f8 <Game2048_MoveRight+0x1e>
    {
        Game2048_CompactAndMerge(r, DIR_RIGHT, true);
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	2201      	movs	r2, #1
 80014ea:	2103      	movs	r1, #3
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff fdf5 	bl	80010dc <Game2048_CompactAndMerge>
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	3301      	adds	r3, #1
 80014f6:	71fb      	strb	r3, [r7, #7]
 80014f8:	79fb      	ldrb	r3, [r7, #7]
 80014fa:	2b03      	cmp	r3, #3
 80014fc:	d9f3      	bls.n	80014e6 <Game2048_MoveRight+0xc>
    }
}
 80014fe:	bf00      	nop
 8001500:	bf00      	nop
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <Game2048_CanMove>:

static bool Game2048_CanMove()
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 800150e:	2300      	movs	r3, #0
 8001510:	71fb      	strb	r3, [r7, #7]
 8001512:	e03e      	b.n	8001592 <Game2048_CanMove+0x8a>
    {
        for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 8001514:	2300      	movs	r3, #0
 8001516:	71bb      	strb	r3, [r7, #6]
 8001518:	e035      	b.n	8001586 <Game2048_CanMove+0x7e>
        {
            if (game2048_board[r][c].value == 0)
 800151a:	79fa      	ldrb	r2, [r7, #7]
 800151c:	79bb      	ldrb	r3, [r7, #6]
 800151e:	4921      	ldr	r1, [pc, #132]	@ (80015a4 <Game2048_CanMove+0x9c>)
 8001520:	0092      	lsls	r2, r2, #2
 8001522:	4413      	add	r3, r2
 8001524:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d101      	bne.n	8001530 <Game2048_CanMove+0x28>
                return true;
 800152c:	2301      	movs	r3, #1
 800152e:	e034      	b.n	800159a <Game2048_CanMove+0x92>
            uint16_t val = game2048_board[r][c].value;
 8001530:	79fa      	ldrb	r2, [r7, #7]
 8001532:	79bb      	ldrb	r3, [r7, #6]
 8001534:	491b      	ldr	r1, [pc, #108]	@ (80015a4 <Game2048_CanMove+0x9c>)
 8001536:	0092      	lsls	r2, r2, #2
 8001538:	4413      	add	r3, r2
 800153a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800153e:	80bb      	strh	r3, [r7, #4]
            if (c < GAME2048_BOARD_SIZE - 1 && game2048_board[r][c + 1].value == val) // Use GAME2048_BOARD_SIZE
 8001540:	79bb      	ldrb	r3, [r7, #6]
 8001542:	2b02      	cmp	r3, #2
 8001544:	d80c      	bhi.n	8001560 <Game2048_CanMove+0x58>
 8001546:	79fa      	ldrb	r2, [r7, #7]
 8001548:	79bb      	ldrb	r3, [r7, #6]
 800154a:	3301      	adds	r3, #1
 800154c:	4915      	ldr	r1, [pc, #84]	@ (80015a4 <Game2048_CanMove+0x9c>)
 800154e:	0092      	lsls	r2, r2, #2
 8001550:	4413      	add	r3, r2
 8001552:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001556:	88ba      	ldrh	r2, [r7, #4]
 8001558:	429a      	cmp	r2, r3
 800155a:	d101      	bne.n	8001560 <Game2048_CanMove+0x58>
                return true;
 800155c:	2301      	movs	r3, #1
 800155e:	e01c      	b.n	800159a <Game2048_CanMove+0x92>
            if (r < GAME2048_BOARD_SIZE - 1 && game2048_board[r + 1][c].value == val) // Use GAME2048_BOARD_SIZE
 8001560:	79fb      	ldrb	r3, [r7, #7]
 8001562:	2b02      	cmp	r3, #2
 8001564:	d80c      	bhi.n	8001580 <Game2048_CanMove+0x78>
 8001566:	79fb      	ldrb	r3, [r7, #7]
 8001568:	1c5a      	adds	r2, r3, #1
 800156a:	79bb      	ldrb	r3, [r7, #6]
 800156c:	490d      	ldr	r1, [pc, #52]	@ (80015a4 <Game2048_CanMove+0x9c>)
 800156e:	0092      	lsls	r2, r2, #2
 8001570:	4413      	add	r3, r2
 8001572:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001576:	88ba      	ldrh	r2, [r7, #4]
 8001578:	429a      	cmp	r2, r3
 800157a:	d101      	bne.n	8001580 <Game2048_CanMove+0x78>
                return true;
 800157c:	2301      	movs	r3, #1
 800157e:	e00c      	b.n	800159a <Game2048_CanMove+0x92>
        for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 8001580:	79bb      	ldrb	r3, [r7, #6]
 8001582:	3301      	adds	r3, #1
 8001584:	71bb      	strb	r3, [r7, #6]
 8001586:	79bb      	ldrb	r3, [r7, #6]
 8001588:	2b03      	cmp	r3, #3
 800158a:	d9c6      	bls.n	800151a <Game2048_CanMove+0x12>
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 800158c:	79fb      	ldrb	r3, [r7, #7]
 800158e:	3301      	adds	r3, #1
 8001590:	71fb      	strb	r3, [r7, #7]
 8001592:	79fb      	ldrb	r3, [r7, #7]
 8001594:	2b03      	cmp	r3, #3
 8001596:	d9bd      	bls.n	8001514 <Game2048_CanMove+0xc>
        }
    }
    return false;
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	bc80      	pop	{r7}
 80015a2:	4770      	bx	lr
 80015a4:	2000023c 	.word	0x2000023c

080015a8 <Game2048_HandleInput>:

bool Game2048_HandleInput(Direction input_dir)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	71fb      	strb	r3, [r7, #7]
    if (game2048_game_over || game2048_game_won)
 80015b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001630 <Game2048_HandleInput+0x88>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d103      	bne.n	80015c2 <Game2048_HandleInput+0x1a>
 80015ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001634 <Game2048_HandleInput+0x8c>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <Game2048_HandleInput+0x1e>
        return false;
 80015c2:	2300      	movs	r3, #0
 80015c4:	e02f      	b.n	8001626 <Game2048_HandleInput+0x7e>

    game2048_move_made_this_turn = false;
 80015c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001638 <Game2048_HandleInput+0x90>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	701a      	strb	r2, [r3, #0]

    switch (input_dir)
 80015cc:	79fb      	ldrb	r3, [r7, #7]
 80015ce:	2b03      	cmp	r3, #3
 80015d0:	d816      	bhi.n	8001600 <Game2048_HandleInput+0x58>
 80015d2:	a201      	add	r2, pc, #4	@ (adr r2, 80015d8 <Game2048_HandleInput+0x30>)
 80015d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015d8:	080015e9 	.word	0x080015e9
 80015dc:	080015ef 	.word	0x080015ef
 80015e0:	080015f5 	.word	0x080015f5
 80015e4:	080015fb 	.word	0x080015fb
    {
    case DIR_UP:
        Game2048_MoveUp();
 80015e8:	f7ff ff32 	bl	8001450 <Game2048_MoveUp>
        break;
 80015ec:	e008      	b.n	8001600 <Game2048_HandleInput+0x58>
    case DIR_DOWN:
        Game2048_MoveDown();
 80015ee:	f7ff ff46 	bl	800147e <Game2048_MoveDown>
        break;
 80015f2:	e005      	b.n	8001600 <Game2048_HandleInput+0x58>
    case DIR_LEFT:
        Game2048_MoveLeft();
 80015f4:	f7ff ff5a 	bl	80014ac <Game2048_MoveLeft>
        break;
 80015f8:	e002      	b.n	8001600 <Game2048_HandleInput+0x58>
    case DIR_RIGHT:
        Game2048_MoveRight();
 80015fa:	f7ff ff6e 	bl	80014da <Game2048_MoveRight>
        break;
 80015fe:	bf00      	nop
    }

    if (game2048_move_made_this_turn)
 8001600:	4b0d      	ldr	r3, [pc, #52]	@ (8001638 <Game2048_HandleInput+0x90>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d00c      	beq.n	8001622 <Game2048_HandleInput+0x7a>
    {
        Game2048_AddRandomTile();
 8001608:	f7ff fbe0 	bl	8000dcc <Game2048_AddRandomTile>
        if (!Game2048_CanMove())
 800160c:	f7ff ff7c 	bl	8001508 <Game2048_CanMove>
 8001610:	4603      	mov	r3, r0
 8001612:	f083 0301 	eor.w	r3, r3, #1
 8001616:	b2db      	uxtb	r3, r3
 8001618:	2b00      	cmp	r3, #0
 800161a:	d002      	beq.n	8001622 <Game2048_HandleInput+0x7a>
        {
            game2048_game_over = true;
 800161c:	4b04      	ldr	r3, [pc, #16]	@ (8001630 <Game2048_HandleInput+0x88>)
 800161e:	2201      	movs	r2, #1
 8001620:	701a      	strb	r2, [r3, #0]
        }
    }
    return game2048_move_made_this_turn;
 8001622:	4b05      	ldr	r3, [pc, #20]	@ (8001638 <Game2048_HandleInput+0x90>)
 8001624:	781b      	ldrb	r3, [r3, #0]
}
 8001626:	4618      	mov	r0, r3
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	20000260 	.word	0x20000260
 8001634:	20000261 	.word	0x20000261
 8001638:	20000262 	.word	0x20000262

0800163c <Game2048_GameLoop>:

void Game2048_GameLoop(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
    static uint16_t LastCount;

    if (FirstRun)
 8001640:	4b48      	ldr	r3, [pc, #288]	@ (8001764 <Game2048_GameLoop+0x128>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d006      	beq.n	8001656 <Game2048_GameLoop+0x1a>
    {
        LastCount = count;
 8001648:	4b47      	ldr	r3, [pc, #284]	@ (8001768 <Game2048_GameLoop+0x12c>)
 800164a:	881a      	ldrh	r2, [r3, #0]
 800164c:	4b47      	ldr	r3, [pc, #284]	@ (800176c <Game2048_GameLoop+0x130>)
 800164e:	801a      	strh	r2, [r3, #0]
        FirstRun = false;
 8001650:	4b44      	ldr	r3, [pc, #272]	@ (8001764 <Game2048_GameLoop+0x128>)
 8001652:	2200      	movs	r2, #0
 8001654:	701a      	strb	r2, [r3, #0]
    }

    if (count - LastCount > 1 && HAL_GPIO_ReadPin(GAME_INPUT_RESTART_PORT, GAME_INPUT_RESTART_PIN) == GPIO_PIN_SET)
 8001656:	4b44      	ldr	r3, [pc, #272]	@ (8001768 <Game2048_GameLoop+0x12c>)
 8001658:	881b      	ldrh	r3, [r3, #0]
 800165a:	461a      	mov	r2, r3
 800165c:	4b43      	ldr	r3, [pc, #268]	@ (800176c <Game2048_GameLoop+0x130>)
 800165e:	881b      	ldrh	r3, [r3, #0]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b01      	cmp	r3, #1
 8001664:	dd0f      	ble.n	8001686 <Game2048_GameLoop+0x4a>
 8001666:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800166a:	4841      	ldr	r0, [pc, #260]	@ (8001770 <Game2048_GameLoop+0x134>)
 800166c:	f004 fd62 	bl	8006134 <HAL_GPIO_ReadPin>
 8001670:	4603      	mov	r3, r0
 8001672:	2b01      	cmp	r3, #1
 8001674:	d107      	bne.n	8001686 <Game2048_GameLoop+0x4a>
    {
        Game2048_HandleInput(DIR_RIGHT);
 8001676:	2003      	movs	r0, #3
 8001678:	f7ff ff96 	bl	80015a8 <Game2048_HandleInput>
        LastCount = count;
 800167c:	4b3a      	ldr	r3, [pc, #232]	@ (8001768 <Game2048_GameLoop+0x12c>)
 800167e:	881a      	ldrh	r2, [r3, #0]
 8001680:	4b3a      	ldr	r3, [pc, #232]	@ (800176c <Game2048_GameLoop+0x130>)
 8001682:	801a      	strh	r2, [r3, #0]
 8001684:	e048      	b.n	8001718 <Game2048_GameLoop+0xdc>
    }
    else if (count - LastCount < -1 && HAL_GPIO_ReadPin(GAME_INPUT_RESTART_PORT, GAME_INPUT_RESTART_PIN) == GPIO_PIN_SET)
 8001686:	4b38      	ldr	r3, [pc, #224]	@ (8001768 <Game2048_GameLoop+0x12c>)
 8001688:	881b      	ldrh	r3, [r3, #0]
 800168a:	461a      	mov	r2, r3
 800168c:	4b37      	ldr	r3, [pc, #220]	@ (800176c <Game2048_GameLoop+0x130>)
 800168e:	881b      	ldrh	r3, [r3, #0]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001696:	da0f      	bge.n	80016b8 <Game2048_GameLoop+0x7c>
 8001698:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800169c:	4834      	ldr	r0, [pc, #208]	@ (8001770 <Game2048_GameLoop+0x134>)
 800169e:	f004 fd49 	bl	8006134 <HAL_GPIO_ReadPin>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d107      	bne.n	80016b8 <Game2048_GameLoop+0x7c>
    {
        Game2048_HandleInput(DIR_LEFT);
 80016a8:	2002      	movs	r0, #2
 80016aa:	f7ff ff7d 	bl	80015a8 <Game2048_HandleInput>
        LastCount = count;
 80016ae:	4b2e      	ldr	r3, [pc, #184]	@ (8001768 <Game2048_GameLoop+0x12c>)
 80016b0:	881a      	ldrh	r2, [r3, #0]
 80016b2:	4b2e      	ldr	r3, [pc, #184]	@ (800176c <Game2048_GameLoop+0x130>)
 80016b4:	801a      	strh	r2, [r3, #0]
 80016b6:	e02f      	b.n	8001718 <Game2048_GameLoop+0xdc>
    }
    else if (count - LastCount > 1 && HAL_GPIO_ReadPin(GAME_INPUT_RESTART_PORT, GAME_INPUT_RESTART_PIN) == GPIO_PIN_RESET)
 80016b8:	4b2b      	ldr	r3, [pc, #172]	@ (8001768 <Game2048_GameLoop+0x12c>)
 80016ba:	881b      	ldrh	r3, [r3, #0]
 80016bc:	461a      	mov	r2, r3
 80016be:	4b2b      	ldr	r3, [pc, #172]	@ (800176c <Game2048_GameLoop+0x130>)
 80016c0:	881b      	ldrh	r3, [r3, #0]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	dd0f      	ble.n	80016e8 <Game2048_GameLoop+0xac>
 80016c8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80016cc:	4828      	ldr	r0, [pc, #160]	@ (8001770 <Game2048_GameLoop+0x134>)
 80016ce:	f004 fd31 	bl	8006134 <HAL_GPIO_ReadPin>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d107      	bne.n	80016e8 <Game2048_GameLoop+0xac>
    {
        Game2048_HandleInput(DIR_UP);
 80016d8:	2000      	movs	r0, #0
 80016da:	f7ff ff65 	bl	80015a8 <Game2048_HandleInput>
        LastCount = count;
 80016de:	4b22      	ldr	r3, [pc, #136]	@ (8001768 <Game2048_GameLoop+0x12c>)
 80016e0:	881a      	ldrh	r2, [r3, #0]
 80016e2:	4b22      	ldr	r3, [pc, #136]	@ (800176c <Game2048_GameLoop+0x130>)
 80016e4:	801a      	strh	r2, [r3, #0]
 80016e6:	e017      	b.n	8001718 <Game2048_GameLoop+0xdc>
    }
    else if (count - LastCount < -1 && HAL_GPIO_ReadPin(GAME_INPUT_RESTART_PORT, GAME_INPUT_RESTART_PIN) == GPIO_PIN_RESET)
 80016e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001768 <Game2048_GameLoop+0x12c>)
 80016ea:	881b      	ldrh	r3, [r3, #0]
 80016ec:	461a      	mov	r2, r3
 80016ee:	4b1f      	ldr	r3, [pc, #124]	@ (800176c <Game2048_GameLoop+0x130>)
 80016f0:	881b      	ldrh	r3, [r3, #0]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016f8:	da0e      	bge.n	8001718 <Game2048_GameLoop+0xdc>
 80016fa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80016fe:	481c      	ldr	r0, [pc, #112]	@ (8001770 <Game2048_GameLoop+0x134>)
 8001700:	f004 fd18 	bl	8006134 <HAL_GPIO_ReadPin>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d106      	bne.n	8001718 <Game2048_GameLoop+0xdc>
    {
        Game2048_HandleInput(DIR_DOWN);
 800170a:	2001      	movs	r0, #1
 800170c:	f7ff ff4c 	bl	80015a8 <Game2048_HandleInput>
        LastCount = count;
 8001710:	4b15      	ldr	r3, [pc, #84]	@ (8001768 <Game2048_GameLoop+0x12c>)
 8001712:	881a      	ldrh	r2, [r3, #0]
 8001714:	4b15      	ldr	r3, [pc, #84]	@ (800176c <Game2048_GameLoop+0x130>)
 8001716:	801a      	strh	r2, [r3, #0]
    }

    if (game2048_game_over)
 8001718:	4b16      	ldr	r3, [pc, #88]	@ (8001774 <Game2048_GameLoop+0x138>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d01d      	beq.n	800175c <Game2048_GameLoop+0x120>
    {
        if (HAL_GPIO_ReadPin(GAME_INPUT_RESTART_PORT, GAME_INPUT_RESTART_PIN) == GPIO_PIN_RESET)
 8001720:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001724:	4812      	ldr	r0, [pc, #72]	@ (8001770 <Game2048_GameLoop+0x134>)
 8001726:	f004 fd05 	bl	8006134 <HAL_GPIO_ReadPin>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d115      	bne.n	800175c <Game2048_GameLoop+0x120>
        {
            HAL_Delay(INPUT_DEBOUNCE_MS);
 8001730:	2032      	movs	r0, #50	@ 0x32
 8001732:	f004 f8e9 	bl	8005908 <HAL_Delay>
            if (HAL_GPIO_ReadPin(GAME_INPUT_RESTART_PORT, GAME_INPUT_RESTART_PIN) == GPIO_PIN_RESET)
 8001736:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800173a:	480d      	ldr	r0, [pc, #52]	@ (8001770 <Game2048_GameLoop+0x134>)
 800173c:	f004 fcfa 	bl	8006134 <HAL_GPIO_ReadPin>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d10a      	bne.n	800175c <Game2048_GameLoop+0x120>
            {
                Game2048_Restart();
 8001746:	f7ff fc09 	bl	8000f5c <Game2048_Restart>
                while (HAL_GPIO_ReadPin(GAME_INPUT_RESTART_PORT, GAME_INPUT_RESTART_PIN) == GPIO_PIN_RESET)
 800174a:	bf00      	nop
 800174c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001750:	4807      	ldr	r0, [pc, #28]	@ (8001770 <Game2048_GameLoop+0x134>)
 8001752:	f004 fcef 	bl	8006134 <HAL_GPIO_ReadPin>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d0f7      	beq.n	800174c <Game2048_GameLoop+0x110>
            }
        }
    }


    Game2048_DrawBoard();
 800175c:	f7ff fc04 	bl	8000f68 <Game2048_DrawBoard>
}
 8001760:	bf00      	nop
 8001762:	bd80      	pop	{r7, pc}
 8001764:	20000000 	.word	0x20000000
 8001768:	20000358 	.word	0x20000358
 800176c:	20000268 	.word	0x20000268
 8001770:	40010c00 	.word	0x40010c00
 8001774:	20000260 	.word	0x20000260

08001778 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b088      	sub	sp, #32
 800177c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800177e:	f107 0310 	add.w	r3, r7, #16
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	605a      	str	r2, [r3, #4]
 8001788:	609a      	str	r2, [r3, #8]
 800178a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800178c:	4b2a      	ldr	r3, [pc, #168]	@ (8001838 <MX_GPIO_Init+0xc0>)
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	4a29      	ldr	r2, [pc, #164]	@ (8001838 <MX_GPIO_Init+0xc0>)
 8001792:	f043 0310 	orr.w	r3, r3, #16
 8001796:	6193      	str	r3, [r2, #24]
 8001798:	4b27      	ldr	r3, [pc, #156]	@ (8001838 <MX_GPIO_Init+0xc0>)
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	f003 0310 	and.w	r3, r3, #16
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017a4:	4b24      	ldr	r3, [pc, #144]	@ (8001838 <MX_GPIO_Init+0xc0>)
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	4a23      	ldr	r2, [pc, #140]	@ (8001838 <MX_GPIO_Init+0xc0>)
 80017aa:	f043 0320 	orr.w	r3, r3, #32
 80017ae:	6193      	str	r3, [r2, #24]
 80017b0:	4b21      	ldr	r3, [pc, #132]	@ (8001838 <MX_GPIO_Init+0xc0>)
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	f003 0320 	and.w	r3, r3, #32
 80017b8:	60bb      	str	r3, [r7, #8]
 80017ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001838 <MX_GPIO_Init+0xc0>)
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	4a1d      	ldr	r2, [pc, #116]	@ (8001838 <MX_GPIO_Init+0xc0>)
 80017c2:	f043 0308 	orr.w	r3, r3, #8
 80017c6:	6193      	str	r3, [r2, #24]
 80017c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001838 <MX_GPIO_Init+0xc0>)
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	f003 0308 	and.w	r3, r3, #8
 80017d0:	607b      	str	r3, [r7, #4]
 80017d2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d4:	4b18      	ldr	r3, [pc, #96]	@ (8001838 <MX_GPIO_Init+0xc0>)
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	4a17      	ldr	r2, [pc, #92]	@ (8001838 <MX_GPIO_Init+0xc0>)
 80017da:	f043 0304 	orr.w	r3, r3, #4
 80017de:	6193      	str	r3, [r2, #24]
 80017e0:	4b15      	ldr	r3, [pc, #84]	@ (8001838 <MX_GPIO_Init+0xc0>)
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	f003 0304 	and.w	r3, r3, #4
 80017e8:	603b      	str	r3, [r7, #0]
 80017ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SysWork_Light_GPIO_Port, SysWork_Light_Pin, GPIO_PIN_RESET);
 80017ec:	2200      	movs	r2, #0
 80017ee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80017f2:	4812      	ldr	r0, [pc, #72]	@ (800183c <MX_GPIO_Init+0xc4>)
 80017f4:	f004 fcb5 	bl	8006162 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SysWork_Light_Pin */
  GPIO_InitStruct.Pin = SysWork_Light_Pin;
 80017f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017fe:	2301      	movs	r3, #1
 8001800:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001802:	2300      	movs	r3, #0
 8001804:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001806:	2302      	movs	r3, #2
 8001808:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SysWork_Light_GPIO_Port, &GPIO_InitStruct);
 800180a:	f107 0310 	add.w	r3, r7, #16
 800180e:	4619      	mov	r1, r3
 8001810:	480a      	ldr	r0, [pc, #40]	@ (800183c <MX_GPIO_Init+0xc4>)
 8001812:	f004 fb0b 	bl	8005e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : Encoder_Input_Pin */
  GPIO_InitStruct.Pin = Encoder_Input_Pin;
 8001816:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800181a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800181c:	2300      	movs	r3, #0
 800181e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001820:	2301      	movs	r3, #1
 8001822:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Encoder_Input_GPIO_Port, &GPIO_InitStruct);
 8001824:	f107 0310 	add.w	r3, r7, #16
 8001828:	4619      	mov	r1, r3
 800182a:	4805      	ldr	r0, [pc, #20]	@ (8001840 <MX_GPIO_Init+0xc8>)
 800182c:	f004 fafe 	bl	8005e2c <HAL_GPIO_Init>

}
 8001830:	bf00      	nop
 8001832:	3720      	adds	r7, #32
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40021000 	.word	0x40021000
 800183c:	40011000 	.word	0x40011000
 8001840:	40010c00 	.word	0x40010c00

08001844 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001848:	4b12      	ldr	r3, [pc, #72]	@ (8001894 <MX_I2C1_Init+0x50>)
 800184a:	4a13      	ldr	r2, [pc, #76]	@ (8001898 <MX_I2C1_Init+0x54>)
 800184c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800184e:	4b11      	ldr	r3, [pc, #68]	@ (8001894 <MX_I2C1_Init+0x50>)
 8001850:	4a12      	ldr	r2, [pc, #72]	@ (800189c <MX_I2C1_Init+0x58>)
 8001852:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001854:	4b0f      	ldr	r3, [pc, #60]	@ (8001894 <MX_I2C1_Init+0x50>)
 8001856:	2200      	movs	r2, #0
 8001858:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800185a:	4b0e      	ldr	r3, [pc, #56]	@ (8001894 <MX_I2C1_Init+0x50>)
 800185c:	2200      	movs	r2, #0
 800185e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001860:	4b0c      	ldr	r3, [pc, #48]	@ (8001894 <MX_I2C1_Init+0x50>)
 8001862:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001866:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001868:	4b0a      	ldr	r3, [pc, #40]	@ (8001894 <MX_I2C1_Init+0x50>)
 800186a:	2200      	movs	r2, #0
 800186c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800186e:	4b09      	ldr	r3, [pc, #36]	@ (8001894 <MX_I2C1_Init+0x50>)
 8001870:	2200      	movs	r2, #0
 8001872:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001874:	4b07      	ldr	r3, [pc, #28]	@ (8001894 <MX_I2C1_Init+0x50>)
 8001876:	2200      	movs	r2, #0
 8001878:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800187a:	4b06      	ldr	r3, [pc, #24]	@ (8001894 <MX_I2C1_Init+0x50>)
 800187c:	2200      	movs	r2, #0
 800187e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001880:	4804      	ldr	r0, [pc, #16]	@ (8001894 <MX_I2C1_Init+0x50>)
 8001882:	f004 fc87 	bl	8006194 <HAL_I2C_Init>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800188c:	f000 f99b 	bl	8001bc6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001890:	bf00      	nop
 8001892:	bd80      	pop	{r7, pc}
 8001894:	2000026c 	.word	0x2000026c
 8001898:	40005400 	.word	0x40005400
 800189c:	00061a80 	.word	0x00061a80

080018a0 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80018a4:	4b12      	ldr	r3, [pc, #72]	@ (80018f0 <MX_I2C2_Init+0x50>)
 80018a6:	4a13      	ldr	r2, [pc, #76]	@ (80018f4 <MX_I2C2_Init+0x54>)
 80018a8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80018aa:	4b11      	ldr	r3, [pc, #68]	@ (80018f0 <MX_I2C2_Init+0x50>)
 80018ac:	4a12      	ldr	r2, [pc, #72]	@ (80018f8 <MX_I2C2_Init+0x58>)
 80018ae:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018b0:	4b0f      	ldr	r3, [pc, #60]	@ (80018f0 <MX_I2C2_Init+0x50>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80018b6:	4b0e      	ldr	r3, [pc, #56]	@ (80018f0 <MX_I2C2_Init+0x50>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018bc:	4b0c      	ldr	r3, [pc, #48]	@ (80018f0 <MX_I2C2_Init+0x50>)
 80018be:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80018c2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018c4:	4b0a      	ldr	r3, [pc, #40]	@ (80018f0 <MX_I2C2_Init+0x50>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80018ca:	4b09      	ldr	r3, [pc, #36]	@ (80018f0 <MX_I2C2_Init+0x50>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018d0:	4b07      	ldr	r3, [pc, #28]	@ (80018f0 <MX_I2C2_Init+0x50>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018d6:	4b06      	ldr	r3, [pc, #24]	@ (80018f0 <MX_I2C2_Init+0x50>)
 80018d8:	2200      	movs	r2, #0
 80018da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80018dc:	4804      	ldr	r0, [pc, #16]	@ (80018f0 <MX_I2C2_Init+0x50>)
 80018de:	f004 fc59 	bl	8006194 <HAL_I2C_Init>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80018e8:	f000 f96d 	bl	8001bc6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80018ec:	bf00      	nop
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	200002c0 	.word	0x200002c0
 80018f4:	40005800 	.word	0x40005800
 80018f8:	00061a80 	.word	0x00061a80

080018fc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b08a      	sub	sp, #40	@ 0x28
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001904:	f107 0318 	add.w	r3, r7, #24
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a3e      	ldr	r2, [pc, #248]	@ (8001a10 <HAL_I2C_MspInit+0x114>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d14b      	bne.n	80019b4 <HAL_I2C_MspInit+0xb8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800191c:	4b3d      	ldr	r3, [pc, #244]	@ (8001a14 <HAL_I2C_MspInit+0x118>)
 800191e:	699b      	ldr	r3, [r3, #24]
 8001920:	4a3c      	ldr	r2, [pc, #240]	@ (8001a14 <HAL_I2C_MspInit+0x118>)
 8001922:	f043 0308 	orr.w	r3, r3, #8
 8001926:	6193      	str	r3, [r2, #24]
 8001928:	4b3a      	ldr	r3, [pc, #232]	@ (8001a14 <HAL_I2C_MspInit+0x118>)
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	f003 0308 	and.w	r3, r3, #8
 8001930:	617b      	str	r3, [r7, #20]
 8001932:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 8001934:	23c0      	movs	r3, #192	@ 0xc0
 8001936:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001938:	2312      	movs	r3, #18
 800193a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800193c:	2303      	movs	r3, #3
 800193e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001940:	f107 0318 	add.w	r3, r7, #24
 8001944:	4619      	mov	r1, r3
 8001946:	4834      	ldr	r0, [pc, #208]	@ (8001a18 <HAL_I2C_MspInit+0x11c>)
 8001948:	f004 fa70 	bl	8005e2c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800194c:	4b31      	ldr	r3, [pc, #196]	@ (8001a14 <HAL_I2C_MspInit+0x118>)
 800194e:	69db      	ldr	r3, [r3, #28]
 8001950:	4a30      	ldr	r2, [pc, #192]	@ (8001a14 <HAL_I2C_MspInit+0x118>)
 8001952:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001956:	61d3      	str	r3, [r2, #28]
 8001958:	4b2e      	ldr	r3, [pc, #184]	@ (8001a14 <HAL_I2C_MspInit+0x118>)
 800195a:	69db      	ldr	r3, [r3, #28]
 800195c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001960:	613b      	str	r3, [r7, #16]
 8001962:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8001964:	4b2d      	ldr	r3, [pc, #180]	@ (8001a1c <HAL_I2C_MspInit+0x120>)
 8001966:	4a2e      	ldr	r2, [pc, #184]	@ (8001a20 <HAL_I2C_MspInit+0x124>)
 8001968:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800196a:	4b2c      	ldr	r3, [pc, #176]	@ (8001a1c <HAL_I2C_MspInit+0x120>)
 800196c:	2210      	movs	r2, #16
 800196e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001970:	4b2a      	ldr	r3, [pc, #168]	@ (8001a1c <HAL_I2C_MspInit+0x120>)
 8001972:	2200      	movs	r2, #0
 8001974:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001976:	4b29      	ldr	r3, [pc, #164]	@ (8001a1c <HAL_I2C_MspInit+0x120>)
 8001978:	2280      	movs	r2, #128	@ 0x80
 800197a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800197c:	4b27      	ldr	r3, [pc, #156]	@ (8001a1c <HAL_I2C_MspInit+0x120>)
 800197e:	2200      	movs	r2, #0
 8001980:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001982:	4b26      	ldr	r3, [pc, #152]	@ (8001a1c <HAL_I2C_MspInit+0x120>)
 8001984:	2200      	movs	r2, #0
 8001986:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001988:	4b24      	ldr	r3, [pc, #144]	@ (8001a1c <HAL_I2C_MspInit+0x120>)
 800198a:	2200      	movs	r2, #0
 800198c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800198e:	4b23      	ldr	r3, [pc, #140]	@ (8001a1c <HAL_I2C_MspInit+0x120>)
 8001990:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001994:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001996:	4821      	ldr	r0, [pc, #132]	@ (8001a1c <HAL_I2C_MspInit+0x120>)
 8001998:	f004 f8e8 	bl	8005b6c <HAL_DMA_Init>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <HAL_I2C_MspInit+0xaa>
    {
      Error_Handler();
 80019a2:	f000 f910 	bl	8001bc6 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a1c      	ldr	r2, [pc, #112]	@ (8001a1c <HAL_I2C_MspInit+0x120>)
 80019aa:	635a      	str	r2, [r3, #52]	@ 0x34
 80019ac:	4a1b      	ldr	r2, [pc, #108]	@ (8001a1c <HAL_I2C_MspInit+0x120>)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6253      	str	r3, [r2, #36]	@ 0x24
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80019b2:	e029      	b.n	8001a08 <HAL_I2C_MspInit+0x10c>
  else if(i2cHandle->Instance==I2C2)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a1a      	ldr	r2, [pc, #104]	@ (8001a24 <HAL_I2C_MspInit+0x128>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d124      	bne.n	8001a08 <HAL_I2C_MspInit+0x10c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019be:	4b15      	ldr	r3, [pc, #84]	@ (8001a14 <HAL_I2C_MspInit+0x118>)
 80019c0:	699b      	ldr	r3, [r3, #24]
 80019c2:	4a14      	ldr	r2, [pc, #80]	@ (8001a14 <HAL_I2C_MspInit+0x118>)
 80019c4:	f043 0308 	orr.w	r3, r3, #8
 80019c8:	6193      	str	r3, [r2, #24]
 80019ca:	4b12      	ldr	r3, [pc, #72]	@ (8001a14 <HAL_I2C_MspInit+0x118>)
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	f003 0308 	and.w	r3, r3, #8
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GYRO_SCL_Pin|GYRO_SDA_Pin;
 80019d6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80019da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019dc:	2312      	movs	r3, #18
 80019de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019e0:	2303      	movs	r3, #3
 80019e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019e4:	f107 0318 	add.w	r3, r7, #24
 80019e8:	4619      	mov	r1, r3
 80019ea:	480b      	ldr	r0, [pc, #44]	@ (8001a18 <HAL_I2C_MspInit+0x11c>)
 80019ec:	f004 fa1e 	bl	8005e2c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80019f0:	4b08      	ldr	r3, [pc, #32]	@ (8001a14 <HAL_I2C_MspInit+0x118>)
 80019f2:	69db      	ldr	r3, [r3, #28]
 80019f4:	4a07      	ldr	r2, [pc, #28]	@ (8001a14 <HAL_I2C_MspInit+0x118>)
 80019f6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80019fa:	61d3      	str	r3, [r2, #28]
 80019fc:	4b05      	ldr	r3, [pc, #20]	@ (8001a14 <HAL_I2C_MspInit+0x118>)
 80019fe:	69db      	ldr	r3, [r3, #28]
 8001a00:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a04:	60bb      	str	r3, [r7, #8]
 8001a06:	68bb      	ldr	r3, [r7, #8]
}
 8001a08:	bf00      	nop
 8001a0a:	3728      	adds	r7, #40	@ 0x28
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	40005400 	.word	0x40005400
 8001a14:	40021000 	.word	0x40021000
 8001a18:	40010c00 	.word	0x40010c00
 8001a1c:	20000314 	.word	0x20000314
 8001a20:	4002006c 	.word	0x4002006c
 8001a24:	40005800 	.word	0x40005800

08001a28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a2c:	f003 ff0a 	bl	8005844 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a30:	f000 f884 	bl	8001b3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a34:	f7ff fea0 	bl	8001778 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a38:	f7fe feca 	bl	80007d0 <MX_DMA_Init>
  MX_I2C1_Init();
 8001a3c:	f7ff ff02 	bl	8001844 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001a40:	f003 fd40 	bl	80054c4 <MX_TIM1_Init>
  MX_I2C2_Init();
 8001a44:	f7ff ff2c 	bl	80018a0 <MX_I2C2_Init>
  MX_TIM3_Init();
 8001a48:	f003 fdde 	bl	8005608 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init(); // 初始化OLED
 8001a4c:	f000 fa9e 	bl	8001f8c <OLED_Init>
  OLED_InitBuffer(); // 初始化双缓冲
 8001a50:	f000 f8c0 	bl	8001bd4 <OLED_InitBuffer>
  OLED_ClearBuffer(); // 清空缓冲区
 8001a54:	f000 f8f2 	bl	8001c3c <OLED_ClearBuffer>
  
  OLED_EnableDiffMode(1);  // 启用差分更新
 8001a58:	2001      	movs	r0, #1
 8001a5a:	f002 f9f1 	bl	8003e40 <OLED_EnableDiffMode>
  OLED_EnableFastUpdate(1); // 启用快速更新
 8001a5e:	2001      	movs	r0, #1
 8001a60:	f002 fa0c 	bl	8003e7c <OLED_EnableFastUpdate>

  
  // HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3); // 启动PWM
  // HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3); // 启动PWM
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); // 启动PWM
 8001a64:	2104      	movs	r1, #4
 8001a66:	482a      	ldr	r0, [pc, #168]	@ (8001b10 <main+0xe8>)
 8001a68:	f005 fcd4 	bl	8007414 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1); // 启动编码器
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	4829      	ldr	r0, [pc, #164]	@ (8001b14 <main+0xec>)
 8001a70:	f005 fe14 	bl	800769c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_2); // 启动编码器
 8001a74:	2104      	movs	r1, #4
 8001a76:	4827      	ldr	r0, [pc, #156]	@ (8001b14 <main+0xec>)
 8001a78:	f005 fe10 	bl	800769c <HAL_TIM_Encoder_Start>

  OLED_InitAnimationManager(&g_AnimationManager); // 初始化动画管理器
 8001a7c:	4826      	ldr	r0, [pc, #152]	@ (8001b18 <main+0xf0>)
 8001a7e:	f003 f9d9 	bl	8004e34 <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&Menu_AnimationManager); // 初始化菜单动画管理器
 8001a82:	4826      	ldr	r0, [pc, #152]	@ (8001b1c <main+0xf4>)
 8001a84:	f003 f9d6 	bl	8004e34 <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&Games_AnimationManager); // 初始化游戏动画管理器
 8001a88:	4825      	ldr	r0, [pc, #148]	@ (8001b20 <main+0xf8>)
 8001a8a:	f003 f9d3 	bl	8004e34 <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&Tools_AnimationManager); // 初始化工具动画管理器
 8001a8e:	4825      	ldr	r0, [pc, #148]	@ (8001b24 <main+0xfc>)
 8001a90:	f003 f9d0 	bl	8004e34 <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&Settings_AnimationManager); // 初始化设置动画管理器
 8001a94:	4824      	ldr	r0, [pc, #144]	@ (8001b28 <main+0x100>)
 8001a96:	f003 f9cd 	bl	8004e34 <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&About_AnimationManager); // 初始化关于动画管理器
 8001a9a:	4824      	ldr	r0, [pc, #144]	@ (8001b2c <main+0x104>)
 8001a9c:	f003 f9ca 	bl	8004e34 <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&Status_AnimationManager); // 初始化状态动画管理器
 8001aa0:	4823      	ldr	r0, [pc, #140]	@ (8001b30 <main+0x108>)
 8001aa2:	f003 f9c7 	bl	8004e34 <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&g_Title_AnimationManager); // 初始化标题动画管理器
 8001aa6:	4823      	ldr	r0, [pc, #140]	@ (8001b34 <main+0x10c>)
 8001aa8:	f003 f9c4 	bl	8004e34 <OLED_InitAnimationManager>
  __HAL_TIM_SET_COUNTER(&htim3, 32767);
 8001aac:	4b19      	ldr	r3, [pc, #100]	@ (8001b14 <main+0xec>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001ab4:	625a      	str	r2, [r3, #36]	@ 0x24
  Game2048_Init(); // 初始化游戏
 8001ab6:	f7ff fa15 	bl	8000ee4 <Game2048_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {    
    #pragma region OLED_UI_SETTINGS // UI设置
    OLED_ClearBuffer();
 8001aba:	f000 f8bf 	bl	8001c3c <OLED_ClearBuffer>
    
    System_UI_Loop(); // UI循环
 8001abe:	f000 fd93 	bl	80025e8 <System_UI_Loop>
    
    // Game2048_GameLoop(); // 游戏循环

    
    OLED_OptimizedDisplayFPS(80, 56); // 显示帧率
 8001ac2:	2138      	movs	r1, #56	@ 0x38
 8001ac4:	2050      	movs	r0, #80	@ 0x50
 8001ac6:	f002 fa83 	bl	8003fd0 <OLED_OptimizedDisplayFPS>
    count = __HAL_TIM_GET_COUNTER(&htim3); // 获取编码器计数值 1圈40
 8001aca:	4b12      	ldr	r3, [pc, #72]	@ (8001b14 <main+0xec>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ad0:	b29a      	uxth	r2, r3
 8001ad2:	4b19      	ldr	r3, [pc, #100]	@ (8001b38 <main+0x110>)
 8001ad4:	801a      	strh	r2, [r3, #0]
    OLED_UpdateAnimationManager(&Menu_AnimationManager); // 更新菜单动画管理器
 8001ad6:	4811      	ldr	r0, [pc, #68]	@ (8001b1c <main+0xf4>)
 8001ad8:	f003 fa5e 	bl	8004f98 <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&g_AnimationManager); // 更新动画管理器
 8001adc:	480e      	ldr	r0, [pc, #56]	@ (8001b18 <main+0xf0>)
 8001ade:	f003 fa5b 	bl	8004f98 <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&Games_AnimationManager); // 更新游戏动画管理器
 8001ae2:	480f      	ldr	r0, [pc, #60]	@ (8001b20 <main+0xf8>)
 8001ae4:	f003 fa58 	bl	8004f98 <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&Tools_AnimationManager); // 更新工具动画管理器
 8001ae8:	480e      	ldr	r0, [pc, #56]	@ (8001b24 <main+0xfc>)
 8001aea:	f003 fa55 	bl	8004f98 <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&Settings_AnimationManager); // 更新设置动画管理器
 8001aee:	480e      	ldr	r0, [pc, #56]	@ (8001b28 <main+0x100>)
 8001af0:	f003 fa52 	bl	8004f98 <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&About_AnimationManager); // 更新关于动画管理器
 8001af4:	480d      	ldr	r0, [pc, #52]	@ (8001b2c <main+0x104>)
 8001af6:	f003 fa4f 	bl	8004f98 <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&Status_AnimationManager); // 更新状态动画管理器
 8001afa:	480d      	ldr	r0, [pc, #52]	@ (8001b30 <main+0x108>)
 8001afc:	f003 fa4c 	bl	8004f98 <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&g_Title_AnimationManager); // 更新标题动画管理器
 8001b00:	480c      	ldr	r0, [pc, #48]	@ (8001b34 <main+0x10c>)
 8001b02:	f003 fa49 	bl	8004f98 <OLED_UpdateAnimationManager>
    OLED_SmartUpdate(); // 智能更新显示
 8001b06:	f002 f9c9 	bl	8003e9c <OLED_SmartUpdate>
    OLED_ClearBuffer();
 8001b0a:	bf00      	nop
 8001b0c:	e7d5      	b.n	8001aba <main+0x92>
 8001b0e:	bf00      	nop
 8001b10:	20003f24 	.word	0x20003f24
 8001b14:	20003f6c 	.word	0x20003f6c
 8001b18:	2000392c 	.word	0x2000392c
 8001b1c:	20000f80 	.word	0x20000f80
 8001b20:	20001574 	.word	0x20001574
 8001b24:	20001b68 	.word	0x20001b68
 8001b28:	2000215c 	.word	0x2000215c
 8001b2c:	20002750 	.word	0x20002750
 8001b30:	20002d44 	.word	0x20002d44
 8001b34:	20003338 	.word	0x20003338
 8001b38:	20000358 	.word	0x20000358

08001b3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b090      	sub	sp, #64	@ 0x40
 8001b40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b42:	f107 0318 	add.w	r3, r7, #24
 8001b46:	2228      	movs	r2, #40	@ 0x28
 8001b48:	2100      	movs	r1, #0
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f006 fc83 	bl	8008456 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b50:	1d3b      	adds	r3, r7, #4
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	605a      	str	r2, [r3, #4]
 8001b58:	609a      	str	r2, [r3, #8]
 8001b5a:	60da      	str	r2, [r3, #12]
 8001b5c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b62:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b66:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b70:	2302      	movs	r3, #2
 8001b72:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b74:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b78:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001b7a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001b7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b80:	f107 0318 	add.w	r3, r7, #24
 8001b84:	4618      	mov	r0, r3
 8001b86:	f004 ffa1 	bl	8006acc <HAL_RCC_OscConfig>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001b90:	f000 f819 	bl	8001bc6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b94:	230f      	movs	r3, #15
 8001b96:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b98:	2302      	movs	r3, #2
 8001b9a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ba0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ba4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001baa:	1d3b      	adds	r3, r7, #4
 8001bac:	2102      	movs	r1, #2
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f005 fa0e 	bl	8006fd0 <HAL_RCC_ClockConfig>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001bba:	f000 f804 	bl	8001bc6 <Error_Handler>
  }
}
 8001bbe:	bf00      	nop
 8001bc0:	3740      	adds	r7, #64	@ 0x40
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bca:	b672      	cpsid	i
}
 8001bcc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bce:	bf00      	nop
 8001bd0:	e7fd      	b.n	8001bce <Error_Handler+0x8>
	...

08001bd4 <OLED_InitBuffer>:
        0x22, 0x00, 0x07  // 页地址范围: 0-7
};

// 初始化缓冲区
void OLED_InitBuffer(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
    // 清空缓冲区
    memset(OLED_BackBuffer, 0, sizeof(OLED_BackBuffer));
 8001bda:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001bde:	2100      	movs	r1, #0
 8001be0:	4811      	ldr	r0, [pc, #68]	@ (8001c28 <OLED_InitBuffer+0x54>)
 8001be2:	f006 fc38 	bl	8008456 <memset>
    memset(OLED_FrontBuffer, 0, sizeof(OLED_FrontBuffer));
 8001be6:	f240 4201 	movw	r2, #1025	@ 0x401
 8001bea:	2100      	movs	r1, #0
 8001bec:	480f      	ldr	r0, [pc, #60]	@ (8001c2c <OLED_InitBuffer+0x58>)
 8001bee:	f006 fc32 	bl	8008456 <memset>

    // 初始化第一个字节为数据控制字节
    OLED_FrontBuffer[0] = 0x40; // 数据控制字节：Co=0, D/C#=1 (数据)
 8001bf2:	4b0e      	ldr	r3, [pc, #56]	@ (8001c2c <OLED_InitBuffer+0x58>)
 8001bf4:	2240      	movs	r2, #64	@ 0x40
 8001bf6:	701a      	strb	r2, [r3, #0]

    // 初始化状态变量
    oled_update_flag = OLED_READY;
 8001bf8:	4b0d      	ldr	r3, [pc, #52]	@ (8001c30 <OLED_InitBuffer+0x5c>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	701a      	strb	r2, [r3, #0]
    oled_dma_busy = OLED_READY;
 8001bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8001c34 <OLED_InitBuffer+0x60>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	701a      	strb	r2, [r3, #0]

    // 将所有页面标记为脏（需要更新）
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8001c04:	2300      	movs	r3, #0
 8001c06:	71fb      	strb	r3, [r7, #7]
 8001c08:	e006      	b.n	8001c18 <OLED_InitBuffer+0x44>
    {
        oled_dirty_pages[i] = 1;
 8001c0a:	79fb      	ldrb	r3, [r7, #7]
 8001c0c:	4a0a      	ldr	r2, [pc, #40]	@ (8001c38 <OLED_InitBuffer+0x64>)
 8001c0e:	2101      	movs	r1, #1
 8001c10:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8001c12:	79fb      	ldrb	r3, [r7, #7]
 8001c14:	3301      	adds	r3, #1
 8001c16:	71fb      	strb	r3, [r7, #7]
 8001c18:	79fb      	ldrb	r3, [r7, #7]
 8001c1a:	2b07      	cmp	r3, #7
 8001c1c:	d9f5      	bls.n	8001c0a <OLED_InitBuffer+0x36>
    }
}
 8001c1e:	bf00      	nop
 8001c20:	bf00      	nop
 8001c22:	3708      	adds	r7, #8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	2000036c 	.word	0x2000036c
 8001c2c:	2000076c 	.word	0x2000076c
 8001c30:	20000360 	.word	0x20000360
 8001c34:	20000361 	.word	0x20000361
 8001c38:	20000364 	.word	0x20000364

08001c3c <OLED_ClearBuffer>:

// 清空缓冲区
void OLED_ClearBuffer(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
    // 重置缓冲区为全0 (全黑)
    memset(OLED_BackBuffer, 0, sizeof(OLED_BackBuffer));
 8001c42:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c46:	2100      	movs	r1, #0
 8001c48:	480a      	ldr	r0, [pc, #40]	@ (8001c74 <OLED_ClearBuffer+0x38>)
 8001c4a:	f006 fc04 	bl	8008456 <memset>

    // 将所有页面标记为脏（需要更新）
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8001c4e:	2300      	movs	r3, #0
 8001c50:	71fb      	strb	r3, [r7, #7]
 8001c52:	e006      	b.n	8001c62 <OLED_ClearBuffer+0x26>
    {
        oled_dirty_pages[i] = 1;
 8001c54:	79fb      	ldrb	r3, [r7, #7]
 8001c56:	4a08      	ldr	r2, [pc, #32]	@ (8001c78 <OLED_ClearBuffer+0x3c>)
 8001c58:	2101      	movs	r1, #1
 8001c5a:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8001c5c:	79fb      	ldrb	r3, [r7, #7]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	71fb      	strb	r3, [r7, #7]
 8001c62:	79fb      	ldrb	r3, [r7, #7]
 8001c64:	2b07      	cmp	r3, #7
 8001c66:	d9f5      	bls.n	8001c54 <OLED_ClearBuffer+0x18>
    }
}
 8001c68:	bf00      	nop
 8001c6a:	bf00      	nop
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	2000036c 	.word	0x2000036c
 8001c78:	20000364 	.word	0x20000364

08001c7c <OLED_IsBusy>:

uint8_t OLED_IsBusy(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
    // 如果标记为忙，检查是否已经过了足够时间
    if (oled_update_flag)
 8001c82:	4b0f      	ldr	r3, [pc, #60]	@ (8001cc0 <OLED_IsBusy+0x44>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d007      	beq.n	8001c9c <OLED_IsBusy+0x20>
    {
        // SSD1315/SSD1306 典型帧率约为60Hz，每帧约16.7ms
        // 可以根据需要调整刷新率，减小此值可以提高帧率
        uint32_t current_time = HAL_GetTick();
 8001c8c:	f003 fe32 	bl	80058f4 <HAL_GetTick>
 8001c90:	6078      	str	r0, [r7, #4]
        if (current_time - oled_last_update_time >= 0)
 8001c92:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc4 <OLED_IsBusy+0x48>)
 8001c94:	681b      	ldr	r3, [r3, #0]
        {
            oled_update_flag = OLED_READY; // 已经过了足够时间，不再忙
 8001c96:	4b0a      	ldr	r3, [pc, #40]	@ (8001cc0 <OLED_IsBusy+0x44>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	701a      	strb	r2, [r3, #0]
        }
    }

    // 如果DMA传输正在进行，也视为忙
    return (oled_update_flag || oled_dma_busy);
 8001c9c:	4b08      	ldr	r3, [pc, #32]	@ (8001cc0 <OLED_IsBusy+0x44>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d104      	bne.n	8001cb0 <OLED_IsBusy+0x34>
 8001ca6:	4b08      	ldr	r3, [pc, #32]	@ (8001cc8 <OLED_IsBusy+0x4c>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <OLED_IsBusy+0x38>
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e000      	b.n	8001cb6 <OLED_IsBusy+0x3a>
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	b2db      	uxtb	r3, r3
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	20000360 	.word	0x20000360
 8001cc4:	2000035c 	.word	0x2000035c
 8001cc8:	20000361 	.word	0x20000361

08001ccc <OLED_UpdateDisplayVSync>:

void OLED_UpdateDisplayVSync(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af02      	add	r7, sp, #8
    // 等待上一次更新完成
    while (OLED_IsBusy())
 8001cd2:	bf00      	nop
 8001cd4:	f7ff ffd2 	bl	8001c7c <OLED_IsBusy>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1fa      	bne.n	8001cd4 <OLED_UpdateDisplayVSync+0x8>
    {
        // 可以加入短暂延时或者让出CPU，但通常不会停留很久
    }

    oled_update_flag = OLED_BUSY;
 8001cde:	4b1f      	ldr	r3, [pc, #124]	@ (8001d5c <OLED_UpdateDisplayVSync+0x90>)
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	701a      	strb	r2, [r3, #0]
    oled_last_update_time = HAL_GetTick();
 8001ce4:	f003 fe06 	bl	80058f4 <HAL_GetTick>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	4a1d      	ldr	r2, [pc, #116]	@ (8001d60 <OLED_UpdateDisplayVSync+0x94>)
 8001cec:	6013      	str	r3, [r2, #0]

    OLED_FrontBuffer[0] = 0x40;                                             // 数据控制字节：Co=0, D/C#=1 (数据)
 8001cee:	4b1d      	ldr	r3, [pc, #116]	@ (8001d64 <OLED_UpdateDisplayVSync+0x98>)
 8001cf0:	2240      	movs	r2, #64	@ 0x40
 8001cf2:	701a      	strb	r2, [r3, #0]
    memcpy(OLED_FrontBuffer + 1, OLED_BackBuffer, OLED_WIDTH * OLED_PAGES); // 复制当前缓冲区到前缓冲区
 8001cf4:	4a1c      	ldr	r2, [pc, #112]	@ (8001d68 <OLED_UpdateDisplayVSync+0x9c>)
 8001cf6:	4b1d      	ldr	r3, [pc, #116]	@ (8001d6c <OLED_UpdateDisplayVSync+0xa0>)
 8001cf8:	4610      	mov	r0, r2
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d00:	461a      	mov	r2, r3
 8001d02:	f006 fc36 	bl	8008572 <memcpy>

    // 一次性发送所有命令
    for (uint8_t i = 0; i < sizeof(cmds); i++)
 8001d06:	2300      	movs	r3, #0
 8001d08:	71fb      	strb	r3, [r7, #7]
 8001d0a:	e008      	b.n	8001d1e <OLED_UpdateDisplayVSync+0x52>
    {
        OLED_SendCommand(cmds[i]);
 8001d0c:	79fb      	ldrb	r3, [r7, #7]
 8001d0e:	4a18      	ldr	r2, [pc, #96]	@ (8001d70 <OLED_UpdateDisplayVSync+0xa4>)
 8001d10:	5cd3      	ldrb	r3, [r2, r3]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f000 f920 	bl	8001f58 <OLED_SendCommand>
    for (uint8_t i = 0; i < sizeof(cmds); i++)
 8001d18:	79fb      	ldrb	r3, [r7, #7]
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	71fb      	strb	r3, [r7, #7]
 8001d1e:	79fb      	ldrb	r3, [r7, #7]
 8001d20:	2b07      	cmp	r3, #7
 8001d22:	d9f3      	bls.n	8001d0c <OLED_UpdateDisplayVSync+0x40>
    }


    HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDR << 1, OLED_FrontBuffer, OLED_WIDTH * OLED_PAGES + 1, HAL_MAX_DELAY);
 8001d24:	f04f 33ff 	mov.w	r3, #4294967295
 8001d28:	9300      	str	r3, [sp, #0]
 8001d2a:	f240 4301 	movw	r3, #1025	@ 0x401
 8001d2e:	4a0d      	ldr	r2, [pc, #52]	@ (8001d64 <OLED_UpdateDisplayVSync+0x98>)
 8001d30:	2178      	movs	r1, #120	@ 0x78
 8001d32:	4810      	ldr	r0, [pc, #64]	@ (8001d74 <OLED_UpdateDisplayVSync+0xa8>)
 8001d34:	f004 fb72 	bl	800641c <HAL_I2C_Master_Transmit>

    // 重置所有脏页标记
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8001d38:	2300      	movs	r3, #0
 8001d3a:	71bb      	strb	r3, [r7, #6]
 8001d3c:	e006      	b.n	8001d4c <OLED_UpdateDisplayVSync+0x80>
    {
        oled_dirty_pages[i] = 0;
 8001d3e:	79bb      	ldrb	r3, [r7, #6]
 8001d40:	4a0d      	ldr	r2, [pc, #52]	@ (8001d78 <OLED_UpdateDisplayVSync+0xac>)
 8001d42:	2100      	movs	r1, #0
 8001d44:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8001d46:	79bb      	ldrb	r3, [r7, #6]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	71bb      	strb	r3, [r7, #6]
 8001d4c:	79bb      	ldrb	r3, [r7, #6]
 8001d4e:	2b07      	cmp	r3, #7
 8001d50:	d9f5      	bls.n	8001d3e <OLED_UpdateDisplayVSync+0x72>
    }
}
 8001d52:	bf00      	nop
 8001d54:	bf00      	nop
 8001d56:	3708      	adds	r7, #8
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	20000360 	.word	0x20000360
 8001d60:	2000035c 	.word	0x2000035c
 8001d64:	2000076c 	.word	0x2000076c
 8001d68:	2000076d 	.word	0x2000076d
 8001d6c:	2000036c 	.word	0x2000036c
 8001d70:	0800ae20 	.word	0x0800ae20
 8001d74:	2000026c 	.word	0x2000026c
 8001d78:	20000364 	.word	0x20000364

08001d7c <OLED_UpdateDisplayPartial>:
    }
}

// 局部更新显示函数
void OLED_UpdateDisplayPartial(uint8_t startPage, uint8_t endPage)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af02      	add	r7, sp, #8
 8001d82:	4603      	mov	r3, r0
 8001d84:	460a      	mov	r2, r1
 8001d86:	71fb      	strb	r3, [r7, #7]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	71bb      	strb	r3, [r7, #6]
    // 边界检查
    if (startPage >= OLED_PAGES || endPage >= OLED_PAGES || startPage > endPage)
 8001d8c:	79fb      	ldrb	r3, [r7, #7]
 8001d8e:	2b07      	cmp	r3, #7
 8001d90:	d85c      	bhi.n	8001e4c <OLED_UpdateDisplayPartial+0xd0>
 8001d92:	79bb      	ldrb	r3, [r7, #6]
 8001d94:	2b07      	cmp	r3, #7
 8001d96:	d859      	bhi.n	8001e4c <OLED_UpdateDisplayPartial+0xd0>
 8001d98:	79fa      	ldrb	r2, [r7, #7]
 8001d9a:	79bb      	ldrb	r3, [r7, #6]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d855      	bhi.n	8001e4c <OLED_UpdateDisplayPartial+0xd0>
        return;

    // 等待上一次更新完成
    while (OLED_IsBusy())
 8001da0:	bf00      	nop
 8001da2:	f7ff ff6b 	bl	8001c7c <OLED_IsBusy>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d1fa      	bne.n	8001da2 <OLED_UpdateDisplayPartial+0x26>
    {
        // 可以加入短暂延时或者让出CPU
    }

    oled_update_flag = OLED_BUSY;
 8001dac:	4b29      	ldr	r3, [pc, #164]	@ (8001e54 <OLED_UpdateDisplayPartial+0xd8>)
 8001dae:	2201      	movs	r2, #1
 8001db0:	701a      	strb	r2, [r3, #0]
    oled_last_update_time = HAL_GetTick();
 8001db2:	f003 fd9f 	bl	80058f4 <HAL_GetTick>
 8001db6:	4603      	mov	r3, r0
 8001db8:	4a27      	ldr	r2, [pc, #156]	@ (8001e58 <OLED_UpdateDisplayPartial+0xdc>)
 8001dba:	6013      	str	r3, [r2, #0]

    // 设置页地址范围
    OLED_SendCommand(0x22);      // 页地址设置命令
 8001dbc:	2022      	movs	r0, #34	@ 0x22
 8001dbe:	f000 f8cb 	bl	8001f58 <OLED_SendCommand>
    OLED_SendCommand(startPage); // 起始页
 8001dc2:	79fb      	ldrb	r3, [r7, #7]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f000 f8c7 	bl	8001f58 <OLED_SendCommand>
    OLED_SendCommand(endPage);   // 结束页
 8001dca:	79bb      	ldrb	r3, [r7, #6]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f000 f8c3 	bl	8001f58 <OLED_SendCommand>

    // 设置列地址范围（总是更新整行）
    OLED_SendCommand(0x21); // 列地址设置命令
 8001dd2:	2021      	movs	r0, #33	@ 0x21
 8001dd4:	f000 f8c0 	bl	8001f58 <OLED_SendCommand>
    OLED_SendCommand(0x00); // 起始列
 8001dd8:	2000      	movs	r0, #0
 8001dda:	f000 f8bd 	bl	8001f58 <OLED_SendCommand>
    OLED_SendCommand(0x7F); // 结束列 (127)
 8001dde:	207f      	movs	r0, #127	@ 0x7f
 8001de0:	f000 f8ba 	bl	8001f58 <OLED_SendCommand>

    // 计算需要传输的数据长度
    uint16_t dataLen = OLED_WIDTH * (endPage - startPage + 1);
 8001de4:	79ba      	ldrb	r2, [r7, #6]
 8001de6:	79fb      	ldrb	r3, [r7, #7]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	3301      	adds	r3, #1
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	01db      	lsls	r3, r3, #7
 8001df0:	81bb      	strh	r3, [r7, #12]

    // 前缓冲区的第一个字节设为数据控制字节
    OLED_FrontBuffer[0] = 0x40; // 数据控制字节：Co=0, D/C#=1 (数据)
 8001df2:	4b1a      	ldr	r3, [pc, #104]	@ (8001e5c <OLED_UpdateDisplayPartial+0xe0>)
 8001df4:	2240      	movs	r2, #64	@ 0x40
 8001df6:	701a      	strb	r2, [r3, #0]

    // 只复制需要更新的页
    for (uint8_t page = startPage; page <= endPage; page++)
 8001df8:	79fb      	ldrb	r3, [r7, #7]
 8001dfa:	73fb      	strb	r3, [r7, #15]
 8001dfc:	e016      	b.n	8001e2c <OLED_UpdateDisplayPartial+0xb0>
    {
        memcpy(
            OLED_FrontBuffer + 1 + (page - startPage) * OLED_WIDTH,
 8001dfe:	7bfa      	ldrb	r2, [r7, #15]
 8001e00:	79fb      	ldrb	r3, [r7, #7]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	01db      	lsls	r3, r3, #7
 8001e06:	3301      	adds	r3, #1
        memcpy(
 8001e08:	4a14      	ldr	r2, [pc, #80]	@ (8001e5c <OLED_UpdateDisplayPartial+0xe0>)
 8001e0a:	1898      	adds	r0, r3, r2
            OLED_BackBuffer + page * OLED_WIDTH,
 8001e0c:	7bfb      	ldrb	r3, [r7, #15]
 8001e0e:	01db      	lsls	r3, r3, #7
 8001e10:	461a      	mov	r2, r3
        memcpy(
 8001e12:	4b13      	ldr	r3, [pc, #76]	@ (8001e60 <OLED_UpdateDisplayPartial+0xe4>)
 8001e14:	4413      	add	r3, r2
 8001e16:	2280      	movs	r2, #128	@ 0x80
 8001e18:	4619      	mov	r1, r3
 8001e1a:	f006 fbaa 	bl	8008572 <memcpy>
            OLED_WIDTH);
        oled_dirty_pages[page] = 0; // 重置脏页标记
 8001e1e:	7bfb      	ldrb	r3, [r7, #15]
 8001e20:	4a10      	ldr	r2, [pc, #64]	@ (8001e64 <OLED_UpdateDisplayPartial+0xe8>)
 8001e22:	2100      	movs	r1, #0
 8001e24:	54d1      	strb	r1, [r2, r3]
    for (uint8_t page = startPage; page <= endPage; page++)
 8001e26:	7bfb      	ldrb	r3, [r7, #15]
 8001e28:	3301      	adds	r3, #1
 8001e2a:	73fb      	strb	r3, [r7, #15]
 8001e2c:	7bfa      	ldrb	r2, [r7, #15]
 8001e2e:	79bb      	ldrb	r3, [r7, #6]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d9e4      	bls.n	8001dfe <OLED_UpdateDisplayPartial+0x82>
    }

    // 发送数据
    HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDR << 1, OLED_FrontBuffer, dataLen + 1, HAL_MAX_DELAY);
 8001e34:	89bb      	ldrh	r3, [r7, #12]
 8001e36:	3301      	adds	r3, #1
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	f04f 32ff 	mov.w	r2, #4294967295
 8001e3e:	9200      	str	r2, [sp, #0]
 8001e40:	4a06      	ldr	r2, [pc, #24]	@ (8001e5c <OLED_UpdateDisplayPartial+0xe0>)
 8001e42:	2178      	movs	r1, #120	@ 0x78
 8001e44:	4808      	ldr	r0, [pc, #32]	@ (8001e68 <OLED_UpdateDisplayPartial+0xec>)
 8001e46:	f004 fae9 	bl	800641c <HAL_I2C_Master_Transmit>
 8001e4a:	e000      	b.n	8001e4e <OLED_UpdateDisplayPartial+0xd2>
        return;
 8001e4c:	bf00      	nop
}
 8001e4e:	3710      	adds	r7, #16
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	20000360 	.word	0x20000360
 8001e58:	2000035c 	.word	0x2000035c
 8001e5c:	2000076c 	.word	0x2000076c
 8001e60:	2000036c 	.word	0x2000036c
 8001e64:	20000364 	.word	0x20000364
 8001e68:	2000026c 	.word	0x2000026c

08001e6c <OLED_WritePixel>:

void OLED_WritePixel(int16_t x, int16_t y, uint8_t color)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	80fb      	strh	r3, [r7, #6]
 8001e76:	460b      	mov	r3, r1
 8001e78:	80bb      	strh	r3, [r7, #4]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	70fb      	strb	r3, [r7, #3]
    // 边界检查
    if (x >= OLED_WIDTH || x < 0 || y >= OLED_HEIGHT || y < 0)
 8001e7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e82:	2b7f      	cmp	r3, #127	@ 0x7f
 8001e84:	dc5e      	bgt.n	8001f44 <OLED_WritePixel+0xd8>
 8001e86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	db5a      	blt.n	8001f44 <OLED_WritePixel+0xd8>
 8001e8e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e92:	2b3f      	cmp	r3, #63	@ 0x3f
 8001e94:	dc56      	bgt.n	8001f44 <OLED_WritePixel+0xd8>
 8001e96:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	db52      	blt.n	8001f44 <OLED_WritePixel+0xd8>
        return;

    // 计算像素所在的字节位置
    uint16_t byte_index = x + (y / 8) * OLED_WIDTH;
 8001e9e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	da00      	bge.n	8001ea8 <OLED_WritePixel+0x3c>
 8001ea6:	3307      	adds	r3, #7
 8001ea8:	10db      	asrs	r3, r3, #3
 8001eaa:	b21b      	sxth	r3, r3
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	01db      	lsls	r3, r3, #7
 8001eb0:	b29a      	uxth	r2, r3
 8001eb2:	88fb      	ldrh	r3, [r7, #6]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	81fb      	strh	r3, [r7, #14]
    uint8_t bit_position = y % 8;
 8001eb8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001ebc:	425a      	negs	r2, r3
 8001ebe:	f003 0307 	and.w	r3, r3, #7
 8001ec2:	f002 0207 	and.w	r2, r2, #7
 8001ec6:	bf58      	it	pl
 8001ec8:	4253      	negpl	r3, r2
 8001eca:	b21b      	sxth	r3, r3
 8001ecc:	737b      	strb	r3, [r7, #13]
    uint8_t page = y / 8; // 计算所在页
 8001ece:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	da00      	bge.n	8001ed8 <OLED_WritePixel+0x6c>
 8001ed6:	3307      	adds	r3, #7
 8001ed8:	10db      	asrs	r3, r3, #3
 8001eda:	b21b      	sxth	r3, r3
 8001edc:	733b      	strb	r3, [r7, #12]

    // 记录当前像素值
    uint8_t old_value = OLED_BackBuffer[byte_index];
 8001ede:	89fb      	ldrh	r3, [r7, #14]
 8001ee0:	4a1b      	ldr	r2, [pc, #108]	@ (8001f50 <OLED_WritePixel+0xe4>)
 8001ee2:	5cd3      	ldrb	r3, [r2, r3]
 8001ee4:	72fb      	strb	r3, [r7, #11]

    if (color) // 如果需要点亮像素
 8001ee6:	78fb      	ldrb	r3, [r7, #3]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d00f      	beq.n	8001f0c <OLED_WritePixel+0xa0>
        OLED_BackBuffer[byte_index] |= (1 << bit_position);
 8001eec:	89fb      	ldrh	r3, [r7, #14]
 8001eee:	4a18      	ldr	r2, [pc, #96]	@ (8001f50 <OLED_WritePixel+0xe4>)
 8001ef0:	5cd3      	ldrb	r3, [r2, r3]
 8001ef2:	b25a      	sxtb	r2, r3
 8001ef4:	7b7b      	ldrb	r3, [r7, #13]
 8001ef6:	2101      	movs	r1, #1
 8001ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8001efc:	b25b      	sxtb	r3, r3
 8001efe:	4313      	orrs	r3, r2
 8001f00:	b25a      	sxtb	r2, r3
 8001f02:	89fb      	ldrh	r3, [r7, #14]
 8001f04:	b2d1      	uxtb	r1, r2
 8001f06:	4a12      	ldr	r2, [pc, #72]	@ (8001f50 <OLED_WritePixel+0xe4>)
 8001f08:	54d1      	strb	r1, [r2, r3]
 8001f0a:	e010      	b.n	8001f2e <OLED_WritePixel+0xc2>
    else // 如果需要熄灭像素
        OLED_BackBuffer[byte_index] &= ~(1 << bit_position);
 8001f0c:	89fb      	ldrh	r3, [r7, #14]
 8001f0e:	4a10      	ldr	r2, [pc, #64]	@ (8001f50 <OLED_WritePixel+0xe4>)
 8001f10:	5cd3      	ldrb	r3, [r2, r3]
 8001f12:	b25a      	sxtb	r2, r3
 8001f14:	7b7b      	ldrb	r3, [r7, #13]
 8001f16:	2101      	movs	r1, #1
 8001f18:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1c:	b25b      	sxtb	r3, r3
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	b25b      	sxtb	r3, r3
 8001f22:	4013      	ands	r3, r2
 8001f24:	b25a      	sxtb	r2, r3
 8001f26:	89fb      	ldrh	r3, [r7, #14]
 8001f28:	b2d1      	uxtb	r1, r2
 8001f2a:	4a09      	ldr	r2, [pc, #36]	@ (8001f50 <OLED_WritePixel+0xe4>)
 8001f2c:	54d1      	strb	r1, [r2, r3]

    // 如果像素值发生变化，标记该页为脏
    if (old_value != OLED_BackBuffer[byte_index])
 8001f2e:	89fb      	ldrh	r3, [r7, #14]
 8001f30:	4a07      	ldr	r2, [pc, #28]	@ (8001f50 <OLED_WritePixel+0xe4>)
 8001f32:	5cd3      	ldrb	r3, [r2, r3]
 8001f34:	7afa      	ldrb	r2, [r7, #11]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d005      	beq.n	8001f46 <OLED_WritePixel+0xda>
    {
        oled_dirty_pages[page] = 1;
 8001f3a:	7b3b      	ldrb	r3, [r7, #12]
 8001f3c:	4a05      	ldr	r2, [pc, #20]	@ (8001f54 <OLED_WritePixel+0xe8>)
 8001f3e:	2101      	movs	r1, #1
 8001f40:	54d1      	strb	r1, [r2, r3]
 8001f42:	e000      	b.n	8001f46 <OLED_WritePixel+0xda>
        return;
 8001f44:	bf00      	nop
    }
}
 8001f46:	3714      	adds	r7, #20
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bc80      	pop	{r7}
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	2000036c 	.word	0x2000036c
 8001f54:	20000364 	.word	0x20000364

08001f58 <OLED_SendCommand>:

void OLED_SendCommand(uint8_t command)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af02      	add	r7, sp, #8
 8001f5e:	4603      	mov	r3, r0
 8001f60:	71fb      	strb	r3, [r7, #7]
    uint8_t data[2];
    data[0] = 0x00; // Co = 0, D/C# = 0
 8001f62:	2300      	movs	r3, #0
 8001f64:	733b      	strb	r3, [r7, #12]
    data[1] = command;
 8001f66:	79fb      	ldrb	r3, [r7, #7]
 8001f68:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDR << 1, data, 2, HAL_MAX_DELAY);
 8001f6a:	f107 020c 	add.w	r2, r7, #12
 8001f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f72:	9300      	str	r3, [sp, #0]
 8001f74:	2302      	movs	r3, #2
 8001f76:	2178      	movs	r1, #120	@ 0x78
 8001f78:	4803      	ldr	r0, [pc, #12]	@ (8001f88 <OLED_SendCommand+0x30>)
 8001f7a:	f004 fa4f 	bl	800641c <HAL_I2C_Master_Transmit>
}
 8001f7e:	bf00      	nop
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	2000026c 	.word	0x2000026c

08001f8c <OLED_Init>:
    OLED_UpdateDisplayVSync();
}

// 更新OLED初始化函数来使用双缓冲
void OLED_Init()
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
    HAL_Delay(100); // 等待OLED上电稳定
 8001f90:	2064      	movs	r0, #100	@ 0x64
 8001f92:	f003 fcb9 	bl	8005908 <HAL_Delay>

    // 初始化命令序列
    OLED_SendCommand(0xAE); // 关闭显示
 8001f96:	20ae      	movs	r0, #174	@ 0xae
 8001f98:	f7ff ffde 	bl	8001f58 <OLED_SendCommand>
    OLED_SendCommand(0xD5); // 设置显示时钟分频比/振荡器频率
 8001f9c:	20d5      	movs	r0, #213	@ 0xd5
 8001f9e:	f7ff ffdb 	bl	8001f58 <OLED_SendCommand>
    OLED_SendCommand(0x80); // 推荐值
 8001fa2:	2080      	movs	r0, #128	@ 0x80
 8001fa4:	f7ff ffd8 	bl	8001f58 <OLED_SendCommand>
    OLED_SendCommand(0xA8); // 设置多路复用比
 8001fa8:	20a8      	movs	r0, #168	@ 0xa8
 8001faa:	f7ff ffd5 	bl	8001f58 <OLED_SendCommand>
    OLED_SendCommand(0x3F); // 默认 0x3F (1/64 duty)
 8001fae:	203f      	movs	r0, #63	@ 0x3f
 8001fb0:	f7ff ffd2 	bl	8001f58 <OLED_SendCommand>
    OLED_SendCommand(0xD3); // 设置显示偏移
 8001fb4:	20d3      	movs	r0, #211	@ 0xd3
 8001fb6:	f7ff ffcf 	bl	8001f58 <OLED_SendCommand>
    OLED_SendCommand(0x00); // 无偏移
 8001fba:	2000      	movs	r0, #0
 8001fbc:	f7ff ffcc 	bl	8001f58 <OLED_SendCommand>
    OLED_SendCommand(0x40); // 设置显示开始行 (0x40-0x7F)
 8001fc0:	2040      	movs	r0, #64	@ 0x40
 8001fc2:	f7ff ffc9 	bl	8001f58 <OLED_SendCommand>
    OLED_SendCommand(0x8D); // 电荷泵设置
 8001fc6:	208d      	movs	r0, #141	@ 0x8d
 8001fc8:	f7ff ffc6 	bl	8001f58 <OLED_SendCommand>
    OLED_SendCommand(0x14); // 启用电荷泵
 8001fcc:	2014      	movs	r0, #20
 8001fce:	f7ff ffc3 	bl	8001f58 <OLED_SendCommand>
    OLED_SendCommand(0x20); // 设置内存寻址模式
 8001fd2:	2020      	movs	r0, #32
 8001fd4:	f7ff ffc0 	bl	8001f58 <OLED_SendCommand>
    OLED_SendCommand(0x00); // 水平寻址模式
 8001fd8:	2000      	movs	r0, #0
 8001fda:	f7ff ffbd 	bl	8001f58 <OLED_SendCommand>
    OLED_SendCommand(0xA1); // 段重映射，列地址127映射到SEG0
 8001fde:	20a1      	movs	r0, #161	@ 0xa1
 8001fe0:	f7ff ffba 	bl	8001f58 <OLED_SendCommand>
    OLED_SendCommand(0xC8); // COM输出扫描方向，从COM[N-1]到COM0
 8001fe4:	20c8      	movs	r0, #200	@ 0xc8
 8001fe6:	f7ff ffb7 	bl	8001f58 <OLED_SendCommand>
    OLED_SendCommand(0xDA); // COM硬件配置
 8001fea:	20da      	movs	r0, #218	@ 0xda
 8001fec:	f7ff ffb4 	bl	8001f58 <OLED_SendCommand>
    OLED_SendCommand(0x12); // 交替COM配置，使能COM左/右重映射
 8001ff0:	2012      	movs	r0, #18
 8001ff2:	f7ff ffb1 	bl	8001f58 <OLED_SendCommand>
    OLED_SendCommand(0x81); // 设置对比度控制
 8001ff6:	2081      	movs	r0, #129	@ 0x81
 8001ff8:	f7ff ffae 	bl	8001f58 <OLED_SendCommand>
    OLED_SendCommand(0xCF); // 对比度值(0-255)
 8001ffc:	20cf      	movs	r0, #207	@ 0xcf
 8001ffe:	f7ff ffab 	bl	8001f58 <OLED_SendCommand>
    OLED_SendCommand(0xD9); // 设置预充电周期
 8002002:	20d9      	movs	r0, #217	@ 0xd9
 8002004:	f7ff ffa8 	bl	8001f58 <OLED_SendCommand>
    OLED_SendCommand(0xF1); // 第1和第2阶段的预充电周期
 8002008:	20f1      	movs	r0, #241	@ 0xf1
 800200a:	f7ff ffa5 	bl	8001f58 <OLED_SendCommand>
    OLED_SendCommand(0xDB); // 设置VCOMH解除选择电平
 800200e:	20db      	movs	r0, #219	@ 0xdb
 8002010:	f7ff ffa2 	bl	8001f58 <OLED_SendCommand>
    OLED_SendCommand(0x30); // 约0.83xVcc
 8002014:	2030      	movs	r0, #48	@ 0x30
 8002016:	f7ff ff9f 	bl	8001f58 <OLED_SendCommand>
    OLED_SendCommand(0xA4); // 显示RAM内容
 800201a:	20a4      	movs	r0, #164	@ 0xa4
 800201c:	f7ff ff9c 	bl	8001f58 <OLED_SendCommand>
    OLED_SendCommand(0xA6); // 正常显示(非反显)
 8002020:	20a6      	movs	r0, #166	@ 0xa6
 8002022:	f7ff ff99 	bl	8001f58 <OLED_SendCommand>
    OLED_SendCommand(0x2E); // 禁用滚动
 8002026:	202e      	movs	r0, #46	@ 0x2e
 8002028:	f7ff ff96 	bl	8001f58 <OLED_SendCommand>

    // 初始化缓冲区
    OLED_InitBuffer();
 800202c:	f7ff fdd2 	bl	8001bd4 <OLED_InitBuffer>

    // 清屏
    OLED_ClearBuffer();
 8002030:	f7ff fe04 	bl	8001c3c <OLED_ClearBuffer>

    // 开启显示
    OLED_SendCommand(0xAF);
 8002034:	20af      	movs	r0, #175	@ 0xaf
 8002036:	f7ff ff8f 	bl	8001f58 <OLED_SendCommand>
}
 800203a:	bf00      	nop
 800203c:	bd80      	pop	{r7, pc}
	...

08002040 <OLED_InvertArea>:

// 区域反色功能 - 将指定矩形区域内的像素颜色反转 //! UPDATEDISPLAY REQUIRED
void OLED_InvertArea(int16_t x, int16_t y, uint8_t width, uint8_t height)
{
 8002040:	b490      	push	{r4, r7}
 8002042:	b088      	sub	sp, #32
 8002044:	af00      	add	r7, sp, #0
 8002046:	4604      	mov	r4, r0
 8002048:	4608      	mov	r0, r1
 800204a:	4611      	mov	r1, r2
 800204c:	461a      	mov	r2, r3
 800204e:	4623      	mov	r3, r4
 8002050:	80fb      	strh	r3, [r7, #6]
 8002052:	4603      	mov	r3, r0
 8002054:	80bb      	strh	r3, [r7, #4]
 8002056:	460b      	mov	r3, r1
 8002058:	70fb      	strb	r3, [r7, #3]
 800205a:	4613      	mov	r3, r2
 800205c:	70bb      	strb	r3, [r7, #2]
    if (width == 0 || height == 0)
 800205e:	78fb      	ldrb	r3, [r7, #3]
 8002060:	2b00      	cmp	r3, #0
 8002062:	f000 809d 	beq.w	80021a0 <OLED_InvertArea+0x160>
 8002066:	78bb      	ldrb	r3, [r7, #2]
 8002068:	2b00      	cmp	r3, #0
 800206a:	f000 8099 	beq.w	80021a0 <OLED_InvertArea+0x160>
        return;

    int16_t x_start_on_screen = x;
 800206e:	88fb      	ldrh	r3, [r7, #6]
 8002070:	83fb      	strh	r3, [r7, #30]
    int16_t y_start_on_screen = y;
 8002072:	88bb      	ldrh	r3, [r7, #4]
 8002074:	83bb      	strh	r3, [r7, #28]
    int16_t x_end_on_screen = x + width - 1;
 8002076:	78fb      	ldrb	r3, [r7, #3]
 8002078:	b29a      	uxth	r2, r3
 800207a:	88fb      	ldrh	r3, [r7, #6]
 800207c:	4413      	add	r3, r2
 800207e:	b29b      	uxth	r3, r3
 8002080:	3b01      	subs	r3, #1
 8002082:	b29b      	uxth	r3, r3
 8002084:	837b      	strh	r3, [r7, #26]
    int16_t y_end_on_screen = y + height - 1;
 8002086:	78bb      	ldrb	r3, [r7, #2]
 8002088:	b29a      	uxth	r2, r3
 800208a:	88bb      	ldrh	r3, [r7, #4]
 800208c:	4413      	add	r3, r2
 800208e:	b29b      	uxth	r3, r3
 8002090:	3b01      	subs	r3, #1
 8002092:	b29b      	uxth	r3, r3
 8002094:	833b      	strh	r3, [r7, #24]

    // Clip to screen boundaries
    if (x_start_on_screen < 0)
 8002096:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800209a:	2b00      	cmp	r3, #0
 800209c:	da01      	bge.n	80020a2 <OLED_InvertArea+0x62>
        x_start_on_screen = 0;
 800209e:	2300      	movs	r3, #0
 80020a0:	83fb      	strh	r3, [r7, #30]
    if (y_start_on_screen < 0)
 80020a2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	da01      	bge.n	80020ae <OLED_InvertArea+0x6e>
        y_start_on_screen = 0;
 80020aa:	2300      	movs	r3, #0
 80020ac:	83bb      	strh	r3, [r7, #28]
    if (x_end_on_screen >= OLED_WIDTH)
 80020ae:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80020b2:	2b7f      	cmp	r3, #127	@ 0x7f
 80020b4:	dd01      	ble.n	80020ba <OLED_InvertArea+0x7a>
        x_end_on_screen = OLED_WIDTH - 1;
 80020b6:	237f      	movs	r3, #127	@ 0x7f
 80020b8:	837b      	strh	r3, [r7, #26]
    if (y_end_on_screen >= OLED_HEIGHT)
 80020ba:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80020be:	2b3f      	cmp	r3, #63	@ 0x3f
 80020c0:	dd01      	ble.n	80020c6 <OLED_InvertArea+0x86>
        y_end_on_screen = OLED_HEIGHT - 1;
 80020c2:	233f      	movs	r3, #63	@ 0x3f
 80020c4:	833b      	strh	r3, [r7, #24]

    // If clipped area is invalid (e.g., entirely off-screen after clipping)
    if (x_start_on_screen > x_end_on_screen || y_start_on_screen > y_end_on_screen)
 80020c6:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80020ca:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	dc68      	bgt.n	80021a4 <OLED_InvertArea+0x164>
 80020d2:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80020d6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80020da:	429a      	cmp	r2, r3
 80020dc:	dc62      	bgt.n	80021a4 <OLED_InvertArea+0x164>
        return;

    // 计算涉及的页范围
    uint8_t start_page = y_start_on_screen / 8;
 80020de:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	da00      	bge.n	80020e8 <OLED_InvertArea+0xa8>
 80020e6:	3307      	adds	r3, #7
 80020e8:	10db      	asrs	r3, r3, #3
 80020ea:	b21b      	sxth	r3, r3
 80020ec:	747b      	strb	r3, [r7, #17]
    uint8_t end_page = y_end_on_screen / 8;
 80020ee:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	da00      	bge.n	80020f8 <OLED_InvertArea+0xb8>
 80020f6:	3307      	adds	r3, #7
 80020f8:	10db      	asrs	r3, r3, #3
 80020fa:	b21b      	sxth	r3, r3
 80020fc:	743b      	strb	r3, [r7, #16]

    // 标记受影响的页为脏页
    extern volatile uint8_t oled_dirty_pages[];
    for (uint8_t page = start_page; page <= end_page; page++)
 80020fe:	7c7b      	ldrb	r3, [r7, #17]
 8002100:	75fb      	strb	r3, [r7, #23]
 8002102:	e006      	b.n	8002112 <OLED_InvertArea+0xd2>
    {
        oled_dirty_pages[page] = 1;
 8002104:	7dfb      	ldrb	r3, [r7, #23]
 8002106:	4a2a      	ldr	r2, [pc, #168]	@ (80021b0 <OLED_InvertArea+0x170>)
 8002108:	2101      	movs	r1, #1
 800210a:	54d1      	strb	r1, [r2, r3]
    for (uint8_t page = start_page; page <= end_page; page++)
 800210c:	7dfb      	ldrb	r3, [r7, #23]
 800210e:	3301      	adds	r3, #1
 8002110:	75fb      	strb	r3, [r7, #23]
 8002112:	7dfa      	ldrb	r2, [r7, #23]
 8002114:	7c3b      	ldrb	r3, [r7, #16]
 8002116:	429a      	cmp	r2, r3
 8002118:	d9f4      	bls.n	8002104 <OLED_InvertArea+0xc4>
    }

    // 优化的像素更新逻辑 - 按行处理以提高缓存命中率
    for (int16_t j = y_start_on_screen; j <= y_end_on_screen; j++)
 800211a:	8bbb      	ldrh	r3, [r7, #28]
 800211c:	82bb      	strh	r3, [r7, #20]
 800211e:	e038      	b.n	8002192 <OLED_InvertArea+0x152>
    {
        uint8_t page = (uint8_t)j / 8;
 8002120:	8abb      	ldrh	r3, [r7, #20]
 8002122:	b2db      	uxtb	r3, r3
 8002124:	08db      	lsrs	r3, r3, #3
 8002126:	73fb      	strb	r3, [r7, #15]
        uint8_t bit_position = (uint8_t)j % 8;
 8002128:	8abb      	ldrh	r3, [r7, #20]
 800212a:	b2db      	uxtb	r3, r3
 800212c:	f003 0307 	and.w	r3, r3, #7
 8002130:	73bb      	strb	r3, [r7, #14]
        uint16_t byte_index_base = page * OLED_WIDTH;
 8002132:	7bfb      	ldrb	r3, [r7, #15]
 8002134:	b29b      	uxth	r3, r3
 8002136:	01db      	lsls	r3, r3, #7
 8002138:	81bb      	strh	r3, [r7, #12]

        // 处理当前行上的所有像素
        for (int16_t i = x_start_on_screen; i <= x_end_on_screen; i++)
 800213a:	8bfb      	ldrh	r3, [r7, #30]
 800213c:	827b      	strh	r3, [r7, #18]
 800213e:	e01c      	b.n	800217a <OLED_InvertArea+0x13a>
        {
            uint16_t byte_index = byte_index_base + i;
 8002140:	8a7a      	ldrh	r2, [r7, #18]
 8002142:	89bb      	ldrh	r3, [r7, #12]
 8002144:	4413      	add	r3, r2
 8002146:	817b      	strh	r3, [r7, #10]

            // 反转位
            if (byte_index < sizeof(OLED_BackBuffer))
 8002148:	897b      	ldrh	r3, [r7, #10]
 800214a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800214e:	d20e      	bcs.n	800216e <OLED_InvertArea+0x12e>
            {
                OLED_BackBuffer[byte_index] ^= (1 << bit_position);
 8002150:	897b      	ldrh	r3, [r7, #10]
 8002152:	4a18      	ldr	r2, [pc, #96]	@ (80021b4 <OLED_InvertArea+0x174>)
 8002154:	5cd3      	ldrb	r3, [r2, r3]
 8002156:	b25a      	sxtb	r2, r3
 8002158:	7bbb      	ldrb	r3, [r7, #14]
 800215a:	2101      	movs	r1, #1
 800215c:	fa01 f303 	lsl.w	r3, r1, r3
 8002160:	b25b      	sxtb	r3, r3
 8002162:	4053      	eors	r3, r2
 8002164:	b25a      	sxtb	r2, r3
 8002166:	897b      	ldrh	r3, [r7, #10]
 8002168:	b2d1      	uxtb	r1, r2
 800216a:	4a12      	ldr	r2, [pc, #72]	@ (80021b4 <OLED_InvertArea+0x174>)
 800216c:	54d1      	strb	r1, [r2, r3]
        for (int16_t i = x_start_on_screen; i <= x_end_on_screen; i++)
 800216e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002172:	b29b      	uxth	r3, r3
 8002174:	3301      	adds	r3, #1
 8002176:	b29b      	uxth	r3, r3
 8002178:	827b      	strh	r3, [r7, #18]
 800217a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800217e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002182:	429a      	cmp	r2, r3
 8002184:	dddc      	ble.n	8002140 <OLED_InvertArea+0x100>
    for (int16_t j = y_start_on_screen; j <= y_end_on_screen; j++)
 8002186:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800218a:	b29b      	uxth	r3, r3
 800218c:	3301      	adds	r3, #1
 800218e:	b29b      	uxth	r3, r3
 8002190:	82bb      	strh	r3, [r7, #20]
 8002192:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002196:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800219a:	429a      	cmp	r2, r3
 800219c:	ddc0      	ble.n	8002120 <OLED_InvertArea+0xe0>
 800219e:	e002      	b.n	80021a6 <OLED_InvertArea+0x166>
        return;
 80021a0:	bf00      	nop
 80021a2:	e000      	b.n	80021a6 <OLED_InvertArea+0x166>
        return;
 80021a4:	bf00      	nop
            }
        }
    }
}
 80021a6:	3720      	adds	r7, #32
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bc90      	pop	{r4, r7}
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	20000364 	.word	0x20000364
 80021b4:	2000036c 	.word	0x2000036c

080021b8 <OLED_DisplayChar>:
    OLED_SendCommand(0x00 + (x & 0x0F));        // 设置低4位列地址
    OLED_SendCommand(0x10 + ((x >> 4) & 0x0F)); // 设置高4位列地址
}

void OLED_DisplayChar(int16_t x, int16_t y, char ch) //! UPDATEDISPLAY REQUIRED
{
 80021b8:	b480      	push	{r7}
 80021ba:	b089      	sub	sp, #36	@ 0x24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	4603      	mov	r3, r0
 80021c0:	80fb      	strh	r3, [r7, #6]
 80021c2:	460b      	mov	r3, r1
 80021c4:	80bb      	strh	r3, [r7, #4]
 80021c6:	4613      	mov	r3, r2
 80021c8:	70fb      	strb	r3, [r7, #3]
    const uint8_t font_width = 6;
 80021ca:	2306      	movs	r3, #6
 80021cc:	773b      	strb	r3, [r7, #28]
    const uint8_t font_height = 8;
 80021ce:	2308      	movs	r3, #8
 80021d0:	76fb      	strb	r3, [r7, #27]

    if (ch < 32)
 80021d2:	78fb      	ldrb	r3, [r7, #3]
 80021d4:	2b1f      	cmp	r3, #31
 80021d6:	f240 80aa 	bls.w	800232e <OLED_DisplayChar+0x176>
        return;

    uint8_t c = ch - 32;
 80021da:	78fb      	ldrb	r3, [r7, #3]
 80021dc:	3b20      	subs	r3, #32
 80021de:	76bb      	strb	r3, [r7, #26]

    uint8_t start_page = (y >= 0) ? (y / 8) : 0;
 80021e0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	db08      	blt.n	80021fa <OLED_DisplayChar+0x42>
 80021e8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	da00      	bge.n	80021f2 <OLED_DisplayChar+0x3a>
 80021f0:	3307      	adds	r3, #7
 80021f2:	10db      	asrs	r3, r3, #3
 80021f4:	b21b      	sxth	r3, r3
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	e000      	b.n	80021fc <OLED_DisplayChar+0x44>
 80021fa:	2300      	movs	r3, #0
 80021fc:	767b      	strb	r3, [r7, #25]
    uint8_t end_page = ((y + font_height - 1) < OLED_HEIGHT) ? ((y + font_height - 1) / 8) : (OLED_HEIGHT / 8 - 1);
 80021fe:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002202:	7efb      	ldrb	r3, [r7, #27]
 8002204:	4413      	add	r3, r2
 8002206:	2b40      	cmp	r3, #64	@ 0x40
 8002208:	dc0a      	bgt.n	8002220 <OLED_DisplayChar+0x68>
 800220a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800220e:	7efb      	ldrb	r3, [r7, #27]
 8002210:	4413      	add	r3, r2
 8002212:	3b01      	subs	r3, #1
 8002214:	2b00      	cmp	r3, #0
 8002216:	da00      	bge.n	800221a <OLED_DisplayChar+0x62>
 8002218:	3307      	adds	r3, #7
 800221a:	10db      	asrs	r3, r3, #3
 800221c:	b2db      	uxtb	r3, r3
 800221e:	e000      	b.n	8002222 <OLED_DisplayChar+0x6a>
 8002220:	2307      	movs	r3, #7
 8002222:	763b      	strb	r3, [r7, #24]

    extern volatile uint8_t oled_dirty_pages[];
    for (uint8_t page = start_page; page <= end_page && page < OLED_PAGES; page++)
 8002224:	7e7b      	ldrb	r3, [r7, #25]
 8002226:	77fb      	strb	r3, [r7, #31]
 8002228:	e006      	b.n	8002238 <OLED_DisplayChar+0x80>
    {
        oled_dirty_pages[page] = 1;
 800222a:	7ffb      	ldrb	r3, [r7, #31]
 800222c:	4a43      	ldr	r2, [pc, #268]	@ (800233c <OLED_DisplayChar+0x184>)
 800222e:	2101      	movs	r1, #1
 8002230:	54d1      	strb	r1, [r2, r3]
    for (uint8_t page = start_page; page <= end_page && page < OLED_PAGES; page++)
 8002232:	7ffb      	ldrb	r3, [r7, #31]
 8002234:	3301      	adds	r3, #1
 8002236:	77fb      	strb	r3, [r7, #31]
 8002238:	7ffa      	ldrb	r2, [r7, #31]
 800223a:	7e3b      	ldrb	r3, [r7, #24]
 800223c:	429a      	cmp	r2, r3
 800223e:	d802      	bhi.n	8002246 <OLED_DisplayChar+0x8e>
 8002240:	7ffb      	ldrb	r3, [r7, #31]
 8002242:	2b07      	cmp	r3, #7
 8002244:	d9f1      	bls.n	800222a <OLED_DisplayChar+0x72>
    }
    // 按列渲染
    for (uint8_t char_col = 0; char_col < font_width; char_col++)
 8002246:	2300      	movs	r3, #0
 8002248:	77bb      	strb	r3, [r7, #30]
 800224a:	e06b      	b.n	8002324 <OLED_DisplayChar+0x16c>
    {
        int16_t screen_x = x + char_col;
 800224c:	7fbb      	ldrb	r3, [r7, #30]
 800224e:	b29a      	uxth	r2, r3
 8002250:	88fb      	ldrh	r3, [r7, #6]
 8002252:	4413      	add	r3, r2
 8002254:	b29b      	uxth	r3, r3
 8002256:	82fb      	strh	r3, [r7, #22]
        if (screen_x < 0 || screen_x >= OLED_WIDTH)
 8002258:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800225c:	2b00      	cmp	r3, #0
 800225e:	db5d      	blt.n	800231c <OLED_DisplayChar+0x164>
 8002260:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002264:	2b7f      	cmp	r3, #127	@ 0x7f
 8002266:	dc59      	bgt.n	800231c <OLED_DisplayChar+0x164>
            continue;

        if ((c * font_width + char_col) >= sizeof(OLED_FONT_6x8))
 8002268:	7ebb      	ldrb	r3, [r7, #26]
 800226a:	7f3a      	ldrb	r2, [r7, #28]
 800226c:	fb03 f202 	mul.w	r2, r3, r2
 8002270:	7fbb      	ldrb	r3, [r7, #30]
 8002272:	4413      	add	r3, r2
 8002274:	461a      	mov	r2, r3
 8002276:	f240 2321 	movw	r3, #545	@ 0x221
 800227a:	429a      	cmp	r2, r3
 800227c:	d859      	bhi.n	8002332 <OLED_DisplayChar+0x17a>
            break;
        uint8_t font_data_col = OLED_FONT_6x8[c * font_width + char_col];
 800227e:	7ebb      	ldrb	r3, [r7, #26]
 8002280:	7f3a      	ldrb	r2, [r7, #28]
 8002282:	fb03 f202 	mul.w	r2, r3, r2
 8002286:	7fbb      	ldrb	r3, [r7, #30]
 8002288:	4413      	add	r3, r2
 800228a:	4a2d      	ldr	r2, [pc, #180]	@ (8002340 <OLED_DisplayChar+0x188>)
 800228c:	5cd3      	ldrb	r3, [r2, r3]
 800228e:	757b      	strb	r3, [r7, #21]

        for (uint8_t char_row_bit = 0; char_row_bit < font_height; char_row_bit++)
 8002290:	2300      	movs	r3, #0
 8002292:	777b      	strb	r3, [r7, #29]
 8002294:	e03d      	b.n	8002312 <OLED_DisplayChar+0x15a>
        {
            int16_t screen_y = y + char_row_bit;
 8002296:	7f7b      	ldrb	r3, [r7, #29]
 8002298:	b29a      	uxth	r2, r3
 800229a:	88bb      	ldrh	r3, [r7, #4]
 800229c:	4413      	add	r3, r2
 800229e:	b29b      	uxth	r3, r3
 80022a0:	827b      	strh	r3, [r7, #18]
            if (screen_y < 0 || screen_y >= OLED_HEIGHT)
 80022a2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	db2f      	blt.n	800230a <OLED_DisplayChar+0x152>
 80022aa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80022ae:	2b3f      	cmp	r3, #63	@ 0x3f
 80022b0:	dc2b      	bgt.n	800230a <OLED_DisplayChar+0x152>
                continue;

            if ((font_data_col >> char_row_bit) & 0x01)
 80022b2:	7d7a      	ldrb	r2, [r7, #21]
 80022b4:	7f7b      	ldrb	r3, [r7, #29]
 80022b6:	fa42 f303 	asr.w	r3, r2, r3
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d024      	beq.n	800230c <OLED_DisplayChar+0x154>
            {
                uint8_t page = (uint8_t)screen_y / 8;
 80022c2:	8a7b      	ldrh	r3, [r7, #18]
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	08db      	lsrs	r3, r3, #3
 80022c8:	747b      	strb	r3, [r7, #17]
                uint8_t bit_offset_in_page = (uint8_t)screen_y % 8;
 80022ca:	8a7b      	ldrh	r3, [r7, #18]
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	f003 0307 	and.w	r3, r3, #7
 80022d2:	743b      	strb	r3, [r7, #16]
                uint16_t buffer_index = (uint16_t)screen_x + page * OLED_WIDTH;
 80022d4:	7c7b      	ldrb	r3, [r7, #17]
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	01db      	lsls	r3, r3, #7
 80022da:	b29a      	uxth	r2, r3
 80022dc:	8afb      	ldrh	r3, [r7, #22]
 80022de:	4413      	add	r3, r2
 80022e0:	81fb      	strh	r3, [r7, #14]

                if (buffer_index < sizeof(OLED_BackBuffer))
 80022e2:	89fb      	ldrh	r3, [r7, #14]
 80022e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022e8:	d210      	bcs.n	800230c <OLED_DisplayChar+0x154>
                {
                    OLED_BackBuffer[buffer_index] |= (1 << bit_offset_in_page);
 80022ea:	89fb      	ldrh	r3, [r7, #14]
 80022ec:	4a15      	ldr	r2, [pc, #84]	@ (8002344 <OLED_DisplayChar+0x18c>)
 80022ee:	5cd3      	ldrb	r3, [r2, r3]
 80022f0:	b25a      	sxtb	r2, r3
 80022f2:	7c3b      	ldrb	r3, [r7, #16]
 80022f4:	2101      	movs	r1, #1
 80022f6:	fa01 f303 	lsl.w	r3, r1, r3
 80022fa:	b25b      	sxtb	r3, r3
 80022fc:	4313      	orrs	r3, r2
 80022fe:	b25a      	sxtb	r2, r3
 8002300:	89fb      	ldrh	r3, [r7, #14]
 8002302:	b2d1      	uxtb	r1, r2
 8002304:	4a0f      	ldr	r2, [pc, #60]	@ (8002344 <OLED_DisplayChar+0x18c>)
 8002306:	54d1      	strb	r1, [r2, r3]
 8002308:	e000      	b.n	800230c <OLED_DisplayChar+0x154>
                continue;
 800230a:	bf00      	nop
        for (uint8_t char_row_bit = 0; char_row_bit < font_height; char_row_bit++)
 800230c:	7f7b      	ldrb	r3, [r7, #29]
 800230e:	3301      	adds	r3, #1
 8002310:	777b      	strb	r3, [r7, #29]
 8002312:	7f7a      	ldrb	r2, [r7, #29]
 8002314:	7efb      	ldrb	r3, [r7, #27]
 8002316:	429a      	cmp	r2, r3
 8002318:	d3bd      	bcc.n	8002296 <OLED_DisplayChar+0xde>
 800231a:	e000      	b.n	800231e <OLED_DisplayChar+0x166>
            continue;
 800231c:	bf00      	nop
    for (uint8_t char_col = 0; char_col < font_width; char_col++)
 800231e:	7fbb      	ldrb	r3, [r7, #30]
 8002320:	3301      	adds	r3, #1
 8002322:	77bb      	strb	r3, [r7, #30]
 8002324:	7fba      	ldrb	r2, [r7, #30]
 8002326:	7f3b      	ldrb	r3, [r7, #28]
 8002328:	429a      	cmp	r2, r3
 800232a:	d38f      	bcc.n	800224c <OLED_DisplayChar+0x94>
 800232c:	e002      	b.n	8002334 <OLED_DisplayChar+0x17c>
        return;
 800232e:	bf00      	nop
 8002330:	e000      	b.n	8002334 <OLED_DisplayChar+0x17c>
            break;
 8002332:	bf00      	nop
                }
            }
        }
    }
}
 8002334:	3724      	adds	r7, #36	@ 0x24
 8002336:	46bd      	mov	sp, r7
 8002338:	bc80      	pop	{r7}
 800233a:	4770      	bx	lr
 800233c:	20000364 	.word	0x20000364
 8002340:	0800abfc 	.word	0x0800abfc
 8002344:	2000036c 	.word	0x2000036c

08002348 <OLED_DisplayCharInverted>:

void OLED_DisplayCharInverted(int16_t x, int16_t y, char ch, uint8_t inverted) //! UPDATEDISPLAY REQUIRED
{
 8002348:	b490      	push	{r4, r7}
 800234a:	b086      	sub	sp, #24
 800234c:	af00      	add	r7, sp, #0
 800234e:	4604      	mov	r4, r0
 8002350:	4608      	mov	r0, r1
 8002352:	4611      	mov	r1, r2
 8002354:	461a      	mov	r2, r3
 8002356:	4623      	mov	r3, r4
 8002358:	80fb      	strh	r3, [r7, #6]
 800235a:	4603      	mov	r3, r0
 800235c:	80bb      	strh	r3, [r7, #4]
 800235e:	460b      	mov	r3, r1
 8002360:	70fb      	strb	r3, [r7, #3]
 8002362:	4613      	mov	r3, r2
 8002364:	70bb      	strb	r3, [r7, #2]
    const uint8_t font_width = 6;
 8002366:	2306      	movs	r3, #6
 8002368:	753b      	strb	r3, [r7, #20]
    const uint8_t font_height = 8;
 800236a:	2308      	movs	r3, #8
 800236c:	74fb      	strb	r3, [r7, #19]

    if (ch < 32)
 800236e:	78fb      	ldrb	r3, [r7, #3]
 8002370:	2b1f      	cmp	r3, #31
 8002372:	f240 8090 	bls.w	8002496 <OLED_DisplayCharInverted+0x14e>
        return;

    uint8_t c = ch - 32;
 8002376:	78fb      	ldrb	r3, [r7, #3]
 8002378:	3b20      	subs	r3, #32
 800237a:	74bb      	strb	r3, [r7, #18]

    for (uint8_t char_col = 0; char_col < font_width; char_col++)
 800237c:	2300      	movs	r3, #0
 800237e:	75fb      	strb	r3, [r7, #23]
 8002380:	e083      	b.n	800248a <OLED_DisplayCharInverted+0x142>
    {
        int16_t screen_x = x + char_col;
 8002382:	7dfb      	ldrb	r3, [r7, #23]
 8002384:	b29a      	uxth	r2, r3
 8002386:	88fb      	ldrh	r3, [r7, #6]
 8002388:	4413      	add	r3, r2
 800238a:	b29b      	uxth	r3, r3
 800238c:	823b      	strh	r3, [r7, #16]
        if (screen_x < 0 || screen_x >= OLED_WIDTH)
 800238e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002392:	2b00      	cmp	r3, #0
 8002394:	db75      	blt.n	8002482 <OLED_DisplayCharInverted+0x13a>
 8002396:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800239a:	2b7f      	cmp	r3, #127	@ 0x7f
 800239c:	dc71      	bgt.n	8002482 <OLED_DisplayCharInverted+0x13a>
            continue;

        if ((c * font_width + char_col) >= sizeof(OLED_FONT_6x8))
 800239e:	7cbb      	ldrb	r3, [r7, #18]
 80023a0:	7d3a      	ldrb	r2, [r7, #20]
 80023a2:	fb03 f202 	mul.w	r2, r3, r2
 80023a6:	7dfb      	ldrb	r3, [r7, #23]
 80023a8:	4413      	add	r3, r2
 80023aa:	461a      	mov	r2, r3
 80023ac:	f240 2321 	movw	r3, #545	@ 0x221
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d872      	bhi.n	800249a <OLED_DisplayCharInverted+0x152>
            break;
        uint8_t font_data_col = OLED_FONT_6x8[c * font_width + char_col];
 80023b4:	7cbb      	ldrb	r3, [r7, #18]
 80023b6:	7d3a      	ldrb	r2, [r7, #20]
 80023b8:	fb03 f202 	mul.w	r2, r3, r2
 80023bc:	7dfb      	ldrb	r3, [r7, #23]
 80023be:	4413      	add	r3, r2
 80023c0:	4a38      	ldr	r2, [pc, #224]	@ (80024a4 <OLED_DisplayCharInverted+0x15c>)
 80023c2:	5cd3      	ldrb	r3, [r2, r3]
 80023c4:	75bb      	strb	r3, [r7, #22]

        if (inverted)
 80023c6:	78bb      	ldrb	r3, [r7, #2]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d002      	beq.n	80023d2 <OLED_DisplayCharInverted+0x8a>
        {
            font_data_col = ~font_data_col;
 80023cc:	7dbb      	ldrb	r3, [r7, #22]
 80023ce:	43db      	mvns	r3, r3
 80023d0:	75bb      	strb	r3, [r7, #22]
        }

        for (uint8_t char_row_bit = 0; char_row_bit < font_height; char_row_bit++)
 80023d2:	2300      	movs	r3, #0
 80023d4:	757b      	strb	r3, [r7, #21]
 80023d6:	e04f      	b.n	8002478 <OLED_DisplayCharInverted+0x130>
        {
            int16_t screen_y = y + char_row_bit;
 80023d8:	7d7b      	ldrb	r3, [r7, #21]
 80023da:	b29a      	uxth	r2, r3
 80023dc:	88bb      	ldrh	r3, [r7, #4]
 80023de:	4413      	add	r3, r2
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	81fb      	strh	r3, [r7, #14]
            if (screen_y < 0 || screen_y >= OLED_HEIGHT)
 80023e4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	db41      	blt.n	8002470 <OLED_DisplayCharInverted+0x128>
 80023ec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80023f0:	2b3f      	cmp	r3, #63	@ 0x3f
 80023f2:	dc3d      	bgt.n	8002470 <OLED_DisplayCharInverted+0x128>
                continue;

            uint8_t page = (uint8_t)screen_y / 8;
 80023f4:	89fb      	ldrh	r3, [r7, #14]
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	08db      	lsrs	r3, r3, #3
 80023fa:	737b      	strb	r3, [r7, #13]
            uint8_t bit_offset_in_page = (uint8_t)screen_y % 8;
 80023fc:	89fb      	ldrh	r3, [r7, #14]
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	f003 0307 	and.w	r3, r3, #7
 8002404:	733b      	strb	r3, [r7, #12]
            uint16_t buffer_index = (uint16_t)screen_x + page * OLED_WIDTH;
 8002406:	7b7b      	ldrb	r3, [r7, #13]
 8002408:	b29b      	uxth	r3, r3
 800240a:	01db      	lsls	r3, r3, #7
 800240c:	b29a      	uxth	r2, r3
 800240e:	8a3b      	ldrh	r3, [r7, #16]
 8002410:	4413      	add	r3, r2
 8002412:	817b      	strh	r3, [r7, #10]

            if (buffer_index < sizeof(OLED_BackBuffer))
 8002414:	897b      	ldrh	r3, [r7, #10]
 8002416:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800241a:	d22a      	bcs.n	8002472 <OLED_DisplayCharInverted+0x12a>
            {
                if ((font_data_col >> char_row_bit) & 0x01)
 800241c:	7dba      	ldrb	r2, [r7, #22]
 800241e:	7d7b      	ldrb	r3, [r7, #21]
 8002420:	fa42 f303 	asr.w	r3, r2, r3
 8002424:	f003 0301 	and.w	r3, r3, #1
 8002428:	2b00      	cmp	r3, #0
 800242a:	d00f      	beq.n	800244c <OLED_DisplayCharInverted+0x104>
                {
                    OLED_BackBuffer[buffer_index] |= (1 << bit_offset_in_page);
 800242c:	897b      	ldrh	r3, [r7, #10]
 800242e:	4a1e      	ldr	r2, [pc, #120]	@ (80024a8 <OLED_DisplayCharInverted+0x160>)
 8002430:	5cd3      	ldrb	r3, [r2, r3]
 8002432:	b25a      	sxtb	r2, r3
 8002434:	7b3b      	ldrb	r3, [r7, #12]
 8002436:	2101      	movs	r1, #1
 8002438:	fa01 f303 	lsl.w	r3, r1, r3
 800243c:	b25b      	sxtb	r3, r3
 800243e:	4313      	orrs	r3, r2
 8002440:	b25a      	sxtb	r2, r3
 8002442:	897b      	ldrh	r3, [r7, #10]
 8002444:	b2d1      	uxtb	r1, r2
 8002446:	4a18      	ldr	r2, [pc, #96]	@ (80024a8 <OLED_DisplayCharInverted+0x160>)
 8002448:	54d1      	strb	r1, [r2, r3]
 800244a:	e012      	b.n	8002472 <OLED_DisplayCharInverted+0x12a>
                }
                else
                {
                    OLED_BackBuffer[buffer_index] &= ~(1 << bit_offset_in_page);
 800244c:	897b      	ldrh	r3, [r7, #10]
 800244e:	4a16      	ldr	r2, [pc, #88]	@ (80024a8 <OLED_DisplayCharInverted+0x160>)
 8002450:	5cd3      	ldrb	r3, [r2, r3]
 8002452:	b25a      	sxtb	r2, r3
 8002454:	7b3b      	ldrb	r3, [r7, #12]
 8002456:	2101      	movs	r1, #1
 8002458:	fa01 f303 	lsl.w	r3, r1, r3
 800245c:	b25b      	sxtb	r3, r3
 800245e:	43db      	mvns	r3, r3
 8002460:	b25b      	sxtb	r3, r3
 8002462:	4013      	ands	r3, r2
 8002464:	b25a      	sxtb	r2, r3
 8002466:	897b      	ldrh	r3, [r7, #10]
 8002468:	b2d1      	uxtb	r1, r2
 800246a:	4a0f      	ldr	r2, [pc, #60]	@ (80024a8 <OLED_DisplayCharInverted+0x160>)
 800246c:	54d1      	strb	r1, [r2, r3]
 800246e:	e000      	b.n	8002472 <OLED_DisplayCharInverted+0x12a>
                continue;
 8002470:	bf00      	nop
        for (uint8_t char_row_bit = 0; char_row_bit < font_height; char_row_bit++)
 8002472:	7d7b      	ldrb	r3, [r7, #21]
 8002474:	3301      	adds	r3, #1
 8002476:	757b      	strb	r3, [r7, #21]
 8002478:	7d7a      	ldrb	r2, [r7, #21]
 800247a:	7cfb      	ldrb	r3, [r7, #19]
 800247c:	429a      	cmp	r2, r3
 800247e:	d3ab      	bcc.n	80023d8 <OLED_DisplayCharInverted+0x90>
 8002480:	e000      	b.n	8002484 <OLED_DisplayCharInverted+0x13c>
            continue;
 8002482:	bf00      	nop
    for (uint8_t char_col = 0; char_col < font_width; char_col++)
 8002484:	7dfb      	ldrb	r3, [r7, #23]
 8002486:	3301      	adds	r3, #1
 8002488:	75fb      	strb	r3, [r7, #23]
 800248a:	7dfa      	ldrb	r2, [r7, #23]
 800248c:	7d3b      	ldrb	r3, [r7, #20]
 800248e:	429a      	cmp	r2, r3
 8002490:	f4ff af77 	bcc.w	8002382 <OLED_DisplayCharInverted+0x3a>
 8002494:	e002      	b.n	800249c <OLED_DisplayCharInverted+0x154>
        return;
 8002496:	bf00      	nop
 8002498:	e000      	b.n	800249c <OLED_DisplayCharInverted+0x154>
            break;
 800249a:	bf00      	nop
                }
            }
        }
    }
}
 800249c:	3718      	adds	r7, #24
 800249e:	46bd      	mov	sp, r7
 80024a0:	bc90      	pop	{r4, r7}
 80024a2:	4770      	bx	lr
 80024a4:	0800abfc 	.word	0x0800abfc
 80024a8:	2000036c 	.word	0x2000036c

080024ac <OLED_DisplayString>:

void OLED_DisplayString(int16_t x, int16_t y, char *str) //! UPDATEDISPLAY REQUIRED
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	4603      	mov	r3, r0
 80024b4:	603a      	str	r2, [r7, #0]
 80024b6:	80fb      	strh	r3, [r7, #6]
 80024b8:	460b      	mov	r3, r1
 80024ba:	80bb      	strh	r3, [r7, #4]
    uint8_t j = 0;
 80024bc:	2300      	movs	r3, #0
 80024be:	73fb      	strb	r3, [r7, #15]
    const uint8_t font_width = 6;
 80024c0:	2306      	movs	r3, #6
 80024c2:	73bb      	strb	r3, [r7, #14]
    const uint8_t font_height = 8;
 80024c4:	2308      	movs	r3, #8
 80024c6:	737b      	strb	r3, [r7, #13]

    if (y >= OLED_HEIGHT || (y + font_height - 1) < 0)
 80024c8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80024cc:	2b3f      	cmp	r3, #63	@ 0x3f
 80024ce:	dc34      	bgt.n	800253a <OLED_DisplayString+0x8e>
 80024d0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80024d4:	7b7b      	ldrb	r3, [r7, #13]
 80024d6:	4413      	add	r3, r2
 80024d8:	2b00      	cmp	r3, #0
 80024da:	dd2e      	ble.n	800253a <OLED_DisplayString+0x8e>
    {
        return;
    }

    int16_t current_char_x;
    while (str[j] != '\0')
 80024dc:	e026      	b.n	800252c <OLED_DisplayString+0x80>
    {
        current_char_x = x + (j * font_width);
 80024de:	7bfb      	ldrb	r3, [r7, #15]
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	7bba      	ldrb	r2, [r7, #14]
 80024e4:	b292      	uxth	r2, r2
 80024e6:	fb02 f303 	mul.w	r3, r2, r3
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	88fb      	ldrh	r3, [r7, #6]
 80024ee:	4413      	add	r3, r2
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	817b      	strh	r3, [r7, #10]
        if (current_char_x >= OLED_WIDTH)
 80024f4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80024f8:	2b7f      	cmp	r3, #127	@ 0x7f
 80024fa:	dc20      	bgt.n	800253e <OLED_DisplayString+0x92>
        {
            break;
        }
        if ((current_char_x + font_width - 1) < 0)
 80024fc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002500:	7bbb      	ldrb	r3, [r7, #14]
 8002502:	4413      	add	r3, r2
 8002504:	2b00      	cmp	r3, #0
 8002506:	dc03      	bgt.n	8002510 <OLED_DisplayString+0x64>
        {
            j++;
 8002508:	7bfb      	ldrb	r3, [r7, #15]
 800250a:	3301      	adds	r3, #1
 800250c:	73fb      	strb	r3, [r7, #15]
            continue;
 800250e:	e00d      	b.n	800252c <OLED_DisplayString+0x80>
        }
        OLED_DisplayChar(current_char_x, y, str[j]);
 8002510:	7bfb      	ldrb	r3, [r7, #15]
 8002512:	683a      	ldr	r2, [r7, #0]
 8002514:	4413      	add	r3, r2
 8002516:	781a      	ldrb	r2, [r3, #0]
 8002518:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800251c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff fe49 	bl	80021b8 <OLED_DisplayChar>
        j++;
 8002526:	7bfb      	ldrb	r3, [r7, #15]
 8002528:	3301      	adds	r3, #1
 800252a:	73fb      	strb	r3, [r7, #15]
    while (str[j] != '\0')
 800252c:	7bfb      	ldrb	r3, [r7, #15]
 800252e:	683a      	ldr	r2, [r7, #0]
 8002530:	4413      	add	r3, r2
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d1d2      	bne.n	80024de <OLED_DisplayString+0x32>
 8002538:	e002      	b.n	8002540 <OLED_DisplayString+0x94>
        return;
 800253a:	bf00      	nop
 800253c:	e000      	b.n	8002540 <OLED_DisplayString+0x94>
            break;
 800253e:	bf00      	nop
    }
}
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <OLED_DisplayStringInverted>:

void OLED_DisplayStringInverted(int16_t x, int16_t y, char *str, uint8_t inverted) //! UPDATEDISPLAY REQUIRED
{
 8002546:	b580      	push	{r7, lr}
 8002548:	b086      	sub	sp, #24
 800254a:	af00      	add	r7, sp, #0
 800254c:	60ba      	str	r2, [r7, #8]
 800254e:	461a      	mov	r2, r3
 8002550:	4603      	mov	r3, r0
 8002552:	81fb      	strh	r3, [r7, #14]
 8002554:	460b      	mov	r3, r1
 8002556:	81bb      	strh	r3, [r7, #12]
 8002558:	4613      	mov	r3, r2
 800255a:	71fb      	strb	r3, [r7, #7]
    uint8_t j = 0;
 800255c:	2300      	movs	r3, #0
 800255e:	75fb      	strb	r3, [r7, #23]
    const uint8_t font_width = 6;
 8002560:	2306      	movs	r3, #6
 8002562:	75bb      	strb	r3, [r7, #22]
    const uint8_t font_height = 8;
 8002564:	2308      	movs	r3, #8
 8002566:	757b      	strb	r3, [r7, #21]

    if (y >= OLED_HEIGHT || (y + font_height - 1) < 0)
 8002568:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800256c:	2b3f      	cmp	r3, #63	@ 0x3f
 800256e:	dc34      	bgt.n	80025da <OLED_DisplayStringInverted+0x94>
 8002570:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002574:	7d7b      	ldrb	r3, [r7, #21]
 8002576:	4413      	add	r3, r2
 8002578:	2b00      	cmp	r3, #0
 800257a:	dd2e      	ble.n	80025da <OLED_DisplayStringInverted+0x94>
    {
        return;
    }

    int16_t current_char_x;
    while (str[j] != '\0')
 800257c:	e026      	b.n	80025cc <OLED_DisplayStringInverted+0x86>
    {
        current_char_x = x + (j * font_width);
 800257e:	7dfb      	ldrb	r3, [r7, #23]
 8002580:	b29b      	uxth	r3, r3
 8002582:	7dba      	ldrb	r2, [r7, #22]
 8002584:	b292      	uxth	r2, r2
 8002586:	fb02 f303 	mul.w	r3, r2, r3
 800258a:	b29a      	uxth	r2, r3
 800258c:	89fb      	ldrh	r3, [r7, #14]
 800258e:	4413      	add	r3, r2
 8002590:	b29b      	uxth	r3, r3
 8002592:	827b      	strh	r3, [r7, #18]
        if (current_char_x >= OLED_WIDTH)
 8002594:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002598:	2b7f      	cmp	r3, #127	@ 0x7f
 800259a:	dc20      	bgt.n	80025de <OLED_DisplayStringInverted+0x98>
        {
            break;
        }
        if ((current_char_x + font_width - 1) < 0)
 800259c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80025a0:	7dbb      	ldrb	r3, [r7, #22]
 80025a2:	4413      	add	r3, r2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	dc03      	bgt.n	80025b0 <OLED_DisplayStringInverted+0x6a>
        {
            j++;
 80025a8:	7dfb      	ldrb	r3, [r7, #23]
 80025aa:	3301      	adds	r3, #1
 80025ac:	75fb      	strb	r3, [r7, #23]
            continue;
 80025ae:	e00d      	b.n	80025cc <OLED_DisplayStringInverted+0x86>
        }
        OLED_DisplayCharInverted(current_char_x, y, str[j], inverted);
 80025b0:	7dfb      	ldrb	r3, [r7, #23]
 80025b2:	68ba      	ldr	r2, [r7, #8]
 80025b4:	4413      	add	r3, r2
 80025b6:	781a      	ldrb	r2, [r3, #0]
 80025b8:	79fb      	ldrb	r3, [r7, #7]
 80025ba:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 80025be:	f9b7 0012 	ldrsh.w	r0, [r7, #18]
 80025c2:	f7ff fec1 	bl	8002348 <OLED_DisplayCharInverted>
        j++;
 80025c6:	7dfb      	ldrb	r3, [r7, #23]
 80025c8:	3301      	adds	r3, #1
 80025ca:	75fb      	strb	r3, [r7, #23]
    while (str[j] != '\0')
 80025cc:	7dfb      	ldrb	r3, [r7, #23]
 80025ce:	68ba      	ldr	r2, [r7, #8]
 80025d0:	4413      	add	r3, r2
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d1d2      	bne.n	800257e <OLED_DisplayStringInverted+0x38>
 80025d8:	e002      	b.n	80025e0 <OLED_DisplayStringInverted+0x9a>
        return;
 80025da:	bf00      	nop
 80025dc:	e000      	b.n	80025e0 <OLED_DisplayStringInverted+0x9a>
            break;
 80025de:	bf00      	nop
    }
}
 80025e0:	3718      	adds	r7, #24
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
	...

080025e8 <System_UI_Loop>:
#define OLED_TITLE_End_Y 0
#define StartTweenTime 2500
#define TweenStyle EASE_INOUT_ELASTIC

void System_UI_Loop()
{
 80025e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025ea:	b089      	sub	sp, #36	@ 0x24
 80025ec:	af04      	add	r7, sp, #16
    static bool isFirstRun = true;

    float x, y, x1, y1;
    if (!isFirstRun)
 80025ee:	4ba5      	ldr	r3, [pc, #660]	@ (8002884 <System_UI_Loop+0x29c>)
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	f083 0301 	eor.w	r3, r3, #1
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <System_UI_Loop+0x18>
        SystemGetsSignal();
 80025fc:	f001 f88a 	bl	8003714 <SystemGetsSignal>

    if (isFirstRun) //第一次启动调用，初始化部分
 8002600:	4ba0      	ldr	r3, [pc, #640]	@ (8002884 <System_UI_Loop+0x29c>)
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	f000 81a1 	beq.w	800294c <System_UI_Loop+0x364>
    {
#pragma region 标题栏
        OLED_MoveObject(&g_Title_AnimationManager, "TitleGames", (OLED_WIDTH - strlen("Epicful Games") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("Epicful Games") * 6), OLED_TITLE_End_Y, StartTweenTime, TweenStyle);
 800260a:	230f      	movs	r3, #15
 800260c:	9303      	str	r3, [sp, #12]
 800260e:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8002612:	9302      	str	r3, [sp, #8]
 8002614:	f04f 0300 	mov.w	r3, #0
 8002618:	9301      	str	r3, [sp, #4]
 800261a:	4b9b      	ldr	r3, [pc, #620]	@ (8002888 <System_UI_Loop+0x2a0>)
 800261c:	9300      	str	r3, [sp, #0]
 800261e:	4b9b      	ldr	r3, [pc, #620]	@ (800288c <System_UI_Loop+0x2a4>)
 8002620:	4a99      	ldr	r2, [pc, #612]	@ (8002888 <System_UI_Loop+0x2a0>)
 8002622:	499b      	ldr	r1, [pc, #620]	@ (8002890 <System_UI_Loop+0x2a8>)
 8002624:	489b      	ldr	r0, [pc, #620]	@ (8002894 <System_UI_Loop+0x2ac>)
 8002626:	f002 fc66 	bl	8004ef6 <OLED_MoveObject>
        OLED_MoveObject(&g_Title_AnimationManager, "TitleTools", (OLED_WIDTH - strlen("Tools For You") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("Tools For You") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 800262a:	230f      	movs	r3, #15
 800262c:	9303      	str	r3, [sp, #12]
 800262e:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8002632:	9302      	str	r3, [sp, #8]
 8002634:	4b95      	ldr	r3, [pc, #596]	@ (800288c <System_UI_Loop+0x2a4>)
 8002636:	9301      	str	r3, [sp, #4]
 8002638:	4b93      	ldr	r3, [pc, #588]	@ (8002888 <System_UI_Loop+0x2a0>)
 800263a:	9300      	str	r3, [sp, #0]
 800263c:	4b93      	ldr	r3, [pc, #588]	@ (800288c <System_UI_Loop+0x2a4>)
 800263e:	4a92      	ldr	r2, [pc, #584]	@ (8002888 <System_UI_Loop+0x2a0>)
 8002640:	4995      	ldr	r1, [pc, #596]	@ (8002898 <System_UI_Loop+0x2b0>)
 8002642:	4894      	ldr	r0, [pc, #592]	@ (8002894 <System_UI_Loop+0x2ac>)
 8002644:	f002 fc57 	bl	8004ef6 <OLED_MoveObject>
        OLED_MoveObject(&g_Title_AnimationManager, "TitleStatus", (OLED_WIDTH - strlen("Machine States") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("Machine States") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 8002648:	230f      	movs	r3, #15
 800264a:	9303      	str	r3, [sp, #12]
 800264c:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8002650:	9302      	str	r3, [sp, #8]
 8002652:	4b8e      	ldr	r3, [pc, #568]	@ (800288c <System_UI_Loop+0x2a4>)
 8002654:	9301      	str	r3, [sp, #4]
 8002656:	4b91      	ldr	r3, [pc, #580]	@ (800289c <System_UI_Loop+0x2b4>)
 8002658:	9300      	str	r3, [sp, #0]
 800265a:	4b8c      	ldr	r3, [pc, #560]	@ (800288c <System_UI_Loop+0x2a4>)
 800265c:	4a8f      	ldr	r2, [pc, #572]	@ (800289c <System_UI_Loop+0x2b4>)
 800265e:	4990      	ldr	r1, [pc, #576]	@ (80028a0 <System_UI_Loop+0x2b8>)
 8002660:	488c      	ldr	r0, [pc, #560]	@ (8002894 <System_UI_Loop+0x2ac>)
 8002662:	f002 fc48 	bl	8004ef6 <OLED_MoveObject>
        OLED_MoveObject(&g_Title_AnimationManager, "TitleSettings", (OLED_WIDTH - strlen("STM Settings") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("STM Settings") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 8002666:	230f      	movs	r3, #15
 8002668:	9303      	str	r3, [sp, #12]
 800266a:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800266e:	9302      	str	r3, [sp, #8]
 8002670:	4b86      	ldr	r3, [pc, #536]	@ (800288c <System_UI_Loop+0x2a4>)
 8002672:	9301      	str	r3, [sp, #4]
 8002674:	4b8b      	ldr	r3, [pc, #556]	@ (80028a4 <System_UI_Loop+0x2bc>)
 8002676:	9300      	str	r3, [sp, #0]
 8002678:	4b84      	ldr	r3, [pc, #528]	@ (800288c <System_UI_Loop+0x2a4>)
 800267a:	4a8a      	ldr	r2, [pc, #552]	@ (80028a4 <System_UI_Loop+0x2bc>)
 800267c:	498a      	ldr	r1, [pc, #552]	@ (80028a8 <System_UI_Loop+0x2c0>)
 800267e:	4885      	ldr	r0, [pc, #532]	@ (8002894 <System_UI_Loop+0x2ac>)
 8002680:	f002 fc39 	bl	8004ef6 <OLED_MoveObject>
        OLED_MoveObject(&g_Title_AnimationManager, "TitleAbout", (OLED_WIDTH - strlen("Developer") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("Developer") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 8002684:	230f      	movs	r3, #15
 8002686:	9303      	str	r3, [sp, #12]
 8002688:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800268c:	9302      	str	r3, [sp, #8]
 800268e:	4b7f      	ldr	r3, [pc, #508]	@ (800288c <System_UI_Loop+0x2a4>)
 8002690:	9301      	str	r3, [sp, #4]
 8002692:	4b86      	ldr	r3, [pc, #536]	@ (80028ac <System_UI_Loop+0x2c4>)
 8002694:	9300      	str	r3, [sp, #0]
 8002696:	4b7d      	ldr	r3, [pc, #500]	@ (800288c <System_UI_Loop+0x2a4>)
 8002698:	4a84      	ldr	r2, [pc, #528]	@ (80028ac <System_UI_Loop+0x2c4>)
 800269a:	4985      	ldr	r1, [pc, #532]	@ (80028b0 <System_UI_Loop+0x2c8>)
 800269c:	487d      	ldr	r0, [pc, #500]	@ (8002894 <System_UI_Loop+0x2ac>)
 800269e:	f002 fc2a 	bl	8004ef6 <OLED_MoveObject>

        OLED_MoveObject(&g_Title_AnimationManager, "TitleSnake", (OLED_WIDTH - strlen("Greedy Snake") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("Greedy Snake") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 80026a2:	230f      	movs	r3, #15
 80026a4:	9303      	str	r3, [sp, #12]
 80026a6:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80026aa:	9302      	str	r3, [sp, #8]
 80026ac:	4b77      	ldr	r3, [pc, #476]	@ (800288c <System_UI_Loop+0x2a4>)
 80026ae:	9301      	str	r3, [sp, #4]
 80026b0:	4b7c      	ldr	r3, [pc, #496]	@ (80028a4 <System_UI_Loop+0x2bc>)
 80026b2:	9300      	str	r3, [sp, #0]
 80026b4:	4b75      	ldr	r3, [pc, #468]	@ (800288c <System_UI_Loop+0x2a4>)
 80026b6:	4a7b      	ldr	r2, [pc, #492]	@ (80028a4 <System_UI_Loop+0x2bc>)
 80026b8:	497e      	ldr	r1, [pc, #504]	@ (80028b4 <System_UI_Loop+0x2cc>)
 80026ba:	4876      	ldr	r0, [pc, #472]	@ (8002894 <System_UI_Loop+0x2ac>)
 80026bc:	f002 fc1b 	bl	8004ef6 <OLED_MoveObject>
        OLED_MoveObject(&g_Title_AnimationManager, "Title2048", (OLED_WIDTH - strlen("Here is 2048!") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("Here is 2048!") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 80026c0:	230f      	movs	r3, #15
 80026c2:	9303      	str	r3, [sp, #12]
 80026c4:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80026c8:	9302      	str	r3, [sp, #8]
 80026ca:	4b70      	ldr	r3, [pc, #448]	@ (800288c <System_UI_Loop+0x2a4>)
 80026cc:	9301      	str	r3, [sp, #4]
 80026ce:	4b6e      	ldr	r3, [pc, #440]	@ (8002888 <System_UI_Loop+0x2a0>)
 80026d0:	9300      	str	r3, [sp, #0]
 80026d2:	4b6e      	ldr	r3, [pc, #440]	@ (800288c <System_UI_Loop+0x2a4>)
 80026d4:	4a6c      	ldr	r2, [pc, #432]	@ (8002888 <System_UI_Loop+0x2a0>)
 80026d6:	4978      	ldr	r1, [pc, #480]	@ (80028b8 <System_UI_Loop+0x2d0>)
 80026d8:	486e      	ldr	r0, [pc, #440]	@ (8002894 <System_UI_Loop+0x2ac>)
 80026da:	f002 fc0c 	bl	8004ef6 <OLED_MoveObject>
        OLED_MoveObject(&g_Title_AnimationManager, "TitleBack", (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 80026de:	230f      	movs	r3, #15
 80026e0:	9303      	str	r3, [sp, #12]
 80026e2:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80026e6:	9302      	str	r3, [sp, #8]
 80026e8:	4b68      	ldr	r3, [pc, #416]	@ (800288c <System_UI_Loop+0x2a4>)
 80026ea:	9301      	str	r3, [sp, #4]
 80026ec:	4b6d      	ldr	r3, [pc, #436]	@ (80028a4 <System_UI_Loop+0x2bc>)
 80026ee:	9300      	str	r3, [sp, #0]
 80026f0:	4b66      	ldr	r3, [pc, #408]	@ (800288c <System_UI_Loop+0x2a4>)
 80026f2:	4a6c      	ldr	r2, [pc, #432]	@ (80028a4 <System_UI_Loop+0x2bc>)
 80026f4:	4971      	ldr	r1, [pc, #452]	@ (80028bc <System_UI_Loop+0x2d4>)
 80026f6:	4867      	ldr	r0, [pc, #412]	@ (8002894 <System_UI_Loop+0x2ac>)
 80026f8:	f002 fbfd 	bl	8004ef6 <OLED_MoveObject>
#pragma endregion 标题栏

#pragma region 游戏栏
        OLED_MoveObject(&Games_AnimationManager, "Snake", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1, TweenStyle);
 80026fc:	230f      	movs	r3, #15
 80026fe:	9303      	str	r3, [sp, #12]
 8002700:	2301      	movs	r3, #1
 8002702:	9302      	str	r3, [sp, #8]
 8002704:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8002708:	9301      	str	r3, [sp, #4]
 800270a:	4b6d      	ldr	r3, [pc, #436]	@ (80028c0 <System_UI_Loop+0x2d8>)
 800270c:	9300      	str	r3, [sp, #0]
 800270e:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8002712:	4a6b      	ldr	r2, [pc, #428]	@ (80028c0 <System_UI_Loop+0x2d8>)
 8002714:	496b      	ldr	r1, [pc, #428]	@ (80028c4 <System_UI_Loop+0x2dc>)
 8002716:	486c      	ldr	r0, [pc, #432]	@ (80028c8 <System_UI_Loop+0x2e0>)
 8002718:	f002 fbed 	bl	8004ef6 <OLED_MoveObject>
        OLED_MoveObject(&Games_AnimationManager, "2048", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1, TweenStyle);
 800271c:	230f      	movs	r3, #15
 800271e:	9303      	str	r3, [sp, #12]
 8002720:	2301      	movs	r3, #1
 8002722:	9302      	str	r3, [sp, #8]
 8002724:	4b69      	ldr	r3, [pc, #420]	@ (80028cc <System_UI_Loop+0x2e4>)
 8002726:	9301      	str	r3, [sp, #4]
 8002728:	4b65      	ldr	r3, [pc, #404]	@ (80028c0 <System_UI_Loop+0x2d8>)
 800272a:	9300      	str	r3, [sp, #0]
 800272c:	4b67      	ldr	r3, [pc, #412]	@ (80028cc <System_UI_Loop+0x2e4>)
 800272e:	4a64      	ldr	r2, [pc, #400]	@ (80028c0 <System_UI_Loop+0x2d8>)
 8002730:	4967      	ldr	r1, [pc, #412]	@ (80028d0 <System_UI_Loop+0x2e8>)
 8002732:	4865      	ldr	r0, [pc, #404]	@ (80028c8 <System_UI_Loop+0x2e0>)
 8002734:	f002 fbdf 	bl	8004ef6 <OLED_MoveObject>
        OLED_MoveObject(&g_AnimationManager, "BackButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, 1, TweenStyle);
 8002738:	230f      	movs	r3, #15
 800273a:	9303      	str	r3, [sp, #12]
 800273c:	2301      	movs	r3, #1
 800273e:	9302      	str	r3, [sp, #8]
 8002740:	4b64      	ldr	r3, [pc, #400]	@ (80028d4 <System_UI_Loop+0x2ec>)
 8002742:	9301      	str	r3, [sp, #4]
 8002744:	4b5e      	ldr	r3, [pc, #376]	@ (80028c0 <System_UI_Loop+0x2d8>)
 8002746:	9300      	str	r3, [sp, #0]
 8002748:	4b62      	ldr	r3, [pc, #392]	@ (80028d4 <System_UI_Loop+0x2ec>)
 800274a:	4a5d      	ldr	r2, [pc, #372]	@ (80028c0 <System_UI_Loop+0x2d8>)
 800274c:	4962      	ldr	r1, [pc, #392]	@ (80028d8 <System_UI_Loop+0x2f0>)
 800274e:	4863      	ldr	r0, [pc, #396]	@ (80028dc <System_UI_Loop+0x2f4>)
 8002750:	f002 fbd1 	bl	8004ef6 <OLED_MoveObject>
#pragma region 关于栏

#pragma endregion 关于栏

#pragma region 主菜单动画
        OLED_MoveObject(&g_AnimationManager, "TitleBGScale", 0, 8, strlen("Epicful Games") * 6 + 3, 8, StartTweenTime, EASE_INOUT_CUBIC);
 8002754:	2306      	movs	r3, #6
 8002756:	9303      	str	r3, [sp, #12]
 8002758:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800275c:	9302      	str	r3, [sp, #8]
 800275e:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8002762:	9301      	str	r3, [sp, #4]
 8002764:	4b5e      	ldr	r3, [pc, #376]	@ (80028e0 <System_UI_Loop+0x2f8>)
 8002766:	9300      	str	r3, [sp, #0]
 8002768:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 800276c:	f04f 0200 	mov.w	r2, #0
 8002770:	495c      	ldr	r1, [pc, #368]	@ (80028e4 <System_UI_Loop+0x2fc>)
 8002772:	485a      	ldr	r0, [pc, #360]	@ (80028dc <System_UI_Loop+0x2f4>)
 8002774:	f002 fbbf 	bl	8004ef6 <OLED_MoveObject>
        OLED_MoveObject(&g_AnimationManager, "Cursor", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * menuSelection, OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * menuSelection, StartTweenTime, TweenStyle);
 8002778:	4b5b      	ldr	r3, [pc, #364]	@ (80028e8 <System_UI_Loop+0x300>)
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	461a      	mov	r2, r3
 800277e:	4613      	mov	r3, r2
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	4413      	add	r3, r2
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	4413      	add	r3, r2
 8002788:	3303      	adds	r3, #3
 800278a:	4618      	mov	r0, r3
 800278c:	f7fd fdaa 	bl	80002e4 <__aeabi_i2f>
 8002790:	4604      	mov	r4, r0
 8002792:	4b55      	ldr	r3, [pc, #340]	@ (80028e8 <System_UI_Loop+0x300>)
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	461a      	mov	r2, r3
 8002798:	4613      	mov	r3, r2
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	4413      	add	r3, r2
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	4413      	add	r3, r2
 80027a2:	3303      	adds	r3, #3
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7fd fd9d 	bl	80002e4 <__aeabi_i2f>
 80027aa:	4603      	mov	r3, r0
 80027ac:	220f      	movs	r2, #15
 80027ae:	9203      	str	r2, [sp, #12]
 80027b0:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 80027b4:	9202      	str	r2, [sp, #8]
 80027b6:	9301      	str	r3, [sp, #4]
 80027b8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80027bc:	9300      	str	r3, [sp, #0]
 80027be:	4623      	mov	r3, r4
 80027c0:	4a3f      	ldr	r2, [pc, #252]	@ (80028c0 <System_UI_Loop+0x2d8>)
 80027c2:	494a      	ldr	r1, [pc, #296]	@ (80028ec <System_UI_Loop+0x304>)
 80027c4:	4845      	ldr	r0, [pc, #276]	@ (80028dc <System_UI_Loop+0x2f4>)
 80027c6:	f002 fb96 	bl	8004ef6 <OLED_MoveObject>
        OLED_MoveObject(&g_AnimationManager, "CursorScale", 0, 10, strlen("Games") * 6 + 3, 10, StartTweenTime, TweenStyle);
 80027ca:	230f      	movs	r3, #15
 80027cc:	9303      	str	r3, [sp, #12]
 80027ce:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80027d2:	9302      	str	r3, [sp, #8]
 80027d4:	4b46      	ldr	r3, [pc, #280]	@ (80028f0 <System_UI_Loop+0x308>)
 80027d6:	9301      	str	r3, [sp, #4]
 80027d8:	4b46      	ldr	r3, [pc, #280]	@ (80028f4 <System_UI_Loop+0x30c>)
 80027da:	9300      	str	r3, [sp, #0]
 80027dc:	4b44      	ldr	r3, [pc, #272]	@ (80028f0 <System_UI_Loop+0x308>)
 80027de:	f04f 0200 	mov.w	r2, #0
 80027e2:	4945      	ldr	r1, [pc, #276]	@ (80028f8 <System_UI_Loop+0x310>)
 80027e4:	483d      	ldr	r0, [pc, #244]	@ (80028dc <System_UI_Loop+0x2f4>)
 80027e6:	f002 fb86 	bl	8004ef6 <OLED_MoveObject>
        OLED_MoveObject(&Menu_AnimationManager, "GamesButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, StartTweenTime, TweenStyle);
 80027ea:	230f      	movs	r3, #15
 80027ec:	9303      	str	r3, [sp, #12]
 80027ee:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80027f2:	9302      	str	r3, [sp, #8]
 80027f4:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 80027f8:	9301      	str	r3, [sp, #4]
 80027fa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80027fe:	9300      	str	r3, [sp, #0]
 8002800:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8002804:	4a2e      	ldr	r2, [pc, #184]	@ (80028c0 <System_UI_Loop+0x2d8>)
 8002806:	493d      	ldr	r1, [pc, #244]	@ (80028fc <System_UI_Loop+0x314>)
 8002808:	483d      	ldr	r0, [pc, #244]	@ (8002900 <System_UI_Loop+0x318>)
 800280a:	f002 fb74 	bl	8004ef6 <OLED_MoveObject>
        HAL_Delay(100);
 800280e:	2064      	movs	r0, #100	@ 0x64
 8002810:	f003 f87a 	bl	8005908 <HAL_Delay>
        OLED_MoveObject(&Menu_AnimationManager, "ToolsButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, StartTweenTime, TweenStyle);
 8002814:	230f      	movs	r3, #15
 8002816:	9303      	str	r3, [sp, #12]
 8002818:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800281c:	9302      	str	r3, [sp, #8]
 800281e:	4b2b      	ldr	r3, [pc, #172]	@ (80028cc <System_UI_Loop+0x2e4>)
 8002820:	9301      	str	r3, [sp, #4]
 8002822:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002826:	9300      	str	r3, [sp, #0]
 8002828:	4b28      	ldr	r3, [pc, #160]	@ (80028cc <System_UI_Loop+0x2e4>)
 800282a:	4a25      	ldr	r2, [pc, #148]	@ (80028c0 <System_UI_Loop+0x2d8>)
 800282c:	4935      	ldr	r1, [pc, #212]	@ (8002904 <System_UI_Loop+0x31c>)
 800282e:	4834      	ldr	r0, [pc, #208]	@ (8002900 <System_UI_Loop+0x318>)
 8002830:	f002 fb61 	bl	8004ef6 <OLED_MoveObject>
        HAL_Delay(100);
 8002834:	2064      	movs	r0, #100	@ 0x64
 8002836:	f003 f867 	bl	8005908 <HAL_Delay>
        OLED_MoveObject(&Menu_AnimationManager, "StatusButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, StartTweenTime, TweenStyle);
 800283a:	230f      	movs	r3, #15
 800283c:	9303      	str	r3, [sp, #12]
 800283e:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8002842:	9302      	str	r3, [sp, #8]
 8002844:	4b23      	ldr	r3, [pc, #140]	@ (80028d4 <System_UI_Loop+0x2ec>)
 8002846:	9301      	str	r3, [sp, #4]
 8002848:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800284c:	9300      	str	r3, [sp, #0]
 800284e:	4b21      	ldr	r3, [pc, #132]	@ (80028d4 <System_UI_Loop+0x2ec>)
 8002850:	4a1b      	ldr	r2, [pc, #108]	@ (80028c0 <System_UI_Loop+0x2d8>)
 8002852:	492d      	ldr	r1, [pc, #180]	@ (8002908 <System_UI_Loop+0x320>)
 8002854:	482a      	ldr	r0, [pc, #168]	@ (8002900 <System_UI_Loop+0x318>)
 8002856:	f002 fb4e 	bl	8004ef6 <OLED_MoveObject>
        HAL_Delay(100);
 800285a:	2064      	movs	r0, #100	@ 0x64
 800285c:	f003 f854 	bl	8005908 <HAL_Delay>
        OLED_MoveObject(&Menu_AnimationManager, "SettingsButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 4, OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 4, StartTweenTime, TweenStyle);
 8002860:	230f      	movs	r3, #15
 8002862:	9303      	str	r3, [sp, #12]
 8002864:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8002868:	9302      	str	r3, [sp, #8]
 800286a:	4b28      	ldr	r3, [pc, #160]	@ (800290c <System_UI_Loop+0x324>)
 800286c:	9301      	str	r3, [sp, #4]
 800286e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002872:	9300      	str	r3, [sp, #0]
 8002874:	4b25      	ldr	r3, [pc, #148]	@ (800290c <System_UI_Loop+0x324>)
 8002876:	4a12      	ldr	r2, [pc, #72]	@ (80028c0 <System_UI_Loop+0x2d8>)
 8002878:	4925      	ldr	r1, [pc, #148]	@ (8002910 <System_UI_Loop+0x328>)
 800287a:	4821      	ldr	r0, [pc, #132]	@ (8002900 <System_UI_Loop+0x318>)
 800287c:	f002 fb3b 	bl	8004ef6 <OLED_MoveObject>
 8002880:	e048      	b.n	8002914 <System_UI_Loop+0x32c>
 8002882:	bf00      	nop
 8002884:	20000003 	.word	0x20000003
 8002888:	42480000 	.word	0x42480000
 800288c:	c1200000 	.word	0xc1200000
 8002890:	0800aa4c 	.word	0x0800aa4c
 8002894:	20003338 	.word	0x20003338
 8002898:	0800aa58 	.word	0x0800aa58
 800289c:	42300000 	.word	0x42300000
 80028a0:	0800aa64 	.word	0x0800aa64
 80028a4:	42600000 	.word	0x42600000
 80028a8:	0800aa70 	.word	0x0800aa70
 80028ac:	42940000 	.word	0x42940000
 80028b0:	0800aa80 	.word	0x0800aa80
 80028b4:	0800aa8c 	.word	0x0800aa8c
 80028b8:	0800aa98 	.word	0x0800aa98
 80028bc:	0800aaa4 	.word	0x0800aaa4
 80028c0:	c2b40000 	.word	0xc2b40000
 80028c4:	0800aab0 	.word	0x0800aab0
 80028c8:	20001574 	.word	0x20001574
 80028cc:	41e80000 	.word	0x41e80000
 80028d0:	0800aab8 	.word	0x0800aab8
 80028d4:	42280000 	.word	0x42280000
 80028d8:	0800aac0 	.word	0x0800aac0
 80028dc:	2000392c 	.word	0x2000392c
 80028e0:	42a20000 	.word	0x42a20000
 80028e4:	0800aacc 	.word	0x0800aacc
 80028e8:	20000002 	.word	0x20000002
 80028ec:	0800aadc 	.word	0x0800aadc
 80028f0:	41200000 	.word	0x41200000
 80028f4:	42040000 	.word	0x42040000
 80028f8:	0800aae4 	.word	0x0800aae4
 80028fc:	0800aaf0 	.word	0x0800aaf0
 8002900:	20000f80 	.word	0x20000f80
 8002904:	0800aafc 	.word	0x0800aafc
 8002908:	0800ab08 	.word	0x0800ab08
 800290c:	425c0000 	.word	0x425c0000
 8002910:	0800ab18 	.word	0x0800ab18
        HAL_Delay(100);
 8002914:	2064      	movs	r0, #100	@ 0x64
 8002916:	f002 fff7 	bl	8005908 <HAL_Delay>
        OLED_MoveObject(&Menu_AnimationManager, "AboutButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 5, OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 5, StartTweenTime, TweenStyle);
 800291a:	230f      	movs	r3, #15
 800291c:	9303      	str	r3, [sp, #12]
 800291e:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8002922:	9302      	str	r3, [sp, #8]
 8002924:	4b71      	ldr	r3, [pc, #452]	@ (8002aec <System_UI_Loop+0x504>)
 8002926:	9301      	str	r3, [sp, #4]
 8002928:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800292c:	9300      	str	r3, [sp, #0]
 800292e:	4b6f      	ldr	r3, [pc, #444]	@ (8002aec <System_UI_Loop+0x504>)
 8002930:	4a6f      	ldr	r2, [pc, #444]	@ (8002af0 <System_UI_Loop+0x508>)
 8002932:	4970      	ldr	r1, [pc, #448]	@ (8002af4 <System_UI_Loop+0x50c>)
 8002934:	4870      	ldr	r0, [pc, #448]	@ (8002af8 <System_UI_Loop+0x510>)
 8002936:	f002 fade 	bl	8004ef6 <OLED_MoveObject>
#pragma endregion 主菜单动画

        preMenuSelection = menuSelection;
 800293a:	4b70      	ldr	r3, [pc, #448]	@ (8002afc <System_UI_Loop+0x514>)
 800293c:	781a      	ldrb	r2, [r3, #0]
 800293e:	4b70      	ldr	r3, [pc, #448]	@ (8002b00 <System_UI_Loop+0x518>)
 8002940:	701a      	strb	r2, [r3, #0]
        isFirstRun = false;
 8002942:	4b70      	ldr	r3, [pc, #448]	@ (8002b04 <System_UI_Loop+0x51c>)
 8002944:	2200      	movs	r2, #0
 8002946:	701a      	strb	r2, [r3, #0]
        OLED_UpdateDisplayVSync();
 8002948:	f7ff f9c0 	bl	8001ccc <OLED_UpdateDisplayVSync>
    }

#pragma region pager //翻页的函数

    if (menuRank == 1)
 800294c:	4b6e      	ldr	r3, [pc, #440]	@ (8002b08 <System_UI_Loop+0x520>)
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	2b01      	cmp	r3, #1
 8002952:	d178      	bne.n	8002a46 <System_UI_Loop+0x45e>
    {
        OLED_DoTweenObject(&Menu_AnimationManager, "GamesButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (2 - menuSelection), 200, EASE_IN_CIRC);
 8002954:	4b69      	ldr	r3, [pc, #420]	@ (8002afc <System_UI_Loop+0x514>)
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	f1c3 0202 	rsb	r2, r3, #2
 800295c:	4613      	mov	r3, r2
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	4413      	add	r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	4413      	add	r3, r2
 8002966:	3303      	adds	r3, #3
 8002968:	4618      	mov	r0, r3
 800296a:	f7fd fcbb 	bl	80002e4 <__aeabi_i2f>
 800296e:	4603      	mov	r3, r0
 8002970:	220a      	movs	r2, #10
 8002972:	9201      	str	r2, [sp, #4]
 8002974:	22c8      	movs	r2, #200	@ 0xc8
 8002976:	9200      	str	r2, [sp, #0]
 8002978:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800297c:	4963      	ldr	r1, [pc, #396]	@ (8002b0c <System_UI_Loop+0x524>)
 800297e:	485e      	ldr	r0, [pc, #376]	@ (8002af8 <System_UI_Loop+0x510>)
 8002980:	f002 fb70 	bl	8005064 <OLED_DoTweenObject>
        OLED_DoTweenObject(&Menu_AnimationManager, "ToolsButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (3 - menuSelection), 200, EASE_IN_CIRC);
 8002984:	4b5d      	ldr	r3, [pc, #372]	@ (8002afc <System_UI_Loop+0x514>)
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	f1c3 0203 	rsb	r2, r3, #3
 800298c:	4613      	mov	r3, r2
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	4413      	add	r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	4413      	add	r3, r2
 8002996:	3303      	adds	r3, #3
 8002998:	4618      	mov	r0, r3
 800299a:	f7fd fca3 	bl	80002e4 <__aeabi_i2f>
 800299e:	4603      	mov	r3, r0
 80029a0:	220a      	movs	r2, #10
 80029a2:	9201      	str	r2, [sp, #4]
 80029a4:	22c8      	movs	r2, #200	@ 0xc8
 80029a6:	9200      	str	r2, [sp, #0]
 80029a8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80029ac:	4958      	ldr	r1, [pc, #352]	@ (8002b10 <System_UI_Loop+0x528>)
 80029ae:	4852      	ldr	r0, [pc, #328]	@ (8002af8 <System_UI_Loop+0x510>)
 80029b0:	f002 fb58 	bl	8005064 <OLED_DoTweenObject>
        OLED_DoTweenObject(&Menu_AnimationManager, "StatusButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (4 - menuSelection), 200, EASE_IN_CIRC);
 80029b4:	4b51      	ldr	r3, [pc, #324]	@ (8002afc <System_UI_Loop+0x514>)
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	f1c3 0204 	rsb	r2, r3, #4
 80029bc:	4613      	mov	r3, r2
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	4413      	add	r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	4413      	add	r3, r2
 80029c6:	3303      	adds	r3, #3
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7fd fc8b 	bl	80002e4 <__aeabi_i2f>
 80029ce:	4603      	mov	r3, r0
 80029d0:	220a      	movs	r2, #10
 80029d2:	9201      	str	r2, [sp, #4]
 80029d4:	22c8      	movs	r2, #200	@ 0xc8
 80029d6:	9200      	str	r2, [sp, #0]
 80029d8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80029dc:	494d      	ldr	r1, [pc, #308]	@ (8002b14 <System_UI_Loop+0x52c>)
 80029de:	4846      	ldr	r0, [pc, #280]	@ (8002af8 <System_UI_Loop+0x510>)
 80029e0:	f002 fb40 	bl	8005064 <OLED_DoTweenObject>
        OLED_DoTweenObject(&Menu_AnimationManager, "SettingsButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (5 - menuSelection), 200, EASE_IN_CIRC);
 80029e4:	4b45      	ldr	r3, [pc, #276]	@ (8002afc <System_UI_Loop+0x514>)
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	f1c3 0205 	rsb	r2, r3, #5
 80029ec:	4613      	mov	r3, r2
 80029ee:	005b      	lsls	r3, r3, #1
 80029f0:	4413      	add	r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	4413      	add	r3, r2
 80029f6:	3303      	adds	r3, #3
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7fd fc73 	bl	80002e4 <__aeabi_i2f>
 80029fe:	4603      	mov	r3, r0
 8002a00:	220a      	movs	r2, #10
 8002a02:	9201      	str	r2, [sp, #4]
 8002a04:	22c8      	movs	r2, #200	@ 0xc8
 8002a06:	9200      	str	r2, [sp, #0]
 8002a08:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002a0c:	4942      	ldr	r1, [pc, #264]	@ (8002b18 <System_UI_Loop+0x530>)
 8002a0e:	483a      	ldr	r0, [pc, #232]	@ (8002af8 <System_UI_Loop+0x510>)
 8002a10:	f002 fb28 	bl	8005064 <OLED_DoTweenObject>
        OLED_DoTweenObject(&Menu_AnimationManager, "AboutButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (6 - menuSelection), 200, EASE_IN_CIRC);
 8002a14:	4b39      	ldr	r3, [pc, #228]	@ (8002afc <System_UI_Loop+0x514>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	f1c3 0206 	rsb	r2, r3, #6
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	4413      	add	r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	4413      	add	r3, r2
 8002a26:	3303      	adds	r3, #3
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7fd fc5b 	bl	80002e4 <__aeabi_i2f>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	220a      	movs	r2, #10
 8002a32:	9201      	str	r2, [sp, #4]
 8002a34:	22c8      	movs	r2, #200	@ 0xc8
 8002a36:	9200      	str	r2, [sp, #0]
 8002a38:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002a3c:	492d      	ldr	r1, [pc, #180]	@ (8002af4 <System_UI_Loop+0x50c>)
 8002a3e:	482e      	ldr	r0, [pc, #184]	@ (8002af8 <System_UI_Loop+0x510>)
 8002a40:	f002 fb10 	bl	8005064 <OLED_DoTweenObject>
 8002a44:	e091      	b.n	8002b6a <System_UI_Loop+0x582>
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_GAMES)
 8002a46:	4b30      	ldr	r3, [pc, #192]	@ (8002b08 <System_UI_Loop+0x520>)
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	f040 808d 	bne.w	8002b6a <System_UI_Loop+0x582>
 8002a50:	4b32      	ldr	r3, [pc, #200]	@ (8002b1c <System_UI_Loop+0x534>)
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	2b05      	cmp	r3, #5
 8002a56:	d16d      	bne.n	8002b34 <System_UI_Loop+0x54c>
    {
        OLED_DoTweenObject(&Games_AnimationManager, "Snake", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (2 - menuSelection), 200, EASE_IN_CIRC);
 8002a58:	4b28      	ldr	r3, [pc, #160]	@ (8002afc <System_UI_Loop+0x514>)
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	f1c3 0202 	rsb	r2, r3, #2
 8002a60:	4613      	mov	r3, r2
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	4413      	add	r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	4413      	add	r3, r2
 8002a6a:	3303      	adds	r3, #3
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7fd fc39 	bl	80002e4 <__aeabi_i2f>
 8002a72:	4603      	mov	r3, r0
 8002a74:	220a      	movs	r2, #10
 8002a76:	9201      	str	r2, [sp, #4]
 8002a78:	22c8      	movs	r2, #200	@ 0xc8
 8002a7a:	9200      	str	r2, [sp, #0]
 8002a7c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002a80:	4927      	ldr	r1, [pc, #156]	@ (8002b20 <System_UI_Loop+0x538>)
 8002a82:	4828      	ldr	r0, [pc, #160]	@ (8002b24 <System_UI_Loop+0x53c>)
 8002a84:	f002 faee 	bl	8005064 <OLED_DoTweenObject>
        OLED_DoTweenObject(&Games_AnimationManager, "2048", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (3 - menuSelection), 200, EASE_IN_CIRC);
 8002a88:	4b1c      	ldr	r3, [pc, #112]	@ (8002afc <System_UI_Loop+0x514>)
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	f1c3 0203 	rsb	r2, r3, #3
 8002a90:	4613      	mov	r3, r2
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	4413      	add	r3, r2
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	4413      	add	r3, r2
 8002a9a:	3303      	adds	r3, #3
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7fd fc21 	bl	80002e4 <__aeabi_i2f>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	220a      	movs	r2, #10
 8002aa6:	9201      	str	r2, [sp, #4]
 8002aa8:	22c8      	movs	r2, #200	@ 0xc8
 8002aaa:	9200      	str	r2, [sp, #0]
 8002aac:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002ab0:	491d      	ldr	r1, [pc, #116]	@ (8002b28 <System_UI_Loop+0x540>)
 8002ab2:	481c      	ldr	r0, [pc, #112]	@ (8002b24 <System_UI_Loop+0x53c>)
 8002ab4:	f002 fad6 	bl	8005064 <OLED_DoTweenObject>
        OLED_DoTweenObject(&g_AnimationManager, "BackButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (4 - menuSelection), 200, EASE_IN_CIRC);
 8002ab8:	4b10      	ldr	r3, [pc, #64]	@ (8002afc <System_UI_Loop+0x514>)
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	f1c3 0204 	rsb	r2, r3, #4
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	4413      	add	r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	4413      	add	r3, r2
 8002aca:	3303      	adds	r3, #3
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7fd fc09 	bl	80002e4 <__aeabi_i2f>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	220a      	movs	r2, #10
 8002ad6:	9201      	str	r2, [sp, #4]
 8002ad8:	22c8      	movs	r2, #200	@ 0xc8
 8002ada:	9200      	str	r2, [sp, #0]
 8002adc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002ae0:	4912      	ldr	r1, [pc, #72]	@ (8002b2c <System_UI_Loop+0x544>)
 8002ae2:	4813      	ldr	r0, [pc, #76]	@ (8002b30 <System_UI_Loop+0x548>)
 8002ae4:	f002 fabe 	bl	8005064 <OLED_DoTweenObject>
 8002ae8:	e03f      	b.n	8002b6a <System_UI_Loop+0x582>
 8002aea:	bf00      	nop
 8002aec:	42880000 	.word	0x42880000
 8002af0:	c2b40000 	.word	0xc2b40000
 8002af4:	0800ab28 	.word	0x0800ab28
 8002af8:	20000f80 	.word	0x20000f80
 8002afc:	20000002 	.word	0x20000002
 8002b00:	20000b6e 	.word	0x20000b6e
 8002b04:	20000003 	.word	0x20000003
 8002b08:	20000001 	.word	0x20000001
 8002b0c:	0800aaf0 	.word	0x0800aaf0
 8002b10:	0800aafc 	.word	0x0800aafc
 8002b14:	0800ab08 	.word	0x0800ab08
 8002b18:	0800ab18 	.word	0x0800ab18
 8002b1c:	20000b6d 	.word	0x20000b6d
 8002b20:	0800aab0 	.word	0x0800aab0
 8002b24:	20001574 	.word	0x20001574
 8002b28:	0800aab8 	.word	0x0800aab8
 8002b2c:	0800aac0 	.word	0x0800aac0
 8002b30:	2000392c 	.word	0x2000392c
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_SETTINGS)
 8002b34:	4bb4      	ldr	r3, [pc, #720]	@ (8002e08 <System_UI_Loop+0x820>)
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d116      	bne.n	8002b6a <System_UI_Loop+0x582>
 8002b3c:	4bb3      	ldr	r3, [pc, #716]	@ (8002e0c <System_UI_Loop+0x824>)
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d012      	beq.n	8002b6a <System_UI_Loop+0x582>
    {
        /* code */
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_STATUS)
 8002b44:	4bb0      	ldr	r3, [pc, #704]	@ (8002e08 <System_UI_Loop+0x820>)
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d10e      	bne.n	8002b6a <System_UI_Loop+0x582>
 8002b4c:	4baf      	ldr	r3, [pc, #700]	@ (8002e0c <System_UI_Loop+0x824>)
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d00a      	beq.n	8002b6a <System_UI_Loop+0x582>
    {
        /* code */
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_ABOUT)
 8002b54:	4bac      	ldr	r3, [pc, #688]	@ (8002e08 <System_UI_Loop+0x820>)
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d106      	bne.n	8002b6a <System_UI_Loop+0x582>
 8002b5c:	4bab      	ldr	r3, [pc, #684]	@ (8002e0c <System_UI_Loop+0x824>)
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	2b03      	cmp	r3, #3
 8002b62:	d002      	beq.n	8002b6a <System_UI_Loop+0x582>
    {
        /* code */
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_TOOLS)
 8002b64:	4ba8      	ldr	r3, [pc, #672]	@ (8002e08 <System_UI_Loop+0x820>)
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	2b02      	cmp	r3, #2

#pragma endregion pager

#pragma region DRAWER //画出你的UI

    OLED_GetObjectPosition(&Menu_AnimationManager, "SettingsButton", &x, &y);
 8002b6a:	f107 0308 	add.w	r3, r7, #8
 8002b6e:	f107 020c 	add.w	r2, r7, #12
 8002b72:	49a7      	ldr	r1, [pc, #668]	@ (8002e10 <System_UI_Loop+0x828>)
 8002b74:	48a7      	ldr	r0, [pc, #668]	@ (8002e14 <System_UI_Loop+0x82c>)
 8002b76:	f002 f99a 	bl	8004eae <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Settings");
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7fd fde1 	bl	8000744 <__aeabi_f2iz>
 8002b82:	4603      	mov	r3, r0
 8002b84:	b21c      	sxth	r4, r3
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7fd fddb 	bl	8000744 <__aeabi_f2iz>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	b21b      	sxth	r3, r3
 8002b92:	4aa1      	ldr	r2, [pc, #644]	@ (8002e18 <System_UI_Loop+0x830>)
 8002b94:	4619      	mov	r1, r3
 8002b96:	4620      	mov	r0, r4
 8002b98:	f7ff fc88 	bl	80024ac <OLED_DisplayString>
    OLED_GetObjectPosition(&Menu_AnimationManager, "StatusButton", &x, &y);
 8002b9c:	f107 0308 	add.w	r3, r7, #8
 8002ba0:	f107 020c 	add.w	r2, r7, #12
 8002ba4:	499d      	ldr	r1, [pc, #628]	@ (8002e1c <System_UI_Loop+0x834>)
 8002ba6:	489b      	ldr	r0, [pc, #620]	@ (8002e14 <System_UI_Loop+0x82c>)
 8002ba8:	f002 f981 	bl	8004eae <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Status");
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7fd fdc8 	bl	8000744 <__aeabi_f2iz>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	b21c      	sxth	r4, r3
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7fd fdc2 	bl	8000744 <__aeabi_f2iz>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	b21b      	sxth	r3, r3
 8002bc4:	4a96      	ldr	r2, [pc, #600]	@ (8002e20 <System_UI_Loop+0x838>)
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	4620      	mov	r0, r4
 8002bca:	f7ff fc6f 	bl	80024ac <OLED_DisplayString>
    OLED_GetObjectPosition(&Menu_AnimationManager, "GamesButton", &x, &y);
 8002bce:	f107 0308 	add.w	r3, r7, #8
 8002bd2:	f107 020c 	add.w	r2, r7, #12
 8002bd6:	4993      	ldr	r1, [pc, #588]	@ (8002e24 <System_UI_Loop+0x83c>)
 8002bd8:	488e      	ldr	r0, [pc, #568]	@ (8002e14 <System_UI_Loop+0x82c>)
 8002bda:	f002 f968 	bl	8004eae <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Games");
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7fd fdaf 	bl	8000744 <__aeabi_f2iz>
 8002be6:	4603      	mov	r3, r0
 8002be8:	b21c      	sxth	r4, r3
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7fd fda9 	bl	8000744 <__aeabi_f2iz>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	b21b      	sxth	r3, r3
 8002bf6:	4a8c      	ldr	r2, [pc, #560]	@ (8002e28 <System_UI_Loop+0x840>)
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	4620      	mov	r0, r4
 8002bfc:	f7ff fc56 	bl	80024ac <OLED_DisplayString>
    OLED_GetObjectPosition(&Menu_AnimationManager, "AboutButton", &x, &y);
 8002c00:	f107 0308 	add.w	r3, r7, #8
 8002c04:	f107 020c 	add.w	r2, r7, #12
 8002c08:	4988      	ldr	r1, [pc, #544]	@ (8002e2c <System_UI_Loop+0x844>)
 8002c0a:	4882      	ldr	r0, [pc, #520]	@ (8002e14 <System_UI_Loop+0x82c>)
 8002c0c:	f002 f94f 	bl	8004eae <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "About");
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7fd fd96 	bl	8000744 <__aeabi_f2iz>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	b21c      	sxth	r4, r3
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7fd fd90 	bl	8000744 <__aeabi_f2iz>
 8002c24:	4603      	mov	r3, r0
 8002c26:	b21b      	sxth	r3, r3
 8002c28:	4a81      	ldr	r2, [pc, #516]	@ (8002e30 <System_UI_Loop+0x848>)
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	4620      	mov	r0, r4
 8002c2e:	f7ff fc3d 	bl	80024ac <OLED_DisplayString>
    OLED_GetObjectPosition(&Menu_AnimationManager, "ToolsButton", &x, &y);
 8002c32:	f107 0308 	add.w	r3, r7, #8
 8002c36:	f107 020c 	add.w	r2, r7, #12
 8002c3a:	497e      	ldr	r1, [pc, #504]	@ (8002e34 <System_UI_Loop+0x84c>)
 8002c3c:	4875      	ldr	r0, [pc, #468]	@ (8002e14 <System_UI_Loop+0x82c>)
 8002c3e:	f002 f936 	bl	8004eae <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Tools");
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7fd fd7d 	bl	8000744 <__aeabi_f2iz>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	b21c      	sxth	r4, r3
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7fd fd77 	bl	8000744 <__aeabi_f2iz>
 8002c56:	4603      	mov	r3, r0
 8002c58:	b21b      	sxth	r3, r3
 8002c5a:	4a77      	ldr	r2, [pc, #476]	@ (8002e38 <System_UI_Loop+0x850>)
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	4620      	mov	r0, r4
 8002c60:	f7ff fc24 	bl	80024ac <OLED_DisplayString>
    OLED_GetObjectPosition(&Games_AnimationManager, "Snake", &x, &y);
 8002c64:	f107 0308 	add.w	r3, r7, #8
 8002c68:	f107 020c 	add.w	r2, r7, #12
 8002c6c:	4973      	ldr	r1, [pc, #460]	@ (8002e3c <System_UI_Loop+0x854>)
 8002c6e:	4874      	ldr	r0, [pc, #464]	@ (8002e40 <System_UI_Loop+0x858>)
 8002c70:	f002 f91d 	bl	8004eae <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Snake");
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7fd fd64 	bl	8000744 <__aeabi_f2iz>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	b21c      	sxth	r4, r3
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7fd fd5e 	bl	8000744 <__aeabi_f2iz>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	b21b      	sxth	r3, r3
 8002c8c:	4a6b      	ldr	r2, [pc, #428]	@ (8002e3c <System_UI_Loop+0x854>)
 8002c8e:	4619      	mov	r1, r3
 8002c90:	4620      	mov	r0, r4
 8002c92:	f7ff fc0b 	bl	80024ac <OLED_DisplayString>
    OLED_GetObjectPosition(&Games_AnimationManager, "2048", &x, &y);
 8002c96:	f107 0308 	add.w	r3, r7, #8
 8002c9a:	f107 020c 	add.w	r2, r7, #12
 8002c9e:	4969      	ldr	r1, [pc, #420]	@ (8002e44 <System_UI_Loop+0x85c>)
 8002ca0:	4867      	ldr	r0, [pc, #412]	@ (8002e40 <System_UI_Loop+0x858>)
 8002ca2:	f002 f904 	bl	8004eae <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "2048");
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7fd fd4b 	bl	8000744 <__aeabi_f2iz>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	b21c      	sxth	r4, r3
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7fd fd45 	bl	8000744 <__aeabi_f2iz>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	b21b      	sxth	r3, r3
 8002cbe:	4a61      	ldr	r2, [pc, #388]	@ (8002e44 <System_UI_Loop+0x85c>)
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	4620      	mov	r0, r4
 8002cc4:	f7ff fbf2 	bl	80024ac <OLED_DisplayString>
    OLED_GetObjectPosition(&g_AnimationManager, "BackButton", &x, &y);
 8002cc8:	f107 0308 	add.w	r3, r7, #8
 8002ccc:	f107 020c 	add.w	r2, r7, #12
 8002cd0:	495d      	ldr	r1, [pc, #372]	@ (8002e48 <System_UI_Loop+0x860>)
 8002cd2:	485e      	ldr	r0, [pc, #376]	@ (8002e4c <System_UI_Loop+0x864>)
 8002cd4:	f002 f8eb 	bl	8004eae <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Back");
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7fd fd32 	bl	8000744 <__aeabi_f2iz>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	b21c      	sxth	r4, r3
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7fd fd2c 	bl	8000744 <__aeabi_f2iz>
 8002cec:	4603      	mov	r3, r0
 8002cee:	b21b      	sxth	r3, r3
 8002cf0:	4a57      	ldr	r2, [pc, #348]	@ (8002e50 <System_UI_Loop+0x868>)
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	4620      	mov	r0, r4
 8002cf6:	f7ff fbd9 	bl	80024ac <OLED_DisplayString>

    OLED_GetObjectPosition(&g_Title_AnimationManager, "TitleGames", &x, &y);
 8002cfa:	f107 0308 	add.w	r3, r7, #8
 8002cfe:	f107 020c 	add.w	r2, r7, #12
 8002d02:	4954      	ldr	r1, [pc, #336]	@ (8002e54 <System_UI_Loop+0x86c>)
 8002d04:	4854      	ldr	r0, [pc, #336]	@ (8002e58 <System_UI_Loop+0x870>)
 8002d06:	f002 f8d2 	bl	8004eae <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Epicful Games");
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7fd fd19 	bl	8000744 <__aeabi_f2iz>
 8002d12:	4603      	mov	r3, r0
 8002d14:	b21c      	sxth	r4, r3
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7fd fd13 	bl	8000744 <__aeabi_f2iz>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	b21b      	sxth	r3, r3
 8002d22:	4a4e      	ldr	r2, [pc, #312]	@ (8002e5c <System_UI_Loop+0x874>)
 8002d24:	4619      	mov	r1, r3
 8002d26:	4620      	mov	r0, r4
 8002d28:	f7ff fbc0 	bl	80024ac <OLED_DisplayString>
    OLED_GetObjectPosition(&g_Title_AnimationManager, "TitleTools", &x, &y);
 8002d2c:	f107 0308 	add.w	r3, r7, #8
 8002d30:	f107 020c 	add.w	r2, r7, #12
 8002d34:	494a      	ldr	r1, [pc, #296]	@ (8002e60 <System_UI_Loop+0x878>)
 8002d36:	4848      	ldr	r0, [pc, #288]	@ (8002e58 <System_UI_Loop+0x870>)
 8002d38:	f002 f8b9 	bl	8004eae <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Tools For You");
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7fd fd00 	bl	8000744 <__aeabi_f2iz>
 8002d44:	4603      	mov	r3, r0
 8002d46:	b21c      	sxth	r4, r3
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7fd fcfa 	bl	8000744 <__aeabi_f2iz>
 8002d50:	4603      	mov	r3, r0
 8002d52:	b21b      	sxth	r3, r3
 8002d54:	4a43      	ldr	r2, [pc, #268]	@ (8002e64 <System_UI_Loop+0x87c>)
 8002d56:	4619      	mov	r1, r3
 8002d58:	4620      	mov	r0, r4
 8002d5a:	f7ff fba7 	bl	80024ac <OLED_DisplayString>
    OLED_GetObjectPosition(&g_Title_AnimationManager, "TitleStatus", &x, &y);
 8002d5e:	f107 0308 	add.w	r3, r7, #8
 8002d62:	f107 020c 	add.w	r2, r7, #12
 8002d66:	4940      	ldr	r1, [pc, #256]	@ (8002e68 <System_UI_Loop+0x880>)
 8002d68:	483b      	ldr	r0, [pc, #236]	@ (8002e58 <System_UI_Loop+0x870>)
 8002d6a:	f002 f8a0 	bl	8004eae <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Machine States");
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7fd fce7 	bl	8000744 <__aeabi_f2iz>
 8002d76:	4603      	mov	r3, r0
 8002d78:	b21c      	sxth	r4, r3
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7fd fce1 	bl	8000744 <__aeabi_f2iz>
 8002d82:	4603      	mov	r3, r0
 8002d84:	b21b      	sxth	r3, r3
 8002d86:	4a39      	ldr	r2, [pc, #228]	@ (8002e6c <System_UI_Loop+0x884>)
 8002d88:	4619      	mov	r1, r3
 8002d8a:	4620      	mov	r0, r4
 8002d8c:	f7ff fb8e 	bl	80024ac <OLED_DisplayString>
    OLED_GetObjectPosition(&g_Title_AnimationManager, "TitleSettings", &x, &y);
 8002d90:	f107 0308 	add.w	r3, r7, #8
 8002d94:	f107 020c 	add.w	r2, r7, #12
 8002d98:	4935      	ldr	r1, [pc, #212]	@ (8002e70 <System_UI_Loop+0x888>)
 8002d9a:	482f      	ldr	r0, [pc, #188]	@ (8002e58 <System_UI_Loop+0x870>)
 8002d9c:	f002 f887 	bl	8004eae <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "STM Settings");
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7fd fcce 	bl	8000744 <__aeabi_f2iz>
 8002da8:	4603      	mov	r3, r0
 8002daa:	b21c      	sxth	r4, r3
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7fd fcc8 	bl	8000744 <__aeabi_f2iz>
 8002db4:	4603      	mov	r3, r0
 8002db6:	b21b      	sxth	r3, r3
 8002db8:	4a2e      	ldr	r2, [pc, #184]	@ (8002e74 <System_UI_Loop+0x88c>)
 8002dba:	4619      	mov	r1, r3
 8002dbc:	4620      	mov	r0, r4
 8002dbe:	f7ff fb75 	bl	80024ac <OLED_DisplayString>
    OLED_GetObjectPosition(&g_Title_AnimationManager, "TitleAbout", &x, &y);
 8002dc2:	f107 0308 	add.w	r3, r7, #8
 8002dc6:	f107 020c 	add.w	r2, r7, #12
 8002dca:	492b      	ldr	r1, [pc, #172]	@ (8002e78 <System_UI_Loop+0x890>)
 8002dcc:	4822      	ldr	r0, [pc, #136]	@ (8002e58 <System_UI_Loop+0x870>)
 8002dce:	f002 f86e 	bl	8004eae <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Developer!");
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7fd fcb5 	bl	8000744 <__aeabi_f2iz>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	b21c      	sxth	r4, r3
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7fd fcaf 	bl	8000744 <__aeabi_f2iz>
 8002de6:	4603      	mov	r3, r0
 8002de8:	b21b      	sxth	r3, r3
 8002dea:	4a24      	ldr	r2, [pc, #144]	@ (8002e7c <System_UI_Loop+0x894>)
 8002dec:	4619      	mov	r1, r3
 8002dee:	4620      	mov	r0, r4
 8002df0:	f7ff fb5c 	bl	80024ac <OLED_DisplayString>
    OLED_GetObjectPosition(&g_Title_AnimationManager, "TitleSnake", &x, &y);
 8002df4:	f107 0308 	add.w	r3, r7, #8
 8002df8:	f107 020c 	add.w	r2, r7, #12
 8002dfc:	4920      	ldr	r1, [pc, #128]	@ (8002e80 <System_UI_Loop+0x898>)
 8002dfe:	4816      	ldr	r0, [pc, #88]	@ (8002e58 <System_UI_Loop+0x870>)
 8002e00:	f002 f855 	bl	8004eae <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Greedy Snake");
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	e03d      	b.n	8002e84 <System_UI_Loop+0x89c>
 8002e08:	20000001 	.word	0x20000001
 8002e0c:	20000b6d 	.word	0x20000b6d
 8002e10:	0800ab18 	.word	0x0800ab18
 8002e14:	20000f80 	.word	0x20000f80
 8002e18:	0800ab34 	.word	0x0800ab34
 8002e1c:	0800ab08 	.word	0x0800ab08
 8002e20:	0800ab40 	.word	0x0800ab40
 8002e24:	0800aaf0 	.word	0x0800aaf0
 8002e28:	0800ab48 	.word	0x0800ab48
 8002e2c:	0800ab28 	.word	0x0800ab28
 8002e30:	0800ab50 	.word	0x0800ab50
 8002e34:	0800aafc 	.word	0x0800aafc
 8002e38:	0800ab58 	.word	0x0800ab58
 8002e3c:	0800aab0 	.word	0x0800aab0
 8002e40:	20001574 	.word	0x20001574
 8002e44:	0800aab8 	.word	0x0800aab8
 8002e48:	0800aac0 	.word	0x0800aac0
 8002e4c:	2000392c 	.word	0x2000392c
 8002e50:	0800ab60 	.word	0x0800ab60
 8002e54:	0800aa4c 	.word	0x0800aa4c
 8002e58:	20003338 	.word	0x20003338
 8002e5c:	0800ab68 	.word	0x0800ab68
 8002e60:	0800aa58 	.word	0x0800aa58
 8002e64:	0800ab78 	.word	0x0800ab78
 8002e68:	0800aa64 	.word	0x0800aa64
 8002e6c:	0800ab88 	.word	0x0800ab88
 8002e70:	0800aa70 	.word	0x0800aa70
 8002e74:	0800ab98 	.word	0x0800ab98
 8002e78:	0800aa80 	.word	0x0800aa80
 8002e7c:	0800aba8 	.word	0x0800aba8
 8002e80:	0800aa8c 	.word	0x0800aa8c
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7fd fc5d 	bl	8000744 <__aeabi_f2iz>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	b21c      	sxth	r4, r3
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7fd fc57 	bl	8000744 <__aeabi_f2iz>
 8002e96:	4603      	mov	r3, r0
 8002e98:	b21b      	sxth	r3, r3
 8002e9a:	4aa8      	ldr	r2, [pc, #672]	@ (800313c <System_UI_Loop+0xb54>)
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	4620      	mov	r0, r4
 8002ea0:	f7ff fb04 	bl	80024ac <OLED_DisplayString>
    OLED_GetObjectPosition(&g_Title_AnimationManager, "Title2048", &x, &y);
 8002ea4:	f107 0308 	add.w	r3, r7, #8
 8002ea8:	f107 020c 	add.w	r2, r7, #12
 8002eac:	49a4      	ldr	r1, [pc, #656]	@ (8003140 <System_UI_Loop+0xb58>)
 8002eae:	48a5      	ldr	r0, [pc, #660]	@ (8003144 <System_UI_Loop+0xb5c>)
 8002eb0:	f001 fffd 	bl	8004eae <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Here is 2048!");
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7fd fc44 	bl	8000744 <__aeabi_f2iz>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	b21c      	sxth	r4, r3
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7fd fc3e 	bl	8000744 <__aeabi_f2iz>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	b21b      	sxth	r3, r3
 8002ecc:	4a9e      	ldr	r2, [pc, #632]	@ (8003148 <System_UI_Loop+0xb60>)
 8002ece:	4619      	mov	r1, r3
 8002ed0:	4620      	mov	r0, r4
 8002ed2:	f7ff faeb 	bl	80024ac <OLED_DisplayString>
    OLED_GetObjectPosition(&g_Title_AnimationManager, "TitleBack", &x, &y);
 8002ed6:	f107 0308 	add.w	r3, r7, #8
 8002eda:	f107 020c 	add.w	r2, r7, #12
 8002ede:	499b      	ldr	r1, [pc, #620]	@ (800314c <System_UI_Loop+0xb64>)
 8002ee0:	4898      	ldr	r0, [pc, #608]	@ (8003144 <System_UI_Loop+0xb5c>)
 8002ee2:	f001 ffe4 	bl	8004eae <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Back To Menu");
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7fd fc2b 	bl	8000744 <__aeabi_f2iz>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	b21c      	sxth	r4, r3
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7fd fc25 	bl	8000744 <__aeabi_f2iz>
 8002efa:	4603      	mov	r3, r0
 8002efc:	b21b      	sxth	r3, r3
 8002efe:	4a94      	ldr	r2, [pc, #592]	@ (8003150 <System_UI_Loop+0xb68>)
 8002f00:	4619      	mov	r1, r3
 8002f02:	4620      	mov	r0, r4
 8002f04:	f7ff fad2 	bl	80024ac <OLED_DisplayString>

    OLED_GetObjectPosition(&g_AnimationManager, "TitleBGScale", &x, &y);
 8002f08:	f107 0308 	add.w	r3, r7, #8
 8002f0c:	f107 020c 	add.w	r2, r7, #12
 8002f10:	4990      	ldr	r1, [pc, #576]	@ (8003154 <System_UI_Loop+0xb6c>)
 8002f12:	4891      	ldr	r0, [pc, #580]	@ (8003158 <System_UI_Loop+0xb70>)
 8002f14:	f001 ffcb 	bl	8004eae <OLED_GetObjectPosition>
    OLED_InvertArea(OLED_WIDTH - x, 0, x, y);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	f04f 4086 	mov.w	r0, #1124073472	@ 0x43000000
 8002f20:	f7fd f92a 	bl	8000178 <__aeabi_fsub>
 8002f24:	4603      	mov	r3, r0
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7fd fc0c 	bl	8000744 <__aeabi_f2iz>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	b21c      	sxth	r4, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7fd fc2c 	bl	8000790 <__aeabi_f2uiz>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	b2dd      	uxtb	r5, r3
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7fd fc26 	bl	8000790 <__aeabi_f2uiz>
 8002f44:	4603      	mov	r3, r0
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	462a      	mov	r2, r5
 8002f4a:	2100      	movs	r1, #0
 8002f4c:	4620      	mov	r0, r4
 8002f4e:	f7ff f877 	bl	8002040 <OLED_InvertArea>

    OLED_GetObjectPosition(&g_AnimationManager, "Cursor", &x, &y);
 8002f52:	f107 0308 	add.w	r3, r7, #8
 8002f56:	f107 020c 	add.w	r2, r7, #12
 8002f5a:	4980      	ldr	r1, [pc, #512]	@ (800315c <System_UI_Loop+0xb74>)
 8002f5c:	487e      	ldr	r0, [pc, #504]	@ (8003158 <System_UI_Loop+0xb70>)
 8002f5e:	f001 ffa6 	bl	8004eae <OLED_GetObjectPosition>
    OLED_GetObjectPosition(&g_AnimationManager, "CursorScale", &x1, &y1);
 8002f62:	463b      	mov	r3, r7
 8002f64:	1d3a      	adds	r2, r7, #4
 8002f66:	497e      	ldr	r1, [pc, #504]	@ (8003160 <System_UI_Loop+0xb78>)
 8002f68:	487b      	ldr	r0, [pc, #492]	@ (8003158 <System_UI_Loop+0xb70>)
 8002f6a:	f001 ffa0 	bl	8004eae <OLED_GetObjectPosition>
    OLED_InvertArea(x - 2, y - 2, x1, y1); // 绘制光标
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7fd f8ff 	bl	8000178 <__aeabi_fsub>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7fd fbe1 	bl	8000744 <__aeabi_f2iz>
 8002f82:	4603      	mov	r3, r0
 8002f84:	b21c      	sxth	r4, r3
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7fd f8f3 	bl	8000178 <__aeabi_fsub>
 8002f92:	4603      	mov	r3, r0
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7fd fbd5 	bl	8000744 <__aeabi_f2iz>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	b21d      	sxth	r5, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7fd fbf5 	bl	8000790 <__aeabi_f2uiz>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	b2de      	uxtb	r6, r3
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7fd fbef 	bl	8000790 <__aeabi_f2uiz>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	4632      	mov	r2, r6
 8002fb8:	4629      	mov	r1, r5
 8002fba:	4620      	mov	r0, r4
 8002fbc:	f7ff f840 	bl	8002040 <OLED_InvertArea>
#pragma endregion DRAWER

#pragma region PlayerSelection //选择某个选项时候的详细内容
    if (menuRank == 1)
 8002fc0:	4b68      	ldr	r3, [pc, #416]	@ (8003164 <System_UI_Loop+0xb7c>)
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	f040 81d6 	bne.w	8003376 <System_UI_Loop+0xd8e>
    {
        switch (menuSelection)
 8002fca:	4b67      	ldr	r3, [pc, #412]	@ (8003168 <System_UI_Loop+0xb80>)
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	2b04      	cmp	r3, #4
 8002fd2:	f200 81cc 	bhi.w	800336e <System_UI_Loop+0xd86>
 8002fd6:	a201      	add	r2, pc, #4	@ (adr r2, 8002fdc <System_UI_Loop+0x9f4>)
 8002fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fdc:	08002ff1 	.word	0x08002ff1
 8002fe0:	080030a1 	.word	0x080030a1
 8002fe4:	080031a1 	.word	0x080031a1
 8002fe8:	0800323b 	.word	0x0800323b
 8002fec:	080032d5 	.word	0x080032d5
        {
        case 1:
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleBack", (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_Start_Y, 500, TweenStyle);
 8002ff0:	230f      	movs	r3, #15
 8002ff2:	9301      	str	r3, [sp, #4]
 8002ff4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002ff8:	9300      	str	r3, [sp, #0]
 8002ffa:	4b5c      	ldr	r3, [pc, #368]	@ (800316c <System_UI_Loop+0xb84>)
 8002ffc:	4a5c      	ldr	r2, [pc, #368]	@ (8003170 <System_UI_Loop+0xb88>)
 8002ffe:	4953      	ldr	r1, [pc, #332]	@ (800314c <System_UI_Loop+0xb64>)
 8003000:	4850      	ldr	r0, [pc, #320]	@ (8003144 <System_UI_Loop+0xb5c>)
 8003002:	f002 f82f 	bl	8005064 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleStatus", OLED_WIDTH - strlen("Machine States") * 6, OLED_TITLE_Start_Y, 1, TweenStyle);
 8003006:	230f      	movs	r3, #15
 8003008:	9301      	str	r3, [sp, #4]
 800300a:	2301      	movs	r3, #1
 800300c:	9300      	str	r3, [sp, #0]
 800300e:	4b57      	ldr	r3, [pc, #348]	@ (800316c <System_UI_Loop+0xb84>)
 8003010:	4a58      	ldr	r2, [pc, #352]	@ (8003174 <System_UI_Loop+0xb8c>)
 8003012:	4959      	ldr	r1, [pc, #356]	@ (8003178 <System_UI_Loop+0xb90>)
 8003014:	484b      	ldr	r0, [pc, #300]	@ (8003144 <System_UI_Loop+0xb5c>)
 8003016:	f002 f825 	bl	8005064 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSettings", OLED_WIDTH - strlen("STM Settings") * 6, OLED_TITLE_Start_Y, 1, TweenStyle);
 800301a:	230f      	movs	r3, #15
 800301c:	9301      	str	r3, [sp, #4]
 800301e:	2301      	movs	r3, #1
 8003020:	9300      	str	r3, [sp, #0]
 8003022:	4b52      	ldr	r3, [pc, #328]	@ (800316c <System_UI_Loop+0xb84>)
 8003024:	4a52      	ldr	r2, [pc, #328]	@ (8003170 <System_UI_Loop+0xb88>)
 8003026:	4955      	ldr	r1, [pc, #340]	@ (800317c <System_UI_Loop+0xb94>)
 8003028:	4846      	ldr	r0, [pc, #280]	@ (8003144 <System_UI_Loop+0xb5c>)
 800302a:	f002 f81b 	bl	8005064 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleAbout", (OLED_WIDTH - strlen("Developer!") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 800302e:	2304      	movs	r3, #4
 8003030:	9301      	str	r3, [sp, #4]
 8003032:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003036:	9300      	str	r3, [sp, #0]
 8003038:	4b4c      	ldr	r3, [pc, #304]	@ (800316c <System_UI_Loop+0xb84>)
 800303a:	4a51      	ldr	r2, [pc, #324]	@ (8003180 <System_UI_Loop+0xb98>)
 800303c:	4951      	ldr	r1, [pc, #324]	@ (8003184 <System_UI_Loop+0xb9c>)
 800303e:	4841      	ldr	r0, [pc, #260]	@ (8003144 <System_UI_Loop+0xb5c>)
 8003040:	f002 f810 	bl	8005064 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleTools", (OLED_WIDTH - strlen("Tools For You") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 8003044:	2304      	movs	r3, #4
 8003046:	9301      	str	r3, [sp, #4]
 8003048:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800304c:	9300      	str	r3, [sp, #0]
 800304e:	4b47      	ldr	r3, [pc, #284]	@ (800316c <System_UI_Loop+0xb84>)
 8003050:	4a4d      	ldr	r2, [pc, #308]	@ (8003188 <System_UI_Loop+0xba0>)
 8003052:	494e      	ldr	r1, [pc, #312]	@ (800318c <System_UI_Loop+0xba4>)
 8003054:	483b      	ldr	r0, [pc, #236]	@ (8003144 <System_UI_Loop+0xb5c>)
 8003056:	f002 f805 	bl	8005064 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleGames", (OLED_WIDTH - strlen("Epicful Games") * 6), OLED_TITLE_End_Y, 500, EASE_IN_CUBIC);
 800305a:	2304      	movs	r3, #4
 800305c:	9301      	str	r3, [sp, #4]
 800305e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003062:	9300      	str	r3, [sp, #0]
 8003064:	f04f 0300 	mov.w	r3, #0
 8003068:	4a47      	ldr	r2, [pc, #284]	@ (8003188 <System_UI_Loop+0xba0>)
 800306a:	4949      	ldr	r1, [pc, #292]	@ (8003190 <System_UI_Loop+0xba8>)
 800306c:	4835      	ldr	r0, [pc, #212]	@ (8003144 <System_UI_Loop+0xb5c>)
 800306e:	f001 fff9 	bl	8005064 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Epicful Games") * 6 + 3, 8, 500, EASE_IN_CUBIC);
 8003072:	2304      	movs	r3, #4
 8003074:	9301      	str	r3, [sp, #4]
 8003076:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800307a:	9300      	str	r3, [sp, #0]
 800307c:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8003080:	4a44      	ldr	r2, [pc, #272]	@ (8003194 <System_UI_Loop+0xbac>)
 8003082:	4934      	ldr	r1, [pc, #208]	@ (8003154 <System_UI_Loop+0xb6c>)
 8003084:	4834      	ldr	r0, [pc, #208]	@ (8003158 <System_UI_Loop+0xb70>)
 8003086:	f001 ffed 	bl	8005064 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Games") * 6 + 3, 10, 100, EASE_INOUT_CIRC);
 800308a:	230c      	movs	r3, #12
 800308c:	9301      	str	r3, [sp, #4]
 800308e:	2364      	movs	r3, #100	@ 0x64
 8003090:	9300      	str	r3, [sp, #0]
 8003092:	4b41      	ldr	r3, [pc, #260]	@ (8003198 <System_UI_Loop+0xbb0>)
 8003094:	4a41      	ldr	r2, [pc, #260]	@ (800319c <System_UI_Loop+0xbb4>)
 8003096:	4932      	ldr	r1, [pc, #200]	@ (8003160 <System_UI_Loop+0xb78>)
 8003098:	482f      	ldr	r0, [pc, #188]	@ (8003158 <System_UI_Loop+0xb70>)
 800309a:	f001 ffe3 	bl	8005064 <OLED_DoTweenObject>
            break;
 800309e:	e2ce      	b.n	800363e <System_UI_Loop+0x1056>
        case 2:
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSettings", (OLED_WIDTH - strlen("STM Settings") * 6), OLED_TITLE_Start_Y, 1, EASE_IN_CUBIC);
 80030a0:	2304      	movs	r3, #4
 80030a2:	9301      	str	r3, [sp, #4]
 80030a4:	2301      	movs	r3, #1
 80030a6:	9300      	str	r3, [sp, #0]
 80030a8:	4b30      	ldr	r3, [pc, #192]	@ (800316c <System_UI_Loop+0xb84>)
 80030aa:	4a31      	ldr	r2, [pc, #196]	@ (8003170 <System_UI_Loop+0xb88>)
 80030ac:	4933      	ldr	r1, [pc, #204]	@ (800317c <System_UI_Loop+0xb94>)
 80030ae:	4825      	ldr	r0, [pc, #148]	@ (8003144 <System_UI_Loop+0xb5c>)
 80030b0:	f001 ffd8 	bl	8005064 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleAbout", (OLED_WIDTH - strlen("Developer!") * 6), OLED_TITLE_Start_Y, 1, EASE_IN_CUBIC);
 80030b4:	2304      	movs	r3, #4
 80030b6:	9301      	str	r3, [sp, #4]
 80030b8:	2301      	movs	r3, #1
 80030ba:	9300      	str	r3, [sp, #0]
 80030bc:	4b2b      	ldr	r3, [pc, #172]	@ (800316c <System_UI_Loop+0xb84>)
 80030be:	4a30      	ldr	r2, [pc, #192]	@ (8003180 <System_UI_Loop+0xb98>)
 80030c0:	4930      	ldr	r1, [pc, #192]	@ (8003184 <System_UI_Loop+0xb9c>)
 80030c2:	4820      	ldr	r0, [pc, #128]	@ (8003144 <System_UI_Loop+0xb5c>)
 80030c4:	f001 ffce 	bl	8005064 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleStatus", (OLED_WIDTH - strlen("Machine States") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 80030c8:	2304      	movs	r3, #4
 80030ca:	9301      	str	r3, [sp, #4]
 80030cc:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80030d0:	9300      	str	r3, [sp, #0]
 80030d2:	4b26      	ldr	r3, [pc, #152]	@ (800316c <System_UI_Loop+0xb84>)
 80030d4:	4a27      	ldr	r2, [pc, #156]	@ (8003174 <System_UI_Loop+0xb8c>)
 80030d6:	4928      	ldr	r1, [pc, #160]	@ (8003178 <System_UI_Loop+0xb90>)
 80030d8:	481a      	ldr	r0, [pc, #104]	@ (8003144 <System_UI_Loop+0xb5c>)
 80030da:	f001 ffc3 	bl	8005064 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleGames", (OLED_WIDTH - strlen("Epicful Games") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 80030de:	2304      	movs	r3, #4
 80030e0:	9301      	str	r3, [sp, #4]
 80030e2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80030e6:	9300      	str	r3, [sp, #0]
 80030e8:	4b20      	ldr	r3, [pc, #128]	@ (800316c <System_UI_Loop+0xb84>)
 80030ea:	4a27      	ldr	r2, [pc, #156]	@ (8003188 <System_UI_Loop+0xba0>)
 80030ec:	4928      	ldr	r1, [pc, #160]	@ (8003190 <System_UI_Loop+0xba8>)
 80030ee:	4815      	ldr	r0, [pc, #84]	@ (8003144 <System_UI_Loop+0xb5c>)
 80030f0:	f001 ffb8 	bl	8005064 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleTools", (OLED_WIDTH - strlen("Tools For You") * 6), OLED_TITLE_End_Y, 500, EASE_IN_CUBIC);
 80030f4:	2304      	movs	r3, #4
 80030f6:	9301      	str	r3, [sp, #4]
 80030f8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80030fc:	9300      	str	r3, [sp, #0]
 80030fe:	f04f 0300 	mov.w	r3, #0
 8003102:	4a21      	ldr	r2, [pc, #132]	@ (8003188 <System_UI_Loop+0xba0>)
 8003104:	4921      	ldr	r1, [pc, #132]	@ (800318c <System_UI_Loop+0xba4>)
 8003106:	480f      	ldr	r0, [pc, #60]	@ (8003144 <System_UI_Loop+0xb5c>)
 8003108:	f001 ffac 	bl	8005064 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Tools for you") * 6 + 3, 8, 500, EASE_IN_CUBIC);
 800310c:	2304      	movs	r3, #4
 800310e:	9301      	str	r3, [sp, #4]
 8003110:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003114:	9300      	str	r3, [sp, #0]
 8003116:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 800311a:	4a1e      	ldr	r2, [pc, #120]	@ (8003194 <System_UI_Loop+0xbac>)
 800311c:	490d      	ldr	r1, [pc, #52]	@ (8003154 <System_UI_Loop+0xb6c>)
 800311e:	480e      	ldr	r0, [pc, #56]	@ (8003158 <System_UI_Loop+0xb70>)
 8003120:	f001 ffa0 	bl	8005064 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Tools") * 6 + 3, 10, 100, EASE_INOUT_CIRC);
 8003124:	230c      	movs	r3, #12
 8003126:	9301      	str	r3, [sp, #4]
 8003128:	2364      	movs	r3, #100	@ 0x64
 800312a:	9300      	str	r3, [sp, #0]
 800312c:	4b1a      	ldr	r3, [pc, #104]	@ (8003198 <System_UI_Loop+0xbb0>)
 800312e:	4a1b      	ldr	r2, [pc, #108]	@ (800319c <System_UI_Loop+0xbb4>)
 8003130:	490b      	ldr	r1, [pc, #44]	@ (8003160 <System_UI_Loop+0xb78>)
 8003132:	4809      	ldr	r0, [pc, #36]	@ (8003158 <System_UI_Loop+0xb70>)
 8003134:	f001 ff96 	bl	8005064 <OLED_DoTweenObject>
            break;
 8003138:	e281      	b.n	800363e <System_UI_Loop+0x1056>
 800313a:	bf00      	nop
 800313c:	0800abb4 	.word	0x0800abb4
 8003140:	0800aa98 	.word	0x0800aa98
 8003144:	20003338 	.word	0x20003338
 8003148:	0800abc4 	.word	0x0800abc4
 800314c:	0800aaa4 	.word	0x0800aaa4
 8003150:	0800abd4 	.word	0x0800abd4
 8003154:	0800aacc 	.word	0x0800aacc
 8003158:	2000392c 	.word	0x2000392c
 800315c:	0800aadc 	.word	0x0800aadc
 8003160:	0800aae4 	.word	0x0800aae4
 8003164:	20000001 	.word	0x20000001
 8003168:	20000002 	.word	0x20000002
 800316c:	c1200000 	.word	0xc1200000
 8003170:	42600000 	.word	0x42600000
 8003174:	42300000 	.word	0x42300000
 8003178:	0800aa64 	.word	0x0800aa64
 800317c:	0800aa70 	.word	0x0800aa70
 8003180:	42880000 	.word	0x42880000
 8003184:	0800aa80 	.word	0x0800aa80
 8003188:	42480000 	.word	0x42480000
 800318c:	0800aa58 	.word	0x0800aa58
 8003190:	0800aa4c 	.word	0x0800aa4c
 8003194:	42a20000 	.word	0x42a20000
 8003198:	41200000 	.word	0x41200000
 800319c:	42040000 	.word	0x42040000
        case 3:
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleGames", (OLED_WIDTH - strlen("Epicful Games") * 6), OLED_TITLE_Start_Y, 1, EASE_IN_CUBIC);
 80031a0:	2304      	movs	r3, #4
 80031a2:	9301      	str	r3, [sp, #4]
 80031a4:	2301      	movs	r3, #1
 80031a6:	9300      	str	r3, [sp, #0]
 80031a8:	4b90      	ldr	r3, [pc, #576]	@ (80033ec <System_UI_Loop+0xe04>)
 80031aa:	4a91      	ldr	r2, [pc, #580]	@ (80033f0 <System_UI_Loop+0xe08>)
 80031ac:	4991      	ldr	r1, [pc, #580]	@ (80033f4 <System_UI_Loop+0xe0c>)
 80031ae:	4892      	ldr	r0, [pc, #584]	@ (80033f8 <System_UI_Loop+0xe10>)
 80031b0:	f001 ff58 	bl	8005064 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleAbout", (OLED_WIDTH - strlen("Developer!") * 6), OLED_TITLE_Start_Y, 1, EASE_IN_CUBIC);
 80031b4:	2304      	movs	r3, #4
 80031b6:	9301      	str	r3, [sp, #4]
 80031b8:	2301      	movs	r3, #1
 80031ba:	9300      	str	r3, [sp, #0]
 80031bc:	4b8b      	ldr	r3, [pc, #556]	@ (80033ec <System_UI_Loop+0xe04>)
 80031be:	4a8f      	ldr	r2, [pc, #572]	@ (80033fc <System_UI_Loop+0xe14>)
 80031c0:	498f      	ldr	r1, [pc, #572]	@ (8003400 <System_UI_Loop+0xe18>)
 80031c2:	488d      	ldr	r0, [pc, #564]	@ (80033f8 <System_UI_Loop+0xe10>)
 80031c4:	f001 ff4e 	bl	8005064 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSettings", (OLED_WIDTH - strlen("STM Settings") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 80031c8:	2304      	movs	r3, #4
 80031ca:	9301      	str	r3, [sp, #4]
 80031cc:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80031d0:	9300      	str	r3, [sp, #0]
 80031d2:	4b86      	ldr	r3, [pc, #536]	@ (80033ec <System_UI_Loop+0xe04>)
 80031d4:	4a8b      	ldr	r2, [pc, #556]	@ (8003404 <System_UI_Loop+0xe1c>)
 80031d6:	498c      	ldr	r1, [pc, #560]	@ (8003408 <System_UI_Loop+0xe20>)
 80031d8:	4887      	ldr	r0, [pc, #540]	@ (80033f8 <System_UI_Loop+0xe10>)
 80031da:	f001 ff43 	bl	8005064 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleTools", (OLED_WIDTH - strlen("Tools For You") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 80031de:	2304      	movs	r3, #4
 80031e0:	9301      	str	r3, [sp, #4]
 80031e2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80031e6:	9300      	str	r3, [sp, #0]
 80031e8:	4b80      	ldr	r3, [pc, #512]	@ (80033ec <System_UI_Loop+0xe04>)
 80031ea:	4a81      	ldr	r2, [pc, #516]	@ (80033f0 <System_UI_Loop+0xe08>)
 80031ec:	4987      	ldr	r1, [pc, #540]	@ (800340c <System_UI_Loop+0xe24>)
 80031ee:	4882      	ldr	r0, [pc, #520]	@ (80033f8 <System_UI_Loop+0xe10>)
 80031f0:	f001 ff38 	bl	8005064 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleStatus", (OLED_WIDTH - strlen("Machine States") * 6), OLED_TITLE_End_Y, 500, EASE_IN_CUBIC);
 80031f4:	2304      	movs	r3, #4
 80031f6:	9301      	str	r3, [sp, #4]
 80031f8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80031fc:	9300      	str	r3, [sp, #0]
 80031fe:	f04f 0300 	mov.w	r3, #0
 8003202:	4a83      	ldr	r2, [pc, #524]	@ (8003410 <System_UI_Loop+0xe28>)
 8003204:	4983      	ldr	r1, [pc, #524]	@ (8003414 <System_UI_Loop+0xe2c>)
 8003206:	487c      	ldr	r0, [pc, #496]	@ (80033f8 <System_UI_Loop+0xe10>)
 8003208:	f001 ff2c 	bl	8005064 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Machine States") * 6 + 3, 8, 500, EASE_IN_CUBIC);
 800320c:	2304      	movs	r3, #4
 800320e:	9301      	str	r3, [sp, #4]
 8003210:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003214:	9300      	str	r3, [sp, #0]
 8003216:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 800321a:	4a7f      	ldr	r2, [pc, #508]	@ (8003418 <System_UI_Loop+0xe30>)
 800321c:	497f      	ldr	r1, [pc, #508]	@ (800341c <System_UI_Loop+0xe34>)
 800321e:	4880      	ldr	r0, [pc, #512]	@ (8003420 <System_UI_Loop+0xe38>)
 8003220:	f001 ff20 	bl	8005064 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("States") * 6 + 3, 10, 100, EASE_INOUT_CIRC);
 8003224:	230c      	movs	r3, #12
 8003226:	9301      	str	r3, [sp, #4]
 8003228:	2364      	movs	r3, #100	@ 0x64
 800322a:	9300      	str	r3, [sp, #0]
 800322c:	4b7d      	ldr	r3, [pc, #500]	@ (8003424 <System_UI_Loop+0xe3c>)
 800322e:	4a7e      	ldr	r2, [pc, #504]	@ (8003428 <System_UI_Loop+0xe40>)
 8003230:	497e      	ldr	r1, [pc, #504]	@ (800342c <System_UI_Loop+0xe44>)
 8003232:	487b      	ldr	r0, [pc, #492]	@ (8003420 <System_UI_Loop+0xe38>)
 8003234:	f001 ff16 	bl	8005064 <OLED_DoTweenObject>
            break;
 8003238:	e201      	b.n	800363e <System_UI_Loop+0x1056>
        case 4:
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleGames", (OLED_WIDTH - strlen("Epicful Games") * 6), OLED_TITLE_Start_Y, 1, EASE_IN_CUBIC);
 800323a:	2304      	movs	r3, #4
 800323c:	9301      	str	r3, [sp, #4]
 800323e:	2301      	movs	r3, #1
 8003240:	9300      	str	r3, [sp, #0]
 8003242:	4b6a      	ldr	r3, [pc, #424]	@ (80033ec <System_UI_Loop+0xe04>)
 8003244:	4a6a      	ldr	r2, [pc, #424]	@ (80033f0 <System_UI_Loop+0xe08>)
 8003246:	496b      	ldr	r1, [pc, #428]	@ (80033f4 <System_UI_Loop+0xe0c>)
 8003248:	486b      	ldr	r0, [pc, #428]	@ (80033f8 <System_UI_Loop+0xe10>)
 800324a:	f001 ff0b 	bl	8005064 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleTools", (OLED_WIDTH - strlen("Tools For You") * 6), OLED_TITLE_Start_Y, 1, EASE_IN_CUBIC);
 800324e:	2304      	movs	r3, #4
 8003250:	9301      	str	r3, [sp, #4]
 8003252:	2301      	movs	r3, #1
 8003254:	9300      	str	r3, [sp, #0]
 8003256:	4b65      	ldr	r3, [pc, #404]	@ (80033ec <System_UI_Loop+0xe04>)
 8003258:	4a65      	ldr	r2, [pc, #404]	@ (80033f0 <System_UI_Loop+0xe08>)
 800325a:	496c      	ldr	r1, [pc, #432]	@ (800340c <System_UI_Loop+0xe24>)
 800325c:	4866      	ldr	r0, [pc, #408]	@ (80033f8 <System_UI_Loop+0xe10>)
 800325e:	f001 ff01 	bl	8005064 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleStatus", (OLED_WIDTH - strlen("Machine States") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 8003262:	2304      	movs	r3, #4
 8003264:	9301      	str	r3, [sp, #4]
 8003266:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800326a:	9300      	str	r3, [sp, #0]
 800326c:	4b5f      	ldr	r3, [pc, #380]	@ (80033ec <System_UI_Loop+0xe04>)
 800326e:	4a68      	ldr	r2, [pc, #416]	@ (8003410 <System_UI_Loop+0xe28>)
 8003270:	4968      	ldr	r1, [pc, #416]	@ (8003414 <System_UI_Loop+0xe2c>)
 8003272:	4861      	ldr	r0, [pc, #388]	@ (80033f8 <System_UI_Loop+0xe10>)
 8003274:	f001 fef6 	bl	8005064 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleAbout", (OLED_WIDTH - strlen("Developer!") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 8003278:	2304      	movs	r3, #4
 800327a:	9301      	str	r3, [sp, #4]
 800327c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003280:	9300      	str	r3, [sp, #0]
 8003282:	4b5a      	ldr	r3, [pc, #360]	@ (80033ec <System_UI_Loop+0xe04>)
 8003284:	4a5d      	ldr	r2, [pc, #372]	@ (80033fc <System_UI_Loop+0xe14>)
 8003286:	495e      	ldr	r1, [pc, #376]	@ (8003400 <System_UI_Loop+0xe18>)
 8003288:	485b      	ldr	r0, [pc, #364]	@ (80033f8 <System_UI_Loop+0xe10>)
 800328a:	f001 feeb 	bl	8005064 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSettings", (OLED_WIDTH - strlen("STM Settings") * 6), OLED_TITLE_End_Y, 500, EASE_IN_CUBIC);
 800328e:	2304      	movs	r3, #4
 8003290:	9301      	str	r3, [sp, #4]
 8003292:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003296:	9300      	str	r3, [sp, #0]
 8003298:	f04f 0300 	mov.w	r3, #0
 800329c:	4a59      	ldr	r2, [pc, #356]	@ (8003404 <System_UI_Loop+0xe1c>)
 800329e:	495a      	ldr	r1, [pc, #360]	@ (8003408 <System_UI_Loop+0xe20>)
 80032a0:	4855      	ldr	r0, [pc, #340]	@ (80033f8 <System_UI_Loop+0xe10>)
 80032a2:	f001 fedf 	bl	8005064 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("STM Settings") * 6 + 3, 8, 500, EASE_IN_CUBIC);
 80032a6:	2304      	movs	r3, #4
 80032a8:	9301      	str	r3, [sp, #4]
 80032aa:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80032ae:	9300      	str	r3, [sp, #0]
 80032b0:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 80032b4:	4a5e      	ldr	r2, [pc, #376]	@ (8003430 <System_UI_Loop+0xe48>)
 80032b6:	4959      	ldr	r1, [pc, #356]	@ (800341c <System_UI_Loop+0xe34>)
 80032b8:	4859      	ldr	r0, [pc, #356]	@ (8003420 <System_UI_Loop+0xe38>)
 80032ba:	f001 fed3 	bl	8005064 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Settings") * 6 + 3, 10, 100, EASE_INOUT_CIRC);
 80032be:	230c      	movs	r3, #12
 80032c0:	9301      	str	r3, [sp, #4]
 80032c2:	2364      	movs	r3, #100	@ 0x64
 80032c4:	9300      	str	r3, [sp, #0]
 80032c6:	4b57      	ldr	r3, [pc, #348]	@ (8003424 <System_UI_Loop+0xe3c>)
 80032c8:	4a5a      	ldr	r2, [pc, #360]	@ (8003434 <System_UI_Loop+0xe4c>)
 80032ca:	4958      	ldr	r1, [pc, #352]	@ (800342c <System_UI_Loop+0xe44>)
 80032cc:	4854      	ldr	r0, [pc, #336]	@ (8003420 <System_UI_Loop+0xe38>)
 80032ce:	f001 fec9 	bl	8005064 <OLED_DoTweenObject>
            break;
 80032d2:	e1b4      	b.n	800363e <System_UI_Loop+0x1056>
        case 5:
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleTools", (OLED_WIDTH - strlen("Tools For You") * 6), OLED_TITLE_Start_Y, 1, EASE_IN_CUBIC);
 80032d4:	2304      	movs	r3, #4
 80032d6:	9301      	str	r3, [sp, #4]
 80032d8:	2301      	movs	r3, #1
 80032da:	9300      	str	r3, [sp, #0]
 80032dc:	4b43      	ldr	r3, [pc, #268]	@ (80033ec <System_UI_Loop+0xe04>)
 80032de:	4a44      	ldr	r2, [pc, #272]	@ (80033f0 <System_UI_Loop+0xe08>)
 80032e0:	494a      	ldr	r1, [pc, #296]	@ (800340c <System_UI_Loop+0xe24>)
 80032e2:	4845      	ldr	r0, [pc, #276]	@ (80033f8 <System_UI_Loop+0xe10>)
 80032e4:	f001 febe 	bl	8005064 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleStatus", (OLED_WIDTH - strlen("Machine States") * 6), OLED_TITLE_Start_Y, 1, EASE_IN_CUBIC);
 80032e8:	2304      	movs	r3, #4
 80032ea:	9301      	str	r3, [sp, #4]
 80032ec:	2301      	movs	r3, #1
 80032ee:	9300      	str	r3, [sp, #0]
 80032f0:	4b3e      	ldr	r3, [pc, #248]	@ (80033ec <System_UI_Loop+0xe04>)
 80032f2:	4a47      	ldr	r2, [pc, #284]	@ (8003410 <System_UI_Loop+0xe28>)
 80032f4:	4947      	ldr	r1, [pc, #284]	@ (8003414 <System_UI_Loop+0xe2c>)
 80032f6:	4840      	ldr	r0, [pc, #256]	@ (80033f8 <System_UI_Loop+0xe10>)
 80032f8:	f001 feb4 	bl	8005064 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSettings", (OLED_WIDTH - strlen("STM Settings") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 80032fc:	2304      	movs	r3, #4
 80032fe:	9301      	str	r3, [sp, #4]
 8003300:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003304:	9300      	str	r3, [sp, #0]
 8003306:	4b39      	ldr	r3, [pc, #228]	@ (80033ec <System_UI_Loop+0xe04>)
 8003308:	4a3e      	ldr	r2, [pc, #248]	@ (8003404 <System_UI_Loop+0xe1c>)
 800330a:	493f      	ldr	r1, [pc, #252]	@ (8003408 <System_UI_Loop+0xe20>)
 800330c:	483a      	ldr	r0, [pc, #232]	@ (80033f8 <System_UI_Loop+0xe10>)
 800330e:	f001 fea9 	bl	8005064 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleGames", (OLED_WIDTH - strlen("Epicful Games") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 8003312:	2304      	movs	r3, #4
 8003314:	9301      	str	r3, [sp, #4]
 8003316:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800331a:	9300      	str	r3, [sp, #0]
 800331c:	4b33      	ldr	r3, [pc, #204]	@ (80033ec <System_UI_Loop+0xe04>)
 800331e:	4a34      	ldr	r2, [pc, #208]	@ (80033f0 <System_UI_Loop+0xe08>)
 8003320:	4934      	ldr	r1, [pc, #208]	@ (80033f4 <System_UI_Loop+0xe0c>)
 8003322:	4835      	ldr	r0, [pc, #212]	@ (80033f8 <System_UI_Loop+0xe10>)
 8003324:	f001 fe9e 	bl	8005064 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleAbout", (OLED_WIDTH - strlen("Developer!") * 6), OLED_TITLE_End_Y, 500, EASE_IN_CUBIC);
 8003328:	2304      	movs	r3, #4
 800332a:	9301      	str	r3, [sp, #4]
 800332c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003330:	9300      	str	r3, [sp, #0]
 8003332:	f04f 0300 	mov.w	r3, #0
 8003336:	4a31      	ldr	r2, [pc, #196]	@ (80033fc <System_UI_Loop+0xe14>)
 8003338:	4931      	ldr	r1, [pc, #196]	@ (8003400 <System_UI_Loop+0xe18>)
 800333a:	482f      	ldr	r0, [pc, #188]	@ (80033f8 <System_UI_Loop+0xe10>)
 800333c:	f001 fe92 	bl	8005064 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Developer!") * 6 + 3, 8, 500, EASE_IN_CUBIC);
 8003340:	2304      	movs	r3, #4
 8003342:	9301      	str	r3, [sp, #4]
 8003344:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003348:	9300      	str	r3, [sp, #0]
 800334a:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 800334e:	4a3a      	ldr	r2, [pc, #232]	@ (8003438 <System_UI_Loop+0xe50>)
 8003350:	4932      	ldr	r1, [pc, #200]	@ (800341c <System_UI_Loop+0xe34>)
 8003352:	4833      	ldr	r0, [pc, #204]	@ (8003420 <System_UI_Loop+0xe38>)
 8003354:	f001 fe86 	bl	8005064 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("About") * 6 + 3, 10, 100, EASE_INOUT_CIRC);
 8003358:	230c      	movs	r3, #12
 800335a:	9301      	str	r3, [sp, #4]
 800335c:	2364      	movs	r3, #100	@ 0x64
 800335e:	9300      	str	r3, [sp, #0]
 8003360:	4b30      	ldr	r3, [pc, #192]	@ (8003424 <System_UI_Loop+0xe3c>)
 8003362:	4a36      	ldr	r2, [pc, #216]	@ (800343c <System_UI_Loop+0xe54>)
 8003364:	4931      	ldr	r1, [pc, #196]	@ (800342c <System_UI_Loop+0xe44>)
 8003366:	482e      	ldr	r0, [pc, #184]	@ (8003420 <System_UI_Loop+0xe38>)
 8003368:	f001 fe7c 	bl	8005064 <OLED_DoTweenObject>
            break;
 800336c:	e167      	b.n	800363e <System_UI_Loop+0x1056>
        default:
            OLED_DrawTitleBar("UnikoZera's UI");
 800336e:	4834      	ldr	r0, [pc, #208]	@ (8003440 <System_UI_Loop+0xe58>)
 8003370:	f001 feb7 	bl	80050e2 <OLED_DrawTitleBar>
            break;
 8003374:	e163      	b.n	800363e <System_UI_Loop+0x1056>
        }
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_SETTINGS)
 8003376:	4b33      	ldr	r3, [pc, #204]	@ (8003444 <System_UI_Loop+0xe5c>)
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	2b02      	cmp	r3, #2
 800337c:	d104      	bne.n	8003388 <System_UI_Loop+0xda0>
 800337e:	4b32      	ldr	r3, [pc, #200]	@ (8003448 <System_UI_Loop+0xe60>)
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	2b01      	cmp	r3, #1
 8003384:	f000 815b 	beq.w	800363e <System_UI_Loop+0x1056>
    {
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_STATUS)
 8003388:	4b2e      	ldr	r3, [pc, #184]	@ (8003444 <System_UI_Loop+0xe5c>)
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	2b02      	cmp	r3, #2
 800338e:	d104      	bne.n	800339a <System_UI_Loop+0xdb2>
 8003390:	4b2d      	ldr	r3, [pc, #180]	@ (8003448 <System_UI_Loop+0xe60>)
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	2b02      	cmp	r3, #2
 8003396:	f000 8152 	beq.w	800363e <System_UI_Loop+0x1056>
    {
        /* code */
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_ABOUT)
 800339a:	4b2a      	ldr	r3, [pc, #168]	@ (8003444 <System_UI_Loop+0xe5c>)
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d104      	bne.n	80033ac <System_UI_Loop+0xdc4>
 80033a2:	4b29      	ldr	r3, [pc, #164]	@ (8003448 <System_UI_Loop+0xe60>)
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	2b03      	cmp	r3, #3
 80033a8:	f000 8149 	beq.w	800363e <System_UI_Loop+0x1056>
    {
        /* code */
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_TOOLS)
 80033ac:	4b25      	ldr	r3, [pc, #148]	@ (8003444 <System_UI_Loop+0xe5c>)
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d104      	bne.n	80033be <System_UI_Loop+0xdd6>
 80033b4:	4b24      	ldr	r3, [pc, #144]	@ (8003448 <System_UI_Loop+0xe60>)
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	2b04      	cmp	r3, #4
 80033ba:	f000 8140 	beq.w	800363e <System_UI_Loop+0x1056>
    {
        /* code */
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_GAMES)
 80033be:	4b21      	ldr	r3, [pc, #132]	@ (8003444 <System_UI_Loop+0xe5c>)
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	f040 80fc 	bne.w	80035c0 <System_UI_Loop+0xfd8>
 80033c8:	4b1f      	ldr	r3, [pc, #124]	@ (8003448 <System_UI_Loop+0xe60>)
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	2b05      	cmp	r3, #5
 80033ce:	f040 80f7 	bne.w	80035c0 <System_UI_Loop+0xfd8>
    {
        switch (menuSelection)
 80033d2:	4b1e      	ldr	r3, [pc, #120]	@ (800344c <System_UI_Loop+0xe64>)
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	2b03      	cmp	r3, #3
 80033d8:	f000 80b7 	beq.w	800354a <System_UI_Loop+0xf62>
 80033dc:	2b03      	cmp	r3, #3
 80033de:	f300 80ed 	bgt.w	80035bc <System_UI_Loop+0xfd4>
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d034      	beq.n	8003450 <System_UI_Loop+0xe68>
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d076      	beq.n	80034d8 <System_UI_Loop+0xef0>
            OLED_DoTweenObject(&g_Title_AnimationManager, "Title2048", (OLED_WIDTH - strlen("Here is 2048!") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Back To Menu") * 6 + 3, 8, 500, EASE_IN_CUBIC);
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Back") * 6 + 3, 10, 100, EASE_INOUT_CIRC);
            break;
        default:
            break;
 80033ea:	e0e7      	b.n	80035bc <System_UI_Loop+0xfd4>
 80033ec:	c1200000 	.word	0xc1200000
 80033f0:	42480000 	.word	0x42480000
 80033f4:	0800aa4c 	.word	0x0800aa4c
 80033f8:	20003338 	.word	0x20003338
 80033fc:	42880000 	.word	0x42880000
 8003400:	0800aa80 	.word	0x0800aa80
 8003404:	42600000 	.word	0x42600000
 8003408:	0800aa70 	.word	0x0800aa70
 800340c:	0800aa58 	.word	0x0800aa58
 8003410:	42300000 	.word	0x42300000
 8003414:	0800aa64 	.word	0x0800aa64
 8003418:	42ae0000 	.word	0x42ae0000
 800341c:	0800aacc 	.word	0x0800aacc
 8003420:	2000392c 	.word	0x2000392c
 8003424:	41200000 	.word	0x41200000
 8003428:	421c0000 	.word	0x421c0000
 800342c:	0800aae4 	.word	0x0800aae4
 8003430:	42960000 	.word	0x42960000
 8003434:	424c0000 	.word	0x424c0000
 8003438:	427c0000 	.word	0x427c0000
 800343c:	42040000 	.word	0x42040000
 8003440:	0800abe4 	.word	0x0800abe4
 8003444:	20000001 	.word	0x20000001
 8003448:	20000b6d 	.word	0x20000b6d
 800344c:	20000002 	.word	0x20000002
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleGames", (OLED_WIDTH - strlen("Epicful Games") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 8003450:	2304      	movs	r3, #4
 8003452:	9301      	str	r3, [sp, #4]
 8003454:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003458:	9300      	str	r3, [sp, #0]
 800345a:	4b92      	ldr	r3, [pc, #584]	@ (80036a4 <System_UI_Loop+0x10bc>)
 800345c:	4a92      	ldr	r2, [pc, #584]	@ (80036a8 <System_UI_Loop+0x10c0>)
 800345e:	4993      	ldr	r1, [pc, #588]	@ (80036ac <System_UI_Loop+0x10c4>)
 8003460:	4893      	ldr	r0, [pc, #588]	@ (80036b0 <System_UI_Loop+0x10c8>)
 8003462:	f001 fdff 	bl	8005064 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSnake", (OLED_WIDTH - strlen("Greedy Snake") * 6), OLED_TITLE_End_Y, 500, EASE_IN_CUBIC);
 8003466:	2304      	movs	r3, #4
 8003468:	9301      	str	r3, [sp, #4]
 800346a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800346e:	9300      	str	r3, [sp, #0]
 8003470:	f04f 0300 	mov.w	r3, #0
 8003474:	4a8f      	ldr	r2, [pc, #572]	@ (80036b4 <System_UI_Loop+0x10cc>)
 8003476:	4990      	ldr	r1, [pc, #576]	@ (80036b8 <System_UI_Loop+0x10d0>)
 8003478:	488d      	ldr	r0, [pc, #564]	@ (80036b0 <System_UI_Loop+0x10c8>)
 800347a:	f001 fdf3 	bl	8005064 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "Title2048", (OLED_WIDTH - strlen("Here is 2048!") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 800347e:	2304      	movs	r3, #4
 8003480:	9301      	str	r3, [sp, #4]
 8003482:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003486:	9300      	str	r3, [sp, #0]
 8003488:	4b86      	ldr	r3, [pc, #536]	@ (80036a4 <System_UI_Loop+0x10bc>)
 800348a:	4a87      	ldr	r2, [pc, #540]	@ (80036a8 <System_UI_Loop+0x10c0>)
 800348c:	498b      	ldr	r1, [pc, #556]	@ (80036bc <System_UI_Loop+0x10d4>)
 800348e:	4888      	ldr	r0, [pc, #544]	@ (80036b0 <System_UI_Loop+0x10c8>)
 8003490:	f001 fde8 	bl	8005064 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleBack", (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 8003494:	2304      	movs	r3, #4
 8003496:	9301      	str	r3, [sp, #4]
 8003498:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800349c:	9300      	str	r3, [sp, #0]
 800349e:	4b81      	ldr	r3, [pc, #516]	@ (80036a4 <System_UI_Loop+0x10bc>)
 80034a0:	4a84      	ldr	r2, [pc, #528]	@ (80036b4 <System_UI_Loop+0x10cc>)
 80034a2:	4987      	ldr	r1, [pc, #540]	@ (80036c0 <System_UI_Loop+0x10d8>)
 80034a4:	4882      	ldr	r0, [pc, #520]	@ (80036b0 <System_UI_Loop+0x10c8>)
 80034a6:	f001 fddd 	bl	8005064 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Greedy Snake") * 6 + 3, 8, 500, EASE_IN_CUBIC);
 80034aa:	2304      	movs	r3, #4
 80034ac:	9301      	str	r3, [sp, #4]
 80034ae:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80034b2:	9300      	str	r3, [sp, #0]
 80034b4:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 80034b8:	4a82      	ldr	r2, [pc, #520]	@ (80036c4 <System_UI_Loop+0x10dc>)
 80034ba:	4983      	ldr	r1, [pc, #524]	@ (80036c8 <System_UI_Loop+0x10e0>)
 80034bc:	4883      	ldr	r0, [pc, #524]	@ (80036cc <System_UI_Loop+0x10e4>)
 80034be:	f001 fdd1 	bl	8005064 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Snake") * 6 + 3, 10, 100, EASE_INOUT_CIRC);
 80034c2:	230c      	movs	r3, #12
 80034c4:	9301      	str	r3, [sp, #4]
 80034c6:	2364      	movs	r3, #100	@ 0x64
 80034c8:	9300      	str	r3, [sp, #0]
 80034ca:	4b81      	ldr	r3, [pc, #516]	@ (80036d0 <System_UI_Loop+0x10e8>)
 80034cc:	4a81      	ldr	r2, [pc, #516]	@ (80036d4 <System_UI_Loop+0x10ec>)
 80034ce:	4982      	ldr	r1, [pc, #520]	@ (80036d8 <System_UI_Loop+0x10f0>)
 80034d0:	487e      	ldr	r0, [pc, #504]	@ (80036cc <System_UI_Loop+0x10e4>)
 80034d2:	f001 fdc7 	bl	8005064 <OLED_DoTweenObject>
            break;
 80034d6:	e072      	b.n	80035be <System_UI_Loop+0xfd6>
            OLED_DoTweenObject(&g_Title_AnimationManager, "Title2048", (OLED_WIDTH - strlen("Here is 2048!") * 6), OLED_TITLE_End_Y, 500, EASE_IN_CUBIC);
 80034d8:	2304      	movs	r3, #4
 80034da:	9301      	str	r3, [sp, #4]
 80034dc:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80034e0:	9300      	str	r3, [sp, #0]
 80034e2:	f04f 0300 	mov.w	r3, #0
 80034e6:	4a70      	ldr	r2, [pc, #448]	@ (80036a8 <System_UI_Loop+0x10c0>)
 80034e8:	4974      	ldr	r1, [pc, #464]	@ (80036bc <System_UI_Loop+0x10d4>)
 80034ea:	4871      	ldr	r0, [pc, #452]	@ (80036b0 <System_UI_Loop+0x10c8>)
 80034ec:	f001 fdba 	bl	8005064 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSnake", (OLED_WIDTH - strlen("Greedy Snake") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 80034f0:	2304      	movs	r3, #4
 80034f2:	9301      	str	r3, [sp, #4]
 80034f4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80034f8:	9300      	str	r3, [sp, #0]
 80034fa:	4b6a      	ldr	r3, [pc, #424]	@ (80036a4 <System_UI_Loop+0x10bc>)
 80034fc:	4a6d      	ldr	r2, [pc, #436]	@ (80036b4 <System_UI_Loop+0x10cc>)
 80034fe:	496e      	ldr	r1, [pc, #440]	@ (80036b8 <System_UI_Loop+0x10d0>)
 8003500:	486b      	ldr	r0, [pc, #428]	@ (80036b0 <System_UI_Loop+0x10c8>)
 8003502:	f001 fdaf 	bl	8005064 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleBack", (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 8003506:	2304      	movs	r3, #4
 8003508:	9301      	str	r3, [sp, #4]
 800350a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800350e:	9300      	str	r3, [sp, #0]
 8003510:	4b64      	ldr	r3, [pc, #400]	@ (80036a4 <System_UI_Loop+0x10bc>)
 8003512:	4a68      	ldr	r2, [pc, #416]	@ (80036b4 <System_UI_Loop+0x10cc>)
 8003514:	496a      	ldr	r1, [pc, #424]	@ (80036c0 <System_UI_Loop+0x10d8>)
 8003516:	4866      	ldr	r0, [pc, #408]	@ (80036b0 <System_UI_Loop+0x10c8>)
 8003518:	f001 fda4 	bl	8005064 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Here is 2048!") * 6 + 3, 8, 500, EASE_IN_CUBIC);
 800351c:	2304      	movs	r3, #4
 800351e:	9301      	str	r3, [sp, #4]
 8003520:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003524:	9300      	str	r3, [sp, #0]
 8003526:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 800352a:	4a6c      	ldr	r2, [pc, #432]	@ (80036dc <System_UI_Loop+0x10f4>)
 800352c:	4966      	ldr	r1, [pc, #408]	@ (80036c8 <System_UI_Loop+0x10e0>)
 800352e:	4867      	ldr	r0, [pc, #412]	@ (80036cc <System_UI_Loop+0x10e4>)
 8003530:	f001 fd98 	bl	8005064 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("2048") * 6 + 3, 10, 100, EASE_INOUT_CIRC);
 8003534:	230c      	movs	r3, #12
 8003536:	9301      	str	r3, [sp, #4]
 8003538:	2364      	movs	r3, #100	@ 0x64
 800353a:	9300      	str	r3, [sp, #0]
 800353c:	4b64      	ldr	r3, [pc, #400]	@ (80036d0 <System_UI_Loop+0x10e8>)
 800353e:	4a68      	ldr	r2, [pc, #416]	@ (80036e0 <System_UI_Loop+0x10f8>)
 8003540:	4965      	ldr	r1, [pc, #404]	@ (80036d8 <System_UI_Loop+0x10f0>)
 8003542:	4862      	ldr	r0, [pc, #392]	@ (80036cc <System_UI_Loop+0x10e4>)
 8003544:	f001 fd8e 	bl	8005064 <OLED_DoTweenObject>
            break;
 8003548:	e039      	b.n	80035be <System_UI_Loop+0xfd6>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleBack", (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_End_Y, 500, EASE_IN_CUBIC);
 800354a:	2304      	movs	r3, #4
 800354c:	9301      	str	r3, [sp, #4]
 800354e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003552:	9300      	str	r3, [sp, #0]
 8003554:	f04f 0300 	mov.w	r3, #0
 8003558:	4a56      	ldr	r2, [pc, #344]	@ (80036b4 <System_UI_Loop+0x10cc>)
 800355a:	4959      	ldr	r1, [pc, #356]	@ (80036c0 <System_UI_Loop+0x10d8>)
 800355c:	4854      	ldr	r0, [pc, #336]	@ (80036b0 <System_UI_Loop+0x10c8>)
 800355e:	f001 fd81 	bl	8005064 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSnake", (OLED_WIDTH - strlen("Greedy Snake") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 8003562:	2304      	movs	r3, #4
 8003564:	9301      	str	r3, [sp, #4]
 8003566:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800356a:	9300      	str	r3, [sp, #0]
 800356c:	4b4d      	ldr	r3, [pc, #308]	@ (80036a4 <System_UI_Loop+0x10bc>)
 800356e:	4a51      	ldr	r2, [pc, #324]	@ (80036b4 <System_UI_Loop+0x10cc>)
 8003570:	4951      	ldr	r1, [pc, #324]	@ (80036b8 <System_UI_Loop+0x10d0>)
 8003572:	484f      	ldr	r0, [pc, #316]	@ (80036b0 <System_UI_Loop+0x10c8>)
 8003574:	f001 fd76 	bl	8005064 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "Title2048", (OLED_WIDTH - strlen("Here is 2048!") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 8003578:	2304      	movs	r3, #4
 800357a:	9301      	str	r3, [sp, #4]
 800357c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003580:	9300      	str	r3, [sp, #0]
 8003582:	4b48      	ldr	r3, [pc, #288]	@ (80036a4 <System_UI_Loop+0x10bc>)
 8003584:	4a48      	ldr	r2, [pc, #288]	@ (80036a8 <System_UI_Loop+0x10c0>)
 8003586:	494d      	ldr	r1, [pc, #308]	@ (80036bc <System_UI_Loop+0x10d4>)
 8003588:	4849      	ldr	r0, [pc, #292]	@ (80036b0 <System_UI_Loop+0x10c8>)
 800358a:	f001 fd6b 	bl	8005064 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Back To Menu") * 6 + 3, 8, 500, EASE_IN_CUBIC);
 800358e:	2304      	movs	r3, #4
 8003590:	9301      	str	r3, [sp, #4]
 8003592:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003596:	9300      	str	r3, [sp, #0]
 8003598:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 800359c:	4a49      	ldr	r2, [pc, #292]	@ (80036c4 <System_UI_Loop+0x10dc>)
 800359e:	494a      	ldr	r1, [pc, #296]	@ (80036c8 <System_UI_Loop+0x10e0>)
 80035a0:	484a      	ldr	r0, [pc, #296]	@ (80036cc <System_UI_Loop+0x10e4>)
 80035a2:	f001 fd5f 	bl	8005064 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Back") * 6 + 3, 10, 100, EASE_INOUT_CIRC);
 80035a6:	230c      	movs	r3, #12
 80035a8:	9301      	str	r3, [sp, #4]
 80035aa:	2364      	movs	r3, #100	@ 0x64
 80035ac:	9300      	str	r3, [sp, #0]
 80035ae:	4b48      	ldr	r3, [pc, #288]	@ (80036d0 <System_UI_Loop+0x10e8>)
 80035b0:	4a4b      	ldr	r2, [pc, #300]	@ (80036e0 <System_UI_Loop+0x10f8>)
 80035b2:	4949      	ldr	r1, [pc, #292]	@ (80036d8 <System_UI_Loop+0x10f0>)
 80035b4:	4845      	ldr	r0, [pc, #276]	@ (80036cc <System_UI_Loop+0x10e4>)
 80035b6:	f001 fd55 	bl	8005064 <OLED_DoTweenObject>
            break;
 80035ba:	e000      	b.n	80035be <System_UI_Loop+0xfd6>
            break;
 80035bc:	bf00      	nop
        switch (menuSelection)
 80035be:	e03e      	b.n	800363e <System_UI_Loop+0x1056>
        }
    }
    else if (menuRank == 3 && currentPage == UI_PAGE_GAMES && menuSelection == 1)
 80035c0:	4b48      	ldr	r3, [pc, #288]	@ (80036e4 <System_UI_Loop+0x10fc>)
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	2b03      	cmp	r3, #3
 80035c6:	d10d      	bne.n	80035e4 <System_UI_Loop+0xffc>
 80035c8:	4b47      	ldr	r3, [pc, #284]	@ (80036e8 <System_UI_Loop+0x1100>)
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	2b05      	cmp	r3, #5
 80035ce:	d109      	bne.n	80035e4 <System_UI_Loop+0xffc>
 80035d0:	4b46      	ldr	r3, [pc, #280]	@ (80036ec <System_UI_Loop+0x1104>)
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d105      	bne.n	80035e4 <System_UI_Loop+0xffc>
    {
        cancelSelection = true;
 80035d8:	4b45      	ldr	r3, [pc, #276]	@ (80036f0 <System_UI_Loop+0x1108>)
 80035da:	2201      	movs	r2, #1
 80035dc:	701a      	strb	r2, [r3, #0]
        Snake_GameLoop();
 80035de:	f7fd fb1f 	bl	8000c20 <Snake_GameLoop>
 80035e2:	e02c      	b.n	800363e <System_UI_Loop+0x1056>
    }
    else if (menuRank == 3 && currentPage == UI_PAGE_GAMES && menuSelection == 2)
 80035e4:	4b3f      	ldr	r3, [pc, #252]	@ (80036e4 <System_UI_Loop+0x10fc>)
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	2b03      	cmp	r3, #3
 80035ea:	d128      	bne.n	800363e <System_UI_Loop+0x1056>
 80035ec:	4b3e      	ldr	r3, [pc, #248]	@ (80036e8 <System_UI_Loop+0x1100>)
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	2b05      	cmp	r3, #5
 80035f2:	d124      	bne.n	800363e <System_UI_Loop+0x1056>
 80035f4:	4b3d      	ldr	r3, [pc, #244]	@ (80036ec <System_UI_Loop+0x1104>)
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d105      	bne.n	8003608 <System_UI_Loop+0x1020>
    {
        cancelSelection = true;
 80035fc:	4b3c      	ldr	r3, [pc, #240]	@ (80036f0 <System_UI_Loop+0x1108>)
 80035fe:	2201      	movs	r2, #1
 8003600:	701a      	strb	r2, [r3, #0]
        Game2048_GameLoop();
 8003602:	f7fe f81b 	bl	800163c <Game2048_GameLoop>
 8003606:	e01a      	b.n	800363e <System_UI_Loop+0x1056>
    }
    else if (menuRank == 3 && currentPage == UI_PAGE_SETTINGS)
 8003608:	4b36      	ldr	r3, [pc, #216]	@ (80036e4 <System_UI_Loop+0x10fc>)
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	2b03      	cmp	r3, #3
 800360e:	d116      	bne.n	800363e <System_UI_Loop+0x1056>
 8003610:	4b35      	ldr	r3, [pc, #212]	@ (80036e8 <System_UI_Loop+0x1100>)
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	2b01      	cmp	r3, #1
 8003616:	d012      	beq.n	800363e <System_UI_Loop+0x1056>
    {
        /* code */
    }
    else if (menuRank == 3 && currentPage == UI_PAGE_STATUS)
 8003618:	4b32      	ldr	r3, [pc, #200]	@ (80036e4 <System_UI_Loop+0x10fc>)
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	2b03      	cmp	r3, #3
 800361e:	d10e      	bne.n	800363e <System_UI_Loop+0x1056>
 8003620:	4b31      	ldr	r3, [pc, #196]	@ (80036e8 <System_UI_Loop+0x1100>)
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	2b02      	cmp	r3, #2
 8003626:	d00a      	beq.n	800363e <System_UI_Loop+0x1056>
    {
        /* code */
    }
    else if (menuRank == 3 && currentPage == UI_PAGE_ABOUT)
 8003628:	4b2e      	ldr	r3, [pc, #184]	@ (80036e4 <System_UI_Loop+0x10fc>)
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	2b03      	cmp	r3, #3
 800362e:	d106      	bne.n	800363e <System_UI_Loop+0x1056>
 8003630:	4b2d      	ldr	r3, [pc, #180]	@ (80036e8 <System_UI_Loop+0x1100>)
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	2b03      	cmp	r3, #3
 8003636:	d002      	beq.n	800363e <System_UI_Loop+0x1056>
    {
        /* code */
    }
    else if (menuRank == 3 && currentPage == UI_PAGE_TOOLS)
 8003638:	4b2a      	ldr	r3, [pc, #168]	@ (80036e4 <System_UI_Loop+0x10fc>)
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	2b03      	cmp	r3, #3
    }
    
#pragma endregion PlayerSelection

#pragma region ResetAnimation //完成换级时候让动画复位
    if (menuRank == 1 && OLED_GetAnimationStates(&Games_AnimationManager, "Snake") == 0)
 800363e:	4b29      	ldr	r3, [pc, #164]	@ (80036e4 <System_UI_Loop+0x10fc>)
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d125      	bne.n	8003692 <System_UI_Loop+0x10aa>
 8003646:	492b      	ldr	r1, [pc, #172]	@ (80036f4 <System_UI_Loop+0x110c>)
 8003648:	482b      	ldr	r0, [pc, #172]	@ (80036f8 <System_UI_Loop+0x1110>)
 800364a:	f001 fcf5 	bl	8005038 <OLED_GetAnimationStates>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d11e      	bne.n	8003692 <System_UI_Loop+0x10aa>
    {
        OLED_DoTweenObject(&Games_AnimationManager, "Snake", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1, EASE_IN_CIRC);
 8003654:	230a      	movs	r3, #10
 8003656:	9301      	str	r3, [sp, #4]
 8003658:	2301      	movs	r3, #1
 800365a:	9300      	str	r3, [sp, #0]
 800365c:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8003660:	4a26      	ldr	r2, [pc, #152]	@ (80036fc <System_UI_Loop+0x1114>)
 8003662:	4924      	ldr	r1, [pc, #144]	@ (80036f4 <System_UI_Loop+0x110c>)
 8003664:	4824      	ldr	r0, [pc, #144]	@ (80036f8 <System_UI_Loop+0x1110>)
 8003666:	f001 fcfd 	bl	8005064 <OLED_DoTweenObject>
        OLED_DoTweenObject(&Games_AnimationManager, "2048", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1, EASE_IN_CIRC);
 800366a:	230a      	movs	r3, #10
 800366c:	9301      	str	r3, [sp, #4]
 800366e:	2301      	movs	r3, #1
 8003670:	9300      	str	r3, [sp, #0]
 8003672:	4b23      	ldr	r3, [pc, #140]	@ (8003700 <System_UI_Loop+0x1118>)
 8003674:	4a21      	ldr	r2, [pc, #132]	@ (80036fc <System_UI_Loop+0x1114>)
 8003676:	4923      	ldr	r1, [pc, #140]	@ (8003704 <System_UI_Loop+0x111c>)
 8003678:	481f      	ldr	r0, [pc, #124]	@ (80036f8 <System_UI_Loop+0x1110>)
 800367a:	f001 fcf3 	bl	8005064 <OLED_DoTweenObject>
        OLED_DoTweenObject(&g_AnimationManager, "BackButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, 1, EASE_IN_CIRC);
 800367e:	230a      	movs	r3, #10
 8003680:	9301      	str	r3, [sp, #4]
 8003682:	2301      	movs	r3, #1
 8003684:	9300      	str	r3, [sp, #0]
 8003686:	4b20      	ldr	r3, [pc, #128]	@ (8003708 <System_UI_Loop+0x1120>)
 8003688:	4a1c      	ldr	r2, [pc, #112]	@ (80036fc <System_UI_Loop+0x1114>)
 800368a:	4920      	ldr	r1, [pc, #128]	@ (800370c <System_UI_Loop+0x1124>)
 800368c:	480f      	ldr	r0, [pc, #60]	@ (80036cc <System_UI_Loop+0x10e4>)
 800368e:	f001 fce9 	bl	8005064 <OLED_DoTweenObject>
    }

#pragma endregion ResetAnimation

    preMenuSelection = menuSelection;
 8003692:	4b16      	ldr	r3, [pc, #88]	@ (80036ec <System_UI_Loop+0x1104>)
 8003694:	781a      	ldrb	r2, [r3, #0]
 8003696:	4b1e      	ldr	r3, [pc, #120]	@ (8003710 <System_UI_Loop+0x1128>)
 8003698:	701a      	strb	r2, [r3, #0]
}
 800369a:	bf00      	nop
 800369c:	3714      	adds	r7, #20
 800369e:	46bd      	mov	sp, r7
 80036a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036a2:	bf00      	nop
 80036a4:	c1200000 	.word	0xc1200000
 80036a8:	42480000 	.word	0x42480000
 80036ac:	0800aa4c 	.word	0x0800aa4c
 80036b0:	20003338 	.word	0x20003338
 80036b4:	42600000 	.word	0x42600000
 80036b8:	0800aa8c 	.word	0x0800aa8c
 80036bc:	0800aa98 	.word	0x0800aa98
 80036c0:	0800aaa4 	.word	0x0800aaa4
 80036c4:	42960000 	.word	0x42960000
 80036c8:	0800aacc 	.word	0x0800aacc
 80036cc:	2000392c 	.word	0x2000392c
 80036d0:	41200000 	.word	0x41200000
 80036d4:	42040000 	.word	0x42040000
 80036d8:	0800aae4 	.word	0x0800aae4
 80036dc:	42a20000 	.word	0x42a20000
 80036e0:	41d80000 	.word	0x41d80000
 80036e4:	20000001 	.word	0x20000001
 80036e8:	20000b6d 	.word	0x20000b6d
 80036ec:	20000002 	.word	0x20000002
 80036f0:	20000b6f 	.word	0x20000b6f
 80036f4:	0800aab0 	.word	0x0800aab0
 80036f8:	20001574 	.word	0x20001574
 80036fc:	c2b40000 	.word	0xc2b40000
 8003700:	41e80000 	.word	0x41e80000
 8003704:	0800aab8 	.word	0x0800aab8
 8003708:	42280000 	.word	0x42280000
 800370c:	0800aac0 	.word	0x0800aac0
 8003710:	20000b6e 	.word	0x20000b6e

08003714 <SystemGetsSignal>:

void SystemGetsSignal() // 这里是旋钮数据的获取
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af02      	add	r7, sp, #8
    static uint16_t preCount = 32767;
    uint16_t pageCount;
    if (currentPage == UI_PAGE_MENU)
 800371a:	4ba5      	ldr	r3, [pc, #660]	@ (80039b0 <SystemGetsSignal+0x29c>)
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d102      	bne.n	8003728 <SystemGetsSignal+0x14>
    {
        pageCount = MainMenuItemCount;
 8003722:	2305      	movs	r3, #5
 8003724:	80fb      	strh	r3, [r7, #6]
 8003726:	e021      	b.n	800376c <SystemGetsSignal+0x58>
    }
    else if (currentPage == UI_PAGE_SETTINGS)
 8003728:	4ba1      	ldr	r3, [pc, #644]	@ (80039b0 <SystemGetsSignal+0x29c>)
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d102      	bne.n	8003736 <SystemGetsSignal+0x22>
    {
        pageCount = SettingsItemCount;
 8003730:	2305      	movs	r3, #5
 8003732:	80fb      	strh	r3, [r7, #6]
 8003734:	e01a      	b.n	800376c <SystemGetsSignal+0x58>
    }
    else if (currentPage == UI_PAGE_STATUS)
 8003736:	4b9e      	ldr	r3, [pc, #632]	@ (80039b0 <SystemGetsSignal+0x29c>)
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	2b02      	cmp	r3, #2
 800373c:	d102      	bne.n	8003744 <SystemGetsSignal+0x30>
    {
        pageCount = StatusItemCount;
 800373e:	2305      	movs	r3, #5
 8003740:	80fb      	strh	r3, [r7, #6]
 8003742:	e013      	b.n	800376c <SystemGetsSignal+0x58>
    }
    else if (currentPage == UI_PAGE_ABOUT)
 8003744:	4b9a      	ldr	r3, [pc, #616]	@ (80039b0 <SystemGetsSignal+0x29c>)
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	2b03      	cmp	r3, #3
 800374a:	d102      	bne.n	8003752 <SystemGetsSignal+0x3e>
    {
        pageCount = AboutItemCount;
 800374c:	2305      	movs	r3, #5
 800374e:	80fb      	strh	r3, [r7, #6]
 8003750:	e00c      	b.n	800376c <SystemGetsSignal+0x58>
    }
    else if (currentPage == UI_PAGE_TOOLS)
 8003752:	4b97      	ldr	r3, [pc, #604]	@ (80039b0 <SystemGetsSignal+0x29c>)
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	2b04      	cmp	r3, #4
 8003758:	d102      	bne.n	8003760 <SystemGetsSignal+0x4c>
    {
        pageCount = ToolsItemCount;
 800375a:	2305      	movs	r3, #5
 800375c:	80fb      	strh	r3, [r7, #6]
 800375e:	e005      	b.n	800376c <SystemGetsSignal+0x58>
    }
    else if (currentPage == UI_PAGE_GAMES)
 8003760:	4b93      	ldr	r3, [pc, #588]	@ (80039b0 <SystemGetsSignal+0x29c>)
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	2b05      	cmp	r3, #5
 8003766:	d101      	bne.n	800376c <SystemGetsSignal+0x58>
    {
        pageCount = GamesItemCount;
 8003768:	2303      	movs	r3, #3
 800376a:	80fb      	strh	r3, [r7, #6]
    }

    if (!cancelSelection)
 800376c:	4b91      	ldr	r3, [pc, #580]	@ (80039b4 <SystemGetsSignal+0x2a0>)
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	f083 0301 	eor.w	r3, r3, #1
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d039      	beq.n	80037ee <SystemGetsSignal+0xda>
    {
        if (count - preCount > 1)
 800377a:	4b8f      	ldr	r3, [pc, #572]	@ (80039b8 <SystemGetsSignal+0x2a4>)
 800377c:	881b      	ldrh	r3, [r3, #0]
 800377e:	461a      	mov	r2, r3
 8003780:	4b8e      	ldr	r3, [pc, #568]	@ (80039bc <SystemGetsSignal+0x2a8>)
 8003782:	881b      	ldrh	r3, [r3, #0]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b01      	cmp	r3, #1
 8003788:	dd14      	ble.n	80037b4 <SystemGetsSignal+0xa0>
        {
            if (menuSelection < pageCount)
 800378a:	4b8d      	ldr	r3, [pc, #564]	@ (80039c0 <SystemGetsSignal+0x2ac>)
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	461a      	mov	r2, r3
 8003790:	88fb      	ldrh	r3, [r7, #6]
 8003792:	4293      	cmp	r3, r2
 8003794:	d906      	bls.n	80037a4 <SystemGetsSignal+0x90>
            {
                menuSelection++;
 8003796:	4b8a      	ldr	r3, [pc, #552]	@ (80039c0 <SystemGetsSignal+0x2ac>)
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	3301      	adds	r3, #1
 800379c:	b2da      	uxtb	r2, r3
 800379e:	4b88      	ldr	r3, [pc, #544]	@ (80039c0 <SystemGetsSignal+0x2ac>)
 80037a0:	701a      	strb	r2, [r3, #0]
 80037a2:	e002      	b.n	80037aa <SystemGetsSignal+0x96>
            }
            else
            {
                menuSelection = 1;
 80037a4:	4b86      	ldr	r3, [pc, #536]	@ (80039c0 <SystemGetsSignal+0x2ac>)
 80037a6:	2201      	movs	r2, #1
 80037a8:	701a      	strb	r2, [r3, #0]
            }

            preCount = count;
 80037aa:	4b83      	ldr	r3, [pc, #524]	@ (80039b8 <SystemGetsSignal+0x2a4>)
 80037ac:	881a      	ldrh	r2, [r3, #0]
 80037ae:	4b83      	ldr	r3, [pc, #524]	@ (80039bc <SystemGetsSignal+0x2a8>)
 80037b0:	801a      	strh	r2, [r3, #0]
 80037b2:	e020      	b.n	80037f6 <SystemGetsSignal+0xe2>
        }
        else if (count - preCount < -1)
 80037b4:	4b80      	ldr	r3, [pc, #512]	@ (80039b8 <SystemGetsSignal+0x2a4>)
 80037b6:	881b      	ldrh	r3, [r3, #0]
 80037b8:	461a      	mov	r2, r3
 80037ba:	4b80      	ldr	r3, [pc, #512]	@ (80039bc <SystemGetsSignal+0x2a8>)
 80037bc:	881b      	ldrh	r3, [r3, #0]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c4:	da17      	bge.n	80037f6 <SystemGetsSignal+0xe2>
        {

            if (menuSelection > 1)
 80037c6:	4b7e      	ldr	r3, [pc, #504]	@ (80039c0 <SystemGetsSignal+0x2ac>)
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d906      	bls.n	80037dc <SystemGetsSignal+0xc8>
            {
                menuSelection--;
 80037ce:	4b7c      	ldr	r3, [pc, #496]	@ (80039c0 <SystemGetsSignal+0x2ac>)
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	3b01      	subs	r3, #1
 80037d4:	b2da      	uxtb	r2, r3
 80037d6:	4b7a      	ldr	r3, [pc, #488]	@ (80039c0 <SystemGetsSignal+0x2ac>)
 80037d8:	701a      	strb	r2, [r3, #0]
 80037da:	e003      	b.n	80037e4 <SystemGetsSignal+0xd0>
            }
            else
            {
                menuSelection = pageCount;
 80037dc:	88fb      	ldrh	r3, [r7, #6]
 80037de:	b2da      	uxtb	r2, r3
 80037e0:	4b77      	ldr	r3, [pc, #476]	@ (80039c0 <SystemGetsSignal+0x2ac>)
 80037e2:	701a      	strb	r2, [r3, #0]
            }

            preCount = count;
 80037e4:	4b74      	ldr	r3, [pc, #464]	@ (80039b8 <SystemGetsSignal+0x2a4>)
 80037e6:	881a      	ldrh	r2, [r3, #0]
 80037e8:	4b74      	ldr	r3, [pc, #464]	@ (80039bc <SystemGetsSignal+0x2a8>)
 80037ea:	801a      	strh	r2, [r3, #0]
 80037ec:	e003      	b.n	80037f6 <SystemGetsSignal+0xe2>
        }
    }
    else
        preCount = count;
 80037ee:	4b72      	ldr	r3, [pc, #456]	@ (80039b8 <SystemGetsSignal+0x2a4>)
 80037f0:	881a      	ldrh	r2, [r3, #0]
 80037f2:	4b72      	ldr	r3, [pc, #456]	@ (80039bc <SystemGetsSignal+0x2a8>)
 80037f4:	801a      	strh	r2, [r3, #0]

    if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET)
 80037f6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80037fa:	4872      	ldr	r0, [pc, #456]	@ (80039c4 <SystemGetsSignal+0x2b0>)
 80037fc:	f002 fc9a 	bl	8006134 <HAL_GPIO_ReadPin>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	f040 82f3 	bne.w	8003dee <SystemGetsSignal+0x6da>
    {
        HAL_Delay(50); // 防抖动延时
 8003808:	2032      	movs	r0, #50	@ 0x32
 800380a:	f002 f87d 	bl	8005908 <HAL_Delay>
        if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET && !gameOver)
 800380e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003812:	486c      	ldr	r0, [pc, #432]	@ (80039c4 <SystemGetsSignal+0x2b0>)
 8003814:	f002 fc8e 	bl	8006134 <HAL_GPIO_ReadPin>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	f040 82e7 	bne.w	8003dee <SystemGetsSignal+0x6da>
 8003820:	4b69      	ldr	r3, [pc, #420]	@ (80039c8 <SystemGetsSignal+0x2b4>)
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	f083 0301 	eor.w	r3, r3, #1
 8003828:	b2db      	uxtb	r3, r3
 800382a:	2b00      	cmp	r3, #0
 800382c:	f000 82df 	beq.w	8003dee <SystemGetsSignal+0x6da>
        {
            if (menuRank == 1 && menuSelection == 1)
 8003830:	4b66      	ldr	r3, [pc, #408]	@ (80039cc <SystemGetsSignal+0x2b8>)
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	2b01      	cmp	r3, #1
 8003836:	f040 80e7 	bne.w	8003a08 <SystemGetsSignal+0x2f4>
 800383a:	4b61      	ldr	r3, [pc, #388]	@ (80039c0 <SystemGetsSignal+0x2ac>)
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	2b01      	cmp	r3, #1
 8003840:	f040 80e2 	bne.w	8003a08 <SystemGetsSignal+0x2f4>
            {
                menuRank = 2;
 8003844:	4b61      	ldr	r3, [pc, #388]	@ (80039cc <SystemGetsSignal+0x2b8>)
 8003846:	2202      	movs	r2, #2
 8003848:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_GAMES;
 800384a:	4b59      	ldr	r3, [pc, #356]	@ (80039b0 <SystemGetsSignal+0x29c>)
 800384c:	2205      	movs	r2, #5
 800384e:	701a      	strb	r2, [r3, #0]
                OLED_DoTweenObject(&Menu_AnimationManager, "GamesButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (2 - menuSelection), 1000, EASE_IN_CIRC);
 8003850:	4b5b      	ldr	r3, [pc, #364]	@ (80039c0 <SystemGetsSignal+0x2ac>)
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	f1c3 0202 	rsb	r2, r3, #2
 8003858:	4613      	mov	r3, r2
 800385a:	005b      	lsls	r3, r3, #1
 800385c:	4413      	add	r3, r2
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	4413      	add	r3, r2
 8003862:	3303      	adds	r3, #3
 8003864:	4618      	mov	r0, r3
 8003866:	f7fc fd3d 	bl	80002e4 <__aeabi_i2f>
 800386a:	4603      	mov	r3, r0
 800386c:	220a      	movs	r2, #10
 800386e:	9201      	str	r2, [sp, #4]
 8003870:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003874:	9200      	str	r2, [sp, #0]
 8003876:	4a56      	ldr	r2, [pc, #344]	@ (80039d0 <SystemGetsSignal+0x2bc>)
 8003878:	4956      	ldr	r1, [pc, #344]	@ (80039d4 <SystemGetsSignal+0x2c0>)
 800387a:	4857      	ldr	r0, [pc, #348]	@ (80039d8 <SystemGetsSignal+0x2c4>)
 800387c:	f001 fbf2 	bl	8005064 <OLED_DoTweenObject>
                HAL_Delay(100);
 8003880:	2064      	movs	r0, #100	@ 0x64
 8003882:	f002 f841 	bl	8005908 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "ToolsButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (3 - menuSelection), 1000, EASE_IN_CIRC);
 8003886:	4b4e      	ldr	r3, [pc, #312]	@ (80039c0 <SystemGetsSignal+0x2ac>)
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	f1c3 0203 	rsb	r2, r3, #3
 800388e:	4613      	mov	r3, r2
 8003890:	005b      	lsls	r3, r3, #1
 8003892:	4413      	add	r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	4413      	add	r3, r2
 8003898:	3303      	adds	r3, #3
 800389a:	4618      	mov	r0, r3
 800389c:	f7fc fd22 	bl	80002e4 <__aeabi_i2f>
 80038a0:	4603      	mov	r3, r0
 80038a2:	220a      	movs	r2, #10
 80038a4:	9201      	str	r2, [sp, #4]
 80038a6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80038aa:	9200      	str	r2, [sp, #0]
 80038ac:	4a48      	ldr	r2, [pc, #288]	@ (80039d0 <SystemGetsSignal+0x2bc>)
 80038ae:	494b      	ldr	r1, [pc, #300]	@ (80039dc <SystemGetsSignal+0x2c8>)
 80038b0:	4849      	ldr	r0, [pc, #292]	@ (80039d8 <SystemGetsSignal+0x2c4>)
 80038b2:	f001 fbd7 	bl	8005064 <OLED_DoTweenObject>
                HAL_Delay(100);
 80038b6:	2064      	movs	r0, #100	@ 0x64
 80038b8:	f002 f826 	bl	8005908 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "StatusButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (4 - menuSelection), 1000, EASE_IN_CIRC);
 80038bc:	4b40      	ldr	r3, [pc, #256]	@ (80039c0 <SystemGetsSignal+0x2ac>)
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	f1c3 0204 	rsb	r2, r3, #4
 80038c4:	4613      	mov	r3, r2
 80038c6:	005b      	lsls	r3, r3, #1
 80038c8:	4413      	add	r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	4413      	add	r3, r2
 80038ce:	3303      	adds	r3, #3
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7fc fd07 	bl	80002e4 <__aeabi_i2f>
 80038d6:	4603      	mov	r3, r0
 80038d8:	220a      	movs	r2, #10
 80038da:	9201      	str	r2, [sp, #4]
 80038dc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80038e0:	9200      	str	r2, [sp, #0]
 80038e2:	4a3b      	ldr	r2, [pc, #236]	@ (80039d0 <SystemGetsSignal+0x2bc>)
 80038e4:	493e      	ldr	r1, [pc, #248]	@ (80039e0 <SystemGetsSignal+0x2cc>)
 80038e6:	483c      	ldr	r0, [pc, #240]	@ (80039d8 <SystemGetsSignal+0x2c4>)
 80038e8:	f001 fbbc 	bl	8005064 <OLED_DoTweenObject>
                HAL_Delay(100);
 80038ec:	2064      	movs	r0, #100	@ 0x64
 80038ee:	f002 f80b 	bl	8005908 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "SettingsButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (5 - menuSelection), 1000, EASE_IN_CIRC);
 80038f2:	4b33      	ldr	r3, [pc, #204]	@ (80039c0 <SystemGetsSignal+0x2ac>)
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	f1c3 0205 	rsb	r2, r3, #5
 80038fa:	4613      	mov	r3, r2
 80038fc:	005b      	lsls	r3, r3, #1
 80038fe:	4413      	add	r3, r2
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	4413      	add	r3, r2
 8003904:	3303      	adds	r3, #3
 8003906:	4618      	mov	r0, r3
 8003908:	f7fc fcec 	bl	80002e4 <__aeabi_i2f>
 800390c:	4603      	mov	r3, r0
 800390e:	220a      	movs	r2, #10
 8003910:	9201      	str	r2, [sp, #4]
 8003912:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003916:	9200      	str	r2, [sp, #0]
 8003918:	4a2d      	ldr	r2, [pc, #180]	@ (80039d0 <SystemGetsSignal+0x2bc>)
 800391a:	4932      	ldr	r1, [pc, #200]	@ (80039e4 <SystemGetsSignal+0x2d0>)
 800391c:	482e      	ldr	r0, [pc, #184]	@ (80039d8 <SystemGetsSignal+0x2c4>)
 800391e:	f001 fba1 	bl	8005064 <OLED_DoTweenObject>
                HAL_Delay(100);
 8003922:	2064      	movs	r0, #100	@ 0x64
 8003924:	f001 fff0 	bl	8005908 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "AboutButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (6 - menuSelection), 1000, EASE_IN_CIRC);
 8003928:	4b25      	ldr	r3, [pc, #148]	@ (80039c0 <SystemGetsSignal+0x2ac>)
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	f1c3 0206 	rsb	r2, r3, #6
 8003930:	4613      	mov	r3, r2
 8003932:	005b      	lsls	r3, r3, #1
 8003934:	4413      	add	r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	4413      	add	r3, r2
 800393a:	3303      	adds	r3, #3
 800393c:	4618      	mov	r0, r3
 800393e:	f7fc fcd1 	bl	80002e4 <__aeabi_i2f>
 8003942:	4603      	mov	r3, r0
 8003944:	220a      	movs	r2, #10
 8003946:	9201      	str	r2, [sp, #4]
 8003948:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800394c:	9200      	str	r2, [sp, #0]
 800394e:	4a20      	ldr	r2, [pc, #128]	@ (80039d0 <SystemGetsSignal+0x2bc>)
 8003950:	4925      	ldr	r1, [pc, #148]	@ (80039e8 <SystemGetsSignal+0x2d4>)
 8003952:	4821      	ldr	r0, [pc, #132]	@ (80039d8 <SystemGetsSignal+0x2c4>)
 8003954:	f001 fb86 	bl	8005064 <OLED_DoTweenObject>

                OLED_DoTweenObject(&Games_AnimationManager, "Snake", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1000, EASE_IN_CIRC);
 8003958:	230a      	movs	r3, #10
 800395a:	9301      	str	r3, [sp, #4]
 800395c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003960:	9300      	str	r3, [sp, #0]
 8003962:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8003966:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800396a:	4920      	ldr	r1, [pc, #128]	@ (80039ec <SystemGetsSignal+0x2d8>)
 800396c:	4820      	ldr	r0, [pc, #128]	@ (80039f0 <SystemGetsSignal+0x2dc>)
 800396e:	f001 fb79 	bl	8005064 <OLED_DoTweenObject>
                HAL_Delay(100);
 8003972:	2064      	movs	r0, #100	@ 0x64
 8003974:	f001 ffc8 	bl	8005908 <HAL_Delay>
                OLED_DoTweenObject(&Games_AnimationManager, "2048", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1000, EASE_IN_CIRC);
 8003978:	230a      	movs	r3, #10
 800397a:	9301      	str	r3, [sp, #4]
 800397c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003980:	9300      	str	r3, [sp, #0]
 8003982:	4b1c      	ldr	r3, [pc, #112]	@ (80039f4 <SystemGetsSignal+0x2e0>)
 8003984:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003988:	491b      	ldr	r1, [pc, #108]	@ (80039f8 <SystemGetsSignal+0x2e4>)
 800398a:	4819      	ldr	r0, [pc, #100]	@ (80039f0 <SystemGetsSignal+0x2dc>)
 800398c:	f001 fb6a 	bl	8005064 <OLED_DoTweenObject>
                HAL_Delay(100);
 8003990:	2064      	movs	r0, #100	@ 0x64
 8003992:	f001 ffb9 	bl	8005908 <HAL_Delay>
                OLED_DoTweenObject(&g_AnimationManager, "BackButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, 1000, EASE_IN_CIRC);
 8003996:	230a      	movs	r3, #10
 8003998:	9301      	str	r3, [sp, #4]
 800399a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800399e:	9300      	str	r3, [sp, #0]
 80039a0:	4b16      	ldr	r3, [pc, #88]	@ (80039fc <SystemGetsSignal+0x2e8>)
 80039a2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80039a6:	4916      	ldr	r1, [pc, #88]	@ (8003a00 <SystemGetsSignal+0x2ec>)
 80039a8:	4816      	ldr	r0, [pc, #88]	@ (8003a04 <SystemGetsSignal+0x2f0>)
 80039aa:	f001 fb5b 	bl	8005064 <OLED_DoTweenObject>
 80039ae:	e215      	b.n	8003ddc <SystemGetsSignal+0x6c8>
 80039b0:	20000b6d 	.word	0x20000b6d
 80039b4:	20000b6f 	.word	0x20000b6f
 80039b8:	20000358 	.word	0x20000358
 80039bc:	20000004 	.word	0x20000004
 80039c0:	20000002 	.word	0x20000002
 80039c4:	40010c00 	.word	0x40010c00
 80039c8:	20000236 	.word	0x20000236
 80039cc:	20000001 	.word	0x20000001
 80039d0:	c2b40000 	.word	0xc2b40000
 80039d4:	0800aaf0 	.word	0x0800aaf0
 80039d8:	20000f80 	.word	0x20000f80
 80039dc:	0800aafc 	.word	0x0800aafc
 80039e0:	0800ab08 	.word	0x0800ab08
 80039e4:	0800ab18 	.word	0x0800ab18
 80039e8:	0800ab28 	.word	0x0800ab28
 80039ec:	0800aab0 	.word	0x0800aab0
 80039f0:	20001574 	.word	0x20001574
 80039f4:	41e80000 	.word	0x41e80000
 80039f8:	0800aab8 	.word	0x0800aab8
 80039fc:	42280000 	.word	0x42280000
 8003a00:	0800aac0 	.word	0x0800aac0
 8003a04:	2000392c 	.word	0x2000392c
            }
            else if (menuRank == 2 && menuSelection == 3)
 8003a08:	4ba7      	ldr	r3, [pc, #668]	@ (8003ca8 <SystemGetsSignal+0x594>)
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d17e      	bne.n	8003b0e <SystemGetsSignal+0x3fa>
 8003a10:	4ba6      	ldr	r3, [pc, #664]	@ (8003cac <SystemGetsSignal+0x598>)
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	2b03      	cmp	r3, #3
 8003a16:	d17a      	bne.n	8003b0e <SystemGetsSignal+0x3fa>
            {
                menuRank = 1;
 8003a18:	4ba3      	ldr	r3, [pc, #652]	@ (8003ca8 <SystemGetsSignal+0x594>)
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	701a      	strb	r2, [r3, #0]
                menuSelection = 1;
 8003a1e:	4ba3      	ldr	r3, [pc, #652]	@ (8003cac <SystemGetsSignal+0x598>)
 8003a20:	2201      	movs	r2, #1
 8003a22:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_MENU;
 8003a24:	4ba2      	ldr	r3, [pc, #648]	@ (8003cb0 <SystemGetsSignal+0x59c>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	701a      	strb	r2, [r3, #0]
                OLED_DoTweenObject(&Games_AnimationManager, "Snake", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * -1, 1000, EASE_IN_CIRC);
 8003a2a:	230a      	movs	r3, #10
 8003a2c:	9301      	str	r3, [sp, #4]
 8003a2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003a32:	9300      	str	r3, [sp, #0]
 8003a34:	4b9f      	ldr	r3, [pc, #636]	@ (8003cb4 <SystemGetsSignal+0x5a0>)
 8003a36:	4aa0      	ldr	r2, [pc, #640]	@ (8003cb8 <SystemGetsSignal+0x5a4>)
 8003a38:	49a0      	ldr	r1, [pc, #640]	@ (8003cbc <SystemGetsSignal+0x5a8>)
 8003a3a:	48a1      	ldr	r0, [pc, #644]	@ (8003cc0 <SystemGetsSignal+0x5ac>)
 8003a3c:	f001 fb12 	bl	8005064 <OLED_DoTweenObject>
                HAL_Delay(100);
 8003a40:	2064      	movs	r0, #100	@ 0x64
 8003a42:	f001 ff61 	bl	8005908 <HAL_Delay>
                OLED_DoTweenObject(&Games_AnimationManager, "2048", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 0, 1000, EASE_IN_CIRC);
 8003a46:	230a      	movs	r3, #10
 8003a48:	9301      	str	r3, [sp, #4]
 8003a4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003a4e:	9300      	str	r3, [sp, #0]
 8003a50:	4b9c      	ldr	r3, [pc, #624]	@ (8003cc4 <SystemGetsSignal+0x5b0>)
 8003a52:	4a99      	ldr	r2, [pc, #612]	@ (8003cb8 <SystemGetsSignal+0x5a4>)
 8003a54:	499c      	ldr	r1, [pc, #624]	@ (8003cc8 <SystemGetsSignal+0x5b4>)
 8003a56:	489a      	ldr	r0, [pc, #616]	@ (8003cc0 <SystemGetsSignal+0x5ac>)
 8003a58:	f001 fb04 	bl	8005064 <OLED_DoTweenObject>
                HAL_Delay(100);
 8003a5c:	2064      	movs	r0, #100	@ 0x64
 8003a5e:	f001 ff53 	bl	8005908 <HAL_Delay>
                OLED_DoTweenObject(&g_AnimationManager, "BackButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1000, EASE_IN_CIRC);
 8003a62:	230a      	movs	r3, #10
 8003a64:	9301      	str	r3, [sp, #4]
 8003a66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003a6a:	9300      	str	r3, [sp, #0]
 8003a6c:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8003a70:	4a91      	ldr	r2, [pc, #580]	@ (8003cb8 <SystemGetsSignal+0x5a4>)
 8003a72:	4996      	ldr	r1, [pc, #600]	@ (8003ccc <SystemGetsSignal+0x5b8>)
 8003a74:	4896      	ldr	r0, [pc, #600]	@ (8003cd0 <SystemGetsSignal+0x5bc>)
 8003a76:	f001 faf5 	bl	8005064 <OLED_DoTweenObject>

                OLED_DoTweenObject(&Menu_AnimationManager, "GamesButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1000, EASE_IN_CIRC);
 8003a7a:	230a      	movs	r3, #10
 8003a7c:	9301      	str	r3, [sp, #4]
 8003a7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003a82:	9300      	str	r3, [sp, #0]
 8003a84:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8003a88:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003a8c:	4991      	ldr	r1, [pc, #580]	@ (8003cd4 <SystemGetsSignal+0x5c0>)
 8003a8e:	4892      	ldr	r0, [pc, #584]	@ (8003cd8 <SystemGetsSignal+0x5c4>)
 8003a90:	f001 fae8 	bl	8005064 <OLED_DoTweenObject>
                HAL_Delay(100);
 8003a94:	2064      	movs	r0, #100	@ 0x64
 8003a96:	f001 ff37 	bl	8005908 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "ToolsButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1000, EASE_IN_CIRC);
 8003a9a:	230a      	movs	r3, #10
 8003a9c:	9301      	str	r3, [sp, #4]
 8003a9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003aa2:	9300      	str	r3, [sp, #0]
 8003aa4:	4b8d      	ldr	r3, [pc, #564]	@ (8003cdc <SystemGetsSignal+0x5c8>)
 8003aa6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003aaa:	498d      	ldr	r1, [pc, #564]	@ (8003ce0 <SystemGetsSignal+0x5cc>)
 8003aac:	488a      	ldr	r0, [pc, #552]	@ (8003cd8 <SystemGetsSignal+0x5c4>)
 8003aae:	f001 fad9 	bl	8005064 <OLED_DoTweenObject>
                HAL_Delay(100);
 8003ab2:	2064      	movs	r0, #100	@ 0x64
 8003ab4:	f001 ff28 	bl	8005908 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "StatusButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, 1000, EASE_IN_CIRC);
 8003ab8:	230a      	movs	r3, #10
 8003aba:	9301      	str	r3, [sp, #4]
 8003abc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003ac0:	9300      	str	r3, [sp, #0]
 8003ac2:	4b88      	ldr	r3, [pc, #544]	@ (8003ce4 <SystemGetsSignal+0x5d0>)
 8003ac4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003ac8:	4987      	ldr	r1, [pc, #540]	@ (8003ce8 <SystemGetsSignal+0x5d4>)
 8003aca:	4883      	ldr	r0, [pc, #524]	@ (8003cd8 <SystemGetsSignal+0x5c4>)
 8003acc:	f001 faca 	bl	8005064 <OLED_DoTweenObject>
                HAL_Delay(100);
 8003ad0:	2064      	movs	r0, #100	@ 0x64
 8003ad2:	f001 ff19 	bl	8005908 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "SettingsButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 4, 1000, EASE_IN_CIRC);
 8003ad6:	230a      	movs	r3, #10
 8003ad8:	9301      	str	r3, [sp, #4]
 8003ada:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003ade:	9300      	str	r3, [sp, #0]
 8003ae0:	4b82      	ldr	r3, [pc, #520]	@ (8003cec <SystemGetsSignal+0x5d8>)
 8003ae2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003ae6:	4982      	ldr	r1, [pc, #520]	@ (8003cf0 <SystemGetsSignal+0x5dc>)
 8003ae8:	487b      	ldr	r0, [pc, #492]	@ (8003cd8 <SystemGetsSignal+0x5c4>)
 8003aea:	f001 fabb 	bl	8005064 <OLED_DoTweenObject>
                HAL_Delay(100);
 8003aee:	2064      	movs	r0, #100	@ 0x64
 8003af0:	f001 ff0a 	bl	8005908 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "AboutButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 5, 1000, EASE_IN_CIRC);
 8003af4:	230a      	movs	r3, #10
 8003af6:	9301      	str	r3, [sp, #4]
 8003af8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003afc:	9300      	str	r3, [sp, #0]
 8003afe:	4b7d      	ldr	r3, [pc, #500]	@ (8003cf4 <SystemGetsSignal+0x5e0>)
 8003b00:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003b04:	497c      	ldr	r1, [pc, #496]	@ (8003cf8 <SystemGetsSignal+0x5e4>)
 8003b06:	4874      	ldr	r0, [pc, #464]	@ (8003cd8 <SystemGetsSignal+0x5c4>)
 8003b08:	f001 faac 	bl	8005064 <OLED_DoTweenObject>
 8003b0c:	e166      	b.n	8003ddc <SystemGetsSignal+0x6c8>
            }
            else if (menuRank == 2 && menuSelection == 1)
 8003b0e:	4b66      	ldr	r3, [pc, #408]	@ (8003ca8 <SystemGetsSignal+0x594>)
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d158      	bne.n	8003bc8 <SystemGetsSignal+0x4b4>
 8003b16:	4b65      	ldr	r3, [pc, #404]	@ (8003cac <SystemGetsSignal+0x598>)
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d154      	bne.n	8003bc8 <SystemGetsSignal+0x4b4>
            {
                menuRank = 3;
 8003b1e:	4b62      	ldr	r3, [pc, #392]	@ (8003ca8 <SystemGetsSignal+0x594>)
 8003b20:	2203      	movs	r2, #3
 8003b22:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_GAMES;
 8003b24:	4b62      	ldr	r3, [pc, #392]	@ (8003cb0 <SystemGetsSignal+0x59c>)
 8003b26:	2205      	movs	r2, #5
 8003b28:	701a      	strb	r2, [r3, #0]
                Snake_InitGame();
 8003b2a:	f7fc fee3 	bl	80008f4 <Snake_InitGame>
                OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSnake", (OLED_WIDTH - strlen("Greedy Snake") * 6), OLED_TITLE_Start_Y, 1, EASE_IN_CUBIC);
 8003b2e:	2304      	movs	r3, #4
 8003b30:	9301      	str	r3, [sp, #4]
 8003b32:	2301      	movs	r3, #1
 8003b34:	9300      	str	r3, [sp, #0]
 8003b36:	4b5f      	ldr	r3, [pc, #380]	@ (8003cb4 <SystemGetsSignal+0x5a0>)
 8003b38:	4a70      	ldr	r2, [pc, #448]	@ (8003cfc <SystemGetsSignal+0x5e8>)
 8003b3a:	4971      	ldr	r1, [pc, #452]	@ (8003d00 <SystemGetsSignal+0x5ec>)
 8003b3c:	4871      	ldr	r0, [pc, #452]	@ (8003d04 <SystemGetsSignal+0x5f0>)
 8003b3e:	f001 fa91 	bl	8005064 <OLED_DoTweenObject>
                OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", 0, 8, 1000, EASE_IN_CUBIC);
 8003b42:	2304      	movs	r3, #4
 8003b44:	9301      	str	r3, [sp, #4]
 8003b46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b4a:	9300      	str	r3, [sp, #0]
 8003b4c:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8003b50:	f04f 0200 	mov.w	r2, #0
 8003b54:	496c      	ldr	r1, [pc, #432]	@ (8003d08 <SystemGetsSignal+0x5f4>)
 8003b56:	485e      	ldr	r0, [pc, #376]	@ (8003cd0 <SystemGetsSignal+0x5bc>)
 8003b58:	f001 fa84 	bl	8005064 <OLED_DoTweenObject>
                OLED_DoTweenObject(&g_AnimationManager, "CursorScale", 0, 8, 1000, EASE_INOUT_CIRC);
 8003b5c:	230c      	movs	r3, #12
 8003b5e:	9301      	str	r3, [sp, #4]
 8003b60:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b64:	9300      	str	r3, [sp, #0]
 8003b66:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8003b6a:	f04f 0200 	mov.w	r2, #0
 8003b6e:	4967      	ldr	r1, [pc, #412]	@ (8003d0c <SystemGetsSignal+0x5f8>)
 8003b70:	4857      	ldr	r0, [pc, #348]	@ (8003cd0 <SystemGetsSignal+0x5bc>)
 8003b72:	f001 fa77 	bl	8005064 <OLED_DoTweenObject>
                OLED_DoTweenObject(&Games_AnimationManager, "Snake", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1000, EASE_IN_CIRC);
 8003b76:	230a      	movs	r3, #10
 8003b78:	9301      	str	r3, [sp, #4]
 8003b7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b7e:	9300      	str	r3, [sp, #0]
 8003b80:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8003b84:	4a4c      	ldr	r2, [pc, #304]	@ (8003cb8 <SystemGetsSignal+0x5a4>)
 8003b86:	494d      	ldr	r1, [pc, #308]	@ (8003cbc <SystemGetsSignal+0x5a8>)
 8003b88:	484d      	ldr	r0, [pc, #308]	@ (8003cc0 <SystemGetsSignal+0x5ac>)
 8003b8a:	f001 fa6b 	bl	8005064 <OLED_DoTweenObject>
                HAL_Delay(100);
 8003b8e:	2064      	movs	r0, #100	@ 0x64
 8003b90:	f001 feba 	bl	8005908 <HAL_Delay>
                OLED_DoTweenObject(&Games_AnimationManager, "2048", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1000, EASE_IN_CIRC);
 8003b94:	230a      	movs	r3, #10
 8003b96:	9301      	str	r3, [sp, #4]
 8003b98:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b9c:	9300      	str	r3, [sp, #0]
 8003b9e:	4b4f      	ldr	r3, [pc, #316]	@ (8003cdc <SystemGetsSignal+0x5c8>)
 8003ba0:	4a45      	ldr	r2, [pc, #276]	@ (8003cb8 <SystemGetsSignal+0x5a4>)
 8003ba2:	4949      	ldr	r1, [pc, #292]	@ (8003cc8 <SystemGetsSignal+0x5b4>)
 8003ba4:	4846      	ldr	r0, [pc, #280]	@ (8003cc0 <SystemGetsSignal+0x5ac>)
 8003ba6:	f001 fa5d 	bl	8005064 <OLED_DoTweenObject>
                HAL_Delay(100);
 8003baa:	2064      	movs	r0, #100	@ 0x64
 8003bac:	f001 feac 	bl	8005908 <HAL_Delay>
                OLED_DoTweenObject(&g_AnimationManager, "BackButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, 1000, EASE_IN_CIRC);
 8003bb0:	230a      	movs	r3, #10
 8003bb2:	9301      	str	r3, [sp, #4]
 8003bb4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003bb8:	9300      	str	r3, [sp, #0]
 8003bba:	4b4a      	ldr	r3, [pc, #296]	@ (8003ce4 <SystemGetsSignal+0x5d0>)
 8003bbc:	4a3e      	ldr	r2, [pc, #248]	@ (8003cb8 <SystemGetsSignal+0x5a4>)
 8003bbe:	4943      	ldr	r1, [pc, #268]	@ (8003ccc <SystemGetsSignal+0x5b8>)
 8003bc0:	4843      	ldr	r0, [pc, #268]	@ (8003cd0 <SystemGetsSignal+0x5bc>)
 8003bc2:	f001 fa4f 	bl	8005064 <OLED_DoTweenObject>
 8003bc6:	e109      	b.n	8003ddc <SystemGetsSignal+0x6c8>
            }
            else if (menuRank == 3 && menuSelection == 1 && cancelSelection && UI_PAGE_GAMES && !gameOver)
 8003bc8:	4b37      	ldr	r3, [pc, #220]	@ (8003ca8 <SystemGetsSignal+0x594>)
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	2b03      	cmp	r3, #3
 8003bce:	f040 80a9 	bne.w	8003d24 <SystemGetsSignal+0x610>
 8003bd2:	4b36      	ldr	r3, [pc, #216]	@ (8003cac <SystemGetsSignal+0x598>)
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	f040 80a4 	bne.w	8003d24 <SystemGetsSignal+0x610>
 8003bdc:	4b4c      	ldr	r3, [pc, #304]	@ (8003d10 <SystemGetsSignal+0x5fc>)
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	f000 809f 	beq.w	8003d24 <SystemGetsSignal+0x610>
 8003be6:	4b4b      	ldr	r3, [pc, #300]	@ (8003d14 <SystemGetsSignal+0x600>)
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	f083 0301 	eor.w	r3, r3, #1
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	f000 8097 	beq.w	8003d24 <SystemGetsSignal+0x610>
            {
                menuRank = 2;
 8003bf6:	4b2c      	ldr	r3, [pc, #176]	@ (8003ca8 <SystemGetsSignal+0x594>)
 8003bf8:	2202      	movs	r2, #2
 8003bfa:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_GAMES;
 8003bfc:	4b2c      	ldr	r3, [pc, #176]	@ (8003cb0 <SystemGetsSignal+0x59c>)
 8003bfe:	2205      	movs	r2, #5
 8003c00:	701a      	strb	r2, [r3, #0]
                
                OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSnake", (OLED_WIDTH - strlen("Greedy Snake") * 6), OLED_TITLE_End_Y, 1000, EASE_IN_CUBIC);
 8003c02:	2304      	movs	r3, #4
 8003c04:	9301      	str	r3, [sp, #4]
 8003c06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003c0a:	9300      	str	r3, [sp, #0]
 8003c0c:	f04f 0300 	mov.w	r3, #0
 8003c10:	4a3a      	ldr	r2, [pc, #232]	@ (8003cfc <SystemGetsSignal+0x5e8>)
 8003c12:	493b      	ldr	r1, [pc, #236]	@ (8003d00 <SystemGetsSignal+0x5ec>)
 8003c14:	483b      	ldr	r0, [pc, #236]	@ (8003d04 <SystemGetsSignal+0x5f0>)
 8003c16:	f001 fa25 	bl	8005064 <OLED_DoTweenObject>
                OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Greedy Snake") * 6 + 3, 8, 1000, EASE_IN_CUBIC);
 8003c1a:	2304      	movs	r3, #4
 8003c1c:	9301      	str	r3, [sp, #4]
 8003c1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003c22:	9300      	str	r3, [sp, #0]
 8003c24:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8003c28:	4a3b      	ldr	r2, [pc, #236]	@ (8003d18 <SystemGetsSignal+0x604>)
 8003c2a:	4937      	ldr	r1, [pc, #220]	@ (8003d08 <SystemGetsSignal+0x5f4>)
 8003c2c:	4828      	ldr	r0, [pc, #160]	@ (8003cd0 <SystemGetsSignal+0x5bc>)
 8003c2e:	f001 fa19 	bl	8005064 <OLED_DoTweenObject>
                OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Snake") * 6 + 3, 10, 1000, EASE_INOUT_CIRC);
 8003c32:	230c      	movs	r3, #12
 8003c34:	9301      	str	r3, [sp, #4]
 8003c36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003c3a:	9300      	str	r3, [sp, #0]
 8003c3c:	4b37      	ldr	r3, [pc, #220]	@ (8003d1c <SystemGetsSignal+0x608>)
 8003c3e:	4a38      	ldr	r2, [pc, #224]	@ (8003d20 <SystemGetsSignal+0x60c>)
 8003c40:	4932      	ldr	r1, [pc, #200]	@ (8003d0c <SystemGetsSignal+0x5f8>)
 8003c42:	4823      	ldr	r0, [pc, #140]	@ (8003cd0 <SystemGetsSignal+0x5bc>)
 8003c44:	f001 fa0e 	bl	8005064 <OLED_DoTweenObject>
                OLED_DoTweenObject(&Games_AnimationManager, "Snake", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1000, EASE_IN_CIRC);
 8003c48:	230a      	movs	r3, #10
 8003c4a:	9301      	str	r3, [sp, #4]
 8003c4c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003c50:	9300      	str	r3, [sp, #0]
 8003c52:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8003c56:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003c5a:	4918      	ldr	r1, [pc, #96]	@ (8003cbc <SystemGetsSignal+0x5a8>)
 8003c5c:	4818      	ldr	r0, [pc, #96]	@ (8003cc0 <SystemGetsSignal+0x5ac>)
 8003c5e:	f001 fa01 	bl	8005064 <OLED_DoTweenObject>
                HAL_Delay(100);
 8003c62:	2064      	movs	r0, #100	@ 0x64
 8003c64:	f001 fe50 	bl	8005908 <HAL_Delay>
                OLED_DoTweenObject(&Games_AnimationManager, "2048", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1000, EASE_IN_CIRC);
 8003c68:	230a      	movs	r3, #10
 8003c6a:	9301      	str	r3, [sp, #4]
 8003c6c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003c70:	9300      	str	r3, [sp, #0]
 8003c72:	4b1a      	ldr	r3, [pc, #104]	@ (8003cdc <SystemGetsSignal+0x5c8>)
 8003c74:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003c78:	4913      	ldr	r1, [pc, #76]	@ (8003cc8 <SystemGetsSignal+0x5b4>)
 8003c7a:	4811      	ldr	r0, [pc, #68]	@ (8003cc0 <SystemGetsSignal+0x5ac>)
 8003c7c:	f001 f9f2 	bl	8005064 <OLED_DoTweenObject>
                HAL_Delay(100);
 8003c80:	2064      	movs	r0, #100	@ 0x64
 8003c82:	f001 fe41 	bl	8005908 <HAL_Delay>
                OLED_DoTweenObject(&g_AnimationManager, "BackButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, 1000, EASE_IN_CIRC);
 8003c86:	230a      	movs	r3, #10
 8003c88:	9301      	str	r3, [sp, #4]
 8003c8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003c8e:	9300      	str	r3, [sp, #0]
 8003c90:	4b14      	ldr	r3, [pc, #80]	@ (8003ce4 <SystemGetsSignal+0x5d0>)
 8003c92:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003c96:	490d      	ldr	r1, [pc, #52]	@ (8003ccc <SystemGetsSignal+0x5b8>)
 8003c98:	480d      	ldr	r0, [pc, #52]	@ (8003cd0 <SystemGetsSignal+0x5bc>)
 8003c9a:	f001 f9e3 	bl	8005064 <OLED_DoTweenObject>
                cancelSelection = false;
 8003c9e:	4b1c      	ldr	r3, [pc, #112]	@ (8003d10 <SystemGetsSignal+0x5fc>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	701a      	strb	r2, [r3, #0]
 8003ca4:	e09a      	b.n	8003ddc <SystemGetsSignal+0x6c8>
 8003ca6:	bf00      	nop
 8003ca8:	20000001 	.word	0x20000001
 8003cac:	20000002 	.word	0x20000002
 8003cb0:	20000b6d 	.word	0x20000b6d
 8003cb4:	c1200000 	.word	0xc1200000
 8003cb8:	c2b40000 	.word	0xc2b40000
 8003cbc:	0800aab0 	.word	0x0800aab0
 8003cc0:	20001574 	.word	0x20001574
 8003cc4:	40400000 	.word	0x40400000
 8003cc8:	0800aab8 	.word	0x0800aab8
 8003ccc:	0800aac0 	.word	0x0800aac0
 8003cd0:	2000392c 	.word	0x2000392c
 8003cd4:	0800aaf0 	.word	0x0800aaf0
 8003cd8:	20000f80 	.word	0x20000f80
 8003cdc:	41e80000 	.word	0x41e80000
 8003ce0:	0800aafc 	.word	0x0800aafc
 8003ce4:	42280000 	.word	0x42280000
 8003ce8:	0800ab08 	.word	0x0800ab08
 8003cec:	425c0000 	.word	0x425c0000
 8003cf0:	0800ab18 	.word	0x0800ab18
 8003cf4:	42880000 	.word	0x42880000
 8003cf8:	0800ab28 	.word	0x0800ab28
 8003cfc:	42600000 	.word	0x42600000
 8003d00:	0800aa8c 	.word	0x0800aa8c
 8003d04:	20003338 	.word	0x20003338
 8003d08:	0800aacc 	.word	0x0800aacc
 8003d0c:	0800aae4 	.word	0x0800aae4
 8003d10:	20000b6f 	.word	0x20000b6f
 8003d14:	20000236 	.word	0x20000236
 8003d18:	42960000 	.word	0x42960000
 8003d1c:	41200000 	.word	0x41200000
 8003d20:	42040000 	.word	0x42040000
            }
            else if (menuRank == 2 && menuSelection == 2)
 8003d24:	4b34      	ldr	r3, [pc, #208]	@ (8003df8 <SystemGetsSignal+0x6e4>)
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d157      	bne.n	8003ddc <SystemGetsSignal+0x6c8>
 8003d2c:	4b33      	ldr	r3, [pc, #204]	@ (8003dfc <SystemGetsSignal+0x6e8>)
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d153      	bne.n	8003ddc <SystemGetsSignal+0x6c8>
            {
                menuRank = 3;
 8003d34:	4b30      	ldr	r3, [pc, #192]	@ (8003df8 <SystemGetsSignal+0x6e4>)
 8003d36:	2203      	movs	r2, #3
 8003d38:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_GAMES;
 8003d3a:	4b31      	ldr	r3, [pc, #196]	@ (8003e00 <SystemGetsSignal+0x6ec>)
 8003d3c:	2205      	movs	r2, #5
 8003d3e:	701a      	strb	r2, [r3, #0]
                Game2048_Init();
 8003d40:	f7fd f8d0 	bl	8000ee4 <Game2048_Init>
                OLED_DoTweenObject(&g_Title_AnimationManager, "Title2048", (OLED_WIDTH - strlen("Here is 2048!") * 6), OLED_TITLE_Start_Y, 1, EASE_IN_CUBIC);
 8003d44:	2304      	movs	r3, #4
 8003d46:	9301      	str	r3, [sp, #4]
 8003d48:	2301      	movs	r3, #1
 8003d4a:	9300      	str	r3, [sp, #0]
 8003d4c:	4b2d      	ldr	r3, [pc, #180]	@ (8003e04 <SystemGetsSignal+0x6f0>)
 8003d4e:	4a2e      	ldr	r2, [pc, #184]	@ (8003e08 <SystemGetsSignal+0x6f4>)
 8003d50:	492e      	ldr	r1, [pc, #184]	@ (8003e0c <SystemGetsSignal+0x6f8>)
 8003d52:	482f      	ldr	r0, [pc, #188]	@ (8003e10 <SystemGetsSignal+0x6fc>)
 8003d54:	f001 f986 	bl	8005064 <OLED_DoTweenObject>
                OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", 0, 8, 1000, EASE_IN_CUBIC);
 8003d58:	2304      	movs	r3, #4
 8003d5a:	9301      	str	r3, [sp, #4]
 8003d5c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003d60:	9300      	str	r3, [sp, #0]
 8003d62:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8003d66:	f04f 0200 	mov.w	r2, #0
 8003d6a:	492a      	ldr	r1, [pc, #168]	@ (8003e14 <SystemGetsSignal+0x700>)
 8003d6c:	482a      	ldr	r0, [pc, #168]	@ (8003e18 <SystemGetsSignal+0x704>)
 8003d6e:	f001 f979 	bl	8005064 <OLED_DoTweenObject>
                OLED_DoTweenObject(&g_AnimationManager, "CursorScale", 0, 8, 1000, EASE_INOUT_CIRC);
 8003d72:	230c      	movs	r3, #12
 8003d74:	9301      	str	r3, [sp, #4]
 8003d76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003d7a:	9300      	str	r3, [sp, #0]
 8003d7c:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8003d80:	f04f 0200 	mov.w	r2, #0
 8003d84:	4925      	ldr	r1, [pc, #148]	@ (8003e1c <SystemGetsSignal+0x708>)
 8003d86:	4824      	ldr	r0, [pc, #144]	@ (8003e18 <SystemGetsSignal+0x704>)
 8003d88:	f001 f96c 	bl	8005064 <OLED_DoTweenObject>
                OLED_DoTweenObject(&Games_AnimationManager, "Snake", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1000, EASE_IN_CIRC);
 8003d8c:	230a      	movs	r3, #10
 8003d8e:	9301      	str	r3, [sp, #4]
 8003d90:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003d94:	9300      	str	r3, [sp, #0]
 8003d96:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8003d9a:	4a21      	ldr	r2, [pc, #132]	@ (8003e20 <SystemGetsSignal+0x70c>)
 8003d9c:	4921      	ldr	r1, [pc, #132]	@ (8003e24 <SystemGetsSignal+0x710>)
 8003d9e:	4822      	ldr	r0, [pc, #136]	@ (8003e28 <SystemGetsSignal+0x714>)
 8003da0:	f001 f960 	bl	8005064 <OLED_DoTweenObject>
                HAL_Delay(100);
 8003da4:	2064      	movs	r0, #100	@ 0x64
 8003da6:	f001 fdaf 	bl	8005908 <HAL_Delay>
                OLED_DoTweenObject(&Games_AnimationManager, "2048", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1000, EASE_IN_CIRC);
 8003daa:	230a      	movs	r3, #10
 8003dac:	9301      	str	r3, [sp, #4]
 8003dae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003db2:	9300      	str	r3, [sp, #0]
 8003db4:	4b1d      	ldr	r3, [pc, #116]	@ (8003e2c <SystemGetsSignal+0x718>)
 8003db6:	4a1a      	ldr	r2, [pc, #104]	@ (8003e20 <SystemGetsSignal+0x70c>)
 8003db8:	491d      	ldr	r1, [pc, #116]	@ (8003e30 <SystemGetsSignal+0x71c>)
 8003dba:	481b      	ldr	r0, [pc, #108]	@ (8003e28 <SystemGetsSignal+0x714>)
 8003dbc:	f001 f952 	bl	8005064 <OLED_DoTweenObject>
                HAL_Delay(100);
 8003dc0:	2064      	movs	r0, #100	@ 0x64
 8003dc2:	f001 fda1 	bl	8005908 <HAL_Delay>
                OLED_DoTweenObject(&g_AnimationManager, "BackButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, 1000, EASE_IN_CIRC);
 8003dc6:	230a      	movs	r3, #10
 8003dc8:	9301      	str	r3, [sp, #4]
 8003dca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003dce:	9300      	str	r3, [sp, #0]
 8003dd0:	4b18      	ldr	r3, [pc, #96]	@ (8003e34 <SystemGetsSignal+0x720>)
 8003dd2:	4a13      	ldr	r2, [pc, #76]	@ (8003e20 <SystemGetsSignal+0x70c>)
 8003dd4:	4918      	ldr	r1, [pc, #96]	@ (8003e38 <SystemGetsSignal+0x724>)
 8003dd6:	4810      	ldr	r0, [pc, #64]	@ (8003e18 <SystemGetsSignal+0x704>)
 8003dd8:	f001 f944 	bl	8005064 <OLED_DoTweenObject>
            //     OLED_DoTweenObject(&g_AnimationManager, "BackButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1000, EASE_IN_CIRC);
            //     cancelSelection = false;
            // }


            while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET)
 8003ddc:	bf00      	nop
 8003dde:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003de2:	4816      	ldr	r0, [pc, #88]	@ (8003e3c <SystemGetsSignal+0x728>)
 8003de4:	f002 f9a6 	bl	8006134 <HAL_GPIO_ReadPin>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d0f7      	beq.n	8003dde <SystemGetsSignal+0x6ca>
            {
                // 等待按钮释放
            }
        }
    }
}
 8003dee:	bf00      	nop
 8003df0:	3708      	adds	r7, #8
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	20000001 	.word	0x20000001
 8003dfc:	20000002 	.word	0x20000002
 8003e00:	20000b6d 	.word	0x20000b6d
 8003e04:	c1200000 	.word	0xc1200000
 8003e08:	42480000 	.word	0x42480000
 8003e0c:	0800aa98 	.word	0x0800aa98
 8003e10:	20003338 	.word	0x20003338
 8003e14:	0800aacc 	.word	0x0800aacc
 8003e18:	2000392c 	.word	0x2000392c
 8003e1c:	0800aae4 	.word	0x0800aae4
 8003e20:	c2b40000 	.word	0xc2b40000
 8003e24:	0800aab0 	.word	0x0800aab0
 8003e28:	20001574 	.word	0x20001574
 8003e2c:	41e80000 	.word	0x41e80000
 8003e30:	0800aab8 	.word	0x0800aab8
 8003e34:	42280000 	.word	0x42280000
 8003e38:	0800aac0 	.word	0x0800aac0
 8003e3c:	40010c00 	.word	0x40010c00

08003e40 <OLED_EnableDiffMode>:
    }
}

// 启用差分更新模式
void OLED_EnableDiffMode(uint8_t enable)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	4603      	mov	r3, r0
 8003e48:	71fb      	strb	r3, [r7, #7]
    diff_mode_enabled = enable;
 8003e4a:	4a09      	ldr	r2, [pc, #36]	@ (8003e70 <OLED_EnableDiffMode+0x30>)
 8003e4c:	79fb      	ldrb	r3, [r7, #7]
 8003e4e:	7013      	strb	r3, [r2, #0]
    if (enable)
 8003e50:	79fb      	ldrb	r3, [r7, #7]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d008      	beq.n	8003e68 <OLED_EnableDiffMode+0x28>
    {
        memcpy(OLED_PrevBuffer, OLED_BackBuffer, OLED_WIDTH * OLED_PAGES);
 8003e56:	4a07      	ldr	r2, [pc, #28]	@ (8003e74 <OLED_EnableDiffMode+0x34>)
 8003e58:	4b07      	ldr	r3, [pc, #28]	@ (8003e78 <OLED_EnableDiffMode+0x38>)
 8003e5a:	4610      	mov	r0, r2
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e62:	461a      	mov	r2, r3
 8003e64:	f004 fb85 	bl	8008572 <memcpy>
    }
}
 8003e68:	bf00      	nop
 8003e6a:	3708      	adds	r7, #8
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	20000f70 	.word	0x20000f70
 8003e74:	20000b70 	.word	0x20000b70
 8003e78:	2000036c 	.word	0x2000036c

08003e7c <OLED_EnableFastUpdate>:

// 设置快速更新模式
void OLED_EnableFastUpdate(uint8_t enable)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	4603      	mov	r3, r0
 8003e84:	71fb      	strb	r3, [r7, #7]
    fast_update_enabled = enable;
 8003e86:	4a04      	ldr	r2, [pc, #16]	@ (8003e98 <OLED_EnableFastUpdate+0x1c>)
 8003e88:	79fb      	ldrb	r3, [r7, #7]
 8003e8a:	7013      	strb	r3, [r2, #0]
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bc80      	pop	{r7}
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	20000006 	.word	0x20000006

08003e9c <OLED_SmartUpdate>:

// 智能更新显示
// 选择性更新脏页，以提高帧率
void OLED_SmartUpdate(void)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
    // 如果OLED/DMA忙，直接返回
    if (OLED_IsBusy())
 8003ea2:	f7fd feeb 	bl	8001c7c <OLED_IsBusy>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	f040 8082 	bne.w	8003fb2 <OLED_SmartUpdate+0x116>
    {
        return;
    }

    // 检查是否有脏页需要更新
    uint8_t has_dirty = 0;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	73fb      	strb	r3, [r7, #15]
    uint8_t first_dirty = 255;
 8003eb2:	23ff      	movs	r3, #255	@ 0xff
 8003eb4:	73bb      	strb	r3, [r7, #14]
    uint8_t last_dirty = 0;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	737b      	strb	r3, [r7, #13]

    // 如果启用了差分更新，检查哪些页已经变化
    if (diff_mode_enabled)
 8003eba:	4b40      	ldr	r3, [pc, #256]	@ (8003fbc <OLED_SmartUpdate+0x120>)
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d046      	beq.n	8003f50 <OLED_SmartUpdate+0xb4>
    {
        for (uint8_t page = 0; page < OLED_PAGES; page++)
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	733b      	strb	r3, [r7, #12]
 8003ec6:	e03f      	b.n	8003f48 <OLED_SmartUpdate+0xac>
        {
            // 检查此页中是否有任何字节发生变化
            uint8_t page_changed = 0;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	72fb      	strb	r3, [r7, #11]
            uint16_t start_idx = page * OLED_WIDTH;
 8003ecc:	7b3b      	ldrb	r3, [r7, #12]
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	01db      	lsls	r3, r3, #7
 8003ed2:	80bb      	strh	r3, [r7, #4]

            for (uint16_t i = 0; i < OLED_WIDTH; i++)
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	813b      	strh	r3, [r7, #8]
 8003ed8:	e015      	b.n	8003f06 <OLED_SmartUpdate+0x6a>
            {
                if (OLED_BackBuffer[start_idx + i] != OLED_PrevBuffer[start_idx + i])
 8003eda:	88ba      	ldrh	r2, [r7, #4]
 8003edc:	893b      	ldrh	r3, [r7, #8]
 8003ede:	4413      	add	r3, r2
 8003ee0:	4a37      	ldr	r2, [pc, #220]	@ (8003fc0 <OLED_SmartUpdate+0x124>)
 8003ee2:	5cd2      	ldrb	r2, [r2, r3]
 8003ee4:	88b9      	ldrh	r1, [r7, #4]
 8003ee6:	893b      	ldrh	r3, [r7, #8]
 8003ee8:	440b      	add	r3, r1
 8003eea:	4936      	ldr	r1, [pc, #216]	@ (8003fc4 <OLED_SmartUpdate+0x128>)
 8003eec:	5ccb      	ldrb	r3, [r1, r3]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d006      	beq.n	8003f00 <OLED_SmartUpdate+0x64>
                {
                    page_changed = 1;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	72fb      	strb	r3, [r7, #11]
                    oled_dirty_pages[page] = 1;
 8003ef6:	7b3b      	ldrb	r3, [r7, #12]
 8003ef8:	4a33      	ldr	r2, [pc, #204]	@ (8003fc8 <OLED_SmartUpdate+0x12c>)
 8003efa:	2101      	movs	r1, #1
 8003efc:	54d1      	strb	r1, [r2, r3]
                    break;
 8003efe:	e005      	b.n	8003f0c <OLED_SmartUpdate+0x70>
            for (uint16_t i = 0; i < OLED_WIDTH; i++)
 8003f00:	893b      	ldrh	r3, [r7, #8]
 8003f02:	3301      	adds	r3, #1
 8003f04:	813b      	strh	r3, [r7, #8]
 8003f06:	893b      	ldrh	r3, [r7, #8]
 8003f08:	2b7f      	cmp	r3, #127	@ 0x7f
 8003f0a:	d9e6      	bls.n	8003eda <OLED_SmartUpdate+0x3e>
                }
            }

            if (page_changed)
 8003f0c:	7afb      	ldrb	r3, [r7, #11]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d017      	beq.n	8003f42 <OLED_SmartUpdate+0xa6>
            {
                has_dirty = 1;
 8003f12:	2301      	movs	r3, #1
 8003f14:	73fb      	strb	r3, [r7, #15]
                if (page < first_dirty)
 8003f16:	7b3a      	ldrb	r2, [r7, #12]
 8003f18:	7bbb      	ldrb	r3, [r7, #14]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d201      	bcs.n	8003f22 <OLED_SmartUpdate+0x86>
                    first_dirty = page;
 8003f1e:	7b3b      	ldrb	r3, [r7, #12]
 8003f20:	73bb      	strb	r3, [r7, #14]
                if (page > last_dirty)
 8003f22:	7b3a      	ldrb	r2, [r7, #12]
 8003f24:	7b7b      	ldrb	r3, [r7, #13]
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d901      	bls.n	8003f2e <OLED_SmartUpdate+0x92>
                    last_dirty = page;
 8003f2a:	7b3b      	ldrb	r3, [r7, #12]
 8003f2c:	737b      	strb	r3, [r7, #13]

                // 更新上一帧缓存
                memcpy(
 8003f2e:	88bb      	ldrh	r3, [r7, #4]
 8003f30:	4a24      	ldr	r2, [pc, #144]	@ (8003fc4 <OLED_SmartUpdate+0x128>)
 8003f32:	1898      	adds	r0, r3, r2
 8003f34:	88bb      	ldrh	r3, [r7, #4]
 8003f36:	4a22      	ldr	r2, [pc, #136]	@ (8003fc0 <OLED_SmartUpdate+0x124>)
 8003f38:	4413      	add	r3, r2
 8003f3a:	2280      	movs	r2, #128	@ 0x80
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	f004 fb18 	bl	8008572 <memcpy>
        for (uint8_t page = 0; page < OLED_PAGES; page++)
 8003f42:	7b3b      	ldrb	r3, [r7, #12]
 8003f44:	3301      	adds	r3, #1
 8003f46:	733b      	strb	r3, [r7, #12]
 8003f48:	7b3b      	ldrb	r3, [r7, #12]
 8003f4a:	2b07      	cmp	r3, #7
 8003f4c:	d9bc      	bls.n	8003ec8 <OLED_SmartUpdate+0x2c>
 8003f4e:	e01c      	b.n	8003f8a <OLED_SmartUpdate+0xee>
        }
    }
    else
    {
        // 如果未启用差分更新，使用脏页标记
        for (uint8_t i = 0; i < OLED_PAGES; i++)
 8003f50:	2300      	movs	r3, #0
 8003f52:	71fb      	strb	r3, [r7, #7]
 8003f54:	e016      	b.n	8003f84 <OLED_SmartUpdate+0xe8>
        {
            if (oled_dirty_pages[i])
 8003f56:	79fb      	ldrb	r3, [r7, #7]
 8003f58:	4a1b      	ldr	r2, [pc, #108]	@ (8003fc8 <OLED_SmartUpdate+0x12c>)
 8003f5a:	5cd3      	ldrb	r3, [r2, r3]
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00d      	beq.n	8003f7e <OLED_SmartUpdate+0xe2>
            {
                has_dirty = 1;
 8003f62:	2301      	movs	r3, #1
 8003f64:	73fb      	strb	r3, [r7, #15]
                if (i < first_dirty)
 8003f66:	79fa      	ldrb	r2, [r7, #7]
 8003f68:	7bbb      	ldrb	r3, [r7, #14]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d201      	bcs.n	8003f72 <OLED_SmartUpdate+0xd6>
                    first_dirty = i;
 8003f6e:	79fb      	ldrb	r3, [r7, #7]
 8003f70:	73bb      	strb	r3, [r7, #14]
                if (i > last_dirty)
 8003f72:	79fa      	ldrb	r2, [r7, #7]
 8003f74:	7b7b      	ldrb	r3, [r7, #13]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d901      	bls.n	8003f7e <OLED_SmartUpdate+0xe2>
                    last_dirty = i;
 8003f7a:	79fb      	ldrb	r3, [r7, #7]
 8003f7c:	737b      	strb	r3, [r7, #13]
        for (uint8_t i = 0; i < OLED_PAGES; i++)
 8003f7e:	79fb      	ldrb	r3, [r7, #7]
 8003f80:	3301      	adds	r3, #1
 8003f82:	71fb      	strb	r3, [r7, #7]
 8003f84:	79fb      	ldrb	r3, [r7, #7]
 8003f86:	2b07      	cmp	r3, #7
 8003f88:	d9e5      	bls.n	8003f56 <OLED_SmartUpdate+0xba>
            }
        }
    }

    // 如果有脏页，只更新这些页
    if (has_dirty && fast_update_enabled)
 8003f8a:	7bfb      	ldrb	r3, [r7, #15]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00a      	beq.n	8003fa6 <OLED_SmartUpdate+0x10a>
 8003f90:	4b0e      	ldr	r3, [pc, #56]	@ (8003fcc <OLED_SmartUpdate+0x130>)
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d006      	beq.n	8003fa6 <OLED_SmartUpdate+0x10a>
    {
        OLED_UpdateDisplayPartial(first_dirty, last_dirty);
 8003f98:	7b7a      	ldrb	r2, [r7, #13]
 8003f9a:	7bbb      	ldrb	r3, [r7, #14]
 8003f9c:	4611      	mov	r1, r2
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f7fd feec 	bl	8001d7c <OLED_UpdateDisplayPartial>
 8003fa4:	e006      	b.n	8003fb4 <OLED_SmartUpdate+0x118>
    }
    else if (has_dirty)
 8003fa6:	7bfb      	ldrb	r3, [r7, #15]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d003      	beq.n	8003fb4 <OLED_SmartUpdate+0x118>
    {
        OLED_UpdateDisplayVSync();
 8003fac:	f7fd fe8e 	bl	8001ccc <OLED_UpdateDisplayVSync>
 8003fb0:	e000      	b.n	8003fb4 <OLED_SmartUpdate+0x118>
        return;
 8003fb2:	bf00      	nop
    }
}
 8003fb4:	3710      	adds	r7, #16
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	20000f70 	.word	0x20000f70
 8003fc0:	2000036c 	.word	0x2000036c
 8003fc4:	20000b70 	.word	0x20000b70
 8003fc8:	20000364 	.word	0x20000364
 8003fcc:	20000006 	.word	0x20000006

08003fd0 <OLED_OptimizedDisplayFPS>:


// 显示FPS
void OLED_OptimizedDisplayFPS(int16_t x, int16_t y)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	460a      	mov	r2, r1
 8003fda:	80fb      	strh	r3, [r7, #6]
 8003fdc:	4613      	mov	r3, r2
 8003fde:	80bb      	strh	r3, [r7, #4]
    static uint32_t last_time = 0;
    static uint32_t frames = 0;
    static uint32_t fps = 0;
    static char fps_str[16] = "FPS:0";

    frames++;
 8003fe0:	4b15      	ldr	r3, [pc, #84]	@ (8004038 <OLED_OptimizedDisplayFPS+0x68>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	3301      	adds	r3, #1
 8003fe6:	4a14      	ldr	r2, [pc, #80]	@ (8004038 <OLED_OptimizedDisplayFPS+0x68>)
 8003fe8:	6013      	str	r3, [r2, #0]

    // 每秒更新一次FPS
    uint32_t current_time = HAL_GetTick();
 8003fea:	f001 fc83 	bl	80058f4 <HAL_GetTick>
 8003fee:	60f8      	str	r0, [r7, #12]
    if (current_time - last_time >= 1000)
 8003ff0:	4b12      	ldr	r3, [pc, #72]	@ (800403c <OLED_OptimizedDisplayFPS+0x6c>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68fa      	ldr	r2, [r7, #12]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003ffc:	d310      	bcc.n	8004020 <OLED_OptimizedDisplayFPS+0x50>
    {
        fps = frames;
 8003ffe:	4b0e      	ldr	r3, [pc, #56]	@ (8004038 <OLED_OptimizedDisplayFPS+0x68>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a0f      	ldr	r2, [pc, #60]	@ (8004040 <OLED_OptimizedDisplayFPS+0x70>)
 8004004:	6013      	str	r3, [r2, #0]
        sprintf(fps_str, "FPS:%d", fps);
 8004006:	4b0e      	ldr	r3, [pc, #56]	@ (8004040 <OLED_OptimizedDisplayFPS+0x70>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	461a      	mov	r2, r3
 800400c:	490d      	ldr	r1, [pc, #52]	@ (8004044 <OLED_OptimizedDisplayFPS+0x74>)
 800400e:	480e      	ldr	r0, [pc, #56]	@ (8004048 <OLED_OptimizedDisplayFPS+0x78>)
 8004010:	f004 f9bc 	bl	800838c <siprintf>
        frames = 0;
 8004014:	4b08      	ldr	r3, [pc, #32]	@ (8004038 <OLED_OptimizedDisplayFPS+0x68>)
 8004016:	2200      	movs	r2, #0
 8004018:	601a      	str	r2, [r3, #0]
        last_time = current_time;
 800401a:	4a08      	ldr	r2, [pc, #32]	@ (800403c <OLED_OptimizedDisplayFPS+0x6c>)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6013      	str	r3, [r2, #0]
    }

    OLED_DisplayString(x, y, fps_str);
 8004020:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004024:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004028:	4a07      	ldr	r2, [pc, #28]	@ (8004048 <OLED_OptimizedDisplayFPS+0x78>)
 800402a:	4618      	mov	r0, r3
 800402c:	f7fe fa3e 	bl	80024ac <OLED_DisplayString>
 8004030:	bf00      	nop
 8004032:	3710      	adds	r7, #16
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	20000f74 	.word	0x20000f74
 800403c:	20000f78 	.word	0x20000f78
 8004040:	20000f7c 	.word	0x20000f7c
 8004044:	0800abf4 	.word	0x0800abf4
 8004048:	20000008 	.word	0x20000008

0800404c <EaseLinear>:
#include "stdint.h" // 添加 stdint.h 以支持标准整数类型
#include "oled_ui.h"
#pragma region TWEENS // 动画缓动函数全部在这里定义

static float EaseLinear(float t)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
    return t;
 8004054:	687b      	ldr	r3, [r7, #4]
}
 8004056:	4618      	mov	r0, r3
 8004058:	370c      	adds	r7, #12
 800405a:	46bd      	mov	sp, r7
 800405c:	bc80      	pop	{r7}
 800405e:	4770      	bx	lr

08004060 <EaseInQuad>:

static float EaseInQuad(float t)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b082      	sub	sp, #8
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
    return t * t;
 8004068:	6879      	ldr	r1, [r7, #4]
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f7fc f98e 	bl	800038c <__aeabi_fmul>
 8004070:	4603      	mov	r3, r0
}
 8004072:	4618      	mov	r0, r3
 8004074:	3708      	adds	r7, #8
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}

0800407a <EaseOutQuad>:

static float EaseOutQuad(float t)
{
 800407a:	b580      	push	{r7, lr}
 800407c:	b082      	sub	sp, #8
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
    return t * (2 - t);
 8004082:	6879      	ldr	r1, [r7, #4]
 8004084:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8004088:	f7fc f876 	bl	8000178 <__aeabi_fsub>
 800408c:	4603      	mov	r3, r0
 800408e:	6879      	ldr	r1, [r7, #4]
 8004090:	4618      	mov	r0, r3
 8004092:	f7fc f97b 	bl	800038c <__aeabi_fmul>
 8004096:	4603      	mov	r3, r0
}
 8004098:	4618      	mov	r0, r3
 800409a:	3708      	adds	r7, #8
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}

080040a0 <EaseInOutQuad>:

static float EaseInOutQuad(float t)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b082      	sub	sp, #8
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
    return t < 0.5f ? 2 * t * t : -1 + (4 - 2 * t) * t;
 80040a8:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f7fc fb0b 	bl	80006c8 <__aeabi_fcmplt>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d00b      	beq.n	80040d0 <EaseInOutQuad+0x30>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4619      	mov	r1, r3
 80040bc:	4618      	mov	r0, r3
 80040be:	f7fc f85d 	bl	800017c <__addsf3>
 80040c2:	4603      	mov	r3, r0
 80040c4:	6879      	ldr	r1, [r7, #4]
 80040c6:	4618      	mov	r0, r3
 80040c8:	f7fc f960 	bl	800038c <__aeabi_fmul>
 80040cc:	4603      	mov	r3, r0
 80040ce:	e016      	b.n	80040fe <EaseInOutQuad+0x5e>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4619      	mov	r1, r3
 80040d4:	4618      	mov	r0, r3
 80040d6:	f7fc f851 	bl	800017c <__addsf3>
 80040da:	4603      	mov	r3, r0
 80040dc:	4619      	mov	r1, r3
 80040de:	f04f 4081 	mov.w	r0, #1082130432	@ 0x40800000
 80040e2:	f7fc f849 	bl	8000178 <__aeabi_fsub>
 80040e6:	4603      	mov	r3, r0
 80040e8:	6879      	ldr	r1, [r7, #4]
 80040ea:	4618      	mov	r0, r3
 80040ec:	f7fc f94e 	bl	800038c <__aeabi_fmul>
 80040f0:	4603      	mov	r3, r0
 80040f2:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7fc f83e 	bl	8000178 <__aeabi_fsub>
 80040fc:	4603      	mov	r3, r0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3708      	adds	r7, #8
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}

08004106 <EaseInCubic>:

static float EaseInCubic(float t)
{
 8004106:	b580      	push	{r7, lr}
 8004108:	b082      	sub	sp, #8
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
    return t * t * t;
 800410e:	6879      	ldr	r1, [r7, #4]
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f7fc f93b 	bl	800038c <__aeabi_fmul>
 8004116:	4603      	mov	r3, r0
 8004118:	6879      	ldr	r1, [r7, #4]
 800411a:	4618      	mov	r0, r3
 800411c:	f7fc f936 	bl	800038c <__aeabi_fmul>
 8004120:	4603      	mov	r3, r0
}
 8004122:	4618      	mov	r0, r3
 8004124:	3708      	adds	r7, #8
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}

0800412a <EaseOutCubic>:

static float EaseOutCubic(float t)
{
 800412a:	b580      	push	{r7, lr}
 800412c:	b084      	sub	sp, #16
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
    float t1 = t - 1;
 8004132:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f7fc f81e 	bl	8000178 <__aeabi_fsub>
 800413c:	4603      	mov	r3, r0
 800413e:	60fb      	str	r3, [r7, #12]
    return t1 * t1 * t1 + 1;
 8004140:	68f9      	ldr	r1, [r7, #12]
 8004142:	68f8      	ldr	r0, [r7, #12]
 8004144:	f7fc f922 	bl	800038c <__aeabi_fmul>
 8004148:	4603      	mov	r3, r0
 800414a:	68f9      	ldr	r1, [r7, #12]
 800414c:	4618      	mov	r0, r3
 800414e:	f7fc f91d 	bl	800038c <__aeabi_fmul>
 8004152:	4603      	mov	r3, r0
 8004154:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8004158:	4618      	mov	r0, r3
 800415a:	f7fc f80f 	bl	800017c <__addsf3>
 800415e:	4603      	mov	r3, r0
}
 8004160:	4618      	mov	r0, r3
 8004162:	3710      	adds	r7, #16
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <EaseInOutCubic>:

static float EaseInOutCubic(float t)
{
 8004168:	b590      	push	{r4, r7, lr}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
    return t < 0.5f ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;
 8004170:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f7fc faa7 	bl	80006c8 <__aeabi_fcmplt>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d010      	beq.n	80041a2 <EaseInOutCubic+0x3a>
 8004180:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f7fc f901 	bl	800038c <__aeabi_fmul>
 800418a:	4603      	mov	r3, r0
 800418c:	6879      	ldr	r1, [r7, #4]
 800418e:	4618      	mov	r0, r3
 8004190:	f7fc f8fc 	bl	800038c <__aeabi_fmul>
 8004194:	4603      	mov	r3, r0
 8004196:	6879      	ldr	r1, [r7, #4]
 8004198:	4618      	mov	r0, r3
 800419a:	f7fc f8f7 	bl	800038c <__aeabi_fmul>
 800419e:	4603      	mov	r3, r0
 80041a0:	e02f      	b.n	8004202 <EaseInOutCubic+0x9a>
 80041a2:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f7fb ffe6 	bl	8000178 <__aeabi_fsub>
 80041ac:	4603      	mov	r3, r0
 80041ae:	461c      	mov	r4, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4619      	mov	r1, r3
 80041b4:	4618      	mov	r0, r3
 80041b6:	f7fb ffe1 	bl	800017c <__addsf3>
 80041ba:	4603      	mov	r3, r0
 80041bc:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80041c0:	4618      	mov	r0, r3
 80041c2:	f7fb ffd9 	bl	8000178 <__aeabi_fsub>
 80041c6:	4603      	mov	r3, r0
 80041c8:	4619      	mov	r1, r3
 80041ca:	4620      	mov	r0, r4
 80041cc:	f7fc f8de 	bl	800038c <__aeabi_fmul>
 80041d0:	4603      	mov	r3, r0
 80041d2:	461c      	mov	r4, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4619      	mov	r1, r3
 80041d8:	4618      	mov	r0, r3
 80041da:	f7fb ffcf 	bl	800017c <__addsf3>
 80041de:	4603      	mov	r3, r0
 80041e0:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7fb ffc7 	bl	8000178 <__aeabi_fsub>
 80041ea:	4603      	mov	r3, r0
 80041ec:	4619      	mov	r1, r3
 80041ee:	4620      	mov	r0, r4
 80041f0:	f7fc f8cc 	bl	800038c <__aeabi_fmul>
 80041f4:	4603      	mov	r3, r0
 80041f6:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80041fa:	4618      	mov	r0, r3
 80041fc:	f7fb ffbe 	bl	800017c <__addsf3>
 8004200:	4603      	mov	r3, r0
}
 8004202:	4618      	mov	r0, r3
 8004204:	370c      	adds	r7, #12
 8004206:	46bd      	mov	sp, r7
 8004208:	bd90      	pop	{r4, r7, pc}
	...

0800420c <EaseInExpo>:

// 在现有EaseType_t枚举中添加这些新类型
// 指数缓动
static float EaseInExpo(float t)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
    return (t == 0) ? 0 : powf(2, 10 * (t - 1));
 8004214:	f04f 0100 	mov.w	r1, #0
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f7fc fa4b 	bl	80006b4 <__aeabi_fcmpeq>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d111      	bne.n	8004248 <EaseInExpo+0x3c>
 8004224:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f7fb ffa5 	bl	8000178 <__aeabi_fsub>
 800422e:	4603      	mov	r3, r0
 8004230:	4908      	ldr	r1, [pc, #32]	@ (8004254 <EaseInExpo+0x48>)
 8004232:	4618      	mov	r0, r3
 8004234:	f7fc f8aa 	bl	800038c <__aeabi_fmul>
 8004238:	4603      	mov	r3, r0
 800423a:	4619      	mov	r1, r3
 800423c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8004240:	f005 f974 	bl	800952c <powf>
 8004244:	4603      	mov	r3, r0
 8004246:	e001      	b.n	800424c <EaseInExpo+0x40>
 8004248:	f04f 0300 	mov.w	r3, #0
}
 800424c:	4618      	mov	r0, r3
 800424e:	3708      	adds	r7, #8
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}
 8004254:	41200000 	.word	0x41200000

08004258 <EaseOutExpo>:

static float EaseOutExpo(float t)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
    return (t == 1) ? 1 : (1 - powf(2, -10 * t));
 8004260:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f7fc fa25 	bl	80006b4 <__aeabi_fcmpeq>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d111      	bne.n	8004294 <EaseOutExpo+0x3c>
 8004270:	490b      	ldr	r1, [pc, #44]	@ (80042a0 <EaseOutExpo+0x48>)
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f7fc f88a 	bl	800038c <__aeabi_fmul>
 8004278:	4603      	mov	r3, r0
 800427a:	4619      	mov	r1, r3
 800427c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8004280:	f005 f954 	bl	800952c <powf>
 8004284:	4603      	mov	r3, r0
 8004286:	4619      	mov	r1, r3
 8004288:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800428c:	f7fb ff74 	bl	8000178 <__aeabi_fsub>
 8004290:	4603      	mov	r3, r0
 8004292:	e001      	b.n	8004298 <EaseOutExpo+0x40>
 8004294:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
}
 8004298:	4618      	mov	r0, r3
 800429a:	3708      	adds	r7, #8
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	c1200000 	.word	0xc1200000

080042a4 <EaseInOutExpo>:

static float EaseInOutExpo(float t)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
    if (t == 0)
 80042ac:	f04f 0100 	mov.w	r1, #0
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f7fc f9ff 	bl	80006b4 <__aeabi_fcmpeq>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d002      	beq.n	80042c2 <EaseInOutExpo+0x1e>
        return 0;
 80042bc:	f04f 0300 	mov.w	r3, #0
 80042c0:	e045      	b.n	800434e <EaseInOutExpo+0xaa>
    if (t == 1)
 80042c2:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f7fc f9f4 	bl	80006b4 <__aeabi_fcmpeq>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d002      	beq.n	80042d8 <EaseInOutExpo+0x34>
        return 1;
 80042d2:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80042d6:	e03a      	b.n	800434e <EaseInOutExpo+0xaa>
    if (t < 0.5f)
 80042d8:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f7fc f9f3 	bl	80006c8 <__aeabi_fcmplt>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d016      	beq.n	8004316 <EaseInOutExpo+0x72>
        return powf(2, 20 * t - 10) / 2;
 80042e8:	491b      	ldr	r1, [pc, #108]	@ (8004358 <EaseInOutExpo+0xb4>)
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f7fc f84e 	bl	800038c <__aeabi_fmul>
 80042f0:	4603      	mov	r3, r0
 80042f2:	491a      	ldr	r1, [pc, #104]	@ (800435c <EaseInOutExpo+0xb8>)
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7fb ff3f 	bl	8000178 <__aeabi_fsub>
 80042fa:	4603      	mov	r3, r0
 80042fc:	4619      	mov	r1, r3
 80042fe:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8004302:	f005 f913 	bl	800952c <powf>
 8004306:	4603      	mov	r3, r0
 8004308:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800430c:	4618      	mov	r0, r3
 800430e:	f7fc f8f1 	bl	80004f4 <__aeabi_fdiv>
 8004312:	4603      	mov	r3, r0
 8004314:	e01b      	b.n	800434e <EaseInOutExpo+0xaa>
    return (2 - powf(2, -20 * t + 10)) / 2;
 8004316:	4912      	ldr	r1, [pc, #72]	@ (8004360 <EaseInOutExpo+0xbc>)
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f7fc f837 	bl	800038c <__aeabi_fmul>
 800431e:	4603      	mov	r3, r0
 8004320:	490e      	ldr	r1, [pc, #56]	@ (800435c <EaseInOutExpo+0xb8>)
 8004322:	4618      	mov	r0, r3
 8004324:	f7fb ff2a 	bl	800017c <__addsf3>
 8004328:	4603      	mov	r3, r0
 800432a:	4619      	mov	r1, r3
 800432c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8004330:	f005 f8fc 	bl	800952c <powf>
 8004334:	4603      	mov	r3, r0
 8004336:	4619      	mov	r1, r3
 8004338:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800433c:	f7fb ff1c 	bl	8000178 <__aeabi_fsub>
 8004340:	4603      	mov	r3, r0
 8004342:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004346:	4618      	mov	r0, r3
 8004348:	f7fc f8d4 	bl	80004f4 <__aeabi_fdiv>
 800434c:	4603      	mov	r3, r0
}
 800434e:	4618      	mov	r0, r3
 8004350:	3708      	adds	r7, #8
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	41a00000 	.word	0x41a00000
 800435c:	41200000 	.word	0x41200000
 8004360:	c1a00000 	.word	0xc1a00000

08004364 <EaseInCirc>:

// 圆形曲线缓动
static float EaseInCirc(float t)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
    return 1 - sqrtf(1 - t * t);
 800436c:	6879      	ldr	r1, [r7, #4]
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f7fc f80c 	bl	800038c <__aeabi_fmul>
 8004374:	4603      	mov	r3, r0
 8004376:	4619      	mov	r1, r3
 8004378:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800437c:	f7fb fefc 	bl	8000178 <__aeabi_fsub>
 8004380:	4603      	mov	r3, r0
 8004382:	4618      	mov	r0, r3
 8004384:	f005 f91f 	bl	80095c6 <sqrtf>
 8004388:	4603      	mov	r3, r0
 800438a:	4619      	mov	r1, r3
 800438c:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8004390:	f7fb fef2 	bl	8000178 <__aeabi_fsub>
 8004394:	4603      	mov	r3, r0
}
 8004396:	4618      	mov	r0, r3
 8004398:	3708      	adds	r7, #8
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}

0800439e <EaseOutCirc>:

static float EaseOutCirc(float t)
{
 800439e:	b580      	push	{r7, lr}
 80043a0:	b082      	sub	sp, #8
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
    return sqrtf(1 - powf(t - 1, 2));
 80043a6:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f7fb fee4 	bl	8000178 <__aeabi_fsub>
 80043b0:	4603      	mov	r3, r0
 80043b2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80043b6:	4618      	mov	r0, r3
 80043b8:	f005 f8b8 	bl	800952c <powf>
 80043bc:	4603      	mov	r3, r0
 80043be:	4619      	mov	r1, r3
 80043c0:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80043c4:	f7fb fed8 	bl	8000178 <__aeabi_fsub>
 80043c8:	4603      	mov	r3, r0
 80043ca:	4618      	mov	r0, r3
 80043cc:	f005 f8fb 	bl	80095c6 <sqrtf>
 80043d0:	4603      	mov	r3, r0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3708      	adds	r7, #8
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}

080043da <EaseInOutCirc>:

static float EaseInOutCirc(float t)
{
 80043da:	b580      	push	{r7, lr}
 80043dc:	b082      	sub	sp, #8
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
    if (t < 0.5f)
 80043e2:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f7fc f96e 	bl	80006c8 <__aeabi_fcmplt>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d022      	beq.n	8004438 <EaseInOutCirc+0x5e>
        return (1 - sqrtf(1 - powf(2 * t, 2))) / 2;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4619      	mov	r1, r3
 80043f6:	4618      	mov	r0, r3
 80043f8:	f7fb fec0 	bl	800017c <__addsf3>
 80043fc:	4603      	mov	r3, r0
 80043fe:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004402:	4618      	mov	r0, r3
 8004404:	f005 f892 	bl	800952c <powf>
 8004408:	4603      	mov	r3, r0
 800440a:	4619      	mov	r1, r3
 800440c:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8004410:	f7fb feb2 	bl	8000178 <__aeabi_fsub>
 8004414:	4603      	mov	r3, r0
 8004416:	4618      	mov	r0, r3
 8004418:	f005 f8d5 	bl	80095c6 <sqrtf>
 800441c:	4603      	mov	r3, r0
 800441e:	4619      	mov	r1, r3
 8004420:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8004424:	f7fb fea8 	bl	8000178 <__aeabi_fsub>
 8004428:	4603      	mov	r3, r0
 800442a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800442e:	4618      	mov	r0, r3
 8004430:	f7fc f860 	bl	80004f4 <__aeabi_fdiv>
 8004434:	4603      	mov	r3, r0
 8004436:	e027      	b.n	8004488 <EaseInOutCirc+0xae>
    return (sqrtf(1 - powf(-2 * t + 2, 2)) + 1) / 2;
 8004438:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f7fb ffa5 	bl	800038c <__aeabi_fmul>
 8004442:	4603      	mov	r3, r0
 8004444:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004448:	4618      	mov	r0, r3
 800444a:	f7fb fe97 	bl	800017c <__addsf3>
 800444e:	4603      	mov	r3, r0
 8004450:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004454:	4618      	mov	r0, r3
 8004456:	f005 f869 	bl	800952c <powf>
 800445a:	4603      	mov	r3, r0
 800445c:	4619      	mov	r1, r3
 800445e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8004462:	f7fb fe89 	bl	8000178 <__aeabi_fsub>
 8004466:	4603      	mov	r3, r0
 8004468:	4618      	mov	r0, r3
 800446a:	f005 f8ac 	bl	80095c6 <sqrtf>
 800446e:	4603      	mov	r3, r0
 8004470:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8004474:	4618      	mov	r0, r3
 8004476:	f7fb fe81 	bl	800017c <__addsf3>
 800447a:	4603      	mov	r3, r0
 800447c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004480:	4618      	mov	r0, r3
 8004482:	f7fc f837 	bl	80004f4 <__aeabi_fdiv>
 8004486:	4603      	mov	r3, r0
}
 8004488:	4618      	mov	r0, r3
 800448a:	3708      	adds	r7, #8
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <EaseInElastic>:

// 弹性缓动
static float EaseInElastic(float t)
{
 8004490:	b590      	push	{r4, r7, lr}
 8004492:	b085      	sub	sp, #20
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
    const float c4 = (2 * 3.14159f) / 3;
 8004498:	4b22      	ldr	r3, [pc, #136]	@ (8004524 <EaseInElastic+0x94>)
 800449a:	60fb      	str	r3, [r7, #12]

    if (t == 0)
 800449c:	f04f 0100 	mov.w	r1, #0
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f7fc f907 	bl	80006b4 <__aeabi_fcmpeq>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d002      	beq.n	80044b2 <EaseInElastic+0x22>
        return 0;
 80044ac:	f04f 0300 	mov.w	r3, #0
 80044b0:	e034      	b.n	800451c <EaseInElastic+0x8c>
    if (t == 1)
 80044b2:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f7fc f8fc 	bl	80006b4 <__aeabi_fcmpeq>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d002      	beq.n	80044c8 <EaseInElastic+0x38>
        return 1;
 80044c2:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80044c6:	e029      	b.n	800451c <EaseInElastic+0x8c>
    return -powf(2, 10 * t - 10) * sinf((t * 10 - 10.75f) * c4);
 80044c8:	4917      	ldr	r1, [pc, #92]	@ (8004528 <EaseInElastic+0x98>)
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f7fb ff5e 	bl	800038c <__aeabi_fmul>
 80044d0:	4603      	mov	r3, r0
 80044d2:	4915      	ldr	r1, [pc, #84]	@ (8004528 <EaseInElastic+0x98>)
 80044d4:	4618      	mov	r0, r3
 80044d6:	f7fb fe4f 	bl	8000178 <__aeabi_fsub>
 80044da:	4603      	mov	r3, r0
 80044dc:	4619      	mov	r1, r3
 80044de:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80044e2:	f005 f823 	bl	800952c <powf>
 80044e6:	4603      	mov	r3, r0
 80044e8:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 80044ec:	490e      	ldr	r1, [pc, #56]	@ (8004528 <EaseInElastic+0x98>)
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f7fb ff4c 	bl	800038c <__aeabi_fmul>
 80044f4:	4603      	mov	r3, r0
 80044f6:	490d      	ldr	r1, [pc, #52]	@ (800452c <EaseInElastic+0x9c>)
 80044f8:	4618      	mov	r0, r3
 80044fa:	f7fb fe3d 	bl	8000178 <__aeabi_fsub>
 80044fe:	4603      	mov	r3, r0
 8004500:	68f9      	ldr	r1, [r7, #12]
 8004502:	4618      	mov	r0, r3
 8004504:	f7fb ff42 	bl	800038c <__aeabi_fmul>
 8004508:	4603      	mov	r3, r0
 800450a:	4618      	mov	r0, r3
 800450c:	f005 f8ae 	bl	800966c <sinf>
 8004510:	4603      	mov	r3, r0
 8004512:	4619      	mov	r1, r3
 8004514:	4620      	mov	r0, r4
 8004516:	f7fb ff39 	bl	800038c <__aeabi_fmul>
 800451a:	4603      	mov	r3, r0
}
 800451c:	4618      	mov	r0, r3
 800451e:	3714      	adds	r7, #20
 8004520:	46bd      	mov	sp, r7
 8004522:	bd90      	pop	{r4, r7, pc}
 8004524:	40060a8b 	.word	0x40060a8b
 8004528:	41200000 	.word	0x41200000
 800452c:	412c0000 	.word	0x412c0000

08004530 <EaseOutElastic>:

static float EaseOutElastic(float t)
{
 8004530:	b590      	push	{r4, r7, lr}
 8004532:	b085      	sub	sp, #20
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
    const float c4 = (2 * 3.14159f) / 3;
 8004538:	4b22      	ldr	r3, [pc, #136]	@ (80045c4 <EaseOutElastic+0x94>)
 800453a:	60fb      	str	r3, [r7, #12]

    if (t == 0)
 800453c:	f04f 0100 	mov.w	r1, #0
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f7fc f8b7 	bl	80006b4 <__aeabi_fcmpeq>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d002      	beq.n	8004552 <EaseOutElastic+0x22>
        return 0;
 800454c:	f04f 0300 	mov.w	r3, #0
 8004550:	e034      	b.n	80045bc <EaseOutElastic+0x8c>
    if (t == 1)
 8004552:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f7fc f8ac 	bl	80006b4 <__aeabi_fcmpeq>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d002      	beq.n	8004568 <EaseOutElastic+0x38>
        return 1;
 8004562:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8004566:	e029      	b.n	80045bc <EaseOutElastic+0x8c>
    return powf(2, -10 * t) * sinf((t * 10 - 0.75f) * c4) + 1;
 8004568:	4917      	ldr	r1, [pc, #92]	@ (80045c8 <EaseOutElastic+0x98>)
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f7fb ff0e 	bl	800038c <__aeabi_fmul>
 8004570:	4603      	mov	r3, r0
 8004572:	4619      	mov	r1, r3
 8004574:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8004578:	f004 ffd8 	bl	800952c <powf>
 800457c:	4604      	mov	r4, r0
 800457e:	4913      	ldr	r1, [pc, #76]	@ (80045cc <EaseOutElastic+0x9c>)
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f7fb ff03 	bl	800038c <__aeabi_fmul>
 8004586:	4603      	mov	r3, r0
 8004588:	f04f 517d 	mov.w	r1, #1061158912	@ 0x3f400000
 800458c:	4618      	mov	r0, r3
 800458e:	f7fb fdf3 	bl	8000178 <__aeabi_fsub>
 8004592:	4603      	mov	r3, r0
 8004594:	68f9      	ldr	r1, [r7, #12]
 8004596:	4618      	mov	r0, r3
 8004598:	f7fb fef8 	bl	800038c <__aeabi_fmul>
 800459c:	4603      	mov	r3, r0
 800459e:	4618      	mov	r0, r3
 80045a0:	f005 f864 	bl	800966c <sinf>
 80045a4:	4603      	mov	r3, r0
 80045a6:	4619      	mov	r1, r3
 80045a8:	4620      	mov	r0, r4
 80045aa:	f7fb feef 	bl	800038c <__aeabi_fmul>
 80045ae:	4603      	mov	r3, r0
 80045b0:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80045b4:	4618      	mov	r0, r3
 80045b6:	f7fb fde1 	bl	800017c <__addsf3>
 80045ba:	4603      	mov	r3, r0
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3714      	adds	r7, #20
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd90      	pop	{r4, r7, pc}
 80045c4:	40060a8b 	.word	0x40060a8b
 80045c8:	c1200000 	.word	0xc1200000
 80045cc:	41200000 	.word	0x41200000

080045d0 <EaseInOutElastic>:

static float EaseInOutElastic(float t)
{
 80045d0:	b590      	push	{r4, r7, lr}
 80045d2:	b085      	sub	sp, #20
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
    const float c5 = (2 * 3.14159f) / 4.5f;
 80045d8:	4b44      	ldr	r3, [pc, #272]	@ (80046ec <EaseInOutElastic+0x11c>)
 80045da:	60fb      	str	r3, [r7, #12]

    if (t == 0)
 80045dc:	f04f 0100 	mov.w	r1, #0
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f7fc f867 	bl	80006b4 <__aeabi_fcmpeq>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d002      	beq.n	80045f2 <EaseInOutElastic+0x22>
        return 0;
 80045ec:	f04f 0300 	mov.w	r3, #0
 80045f0:	e077      	b.n	80046e2 <EaseInOutElastic+0x112>
    if (t == 1)
 80045f2:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f7fc f85c 	bl	80006b4 <__aeabi_fcmpeq>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d002      	beq.n	8004608 <EaseInOutElastic+0x38>
        return 1;
 8004602:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8004606:	e06c      	b.n	80046e2 <EaseInOutElastic+0x112>
    if (t < 0.5f)
 8004608:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f7fc f85b 	bl	80006c8 <__aeabi_fcmplt>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d030      	beq.n	800467a <EaseInOutElastic+0xaa>
        return -(powf(2, 20 * t - 10) * sinf((20 * t - 11.125f) * c5)) / 2;
 8004618:	4935      	ldr	r1, [pc, #212]	@ (80046f0 <EaseInOutElastic+0x120>)
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f7fb feb6 	bl	800038c <__aeabi_fmul>
 8004620:	4603      	mov	r3, r0
 8004622:	4934      	ldr	r1, [pc, #208]	@ (80046f4 <EaseInOutElastic+0x124>)
 8004624:	4618      	mov	r0, r3
 8004626:	f7fb fda7 	bl	8000178 <__aeabi_fsub>
 800462a:	4603      	mov	r3, r0
 800462c:	4619      	mov	r1, r3
 800462e:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8004632:	f004 ff7b 	bl	800952c <powf>
 8004636:	4604      	mov	r4, r0
 8004638:	492d      	ldr	r1, [pc, #180]	@ (80046f0 <EaseInOutElastic+0x120>)
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f7fb fea6 	bl	800038c <__aeabi_fmul>
 8004640:	4603      	mov	r3, r0
 8004642:	492d      	ldr	r1, [pc, #180]	@ (80046f8 <EaseInOutElastic+0x128>)
 8004644:	4618      	mov	r0, r3
 8004646:	f7fb fd97 	bl	8000178 <__aeabi_fsub>
 800464a:	4603      	mov	r3, r0
 800464c:	68f9      	ldr	r1, [r7, #12]
 800464e:	4618      	mov	r0, r3
 8004650:	f7fb fe9c 	bl	800038c <__aeabi_fmul>
 8004654:	4603      	mov	r3, r0
 8004656:	4618      	mov	r0, r3
 8004658:	f005 f808 	bl	800966c <sinf>
 800465c:	4603      	mov	r3, r0
 800465e:	4619      	mov	r1, r3
 8004660:	4620      	mov	r0, r4
 8004662:	f7fb fe93 	bl	800038c <__aeabi_fmul>
 8004666:	4603      	mov	r3, r0
 8004668:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800466c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004670:	4618      	mov	r0, r3
 8004672:	f7fb ff3f 	bl	80004f4 <__aeabi_fdiv>
 8004676:	4603      	mov	r3, r0
 8004678:	e033      	b.n	80046e2 <EaseInOutElastic+0x112>
    return (powf(2, -20 * t + 10) * sinf((20 * t - 11.125f) * c5)) / 2 + 1;
 800467a:	4920      	ldr	r1, [pc, #128]	@ (80046fc <EaseInOutElastic+0x12c>)
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f7fb fe85 	bl	800038c <__aeabi_fmul>
 8004682:	4603      	mov	r3, r0
 8004684:	491b      	ldr	r1, [pc, #108]	@ (80046f4 <EaseInOutElastic+0x124>)
 8004686:	4618      	mov	r0, r3
 8004688:	f7fb fd78 	bl	800017c <__addsf3>
 800468c:	4603      	mov	r3, r0
 800468e:	4619      	mov	r1, r3
 8004690:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8004694:	f004 ff4a 	bl	800952c <powf>
 8004698:	4604      	mov	r4, r0
 800469a:	4915      	ldr	r1, [pc, #84]	@ (80046f0 <EaseInOutElastic+0x120>)
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f7fb fe75 	bl	800038c <__aeabi_fmul>
 80046a2:	4603      	mov	r3, r0
 80046a4:	4914      	ldr	r1, [pc, #80]	@ (80046f8 <EaseInOutElastic+0x128>)
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7fb fd66 	bl	8000178 <__aeabi_fsub>
 80046ac:	4603      	mov	r3, r0
 80046ae:	68f9      	ldr	r1, [r7, #12]
 80046b0:	4618      	mov	r0, r3
 80046b2:	f7fb fe6b 	bl	800038c <__aeabi_fmul>
 80046b6:	4603      	mov	r3, r0
 80046b8:	4618      	mov	r0, r3
 80046ba:	f004 ffd7 	bl	800966c <sinf>
 80046be:	4603      	mov	r3, r0
 80046c0:	4619      	mov	r1, r3
 80046c2:	4620      	mov	r0, r4
 80046c4:	f7fb fe62 	bl	800038c <__aeabi_fmul>
 80046c8:	4603      	mov	r3, r0
 80046ca:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7fb ff10 	bl	80004f4 <__aeabi_fdiv>
 80046d4:	4603      	mov	r3, r0
 80046d6:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80046da:	4618      	mov	r0, r3
 80046dc:	f7fb fd4e 	bl	800017c <__addsf3>
 80046e0:	4603      	mov	r3, r0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3714      	adds	r7, #20
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd90      	pop	{r4, r7, pc}
 80046ea:	bf00      	nop
 80046ec:	3fb2b8b9 	.word	0x3fb2b8b9
 80046f0:	41a00000 	.word	0x41a00000
 80046f4:	41200000 	.word	0x41200000
 80046f8:	41320000 	.word	0x41320000
 80046fc:	c1a00000 	.word	0xc1a00000

08004700 <EaseOutBounce>:

static float EaseOutBounce(float t)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
    const float n1 = 7.5625f;
 8004708:	4b45      	ldr	r3, [pc, #276]	@ (8004820 <EaseOutBounce+0x120>)
 800470a:	60fb      	str	r3, [r7, #12]
    const float d1 = 2.75f;
 800470c:	4b45      	ldr	r3, [pc, #276]	@ (8004824 <EaseOutBounce+0x124>)
 800470e:	60bb      	str	r3, [r7, #8]

    if (t < 1 / d1)
 8004710:	68b9      	ldr	r1, [r7, #8]
 8004712:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8004716:	f7fb feed 	bl	80004f4 <__aeabi_fdiv>
 800471a:	4603      	mov	r3, r0
 800471c:	4619      	mov	r1, r3
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f7fb ffd2 	bl	80006c8 <__aeabi_fcmplt>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00a      	beq.n	8004740 <EaseOutBounce+0x40>
    {
        return n1 * t * t;
 800472a:	6879      	ldr	r1, [r7, #4]
 800472c:	68f8      	ldr	r0, [r7, #12]
 800472e:	f7fb fe2d 	bl	800038c <__aeabi_fmul>
 8004732:	4603      	mov	r3, r0
 8004734:	6879      	ldr	r1, [r7, #4]
 8004736:	4618      	mov	r0, r3
 8004738:	f7fb fe28 	bl	800038c <__aeabi_fmul>
 800473c:	4603      	mov	r3, r0
 800473e:	e06a      	b.n	8004816 <EaseOutBounce+0x116>
    }
    else if (t < 2 / d1)
 8004740:	68b9      	ldr	r1, [r7, #8]
 8004742:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8004746:	f7fb fed5 	bl	80004f4 <__aeabi_fdiv>
 800474a:	4603      	mov	r3, r0
 800474c:	4619      	mov	r1, r3
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f7fb ffba 	bl	80006c8 <__aeabi_fcmplt>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d01c      	beq.n	8004794 <EaseOutBounce+0x94>
    {
        t -= 1.5f / d1;
 800475a:	68b9      	ldr	r1, [r7, #8]
 800475c:	f04f 507f 	mov.w	r0, #1069547520	@ 0x3fc00000
 8004760:	f7fb fec8 	bl	80004f4 <__aeabi_fdiv>
 8004764:	4603      	mov	r3, r0
 8004766:	4619      	mov	r1, r3
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f7fb fd05 	bl	8000178 <__aeabi_fsub>
 800476e:	4603      	mov	r3, r0
 8004770:	607b      	str	r3, [r7, #4]
        return n1 * t * t + 0.75f;
 8004772:	6879      	ldr	r1, [r7, #4]
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	f7fb fe09 	bl	800038c <__aeabi_fmul>
 800477a:	4603      	mov	r3, r0
 800477c:	6879      	ldr	r1, [r7, #4]
 800477e:	4618      	mov	r0, r3
 8004780:	f7fb fe04 	bl	800038c <__aeabi_fmul>
 8004784:	4603      	mov	r3, r0
 8004786:	f04f 517d 	mov.w	r1, #1061158912	@ 0x3f400000
 800478a:	4618      	mov	r0, r3
 800478c:	f7fb fcf6 	bl	800017c <__addsf3>
 8004790:	4603      	mov	r3, r0
 8004792:	e040      	b.n	8004816 <EaseOutBounce+0x116>
    }
    else if (t < 2.5f / d1)
 8004794:	68b9      	ldr	r1, [r7, #8]
 8004796:	4824      	ldr	r0, [pc, #144]	@ (8004828 <EaseOutBounce+0x128>)
 8004798:	f7fb feac 	bl	80004f4 <__aeabi_fdiv>
 800479c:	4603      	mov	r3, r0
 800479e:	4619      	mov	r1, r3
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f7fb ff91 	bl	80006c8 <__aeabi_fcmplt>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d01a      	beq.n	80047e2 <EaseOutBounce+0xe2>
    {
        t -= 2.25f / d1;
 80047ac:	68b9      	ldr	r1, [r7, #8]
 80047ae:	481f      	ldr	r0, [pc, #124]	@ (800482c <EaseOutBounce+0x12c>)
 80047b0:	f7fb fea0 	bl	80004f4 <__aeabi_fdiv>
 80047b4:	4603      	mov	r3, r0
 80047b6:	4619      	mov	r1, r3
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f7fb fcdd 	bl	8000178 <__aeabi_fsub>
 80047be:	4603      	mov	r3, r0
 80047c0:	607b      	str	r3, [r7, #4]
        return n1 * t * t + 0.9375f;
 80047c2:	6879      	ldr	r1, [r7, #4]
 80047c4:	68f8      	ldr	r0, [r7, #12]
 80047c6:	f7fb fde1 	bl	800038c <__aeabi_fmul>
 80047ca:	4603      	mov	r3, r0
 80047cc:	6879      	ldr	r1, [r7, #4]
 80047ce:	4618      	mov	r0, r3
 80047d0:	f7fb fddc 	bl	800038c <__aeabi_fmul>
 80047d4:	4603      	mov	r3, r0
 80047d6:	4916      	ldr	r1, [pc, #88]	@ (8004830 <EaseOutBounce+0x130>)
 80047d8:	4618      	mov	r0, r3
 80047da:	f7fb fccf 	bl	800017c <__addsf3>
 80047de:	4603      	mov	r3, r0
 80047e0:	e019      	b.n	8004816 <EaseOutBounce+0x116>
    }
    else
    {
        t -= 2.625f / d1;
 80047e2:	68b9      	ldr	r1, [r7, #8]
 80047e4:	4813      	ldr	r0, [pc, #76]	@ (8004834 <EaseOutBounce+0x134>)
 80047e6:	f7fb fe85 	bl	80004f4 <__aeabi_fdiv>
 80047ea:	4603      	mov	r3, r0
 80047ec:	4619      	mov	r1, r3
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f7fb fcc2 	bl	8000178 <__aeabi_fsub>
 80047f4:	4603      	mov	r3, r0
 80047f6:	607b      	str	r3, [r7, #4]
        return n1 * t * t + 0.984375f;
 80047f8:	6879      	ldr	r1, [r7, #4]
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f7fb fdc6 	bl	800038c <__aeabi_fmul>
 8004800:	4603      	mov	r3, r0
 8004802:	6879      	ldr	r1, [r7, #4]
 8004804:	4618      	mov	r0, r3
 8004806:	f7fb fdc1 	bl	800038c <__aeabi_fmul>
 800480a:	4603      	mov	r3, r0
 800480c:	490a      	ldr	r1, [pc, #40]	@ (8004838 <EaseOutBounce+0x138>)
 800480e:	4618      	mov	r0, r3
 8004810:	f7fb fcb4 	bl	800017c <__addsf3>
 8004814:	4603      	mov	r3, r0
    }
}
 8004816:	4618      	mov	r0, r3
 8004818:	3710      	adds	r7, #16
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
 800481e:	bf00      	nop
 8004820:	40f20000 	.word	0x40f20000
 8004824:	40300000 	.word	0x40300000
 8004828:	40200000 	.word	0x40200000
 800482c:	40100000 	.word	0x40100000
 8004830:	3f700000 	.word	0x3f700000
 8004834:	40280000 	.word	0x40280000
 8004838:	3f7c0000 	.word	0x3f7c0000

0800483c <EaseInBounce>:

// 反弹缓动
static float EaseInBounce(float t)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b082      	sub	sp, #8
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
    return 1 - EaseOutBounce(1 - t);
 8004844:	6879      	ldr	r1, [r7, #4]
 8004846:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800484a:	f7fb fc95 	bl	8000178 <__aeabi_fsub>
 800484e:	4603      	mov	r3, r0
 8004850:	4618      	mov	r0, r3
 8004852:	f7ff ff55 	bl	8004700 <EaseOutBounce>
 8004856:	4603      	mov	r3, r0
 8004858:	4619      	mov	r1, r3
 800485a:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800485e:	f7fb fc8b 	bl	8000178 <__aeabi_fsub>
 8004862:	4603      	mov	r3, r0
}
 8004864:	4618      	mov	r0, r3
 8004866:	3708      	adds	r7, #8
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}

0800486c <EaseInOutBounce>:

static float EaseInOutBounce(float t)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b082      	sub	sp, #8
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
    if (t < 0.5f)
 8004874:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f7fb ff25 	bl	80006c8 <__aeabi_fcmplt>
 800487e:	4603      	mov	r3, r0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d010      	beq.n	80048a6 <EaseInOutBounce+0x3a>
        return EaseInBounce(t * 2) * 0.5f;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4619      	mov	r1, r3
 8004888:	4618      	mov	r0, r3
 800488a:	f7fb fc77 	bl	800017c <__addsf3>
 800488e:	4603      	mov	r3, r0
 8004890:	4618      	mov	r0, r3
 8004892:	f7ff ffd3 	bl	800483c <EaseInBounce>
 8004896:	4603      	mov	r3, r0
 8004898:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800489c:	4618      	mov	r0, r3
 800489e:	f7fb fd75 	bl	800038c <__aeabi_fmul>
 80048a2:	4603      	mov	r3, r0
 80048a4:	e01b      	b.n	80048de <EaseInOutBounce+0x72>
    return EaseOutBounce(t * 2 - 1) * 0.5f + 0.5f;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4619      	mov	r1, r3
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7fb fc66 	bl	800017c <__addsf3>
 80048b0:	4603      	mov	r3, r0
 80048b2:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7fb fc5e 	bl	8000178 <__aeabi_fsub>
 80048bc:	4603      	mov	r3, r0
 80048be:	4618      	mov	r0, r3
 80048c0:	f7ff ff1e 	bl	8004700 <EaseOutBounce>
 80048c4:	4603      	mov	r3, r0
 80048c6:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80048ca:	4618      	mov	r0, r3
 80048cc:	f7fb fd5e 	bl	800038c <__aeabi_fmul>
 80048d0:	4603      	mov	r3, r0
 80048d2:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80048d6:	4618      	mov	r0, r3
 80048d8:	f7fb fc50 	bl	800017c <__addsf3>
 80048dc:	4603      	mov	r3, r0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3708      	adds	r7, #8
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
	...

080048e8 <EaseInBack>:

// 背越式缓动
static float EaseInBack(float t)
{
 80048e8:	b590      	push	{r4, r7, lr}
 80048ea:	b085      	sub	sp, #20
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
    const float c1 = 1.70158f;
 80048f0:	4b15      	ldr	r3, [pc, #84]	@ (8004948 <EaseInBack+0x60>)
 80048f2:	60fb      	str	r3, [r7, #12]
    const float c3 = c1 + 1;
 80048f4:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80048f8:	68f8      	ldr	r0, [r7, #12]
 80048fa:	f7fb fc3f 	bl	800017c <__addsf3>
 80048fe:	4603      	mov	r3, r0
 8004900:	60bb      	str	r3, [r7, #8]

    return c3 * t * t * t - c1 * t * t;
 8004902:	6879      	ldr	r1, [r7, #4]
 8004904:	68b8      	ldr	r0, [r7, #8]
 8004906:	f7fb fd41 	bl	800038c <__aeabi_fmul>
 800490a:	4603      	mov	r3, r0
 800490c:	6879      	ldr	r1, [r7, #4]
 800490e:	4618      	mov	r0, r3
 8004910:	f7fb fd3c 	bl	800038c <__aeabi_fmul>
 8004914:	4603      	mov	r3, r0
 8004916:	6879      	ldr	r1, [r7, #4]
 8004918:	4618      	mov	r0, r3
 800491a:	f7fb fd37 	bl	800038c <__aeabi_fmul>
 800491e:	4603      	mov	r3, r0
 8004920:	461c      	mov	r4, r3
 8004922:	6879      	ldr	r1, [r7, #4]
 8004924:	68f8      	ldr	r0, [r7, #12]
 8004926:	f7fb fd31 	bl	800038c <__aeabi_fmul>
 800492a:	4603      	mov	r3, r0
 800492c:	6879      	ldr	r1, [r7, #4]
 800492e:	4618      	mov	r0, r3
 8004930:	f7fb fd2c 	bl	800038c <__aeabi_fmul>
 8004934:	4603      	mov	r3, r0
 8004936:	4619      	mov	r1, r3
 8004938:	4620      	mov	r0, r4
 800493a:	f7fb fc1d 	bl	8000178 <__aeabi_fsub>
 800493e:	4603      	mov	r3, r0
}
 8004940:	4618      	mov	r0, r3
 8004942:	3714      	adds	r7, #20
 8004944:	46bd      	mov	sp, r7
 8004946:	bd90      	pop	{r4, r7, pc}
 8004948:	3fd9cd60 	.word	0x3fd9cd60

0800494c <EaseOutBack>:

static float EaseOutBack(float t)
{
 800494c:	b590      	push	{r4, r7, lr}
 800494e:	b085      	sub	sp, #20
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
    const float c1 = 1.70158f;
 8004954:	4b1c      	ldr	r3, [pc, #112]	@ (80049c8 <EaseOutBack+0x7c>)
 8004956:	60fb      	str	r3, [r7, #12]
    const float c3 = c1 + 1;
 8004958:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800495c:	68f8      	ldr	r0, [r7, #12]
 800495e:	f7fb fc0d 	bl	800017c <__addsf3>
 8004962:	4603      	mov	r3, r0
 8004964:	60bb      	str	r3, [r7, #8]

    return 1 + c3 * powf(t - 1, 3) + c1 * powf(t - 1, 2);
 8004966:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f7fb fc04 	bl	8000178 <__aeabi_fsub>
 8004970:	4603      	mov	r3, r0
 8004972:	4916      	ldr	r1, [pc, #88]	@ (80049cc <EaseOutBack+0x80>)
 8004974:	4618      	mov	r0, r3
 8004976:	f004 fdd9 	bl	800952c <powf>
 800497a:	4603      	mov	r3, r0
 800497c:	68b9      	ldr	r1, [r7, #8]
 800497e:	4618      	mov	r0, r3
 8004980:	f7fb fd04 	bl	800038c <__aeabi_fmul>
 8004984:	4603      	mov	r3, r0
 8004986:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800498a:	4618      	mov	r0, r3
 800498c:	f7fb fbf6 	bl	800017c <__addsf3>
 8004990:	4603      	mov	r3, r0
 8004992:	461c      	mov	r4, r3
 8004994:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f7fb fbed 	bl	8000178 <__aeabi_fsub>
 800499e:	4603      	mov	r3, r0
 80049a0:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80049a4:	4618      	mov	r0, r3
 80049a6:	f004 fdc1 	bl	800952c <powf>
 80049aa:	4603      	mov	r3, r0
 80049ac:	68f9      	ldr	r1, [r7, #12]
 80049ae:	4618      	mov	r0, r3
 80049b0:	f7fb fcec 	bl	800038c <__aeabi_fmul>
 80049b4:	4603      	mov	r3, r0
 80049b6:	4619      	mov	r1, r3
 80049b8:	4620      	mov	r0, r4
 80049ba:	f7fb fbdf 	bl	800017c <__addsf3>
 80049be:	4603      	mov	r3, r0
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3714      	adds	r7, #20
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd90      	pop	{r4, r7, pc}
 80049c8:	3fd9cd60 	.word	0x3fd9cd60
 80049cc:	40400000 	.word	0x40400000

080049d0 <EaseInOutBack>:

static float EaseInOutBack(float t)
{
 80049d0:	b5b0      	push	{r4, r5, r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
    const float c1 = 1.70158f;
 80049d8:	4b40      	ldr	r3, [pc, #256]	@ (8004adc <EaseInOutBack+0x10c>)
 80049da:	60fb      	str	r3, [r7, #12]
    const float c2 = c1 * 1.525f;
 80049dc:	4940      	ldr	r1, [pc, #256]	@ (8004ae0 <EaseInOutBack+0x110>)
 80049de:	68f8      	ldr	r0, [r7, #12]
 80049e0:	f7fb fcd4 	bl	800038c <__aeabi_fmul>
 80049e4:	4603      	mov	r3, r0
 80049e6:	60bb      	str	r3, [r7, #8]

    if (t < 0.5f)
 80049e8:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f7fb fe6b 	bl	80006c8 <__aeabi_fcmplt>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d02c      	beq.n	8004a52 <EaseInOutBack+0x82>
        return (powf(2 * t, 2) * ((c2 + 1) * 2 * t - c2)) / 2;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4619      	mov	r1, r3
 80049fc:	4618      	mov	r0, r3
 80049fe:	f7fb fbbd 	bl	800017c <__addsf3>
 8004a02:	4603      	mov	r3, r0
 8004a04:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f004 fd8f 	bl	800952c <powf>
 8004a0e:	4604      	mov	r4, r0
 8004a10:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8004a14:	68b8      	ldr	r0, [r7, #8]
 8004a16:	f7fb fbb1 	bl	800017c <__addsf3>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f7fb fbac 	bl	800017c <__addsf3>
 8004a24:	4603      	mov	r3, r0
 8004a26:	6879      	ldr	r1, [r7, #4]
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f7fb fcaf 	bl	800038c <__aeabi_fmul>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	68b9      	ldr	r1, [r7, #8]
 8004a32:	4618      	mov	r0, r3
 8004a34:	f7fb fba0 	bl	8000178 <__aeabi_fsub>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	4620      	mov	r0, r4
 8004a3e:	f7fb fca5 	bl	800038c <__aeabi_fmul>
 8004a42:	4603      	mov	r3, r0
 8004a44:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f7fb fd53 	bl	80004f4 <__aeabi_fdiv>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	e03f      	b.n	8004ad2 <EaseInOutBack+0x102>
    return (powf(2 * t - 2, 2) * ((c2 + 1) * (t * 2 - 2) + c2) + 2) / 2;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4619      	mov	r1, r3
 8004a56:	4618      	mov	r0, r3
 8004a58:	f7fb fb90 	bl	800017c <__addsf3>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004a62:	4618      	mov	r0, r3
 8004a64:	f7fb fb88 	bl	8000178 <__aeabi_fsub>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f004 fd5c 	bl	800952c <powf>
 8004a74:	4604      	mov	r4, r0
 8004a76:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8004a7a:	68b8      	ldr	r0, [r7, #8]
 8004a7c:	f7fb fb7e 	bl	800017c <__addsf3>
 8004a80:	4603      	mov	r3, r0
 8004a82:	461d      	mov	r5, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	4619      	mov	r1, r3
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f7fb fb77 	bl	800017c <__addsf3>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004a94:	4618      	mov	r0, r3
 8004a96:	f7fb fb6f 	bl	8000178 <__aeabi_fsub>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	4628      	mov	r0, r5
 8004aa0:	f7fb fc74 	bl	800038c <__aeabi_fmul>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	68b9      	ldr	r1, [r7, #8]
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f7fb fb67 	bl	800017c <__addsf3>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	4620      	mov	r0, r4
 8004ab4:	f7fb fc6a 	bl	800038c <__aeabi_fmul>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f7fb fb5c 	bl	800017c <__addsf3>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004aca:	4618      	mov	r0, r3
 8004acc:	f7fb fd12 	bl	80004f4 <__aeabi_fdiv>
 8004ad0:	4603      	mov	r3, r0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3710      	adds	r7, #16
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bdb0      	pop	{r4, r5, r7, pc}
 8004ada:	bf00      	nop
 8004adc:	3fd9cd60 	.word	0x3fd9cd60
 8004ae0:	3fc33333 	.word	0x3fc33333

08004ae4 <EaseInSine>:

// 正弦缓动
static float EaseInSine(float t)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b082      	sub	sp, #8
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
    return 1 - cosf((t * 3.14159f) / 2);
 8004aec:	490c      	ldr	r1, [pc, #48]	@ (8004b20 <EaseInSine+0x3c>)
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f7fb fc4c 	bl	800038c <__aeabi_fmul>
 8004af4:	4603      	mov	r3, r0
 8004af6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004afa:	4618      	mov	r0, r3
 8004afc:	f7fb fcfa 	bl	80004f4 <__aeabi_fdiv>
 8004b00:	4603      	mov	r3, r0
 8004b02:	4618      	mov	r0, r3
 8004b04:	f004 fd7a 	bl	80095fc <cosf>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8004b10:	f7fb fb32 	bl	8000178 <__aeabi_fsub>
 8004b14:	4603      	mov	r3, r0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3708      	adds	r7, #8
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	40490fd0 	.word	0x40490fd0

08004b24 <EaseOutSine>:

static float EaseOutSine(float t)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b082      	sub	sp, #8
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
    return sinf((t * 3.14159f) / 2);
 8004b2c:	4909      	ldr	r1, [pc, #36]	@ (8004b54 <EaseOutSine+0x30>)
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f7fb fc2c 	bl	800038c <__aeabi_fmul>
 8004b34:	4603      	mov	r3, r0
 8004b36:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7fb fcda 	bl	80004f4 <__aeabi_fdiv>
 8004b40:	4603      	mov	r3, r0
 8004b42:	4618      	mov	r0, r3
 8004b44:	f004 fd92 	bl	800966c <sinf>
 8004b48:	4603      	mov	r3, r0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3708      	adds	r7, #8
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	40490fd0 	.word	0x40490fd0

08004b58 <EaseInOutSine>:

static float EaseInOutSine(float t)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
    return -(cosf(3.14159f * t) - 1) / 2;
 8004b60:	490d      	ldr	r1, [pc, #52]	@ (8004b98 <EaseInOutSine+0x40>)
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f7fb fc12 	bl	800038c <__aeabi_fmul>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f004 fd46 	bl	80095fc <cosf>
 8004b70:	4603      	mov	r3, r0
 8004b72:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8004b76:	4618      	mov	r0, r3
 8004b78:	f7fb fafe 	bl	8000178 <__aeabi_fsub>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8004b82:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004b86:	4618      	mov	r0, r3
 8004b88:	f7fb fcb4 	bl	80004f4 <__aeabi_fdiv>
 8004b8c:	4603      	mov	r3, r0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3708      	adds	r7, #8
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	40490fd0 	.word	0x40490fd0

08004b9c <GetEaseValue>:

static float GetEaseValue(float progress, EaseType_t easeType)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	70fb      	strb	r3, [r7, #3]
    switch (easeType)
 8004ba8:	78fb      	ldrb	r3, [r7, #3]
 8004baa:	2b18      	cmp	r3, #24
 8004bac:	f200 80b3 	bhi.w	8004d16 <GetEaseValue+0x17a>
 8004bb0:	a201      	add	r2, pc, #4	@ (adr r2, 8004bb8 <GetEaseValue+0x1c>)
 8004bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb6:	bf00      	nop
 8004bb8:	08004c1d 	.word	0x08004c1d
 8004bbc:	08004c27 	.word	0x08004c27
 8004bc0:	08004c31 	.word	0x08004c31
 8004bc4:	08004c3b 	.word	0x08004c3b
 8004bc8:	08004c45 	.word	0x08004c45
 8004bcc:	08004c4f 	.word	0x08004c4f
 8004bd0:	08004c59 	.word	0x08004c59
 8004bd4:	08004c63 	.word	0x08004c63
 8004bd8:	08004c6d 	.word	0x08004c6d
 8004bdc:	08004c77 	.word	0x08004c77
 8004be0:	08004c81 	.word	0x08004c81
 8004be4:	08004c8b 	.word	0x08004c8b
 8004be8:	08004c95 	.word	0x08004c95
 8004bec:	08004c9f 	.word	0x08004c9f
 8004bf0:	08004ca9 	.word	0x08004ca9
 8004bf4:	08004cb3 	.word	0x08004cb3
 8004bf8:	08004cbd 	.word	0x08004cbd
 8004bfc:	08004cc7 	.word	0x08004cc7
 8004c00:	08004cd1 	.word	0x08004cd1
 8004c04:	08004cdb 	.word	0x08004cdb
 8004c08:	08004ce5 	.word	0x08004ce5
 8004c0c:	08004cef 	.word	0x08004cef
 8004c10:	08004cf9 	.word	0x08004cf9
 8004c14:	08004d03 	.word	0x08004d03
 8004c18:	08004d0d 	.word	0x08004d0d
    {
    case EASE_LINEAR:
        return EaseLinear(progress);
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f7ff fa15 	bl	800404c <EaseLinear>
 8004c22:	4603      	mov	r3, r0
 8004c24:	e078      	b.n	8004d18 <GetEaseValue+0x17c>
    case EASE_IN_QUAD:
        return EaseInQuad(progress);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f7ff fa1a 	bl	8004060 <EaseInQuad>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	e073      	b.n	8004d18 <GetEaseValue+0x17c>
    case EASE_OUT_QUAD:
        return EaseOutQuad(progress);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f7ff fa22 	bl	800407a <EaseOutQuad>
 8004c36:	4603      	mov	r3, r0
 8004c38:	e06e      	b.n	8004d18 <GetEaseValue+0x17c>
    case EASE_INOUT_QUAD:
        return EaseInOutQuad(progress);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f7ff fa30 	bl	80040a0 <EaseInOutQuad>
 8004c40:	4603      	mov	r3, r0
 8004c42:	e069      	b.n	8004d18 <GetEaseValue+0x17c>
    case EASE_IN_CUBIC:
        return EaseInCubic(progress);
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f7ff fa5e 	bl	8004106 <EaseInCubic>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	e064      	b.n	8004d18 <GetEaseValue+0x17c>
    case EASE_OUT_CUBIC:
        return EaseOutCubic(progress);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f7ff fa6b 	bl	800412a <EaseOutCubic>
 8004c54:	4603      	mov	r3, r0
 8004c56:	e05f      	b.n	8004d18 <GetEaseValue+0x17c>
    case EASE_INOUT_CUBIC:
        return EaseInOutCubic(progress);
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f7ff fa85 	bl	8004168 <EaseInOutCubic>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	e05a      	b.n	8004d18 <GetEaseValue+0x17c>
    case EASE_IN_EXPO:
        return EaseInExpo(progress);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f7ff fad2 	bl	800420c <EaseInExpo>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	e055      	b.n	8004d18 <GetEaseValue+0x17c>
    case EASE_OUT_EXPO:
        return EaseOutExpo(progress);
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f7ff faf3 	bl	8004258 <EaseOutExpo>
 8004c72:	4603      	mov	r3, r0
 8004c74:	e050      	b.n	8004d18 <GetEaseValue+0x17c>
    case EASE_INOUT_EXPO:
        return EaseInOutExpo(progress);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f7ff fb14 	bl	80042a4 <EaseInOutExpo>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	e04b      	b.n	8004d18 <GetEaseValue+0x17c>
    case EASE_IN_CIRC:
        return EaseInCirc(progress);
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f7ff fb6f 	bl	8004364 <EaseInCirc>
 8004c86:	4603      	mov	r3, r0
 8004c88:	e046      	b.n	8004d18 <GetEaseValue+0x17c>
    case EASE_OUT_CIRC:
        return EaseOutCirc(progress);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f7ff fb87 	bl	800439e <EaseOutCirc>
 8004c90:	4603      	mov	r3, r0
 8004c92:	e041      	b.n	8004d18 <GetEaseValue+0x17c>
    case EASE_INOUT_CIRC:
        return EaseInOutCirc(progress);
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f7ff fba0 	bl	80043da <EaseInOutCirc>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	e03c      	b.n	8004d18 <GetEaseValue+0x17c>
    case EASE_IN_ELASTIC:
        return EaseInElastic(progress);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f7ff fbf6 	bl	8004490 <EaseInElastic>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	e037      	b.n	8004d18 <GetEaseValue+0x17c>
    case EASE_OUT_ELASTIC:
        return EaseOutElastic(progress);
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f7ff fc41 	bl	8004530 <EaseOutElastic>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	e032      	b.n	8004d18 <GetEaseValue+0x17c>
    case EASE_INOUT_ELASTIC:
        return EaseInOutElastic(progress);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f7ff fc8c 	bl	80045d0 <EaseInOutElastic>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	e02d      	b.n	8004d18 <GetEaseValue+0x17c>
    case EASE_IN_BOUNCE:
        return EaseInBounce(progress);
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f7ff fdbd 	bl	800483c <EaseInBounce>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	e028      	b.n	8004d18 <GetEaseValue+0x17c>
    case EASE_OUT_BOUNCE:
        return EaseOutBounce(progress);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f7ff fd1a 	bl	8004700 <EaseOutBounce>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	e023      	b.n	8004d18 <GetEaseValue+0x17c>
    case EASE_INOUT_BOUNCE:
        return EaseInOutBounce(progress);
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f7ff fdcb 	bl	800486c <EaseInOutBounce>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	e01e      	b.n	8004d18 <GetEaseValue+0x17c>
    case EASE_IN_BACK:
        return EaseInBack(progress);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f7ff fe04 	bl	80048e8 <EaseInBack>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	e019      	b.n	8004d18 <GetEaseValue+0x17c>
    case EASE_OUT_BACK:
        return EaseOutBack(progress);
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f7ff fe31 	bl	800494c <EaseOutBack>
 8004cea:	4603      	mov	r3, r0
 8004cec:	e014      	b.n	8004d18 <GetEaseValue+0x17c>
    case EASE_INOUT_BACK:
        return EaseInOutBack(progress);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f7ff fe6e 	bl	80049d0 <EaseInOutBack>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	e00f      	b.n	8004d18 <GetEaseValue+0x17c>
    case EASE_IN_SINE:
        return EaseInSine(progress);
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f7ff fef3 	bl	8004ae4 <EaseInSine>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	e00a      	b.n	8004d18 <GetEaseValue+0x17c>
    case EASE_OUT_SINE:
        return EaseOutSine(progress);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f7ff ff0e 	bl	8004b24 <EaseOutSine>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	e005      	b.n	8004d18 <GetEaseValue+0x17c>
    case EASE_INOUT_SINE:
        return EaseInOutSine(progress);
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f7ff ff23 	bl	8004b58 <EaseInOutSine>
 8004d12:	4603      	mov	r3, r0
 8004d14:	e000      	b.n	8004d18 <GetEaseValue+0x17c>
    default:
        return progress;
 8004d16:	687b      	ldr	r3, [r7, #4]
    }
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3708      	adds	r7, #8
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <OLED_InitAnimation>:

#pragma region ANIMATIONTWEENS
// 这里是底层动画实现
void OLED_InitAnimation(Animation_t *anim, float startValue, float endValue,
                        uint32_t duration, EaseType_t easeType)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]
 8004d2c:	603b      	str	r3, [r7, #0]
    anim->startTime = HAL_GetTick();
 8004d2e:	f000 fde1 	bl	80058f4 <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	601a      	str	r2, [r3, #0]
    anim->duration = duration;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	683a      	ldr	r2, [r7, #0]
 8004d3c:	605a      	str	r2, [r3, #4]
    anim->startValue = startValue;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	68ba      	ldr	r2, [r7, #8]
 8004d42:	609a      	str	r2, [r3, #8]
    anim->endValue = endValue;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	60da      	str	r2, [r3, #12]
    anim->currentValue = startValue;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	68ba      	ldr	r2, [r7, #8]
 8004d4e:	611a      	str	r2, [r3, #16]
    anim->isActive = 1;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2201      	movs	r2, #1
 8004d54:	751a      	strb	r2, [r3, #20]
    anim->easeType = easeType;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	7e3a      	ldrb	r2, [r7, #24]
 8004d5a:	755a      	strb	r2, [r3, #21]
}
 8004d5c:	bf00      	nop
 8004d5e:	3710      	adds	r7, #16
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <OLED_UpdateAnimation>:

// 更新动画状态，返回isActive的值
uint8_t OLED_UpdateAnimation(Animation_t *anim, uint32_t currentTime)
{
 8004d64:	b590      	push	{r4, r7, lr}
 8004d66:	b087      	sub	sp, #28
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
    if (!anim->isActive)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	7d1b      	ldrb	r3, [r3, #20]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d101      	bne.n	8004d7a <OLED_UpdateAnimation+0x16>
        return 0;
 8004d76:	2300      	movs	r3, #0
 8004d78:	e04d      	b.n	8004e16 <OLED_UpdateAnimation+0xb2>

    uint32_t elapsedTime = currentTime - anim->startTime;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	683a      	ldr	r2, [r7, #0]
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	617b      	str	r3, [r7, #20]
    // 动画完成
    if (elapsedTime >= anim->duration || anim->currentValue == anim->endValue) // 如果我的目标在指定的点上，也关闭isActive
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	697a      	ldr	r2, [r7, #20]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d20a      	bcs.n	8004da4 <OLED_UpdateAnimation+0x40>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	691a      	ldr	r2, [r3, #16]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	4619      	mov	r1, r3
 8004d98:	4610      	mov	r0, r2
 8004d9a:	f7fb fc8b 	bl	80006b4 <__aeabi_fcmpeq>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d008      	beq.n	8004db6 <OLED_UpdateAnimation+0x52>
    {
        anim->currentValue = anim->endValue;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	68da      	ldr	r2, [r3, #12]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	611a      	str	r2, [r3, #16]
        anim->isActive = 0;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	751a      	strb	r2, [r3, #20]
        return 0;
 8004db2:	2300      	movs	r3, #0
 8004db4:	e02f      	b.n	8004e16 <OLED_UpdateAnimation+0xb2>
    }

    // 计算当前进度 (0.0 - 1.0)
    float progress = (float)elapsedTime / anim->duration;
 8004db6:	6978      	ldr	r0, [r7, #20]
 8004db8:	f7fb fa90 	bl	80002dc <__aeabi_ui2f>
 8004dbc:	4604      	mov	r4, r0
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f7fb fa8a 	bl	80002dc <__aeabi_ui2f>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	4619      	mov	r1, r3
 8004dcc:	4620      	mov	r0, r4
 8004dce:	f7fb fb91 	bl	80004f4 <__aeabi_fdiv>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	613b      	str	r3, [r7, #16]

    // 应用缓动函数
    float easedProgress = GetEaseValue(progress, anim->easeType);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	7d5b      	ldrb	r3, [r3, #21]
 8004dda:	4619      	mov	r1, r3
 8004ddc:	6938      	ldr	r0, [r7, #16]
 8004dde:	f7ff fedd 	bl	8004b9c <GetEaseValue>
 8004de2:	60f8      	str	r0, [r7, #12]

    // 计算当前值
    anim->currentValue = anim->startValue + (anim->endValue - anim->startValue) * easedProgress;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	689c      	ldr	r4, [r3, #8]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	68da      	ldr	r2, [r3, #12]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	4619      	mov	r1, r3
 8004df2:	4610      	mov	r0, r2
 8004df4:	f7fb f9c0 	bl	8000178 <__aeabi_fsub>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	68f9      	ldr	r1, [r7, #12]
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f7fb fac5 	bl	800038c <__aeabi_fmul>
 8004e02:	4603      	mov	r3, r0
 8004e04:	4619      	mov	r1, r3
 8004e06:	4620      	mov	r0, r4
 8004e08:	f7fb f9b8 	bl	800017c <__addsf3>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	461a      	mov	r2, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	611a      	str	r2, [r3, #16]

    return 1;
 8004e14:	2301      	movs	r3, #1
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	371c      	adds	r7, #28
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd90      	pop	{r4, r7, pc}

08004e1e <OLED_GetAnimationValue>:

// 获取当前动画值
float OLED_GetAnimationValue(Animation_t *anim)
{
 8004e1e:	b480      	push	{r7}
 8004e20:	b083      	sub	sp, #12
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
    return anim->currentValue;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	691b      	ldr	r3, [r3, #16]
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	370c      	adds	r7, #12
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bc80      	pop	{r7}
 8004e32:	4770      	bx	lr

08004e34 <OLED_InitAnimationManager>:
AnimationManager_t Status_AnimationManager;
AnimationManager_t g_Title_AnimationManager; // 菜单动画管理器
AnimationManager_t g_AnimationManager; // 全局动画管理器

void OLED_InitAnimationManager(AnimationManager_t *manager) // 这是初始化一个动画管理器，填入你的manager名字，在系统初始化时候调用它
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b082      	sub	sp, #8
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
    manager->count = 0;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 25f0 	strb.w	r2, [r3, #1520]	@ 0x5f0
    memset(manager->taggedAnimations, 0, sizeof(manager->taggedAnimations));
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f44f 62be 	mov.w	r2, #1520	@ 0x5f0
 8004e4a:	2100      	movs	r1, #0
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f003 fb02 	bl	8008456 <memset>
}
 8004e52:	bf00      	nop
 8004e54:	3708      	adds	r7, #8
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}

08004e5a <OLED_FindTaggedAnimation>:

TaggedAnimation_t *OLED_FindTaggedAnimation(AnimationManager_t *manager, const char *tag) // 查找对应manager的标签对应的动画tag
{
 8004e5a:	b580      	push	{r7, lr}
 8004e5c:	b084      	sub	sp, #16
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
 8004e62:	6039      	str	r1, [r7, #0]
    for (uint8_t i = 0; i < manager->count; i++)
 8004e64:	2300      	movs	r3, #0
 8004e66:	73fb      	strb	r3, [r7, #15]
 8004e68:	e016      	b.n	8004e98 <OLED_FindTaggedAnimation+0x3e>
    {
        if (strcmp(manager->taggedAnimations[i].tag, tag) == 0)
 8004e6a:	7bfb      	ldrb	r3, [r7, #15]
 8004e6c:	224c      	movs	r2, #76	@ 0x4c
 8004e6e:	fb02 f303 	mul.w	r3, r2, r3
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	4413      	add	r3, r2
 8004e76:	6839      	ldr	r1, [r7, #0]
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f7fb f967 	bl	800014c <strcmp>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d106      	bne.n	8004e92 <OLED_FindTaggedAnimation+0x38>
        {
            return &manager->taggedAnimations[i];
 8004e84:	7bfb      	ldrb	r3, [r7, #15]
 8004e86:	224c      	movs	r2, #76	@ 0x4c
 8004e88:	fb02 f303 	mul.w	r3, r2, r3
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	4413      	add	r3, r2
 8004e90:	e009      	b.n	8004ea6 <OLED_FindTaggedAnimation+0x4c>
    for (uint8_t i = 0; i < manager->count; i++)
 8004e92:	7bfb      	ldrb	r3, [r7, #15]
 8004e94:	3301      	adds	r3, #1
 8004e96:	73fb      	strb	r3, [r7, #15]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f893 35f0 	ldrb.w	r3, [r3, #1520]	@ 0x5f0
 8004e9e:	7bfa      	ldrb	r2, [r7, #15]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d3e2      	bcc.n	8004e6a <OLED_FindTaggedAnimation+0x10>
        }
    }
    return NULL;
 8004ea4:	2300      	movs	r3, #0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}

08004eae <OLED_GetObjectPosition>:

uint8_t OLED_GetObjectPosition(AnimationManager_t *manager, const char *tag, float *x, float *y) // 获取tag当前位置
{
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b086      	sub	sp, #24
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	60f8      	str	r0, [r7, #12]
 8004eb6:	60b9      	str	r1, [r7, #8]
 8004eb8:	607a      	str	r2, [r7, #4]
 8004eba:	603b      	str	r3, [r7, #0]
    TaggedAnimation_t *anim = OLED_FindTaggedAnimation(manager, tag);
 8004ebc:	68b9      	ldr	r1, [r7, #8]
 8004ebe:	68f8      	ldr	r0, [r7, #12]
 8004ec0:	f7ff ffcb 	bl	8004e5a <OLED_FindTaggedAnimation>
 8004ec4:	6178      	str	r0, [r7, #20]
    if (anim)
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d00f      	beq.n	8004eec <OLED_GetObjectPosition+0x3e>
    {
        if (x)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d003      	beq.n	8004eda <OLED_GetObjectPosition+0x2c>
            *x = anim->currentX;
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	601a      	str	r2, [r3, #0]
        if (y)
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d003      	beq.n	8004ee8 <OLED_GetObjectPosition+0x3a>
            *y = anim->currentY;
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	601a      	str	r2, [r3, #0]
        return 1;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e000      	b.n	8004eee <OLED_GetObjectPosition+0x40>
    }
    return 0;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3718      	adds	r7, #24
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}

08004ef6 <OLED_MoveObject>:

// 移动指定标签的对象
void OLED_MoveObject(AnimationManager_t *manager, const char *tag,
                     float startX, float startY, float targetX, float targetY,
                     uint32_t duration, EaseType_t easeType) // 这个函数是用来移动一个对象的，tag是对象的标签，startX和startY是起始坐标，targetX和targetY是目标坐标，duration是动画持续时间，easeType是缓动类型
{
 8004ef6:	b580      	push	{r7, lr}
 8004ef8:	b088      	sub	sp, #32
 8004efa:	af02      	add	r7, sp, #8
 8004efc:	60f8      	str	r0, [r7, #12]
 8004efe:	60b9      	str	r1, [r7, #8]
 8004f00:	607a      	str	r2, [r7, #4]
 8004f02:	603b      	str	r3, [r7, #0]
    // 查找已存在的动画
    TaggedAnimation_t *anim = OLED_FindTaggedAnimation(manager, tag);
 8004f04:	68b9      	ldr	r1, [r7, #8]
 8004f06:	68f8      	ldr	r0, [r7, #12]
 8004f08:	f7ff ffa7 	bl	8004e5a <OLED_FindTaggedAnimation>
 8004f0c:	6178      	str	r0, [r7, #20]

    // 如果没找到并且还有可用槽位，创建新的动画
    if (anim == NULL)
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d122      	bne.n	8004f5a <OLED_MoveObject+0x64>
    {
        if (manager->count >= MAX_ANIMATIONS)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f893 35f0 	ldrb.w	r3, [r3, #1520]	@ 0x5f0
 8004f1a:	2b13      	cmp	r3, #19
 8004f1c:	d838      	bhi.n	8004f90 <OLED_MoveObject+0x9a>
            return; // 动画已满，无法添加

        anim = &manager->taggedAnimations[manager->count++];
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f893 35f0 	ldrb.w	r3, [r3, #1520]	@ 0x5f0
 8004f24:	1c5a      	adds	r2, r3, #1
 8004f26:	b2d1      	uxtb	r1, r2
 8004f28:	68fa      	ldr	r2, [r7, #12]
 8004f2a:	f882 15f0 	strb.w	r1, [r2, #1520]	@ 0x5f0
 8004f2e:	461a      	mov	r2, r3
 8004f30:	234c      	movs	r3, #76	@ 0x4c
 8004f32:	fb02 f303 	mul.w	r3, r2, r3
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	4413      	add	r3, r2
 8004f3a:	617b      	str	r3, [r7, #20]
        strncpy(anim->tag, tag, sizeof(anim->tag) - 1);
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	220f      	movs	r2, #15
 8004f40:	68b9      	ldr	r1, [r7, #8]
 8004f42:	4618      	mov	r0, r3
 8004f44:	f003 fa8f 	bl	8008466 <strncpy>
        anim->tag[sizeof(anim->tag) - 1] = '\0'; // 确保字符串结束
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	73da      	strb	r2, [r3, #15]
        anim->currentX = startX;
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	645a      	str	r2, [r3, #68]	@ 0x44
        anim->currentY = startY;
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	683a      	ldr	r2, [r7, #0]
 8004f58:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    // 初始化或更新X和Y坐标的动画
    OLED_InitAnimation(&anim->xAnimation, startX, targetX, duration, easeType);
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	f103 0010 	add.w	r0, r3, #16
 8004f60:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004f64:	9300      	str	r3, [sp, #0]
 8004f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f68:	6a3a      	ldr	r2, [r7, #32]
 8004f6a:	6879      	ldr	r1, [r7, #4]
 8004f6c:	f7ff fed8 	bl	8004d20 <OLED_InitAnimation>
    OLED_InitAnimation(&anim->yAnimation, startY, targetY, duration, easeType);
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8004f76:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004f7a:	9300      	str	r3, [sp, #0]
 8004f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f80:	6839      	ldr	r1, [r7, #0]
 8004f82:	f7ff fecd 	bl	8004d20 <OLED_InitAnimation>
    anim->isActive = 1;
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f8e:	e000      	b.n	8004f92 <OLED_MoveObject+0x9c>
            return; // 动画已满，无法添加
 8004f90:	bf00      	nop
}
 8004f92:	3718      	adds	r7, #24
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <OLED_UpdateAnimationManager>:

// 更新manager里面的所有动画!
void OLED_UpdateAnimationManager(AnimationManager_t *manager) //! 这里需要使用OLED_UpdateDisplayVSync()来更新显示
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b086      	sub	sp, #24
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
    uint32_t currentTime = HAL_GetTick();
 8004fa0:	f000 fca8 	bl	80058f4 <HAL_GetTick>
 8004fa4:	6138      	str	r0, [r7, #16]

    for (uint8_t i = 0; i < manager->count; i++)
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	75fb      	strb	r3, [r7, #23]
 8004faa:	e03a      	b.n	8005022 <OLED_UpdateAnimationManager+0x8a>
    {
        TaggedAnimation_t *anim = &manager->taggedAnimations[i];
 8004fac:	7dfb      	ldrb	r3, [r7, #23]
 8004fae:	224c      	movs	r2, #76	@ 0x4c
 8004fb0:	fb02 f303 	mul.w	r3, r2, r3
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	4413      	add	r3, r2
 8004fb8:	60fb      	str	r3, [r7, #12]
        if (!anim->isActive)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d02a      	beq.n	800501a <OLED_UpdateAnimationManager+0x82>
            continue;

        uint8_t activeX = OLED_UpdateAnimation(&anim->xAnimation, currentTime);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	3310      	adds	r3, #16
 8004fc8:	6939      	ldr	r1, [r7, #16]
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f7ff feca 	bl	8004d64 <OLED_UpdateAnimation>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	72fb      	strb	r3, [r7, #11]
        uint8_t activeY = OLED_UpdateAnimation(&anim->yAnimation, currentTime);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	3328      	adds	r3, #40	@ 0x28
 8004fd8:	6939      	ldr	r1, [r7, #16]
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f7ff fec2 	bl	8004d64 <OLED_UpdateAnimation>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	72bb      	strb	r3, [r7, #10]

        anim->currentX = OLED_GetAnimationValue(&anim->xAnimation);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	3310      	adds	r3, #16
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f7ff ff18 	bl	8004e1e <OLED_GetAnimationValue>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	645a      	str	r2, [r3, #68]	@ 0x44
        anim->currentY = OLED_GetAnimationValue(&anim->yAnimation);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	3328      	adds	r3, #40	@ 0x28
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f7ff ff10 	bl	8004e1e <OLED_GetAnimationValue>
 8004ffe:	4602      	mov	r2, r0
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	649a      	str	r2, [r3, #72]	@ 0x48

        // 如果两个动画都结束，则标记该对象动画为非活跃
        if (!activeX && !activeY)
 8005004:	7afb      	ldrb	r3, [r7, #11]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d108      	bne.n	800501c <OLED_UpdateAnimationManager+0x84>
 800500a:	7abb      	ldrb	r3, [r7, #10]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d105      	bne.n	800501c <OLED_UpdateAnimationManager+0x84>
            anim->isActive = 0;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2200      	movs	r2, #0
 8005014:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005018:	e000      	b.n	800501c <OLED_UpdateAnimationManager+0x84>
            continue;
 800501a:	bf00      	nop
    for (uint8_t i = 0; i < manager->count; i++)
 800501c:	7dfb      	ldrb	r3, [r7, #23]
 800501e:	3301      	adds	r3, #1
 8005020:	75fb      	strb	r3, [r7, #23]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f893 35f0 	ldrb.w	r3, [r3, #1520]	@ 0x5f0
 8005028:	7dfa      	ldrb	r2, [r7, #23]
 800502a:	429a      	cmp	r2, r3
 800502c:	d3be      	bcc.n	8004fac <OLED_UpdateAnimationManager+0x14>
    }
}
 800502e:	bf00      	nop
 8005030:	bf00      	nop
 8005032:	3718      	adds	r7, #24
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <OLED_GetAnimationStates>:

uint8_t OLED_GetAnimationStates(AnimationManager_t *manager, const char *tag) // 返回值是1表示活跃，0表示非活跃
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
    TaggedAnimation_t *anim = OLED_FindTaggedAnimation(manager, tag);
 8005042:	6839      	ldr	r1, [r7, #0]
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f7ff ff08 	bl	8004e5a <OLED_FindTaggedAnimation>
 800504a:	60f8      	str	r0, [r7, #12]
    if (anim)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d003      	beq.n	800505a <OLED_GetAnimationStates+0x22>
    {
        return anim->isActive;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005058:	e000      	b.n	800505c <OLED_GetAnimationStates+0x24>
    }
    return 0; // 如果没有找到，返回0表示非活跃
 800505a:	2300      	movs	r3, #0
}
 800505c:	4618      	mov	r0, r3
 800505e:	3710      	adds	r7, #16
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <OLED_DoTweenObject>:

// 移动指定标签的对象到目标坐标。
// 如果对象已在向同一目标动画且动画处于活动状态，则不执行任何操作。
// 否则，它会中断当前动画（如果活动）并从当前位置开始新的动画。
void OLED_DoTweenObject(AnimationManager_t *manager, const char *tag, float targetX, float targetY, uint32_t duration, EaseType_t easeType)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b08a      	sub	sp, #40	@ 0x28
 8005068:	af04      	add	r7, sp, #16
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	607a      	str	r2, [r7, #4]
 8005070:	603b      	str	r3, [r7, #0]
    TaggedAnimation_t *anim = OLED_FindTaggedAnimation(manager, tag);
 8005072:	68b9      	ldr	r1, [r7, #8]
 8005074:	68f8      	ldr	r0, [r7, #12]
 8005076:	f7ff fef0 	bl	8004e5a <OLED_FindTaggedAnimation>
 800507a:	6178      	str	r0, [r7, #20]

    if (anim == NULL)
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d029      	beq.n	80050d6 <OLED_DoTweenObject+0x72>
        // 但这需要为新对象定义 initialX, initialY。
        return;
    }

    // 检查动画是否已处于活动状态并且已经朝向相同的目标
    if (anim->isActive &&
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005088:	2b00      	cmp	r3, #0
 800508a:	d011      	beq.n	80050b0 <OLED_DoTweenObject+0x4c>
        anim->xAnimation.endValue == targetX &&
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	69db      	ldr	r3, [r3, #28]
    if (anim->isActive &&
 8005090:	4619      	mov	r1, r3
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f7fb fb0e 	bl	80006b4 <__aeabi_fcmpeq>
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d008      	beq.n	80050b0 <OLED_DoTweenObject+0x4c>
        anim->yAnimation.endValue == targetY)
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
        anim->xAnimation.endValue == targetX &&
 80050a2:	4619      	mov	r1, r3
 80050a4:	6838      	ldr	r0, [r7, #0]
 80050a6:	f7fb fb05 	bl	80006b4 <__aeabi_fcmpeq>
 80050aa:	4603      	mov	r3, r0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d114      	bne.n	80050da <OLED_DoTweenObject+0x76>
        return;
    }

    // 否则，（重新）启动动画到新目标
    // OLED_MoveObject 将从 anim->currentX, anim->currentY 开始动画
    OLED_MoveObject(manager, tag, anim->currentX, anim->currentY, targetX, targetY, duration, easeType);
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 80050b8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80050bc:	9303      	str	r3, [sp, #12]
 80050be:	6a3b      	ldr	r3, [r7, #32]
 80050c0:	9302      	str	r3, [sp, #8]
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	9301      	str	r3, [sp, #4]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	9300      	str	r3, [sp, #0]
 80050ca:	460b      	mov	r3, r1
 80050cc:	68b9      	ldr	r1, [r7, #8]
 80050ce:	68f8      	ldr	r0, [r7, #12]
 80050d0:	f7ff ff11 	bl	8004ef6 <OLED_MoveObject>
 80050d4:	e002      	b.n	80050dc <OLED_DoTweenObject+0x78>
        return;
 80050d6:	bf00      	nop
 80050d8:	e000      	b.n	80050dc <OLED_DoTweenObject+0x78>
        return;
 80050da:	bf00      	nop
}
 80050dc:	3718      	adds	r7, #24
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}

080050e2 <OLED_DrawTitleBar>:

#pragma region OLED_EPICFUL_UI

// 绘制UI标题栏
void OLED_DrawTitleBar(char *title) // 确保标题长度不超过22个字符 //! UPDATEDISPLAY REQUIRED
{
 80050e2:	b580      	push	{r7, lr}
 80050e4:	b086      	sub	sp, #24
 80050e6:	af02      	add	r7, sp, #8
 80050e8:	6078      	str	r0, [r7, #4]
    unsigned char titleLength = strlen(title) * 6;
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f7fb f838 	bl	8000160 <strlen>
 80050f0:	4603      	mov	r3, r0
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	461a      	mov	r2, r3
 80050f6:	0052      	lsls	r2, r2, #1
 80050f8:	4413      	add	r3, r2
 80050fa:	005b      	lsls	r3, r3, #1
 80050fc:	73fb      	strb	r3, [r7, #15]

    // 绘制标题栏背景 (白色填充)
    OLED_DrawFilledRectangle(0, 0, OLED_WIDTH, 8, 1);
 80050fe:	2301      	movs	r3, #1
 8005100:	9300      	str	r3, [sp, #0]
 8005102:	2308      	movs	r3, #8
 8005104:	2280      	movs	r2, #128	@ 0x80
 8005106:	2100      	movs	r1, #0
 8005108:	2000      	movs	r0, #0
 800510a:	f000 f810 	bl	800512e <OLED_DrawFilledRectangle>

    // 显示标题 (黑底白字，反色效果)
    OLED_DisplayStringInverted((OLED_WIDTH - titleLength) / 2, 0, title, 1);
 800510e:	7bfb      	ldrb	r3, [r7, #15]
 8005110:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8005114:	0fda      	lsrs	r2, r3, #31
 8005116:	4413      	add	r3, r2
 8005118:	105b      	asrs	r3, r3, #1
 800511a:	b218      	sxth	r0, r3
 800511c:	2301      	movs	r3, #1
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	2100      	movs	r1, #0
 8005122:	f7fd fa10 	bl	8002546 <OLED_DisplayStringInverted>
}
 8005126:	bf00      	nop
 8005128:	3710      	adds	r7, #16
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}

0800512e <OLED_DrawFilledRectangle>:
    }
}

// 绘制填充矩形
void OLED_DrawFilledRectangle(int16_t x, int16_t y, uint8_t width, uint8_t height, uint8_t color) //! UPDATEDISPLAY REQUIRED
{
 800512e:	b590      	push	{r4, r7, lr}
 8005130:	b087      	sub	sp, #28
 8005132:	af00      	add	r7, sp, #0
 8005134:	4604      	mov	r4, r0
 8005136:	4608      	mov	r0, r1
 8005138:	4611      	mov	r1, r2
 800513a:	461a      	mov	r2, r3
 800513c:	4623      	mov	r3, r4
 800513e:	80fb      	strh	r3, [r7, #6]
 8005140:	4603      	mov	r3, r0
 8005142:	80bb      	strh	r3, [r7, #4]
 8005144:	460b      	mov	r3, r1
 8005146:	70fb      	strb	r3, [r7, #3]
 8005148:	4613      	mov	r3, r2
 800514a:	70bb      	strb	r3, [r7, #2]
    // Initial check for zero dimensions
    if (width == 0 || height == 0)
 800514c:	78fb      	ldrb	r3, [r7, #3]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d07e      	beq.n	8005250 <OLED_DrawFilledRectangle+0x122>
 8005152:	78bb      	ldrb	r3, [r7, #2]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d07b      	beq.n	8005250 <OLED_DrawFilledRectangle+0x122>
    {
        return;
    }

    // Use int16_t for width and height internally for clipping calculations
    int16_t current_width = width;
 8005158:	78fb      	ldrb	r3, [r7, #3]
 800515a:	82fb      	strh	r3, [r7, #22]
    int16_t current_height = height;
 800515c:	78bb      	ldrb	r3, [r7, #2]
 800515e:	82bb      	strh	r3, [r7, #20]

    // Clip left edge: if x is negative, adjust width and set x to 0
    if (x < 0)
 8005160:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005164:	2b00      	cmp	r3, #0
 8005166:	da06      	bge.n	8005176 <OLED_DrawFilledRectangle+0x48>
    {
        current_width += x; // x is negative, so this reduces width
 8005168:	8afa      	ldrh	r2, [r7, #22]
 800516a:	88fb      	ldrh	r3, [r7, #6]
 800516c:	4413      	add	r3, r2
 800516e:	b29b      	uxth	r3, r3
 8005170:	82fb      	strh	r3, [r7, #22]
        x = 0;
 8005172:	2300      	movs	r3, #0
 8005174:	80fb      	strh	r3, [r7, #6]
    }

    // Clip top edge: if y is negative, adjust height and set y to 0
    if (y < 0)
 8005176:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800517a:	2b00      	cmp	r3, #0
 800517c:	da06      	bge.n	800518c <OLED_DrawFilledRectangle+0x5e>
    {
        current_height += y; // y is negative, so this reduces height
 800517e:	8aba      	ldrh	r2, [r7, #20]
 8005180:	88bb      	ldrh	r3, [r7, #4]
 8005182:	4413      	add	r3, r2
 8005184:	b29b      	uxth	r3, r3
 8005186:	82bb      	strh	r3, [r7, #20]
        y = 0;
 8005188:	2300      	movs	r3, #0
 800518a:	80bb      	strh	r3, [r7, #4]
    }

    // If width or height became non-positive after left/top clipping, nothing to draw
    if (current_width <= 0 || current_height <= 0)
 800518c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005190:	2b00      	cmp	r3, #0
 8005192:	dd5f      	ble.n	8005254 <OLED_DrawFilledRectangle+0x126>
 8005194:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005198:	2b00      	cmp	r3, #0
 800519a:	dd5b      	ble.n	8005254 <OLED_DrawFilledRectangle+0x126>
        return;
    }

    // Check if the adjusted rectangle is entirely off-screen to the right or bottom
    // At this point, x and y are >= 0.
    if (x >= OLED_WIDTH || y >= OLED_HEIGHT)
 800519c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051a0:	2b7f      	cmp	r3, #127	@ 0x7f
 80051a2:	dc59      	bgt.n	8005258 <OLED_DrawFilledRectangle+0x12a>
 80051a4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80051a8:	2b3f      	cmp	r3, #63	@ 0x3f
 80051aa:	dc55      	bgt.n	8005258 <OLED_DrawFilledRectangle+0x12a>
    {
        return;
    }

    // Clip right edge: if x + current_width extends beyond OLED_WIDTH
    if (x + current_width > OLED_WIDTH)
 80051ac:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80051b0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80051b4:	4413      	add	r3, r2
 80051b6:	2b80      	cmp	r3, #128	@ 0x80
 80051b8:	dd04      	ble.n	80051c4 <OLED_DrawFilledRectangle+0x96>
    {
        current_width = OLED_WIDTH - x;
 80051ba:	88fb      	ldrh	r3, [r7, #6]
 80051bc:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	82fb      	strh	r3, [r7, #22]
    }

    // Clip bottom edge: if y + current_height extends beyond OLED_HEIGHT
    if (y + current_height > OLED_HEIGHT)
 80051c4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80051c8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80051cc:	4413      	add	r3, r2
 80051ce:	2b40      	cmp	r3, #64	@ 0x40
 80051d0:	dd04      	ble.n	80051dc <OLED_DrawFilledRectangle+0xae>
    {
        current_height = OLED_HEIGHT - y;
 80051d2:	88bb      	ldrh	r3, [r7, #4]
 80051d4:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 80051d8:	b29b      	uxth	r3, r3
 80051da:	82bb      	strh	r3, [r7, #20]
    }

    // If width or height became non-positive after right/bottom clipping, nothing to draw
    if (current_width <= 0 || current_height <= 0)
 80051dc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	dd3b      	ble.n	800525c <OLED_DrawFilledRectangle+0x12e>
 80051e4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	dd37      	ble.n	800525c <OLED_DrawFilledRectangle+0x12e>
    {
        return;
    }

    // Cast coordinates and dimensions to uint8_t for drawing
    uint8_t final_x = (uint8_t)x;
 80051ec:	88fb      	ldrh	r3, [r7, #6]
 80051ee:	747b      	strb	r3, [r7, #17]
    uint8_t final_y = (uint8_t)y;
 80051f0:	88bb      	ldrh	r3, [r7, #4]
 80051f2:	743b      	strb	r3, [r7, #16]
    uint8_t final_width = (uint8_t)current_width;
 80051f4:	8afb      	ldrh	r3, [r7, #22]
 80051f6:	73fb      	strb	r3, [r7, #15]
    uint8_t final_height = (uint8_t)current_height;
 80051f8:	8abb      	ldrh	r3, [r7, #20]
 80051fa:	73bb      	strb	r3, [r7, #14]

    uint8_t x2 = final_x + final_width - 1;
 80051fc:	7c7a      	ldrb	r2, [r7, #17]
 80051fe:	7bfb      	ldrb	r3, [r7, #15]
 8005200:	4413      	add	r3, r2
 8005202:	b2db      	uxtb	r3, r3
 8005204:	3b01      	subs	r3, #1
 8005206:	737b      	strb	r3, [r7, #13]
    uint8_t y2 = final_y + final_height - 1;
 8005208:	7c3a      	ldrb	r2, [r7, #16]
 800520a:	7bbb      	ldrb	r3, [r7, #14]
 800520c:	4413      	add	r3, r2
 800520e:	b2db      	uxtb	r3, r3
 8005210:	3b01      	subs	r3, #1
 8005212:	733b      	strb	r3, [r7, #12]

    // 逐像素填充
    for (uint8_t j = final_y; j <= y2; j++)
 8005214:	7c3b      	ldrb	r3, [r7, #16]
 8005216:	74fb      	strb	r3, [r7, #19]
 8005218:	e015      	b.n	8005246 <OLED_DrawFilledRectangle+0x118>
    {
        for (uint8_t i = final_x; i <= x2; i++)
 800521a:	7c7b      	ldrb	r3, [r7, #17]
 800521c:	74bb      	strb	r3, [r7, #18]
 800521e:	e00b      	b.n	8005238 <OLED_DrawFilledRectangle+0x10a>
        {
            OLED_WritePixel(i, j, color);
 8005220:	7cbb      	ldrb	r3, [r7, #18]
 8005222:	b21b      	sxth	r3, r3
 8005224:	7cfa      	ldrb	r2, [r7, #19]
 8005226:	b211      	sxth	r1, r2
 8005228:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800522c:	4618      	mov	r0, r3
 800522e:	f7fc fe1d 	bl	8001e6c <OLED_WritePixel>
        for (uint8_t i = final_x; i <= x2; i++)
 8005232:	7cbb      	ldrb	r3, [r7, #18]
 8005234:	3301      	adds	r3, #1
 8005236:	74bb      	strb	r3, [r7, #18]
 8005238:	7cba      	ldrb	r2, [r7, #18]
 800523a:	7b7b      	ldrb	r3, [r7, #13]
 800523c:	429a      	cmp	r2, r3
 800523e:	d9ef      	bls.n	8005220 <OLED_DrawFilledRectangle+0xf2>
    for (uint8_t j = final_y; j <= y2; j++)
 8005240:	7cfb      	ldrb	r3, [r7, #19]
 8005242:	3301      	adds	r3, #1
 8005244:	74fb      	strb	r3, [r7, #19]
 8005246:	7cfa      	ldrb	r2, [r7, #19]
 8005248:	7b3b      	ldrb	r3, [r7, #12]
 800524a:	429a      	cmp	r2, r3
 800524c:	d9e5      	bls.n	800521a <OLED_DrawFilledRectangle+0xec>
 800524e:	e006      	b.n	800525e <OLED_DrawFilledRectangle+0x130>
        return;
 8005250:	bf00      	nop
 8005252:	e004      	b.n	800525e <OLED_DrawFilledRectangle+0x130>
        return;
 8005254:	bf00      	nop
 8005256:	e002      	b.n	800525e <OLED_DrawFilledRectangle+0x130>
        return;
 8005258:	bf00      	nop
 800525a:	e000      	b.n	800525e <OLED_DrawFilledRectangle+0x130>
        return;
 800525c:	bf00      	nop
        }
    }
}
 800525e:	371c      	adds	r7, #28
 8005260:	46bd      	mov	sp, r7
 8005262:	bd90      	pop	{r4, r7, pc}

08005264 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005264:	b480      	push	{r7}
 8005266:	b085      	sub	sp, #20
 8005268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800526a:	4b15      	ldr	r3, [pc, #84]	@ (80052c0 <HAL_MspInit+0x5c>)
 800526c:	699b      	ldr	r3, [r3, #24]
 800526e:	4a14      	ldr	r2, [pc, #80]	@ (80052c0 <HAL_MspInit+0x5c>)
 8005270:	f043 0301 	orr.w	r3, r3, #1
 8005274:	6193      	str	r3, [r2, #24]
 8005276:	4b12      	ldr	r3, [pc, #72]	@ (80052c0 <HAL_MspInit+0x5c>)
 8005278:	699b      	ldr	r3, [r3, #24]
 800527a:	f003 0301 	and.w	r3, r3, #1
 800527e:	60bb      	str	r3, [r7, #8]
 8005280:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005282:	4b0f      	ldr	r3, [pc, #60]	@ (80052c0 <HAL_MspInit+0x5c>)
 8005284:	69db      	ldr	r3, [r3, #28]
 8005286:	4a0e      	ldr	r2, [pc, #56]	@ (80052c0 <HAL_MspInit+0x5c>)
 8005288:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800528c:	61d3      	str	r3, [r2, #28]
 800528e:	4b0c      	ldr	r3, [pc, #48]	@ (80052c0 <HAL_MspInit+0x5c>)
 8005290:	69db      	ldr	r3, [r3, #28]
 8005292:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005296:	607b      	str	r3, [r7, #4]
 8005298:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800529a:	4b0a      	ldr	r3, [pc, #40]	@ (80052c4 <HAL_MspInit+0x60>)
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	60fb      	str	r3, [r7, #12]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80052a6:	60fb      	str	r3, [r7, #12]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80052ae:	60fb      	str	r3, [r7, #12]
 80052b0:	4a04      	ldr	r2, [pc, #16]	@ (80052c4 <HAL_MspInit+0x60>)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80052b6:	bf00      	nop
 80052b8:	3714      	adds	r7, #20
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bc80      	pop	{r7}
 80052be:	4770      	bx	lr
 80052c0:	40021000 	.word	0x40021000
 80052c4:	40010000 	.word	0x40010000

080052c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80052c8:	b480      	push	{r7}
 80052ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80052cc:	bf00      	nop
 80052ce:	e7fd      	b.n	80052cc <NMI_Handler+0x4>

080052d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80052d0:	b480      	push	{r7}
 80052d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80052d4:	bf00      	nop
 80052d6:	e7fd      	b.n	80052d4 <HardFault_Handler+0x4>

080052d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80052d8:	b480      	push	{r7}
 80052da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80052dc:	bf00      	nop
 80052de:	e7fd      	b.n	80052dc <MemManage_Handler+0x4>

080052e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80052e0:	b480      	push	{r7}
 80052e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80052e4:	bf00      	nop
 80052e6:	e7fd      	b.n	80052e4 <BusFault_Handler+0x4>

080052e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80052e8:	b480      	push	{r7}
 80052ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80052ec:	bf00      	nop
 80052ee:	e7fd      	b.n	80052ec <UsageFault_Handler+0x4>

080052f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80052f0:	b480      	push	{r7}
 80052f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80052f4:	bf00      	nop
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bc80      	pop	{r7}
 80052fa:	4770      	bx	lr

080052fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80052fc:	b480      	push	{r7}
 80052fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005300:	bf00      	nop
 8005302:	46bd      	mov	sp, r7
 8005304:	bc80      	pop	{r7}
 8005306:	4770      	bx	lr

08005308 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005308:	b480      	push	{r7}
 800530a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800530c:	bf00      	nop
 800530e:	46bd      	mov	sp, r7
 8005310:	bc80      	pop	{r7}
 8005312:	4770      	bx	lr

08005314 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005318:	f000 fada 	bl	80058d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800531c:	bf00      	nop
 800531e:	bd80      	pop	{r7, pc}

08005320 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8005324:	4802      	ldr	r0, [pc, #8]	@ (8005330 <DMA1_Channel6_IRQHandler+0x10>)
 8005326:	f000 fc7b 	bl	8005c20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800532a:	bf00      	nop
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	20000314 	.word	0x20000314

08005334 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005334:	b480      	push	{r7}
 8005336:	af00      	add	r7, sp, #0
  return 1;
 8005338:	2301      	movs	r3, #1
}
 800533a:	4618      	mov	r0, r3
 800533c:	46bd      	mov	sp, r7
 800533e:	bc80      	pop	{r7}
 8005340:	4770      	bx	lr

08005342 <_kill>:

int _kill(int pid, int sig)
{
 8005342:	b580      	push	{r7, lr}
 8005344:	b082      	sub	sp, #8
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
 800534a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800534c:	f003 f8e4 	bl	8008518 <__errno>
 8005350:	4603      	mov	r3, r0
 8005352:	2216      	movs	r2, #22
 8005354:	601a      	str	r2, [r3, #0]
  return -1;
 8005356:	f04f 33ff 	mov.w	r3, #4294967295
}
 800535a:	4618      	mov	r0, r3
 800535c:	3708      	adds	r7, #8
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}

08005362 <_exit>:

void _exit (int status)
{
 8005362:	b580      	push	{r7, lr}
 8005364:	b082      	sub	sp, #8
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800536a:	f04f 31ff 	mov.w	r1, #4294967295
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f7ff ffe7 	bl	8005342 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005374:	bf00      	nop
 8005376:	e7fd      	b.n	8005374 <_exit+0x12>

08005378 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b086      	sub	sp, #24
 800537c:	af00      	add	r7, sp, #0
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	60b9      	str	r1, [r7, #8]
 8005382:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005384:	2300      	movs	r3, #0
 8005386:	617b      	str	r3, [r7, #20]
 8005388:	e00a      	b.n	80053a0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800538a:	f3af 8000 	nop.w
 800538e:	4601      	mov	r1, r0
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	1c5a      	adds	r2, r3, #1
 8005394:	60ba      	str	r2, [r7, #8]
 8005396:	b2ca      	uxtb	r2, r1
 8005398:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	3301      	adds	r3, #1
 800539e:	617b      	str	r3, [r7, #20]
 80053a0:	697a      	ldr	r2, [r7, #20]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	dbf0      	blt.n	800538a <_read+0x12>
  }

  return len;
 80053a8:	687b      	ldr	r3, [r7, #4]
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3718      	adds	r7, #24
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}

080053b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80053b2:	b580      	push	{r7, lr}
 80053b4:	b086      	sub	sp, #24
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	60f8      	str	r0, [r7, #12]
 80053ba:	60b9      	str	r1, [r7, #8]
 80053bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80053be:	2300      	movs	r3, #0
 80053c0:	617b      	str	r3, [r7, #20]
 80053c2:	e009      	b.n	80053d8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	1c5a      	adds	r2, r3, #1
 80053c8:	60ba      	str	r2, [r7, #8]
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	4618      	mov	r0, r3
 80053ce:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	3301      	adds	r3, #1
 80053d6:	617b      	str	r3, [r7, #20]
 80053d8:	697a      	ldr	r2, [r7, #20]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	429a      	cmp	r2, r3
 80053de:	dbf1      	blt.n	80053c4 <_write+0x12>
  }
  return len;
 80053e0:	687b      	ldr	r3, [r7, #4]
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3718      	adds	r7, #24
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}

080053ea <_close>:

int _close(int file)
{
 80053ea:	b480      	push	{r7}
 80053ec:	b083      	sub	sp, #12
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80053f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	370c      	adds	r7, #12
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bc80      	pop	{r7}
 80053fe:	4770      	bx	lr

08005400 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005410:	605a      	str	r2, [r3, #4]
  return 0;
 8005412:	2300      	movs	r3, #0
}
 8005414:	4618      	mov	r0, r3
 8005416:	370c      	adds	r7, #12
 8005418:	46bd      	mov	sp, r7
 800541a:	bc80      	pop	{r7}
 800541c:	4770      	bx	lr

0800541e <_isatty>:

int _isatty(int file)
{
 800541e:	b480      	push	{r7}
 8005420:	b083      	sub	sp, #12
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005426:	2301      	movs	r3, #1
}
 8005428:	4618      	mov	r0, r3
 800542a:	370c      	adds	r7, #12
 800542c:	46bd      	mov	sp, r7
 800542e:	bc80      	pop	{r7}
 8005430:	4770      	bx	lr

08005432 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005432:	b480      	push	{r7}
 8005434:	b085      	sub	sp, #20
 8005436:	af00      	add	r7, sp, #0
 8005438:	60f8      	str	r0, [r7, #12]
 800543a:	60b9      	str	r1, [r7, #8]
 800543c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800543e:	2300      	movs	r3, #0
}
 8005440:	4618      	mov	r0, r3
 8005442:	3714      	adds	r7, #20
 8005444:	46bd      	mov	sp, r7
 8005446:	bc80      	pop	{r7}
 8005448:	4770      	bx	lr
	...

0800544c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b086      	sub	sp, #24
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005454:	4a14      	ldr	r2, [pc, #80]	@ (80054a8 <_sbrk+0x5c>)
 8005456:	4b15      	ldr	r3, [pc, #84]	@ (80054ac <_sbrk+0x60>)
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005460:	4b13      	ldr	r3, [pc, #76]	@ (80054b0 <_sbrk+0x64>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d102      	bne.n	800546e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005468:	4b11      	ldr	r3, [pc, #68]	@ (80054b0 <_sbrk+0x64>)
 800546a:	4a12      	ldr	r2, [pc, #72]	@ (80054b4 <_sbrk+0x68>)
 800546c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800546e:	4b10      	ldr	r3, [pc, #64]	@ (80054b0 <_sbrk+0x64>)
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4413      	add	r3, r2
 8005476:	693a      	ldr	r2, [r7, #16]
 8005478:	429a      	cmp	r2, r3
 800547a:	d207      	bcs.n	800548c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800547c:	f003 f84c 	bl	8008518 <__errno>
 8005480:	4603      	mov	r3, r0
 8005482:	220c      	movs	r2, #12
 8005484:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005486:	f04f 33ff 	mov.w	r3, #4294967295
 800548a:	e009      	b.n	80054a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800548c:	4b08      	ldr	r3, [pc, #32]	@ (80054b0 <_sbrk+0x64>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005492:	4b07      	ldr	r3, [pc, #28]	@ (80054b0 <_sbrk+0x64>)
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4413      	add	r3, r2
 800549a:	4a05      	ldr	r2, [pc, #20]	@ (80054b0 <_sbrk+0x64>)
 800549c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800549e:	68fb      	ldr	r3, [r7, #12]
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3718      	adds	r7, #24
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	20005000 	.word	0x20005000
 80054ac:	00000400 	.word	0x00000400
 80054b0:	20003f20 	.word	0x20003f20
 80054b4:	20004108 	.word	0x20004108

080054b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80054b8:	b480      	push	{r7}
 80054ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80054bc:	bf00      	nop
 80054be:	46bd      	mov	sp, r7
 80054c0:	bc80      	pop	{r7}
 80054c2:	4770      	bx	lr

080054c4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b096      	sub	sp, #88	@ 0x58
 80054c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80054ca:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80054ce:	2200      	movs	r2, #0
 80054d0:	601a      	str	r2, [r3, #0]
 80054d2:	605a      	str	r2, [r3, #4]
 80054d4:	609a      	str	r2, [r3, #8]
 80054d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80054d8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80054dc:	2200      	movs	r2, #0
 80054de:	601a      	str	r2, [r3, #0]
 80054e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80054e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80054e6:	2200      	movs	r2, #0
 80054e8:	601a      	str	r2, [r3, #0]
 80054ea:	605a      	str	r2, [r3, #4]
 80054ec:	609a      	str	r2, [r3, #8]
 80054ee:	60da      	str	r2, [r3, #12]
 80054f0:	611a      	str	r2, [r3, #16]
 80054f2:	615a      	str	r2, [r3, #20]
 80054f4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80054f6:	1d3b      	adds	r3, r7, #4
 80054f8:	2220      	movs	r2, #32
 80054fa:	2100      	movs	r1, #0
 80054fc:	4618      	mov	r0, r3
 80054fe:	f002 ffaa 	bl	8008456 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005502:	4b3f      	ldr	r3, [pc, #252]	@ (8005600 <MX_TIM1_Init+0x13c>)
 8005504:	4a3f      	ldr	r2, [pc, #252]	@ (8005604 <MX_TIM1_Init+0x140>)
 8005506:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 720-1;
 8005508:	4b3d      	ldr	r3, [pc, #244]	@ (8005600 <MX_TIM1_Init+0x13c>)
 800550a:	f240 22cf 	movw	r2, #719	@ 0x2cf
 800550e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005510:	4b3b      	ldr	r3, [pc, #236]	@ (8005600 <MX_TIM1_Init+0x13c>)
 8005512:	2200      	movs	r2, #0
 8005514:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000-1;
 8005516:	4b3a      	ldr	r3, [pc, #232]	@ (8005600 <MX_TIM1_Init+0x13c>)
 8005518:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 800551c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800551e:	4b38      	ldr	r3, [pc, #224]	@ (8005600 <MX_TIM1_Init+0x13c>)
 8005520:	2200      	movs	r2, #0
 8005522:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005524:	4b36      	ldr	r3, [pc, #216]	@ (8005600 <MX_TIM1_Init+0x13c>)
 8005526:	2200      	movs	r2, #0
 8005528:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800552a:	4b35      	ldr	r3, [pc, #212]	@ (8005600 <MX_TIM1_Init+0x13c>)
 800552c:	2200      	movs	r2, #0
 800552e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005530:	4833      	ldr	r0, [pc, #204]	@ (8005600 <MX_TIM1_Init+0x13c>)
 8005532:	f001 fec7 	bl	80072c4 <HAL_TIM_Base_Init>
 8005536:	4603      	mov	r3, r0
 8005538:	2b00      	cmp	r3, #0
 800553a:	d001      	beq.n	8005540 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800553c:	f7fc fb43 	bl	8001bc6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005540:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005544:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005546:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800554a:	4619      	mov	r1, r3
 800554c:	482c      	ldr	r0, [pc, #176]	@ (8005600 <MX_TIM1_Init+0x13c>)
 800554e:	f002 f9f5 	bl	800793c <HAL_TIM_ConfigClockSource>
 8005552:	4603      	mov	r3, r0
 8005554:	2b00      	cmp	r3, #0
 8005556:	d001      	beq.n	800555c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8005558:	f7fc fb35 	bl	8001bc6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800555c:	4828      	ldr	r0, [pc, #160]	@ (8005600 <MX_TIM1_Init+0x13c>)
 800555e:	f001 ff00 	bl	8007362 <HAL_TIM_PWM_Init>
 8005562:	4603      	mov	r3, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d001      	beq.n	800556c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8005568:	f7fc fb2d 	bl	8001bc6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800556c:	2300      	movs	r3, #0
 800556e:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005570:	2300      	movs	r3, #0
 8005572:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005574:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8005578:	4619      	mov	r1, r3
 800557a:	4821      	ldr	r0, [pc, #132]	@ (8005600 <MX_TIM1_Init+0x13c>)
 800557c:	f002 fd56 	bl	800802c <HAL_TIMEx_MasterConfigSynchronization>
 8005580:	4603      	mov	r3, r0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d001      	beq.n	800558a <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8005586:	f7fc fb1e 	bl	8001bc6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800558a:	2360      	movs	r3, #96	@ 0x60
 800558c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800558e:	2300      	movs	r3, #0
 8005590:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005592:	2300      	movs	r3, #0
 8005594:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005596:	2300      	movs	r3, #0
 8005598:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800559a:	2300      	movs	r3, #0
 800559c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800559e:	2300      	movs	r3, #0
 80055a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80055a2:	2300      	movs	r3, #0
 80055a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80055a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80055aa:	2204      	movs	r2, #4
 80055ac:	4619      	mov	r1, r3
 80055ae:	4814      	ldr	r0, [pc, #80]	@ (8005600 <MX_TIM1_Init+0x13c>)
 80055b0:	f002 f902 	bl	80077b8 <HAL_TIM_PWM_ConfigChannel>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d001      	beq.n	80055be <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80055ba:	f7fc fb04 	bl	8001bc6 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80055be:	2300      	movs	r3, #0
 80055c0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80055c2:	2300      	movs	r3, #0
 80055c4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80055c6:	2300      	movs	r3, #0
 80055c8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80055ca:	2300      	movs	r3, #0
 80055cc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80055ce:	2300      	movs	r3, #0
 80055d0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80055d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80055d6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80055d8:	2300      	movs	r3, #0
 80055da:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80055dc:	1d3b      	adds	r3, r7, #4
 80055de:	4619      	mov	r1, r3
 80055e0:	4807      	ldr	r0, [pc, #28]	@ (8005600 <MX_TIM1_Init+0x13c>)
 80055e2:	f002 fd81 	bl	80080e8 <HAL_TIMEx_ConfigBreakDeadTime>
 80055e6:	4603      	mov	r3, r0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d001      	beq.n	80055f0 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80055ec:	f7fc faeb 	bl	8001bc6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80055f0:	4803      	ldr	r0, [pc, #12]	@ (8005600 <MX_TIM1_Init+0x13c>)
 80055f2:	f000 f8cd 	bl	8005790 <HAL_TIM_MspPostInit>

}
 80055f6:	bf00      	nop
 80055f8:	3758      	adds	r7, #88	@ 0x58
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
 80055fe:	bf00      	nop
 8005600:	20003f24 	.word	0x20003f24
 8005604:	40012c00 	.word	0x40012c00

08005608 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b08c      	sub	sp, #48	@ 0x30
 800560c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800560e:	f107 030c 	add.w	r3, r7, #12
 8005612:	2224      	movs	r2, #36	@ 0x24
 8005614:	2100      	movs	r1, #0
 8005616:	4618      	mov	r0, r3
 8005618:	f002 ff1d 	bl	8008456 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800561c:	1d3b      	adds	r3, r7, #4
 800561e:	2200      	movs	r2, #0
 8005620:	601a      	str	r2, [r3, #0]
 8005622:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005624:	4b20      	ldr	r3, [pc, #128]	@ (80056a8 <MX_TIM3_Init+0xa0>)
 8005626:	4a21      	ldr	r2, [pc, #132]	@ (80056ac <MX_TIM3_Init+0xa4>)
 8005628:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800562a:	4b1f      	ldr	r3, [pc, #124]	@ (80056a8 <MX_TIM3_Init+0xa0>)
 800562c:	2200      	movs	r2, #0
 800562e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005630:	4b1d      	ldr	r3, [pc, #116]	@ (80056a8 <MX_TIM3_Init+0xa0>)
 8005632:	2200      	movs	r2, #0
 8005634:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8005636:	4b1c      	ldr	r3, [pc, #112]	@ (80056a8 <MX_TIM3_Init+0xa0>)
 8005638:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800563c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800563e:	4b1a      	ldr	r3, [pc, #104]	@ (80056a8 <MX_TIM3_Init+0xa0>)
 8005640:	2200      	movs	r2, #0
 8005642:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005644:	4b18      	ldr	r3, [pc, #96]	@ (80056a8 <MX_TIM3_Init+0xa0>)
 8005646:	2200      	movs	r2, #0
 8005648:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800564a:	2301      	movs	r3, #1
 800564c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800564e:	2300      	movs	r3, #0
 8005650:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005652:	2301      	movs	r3, #1
 8005654:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005656:	2300      	movs	r3, #0
 8005658:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800565a:	2300      	movs	r3, #0
 800565c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800565e:	2300      	movs	r3, #0
 8005660:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005662:	2301      	movs	r3, #1
 8005664:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005666:	2300      	movs	r3, #0
 8005668:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800566a:	2300      	movs	r3, #0
 800566c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800566e:	f107 030c 	add.w	r3, r7, #12
 8005672:	4619      	mov	r1, r3
 8005674:	480c      	ldr	r0, [pc, #48]	@ (80056a8 <MX_TIM3_Init+0xa0>)
 8005676:	f001 ff6f 	bl	8007558 <HAL_TIM_Encoder_Init>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d001      	beq.n	8005684 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8005680:	f7fc faa1 	bl	8001bc6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005684:	2300      	movs	r3, #0
 8005686:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005688:	2300      	movs	r3, #0
 800568a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800568c:	1d3b      	adds	r3, r7, #4
 800568e:	4619      	mov	r1, r3
 8005690:	4805      	ldr	r0, [pc, #20]	@ (80056a8 <MX_TIM3_Init+0xa0>)
 8005692:	f002 fccb 	bl	800802c <HAL_TIMEx_MasterConfigSynchronization>
 8005696:	4603      	mov	r3, r0
 8005698:	2b00      	cmp	r3, #0
 800569a:	d001      	beq.n	80056a0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800569c:	f7fc fa93 	bl	8001bc6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80056a0:	bf00      	nop
 80056a2:	3730      	adds	r7, #48	@ 0x30
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	20003f6c 	.word	0x20003f6c
 80056ac:	40000400 	.word	0x40000400

080056b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b085      	sub	sp, #20
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a09      	ldr	r2, [pc, #36]	@ (80056e4 <HAL_TIM_Base_MspInit+0x34>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d10b      	bne.n	80056da <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80056c2:	4b09      	ldr	r3, [pc, #36]	@ (80056e8 <HAL_TIM_Base_MspInit+0x38>)
 80056c4:	699b      	ldr	r3, [r3, #24]
 80056c6:	4a08      	ldr	r2, [pc, #32]	@ (80056e8 <HAL_TIM_Base_MspInit+0x38>)
 80056c8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80056cc:	6193      	str	r3, [r2, #24]
 80056ce:	4b06      	ldr	r3, [pc, #24]	@ (80056e8 <HAL_TIM_Base_MspInit+0x38>)
 80056d0:	699b      	ldr	r3, [r3, #24]
 80056d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056d6:	60fb      	str	r3, [r7, #12]
 80056d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80056da:	bf00      	nop
 80056dc:	3714      	adds	r7, #20
 80056de:	46bd      	mov	sp, r7
 80056e0:	bc80      	pop	{r7}
 80056e2:	4770      	bx	lr
 80056e4:	40012c00 	.word	0x40012c00
 80056e8:	40021000 	.word	0x40021000

080056ec <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b08a      	sub	sp, #40	@ 0x28
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056f4:	f107 0314 	add.w	r3, r7, #20
 80056f8:	2200      	movs	r2, #0
 80056fa:	601a      	str	r2, [r3, #0]
 80056fc:	605a      	str	r2, [r3, #4]
 80056fe:	609a      	str	r2, [r3, #8]
 8005700:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM3)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a1e      	ldr	r2, [pc, #120]	@ (8005780 <HAL_TIM_Encoder_MspInit+0x94>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d135      	bne.n	8005778 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800570c:	4b1d      	ldr	r3, [pc, #116]	@ (8005784 <HAL_TIM_Encoder_MspInit+0x98>)
 800570e:	69db      	ldr	r3, [r3, #28]
 8005710:	4a1c      	ldr	r2, [pc, #112]	@ (8005784 <HAL_TIM_Encoder_MspInit+0x98>)
 8005712:	f043 0302 	orr.w	r3, r3, #2
 8005716:	61d3      	str	r3, [r2, #28]
 8005718:	4b1a      	ldr	r3, [pc, #104]	@ (8005784 <HAL_TIM_Encoder_MspInit+0x98>)
 800571a:	69db      	ldr	r3, [r3, #28]
 800571c:	f003 0302 	and.w	r3, r3, #2
 8005720:	613b      	str	r3, [r7, #16]
 8005722:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005724:	4b17      	ldr	r3, [pc, #92]	@ (8005784 <HAL_TIM_Encoder_MspInit+0x98>)
 8005726:	699b      	ldr	r3, [r3, #24]
 8005728:	4a16      	ldr	r2, [pc, #88]	@ (8005784 <HAL_TIM_Encoder_MspInit+0x98>)
 800572a:	f043 0308 	orr.w	r3, r3, #8
 800572e:	6193      	str	r3, [r2, #24]
 8005730:	4b14      	ldr	r3, [pc, #80]	@ (8005784 <HAL_TIM_Encoder_MspInit+0x98>)
 8005732:	699b      	ldr	r3, [r3, #24]
 8005734:	f003 0308 	and.w	r3, r3, #8
 8005738:	60fb      	str	r3, [r7, #12]
 800573a:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Encoder_CH1_Pin|Encoder_CH2_Pin;
 800573c:	2330      	movs	r3, #48	@ 0x30
 800573e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005740:	2300      	movs	r3, #0
 8005742:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005744:	2300      	movs	r3, #0
 8005746:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005748:	f107 0314 	add.w	r3, r7, #20
 800574c:	4619      	mov	r1, r3
 800574e:	480e      	ldr	r0, [pc, #56]	@ (8005788 <HAL_TIM_Encoder_MspInit+0x9c>)
 8005750:	f000 fb6c 	bl	8005e2c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8005754:	4b0d      	ldr	r3, [pc, #52]	@ (800578c <HAL_TIM_Encoder_MspInit+0xa0>)
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	627b      	str	r3, [r7, #36]	@ 0x24
 800575a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800575c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005760:	627b      	str	r3, [r7, #36]	@ 0x24
 8005762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005764:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8005768:	627b      	str	r3, [r7, #36]	@ 0x24
 800576a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800576c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005770:	627b      	str	r3, [r7, #36]	@ 0x24
 8005772:	4a06      	ldr	r2, [pc, #24]	@ (800578c <HAL_TIM_Encoder_MspInit+0xa0>)
 8005774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005776:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8005778:	bf00      	nop
 800577a:	3728      	adds	r7, #40	@ 0x28
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}
 8005780:	40000400 	.word	0x40000400
 8005784:	40021000 	.word	0x40021000
 8005788:	40010c00 	.word	0x40010c00
 800578c:	40010000 	.word	0x40010000

08005790 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b088      	sub	sp, #32
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005798:	f107 0310 	add.w	r3, r7, #16
 800579c:	2200      	movs	r2, #0
 800579e:	601a      	str	r2, [r3, #0]
 80057a0:	605a      	str	r2, [r3, #4]
 80057a2:	609a      	str	r2, [r3, #8]
 80057a4:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a10      	ldr	r2, [pc, #64]	@ (80057ec <HAL_TIM_MspPostInit+0x5c>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d118      	bne.n	80057e2 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80057b0:	4b0f      	ldr	r3, [pc, #60]	@ (80057f0 <HAL_TIM_MspPostInit+0x60>)
 80057b2:	699b      	ldr	r3, [r3, #24]
 80057b4:	4a0e      	ldr	r2, [pc, #56]	@ (80057f0 <HAL_TIM_MspPostInit+0x60>)
 80057b6:	f043 0304 	orr.w	r3, r3, #4
 80057ba:	6193      	str	r3, [r2, #24]
 80057bc:	4b0c      	ldr	r3, [pc, #48]	@ (80057f0 <HAL_TIM_MspPostInit+0x60>)
 80057be:	699b      	ldr	r3, [r3, #24]
 80057c0:	f003 0304 	and.w	r3, r3, #4
 80057c4:	60fb      	str	r3, [r7, #12]
 80057c6:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80057c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80057cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057ce:	2302      	movs	r3, #2
 80057d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057d2:	2302      	movs	r3, #2
 80057d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057d6:	f107 0310 	add.w	r3, r7, #16
 80057da:	4619      	mov	r1, r3
 80057dc:	4805      	ldr	r0, [pc, #20]	@ (80057f4 <HAL_TIM_MspPostInit+0x64>)
 80057de:	f000 fb25 	bl	8005e2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80057e2:	bf00      	nop
 80057e4:	3720      	adds	r7, #32
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	bf00      	nop
 80057ec:	40012c00 	.word	0x40012c00
 80057f0:	40021000 	.word	0x40021000
 80057f4:	40010800 	.word	0x40010800

080057f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80057f8:	f7ff fe5e 	bl	80054b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80057fc:	480b      	ldr	r0, [pc, #44]	@ (800582c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80057fe:	490c      	ldr	r1, [pc, #48]	@ (8005830 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8005800:	4a0c      	ldr	r2, [pc, #48]	@ (8005834 <LoopFillZerobss+0x16>)
  movs r3, #0
 8005802:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005804:	e002      	b.n	800580c <LoopCopyDataInit>

08005806 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005806:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005808:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800580a:	3304      	adds	r3, #4

0800580c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800580c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800580e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005810:	d3f9      	bcc.n	8005806 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005812:	4a09      	ldr	r2, [pc, #36]	@ (8005838 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8005814:	4c09      	ldr	r4, [pc, #36]	@ (800583c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005816:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005818:	e001      	b.n	800581e <LoopFillZerobss>

0800581a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800581a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800581c:	3204      	adds	r2, #4

0800581e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800581e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005820:	d3fb      	bcc.n	800581a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005822:	f002 fe7f 	bl	8008524 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005826:	f7fc f8ff 	bl	8001a28 <main>
  bx lr
 800582a:	4770      	bx	lr
  ldr r0, =_sdata
 800582c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005830:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8005834:	0800b330 	.word	0x0800b330
  ldr r2, =_sbss
 8005838:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 800583c:	20004104 	.word	0x20004104

08005840 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005840:	e7fe      	b.n	8005840 <ADC1_2_IRQHandler>
	...

08005844 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005848:	4b08      	ldr	r3, [pc, #32]	@ (800586c <HAL_Init+0x28>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a07      	ldr	r2, [pc, #28]	@ (800586c <HAL_Init+0x28>)
 800584e:	f043 0310 	orr.w	r3, r3, #16
 8005852:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005854:	2003      	movs	r0, #3
 8005856:	f000 f947 	bl	8005ae8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800585a:	200f      	movs	r0, #15
 800585c:	f000 f808 	bl	8005870 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005860:	f7ff fd00 	bl	8005264 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005864:	2300      	movs	r3, #0
}
 8005866:	4618      	mov	r0, r3
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	40022000 	.word	0x40022000

08005870 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b082      	sub	sp, #8
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005878:	4b12      	ldr	r3, [pc, #72]	@ (80058c4 <HAL_InitTick+0x54>)
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	4b12      	ldr	r3, [pc, #72]	@ (80058c8 <HAL_InitTick+0x58>)
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	4619      	mov	r1, r3
 8005882:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005886:	fbb3 f3f1 	udiv	r3, r3, r1
 800588a:	fbb2 f3f3 	udiv	r3, r2, r3
 800588e:	4618      	mov	r0, r3
 8005890:	f000 f95f 	bl	8005b52 <HAL_SYSTICK_Config>
 8005894:	4603      	mov	r3, r0
 8005896:	2b00      	cmp	r3, #0
 8005898:	d001      	beq.n	800589e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e00e      	b.n	80058bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2b0f      	cmp	r3, #15
 80058a2:	d80a      	bhi.n	80058ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80058a4:	2200      	movs	r2, #0
 80058a6:	6879      	ldr	r1, [r7, #4]
 80058a8:	f04f 30ff 	mov.w	r0, #4294967295
 80058ac:	f000 f927 	bl	8005afe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80058b0:	4a06      	ldr	r2, [pc, #24]	@ (80058cc <HAL_InitTick+0x5c>)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80058b6:	2300      	movs	r3, #0
 80058b8:	e000      	b.n	80058bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3708      	adds	r7, #8
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}
 80058c4:	20000018 	.word	0x20000018
 80058c8:	20000020 	.word	0x20000020
 80058cc:	2000001c 	.word	0x2000001c

080058d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80058d0:	b480      	push	{r7}
 80058d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80058d4:	4b05      	ldr	r3, [pc, #20]	@ (80058ec <HAL_IncTick+0x1c>)
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	461a      	mov	r2, r3
 80058da:	4b05      	ldr	r3, [pc, #20]	@ (80058f0 <HAL_IncTick+0x20>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4413      	add	r3, r2
 80058e0:	4a03      	ldr	r2, [pc, #12]	@ (80058f0 <HAL_IncTick+0x20>)
 80058e2:	6013      	str	r3, [r2, #0]
}
 80058e4:	bf00      	nop
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bc80      	pop	{r7}
 80058ea:	4770      	bx	lr
 80058ec:	20000020 	.word	0x20000020
 80058f0:	20003fb4 	.word	0x20003fb4

080058f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80058f4:	b480      	push	{r7}
 80058f6:	af00      	add	r7, sp, #0
  return uwTick;
 80058f8:	4b02      	ldr	r3, [pc, #8]	@ (8005904 <HAL_GetTick+0x10>)
 80058fa:	681b      	ldr	r3, [r3, #0]
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	46bd      	mov	sp, r7
 8005900:	bc80      	pop	{r7}
 8005902:	4770      	bx	lr
 8005904:	20003fb4 	.word	0x20003fb4

08005908 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005910:	f7ff fff0 	bl	80058f4 <HAL_GetTick>
 8005914:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005920:	d005      	beq.n	800592e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005922:	4b0a      	ldr	r3, [pc, #40]	@ (800594c <HAL_Delay+0x44>)
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	461a      	mov	r2, r3
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	4413      	add	r3, r2
 800592c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800592e:	bf00      	nop
 8005930:	f7ff ffe0 	bl	80058f4 <HAL_GetTick>
 8005934:	4602      	mov	r2, r0
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	68fa      	ldr	r2, [r7, #12]
 800593c:	429a      	cmp	r2, r3
 800593e:	d8f7      	bhi.n	8005930 <HAL_Delay+0x28>
  {
  }
}
 8005940:	bf00      	nop
 8005942:	bf00      	nop
 8005944:	3710      	adds	r7, #16
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop
 800594c:	20000020 	.word	0x20000020

08005950 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005950:	b480      	push	{r7}
 8005952:	b085      	sub	sp, #20
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f003 0307 	and.w	r3, r3, #7
 800595e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005960:	4b0c      	ldr	r3, [pc, #48]	@ (8005994 <__NVIC_SetPriorityGrouping+0x44>)
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005966:	68ba      	ldr	r2, [r7, #8]
 8005968:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800596c:	4013      	ands	r3, r2
 800596e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005978:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800597c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005980:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005982:	4a04      	ldr	r2, [pc, #16]	@ (8005994 <__NVIC_SetPriorityGrouping+0x44>)
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	60d3      	str	r3, [r2, #12]
}
 8005988:	bf00      	nop
 800598a:	3714      	adds	r7, #20
 800598c:	46bd      	mov	sp, r7
 800598e:	bc80      	pop	{r7}
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop
 8005994:	e000ed00 	.word	0xe000ed00

08005998 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005998:	b480      	push	{r7}
 800599a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800599c:	4b04      	ldr	r3, [pc, #16]	@ (80059b0 <__NVIC_GetPriorityGrouping+0x18>)
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	0a1b      	lsrs	r3, r3, #8
 80059a2:	f003 0307 	and.w	r3, r3, #7
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bc80      	pop	{r7}
 80059ac:	4770      	bx	lr
 80059ae:	bf00      	nop
 80059b0:	e000ed00 	.word	0xe000ed00

080059b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	4603      	mov	r3, r0
 80059bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80059be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	db0b      	blt.n	80059de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80059c6:	79fb      	ldrb	r3, [r7, #7]
 80059c8:	f003 021f 	and.w	r2, r3, #31
 80059cc:	4906      	ldr	r1, [pc, #24]	@ (80059e8 <__NVIC_EnableIRQ+0x34>)
 80059ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059d2:	095b      	lsrs	r3, r3, #5
 80059d4:	2001      	movs	r0, #1
 80059d6:	fa00 f202 	lsl.w	r2, r0, r2
 80059da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80059de:	bf00      	nop
 80059e0:	370c      	adds	r7, #12
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bc80      	pop	{r7}
 80059e6:	4770      	bx	lr
 80059e8:	e000e100 	.word	0xe000e100

080059ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	4603      	mov	r3, r0
 80059f4:	6039      	str	r1, [r7, #0]
 80059f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80059f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	db0a      	blt.n	8005a16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	b2da      	uxtb	r2, r3
 8005a04:	490c      	ldr	r1, [pc, #48]	@ (8005a38 <__NVIC_SetPriority+0x4c>)
 8005a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a0a:	0112      	lsls	r2, r2, #4
 8005a0c:	b2d2      	uxtb	r2, r2
 8005a0e:	440b      	add	r3, r1
 8005a10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005a14:	e00a      	b.n	8005a2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	b2da      	uxtb	r2, r3
 8005a1a:	4908      	ldr	r1, [pc, #32]	@ (8005a3c <__NVIC_SetPriority+0x50>)
 8005a1c:	79fb      	ldrb	r3, [r7, #7]
 8005a1e:	f003 030f 	and.w	r3, r3, #15
 8005a22:	3b04      	subs	r3, #4
 8005a24:	0112      	lsls	r2, r2, #4
 8005a26:	b2d2      	uxtb	r2, r2
 8005a28:	440b      	add	r3, r1
 8005a2a:	761a      	strb	r2, [r3, #24]
}
 8005a2c:	bf00      	nop
 8005a2e:	370c      	adds	r7, #12
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bc80      	pop	{r7}
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop
 8005a38:	e000e100 	.word	0xe000e100
 8005a3c:	e000ed00 	.word	0xe000ed00

08005a40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b089      	sub	sp, #36	@ 0x24
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f003 0307 	and.w	r3, r3, #7
 8005a52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	f1c3 0307 	rsb	r3, r3, #7
 8005a5a:	2b04      	cmp	r3, #4
 8005a5c:	bf28      	it	cs
 8005a5e:	2304      	movcs	r3, #4
 8005a60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	3304      	adds	r3, #4
 8005a66:	2b06      	cmp	r3, #6
 8005a68:	d902      	bls.n	8005a70 <NVIC_EncodePriority+0x30>
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	3b03      	subs	r3, #3
 8005a6e:	e000      	b.n	8005a72 <NVIC_EncodePriority+0x32>
 8005a70:	2300      	movs	r3, #0
 8005a72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a74:	f04f 32ff 	mov.w	r2, #4294967295
 8005a78:	69bb      	ldr	r3, [r7, #24]
 8005a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a7e:	43da      	mvns	r2, r3
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	401a      	ands	r2, r3
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005a88:	f04f 31ff 	mov.w	r1, #4294967295
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8005a92:	43d9      	mvns	r1, r3
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a98:	4313      	orrs	r3, r2
         );
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3724      	adds	r7, #36	@ 0x24
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bc80      	pop	{r7}
 8005aa2:	4770      	bx	lr

08005aa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b082      	sub	sp, #8
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005ab4:	d301      	bcc.n	8005aba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e00f      	b.n	8005ada <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005aba:	4a0a      	ldr	r2, [pc, #40]	@ (8005ae4 <SysTick_Config+0x40>)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005ac2:	210f      	movs	r1, #15
 8005ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ac8:	f7ff ff90 	bl	80059ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005acc:	4b05      	ldr	r3, [pc, #20]	@ (8005ae4 <SysTick_Config+0x40>)
 8005ace:	2200      	movs	r2, #0
 8005ad0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005ad2:	4b04      	ldr	r3, [pc, #16]	@ (8005ae4 <SysTick_Config+0x40>)
 8005ad4:	2207      	movs	r2, #7
 8005ad6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3708      	adds	r7, #8
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	e000e010 	.word	0xe000e010

08005ae8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b082      	sub	sp, #8
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f7ff ff2d 	bl	8005950 <__NVIC_SetPriorityGrouping>
}
 8005af6:	bf00      	nop
 8005af8:	3708      	adds	r7, #8
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}

08005afe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005afe:	b580      	push	{r7, lr}
 8005b00:	b086      	sub	sp, #24
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	4603      	mov	r3, r0
 8005b06:	60b9      	str	r1, [r7, #8]
 8005b08:	607a      	str	r2, [r7, #4]
 8005b0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005b10:	f7ff ff42 	bl	8005998 <__NVIC_GetPriorityGrouping>
 8005b14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	68b9      	ldr	r1, [r7, #8]
 8005b1a:	6978      	ldr	r0, [r7, #20]
 8005b1c:	f7ff ff90 	bl	8005a40 <NVIC_EncodePriority>
 8005b20:	4602      	mov	r2, r0
 8005b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b26:	4611      	mov	r1, r2
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f7ff ff5f 	bl	80059ec <__NVIC_SetPriority>
}
 8005b2e:	bf00      	nop
 8005b30:	3718      	adds	r7, #24
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}

08005b36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b36:	b580      	push	{r7, lr}
 8005b38:	b082      	sub	sp, #8
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b44:	4618      	mov	r0, r3
 8005b46:	f7ff ff35 	bl	80059b4 <__NVIC_EnableIRQ>
}
 8005b4a:	bf00      	nop
 8005b4c:	3708      	adds	r7, #8
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}

08005b52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005b52:	b580      	push	{r7, lr}
 8005b54:	b082      	sub	sp, #8
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f7ff ffa2 	bl	8005aa4 <SysTick_Config>
 8005b60:	4603      	mov	r3, r0
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3708      	adds	r7, #8
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
	...

08005b6c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b085      	sub	sp, #20
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005b74:	2300      	movs	r3, #0
 8005b76:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d101      	bne.n	8005b82 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e043      	b.n	8005c0a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	461a      	mov	r2, r3
 8005b88:	4b22      	ldr	r3, [pc, #136]	@ (8005c14 <HAL_DMA_Init+0xa8>)
 8005b8a:	4413      	add	r3, r2
 8005b8c:	4a22      	ldr	r2, [pc, #136]	@ (8005c18 <HAL_DMA_Init+0xac>)
 8005b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b92:	091b      	lsrs	r3, r3, #4
 8005b94:	009a      	lsls	r2, r3, #2
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a1f      	ldr	r2, [pc, #124]	@ (8005c1c <HAL_DMA_Init+0xb0>)
 8005b9e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2202      	movs	r2, #2
 8005ba4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005bb6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8005bba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8005bc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	695b      	ldr	r3, [r3, #20]
 8005bd6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bdc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	69db      	ldr	r3, [r3, #28]
 8005be2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005be4:	68fa      	ldr	r2, [r7, #12]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68fa      	ldr	r2, [r7, #12]
 8005bf0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005c08:	2300      	movs	r3, #0
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3714      	adds	r7, #20
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bc80      	pop	{r7}
 8005c12:	4770      	bx	lr
 8005c14:	bffdfff8 	.word	0xbffdfff8
 8005c18:	cccccccd 	.word	0xcccccccd
 8005c1c:	40020000 	.word	0x40020000

08005c20 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b084      	sub	sp, #16
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c3c:	2204      	movs	r2, #4
 8005c3e:	409a      	lsls	r2, r3
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	4013      	ands	r3, r2
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d04f      	beq.n	8005ce8 <HAL_DMA_IRQHandler+0xc8>
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	f003 0304 	and.w	r3, r3, #4
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d04a      	beq.n	8005ce8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 0320 	and.w	r3, r3, #32
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d107      	bne.n	8005c70 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f022 0204 	bic.w	r2, r2, #4
 8005c6e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a66      	ldr	r2, [pc, #408]	@ (8005e10 <HAL_DMA_IRQHandler+0x1f0>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d029      	beq.n	8005cce <HAL_DMA_IRQHandler+0xae>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a65      	ldr	r2, [pc, #404]	@ (8005e14 <HAL_DMA_IRQHandler+0x1f4>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d022      	beq.n	8005cca <HAL_DMA_IRQHandler+0xaa>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a63      	ldr	r2, [pc, #396]	@ (8005e18 <HAL_DMA_IRQHandler+0x1f8>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d01a      	beq.n	8005cc4 <HAL_DMA_IRQHandler+0xa4>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a62      	ldr	r2, [pc, #392]	@ (8005e1c <HAL_DMA_IRQHandler+0x1fc>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d012      	beq.n	8005cbe <HAL_DMA_IRQHandler+0x9e>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a60      	ldr	r2, [pc, #384]	@ (8005e20 <HAL_DMA_IRQHandler+0x200>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d00a      	beq.n	8005cb8 <HAL_DMA_IRQHandler+0x98>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a5f      	ldr	r2, [pc, #380]	@ (8005e24 <HAL_DMA_IRQHandler+0x204>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d102      	bne.n	8005cb2 <HAL_DMA_IRQHandler+0x92>
 8005cac:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005cb0:	e00e      	b.n	8005cd0 <HAL_DMA_IRQHandler+0xb0>
 8005cb2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8005cb6:	e00b      	b.n	8005cd0 <HAL_DMA_IRQHandler+0xb0>
 8005cb8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005cbc:	e008      	b.n	8005cd0 <HAL_DMA_IRQHandler+0xb0>
 8005cbe:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005cc2:	e005      	b.n	8005cd0 <HAL_DMA_IRQHandler+0xb0>
 8005cc4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005cc8:	e002      	b.n	8005cd0 <HAL_DMA_IRQHandler+0xb0>
 8005cca:	2340      	movs	r3, #64	@ 0x40
 8005ccc:	e000      	b.n	8005cd0 <HAL_DMA_IRQHandler+0xb0>
 8005cce:	2304      	movs	r3, #4
 8005cd0:	4a55      	ldr	r2, [pc, #340]	@ (8005e28 <HAL_DMA_IRQHandler+0x208>)
 8005cd2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	f000 8094 	beq.w	8005e06 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8005ce6:	e08e      	b.n	8005e06 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cec:	2202      	movs	r2, #2
 8005cee:	409a      	lsls	r2, r3
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	4013      	ands	r3, r2
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d056      	beq.n	8005da6 <HAL_DMA_IRQHandler+0x186>
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	f003 0302 	and.w	r3, r3, #2
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d051      	beq.n	8005da6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f003 0320 	and.w	r3, r3, #32
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d10b      	bne.n	8005d28 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f022 020a 	bic.w	r2, r2, #10
 8005d1e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a38      	ldr	r2, [pc, #224]	@ (8005e10 <HAL_DMA_IRQHandler+0x1f0>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d029      	beq.n	8005d86 <HAL_DMA_IRQHandler+0x166>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a37      	ldr	r2, [pc, #220]	@ (8005e14 <HAL_DMA_IRQHandler+0x1f4>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d022      	beq.n	8005d82 <HAL_DMA_IRQHandler+0x162>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a35      	ldr	r2, [pc, #212]	@ (8005e18 <HAL_DMA_IRQHandler+0x1f8>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d01a      	beq.n	8005d7c <HAL_DMA_IRQHandler+0x15c>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a34      	ldr	r2, [pc, #208]	@ (8005e1c <HAL_DMA_IRQHandler+0x1fc>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d012      	beq.n	8005d76 <HAL_DMA_IRQHandler+0x156>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a32      	ldr	r2, [pc, #200]	@ (8005e20 <HAL_DMA_IRQHandler+0x200>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d00a      	beq.n	8005d70 <HAL_DMA_IRQHandler+0x150>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a31      	ldr	r2, [pc, #196]	@ (8005e24 <HAL_DMA_IRQHandler+0x204>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d102      	bne.n	8005d6a <HAL_DMA_IRQHandler+0x14a>
 8005d64:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005d68:	e00e      	b.n	8005d88 <HAL_DMA_IRQHandler+0x168>
 8005d6a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005d6e:	e00b      	b.n	8005d88 <HAL_DMA_IRQHandler+0x168>
 8005d70:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005d74:	e008      	b.n	8005d88 <HAL_DMA_IRQHandler+0x168>
 8005d76:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005d7a:	e005      	b.n	8005d88 <HAL_DMA_IRQHandler+0x168>
 8005d7c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005d80:	e002      	b.n	8005d88 <HAL_DMA_IRQHandler+0x168>
 8005d82:	2320      	movs	r3, #32
 8005d84:	e000      	b.n	8005d88 <HAL_DMA_IRQHandler+0x168>
 8005d86:	2302      	movs	r3, #2
 8005d88:	4a27      	ldr	r2, [pc, #156]	@ (8005e28 <HAL_DMA_IRQHandler+0x208>)
 8005d8a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d034      	beq.n	8005e06 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005da4:	e02f      	b.n	8005e06 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005daa:	2208      	movs	r2, #8
 8005dac:	409a      	lsls	r2, r3
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	4013      	ands	r3, r2
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d028      	beq.n	8005e08 <HAL_DMA_IRQHandler+0x1e8>
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	f003 0308 	and.w	r3, r3, #8
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d023      	beq.n	8005e08 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f022 020e 	bic.w	r2, r2, #14
 8005dce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dd8:	2101      	movs	r1, #1
 8005dda:	fa01 f202 	lsl.w	r2, r1, r2
 8005dde:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2201      	movs	r2, #1
 8005dea:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d004      	beq.n	8005e08 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	4798      	blx	r3
    }
  }
  return;
 8005e06:	bf00      	nop
 8005e08:	bf00      	nop
}
 8005e0a:	3710      	adds	r7, #16
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}
 8005e10:	40020008 	.word	0x40020008
 8005e14:	4002001c 	.word	0x4002001c
 8005e18:	40020030 	.word	0x40020030
 8005e1c:	40020044 	.word	0x40020044
 8005e20:	40020058 	.word	0x40020058
 8005e24:	4002006c 	.word	0x4002006c
 8005e28:	40020000 	.word	0x40020000

08005e2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b08b      	sub	sp, #44	@ 0x2c
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005e36:	2300      	movs	r3, #0
 8005e38:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005e3e:	e169      	b.n	8006114 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005e40:	2201      	movs	r2, #1
 8005e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e44:	fa02 f303 	lsl.w	r3, r2, r3
 8005e48:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	69fa      	ldr	r2, [r7, #28]
 8005e50:	4013      	ands	r3, r2
 8005e52:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005e54:	69ba      	ldr	r2, [r7, #24]
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	f040 8158 	bne.w	800610e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	4a9a      	ldr	r2, [pc, #616]	@ (80060cc <HAL_GPIO_Init+0x2a0>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d05e      	beq.n	8005f26 <HAL_GPIO_Init+0xfa>
 8005e68:	4a98      	ldr	r2, [pc, #608]	@ (80060cc <HAL_GPIO_Init+0x2a0>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d875      	bhi.n	8005f5a <HAL_GPIO_Init+0x12e>
 8005e6e:	4a98      	ldr	r2, [pc, #608]	@ (80060d0 <HAL_GPIO_Init+0x2a4>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d058      	beq.n	8005f26 <HAL_GPIO_Init+0xfa>
 8005e74:	4a96      	ldr	r2, [pc, #600]	@ (80060d0 <HAL_GPIO_Init+0x2a4>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d86f      	bhi.n	8005f5a <HAL_GPIO_Init+0x12e>
 8005e7a:	4a96      	ldr	r2, [pc, #600]	@ (80060d4 <HAL_GPIO_Init+0x2a8>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d052      	beq.n	8005f26 <HAL_GPIO_Init+0xfa>
 8005e80:	4a94      	ldr	r2, [pc, #592]	@ (80060d4 <HAL_GPIO_Init+0x2a8>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d869      	bhi.n	8005f5a <HAL_GPIO_Init+0x12e>
 8005e86:	4a94      	ldr	r2, [pc, #592]	@ (80060d8 <HAL_GPIO_Init+0x2ac>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d04c      	beq.n	8005f26 <HAL_GPIO_Init+0xfa>
 8005e8c:	4a92      	ldr	r2, [pc, #584]	@ (80060d8 <HAL_GPIO_Init+0x2ac>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d863      	bhi.n	8005f5a <HAL_GPIO_Init+0x12e>
 8005e92:	4a92      	ldr	r2, [pc, #584]	@ (80060dc <HAL_GPIO_Init+0x2b0>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d046      	beq.n	8005f26 <HAL_GPIO_Init+0xfa>
 8005e98:	4a90      	ldr	r2, [pc, #576]	@ (80060dc <HAL_GPIO_Init+0x2b0>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d85d      	bhi.n	8005f5a <HAL_GPIO_Init+0x12e>
 8005e9e:	2b12      	cmp	r3, #18
 8005ea0:	d82a      	bhi.n	8005ef8 <HAL_GPIO_Init+0xcc>
 8005ea2:	2b12      	cmp	r3, #18
 8005ea4:	d859      	bhi.n	8005f5a <HAL_GPIO_Init+0x12e>
 8005ea6:	a201      	add	r2, pc, #4	@ (adr r2, 8005eac <HAL_GPIO_Init+0x80>)
 8005ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eac:	08005f27 	.word	0x08005f27
 8005eb0:	08005f01 	.word	0x08005f01
 8005eb4:	08005f13 	.word	0x08005f13
 8005eb8:	08005f55 	.word	0x08005f55
 8005ebc:	08005f5b 	.word	0x08005f5b
 8005ec0:	08005f5b 	.word	0x08005f5b
 8005ec4:	08005f5b 	.word	0x08005f5b
 8005ec8:	08005f5b 	.word	0x08005f5b
 8005ecc:	08005f5b 	.word	0x08005f5b
 8005ed0:	08005f5b 	.word	0x08005f5b
 8005ed4:	08005f5b 	.word	0x08005f5b
 8005ed8:	08005f5b 	.word	0x08005f5b
 8005edc:	08005f5b 	.word	0x08005f5b
 8005ee0:	08005f5b 	.word	0x08005f5b
 8005ee4:	08005f5b 	.word	0x08005f5b
 8005ee8:	08005f5b 	.word	0x08005f5b
 8005eec:	08005f5b 	.word	0x08005f5b
 8005ef0:	08005f09 	.word	0x08005f09
 8005ef4:	08005f1d 	.word	0x08005f1d
 8005ef8:	4a79      	ldr	r2, [pc, #484]	@ (80060e0 <HAL_GPIO_Init+0x2b4>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d013      	beq.n	8005f26 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005efe:	e02c      	b.n	8005f5a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	623b      	str	r3, [r7, #32]
          break;
 8005f06:	e029      	b.n	8005f5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	3304      	adds	r3, #4
 8005f0e:	623b      	str	r3, [r7, #32]
          break;
 8005f10:	e024      	b.n	8005f5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	3308      	adds	r3, #8
 8005f18:	623b      	str	r3, [r7, #32]
          break;
 8005f1a:	e01f      	b.n	8005f5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	330c      	adds	r3, #12
 8005f22:	623b      	str	r3, [r7, #32]
          break;
 8005f24:	e01a      	b.n	8005f5c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d102      	bne.n	8005f34 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005f2e:	2304      	movs	r3, #4
 8005f30:	623b      	str	r3, [r7, #32]
          break;
 8005f32:	e013      	b.n	8005f5c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d105      	bne.n	8005f48 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005f3c:	2308      	movs	r3, #8
 8005f3e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	69fa      	ldr	r2, [r7, #28]
 8005f44:	611a      	str	r2, [r3, #16]
          break;
 8005f46:	e009      	b.n	8005f5c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005f48:	2308      	movs	r3, #8
 8005f4a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	69fa      	ldr	r2, [r7, #28]
 8005f50:	615a      	str	r2, [r3, #20]
          break;
 8005f52:	e003      	b.n	8005f5c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005f54:	2300      	movs	r3, #0
 8005f56:	623b      	str	r3, [r7, #32]
          break;
 8005f58:	e000      	b.n	8005f5c <HAL_GPIO_Init+0x130>
          break;
 8005f5a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005f5c:	69bb      	ldr	r3, [r7, #24]
 8005f5e:	2bff      	cmp	r3, #255	@ 0xff
 8005f60:	d801      	bhi.n	8005f66 <HAL_GPIO_Init+0x13a>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	e001      	b.n	8005f6a <HAL_GPIO_Init+0x13e>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	3304      	adds	r3, #4
 8005f6a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005f6c:	69bb      	ldr	r3, [r7, #24]
 8005f6e:	2bff      	cmp	r3, #255	@ 0xff
 8005f70:	d802      	bhi.n	8005f78 <HAL_GPIO_Init+0x14c>
 8005f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	e002      	b.n	8005f7e <HAL_GPIO_Init+0x152>
 8005f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f7a:	3b08      	subs	r3, #8
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	210f      	movs	r1, #15
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	fa01 f303 	lsl.w	r3, r1, r3
 8005f8c:	43db      	mvns	r3, r3
 8005f8e:	401a      	ands	r2, r3
 8005f90:	6a39      	ldr	r1, [r7, #32]
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	fa01 f303 	lsl.w	r3, r1, r3
 8005f98:	431a      	orrs	r2, r3
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	f000 80b1 	beq.w	800610e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005fac:	4b4d      	ldr	r3, [pc, #308]	@ (80060e4 <HAL_GPIO_Init+0x2b8>)
 8005fae:	699b      	ldr	r3, [r3, #24]
 8005fb0:	4a4c      	ldr	r2, [pc, #304]	@ (80060e4 <HAL_GPIO_Init+0x2b8>)
 8005fb2:	f043 0301 	orr.w	r3, r3, #1
 8005fb6:	6193      	str	r3, [r2, #24]
 8005fb8:	4b4a      	ldr	r3, [pc, #296]	@ (80060e4 <HAL_GPIO_Init+0x2b8>)
 8005fba:	699b      	ldr	r3, [r3, #24]
 8005fbc:	f003 0301 	and.w	r3, r3, #1
 8005fc0:	60bb      	str	r3, [r7, #8]
 8005fc2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005fc4:	4a48      	ldr	r2, [pc, #288]	@ (80060e8 <HAL_GPIO_Init+0x2bc>)
 8005fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc8:	089b      	lsrs	r3, r3, #2
 8005fca:	3302      	adds	r3, #2
 8005fcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fd0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fd4:	f003 0303 	and.w	r3, r3, #3
 8005fd8:	009b      	lsls	r3, r3, #2
 8005fda:	220f      	movs	r2, #15
 8005fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8005fe0:	43db      	mvns	r3, r3
 8005fe2:	68fa      	ldr	r2, [r7, #12]
 8005fe4:	4013      	ands	r3, r2
 8005fe6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4a40      	ldr	r2, [pc, #256]	@ (80060ec <HAL_GPIO_Init+0x2c0>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d013      	beq.n	8006018 <HAL_GPIO_Init+0x1ec>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4a3f      	ldr	r2, [pc, #252]	@ (80060f0 <HAL_GPIO_Init+0x2c4>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d00d      	beq.n	8006014 <HAL_GPIO_Init+0x1e8>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	4a3e      	ldr	r2, [pc, #248]	@ (80060f4 <HAL_GPIO_Init+0x2c8>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d007      	beq.n	8006010 <HAL_GPIO_Init+0x1e4>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4a3d      	ldr	r2, [pc, #244]	@ (80060f8 <HAL_GPIO_Init+0x2cc>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d101      	bne.n	800600c <HAL_GPIO_Init+0x1e0>
 8006008:	2303      	movs	r3, #3
 800600a:	e006      	b.n	800601a <HAL_GPIO_Init+0x1ee>
 800600c:	2304      	movs	r3, #4
 800600e:	e004      	b.n	800601a <HAL_GPIO_Init+0x1ee>
 8006010:	2302      	movs	r3, #2
 8006012:	e002      	b.n	800601a <HAL_GPIO_Init+0x1ee>
 8006014:	2301      	movs	r3, #1
 8006016:	e000      	b.n	800601a <HAL_GPIO_Init+0x1ee>
 8006018:	2300      	movs	r3, #0
 800601a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800601c:	f002 0203 	and.w	r2, r2, #3
 8006020:	0092      	lsls	r2, r2, #2
 8006022:	4093      	lsls	r3, r2
 8006024:	68fa      	ldr	r2, [r7, #12]
 8006026:	4313      	orrs	r3, r2
 8006028:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800602a:	492f      	ldr	r1, [pc, #188]	@ (80060e8 <HAL_GPIO_Init+0x2bc>)
 800602c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800602e:	089b      	lsrs	r3, r3, #2
 8006030:	3302      	adds	r3, #2
 8006032:	68fa      	ldr	r2, [r7, #12]
 8006034:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006040:	2b00      	cmp	r3, #0
 8006042:	d006      	beq.n	8006052 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006044:	4b2d      	ldr	r3, [pc, #180]	@ (80060fc <HAL_GPIO_Init+0x2d0>)
 8006046:	689a      	ldr	r2, [r3, #8]
 8006048:	492c      	ldr	r1, [pc, #176]	@ (80060fc <HAL_GPIO_Init+0x2d0>)
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	4313      	orrs	r3, r2
 800604e:	608b      	str	r3, [r1, #8]
 8006050:	e006      	b.n	8006060 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006052:	4b2a      	ldr	r3, [pc, #168]	@ (80060fc <HAL_GPIO_Init+0x2d0>)
 8006054:	689a      	ldr	r2, [r3, #8]
 8006056:	69bb      	ldr	r3, [r7, #24]
 8006058:	43db      	mvns	r3, r3
 800605a:	4928      	ldr	r1, [pc, #160]	@ (80060fc <HAL_GPIO_Init+0x2d0>)
 800605c:	4013      	ands	r3, r2
 800605e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006068:	2b00      	cmp	r3, #0
 800606a:	d006      	beq.n	800607a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800606c:	4b23      	ldr	r3, [pc, #140]	@ (80060fc <HAL_GPIO_Init+0x2d0>)
 800606e:	68da      	ldr	r2, [r3, #12]
 8006070:	4922      	ldr	r1, [pc, #136]	@ (80060fc <HAL_GPIO_Init+0x2d0>)
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	4313      	orrs	r3, r2
 8006076:	60cb      	str	r3, [r1, #12]
 8006078:	e006      	b.n	8006088 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800607a:	4b20      	ldr	r3, [pc, #128]	@ (80060fc <HAL_GPIO_Init+0x2d0>)
 800607c:	68da      	ldr	r2, [r3, #12]
 800607e:	69bb      	ldr	r3, [r7, #24]
 8006080:	43db      	mvns	r3, r3
 8006082:	491e      	ldr	r1, [pc, #120]	@ (80060fc <HAL_GPIO_Init+0x2d0>)
 8006084:	4013      	ands	r3, r2
 8006086:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006090:	2b00      	cmp	r3, #0
 8006092:	d006      	beq.n	80060a2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006094:	4b19      	ldr	r3, [pc, #100]	@ (80060fc <HAL_GPIO_Init+0x2d0>)
 8006096:	685a      	ldr	r2, [r3, #4]
 8006098:	4918      	ldr	r1, [pc, #96]	@ (80060fc <HAL_GPIO_Init+0x2d0>)
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	4313      	orrs	r3, r2
 800609e:	604b      	str	r3, [r1, #4]
 80060a0:	e006      	b.n	80060b0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80060a2:	4b16      	ldr	r3, [pc, #88]	@ (80060fc <HAL_GPIO_Init+0x2d0>)
 80060a4:	685a      	ldr	r2, [r3, #4]
 80060a6:	69bb      	ldr	r3, [r7, #24]
 80060a8:	43db      	mvns	r3, r3
 80060aa:	4914      	ldr	r1, [pc, #80]	@ (80060fc <HAL_GPIO_Init+0x2d0>)
 80060ac:	4013      	ands	r3, r2
 80060ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d021      	beq.n	8006100 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80060bc:	4b0f      	ldr	r3, [pc, #60]	@ (80060fc <HAL_GPIO_Init+0x2d0>)
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	490e      	ldr	r1, [pc, #56]	@ (80060fc <HAL_GPIO_Init+0x2d0>)
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	4313      	orrs	r3, r2
 80060c6:	600b      	str	r3, [r1, #0]
 80060c8:	e021      	b.n	800610e <HAL_GPIO_Init+0x2e2>
 80060ca:	bf00      	nop
 80060cc:	10320000 	.word	0x10320000
 80060d0:	10310000 	.word	0x10310000
 80060d4:	10220000 	.word	0x10220000
 80060d8:	10210000 	.word	0x10210000
 80060dc:	10120000 	.word	0x10120000
 80060e0:	10110000 	.word	0x10110000
 80060e4:	40021000 	.word	0x40021000
 80060e8:	40010000 	.word	0x40010000
 80060ec:	40010800 	.word	0x40010800
 80060f0:	40010c00 	.word	0x40010c00
 80060f4:	40011000 	.word	0x40011000
 80060f8:	40011400 	.word	0x40011400
 80060fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006100:	4b0b      	ldr	r3, [pc, #44]	@ (8006130 <HAL_GPIO_Init+0x304>)
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	43db      	mvns	r3, r3
 8006108:	4909      	ldr	r1, [pc, #36]	@ (8006130 <HAL_GPIO_Init+0x304>)
 800610a:	4013      	ands	r3, r2
 800610c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800610e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006110:	3301      	adds	r3, #1
 8006112:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800611a:	fa22 f303 	lsr.w	r3, r2, r3
 800611e:	2b00      	cmp	r3, #0
 8006120:	f47f ae8e 	bne.w	8005e40 <HAL_GPIO_Init+0x14>
  }
}
 8006124:	bf00      	nop
 8006126:	bf00      	nop
 8006128:	372c      	adds	r7, #44	@ 0x2c
 800612a:	46bd      	mov	sp, r7
 800612c:	bc80      	pop	{r7}
 800612e:	4770      	bx	lr
 8006130:	40010400 	.word	0x40010400

08006134 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006134:	b480      	push	{r7}
 8006136:	b085      	sub	sp, #20
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	460b      	mov	r3, r1
 800613e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	689a      	ldr	r2, [r3, #8]
 8006144:	887b      	ldrh	r3, [r7, #2]
 8006146:	4013      	ands	r3, r2
 8006148:	2b00      	cmp	r3, #0
 800614a:	d002      	beq.n	8006152 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800614c:	2301      	movs	r3, #1
 800614e:	73fb      	strb	r3, [r7, #15]
 8006150:	e001      	b.n	8006156 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006152:	2300      	movs	r3, #0
 8006154:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006156:	7bfb      	ldrb	r3, [r7, #15]
}
 8006158:	4618      	mov	r0, r3
 800615a:	3714      	adds	r7, #20
 800615c:	46bd      	mov	sp, r7
 800615e:	bc80      	pop	{r7}
 8006160:	4770      	bx	lr

08006162 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006162:	b480      	push	{r7}
 8006164:	b083      	sub	sp, #12
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
 800616a:	460b      	mov	r3, r1
 800616c:	807b      	strh	r3, [r7, #2]
 800616e:	4613      	mov	r3, r2
 8006170:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006172:	787b      	ldrb	r3, [r7, #1]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d003      	beq.n	8006180 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006178:	887a      	ldrh	r2, [r7, #2]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800617e:	e003      	b.n	8006188 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006180:	887b      	ldrh	r3, [r7, #2]
 8006182:	041a      	lsls	r2, r3, #16
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	611a      	str	r2, [r3, #16]
}
 8006188:	bf00      	nop
 800618a:	370c      	adds	r7, #12
 800618c:	46bd      	mov	sp, r7
 800618e:	bc80      	pop	{r7}
 8006190:	4770      	bx	lr
	...

08006194 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b084      	sub	sp, #16
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d101      	bne.n	80061a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	e12b      	b.n	80063fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d106      	bne.n	80061c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f7fb fb9e 	bl	80018fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2224      	movs	r2, #36	@ 0x24
 80061c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f022 0201 	bic.w	r2, r2, #1
 80061d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80061e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80061f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80061f8:	f001 f832 	bl	8007260 <HAL_RCC_GetPCLK1Freq>
 80061fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	4a81      	ldr	r2, [pc, #516]	@ (8006408 <HAL_I2C_Init+0x274>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d807      	bhi.n	8006218 <HAL_I2C_Init+0x84>
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	4a80      	ldr	r2, [pc, #512]	@ (800640c <HAL_I2C_Init+0x278>)
 800620c:	4293      	cmp	r3, r2
 800620e:	bf94      	ite	ls
 8006210:	2301      	movls	r3, #1
 8006212:	2300      	movhi	r3, #0
 8006214:	b2db      	uxtb	r3, r3
 8006216:	e006      	b.n	8006226 <HAL_I2C_Init+0x92>
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	4a7d      	ldr	r2, [pc, #500]	@ (8006410 <HAL_I2C_Init+0x27c>)
 800621c:	4293      	cmp	r3, r2
 800621e:	bf94      	ite	ls
 8006220:	2301      	movls	r3, #1
 8006222:	2300      	movhi	r3, #0
 8006224:	b2db      	uxtb	r3, r3
 8006226:	2b00      	cmp	r3, #0
 8006228:	d001      	beq.n	800622e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	e0e7      	b.n	80063fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	4a78      	ldr	r2, [pc, #480]	@ (8006414 <HAL_I2C_Init+0x280>)
 8006232:	fba2 2303 	umull	r2, r3, r2, r3
 8006236:	0c9b      	lsrs	r3, r3, #18
 8006238:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	68ba      	ldr	r2, [r7, #8]
 800624a:	430a      	orrs	r2, r1
 800624c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	6a1b      	ldr	r3, [r3, #32]
 8006254:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	4a6a      	ldr	r2, [pc, #424]	@ (8006408 <HAL_I2C_Init+0x274>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d802      	bhi.n	8006268 <HAL_I2C_Init+0xd4>
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	3301      	adds	r3, #1
 8006266:	e009      	b.n	800627c <HAL_I2C_Init+0xe8>
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800626e:	fb02 f303 	mul.w	r3, r2, r3
 8006272:	4a69      	ldr	r2, [pc, #420]	@ (8006418 <HAL_I2C_Init+0x284>)
 8006274:	fba2 2303 	umull	r2, r3, r2, r3
 8006278:	099b      	lsrs	r3, r3, #6
 800627a:	3301      	adds	r3, #1
 800627c:	687a      	ldr	r2, [r7, #4]
 800627e:	6812      	ldr	r2, [r2, #0]
 8006280:	430b      	orrs	r3, r1
 8006282:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	69db      	ldr	r3, [r3, #28]
 800628a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800628e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	495c      	ldr	r1, [pc, #368]	@ (8006408 <HAL_I2C_Init+0x274>)
 8006298:	428b      	cmp	r3, r1
 800629a:	d819      	bhi.n	80062d0 <HAL_I2C_Init+0x13c>
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	1e59      	subs	r1, r3, #1
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	005b      	lsls	r3, r3, #1
 80062a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80062aa:	1c59      	adds	r1, r3, #1
 80062ac:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80062b0:	400b      	ands	r3, r1
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d00a      	beq.n	80062cc <HAL_I2C_Init+0x138>
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	1e59      	subs	r1, r3, #1
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	005b      	lsls	r3, r3, #1
 80062c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80062c4:	3301      	adds	r3, #1
 80062c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062ca:	e051      	b.n	8006370 <HAL_I2C_Init+0x1dc>
 80062cc:	2304      	movs	r3, #4
 80062ce:	e04f      	b.n	8006370 <HAL_I2C_Init+0x1dc>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d111      	bne.n	80062fc <HAL_I2C_Init+0x168>
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	1e58      	subs	r0, r3, #1
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6859      	ldr	r1, [r3, #4]
 80062e0:	460b      	mov	r3, r1
 80062e2:	005b      	lsls	r3, r3, #1
 80062e4:	440b      	add	r3, r1
 80062e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80062ea:	3301      	adds	r3, #1
 80062ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	bf0c      	ite	eq
 80062f4:	2301      	moveq	r3, #1
 80062f6:	2300      	movne	r3, #0
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	e012      	b.n	8006322 <HAL_I2C_Init+0x18e>
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	1e58      	subs	r0, r3, #1
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6859      	ldr	r1, [r3, #4]
 8006304:	460b      	mov	r3, r1
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	440b      	add	r3, r1
 800630a:	0099      	lsls	r1, r3, #2
 800630c:	440b      	add	r3, r1
 800630e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006312:	3301      	adds	r3, #1
 8006314:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006318:	2b00      	cmp	r3, #0
 800631a:	bf0c      	ite	eq
 800631c:	2301      	moveq	r3, #1
 800631e:	2300      	movne	r3, #0
 8006320:	b2db      	uxtb	r3, r3
 8006322:	2b00      	cmp	r3, #0
 8006324:	d001      	beq.n	800632a <HAL_I2C_Init+0x196>
 8006326:	2301      	movs	r3, #1
 8006328:	e022      	b.n	8006370 <HAL_I2C_Init+0x1dc>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d10e      	bne.n	8006350 <HAL_I2C_Init+0x1bc>
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	1e58      	subs	r0, r3, #1
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6859      	ldr	r1, [r3, #4]
 800633a:	460b      	mov	r3, r1
 800633c:	005b      	lsls	r3, r3, #1
 800633e:	440b      	add	r3, r1
 8006340:	fbb0 f3f3 	udiv	r3, r0, r3
 8006344:	3301      	adds	r3, #1
 8006346:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800634a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800634e:	e00f      	b.n	8006370 <HAL_I2C_Init+0x1dc>
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	1e58      	subs	r0, r3, #1
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6859      	ldr	r1, [r3, #4]
 8006358:	460b      	mov	r3, r1
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	440b      	add	r3, r1
 800635e:	0099      	lsls	r1, r3, #2
 8006360:	440b      	add	r3, r1
 8006362:	fbb0 f3f3 	udiv	r3, r0, r3
 8006366:	3301      	adds	r3, #1
 8006368:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800636c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006370:	6879      	ldr	r1, [r7, #4]
 8006372:	6809      	ldr	r1, [r1, #0]
 8006374:	4313      	orrs	r3, r2
 8006376:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	69da      	ldr	r2, [r3, #28]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6a1b      	ldr	r3, [r3, #32]
 800638a:	431a      	orrs	r2, r3
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	430a      	orrs	r2, r1
 8006392:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800639e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	6911      	ldr	r1, [r2, #16]
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	68d2      	ldr	r2, [r2, #12]
 80063aa:	4311      	orrs	r1, r2
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	6812      	ldr	r2, [r2, #0]
 80063b0:	430b      	orrs	r3, r1
 80063b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	68db      	ldr	r3, [r3, #12]
 80063ba:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	695a      	ldr	r2, [r3, #20]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	699b      	ldr	r3, [r3, #24]
 80063c6:	431a      	orrs	r2, r3
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	430a      	orrs	r2, r1
 80063ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f042 0201 	orr.w	r2, r2, #1
 80063de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2220      	movs	r2, #32
 80063ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80063fc:	2300      	movs	r3, #0
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3710      	adds	r7, #16
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop
 8006408:	000186a0 	.word	0x000186a0
 800640c:	001e847f 	.word	0x001e847f
 8006410:	003d08ff 	.word	0x003d08ff
 8006414:	431bde83 	.word	0x431bde83
 8006418:	10624dd3 	.word	0x10624dd3

0800641c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b088      	sub	sp, #32
 8006420:	af02      	add	r7, sp, #8
 8006422:	60f8      	str	r0, [r7, #12]
 8006424:	607a      	str	r2, [r7, #4]
 8006426:	461a      	mov	r2, r3
 8006428:	460b      	mov	r3, r1
 800642a:	817b      	strh	r3, [r7, #10]
 800642c:	4613      	mov	r3, r2
 800642e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006430:	f7ff fa60 	bl	80058f4 <HAL_GetTick>
 8006434:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800643c:	b2db      	uxtb	r3, r3
 800643e:	2b20      	cmp	r3, #32
 8006440:	f040 80e0 	bne.w	8006604 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	9300      	str	r3, [sp, #0]
 8006448:	2319      	movs	r3, #25
 800644a:	2201      	movs	r2, #1
 800644c:	4970      	ldr	r1, [pc, #448]	@ (8006610 <HAL_I2C_Master_Transmit+0x1f4>)
 800644e:	68f8      	ldr	r0, [r7, #12]
 8006450:	f000 f964 	bl	800671c <I2C_WaitOnFlagUntilTimeout>
 8006454:	4603      	mov	r3, r0
 8006456:	2b00      	cmp	r3, #0
 8006458:	d001      	beq.n	800645e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800645a:	2302      	movs	r3, #2
 800645c:	e0d3      	b.n	8006606 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006464:	2b01      	cmp	r3, #1
 8006466:	d101      	bne.n	800646c <HAL_I2C_Master_Transmit+0x50>
 8006468:	2302      	movs	r3, #2
 800646a:	e0cc      	b.n	8006606 <HAL_I2C_Master_Transmit+0x1ea>
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2201      	movs	r2, #1
 8006470:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f003 0301 	and.w	r3, r3, #1
 800647e:	2b01      	cmp	r3, #1
 8006480:	d007      	beq.n	8006492 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f042 0201 	orr.w	r2, r2, #1
 8006490:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80064a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2221      	movs	r2, #33	@ 0x21
 80064a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2210      	movs	r2, #16
 80064ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2200      	movs	r2, #0
 80064b6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	893a      	ldrh	r2, [r7, #8]
 80064c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064c8:	b29a      	uxth	r2, r3
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	4a50      	ldr	r2, [pc, #320]	@ (8006614 <HAL_I2C_Master_Transmit+0x1f8>)
 80064d2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80064d4:	8979      	ldrh	r1, [r7, #10]
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	6a3a      	ldr	r2, [r7, #32]
 80064da:	68f8      	ldr	r0, [r7, #12]
 80064dc:	f000 f89c 	bl	8006618 <I2C_MasterRequestWrite>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d001      	beq.n	80064ea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	e08d      	b.n	8006606 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064ea:	2300      	movs	r3, #0
 80064ec:	613b      	str	r3, [r7, #16]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	695b      	ldr	r3, [r3, #20]
 80064f4:	613b      	str	r3, [r7, #16]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	699b      	ldr	r3, [r3, #24]
 80064fc:	613b      	str	r3, [r7, #16]
 80064fe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006500:	e066      	b.n	80065d0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006502:	697a      	ldr	r2, [r7, #20]
 8006504:	6a39      	ldr	r1, [r7, #32]
 8006506:	68f8      	ldr	r0, [r7, #12]
 8006508:	f000 fa22 	bl	8006950 <I2C_WaitOnTXEFlagUntilTimeout>
 800650c:	4603      	mov	r3, r0
 800650e:	2b00      	cmp	r3, #0
 8006510:	d00d      	beq.n	800652e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006516:	2b04      	cmp	r3, #4
 8006518:	d107      	bne.n	800652a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006528:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	e06b      	b.n	8006606 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006532:	781a      	ldrb	r2, [r3, #0]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800653e:	1c5a      	adds	r2, r3, #1
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006548:	b29b      	uxth	r3, r3
 800654a:	3b01      	subs	r3, #1
 800654c:	b29a      	uxth	r2, r3
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006556:	3b01      	subs	r3, #1
 8006558:	b29a      	uxth	r2, r3
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	695b      	ldr	r3, [r3, #20]
 8006564:	f003 0304 	and.w	r3, r3, #4
 8006568:	2b04      	cmp	r3, #4
 800656a:	d11b      	bne.n	80065a4 <HAL_I2C_Master_Transmit+0x188>
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006570:	2b00      	cmp	r3, #0
 8006572:	d017      	beq.n	80065a4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006578:	781a      	ldrb	r2, [r3, #0]
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006584:	1c5a      	adds	r2, r3, #1
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800658e:	b29b      	uxth	r3, r3
 8006590:	3b01      	subs	r3, #1
 8006592:	b29a      	uxth	r2, r3
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800659c:	3b01      	subs	r3, #1
 800659e:	b29a      	uxth	r2, r3
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065a4:	697a      	ldr	r2, [r7, #20]
 80065a6:	6a39      	ldr	r1, [r7, #32]
 80065a8:	68f8      	ldr	r0, [r7, #12]
 80065aa:	f000 fa19 	bl	80069e0 <I2C_WaitOnBTFFlagUntilTimeout>
 80065ae:	4603      	mov	r3, r0
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d00d      	beq.n	80065d0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065b8:	2b04      	cmp	r3, #4
 80065ba:	d107      	bne.n	80065cc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80065ca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	e01a      	b.n	8006606 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d194      	bne.n	8006502 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80065e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2220      	movs	r2, #32
 80065ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2200      	movs	r2, #0
 80065f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2200      	movs	r2, #0
 80065fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006600:	2300      	movs	r3, #0
 8006602:	e000      	b.n	8006606 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006604:	2302      	movs	r3, #2
  }
}
 8006606:	4618      	mov	r0, r3
 8006608:	3718      	adds	r7, #24
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop
 8006610:	00100002 	.word	0x00100002
 8006614:	ffff0000 	.word	0xffff0000

08006618 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b088      	sub	sp, #32
 800661c:	af02      	add	r7, sp, #8
 800661e:	60f8      	str	r0, [r7, #12]
 8006620:	607a      	str	r2, [r7, #4]
 8006622:	603b      	str	r3, [r7, #0]
 8006624:	460b      	mov	r3, r1
 8006626:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800662c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	2b08      	cmp	r3, #8
 8006632:	d006      	beq.n	8006642 <I2C_MasterRequestWrite+0x2a>
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	2b01      	cmp	r3, #1
 8006638:	d003      	beq.n	8006642 <I2C_MasterRequestWrite+0x2a>
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006640:	d108      	bne.n	8006654 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006650:	601a      	str	r2, [r3, #0]
 8006652:	e00b      	b.n	800666c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006658:	2b12      	cmp	r3, #18
 800665a:	d107      	bne.n	800666c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800666a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	9300      	str	r3, [sp, #0]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006678:	68f8      	ldr	r0, [r7, #12]
 800667a:	f000 f84f 	bl	800671c <I2C_WaitOnFlagUntilTimeout>
 800667e:	4603      	mov	r3, r0
 8006680:	2b00      	cmp	r3, #0
 8006682:	d00d      	beq.n	80066a0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800668e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006692:	d103      	bne.n	800669c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800669a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800669c:	2303      	movs	r3, #3
 800669e:	e035      	b.n	800670c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	691b      	ldr	r3, [r3, #16]
 80066a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80066a8:	d108      	bne.n	80066bc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80066aa:	897b      	ldrh	r3, [r7, #10]
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	461a      	mov	r2, r3
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80066b8:	611a      	str	r2, [r3, #16]
 80066ba:	e01b      	b.n	80066f4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80066bc:	897b      	ldrh	r3, [r7, #10]
 80066be:	11db      	asrs	r3, r3, #7
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	f003 0306 	and.w	r3, r3, #6
 80066c6:	b2db      	uxtb	r3, r3
 80066c8:	f063 030f 	orn	r3, r3, #15
 80066cc:	b2da      	uxtb	r2, r3
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	490e      	ldr	r1, [pc, #56]	@ (8006714 <I2C_MasterRequestWrite+0xfc>)
 80066da:	68f8      	ldr	r0, [r7, #12]
 80066dc:	f000 f898 	bl	8006810 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d001      	beq.n	80066ea <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	e010      	b.n	800670c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80066ea:	897b      	ldrh	r3, [r7, #10]
 80066ec:	b2da      	uxtb	r2, r3
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	4907      	ldr	r1, [pc, #28]	@ (8006718 <I2C_MasterRequestWrite+0x100>)
 80066fa:	68f8      	ldr	r0, [r7, #12]
 80066fc:	f000 f888 	bl	8006810 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006700:	4603      	mov	r3, r0
 8006702:	2b00      	cmp	r3, #0
 8006704:	d001      	beq.n	800670a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	e000      	b.n	800670c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800670a:	2300      	movs	r3, #0
}
 800670c:	4618      	mov	r0, r3
 800670e:	3718      	adds	r7, #24
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}
 8006714:	00010008 	.word	0x00010008
 8006718:	00010002 	.word	0x00010002

0800671c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b084      	sub	sp, #16
 8006720:	af00      	add	r7, sp, #0
 8006722:	60f8      	str	r0, [r7, #12]
 8006724:	60b9      	str	r1, [r7, #8]
 8006726:	603b      	str	r3, [r7, #0]
 8006728:	4613      	mov	r3, r2
 800672a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800672c:	e048      	b.n	80067c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006734:	d044      	beq.n	80067c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006736:	f7ff f8dd 	bl	80058f4 <HAL_GetTick>
 800673a:	4602      	mov	r2, r0
 800673c:	69bb      	ldr	r3, [r7, #24]
 800673e:	1ad3      	subs	r3, r2, r3
 8006740:	683a      	ldr	r2, [r7, #0]
 8006742:	429a      	cmp	r2, r3
 8006744:	d302      	bcc.n	800674c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d139      	bne.n	80067c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	0c1b      	lsrs	r3, r3, #16
 8006750:	b2db      	uxtb	r3, r3
 8006752:	2b01      	cmp	r3, #1
 8006754:	d10d      	bne.n	8006772 <I2C_WaitOnFlagUntilTimeout+0x56>
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	695b      	ldr	r3, [r3, #20]
 800675c:	43da      	mvns	r2, r3
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	4013      	ands	r3, r2
 8006762:	b29b      	uxth	r3, r3
 8006764:	2b00      	cmp	r3, #0
 8006766:	bf0c      	ite	eq
 8006768:	2301      	moveq	r3, #1
 800676a:	2300      	movne	r3, #0
 800676c:	b2db      	uxtb	r3, r3
 800676e:	461a      	mov	r2, r3
 8006770:	e00c      	b.n	800678c <I2C_WaitOnFlagUntilTimeout+0x70>
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	699b      	ldr	r3, [r3, #24]
 8006778:	43da      	mvns	r2, r3
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	4013      	ands	r3, r2
 800677e:	b29b      	uxth	r3, r3
 8006780:	2b00      	cmp	r3, #0
 8006782:	bf0c      	ite	eq
 8006784:	2301      	moveq	r3, #1
 8006786:	2300      	movne	r3, #0
 8006788:	b2db      	uxtb	r3, r3
 800678a:	461a      	mov	r2, r3
 800678c:	79fb      	ldrb	r3, [r7, #7]
 800678e:	429a      	cmp	r2, r3
 8006790:	d116      	bne.n	80067c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2200      	movs	r2, #0
 8006796:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2220      	movs	r2, #32
 800679c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2200      	movs	r2, #0
 80067a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067ac:	f043 0220 	orr.w	r2, r3, #32
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80067bc:	2301      	movs	r3, #1
 80067be:	e023      	b.n	8006808 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	0c1b      	lsrs	r3, r3, #16
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	d10d      	bne.n	80067e6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	695b      	ldr	r3, [r3, #20]
 80067d0:	43da      	mvns	r2, r3
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	4013      	ands	r3, r2
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	2b00      	cmp	r3, #0
 80067da:	bf0c      	ite	eq
 80067dc:	2301      	moveq	r3, #1
 80067de:	2300      	movne	r3, #0
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	461a      	mov	r2, r3
 80067e4:	e00c      	b.n	8006800 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	699b      	ldr	r3, [r3, #24]
 80067ec:	43da      	mvns	r2, r3
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	4013      	ands	r3, r2
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	bf0c      	ite	eq
 80067f8:	2301      	moveq	r3, #1
 80067fa:	2300      	movne	r3, #0
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	461a      	mov	r2, r3
 8006800:	79fb      	ldrb	r3, [r7, #7]
 8006802:	429a      	cmp	r2, r3
 8006804:	d093      	beq.n	800672e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006806:	2300      	movs	r3, #0
}
 8006808:	4618      	mov	r0, r3
 800680a:	3710      	adds	r7, #16
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}

08006810 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b084      	sub	sp, #16
 8006814:	af00      	add	r7, sp, #0
 8006816:	60f8      	str	r0, [r7, #12]
 8006818:	60b9      	str	r1, [r7, #8]
 800681a:	607a      	str	r2, [r7, #4]
 800681c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800681e:	e071      	b.n	8006904 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	695b      	ldr	r3, [r3, #20]
 8006826:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800682a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800682e:	d123      	bne.n	8006878 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800683e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006848:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2200      	movs	r2, #0
 800684e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2220      	movs	r2, #32
 8006854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2200      	movs	r2, #0
 800685c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006864:	f043 0204 	orr.w	r2, r3, #4
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2200      	movs	r2, #0
 8006870:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	e067      	b.n	8006948 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800687e:	d041      	beq.n	8006904 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006880:	f7ff f838 	bl	80058f4 <HAL_GetTick>
 8006884:	4602      	mov	r2, r0
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	1ad3      	subs	r3, r2, r3
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	429a      	cmp	r2, r3
 800688e:	d302      	bcc.n	8006896 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d136      	bne.n	8006904 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	0c1b      	lsrs	r3, r3, #16
 800689a:	b2db      	uxtb	r3, r3
 800689c:	2b01      	cmp	r3, #1
 800689e:	d10c      	bne.n	80068ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	695b      	ldr	r3, [r3, #20]
 80068a6:	43da      	mvns	r2, r3
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	4013      	ands	r3, r2
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	bf14      	ite	ne
 80068b2:	2301      	movne	r3, #1
 80068b4:	2300      	moveq	r3, #0
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	e00b      	b.n	80068d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	699b      	ldr	r3, [r3, #24]
 80068c0:	43da      	mvns	r2, r3
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	4013      	ands	r3, r2
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	bf14      	ite	ne
 80068cc:	2301      	movne	r3, #1
 80068ce:	2300      	moveq	r3, #0
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d016      	beq.n	8006904 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2200      	movs	r2, #0
 80068da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2220      	movs	r2, #32
 80068e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068f0:	f043 0220 	orr.w	r2, r3, #32
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2200      	movs	r2, #0
 80068fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	e021      	b.n	8006948 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	0c1b      	lsrs	r3, r3, #16
 8006908:	b2db      	uxtb	r3, r3
 800690a:	2b01      	cmp	r3, #1
 800690c:	d10c      	bne.n	8006928 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	695b      	ldr	r3, [r3, #20]
 8006914:	43da      	mvns	r2, r3
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	4013      	ands	r3, r2
 800691a:	b29b      	uxth	r3, r3
 800691c:	2b00      	cmp	r3, #0
 800691e:	bf14      	ite	ne
 8006920:	2301      	movne	r3, #1
 8006922:	2300      	moveq	r3, #0
 8006924:	b2db      	uxtb	r3, r3
 8006926:	e00b      	b.n	8006940 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	699b      	ldr	r3, [r3, #24]
 800692e:	43da      	mvns	r2, r3
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	4013      	ands	r3, r2
 8006934:	b29b      	uxth	r3, r3
 8006936:	2b00      	cmp	r3, #0
 8006938:	bf14      	ite	ne
 800693a:	2301      	movne	r3, #1
 800693c:	2300      	moveq	r3, #0
 800693e:	b2db      	uxtb	r3, r3
 8006940:	2b00      	cmp	r3, #0
 8006942:	f47f af6d 	bne.w	8006820 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006946:	2300      	movs	r3, #0
}
 8006948:	4618      	mov	r0, r3
 800694a:	3710      	adds	r7, #16
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}

08006950 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	60f8      	str	r0, [r7, #12]
 8006958:	60b9      	str	r1, [r7, #8]
 800695a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800695c:	e034      	b.n	80069c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800695e:	68f8      	ldr	r0, [r7, #12]
 8006960:	f000 f886 	bl	8006a70 <I2C_IsAcknowledgeFailed>
 8006964:	4603      	mov	r3, r0
 8006966:	2b00      	cmp	r3, #0
 8006968:	d001      	beq.n	800696e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	e034      	b.n	80069d8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006974:	d028      	beq.n	80069c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006976:	f7fe ffbd 	bl	80058f4 <HAL_GetTick>
 800697a:	4602      	mov	r2, r0
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	1ad3      	subs	r3, r2, r3
 8006980:	68ba      	ldr	r2, [r7, #8]
 8006982:	429a      	cmp	r2, r3
 8006984:	d302      	bcc.n	800698c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d11d      	bne.n	80069c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	695b      	ldr	r3, [r3, #20]
 8006992:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006996:	2b80      	cmp	r3, #128	@ 0x80
 8006998:	d016      	beq.n	80069c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2200      	movs	r2, #0
 800699e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2220      	movs	r2, #32
 80069a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2200      	movs	r2, #0
 80069ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069b4:	f043 0220 	orr.w	r2, r3, #32
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2200      	movs	r2, #0
 80069c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	e007      	b.n	80069d8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	695b      	ldr	r3, [r3, #20]
 80069ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069d2:	2b80      	cmp	r3, #128	@ 0x80
 80069d4:	d1c3      	bne.n	800695e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80069d6:	2300      	movs	r3, #0
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3710      	adds	r7, #16
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}

080069e0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b084      	sub	sp, #16
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	60f8      	str	r0, [r7, #12]
 80069e8:	60b9      	str	r1, [r7, #8]
 80069ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80069ec:	e034      	b.n	8006a58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80069ee:	68f8      	ldr	r0, [r7, #12]
 80069f0:	f000 f83e 	bl	8006a70 <I2C_IsAcknowledgeFailed>
 80069f4:	4603      	mov	r3, r0
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d001      	beq.n	80069fe <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	e034      	b.n	8006a68 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a04:	d028      	beq.n	8006a58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a06:	f7fe ff75 	bl	80058f4 <HAL_GetTick>
 8006a0a:	4602      	mov	r2, r0
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	1ad3      	subs	r3, r2, r3
 8006a10:	68ba      	ldr	r2, [r7, #8]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d302      	bcc.n	8006a1c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d11d      	bne.n	8006a58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	695b      	ldr	r3, [r3, #20]
 8006a22:	f003 0304 	and.w	r3, r3, #4
 8006a26:	2b04      	cmp	r3, #4
 8006a28:	d016      	beq.n	8006a58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2220      	movs	r2, #32
 8006a34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a44:	f043 0220 	orr.w	r2, r3, #32
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006a54:	2301      	movs	r3, #1
 8006a56:	e007      	b.n	8006a68 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	695b      	ldr	r3, [r3, #20]
 8006a5e:	f003 0304 	and.w	r3, r3, #4
 8006a62:	2b04      	cmp	r3, #4
 8006a64:	d1c3      	bne.n	80069ee <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006a66:	2300      	movs	r3, #0
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3710      	adds	r7, #16
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b083      	sub	sp, #12
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	695b      	ldr	r3, [r3, #20]
 8006a7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a86:	d11b      	bne.n	8006ac0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006a90:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2200      	movs	r2, #0
 8006a96:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2220      	movs	r2, #32
 8006a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aac:	f043 0204 	orr.w	r2, r3, #4
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006abc:	2301      	movs	r3, #1
 8006abe:	e000      	b.n	8006ac2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006ac0:	2300      	movs	r3, #0
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	370c      	adds	r7, #12
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bc80      	pop	{r7}
 8006aca:	4770      	bx	lr

08006acc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b086      	sub	sp, #24
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d101      	bne.n	8006ade <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	e272      	b.n	8006fc4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f003 0301 	and.w	r3, r3, #1
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	f000 8087 	beq.w	8006bfa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006aec:	4b92      	ldr	r3, [pc, #584]	@ (8006d38 <HAL_RCC_OscConfig+0x26c>)
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	f003 030c 	and.w	r3, r3, #12
 8006af4:	2b04      	cmp	r3, #4
 8006af6:	d00c      	beq.n	8006b12 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006af8:	4b8f      	ldr	r3, [pc, #572]	@ (8006d38 <HAL_RCC_OscConfig+0x26c>)
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	f003 030c 	and.w	r3, r3, #12
 8006b00:	2b08      	cmp	r3, #8
 8006b02:	d112      	bne.n	8006b2a <HAL_RCC_OscConfig+0x5e>
 8006b04:	4b8c      	ldr	r3, [pc, #560]	@ (8006d38 <HAL_RCC_OscConfig+0x26c>)
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006b0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b10:	d10b      	bne.n	8006b2a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b12:	4b89      	ldr	r3, [pc, #548]	@ (8006d38 <HAL_RCC_OscConfig+0x26c>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d06c      	beq.n	8006bf8 <HAL_RCC_OscConfig+0x12c>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d168      	bne.n	8006bf8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	e24c      	b.n	8006fc4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b32:	d106      	bne.n	8006b42 <HAL_RCC_OscConfig+0x76>
 8006b34:	4b80      	ldr	r3, [pc, #512]	@ (8006d38 <HAL_RCC_OscConfig+0x26c>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a7f      	ldr	r2, [pc, #508]	@ (8006d38 <HAL_RCC_OscConfig+0x26c>)
 8006b3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b3e:	6013      	str	r3, [r2, #0]
 8006b40:	e02e      	b.n	8006ba0 <HAL_RCC_OscConfig+0xd4>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d10c      	bne.n	8006b64 <HAL_RCC_OscConfig+0x98>
 8006b4a:	4b7b      	ldr	r3, [pc, #492]	@ (8006d38 <HAL_RCC_OscConfig+0x26c>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a7a      	ldr	r2, [pc, #488]	@ (8006d38 <HAL_RCC_OscConfig+0x26c>)
 8006b50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b54:	6013      	str	r3, [r2, #0]
 8006b56:	4b78      	ldr	r3, [pc, #480]	@ (8006d38 <HAL_RCC_OscConfig+0x26c>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a77      	ldr	r2, [pc, #476]	@ (8006d38 <HAL_RCC_OscConfig+0x26c>)
 8006b5c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006b60:	6013      	str	r3, [r2, #0]
 8006b62:	e01d      	b.n	8006ba0 <HAL_RCC_OscConfig+0xd4>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006b6c:	d10c      	bne.n	8006b88 <HAL_RCC_OscConfig+0xbc>
 8006b6e:	4b72      	ldr	r3, [pc, #456]	@ (8006d38 <HAL_RCC_OscConfig+0x26c>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a71      	ldr	r2, [pc, #452]	@ (8006d38 <HAL_RCC_OscConfig+0x26c>)
 8006b74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006b78:	6013      	str	r3, [r2, #0]
 8006b7a:	4b6f      	ldr	r3, [pc, #444]	@ (8006d38 <HAL_RCC_OscConfig+0x26c>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a6e      	ldr	r2, [pc, #440]	@ (8006d38 <HAL_RCC_OscConfig+0x26c>)
 8006b80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b84:	6013      	str	r3, [r2, #0]
 8006b86:	e00b      	b.n	8006ba0 <HAL_RCC_OscConfig+0xd4>
 8006b88:	4b6b      	ldr	r3, [pc, #428]	@ (8006d38 <HAL_RCC_OscConfig+0x26c>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a6a      	ldr	r2, [pc, #424]	@ (8006d38 <HAL_RCC_OscConfig+0x26c>)
 8006b8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b92:	6013      	str	r3, [r2, #0]
 8006b94:	4b68      	ldr	r3, [pc, #416]	@ (8006d38 <HAL_RCC_OscConfig+0x26c>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a67      	ldr	r2, [pc, #412]	@ (8006d38 <HAL_RCC_OscConfig+0x26c>)
 8006b9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006b9e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d013      	beq.n	8006bd0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ba8:	f7fe fea4 	bl	80058f4 <HAL_GetTick>
 8006bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bae:	e008      	b.n	8006bc2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006bb0:	f7fe fea0 	bl	80058f4 <HAL_GetTick>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	1ad3      	subs	r3, r2, r3
 8006bba:	2b64      	cmp	r3, #100	@ 0x64
 8006bbc:	d901      	bls.n	8006bc2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006bbe:	2303      	movs	r3, #3
 8006bc0:	e200      	b.n	8006fc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bc2:	4b5d      	ldr	r3, [pc, #372]	@ (8006d38 <HAL_RCC_OscConfig+0x26c>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d0f0      	beq.n	8006bb0 <HAL_RCC_OscConfig+0xe4>
 8006bce:	e014      	b.n	8006bfa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bd0:	f7fe fe90 	bl	80058f4 <HAL_GetTick>
 8006bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006bd6:	e008      	b.n	8006bea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006bd8:	f7fe fe8c 	bl	80058f4 <HAL_GetTick>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	1ad3      	subs	r3, r2, r3
 8006be2:	2b64      	cmp	r3, #100	@ 0x64
 8006be4:	d901      	bls.n	8006bea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006be6:	2303      	movs	r3, #3
 8006be8:	e1ec      	b.n	8006fc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006bea:	4b53      	ldr	r3, [pc, #332]	@ (8006d38 <HAL_RCC_OscConfig+0x26c>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d1f0      	bne.n	8006bd8 <HAL_RCC_OscConfig+0x10c>
 8006bf6:	e000      	b.n	8006bfa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f003 0302 	and.w	r3, r3, #2
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d063      	beq.n	8006cce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006c06:	4b4c      	ldr	r3, [pc, #304]	@ (8006d38 <HAL_RCC_OscConfig+0x26c>)
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	f003 030c 	and.w	r3, r3, #12
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d00b      	beq.n	8006c2a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006c12:	4b49      	ldr	r3, [pc, #292]	@ (8006d38 <HAL_RCC_OscConfig+0x26c>)
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	f003 030c 	and.w	r3, r3, #12
 8006c1a:	2b08      	cmp	r3, #8
 8006c1c:	d11c      	bne.n	8006c58 <HAL_RCC_OscConfig+0x18c>
 8006c1e:	4b46      	ldr	r3, [pc, #280]	@ (8006d38 <HAL_RCC_OscConfig+0x26c>)
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d116      	bne.n	8006c58 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c2a:	4b43      	ldr	r3, [pc, #268]	@ (8006d38 <HAL_RCC_OscConfig+0x26c>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f003 0302 	and.w	r3, r3, #2
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d005      	beq.n	8006c42 <HAL_RCC_OscConfig+0x176>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	691b      	ldr	r3, [r3, #16]
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d001      	beq.n	8006c42 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	e1c0      	b.n	8006fc4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c42:	4b3d      	ldr	r3, [pc, #244]	@ (8006d38 <HAL_RCC_OscConfig+0x26c>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	695b      	ldr	r3, [r3, #20]
 8006c4e:	00db      	lsls	r3, r3, #3
 8006c50:	4939      	ldr	r1, [pc, #228]	@ (8006d38 <HAL_RCC_OscConfig+0x26c>)
 8006c52:	4313      	orrs	r3, r2
 8006c54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c56:	e03a      	b.n	8006cce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	691b      	ldr	r3, [r3, #16]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d020      	beq.n	8006ca2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c60:	4b36      	ldr	r3, [pc, #216]	@ (8006d3c <HAL_RCC_OscConfig+0x270>)
 8006c62:	2201      	movs	r2, #1
 8006c64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c66:	f7fe fe45 	bl	80058f4 <HAL_GetTick>
 8006c6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c6c:	e008      	b.n	8006c80 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c6e:	f7fe fe41 	bl	80058f4 <HAL_GetTick>
 8006c72:	4602      	mov	r2, r0
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	1ad3      	subs	r3, r2, r3
 8006c78:	2b02      	cmp	r3, #2
 8006c7a:	d901      	bls.n	8006c80 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006c7c:	2303      	movs	r3, #3
 8006c7e:	e1a1      	b.n	8006fc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c80:	4b2d      	ldr	r3, [pc, #180]	@ (8006d38 <HAL_RCC_OscConfig+0x26c>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f003 0302 	and.w	r3, r3, #2
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d0f0      	beq.n	8006c6e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c8c:	4b2a      	ldr	r3, [pc, #168]	@ (8006d38 <HAL_RCC_OscConfig+0x26c>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	695b      	ldr	r3, [r3, #20]
 8006c98:	00db      	lsls	r3, r3, #3
 8006c9a:	4927      	ldr	r1, [pc, #156]	@ (8006d38 <HAL_RCC_OscConfig+0x26c>)
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	600b      	str	r3, [r1, #0]
 8006ca0:	e015      	b.n	8006cce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006ca2:	4b26      	ldr	r3, [pc, #152]	@ (8006d3c <HAL_RCC_OscConfig+0x270>)
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ca8:	f7fe fe24 	bl	80058f4 <HAL_GetTick>
 8006cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006cae:	e008      	b.n	8006cc2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006cb0:	f7fe fe20 	bl	80058f4 <HAL_GetTick>
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	1ad3      	subs	r3, r2, r3
 8006cba:	2b02      	cmp	r3, #2
 8006cbc:	d901      	bls.n	8006cc2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006cbe:	2303      	movs	r3, #3
 8006cc0:	e180      	b.n	8006fc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006cc2:	4b1d      	ldr	r3, [pc, #116]	@ (8006d38 <HAL_RCC_OscConfig+0x26c>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f003 0302 	and.w	r3, r3, #2
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d1f0      	bne.n	8006cb0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f003 0308 	and.w	r3, r3, #8
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d03a      	beq.n	8006d50 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	699b      	ldr	r3, [r3, #24]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d019      	beq.n	8006d16 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ce2:	4b17      	ldr	r3, [pc, #92]	@ (8006d40 <HAL_RCC_OscConfig+0x274>)
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ce8:	f7fe fe04 	bl	80058f4 <HAL_GetTick>
 8006cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006cee:	e008      	b.n	8006d02 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006cf0:	f7fe fe00 	bl	80058f4 <HAL_GetTick>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	1ad3      	subs	r3, r2, r3
 8006cfa:	2b02      	cmp	r3, #2
 8006cfc:	d901      	bls.n	8006d02 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006cfe:	2303      	movs	r3, #3
 8006d00:	e160      	b.n	8006fc4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d02:	4b0d      	ldr	r3, [pc, #52]	@ (8006d38 <HAL_RCC_OscConfig+0x26c>)
 8006d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d06:	f003 0302 	and.w	r3, r3, #2
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d0f0      	beq.n	8006cf0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006d0e:	2001      	movs	r0, #1
 8006d10:	f000 faba 	bl	8007288 <RCC_Delay>
 8006d14:	e01c      	b.n	8006d50 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d16:	4b0a      	ldr	r3, [pc, #40]	@ (8006d40 <HAL_RCC_OscConfig+0x274>)
 8006d18:	2200      	movs	r2, #0
 8006d1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d1c:	f7fe fdea 	bl	80058f4 <HAL_GetTick>
 8006d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d22:	e00f      	b.n	8006d44 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d24:	f7fe fde6 	bl	80058f4 <HAL_GetTick>
 8006d28:	4602      	mov	r2, r0
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	1ad3      	subs	r3, r2, r3
 8006d2e:	2b02      	cmp	r3, #2
 8006d30:	d908      	bls.n	8006d44 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006d32:	2303      	movs	r3, #3
 8006d34:	e146      	b.n	8006fc4 <HAL_RCC_OscConfig+0x4f8>
 8006d36:	bf00      	nop
 8006d38:	40021000 	.word	0x40021000
 8006d3c:	42420000 	.word	0x42420000
 8006d40:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d44:	4b92      	ldr	r3, [pc, #584]	@ (8006f90 <HAL_RCC_OscConfig+0x4c4>)
 8006d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d48:	f003 0302 	and.w	r3, r3, #2
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d1e9      	bne.n	8006d24 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f003 0304 	and.w	r3, r3, #4
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	f000 80a6 	beq.w	8006eaa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d62:	4b8b      	ldr	r3, [pc, #556]	@ (8006f90 <HAL_RCC_OscConfig+0x4c4>)
 8006d64:	69db      	ldr	r3, [r3, #28]
 8006d66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d10d      	bne.n	8006d8a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d6e:	4b88      	ldr	r3, [pc, #544]	@ (8006f90 <HAL_RCC_OscConfig+0x4c4>)
 8006d70:	69db      	ldr	r3, [r3, #28]
 8006d72:	4a87      	ldr	r2, [pc, #540]	@ (8006f90 <HAL_RCC_OscConfig+0x4c4>)
 8006d74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d78:	61d3      	str	r3, [r2, #28]
 8006d7a:	4b85      	ldr	r3, [pc, #532]	@ (8006f90 <HAL_RCC_OscConfig+0x4c4>)
 8006d7c:	69db      	ldr	r3, [r3, #28]
 8006d7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d82:	60bb      	str	r3, [r7, #8]
 8006d84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d86:	2301      	movs	r3, #1
 8006d88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d8a:	4b82      	ldr	r3, [pc, #520]	@ (8006f94 <HAL_RCC_OscConfig+0x4c8>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d118      	bne.n	8006dc8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d96:	4b7f      	ldr	r3, [pc, #508]	@ (8006f94 <HAL_RCC_OscConfig+0x4c8>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a7e      	ldr	r2, [pc, #504]	@ (8006f94 <HAL_RCC_OscConfig+0x4c8>)
 8006d9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006da0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006da2:	f7fe fda7 	bl	80058f4 <HAL_GetTick>
 8006da6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006da8:	e008      	b.n	8006dbc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006daa:	f7fe fda3 	bl	80058f4 <HAL_GetTick>
 8006dae:	4602      	mov	r2, r0
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	1ad3      	subs	r3, r2, r3
 8006db4:	2b64      	cmp	r3, #100	@ 0x64
 8006db6:	d901      	bls.n	8006dbc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006db8:	2303      	movs	r3, #3
 8006dba:	e103      	b.n	8006fc4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006dbc:	4b75      	ldr	r3, [pc, #468]	@ (8006f94 <HAL_RCC_OscConfig+0x4c8>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d0f0      	beq.n	8006daa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	68db      	ldr	r3, [r3, #12]
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d106      	bne.n	8006dde <HAL_RCC_OscConfig+0x312>
 8006dd0:	4b6f      	ldr	r3, [pc, #444]	@ (8006f90 <HAL_RCC_OscConfig+0x4c4>)
 8006dd2:	6a1b      	ldr	r3, [r3, #32]
 8006dd4:	4a6e      	ldr	r2, [pc, #440]	@ (8006f90 <HAL_RCC_OscConfig+0x4c4>)
 8006dd6:	f043 0301 	orr.w	r3, r3, #1
 8006dda:	6213      	str	r3, [r2, #32]
 8006ddc:	e02d      	b.n	8006e3a <HAL_RCC_OscConfig+0x36e>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	68db      	ldr	r3, [r3, #12]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d10c      	bne.n	8006e00 <HAL_RCC_OscConfig+0x334>
 8006de6:	4b6a      	ldr	r3, [pc, #424]	@ (8006f90 <HAL_RCC_OscConfig+0x4c4>)
 8006de8:	6a1b      	ldr	r3, [r3, #32]
 8006dea:	4a69      	ldr	r2, [pc, #420]	@ (8006f90 <HAL_RCC_OscConfig+0x4c4>)
 8006dec:	f023 0301 	bic.w	r3, r3, #1
 8006df0:	6213      	str	r3, [r2, #32]
 8006df2:	4b67      	ldr	r3, [pc, #412]	@ (8006f90 <HAL_RCC_OscConfig+0x4c4>)
 8006df4:	6a1b      	ldr	r3, [r3, #32]
 8006df6:	4a66      	ldr	r2, [pc, #408]	@ (8006f90 <HAL_RCC_OscConfig+0x4c4>)
 8006df8:	f023 0304 	bic.w	r3, r3, #4
 8006dfc:	6213      	str	r3, [r2, #32]
 8006dfe:	e01c      	b.n	8006e3a <HAL_RCC_OscConfig+0x36e>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	68db      	ldr	r3, [r3, #12]
 8006e04:	2b05      	cmp	r3, #5
 8006e06:	d10c      	bne.n	8006e22 <HAL_RCC_OscConfig+0x356>
 8006e08:	4b61      	ldr	r3, [pc, #388]	@ (8006f90 <HAL_RCC_OscConfig+0x4c4>)
 8006e0a:	6a1b      	ldr	r3, [r3, #32]
 8006e0c:	4a60      	ldr	r2, [pc, #384]	@ (8006f90 <HAL_RCC_OscConfig+0x4c4>)
 8006e0e:	f043 0304 	orr.w	r3, r3, #4
 8006e12:	6213      	str	r3, [r2, #32]
 8006e14:	4b5e      	ldr	r3, [pc, #376]	@ (8006f90 <HAL_RCC_OscConfig+0x4c4>)
 8006e16:	6a1b      	ldr	r3, [r3, #32]
 8006e18:	4a5d      	ldr	r2, [pc, #372]	@ (8006f90 <HAL_RCC_OscConfig+0x4c4>)
 8006e1a:	f043 0301 	orr.w	r3, r3, #1
 8006e1e:	6213      	str	r3, [r2, #32]
 8006e20:	e00b      	b.n	8006e3a <HAL_RCC_OscConfig+0x36e>
 8006e22:	4b5b      	ldr	r3, [pc, #364]	@ (8006f90 <HAL_RCC_OscConfig+0x4c4>)
 8006e24:	6a1b      	ldr	r3, [r3, #32]
 8006e26:	4a5a      	ldr	r2, [pc, #360]	@ (8006f90 <HAL_RCC_OscConfig+0x4c4>)
 8006e28:	f023 0301 	bic.w	r3, r3, #1
 8006e2c:	6213      	str	r3, [r2, #32]
 8006e2e:	4b58      	ldr	r3, [pc, #352]	@ (8006f90 <HAL_RCC_OscConfig+0x4c4>)
 8006e30:	6a1b      	ldr	r3, [r3, #32]
 8006e32:	4a57      	ldr	r2, [pc, #348]	@ (8006f90 <HAL_RCC_OscConfig+0x4c4>)
 8006e34:	f023 0304 	bic.w	r3, r3, #4
 8006e38:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	68db      	ldr	r3, [r3, #12]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d015      	beq.n	8006e6e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e42:	f7fe fd57 	bl	80058f4 <HAL_GetTick>
 8006e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e48:	e00a      	b.n	8006e60 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e4a:	f7fe fd53 	bl	80058f4 <HAL_GetTick>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	1ad3      	subs	r3, r2, r3
 8006e54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d901      	bls.n	8006e60 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006e5c:	2303      	movs	r3, #3
 8006e5e:	e0b1      	b.n	8006fc4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e60:	4b4b      	ldr	r3, [pc, #300]	@ (8006f90 <HAL_RCC_OscConfig+0x4c4>)
 8006e62:	6a1b      	ldr	r3, [r3, #32]
 8006e64:	f003 0302 	and.w	r3, r3, #2
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d0ee      	beq.n	8006e4a <HAL_RCC_OscConfig+0x37e>
 8006e6c:	e014      	b.n	8006e98 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e6e:	f7fe fd41 	bl	80058f4 <HAL_GetTick>
 8006e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e74:	e00a      	b.n	8006e8c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e76:	f7fe fd3d 	bl	80058f4 <HAL_GetTick>
 8006e7a:	4602      	mov	r2, r0
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	1ad3      	subs	r3, r2, r3
 8006e80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d901      	bls.n	8006e8c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006e88:	2303      	movs	r3, #3
 8006e8a:	e09b      	b.n	8006fc4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e8c:	4b40      	ldr	r3, [pc, #256]	@ (8006f90 <HAL_RCC_OscConfig+0x4c4>)
 8006e8e:	6a1b      	ldr	r3, [r3, #32]
 8006e90:	f003 0302 	and.w	r3, r3, #2
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d1ee      	bne.n	8006e76 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006e98:	7dfb      	ldrb	r3, [r7, #23]
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d105      	bne.n	8006eaa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e9e:	4b3c      	ldr	r3, [pc, #240]	@ (8006f90 <HAL_RCC_OscConfig+0x4c4>)
 8006ea0:	69db      	ldr	r3, [r3, #28]
 8006ea2:	4a3b      	ldr	r2, [pc, #236]	@ (8006f90 <HAL_RCC_OscConfig+0x4c4>)
 8006ea4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ea8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	69db      	ldr	r3, [r3, #28]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	f000 8087 	beq.w	8006fc2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006eb4:	4b36      	ldr	r3, [pc, #216]	@ (8006f90 <HAL_RCC_OscConfig+0x4c4>)
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	f003 030c 	and.w	r3, r3, #12
 8006ebc:	2b08      	cmp	r3, #8
 8006ebe:	d061      	beq.n	8006f84 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	69db      	ldr	r3, [r3, #28]
 8006ec4:	2b02      	cmp	r3, #2
 8006ec6:	d146      	bne.n	8006f56 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ec8:	4b33      	ldr	r3, [pc, #204]	@ (8006f98 <HAL_RCC_OscConfig+0x4cc>)
 8006eca:	2200      	movs	r2, #0
 8006ecc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ece:	f7fe fd11 	bl	80058f4 <HAL_GetTick>
 8006ed2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006ed4:	e008      	b.n	8006ee8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ed6:	f7fe fd0d 	bl	80058f4 <HAL_GetTick>
 8006eda:	4602      	mov	r2, r0
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	1ad3      	subs	r3, r2, r3
 8006ee0:	2b02      	cmp	r3, #2
 8006ee2:	d901      	bls.n	8006ee8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006ee4:	2303      	movs	r3, #3
 8006ee6:	e06d      	b.n	8006fc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006ee8:	4b29      	ldr	r3, [pc, #164]	@ (8006f90 <HAL_RCC_OscConfig+0x4c4>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d1f0      	bne.n	8006ed6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6a1b      	ldr	r3, [r3, #32]
 8006ef8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006efc:	d108      	bne.n	8006f10 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006efe:	4b24      	ldr	r3, [pc, #144]	@ (8006f90 <HAL_RCC_OscConfig+0x4c4>)
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	4921      	ldr	r1, [pc, #132]	@ (8006f90 <HAL_RCC_OscConfig+0x4c4>)
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006f10:	4b1f      	ldr	r3, [pc, #124]	@ (8006f90 <HAL_RCC_OscConfig+0x4c4>)
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6a19      	ldr	r1, [r3, #32]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f20:	430b      	orrs	r3, r1
 8006f22:	491b      	ldr	r1, [pc, #108]	@ (8006f90 <HAL_RCC_OscConfig+0x4c4>)
 8006f24:	4313      	orrs	r3, r2
 8006f26:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f28:	4b1b      	ldr	r3, [pc, #108]	@ (8006f98 <HAL_RCC_OscConfig+0x4cc>)
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f2e:	f7fe fce1 	bl	80058f4 <HAL_GetTick>
 8006f32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006f34:	e008      	b.n	8006f48 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f36:	f7fe fcdd 	bl	80058f4 <HAL_GetTick>
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	1ad3      	subs	r3, r2, r3
 8006f40:	2b02      	cmp	r3, #2
 8006f42:	d901      	bls.n	8006f48 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006f44:	2303      	movs	r3, #3
 8006f46:	e03d      	b.n	8006fc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006f48:	4b11      	ldr	r3, [pc, #68]	@ (8006f90 <HAL_RCC_OscConfig+0x4c4>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d0f0      	beq.n	8006f36 <HAL_RCC_OscConfig+0x46a>
 8006f54:	e035      	b.n	8006fc2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f56:	4b10      	ldr	r3, [pc, #64]	@ (8006f98 <HAL_RCC_OscConfig+0x4cc>)
 8006f58:	2200      	movs	r2, #0
 8006f5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f5c:	f7fe fcca 	bl	80058f4 <HAL_GetTick>
 8006f60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006f62:	e008      	b.n	8006f76 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f64:	f7fe fcc6 	bl	80058f4 <HAL_GetTick>
 8006f68:	4602      	mov	r2, r0
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	1ad3      	subs	r3, r2, r3
 8006f6e:	2b02      	cmp	r3, #2
 8006f70:	d901      	bls.n	8006f76 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006f72:	2303      	movs	r3, #3
 8006f74:	e026      	b.n	8006fc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006f76:	4b06      	ldr	r3, [pc, #24]	@ (8006f90 <HAL_RCC_OscConfig+0x4c4>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d1f0      	bne.n	8006f64 <HAL_RCC_OscConfig+0x498>
 8006f82:	e01e      	b.n	8006fc2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	69db      	ldr	r3, [r3, #28]
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d107      	bne.n	8006f9c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	e019      	b.n	8006fc4 <HAL_RCC_OscConfig+0x4f8>
 8006f90:	40021000 	.word	0x40021000
 8006f94:	40007000 	.word	0x40007000
 8006f98:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006f9c:	4b0b      	ldr	r3, [pc, #44]	@ (8006fcc <HAL_RCC_OscConfig+0x500>)
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6a1b      	ldr	r3, [r3, #32]
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d106      	bne.n	8006fbe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	d001      	beq.n	8006fc2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	e000      	b.n	8006fc4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006fc2:	2300      	movs	r3, #0
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3718      	adds	r7, #24
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}
 8006fcc:	40021000 	.word	0x40021000

08006fd0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b084      	sub	sp, #16
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d101      	bne.n	8006fe4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	e0d0      	b.n	8007186 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006fe4:	4b6a      	ldr	r3, [pc, #424]	@ (8007190 <HAL_RCC_ClockConfig+0x1c0>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f003 0307 	and.w	r3, r3, #7
 8006fec:	683a      	ldr	r2, [r7, #0]
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d910      	bls.n	8007014 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ff2:	4b67      	ldr	r3, [pc, #412]	@ (8007190 <HAL_RCC_ClockConfig+0x1c0>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f023 0207 	bic.w	r2, r3, #7
 8006ffa:	4965      	ldr	r1, [pc, #404]	@ (8007190 <HAL_RCC_ClockConfig+0x1c0>)
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	4313      	orrs	r3, r2
 8007000:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007002:	4b63      	ldr	r3, [pc, #396]	@ (8007190 <HAL_RCC_ClockConfig+0x1c0>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f003 0307 	and.w	r3, r3, #7
 800700a:	683a      	ldr	r2, [r7, #0]
 800700c:	429a      	cmp	r2, r3
 800700e:	d001      	beq.n	8007014 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007010:	2301      	movs	r3, #1
 8007012:	e0b8      	b.n	8007186 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f003 0302 	and.w	r3, r3, #2
 800701c:	2b00      	cmp	r3, #0
 800701e:	d020      	beq.n	8007062 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f003 0304 	and.w	r3, r3, #4
 8007028:	2b00      	cmp	r3, #0
 800702a:	d005      	beq.n	8007038 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800702c:	4b59      	ldr	r3, [pc, #356]	@ (8007194 <HAL_RCC_ClockConfig+0x1c4>)
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	4a58      	ldr	r2, [pc, #352]	@ (8007194 <HAL_RCC_ClockConfig+0x1c4>)
 8007032:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007036:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f003 0308 	and.w	r3, r3, #8
 8007040:	2b00      	cmp	r3, #0
 8007042:	d005      	beq.n	8007050 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007044:	4b53      	ldr	r3, [pc, #332]	@ (8007194 <HAL_RCC_ClockConfig+0x1c4>)
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	4a52      	ldr	r2, [pc, #328]	@ (8007194 <HAL_RCC_ClockConfig+0x1c4>)
 800704a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800704e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007050:	4b50      	ldr	r3, [pc, #320]	@ (8007194 <HAL_RCC_ClockConfig+0x1c4>)
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	494d      	ldr	r1, [pc, #308]	@ (8007194 <HAL_RCC_ClockConfig+0x1c4>)
 800705e:	4313      	orrs	r3, r2
 8007060:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f003 0301 	and.w	r3, r3, #1
 800706a:	2b00      	cmp	r3, #0
 800706c:	d040      	beq.n	80070f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	2b01      	cmp	r3, #1
 8007074:	d107      	bne.n	8007086 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007076:	4b47      	ldr	r3, [pc, #284]	@ (8007194 <HAL_RCC_ClockConfig+0x1c4>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800707e:	2b00      	cmp	r3, #0
 8007080:	d115      	bne.n	80070ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007082:	2301      	movs	r3, #1
 8007084:	e07f      	b.n	8007186 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	2b02      	cmp	r3, #2
 800708c:	d107      	bne.n	800709e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800708e:	4b41      	ldr	r3, [pc, #260]	@ (8007194 <HAL_RCC_ClockConfig+0x1c4>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007096:	2b00      	cmp	r3, #0
 8007098:	d109      	bne.n	80070ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	e073      	b.n	8007186 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800709e:	4b3d      	ldr	r3, [pc, #244]	@ (8007194 <HAL_RCC_ClockConfig+0x1c4>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f003 0302 	and.w	r3, r3, #2
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d101      	bne.n	80070ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	e06b      	b.n	8007186 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80070ae:	4b39      	ldr	r3, [pc, #228]	@ (8007194 <HAL_RCC_ClockConfig+0x1c4>)
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	f023 0203 	bic.w	r2, r3, #3
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	4936      	ldr	r1, [pc, #216]	@ (8007194 <HAL_RCC_ClockConfig+0x1c4>)
 80070bc:	4313      	orrs	r3, r2
 80070be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80070c0:	f7fe fc18 	bl	80058f4 <HAL_GetTick>
 80070c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070c6:	e00a      	b.n	80070de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070c8:	f7fe fc14 	bl	80058f4 <HAL_GetTick>
 80070cc:	4602      	mov	r2, r0
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	1ad3      	subs	r3, r2, r3
 80070d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d901      	bls.n	80070de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80070da:	2303      	movs	r3, #3
 80070dc:	e053      	b.n	8007186 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070de:	4b2d      	ldr	r3, [pc, #180]	@ (8007194 <HAL_RCC_ClockConfig+0x1c4>)
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	f003 020c 	and.w	r2, r3, #12
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	009b      	lsls	r3, r3, #2
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d1eb      	bne.n	80070c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80070f0:	4b27      	ldr	r3, [pc, #156]	@ (8007190 <HAL_RCC_ClockConfig+0x1c0>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f003 0307 	and.w	r3, r3, #7
 80070f8:	683a      	ldr	r2, [r7, #0]
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d210      	bcs.n	8007120 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070fe:	4b24      	ldr	r3, [pc, #144]	@ (8007190 <HAL_RCC_ClockConfig+0x1c0>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f023 0207 	bic.w	r2, r3, #7
 8007106:	4922      	ldr	r1, [pc, #136]	@ (8007190 <HAL_RCC_ClockConfig+0x1c0>)
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	4313      	orrs	r3, r2
 800710c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800710e:	4b20      	ldr	r3, [pc, #128]	@ (8007190 <HAL_RCC_ClockConfig+0x1c0>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f003 0307 	and.w	r3, r3, #7
 8007116:	683a      	ldr	r2, [r7, #0]
 8007118:	429a      	cmp	r2, r3
 800711a:	d001      	beq.n	8007120 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800711c:	2301      	movs	r3, #1
 800711e:	e032      	b.n	8007186 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f003 0304 	and.w	r3, r3, #4
 8007128:	2b00      	cmp	r3, #0
 800712a:	d008      	beq.n	800713e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800712c:	4b19      	ldr	r3, [pc, #100]	@ (8007194 <HAL_RCC_ClockConfig+0x1c4>)
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	68db      	ldr	r3, [r3, #12]
 8007138:	4916      	ldr	r1, [pc, #88]	@ (8007194 <HAL_RCC_ClockConfig+0x1c4>)
 800713a:	4313      	orrs	r3, r2
 800713c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f003 0308 	and.w	r3, r3, #8
 8007146:	2b00      	cmp	r3, #0
 8007148:	d009      	beq.n	800715e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800714a:	4b12      	ldr	r3, [pc, #72]	@ (8007194 <HAL_RCC_ClockConfig+0x1c4>)
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	691b      	ldr	r3, [r3, #16]
 8007156:	00db      	lsls	r3, r3, #3
 8007158:	490e      	ldr	r1, [pc, #56]	@ (8007194 <HAL_RCC_ClockConfig+0x1c4>)
 800715a:	4313      	orrs	r3, r2
 800715c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800715e:	f000 f821 	bl	80071a4 <HAL_RCC_GetSysClockFreq>
 8007162:	4602      	mov	r2, r0
 8007164:	4b0b      	ldr	r3, [pc, #44]	@ (8007194 <HAL_RCC_ClockConfig+0x1c4>)
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	091b      	lsrs	r3, r3, #4
 800716a:	f003 030f 	and.w	r3, r3, #15
 800716e:	490a      	ldr	r1, [pc, #40]	@ (8007198 <HAL_RCC_ClockConfig+0x1c8>)
 8007170:	5ccb      	ldrb	r3, [r1, r3]
 8007172:	fa22 f303 	lsr.w	r3, r2, r3
 8007176:	4a09      	ldr	r2, [pc, #36]	@ (800719c <HAL_RCC_ClockConfig+0x1cc>)
 8007178:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800717a:	4b09      	ldr	r3, [pc, #36]	@ (80071a0 <HAL_RCC_ClockConfig+0x1d0>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4618      	mov	r0, r3
 8007180:	f7fe fb76 	bl	8005870 <HAL_InitTick>

  return HAL_OK;
 8007184:	2300      	movs	r3, #0
}
 8007186:	4618      	mov	r0, r3
 8007188:	3710      	adds	r7, #16
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
 800718e:	bf00      	nop
 8007190:	40022000 	.word	0x40022000
 8007194:	40021000 	.word	0x40021000
 8007198:	0800ae28 	.word	0x0800ae28
 800719c:	20000018 	.word	0x20000018
 80071a0:	2000001c 	.word	0x2000001c

080071a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b087      	sub	sp, #28
 80071a8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80071aa:	2300      	movs	r3, #0
 80071ac:	60fb      	str	r3, [r7, #12]
 80071ae:	2300      	movs	r3, #0
 80071b0:	60bb      	str	r3, [r7, #8]
 80071b2:	2300      	movs	r3, #0
 80071b4:	617b      	str	r3, [r7, #20]
 80071b6:	2300      	movs	r3, #0
 80071b8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80071ba:	2300      	movs	r3, #0
 80071bc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80071be:	4b1e      	ldr	r3, [pc, #120]	@ (8007238 <HAL_RCC_GetSysClockFreq+0x94>)
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f003 030c 	and.w	r3, r3, #12
 80071ca:	2b04      	cmp	r3, #4
 80071cc:	d002      	beq.n	80071d4 <HAL_RCC_GetSysClockFreq+0x30>
 80071ce:	2b08      	cmp	r3, #8
 80071d0:	d003      	beq.n	80071da <HAL_RCC_GetSysClockFreq+0x36>
 80071d2:	e027      	b.n	8007224 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80071d4:	4b19      	ldr	r3, [pc, #100]	@ (800723c <HAL_RCC_GetSysClockFreq+0x98>)
 80071d6:	613b      	str	r3, [r7, #16]
      break;
 80071d8:	e027      	b.n	800722a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	0c9b      	lsrs	r3, r3, #18
 80071de:	f003 030f 	and.w	r3, r3, #15
 80071e2:	4a17      	ldr	r2, [pc, #92]	@ (8007240 <HAL_RCC_GetSysClockFreq+0x9c>)
 80071e4:	5cd3      	ldrb	r3, [r2, r3]
 80071e6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d010      	beq.n	8007214 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80071f2:	4b11      	ldr	r3, [pc, #68]	@ (8007238 <HAL_RCC_GetSysClockFreq+0x94>)
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	0c5b      	lsrs	r3, r3, #17
 80071f8:	f003 0301 	and.w	r3, r3, #1
 80071fc:	4a11      	ldr	r2, [pc, #68]	@ (8007244 <HAL_RCC_GetSysClockFreq+0xa0>)
 80071fe:	5cd3      	ldrb	r3, [r2, r3]
 8007200:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	4a0d      	ldr	r2, [pc, #52]	@ (800723c <HAL_RCC_GetSysClockFreq+0x98>)
 8007206:	fb03 f202 	mul.w	r2, r3, r2
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007210:	617b      	str	r3, [r7, #20]
 8007212:	e004      	b.n	800721e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	4a0c      	ldr	r2, [pc, #48]	@ (8007248 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007218:	fb02 f303 	mul.w	r3, r2, r3
 800721c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	613b      	str	r3, [r7, #16]
      break;
 8007222:	e002      	b.n	800722a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007224:	4b05      	ldr	r3, [pc, #20]	@ (800723c <HAL_RCC_GetSysClockFreq+0x98>)
 8007226:	613b      	str	r3, [r7, #16]
      break;
 8007228:	bf00      	nop
    }
  }
  return sysclockfreq;
 800722a:	693b      	ldr	r3, [r7, #16]
}
 800722c:	4618      	mov	r0, r3
 800722e:	371c      	adds	r7, #28
 8007230:	46bd      	mov	sp, r7
 8007232:	bc80      	pop	{r7}
 8007234:	4770      	bx	lr
 8007236:	bf00      	nop
 8007238:	40021000 	.word	0x40021000
 800723c:	007a1200 	.word	0x007a1200
 8007240:	0800ae40 	.word	0x0800ae40
 8007244:	0800ae50 	.word	0x0800ae50
 8007248:	003d0900 	.word	0x003d0900

0800724c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800724c:	b480      	push	{r7}
 800724e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007250:	4b02      	ldr	r3, [pc, #8]	@ (800725c <HAL_RCC_GetHCLKFreq+0x10>)
 8007252:	681b      	ldr	r3, [r3, #0]
}
 8007254:	4618      	mov	r0, r3
 8007256:	46bd      	mov	sp, r7
 8007258:	bc80      	pop	{r7}
 800725a:	4770      	bx	lr
 800725c:	20000018 	.word	0x20000018

08007260 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007264:	f7ff fff2 	bl	800724c <HAL_RCC_GetHCLKFreq>
 8007268:	4602      	mov	r2, r0
 800726a:	4b05      	ldr	r3, [pc, #20]	@ (8007280 <HAL_RCC_GetPCLK1Freq+0x20>)
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	0a1b      	lsrs	r3, r3, #8
 8007270:	f003 0307 	and.w	r3, r3, #7
 8007274:	4903      	ldr	r1, [pc, #12]	@ (8007284 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007276:	5ccb      	ldrb	r3, [r1, r3]
 8007278:	fa22 f303 	lsr.w	r3, r2, r3
}
 800727c:	4618      	mov	r0, r3
 800727e:	bd80      	pop	{r7, pc}
 8007280:	40021000 	.word	0x40021000
 8007284:	0800ae38 	.word	0x0800ae38

08007288 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007288:	b480      	push	{r7}
 800728a:	b085      	sub	sp, #20
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007290:	4b0a      	ldr	r3, [pc, #40]	@ (80072bc <RCC_Delay+0x34>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a0a      	ldr	r2, [pc, #40]	@ (80072c0 <RCC_Delay+0x38>)
 8007296:	fba2 2303 	umull	r2, r3, r2, r3
 800729a:	0a5b      	lsrs	r3, r3, #9
 800729c:	687a      	ldr	r2, [r7, #4]
 800729e:	fb02 f303 	mul.w	r3, r2, r3
 80072a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80072a4:	bf00      	nop
  }
  while (Delay --);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	1e5a      	subs	r2, r3, #1
 80072aa:	60fa      	str	r2, [r7, #12]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d1f9      	bne.n	80072a4 <RCC_Delay+0x1c>
}
 80072b0:	bf00      	nop
 80072b2:	bf00      	nop
 80072b4:	3714      	adds	r7, #20
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bc80      	pop	{r7}
 80072ba:	4770      	bx	lr
 80072bc:	20000018 	.word	0x20000018
 80072c0:	10624dd3 	.word	0x10624dd3

080072c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b082      	sub	sp, #8
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d101      	bne.n	80072d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	e041      	b.n	800735a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d106      	bne.n	80072f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2200      	movs	r2, #0
 80072e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f7fe f9e0 	bl	80056b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2202      	movs	r2, #2
 80072f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	3304      	adds	r3, #4
 8007300:	4619      	mov	r1, r3
 8007302:	4610      	mov	r0, r2
 8007304:	f000 fbe2 	bl	8007acc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2201      	movs	r2, #1
 800730c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2201      	movs	r2, #1
 8007314:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2201      	movs	r2, #1
 800731c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2201      	movs	r2, #1
 8007324:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2201      	movs	r2, #1
 800732c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2201      	movs	r2, #1
 8007334:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2201      	movs	r2, #1
 800733c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2201      	movs	r2, #1
 8007344:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2201      	movs	r2, #1
 800734c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2201      	movs	r2, #1
 8007354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007358:	2300      	movs	r3, #0
}
 800735a:	4618      	mov	r0, r3
 800735c:	3708      	adds	r7, #8
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}

08007362 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007362:	b580      	push	{r7, lr}
 8007364:	b082      	sub	sp, #8
 8007366:	af00      	add	r7, sp, #0
 8007368:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d101      	bne.n	8007374 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007370:	2301      	movs	r3, #1
 8007372:	e041      	b.n	80073f8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800737a:	b2db      	uxtb	r3, r3
 800737c:	2b00      	cmp	r3, #0
 800737e:	d106      	bne.n	800738e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2200      	movs	r2, #0
 8007384:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f000 f839 	bl	8007400 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2202      	movs	r2, #2
 8007392:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681a      	ldr	r2, [r3, #0]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	3304      	adds	r3, #4
 800739e:	4619      	mov	r1, r3
 80073a0:	4610      	mov	r0, r2
 80073a2:	f000 fb93 	bl	8007acc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2201      	movs	r2, #1
 80073aa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2201      	movs	r2, #1
 80073b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2201      	movs	r2, #1
 80073ba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2201      	movs	r2, #1
 80073c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2201      	movs	r2, #1
 80073ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2201      	movs	r2, #1
 80073d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2201      	movs	r2, #1
 80073da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2201      	movs	r2, #1
 80073e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2201      	movs	r2, #1
 80073ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2201      	movs	r2, #1
 80073f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80073f6:	2300      	movs	r3, #0
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3708      	adds	r7, #8
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}

08007400 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007400:	b480      	push	{r7}
 8007402:	b083      	sub	sp, #12
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007408:	bf00      	nop
 800740a:	370c      	adds	r7, #12
 800740c:	46bd      	mov	sp, r7
 800740e:	bc80      	pop	{r7}
 8007410:	4770      	bx	lr
	...

08007414 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b084      	sub	sp, #16
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d109      	bne.n	8007438 <HAL_TIM_PWM_Start+0x24>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800742a:	b2db      	uxtb	r3, r3
 800742c:	2b01      	cmp	r3, #1
 800742e:	bf14      	ite	ne
 8007430:	2301      	movne	r3, #1
 8007432:	2300      	moveq	r3, #0
 8007434:	b2db      	uxtb	r3, r3
 8007436:	e022      	b.n	800747e <HAL_TIM_PWM_Start+0x6a>
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	2b04      	cmp	r3, #4
 800743c:	d109      	bne.n	8007452 <HAL_TIM_PWM_Start+0x3e>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007444:	b2db      	uxtb	r3, r3
 8007446:	2b01      	cmp	r3, #1
 8007448:	bf14      	ite	ne
 800744a:	2301      	movne	r3, #1
 800744c:	2300      	moveq	r3, #0
 800744e:	b2db      	uxtb	r3, r3
 8007450:	e015      	b.n	800747e <HAL_TIM_PWM_Start+0x6a>
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	2b08      	cmp	r3, #8
 8007456:	d109      	bne.n	800746c <HAL_TIM_PWM_Start+0x58>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800745e:	b2db      	uxtb	r3, r3
 8007460:	2b01      	cmp	r3, #1
 8007462:	bf14      	ite	ne
 8007464:	2301      	movne	r3, #1
 8007466:	2300      	moveq	r3, #0
 8007468:	b2db      	uxtb	r3, r3
 800746a:	e008      	b.n	800747e <HAL_TIM_PWM_Start+0x6a>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007472:	b2db      	uxtb	r3, r3
 8007474:	2b01      	cmp	r3, #1
 8007476:	bf14      	ite	ne
 8007478:	2301      	movne	r3, #1
 800747a:	2300      	moveq	r3, #0
 800747c:	b2db      	uxtb	r3, r3
 800747e:	2b00      	cmp	r3, #0
 8007480:	d001      	beq.n	8007486 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007482:	2301      	movs	r3, #1
 8007484:	e05e      	b.n	8007544 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d104      	bne.n	8007496 <HAL_TIM_PWM_Start+0x82>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2202      	movs	r2, #2
 8007490:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007494:	e013      	b.n	80074be <HAL_TIM_PWM_Start+0xaa>
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	2b04      	cmp	r3, #4
 800749a:	d104      	bne.n	80074a6 <HAL_TIM_PWM_Start+0x92>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2202      	movs	r2, #2
 80074a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80074a4:	e00b      	b.n	80074be <HAL_TIM_PWM_Start+0xaa>
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	2b08      	cmp	r3, #8
 80074aa:	d104      	bne.n	80074b6 <HAL_TIM_PWM_Start+0xa2>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2202      	movs	r2, #2
 80074b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80074b4:	e003      	b.n	80074be <HAL_TIM_PWM_Start+0xaa>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2202      	movs	r2, #2
 80074ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	2201      	movs	r2, #1
 80074c4:	6839      	ldr	r1, [r7, #0]
 80074c6:	4618      	mov	r0, r3
 80074c8:	f000 fd8c 	bl	8007fe4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a1e      	ldr	r2, [pc, #120]	@ (800754c <HAL_TIM_PWM_Start+0x138>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d107      	bne.n	80074e6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80074e4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a18      	ldr	r2, [pc, #96]	@ (800754c <HAL_TIM_PWM_Start+0x138>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d00e      	beq.n	800750e <HAL_TIM_PWM_Start+0xfa>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074f8:	d009      	beq.n	800750e <HAL_TIM_PWM_Start+0xfa>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a14      	ldr	r2, [pc, #80]	@ (8007550 <HAL_TIM_PWM_Start+0x13c>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d004      	beq.n	800750e <HAL_TIM_PWM_Start+0xfa>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a12      	ldr	r2, [pc, #72]	@ (8007554 <HAL_TIM_PWM_Start+0x140>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d111      	bne.n	8007532 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	f003 0307 	and.w	r3, r3, #7
 8007518:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2b06      	cmp	r3, #6
 800751e:	d010      	beq.n	8007542 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	681a      	ldr	r2, [r3, #0]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f042 0201 	orr.w	r2, r2, #1
 800752e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007530:	e007      	b.n	8007542 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	681a      	ldr	r2, [r3, #0]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f042 0201 	orr.w	r2, r2, #1
 8007540:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007542:	2300      	movs	r3, #0
}
 8007544:	4618      	mov	r0, r3
 8007546:	3710      	adds	r7, #16
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}
 800754c:	40012c00 	.word	0x40012c00
 8007550:	40000400 	.word	0x40000400
 8007554:	40000800 	.word	0x40000800

08007558 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b086      	sub	sp, #24
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d101      	bne.n	800756c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007568:	2301      	movs	r3, #1
 800756a:	e093      	b.n	8007694 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007572:	b2db      	uxtb	r3, r3
 8007574:	2b00      	cmp	r3, #0
 8007576:	d106      	bne.n	8007586 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2200      	movs	r2, #0
 800757c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f7fe f8b3 	bl	80056ec <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2202      	movs	r2, #2
 800758a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	689b      	ldr	r3, [r3, #8]
 8007594:	687a      	ldr	r2, [r7, #4]
 8007596:	6812      	ldr	r2, [r2, #0]
 8007598:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800759c:	f023 0307 	bic.w	r3, r3, #7
 80075a0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	3304      	adds	r3, #4
 80075aa:	4619      	mov	r1, r3
 80075ac:	4610      	mov	r0, r2
 80075ae:	f000 fa8d 	bl	8007acc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	689b      	ldr	r3, [r3, #8]
 80075b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	699b      	ldr	r3, [r3, #24]
 80075c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	6a1b      	ldr	r3, [r3, #32]
 80075c8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	697a      	ldr	r2, [r7, #20]
 80075d0:	4313      	orrs	r3, r2
 80075d2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80075da:	f023 0303 	bic.w	r3, r3, #3
 80075de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	689a      	ldr	r2, [r3, #8]
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	699b      	ldr	r3, [r3, #24]
 80075e8:	021b      	lsls	r3, r3, #8
 80075ea:	4313      	orrs	r3, r2
 80075ec:	693a      	ldr	r2, [r7, #16]
 80075ee:	4313      	orrs	r3, r2
 80075f0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80075f8:	f023 030c 	bic.w	r3, r3, #12
 80075fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007604:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007608:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	68da      	ldr	r2, [r3, #12]
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	69db      	ldr	r3, [r3, #28]
 8007612:	021b      	lsls	r3, r3, #8
 8007614:	4313      	orrs	r3, r2
 8007616:	693a      	ldr	r2, [r7, #16]
 8007618:	4313      	orrs	r3, r2
 800761a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	691b      	ldr	r3, [r3, #16]
 8007620:	011a      	lsls	r2, r3, #4
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	6a1b      	ldr	r3, [r3, #32]
 8007626:	031b      	lsls	r3, r3, #12
 8007628:	4313      	orrs	r3, r2
 800762a:	693a      	ldr	r2, [r7, #16]
 800762c:	4313      	orrs	r3, r2
 800762e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007636:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	685a      	ldr	r2, [r3, #4]
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	695b      	ldr	r3, [r3, #20]
 8007640:	011b      	lsls	r3, r3, #4
 8007642:	4313      	orrs	r3, r2
 8007644:	68fa      	ldr	r2, [r7, #12]
 8007646:	4313      	orrs	r3, r2
 8007648:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	697a      	ldr	r2, [r7, #20]
 8007650:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	693a      	ldr	r2, [r7, #16]
 8007658:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	68fa      	ldr	r2, [r7, #12]
 8007660:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2201      	movs	r2, #1
 8007666:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2201      	movs	r2, #1
 800766e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2201      	movs	r2, #1
 8007676:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2201      	movs	r2, #1
 800767e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2201      	movs	r2, #1
 8007686:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2201      	movs	r2, #1
 800768e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007692:	2300      	movs	r3, #0
}
 8007694:	4618      	mov	r0, r3
 8007696:	3718      	adds	r7, #24
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}

0800769c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b084      	sub	sp, #16
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80076ac:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80076b4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80076bc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80076c4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d110      	bne.n	80076ee <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80076cc:	7bfb      	ldrb	r3, [r7, #15]
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	d102      	bne.n	80076d8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80076d2:	7b7b      	ldrb	r3, [r7, #13]
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d001      	beq.n	80076dc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	e069      	b.n	80077b0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2202      	movs	r2, #2
 80076e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2202      	movs	r2, #2
 80076e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80076ec:	e031      	b.n	8007752 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	2b04      	cmp	r3, #4
 80076f2:	d110      	bne.n	8007716 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80076f4:	7bbb      	ldrb	r3, [r7, #14]
 80076f6:	2b01      	cmp	r3, #1
 80076f8:	d102      	bne.n	8007700 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80076fa:	7b3b      	ldrb	r3, [r7, #12]
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	d001      	beq.n	8007704 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007700:	2301      	movs	r3, #1
 8007702:	e055      	b.n	80077b0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2202      	movs	r2, #2
 8007708:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2202      	movs	r2, #2
 8007710:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007714:	e01d      	b.n	8007752 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007716:	7bfb      	ldrb	r3, [r7, #15]
 8007718:	2b01      	cmp	r3, #1
 800771a:	d108      	bne.n	800772e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800771c:	7bbb      	ldrb	r3, [r7, #14]
 800771e:	2b01      	cmp	r3, #1
 8007720:	d105      	bne.n	800772e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007722:	7b7b      	ldrb	r3, [r7, #13]
 8007724:	2b01      	cmp	r3, #1
 8007726:	d102      	bne.n	800772e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007728:	7b3b      	ldrb	r3, [r7, #12]
 800772a:	2b01      	cmp	r3, #1
 800772c:	d001      	beq.n	8007732 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800772e:	2301      	movs	r3, #1
 8007730:	e03e      	b.n	80077b0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2202      	movs	r2, #2
 8007736:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2202      	movs	r2, #2
 800773e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2202      	movs	r2, #2
 8007746:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2202      	movs	r2, #2
 800774e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d003      	beq.n	8007760 <HAL_TIM_Encoder_Start+0xc4>
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	2b04      	cmp	r3, #4
 800775c:	d008      	beq.n	8007770 <HAL_TIM_Encoder_Start+0xd4>
 800775e:	e00f      	b.n	8007780 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	2201      	movs	r2, #1
 8007766:	2100      	movs	r1, #0
 8007768:	4618      	mov	r0, r3
 800776a:	f000 fc3b 	bl	8007fe4 <TIM_CCxChannelCmd>
      break;
 800776e:	e016      	b.n	800779e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	2201      	movs	r2, #1
 8007776:	2104      	movs	r1, #4
 8007778:	4618      	mov	r0, r3
 800777a:	f000 fc33 	bl	8007fe4 <TIM_CCxChannelCmd>
      break;
 800777e:	e00e      	b.n	800779e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	2201      	movs	r2, #1
 8007786:	2100      	movs	r1, #0
 8007788:	4618      	mov	r0, r3
 800778a:	f000 fc2b 	bl	8007fe4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	2201      	movs	r2, #1
 8007794:	2104      	movs	r1, #4
 8007796:	4618      	mov	r0, r3
 8007798:	f000 fc24 	bl	8007fe4 <TIM_CCxChannelCmd>
      break;
 800779c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	681a      	ldr	r2, [r3, #0]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f042 0201 	orr.w	r2, r2, #1
 80077ac:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80077ae:	2300      	movs	r3, #0
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3710      	adds	r7, #16
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b086      	sub	sp, #24
 80077bc:	af00      	add	r7, sp, #0
 80077be:	60f8      	str	r0, [r7, #12]
 80077c0:	60b9      	str	r1, [r7, #8]
 80077c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80077c4:	2300      	movs	r3, #0
 80077c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d101      	bne.n	80077d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80077d2:	2302      	movs	r3, #2
 80077d4:	e0ae      	b.n	8007934 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2201      	movs	r2, #1
 80077da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2b0c      	cmp	r3, #12
 80077e2:	f200 809f 	bhi.w	8007924 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80077e6:	a201      	add	r2, pc, #4	@ (adr r2, 80077ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80077e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ec:	08007821 	.word	0x08007821
 80077f0:	08007925 	.word	0x08007925
 80077f4:	08007925 	.word	0x08007925
 80077f8:	08007925 	.word	0x08007925
 80077fc:	08007861 	.word	0x08007861
 8007800:	08007925 	.word	0x08007925
 8007804:	08007925 	.word	0x08007925
 8007808:	08007925 	.word	0x08007925
 800780c:	080078a3 	.word	0x080078a3
 8007810:	08007925 	.word	0x08007925
 8007814:	08007925 	.word	0x08007925
 8007818:	08007925 	.word	0x08007925
 800781c:	080078e3 	.word	0x080078e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	68b9      	ldr	r1, [r7, #8]
 8007826:	4618      	mov	r0, r3
 8007828:	f000 f9be 	bl	8007ba8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	699a      	ldr	r2, [r3, #24]
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f042 0208 	orr.w	r2, r2, #8
 800783a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	699a      	ldr	r2, [r3, #24]
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f022 0204 	bic.w	r2, r2, #4
 800784a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	6999      	ldr	r1, [r3, #24]
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	691a      	ldr	r2, [r3, #16]
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	430a      	orrs	r2, r1
 800785c:	619a      	str	r2, [r3, #24]
      break;
 800785e:	e064      	b.n	800792a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	68b9      	ldr	r1, [r7, #8]
 8007866:	4618      	mov	r0, r3
 8007868:	f000 fa04 	bl	8007c74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	699a      	ldr	r2, [r3, #24]
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800787a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	699a      	ldr	r2, [r3, #24]
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800788a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	6999      	ldr	r1, [r3, #24]
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	691b      	ldr	r3, [r3, #16]
 8007896:	021a      	lsls	r2, r3, #8
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	430a      	orrs	r2, r1
 800789e:	619a      	str	r2, [r3, #24]
      break;
 80078a0:	e043      	b.n	800792a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	68b9      	ldr	r1, [r7, #8]
 80078a8:	4618      	mov	r0, r3
 80078aa:	f000 fa4d 	bl	8007d48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	69da      	ldr	r2, [r3, #28]
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f042 0208 	orr.w	r2, r2, #8
 80078bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	69da      	ldr	r2, [r3, #28]
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f022 0204 	bic.w	r2, r2, #4
 80078cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	69d9      	ldr	r1, [r3, #28]
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	691a      	ldr	r2, [r3, #16]
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	430a      	orrs	r2, r1
 80078de:	61da      	str	r2, [r3, #28]
      break;
 80078e0:	e023      	b.n	800792a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	68b9      	ldr	r1, [r7, #8]
 80078e8:	4618      	mov	r0, r3
 80078ea:	f000 fa97 	bl	8007e1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	69da      	ldr	r2, [r3, #28]
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80078fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	69da      	ldr	r2, [r3, #28]
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800790c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	69d9      	ldr	r1, [r3, #28]
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	691b      	ldr	r3, [r3, #16]
 8007918:	021a      	lsls	r2, r3, #8
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	430a      	orrs	r2, r1
 8007920:	61da      	str	r2, [r3, #28]
      break;
 8007922:	e002      	b.n	800792a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007924:	2301      	movs	r3, #1
 8007926:	75fb      	strb	r3, [r7, #23]
      break;
 8007928:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2200      	movs	r2, #0
 800792e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007932:	7dfb      	ldrb	r3, [r7, #23]
}
 8007934:	4618      	mov	r0, r3
 8007936:	3718      	adds	r7, #24
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}

0800793c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b084      	sub	sp, #16
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007946:	2300      	movs	r3, #0
 8007948:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007950:	2b01      	cmp	r3, #1
 8007952:	d101      	bne.n	8007958 <HAL_TIM_ConfigClockSource+0x1c>
 8007954:	2302      	movs	r3, #2
 8007956:	e0b4      	b.n	8007ac2 <HAL_TIM_ConfigClockSource+0x186>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2201      	movs	r2, #1
 800795c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2202      	movs	r2, #2
 8007964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007976:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800797e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	68ba      	ldr	r2, [r7, #8]
 8007986:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007990:	d03e      	beq.n	8007a10 <HAL_TIM_ConfigClockSource+0xd4>
 8007992:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007996:	f200 8087 	bhi.w	8007aa8 <HAL_TIM_ConfigClockSource+0x16c>
 800799a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800799e:	f000 8086 	beq.w	8007aae <HAL_TIM_ConfigClockSource+0x172>
 80079a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079a6:	d87f      	bhi.n	8007aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80079a8:	2b70      	cmp	r3, #112	@ 0x70
 80079aa:	d01a      	beq.n	80079e2 <HAL_TIM_ConfigClockSource+0xa6>
 80079ac:	2b70      	cmp	r3, #112	@ 0x70
 80079ae:	d87b      	bhi.n	8007aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80079b0:	2b60      	cmp	r3, #96	@ 0x60
 80079b2:	d050      	beq.n	8007a56 <HAL_TIM_ConfigClockSource+0x11a>
 80079b4:	2b60      	cmp	r3, #96	@ 0x60
 80079b6:	d877      	bhi.n	8007aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80079b8:	2b50      	cmp	r3, #80	@ 0x50
 80079ba:	d03c      	beq.n	8007a36 <HAL_TIM_ConfigClockSource+0xfa>
 80079bc:	2b50      	cmp	r3, #80	@ 0x50
 80079be:	d873      	bhi.n	8007aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80079c0:	2b40      	cmp	r3, #64	@ 0x40
 80079c2:	d058      	beq.n	8007a76 <HAL_TIM_ConfigClockSource+0x13a>
 80079c4:	2b40      	cmp	r3, #64	@ 0x40
 80079c6:	d86f      	bhi.n	8007aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80079c8:	2b30      	cmp	r3, #48	@ 0x30
 80079ca:	d064      	beq.n	8007a96 <HAL_TIM_ConfigClockSource+0x15a>
 80079cc:	2b30      	cmp	r3, #48	@ 0x30
 80079ce:	d86b      	bhi.n	8007aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80079d0:	2b20      	cmp	r3, #32
 80079d2:	d060      	beq.n	8007a96 <HAL_TIM_ConfigClockSource+0x15a>
 80079d4:	2b20      	cmp	r3, #32
 80079d6:	d867      	bhi.n	8007aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d05c      	beq.n	8007a96 <HAL_TIM_ConfigClockSource+0x15a>
 80079dc:	2b10      	cmp	r3, #16
 80079de:	d05a      	beq.n	8007a96 <HAL_TIM_ConfigClockSource+0x15a>
 80079e0:	e062      	b.n	8007aa8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80079f2:	f000 fad8 	bl	8007fa6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007a04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	68ba      	ldr	r2, [r7, #8]
 8007a0c:	609a      	str	r2, [r3, #8]
      break;
 8007a0e:	e04f      	b.n	8007ab0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007a20:	f000 fac1 	bl	8007fa6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	689a      	ldr	r2, [r3, #8]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007a32:	609a      	str	r2, [r3, #8]
      break;
 8007a34:	e03c      	b.n	8007ab0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a42:	461a      	mov	r2, r3
 8007a44:	f000 fa38 	bl	8007eb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	2150      	movs	r1, #80	@ 0x50
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f000 fa8f 	bl	8007f72 <TIM_ITRx_SetConfig>
      break;
 8007a54:	e02c      	b.n	8007ab0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a62:	461a      	mov	r2, r3
 8007a64:	f000 fa56 	bl	8007f14 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	2160      	movs	r1, #96	@ 0x60
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f000 fa7f 	bl	8007f72 <TIM_ITRx_SetConfig>
      break;
 8007a74:	e01c      	b.n	8007ab0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a82:	461a      	mov	r2, r3
 8007a84:	f000 fa18 	bl	8007eb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	2140      	movs	r1, #64	@ 0x40
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f000 fa6f 	bl	8007f72 <TIM_ITRx_SetConfig>
      break;
 8007a94:	e00c      	b.n	8007ab0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681a      	ldr	r2, [r3, #0]
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4619      	mov	r1, r3
 8007aa0:	4610      	mov	r0, r2
 8007aa2:	f000 fa66 	bl	8007f72 <TIM_ITRx_SetConfig>
      break;
 8007aa6:	e003      	b.n	8007ab0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	73fb      	strb	r3, [r7, #15]
      break;
 8007aac:	e000      	b.n	8007ab0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007aae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2200      	movs	r2, #0
 8007abc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3710      	adds	r7, #16
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
	...

08007acc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b085      	sub	sp, #20
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	4a2f      	ldr	r2, [pc, #188]	@ (8007b9c <TIM_Base_SetConfig+0xd0>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d00b      	beq.n	8007afc <TIM_Base_SetConfig+0x30>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007aea:	d007      	beq.n	8007afc <TIM_Base_SetConfig+0x30>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	4a2c      	ldr	r2, [pc, #176]	@ (8007ba0 <TIM_Base_SetConfig+0xd4>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d003      	beq.n	8007afc <TIM_Base_SetConfig+0x30>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	4a2b      	ldr	r2, [pc, #172]	@ (8007ba4 <TIM_Base_SetConfig+0xd8>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d108      	bne.n	8007b0e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	68fa      	ldr	r2, [r7, #12]
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	4a22      	ldr	r2, [pc, #136]	@ (8007b9c <TIM_Base_SetConfig+0xd0>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d00b      	beq.n	8007b2e <TIM_Base_SetConfig+0x62>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b1c:	d007      	beq.n	8007b2e <TIM_Base_SetConfig+0x62>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	4a1f      	ldr	r2, [pc, #124]	@ (8007ba0 <TIM_Base_SetConfig+0xd4>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d003      	beq.n	8007b2e <TIM_Base_SetConfig+0x62>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	4a1e      	ldr	r2, [pc, #120]	@ (8007ba4 <TIM_Base_SetConfig+0xd8>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d108      	bne.n	8007b40 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	68db      	ldr	r3, [r3, #12]
 8007b3a:	68fa      	ldr	r2, [r7, #12]
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	695b      	ldr	r3, [r3, #20]
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	68fa      	ldr	r2, [r7, #12]
 8007b52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	689a      	ldr	r2, [r3, #8]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	681a      	ldr	r2, [r3, #0]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	4a0d      	ldr	r2, [pc, #52]	@ (8007b9c <TIM_Base_SetConfig+0xd0>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d103      	bne.n	8007b74 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	691a      	ldr	r2, [r3, #16]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2201      	movs	r2, #1
 8007b78:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	691b      	ldr	r3, [r3, #16]
 8007b7e:	f003 0301 	and.w	r3, r3, #1
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d005      	beq.n	8007b92 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	691b      	ldr	r3, [r3, #16]
 8007b8a:	f023 0201 	bic.w	r2, r3, #1
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	611a      	str	r2, [r3, #16]
  }
}
 8007b92:	bf00      	nop
 8007b94:	3714      	adds	r7, #20
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bc80      	pop	{r7}
 8007b9a:	4770      	bx	lr
 8007b9c:	40012c00 	.word	0x40012c00
 8007ba0:	40000400 	.word	0x40000400
 8007ba4:	40000800 	.word	0x40000800

08007ba8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b087      	sub	sp, #28
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6a1b      	ldr	r3, [r3, #32]
 8007bb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6a1b      	ldr	r3, [r3, #32]
 8007bbc:	f023 0201 	bic.w	r2, r3, #1
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	699b      	ldr	r3, [r3, #24]
 8007bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f023 0303 	bic.w	r3, r3, #3
 8007bde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	68fa      	ldr	r2, [r7, #12]
 8007be6:	4313      	orrs	r3, r2
 8007be8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	f023 0302 	bic.w	r3, r3, #2
 8007bf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	689b      	ldr	r3, [r3, #8]
 8007bf6:	697a      	ldr	r2, [r7, #20]
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	4a1c      	ldr	r2, [pc, #112]	@ (8007c70 <TIM_OC1_SetConfig+0xc8>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d10c      	bne.n	8007c1e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	f023 0308 	bic.w	r3, r3, #8
 8007c0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	68db      	ldr	r3, [r3, #12]
 8007c10:	697a      	ldr	r2, [r7, #20]
 8007c12:	4313      	orrs	r3, r2
 8007c14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	f023 0304 	bic.w	r3, r3, #4
 8007c1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	4a13      	ldr	r2, [pc, #76]	@ (8007c70 <TIM_OC1_SetConfig+0xc8>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d111      	bne.n	8007c4a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007c34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	695b      	ldr	r3, [r3, #20]
 8007c3a:	693a      	ldr	r2, [r7, #16]
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	699b      	ldr	r3, [r3, #24]
 8007c44:	693a      	ldr	r2, [r7, #16]
 8007c46:	4313      	orrs	r3, r2
 8007c48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	693a      	ldr	r2, [r7, #16]
 8007c4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	68fa      	ldr	r2, [r7, #12]
 8007c54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	685a      	ldr	r2, [r3, #4]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	697a      	ldr	r2, [r7, #20]
 8007c62:	621a      	str	r2, [r3, #32]
}
 8007c64:	bf00      	nop
 8007c66:	371c      	adds	r7, #28
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bc80      	pop	{r7}
 8007c6c:	4770      	bx	lr
 8007c6e:	bf00      	nop
 8007c70:	40012c00 	.word	0x40012c00

08007c74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b087      	sub	sp, #28
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6a1b      	ldr	r3, [r3, #32]
 8007c82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6a1b      	ldr	r3, [r3, #32]
 8007c88:	f023 0210 	bic.w	r2, r3, #16
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	699b      	ldr	r3, [r3, #24]
 8007c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ca2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007caa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	021b      	lsls	r3, r3, #8
 8007cb2:	68fa      	ldr	r2, [r7, #12]
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	f023 0320 	bic.w	r3, r3, #32
 8007cbe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	689b      	ldr	r3, [r3, #8]
 8007cc4:	011b      	lsls	r3, r3, #4
 8007cc6:	697a      	ldr	r2, [r7, #20]
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	4a1d      	ldr	r2, [pc, #116]	@ (8007d44 <TIM_OC2_SetConfig+0xd0>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d10d      	bne.n	8007cf0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007cda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	68db      	ldr	r3, [r3, #12]
 8007ce0:	011b      	lsls	r3, r3, #4
 8007ce2:	697a      	ldr	r2, [r7, #20]
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007cee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	4a14      	ldr	r2, [pc, #80]	@ (8007d44 <TIM_OC2_SetConfig+0xd0>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d113      	bne.n	8007d20 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007cfe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007d06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	695b      	ldr	r3, [r3, #20]
 8007d0c:	009b      	lsls	r3, r3, #2
 8007d0e:	693a      	ldr	r2, [r7, #16]
 8007d10:	4313      	orrs	r3, r2
 8007d12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	699b      	ldr	r3, [r3, #24]
 8007d18:	009b      	lsls	r3, r3, #2
 8007d1a:	693a      	ldr	r2, [r7, #16]
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	693a      	ldr	r2, [r7, #16]
 8007d24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	68fa      	ldr	r2, [r7, #12]
 8007d2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	685a      	ldr	r2, [r3, #4]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	697a      	ldr	r2, [r7, #20]
 8007d38:	621a      	str	r2, [r3, #32]
}
 8007d3a:	bf00      	nop
 8007d3c:	371c      	adds	r7, #28
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bc80      	pop	{r7}
 8007d42:	4770      	bx	lr
 8007d44:	40012c00 	.word	0x40012c00

08007d48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b087      	sub	sp, #28
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6a1b      	ldr	r3, [r3, #32]
 8007d56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6a1b      	ldr	r3, [r3, #32]
 8007d5c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	69db      	ldr	r3, [r3, #28]
 8007d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	f023 0303 	bic.w	r3, r3, #3
 8007d7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	68fa      	ldr	r2, [r7, #12]
 8007d86:	4313      	orrs	r3, r2
 8007d88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007d90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	689b      	ldr	r3, [r3, #8]
 8007d96:	021b      	lsls	r3, r3, #8
 8007d98:	697a      	ldr	r2, [r7, #20]
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	4a1d      	ldr	r2, [pc, #116]	@ (8007e18 <TIM_OC3_SetConfig+0xd0>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d10d      	bne.n	8007dc2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007dac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	68db      	ldr	r3, [r3, #12]
 8007db2:	021b      	lsls	r3, r3, #8
 8007db4:	697a      	ldr	r2, [r7, #20]
 8007db6:	4313      	orrs	r3, r2
 8007db8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007dc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	4a14      	ldr	r2, [pc, #80]	@ (8007e18 <TIM_OC3_SetConfig+0xd0>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d113      	bne.n	8007df2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007dd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007dd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	695b      	ldr	r3, [r3, #20]
 8007dde:	011b      	lsls	r3, r3, #4
 8007de0:	693a      	ldr	r2, [r7, #16]
 8007de2:	4313      	orrs	r3, r2
 8007de4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	699b      	ldr	r3, [r3, #24]
 8007dea:	011b      	lsls	r3, r3, #4
 8007dec:	693a      	ldr	r2, [r7, #16]
 8007dee:	4313      	orrs	r3, r2
 8007df0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	693a      	ldr	r2, [r7, #16]
 8007df6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	68fa      	ldr	r2, [r7, #12]
 8007dfc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	685a      	ldr	r2, [r3, #4]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	697a      	ldr	r2, [r7, #20]
 8007e0a:	621a      	str	r2, [r3, #32]
}
 8007e0c:	bf00      	nop
 8007e0e:	371c      	adds	r7, #28
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bc80      	pop	{r7}
 8007e14:	4770      	bx	lr
 8007e16:	bf00      	nop
 8007e18:	40012c00 	.word	0x40012c00

08007e1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b087      	sub	sp, #28
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6a1b      	ldr	r3, [r3, #32]
 8007e2a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6a1b      	ldr	r3, [r3, #32]
 8007e30:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	69db      	ldr	r3, [r3, #28]
 8007e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	021b      	lsls	r3, r3, #8
 8007e5a:	68fa      	ldr	r2, [r7, #12]
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007e60:	693b      	ldr	r3, [r7, #16]
 8007e62:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007e66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	689b      	ldr	r3, [r3, #8]
 8007e6c:	031b      	lsls	r3, r3, #12
 8007e6e:	693a      	ldr	r2, [r7, #16]
 8007e70:	4313      	orrs	r3, r2
 8007e72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	4a0f      	ldr	r2, [pc, #60]	@ (8007eb4 <TIM_OC4_SetConfig+0x98>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d109      	bne.n	8007e90 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007e82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	695b      	ldr	r3, [r3, #20]
 8007e88:	019b      	lsls	r3, r3, #6
 8007e8a:	697a      	ldr	r2, [r7, #20]
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	697a      	ldr	r2, [r7, #20]
 8007e94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	68fa      	ldr	r2, [r7, #12]
 8007e9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	685a      	ldr	r2, [r3, #4]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	693a      	ldr	r2, [r7, #16]
 8007ea8:	621a      	str	r2, [r3, #32]
}
 8007eaa:	bf00      	nop
 8007eac:	371c      	adds	r7, #28
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bc80      	pop	{r7}
 8007eb2:	4770      	bx	lr
 8007eb4:	40012c00 	.word	0x40012c00

08007eb8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b087      	sub	sp, #28
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	60f8      	str	r0, [r7, #12]
 8007ec0:	60b9      	str	r1, [r7, #8]
 8007ec2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	6a1b      	ldr	r3, [r3, #32]
 8007ec8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	6a1b      	ldr	r3, [r3, #32]
 8007ece:	f023 0201 	bic.w	r2, r3, #1
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	699b      	ldr	r3, [r3, #24]
 8007eda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007ee2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	011b      	lsls	r3, r3, #4
 8007ee8:	693a      	ldr	r2, [r7, #16]
 8007eea:	4313      	orrs	r3, r2
 8007eec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	f023 030a 	bic.w	r3, r3, #10
 8007ef4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007ef6:	697a      	ldr	r2, [r7, #20]
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	4313      	orrs	r3, r2
 8007efc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	693a      	ldr	r2, [r7, #16]
 8007f02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	697a      	ldr	r2, [r7, #20]
 8007f08:	621a      	str	r2, [r3, #32]
}
 8007f0a:	bf00      	nop
 8007f0c:	371c      	adds	r7, #28
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bc80      	pop	{r7}
 8007f12:	4770      	bx	lr

08007f14 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b087      	sub	sp, #28
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	60f8      	str	r0, [r7, #12]
 8007f1c:	60b9      	str	r1, [r7, #8]
 8007f1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	6a1b      	ldr	r3, [r3, #32]
 8007f24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	6a1b      	ldr	r3, [r3, #32]
 8007f2a:	f023 0210 	bic.w	r2, r3, #16
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	699b      	ldr	r3, [r3, #24]
 8007f36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007f3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	031b      	lsls	r3, r3, #12
 8007f44:	693a      	ldr	r2, [r7, #16]
 8007f46:	4313      	orrs	r3, r2
 8007f48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007f50:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	011b      	lsls	r3, r3, #4
 8007f56:	697a      	ldr	r2, [r7, #20]
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	693a      	ldr	r2, [r7, #16]
 8007f60:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	697a      	ldr	r2, [r7, #20]
 8007f66:	621a      	str	r2, [r3, #32]
}
 8007f68:	bf00      	nop
 8007f6a:	371c      	adds	r7, #28
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bc80      	pop	{r7}
 8007f70:	4770      	bx	lr

08007f72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007f72:	b480      	push	{r7}
 8007f74:	b085      	sub	sp, #20
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	6078      	str	r0, [r7, #4]
 8007f7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	689b      	ldr	r3, [r3, #8]
 8007f80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f8a:	683a      	ldr	r2, [r7, #0]
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	f043 0307 	orr.w	r3, r3, #7
 8007f94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	68fa      	ldr	r2, [r7, #12]
 8007f9a:	609a      	str	r2, [r3, #8]
}
 8007f9c:	bf00      	nop
 8007f9e:	3714      	adds	r7, #20
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bc80      	pop	{r7}
 8007fa4:	4770      	bx	lr

08007fa6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007fa6:	b480      	push	{r7}
 8007fa8:	b087      	sub	sp, #28
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	60f8      	str	r0, [r7, #12]
 8007fae:	60b9      	str	r1, [r7, #8]
 8007fb0:	607a      	str	r2, [r7, #4]
 8007fb2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	689b      	ldr	r3, [r3, #8]
 8007fb8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007fc0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	021a      	lsls	r2, r3, #8
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	431a      	orrs	r2, r3
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	697a      	ldr	r2, [r7, #20]
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	697a      	ldr	r2, [r7, #20]
 8007fd8:	609a      	str	r2, [r3, #8]
}
 8007fda:	bf00      	nop
 8007fdc:	371c      	adds	r7, #28
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bc80      	pop	{r7}
 8007fe2:	4770      	bx	lr

08007fe4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b087      	sub	sp, #28
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	60f8      	str	r0, [r7, #12]
 8007fec:	60b9      	str	r1, [r7, #8]
 8007fee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	f003 031f 	and.w	r3, r3, #31
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8007ffc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	6a1a      	ldr	r2, [r3, #32]
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	43db      	mvns	r3, r3
 8008006:	401a      	ands	r2, r3
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	6a1a      	ldr	r2, [r3, #32]
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	f003 031f 	and.w	r3, r3, #31
 8008016:	6879      	ldr	r1, [r7, #4]
 8008018:	fa01 f303 	lsl.w	r3, r1, r3
 800801c:	431a      	orrs	r2, r3
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	621a      	str	r2, [r3, #32]
}
 8008022:	bf00      	nop
 8008024:	371c      	adds	r7, #28
 8008026:	46bd      	mov	sp, r7
 8008028:	bc80      	pop	{r7}
 800802a:	4770      	bx	lr

0800802c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800802c:	b480      	push	{r7}
 800802e:	b085      	sub	sp, #20
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
 8008034:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800803c:	2b01      	cmp	r3, #1
 800803e:	d101      	bne.n	8008044 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008040:	2302      	movs	r3, #2
 8008042:	e046      	b.n	80080d2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2201      	movs	r2, #1
 8008048:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2202      	movs	r2, #2
 8008050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	689b      	ldr	r3, [r3, #8]
 8008062:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800806a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	68fa      	ldr	r2, [r7, #12]
 8008072:	4313      	orrs	r3, r2
 8008074:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	68fa      	ldr	r2, [r7, #12]
 800807c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a16      	ldr	r2, [pc, #88]	@ (80080dc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d00e      	beq.n	80080a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008090:	d009      	beq.n	80080a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a12      	ldr	r2, [pc, #72]	@ (80080e0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d004      	beq.n	80080a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a10      	ldr	r2, [pc, #64]	@ (80080e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d10c      	bne.n	80080c0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80080ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	68ba      	ldr	r2, [r7, #8]
 80080b4:	4313      	orrs	r3, r2
 80080b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	68ba      	ldr	r2, [r7, #8]
 80080be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2201      	movs	r2, #1
 80080c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2200      	movs	r2, #0
 80080cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80080d0:	2300      	movs	r3, #0
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3714      	adds	r7, #20
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bc80      	pop	{r7}
 80080da:	4770      	bx	lr
 80080dc:	40012c00 	.word	0x40012c00
 80080e0:	40000400 	.word	0x40000400
 80080e4:	40000800 	.word	0x40000800

080080e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b085      	sub	sp, #20
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
 80080f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80080f2:	2300      	movs	r3, #0
 80080f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	d101      	bne.n	8008104 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008100:	2302      	movs	r3, #2
 8008102:	e03d      	b.n	8008180 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2201      	movs	r2, #1
 8008108:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	68db      	ldr	r3, [r3, #12]
 8008116:	4313      	orrs	r3, r2
 8008118:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	689b      	ldr	r3, [r3, #8]
 8008124:	4313      	orrs	r3, r2
 8008126:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	4313      	orrs	r3, r2
 8008134:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4313      	orrs	r3, r2
 8008142:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	691b      	ldr	r3, [r3, #16]
 800814e:	4313      	orrs	r3, r2
 8008150:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	695b      	ldr	r3, [r3, #20]
 800815c:	4313      	orrs	r3, r2
 800815e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	69db      	ldr	r3, [r3, #28]
 800816a:	4313      	orrs	r3, r2
 800816c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	68fa      	ldr	r2, [r7, #12]
 8008174:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2200      	movs	r2, #0
 800817a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800817e:	2300      	movs	r3, #0
}
 8008180:	4618      	mov	r0, r3
 8008182:	3714      	adds	r7, #20
 8008184:	46bd      	mov	sp, r7
 8008186:	bc80      	pop	{r7}
 8008188:	4770      	bx	lr
	...

0800818c <rand>:
 800818c:	4b16      	ldr	r3, [pc, #88]	@ (80081e8 <rand+0x5c>)
 800818e:	b510      	push	{r4, lr}
 8008190:	681c      	ldr	r4, [r3, #0]
 8008192:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008194:	b9b3      	cbnz	r3, 80081c4 <rand+0x38>
 8008196:	2018      	movs	r0, #24
 8008198:	f000 fa60 	bl	800865c <malloc>
 800819c:	4602      	mov	r2, r0
 800819e:	6320      	str	r0, [r4, #48]	@ 0x30
 80081a0:	b920      	cbnz	r0, 80081ac <rand+0x20>
 80081a2:	2152      	movs	r1, #82	@ 0x52
 80081a4:	4b11      	ldr	r3, [pc, #68]	@ (80081ec <rand+0x60>)
 80081a6:	4812      	ldr	r0, [pc, #72]	@ (80081f0 <rand+0x64>)
 80081a8:	f000 f9f2 	bl	8008590 <__assert_func>
 80081ac:	4911      	ldr	r1, [pc, #68]	@ (80081f4 <rand+0x68>)
 80081ae:	4b12      	ldr	r3, [pc, #72]	@ (80081f8 <rand+0x6c>)
 80081b0:	e9c0 1300 	strd	r1, r3, [r0]
 80081b4:	4b11      	ldr	r3, [pc, #68]	@ (80081fc <rand+0x70>)
 80081b6:	2100      	movs	r1, #0
 80081b8:	6083      	str	r3, [r0, #8]
 80081ba:	230b      	movs	r3, #11
 80081bc:	8183      	strh	r3, [r0, #12]
 80081be:	2001      	movs	r0, #1
 80081c0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80081c4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80081c6:	480e      	ldr	r0, [pc, #56]	@ (8008200 <rand+0x74>)
 80081c8:	690b      	ldr	r3, [r1, #16]
 80081ca:	694c      	ldr	r4, [r1, #20]
 80081cc:	4358      	muls	r0, r3
 80081ce:	4a0d      	ldr	r2, [pc, #52]	@ (8008204 <rand+0x78>)
 80081d0:	fb02 0004 	mla	r0, r2, r4, r0
 80081d4:	fba3 3202 	umull	r3, r2, r3, r2
 80081d8:	3301      	adds	r3, #1
 80081da:	eb40 0002 	adc.w	r0, r0, r2
 80081de:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80081e2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80081e6:	bd10      	pop	{r4, pc}
 80081e8:	20000030 	.word	0x20000030
 80081ec:	0800ae52 	.word	0x0800ae52
 80081f0:	0800ae69 	.word	0x0800ae69
 80081f4:	abcd330e 	.word	0xabcd330e
 80081f8:	e66d1234 	.word	0xe66d1234
 80081fc:	0005deec 	.word	0x0005deec
 8008200:	5851f42d 	.word	0x5851f42d
 8008204:	4c957f2d 	.word	0x4c957f2d

08008208 <std>:
 8008208:	2300      	movs	r3, #0
 800820a:	b510      	push	{r4, lr}
 800820c:	4604      	mov	r4, r0
 800820e:	e9c0 3300 	strd	r3, r3, [r0]
 8008212:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008216:	6083      	str	r3, [r0, #8]
 8008218:	8181      	strh	r1, [r0, #12]
 800821a:	6643      	str	r3, [r0, #100]	@ 0x64
 800821c:	81c2      	strh	r2, [r0, #14]
 800821e:	6183      	str	r3, [r0, #24]
 8008220:	4619      	mov	r1, r3
 8008222:	2208      	movs	r2, #8
 8008224:	305c      	adds	r0, #92	@ 0x5c
 8008226:	f000 f916 	bl	8008456 <memset>
 800822a:	4b0d      	ldr	r3, [pc, #52]	@ (8008260 <std+0x58>)
 800822c:	6224      	str	r4, [r4, #32]
 800822e:	6263      	str	r3, [r4, #36]	@ 0x24
 8008230:	4b0c      	ldr	r3, [pc, #48]	@ (8008264 <std+0x5c>)
 8008232:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008234:	4b0c      	ldr	r3, [pc, #48]	@ (8008268 <std+0x60>)
 8008236:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008238:	4b0c      	ldr	r3, [pc, #48]	@ (800826c <std+0x64>)
 800823a:	6323      	str	r3, [r4, #48]	@ 0x30
 800823c:	4b0c      	ldr	r3, [pc, #48]	@ (8008270 <std+0x68>)
 800823e:	429c      	cmp	r4, r3
 8008240:	d006      	beq.n	8008250 <std+0x48>
 8008242:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008246:	4294      	cmp	r4, r2
 8008248:	d002      	beq.n	8008250 <std+0x48>
 800824a:	33d0      	adds	r3, #208	@ 0xd0
 800824c:	429c      	cmp	r4, r3
 800824e:	d105      	bne.n	800825c <std+0x54>
 8008250:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008258:	f000 b988 	b.w	800856c <__retarget_lock_init_recursive>
 800825c:	bd10      	pop	{r4, pc}
 800825e:	bf00      	nop
 8008260:	080083d1 	.word	0x080083d1
 8008264:	080083f3 	.word	0x080083f3
 8008268:	0800842b 	.word	0x0800842b
 800826c:	0800844f 	.word	0x0800844f
 8008270:	20003fb8 	.word	0x20003fb8

08008274 <stdio_exit_handler>:
 8008274:	4a02      	ldr	r2, [pc, #8]	@ (8008280 <stdio_exit_handler+0xc>)
 8008276:	4903      	ldr	r1, [pc, #12]	@ (8008284 <stdio_exit_handler+0x10>)
 8008278:	4803      	ldr	r0, [pc, #12]	@ (8008288 <stdio_exit_handler+0x14>)
 800827a:	f000 b869 	b.w	8008350 <_fwalk_sglue>
 800827e:	bf00      	nop
 8008280:	20000024 	.word	0x20000024
 8008284:	08008e99 	.word	0x08008e99
 8008288:	20000034 	.word	0x20000034

0800828c <cleanup_stdio>:
 800828c:	6841      	ldr	r1, [r0, #4]
 800828e:	4b0c      	ldr	r3, [pc, #48]	@ (80082c0 <cleanup_stdio+0x34>)
 8008290:	b510      	push	{r4, lr}
 8008292:	4299      	cmp	r1, r3
 8008294:	4604      	mov	r4, r0
 8008296:	d001      	beq.n	800829c <cleanup_stdio+0x10>
 8008298:	f000 fdfe 	bl	8008e98 <_fflush_r>
 800829c:	68a1      	ldr	r1, [r4, #8]
 800829e:	4b09      	ldr	r3, [pc, #36]	@ (80082c4 <cleanup_stdio+0x38>)
 80082a0:	4299      	cmp	r1, r3
 80082a2:	d002      	beq.n	80082aa <cleanup_stdio+0x1e>
 80082a4:	4620      	mov	r0, r4
 80082a6:	f000 fdf7 	bl	8008e98 <_fflush_r>
 80082aa:	68e1      	ldr	r1, [r4, #12]
 80082ac:	4b06      	ldr	r3, [pc, #24]	@ (80082c8 <cleanup_stdio+0x3c>)
 80082ae:	4299      	cmp	r1, r3
 80082b0:	d004      	beq.n	80082bc <cleanup_stdio+0x30>
 80082b2:	4620      	mov	r0, r4
 80082b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082b8:	f000 bdee 	b.w	8008e98 <_fflush_r>
 80082bc:	bd10      	pop	{r4, pc}
 80082be:	bf00      	nop
 80082c0:	20003fb8 	.word	0x20003fb8
 80082c4:	20004020 	.word	0x20004020
 80082c8:	20004088 	.word	0x20004088

080082cc <global_stdio_init.part.0>:
 80082cc:	b510      	push	{r4, lr}
 80082ce:	4b0b      	ldr	r3, [pc, #44]	@ (80082fc <global_stdio_init.part.0+0x30>)
 80082d0:	4c0b      	ldr	r4, [pc, #44]	@ (8008300 <global_stdio_init.part.0+0x34>)
 80082d2:	4a0c      	ldr	r2, [pc, #48]	@ (8008304 <global_stdio_init.part.0+0x38>)
 80082d4:	4620      	mov	r0, r4
 80082d6:	601a      	str	r2, [r3, #0]
 80082d8:	2104      	movs	r1, #4
 80082da:	2200      	movs	r2, #0
 80082dc:	f7ff ff94 	bl	8008208 <std>
 80082e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80082e4:	2201      	movs	r2, #1
 80082e6:	2109      	movs	r1, #9
 80082e8:	f7ff ff8e 	bl	8008208 <std>
 80082ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80082f0:	2202      	movs	r2, #2
 80082f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082f6:	2112      	movs	r1, #18
 80082f8:	f7ff bf86 	b.w	8008208 <std>
 80082fc:	200040f0 	.word	0x200040f0
 8008300:	20003fb8 	.word	0x20003fb8
 8008304:	08008275 	.word	0x08008275

08008308 <__sfp_lock_acquire>:
 8008308:	4801      	ldr	r0, [pc, #4]	@ (8008310 <__sfp_lock_acquire+0x8>)
 800830a:	f000 b930 	b.w	800856e <__retarget_lock_acquire_recursive>
 800830e:	bf00      	nop
 8008310:	200040f9 	.word	0x200040f9

08008314 <__sfp_lock_release>:
 8008314:	4801      	ldr	r0, [pc, #4]	@ (800831c <__sfp_lock_release+0x8>)
 8008316:	f000 b92b 	b.w	8008570 <__retarget_lock_release_recursive>
 800831a:	bf00      	nop
 800831c:	200040f9 	.word	0x200040f9

08008320 <__sinit>:
 8008320:	b510      	push	{r4, lr}
 8008322:	4604      	mov	r4, r0
 8008324:	f7ff fff0 	bl	8008308 <__sfp_lock_acquire>
 8008328:	6a23      	ldr	r3, [r4, #32]
 800832a:	b11b      	cbz	r3, 8008334 <__sinit+0x14>
 800832c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008330:	f7ff bff0 	b.w	8008314 <__sfp_lock_release>
 8008334:	4b04      	ldr	r3, [pc, #16]	@ (8008348 <__sinit+0x28>)
 8008336:	6223      	str	r3, [r4, #32]
 8008338:	4b04      	ldr	r3, [pc, #16]	@ (800834c <__sinit+0x2c>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d1f5      	bne.n	800832c <__sinit+0xc>
 8008340:	f7ff ffc4 	bl	80082cc <global_stdio_init.part.0>
 8008344:	e7f2      	b.n	800832c <__sinit+0xc>
 8008346:	bf00      	nop
 8008348:	0800828d 	.word	0x0800828d
 800834c:	200040f0 	.word	0x200040f0

08008350 <_fwalk_sglue>:
 8008350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008354:	4607      	mov	r7, r0
 8008356:	4688      	mov	r8, r1
 8008358:	4614      	mov	r4, r2
 800835a:	2600      	movs	r6, #0
 800835c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008360:	f1b9 0901 	subs.w	r9, r9, #1
 8008364:	d505      	bpl.n	8008372 <_fwalk_sglue+0x22>
 8008366:	6824      	ldr	r4, [r4, #0]
 8008368:	2c00      	cmp	r4, #0
 800836a:	d1f7      	bne.n	800835c <_fwalk_sglue+0xc>
 800836c:	4630      	mov	r0, r6
 800836e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008372:	89ab      	ldrh	r3, [r5, #12]
 8008374:	2b01      	cmp	r3, #1
 8008376:	d907      	bls.n	8008388 <_fwalk_sglue+0x38>
 8008378:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800837c:	3301      	adds	r3, #1
 800837e:	d003      	beq.n	8008388 <_fwalk_sglue+0x38>
 8008380:	4629      	mov	r1, r5
 8008382:	4638      	mov	r0, r7
 8008384:	47c0      	blx	r8
 8008386:	4306      	orrs	r6, r0
 8008388:	3568      	adds	r5, #104	@ 0x68
 800838a:	e7e9      	b.n	8008360 <_fwalk_sglue+0x10>

0800838c <siprintf>:
 800838c:	b40e      	push	{r1, r2, r3}
 800838e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008392:	b510      	push	{r4, lr}
 8008394:	2400      	movs	r4, #0
 8008396:	b09d      	sub	sp, #116	@ 0x74
 8008398:	ab1f      	add	r3, sp, #124	@ 0x7c
 800839a:	9002      	str	r0, [sp, #8]
 800839c:	9006      	str	r0, [sp, #24]
 800839e:	9107      	str	r1, [sp, #28]
 80083a0:	9104      	str	r1, [sp, #16]
 80083a2:	4809      	ldr	r0, [pc, #36]	@ (80083c8 <siprintf+0x3c>)
 80083a4:	4909      	ldr	r1, [pc, #36]	@ (80083cc <siprintf+0x40>)
 80083a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80083aa:	9105      	str	r1, [sp, #20]
 80083ac:	6800      	ldr	r0, [r0, #0]
 80083ae:	a902      	add	r1, sp, #8
 80083b0:	9301      	str	r3, [sp, #4]
 80083b2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80083b4:	f000 fa64 	bl	8008880 <_svfiprintf_r>
 80083b8:	9b02      	ldr	r3, [sp, #8]
 80083ba:	701c      	strb	r4, [r3, #0]
 80083bc:	b01d      	add	sp, #116	@ 0x74
 80083be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083c2:	b003      	add	sp, #12
 80083c4:	4770      	bx	lr
 80083c6:	bf00      	nop
 80083c8:	20000030 	.word	0x20000030
 80083cc:	ffff0208 	.word	0xffff0208

080083d0 <__sread>:
 80083d0:	b510      	push	{r4, lr}
 80083d2:	460c      	mov	r4, r1
 80083d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083d8:	f000 f87a 	bl	80084d0 <_read_r>
 80083dc:	2800      	cmp	r0, #0
 80083de:	bfab      	itete	ge
 80083e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80083e2:	89a3      	ldrhlt	r3, [r4, #12]
 80083e4:	181b      	addge	r3, r3, r0
 80083e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80083ea:	bfac      	ite	ge
 80083ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 80083ee:	81a3      	strhlt	r3, [r4, #12]
 80083f0:	bd10      	pop	{r4, pc}

080083f2 <__swrite>:
 80083f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083f6:	461f      	mov	r7, r3
 80083f8:	898b      	ldrh	r3, [r1, #12]
 80083fa:	4605      	mov	r5, r0
 80083fc:	05db      	lsls	r3, r3, #23
 80083fe:	460c      	mov	r4, r1
 8008400:	4616      	mov	r6, r2
 8008402:	d505      	bpl.n	8008410 <__swrite+0x1e>
 8008404:	2302      	movs	r3, #2
 8008406:	2200      	movs	r2, #0
 8008408:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800840c:	f000 f84e 	bl	80084ac <_lseek_r>
 8008410:	89a3      	ldrh	r3, [r4, #12]
 8008412:	4632      	mov	r2, r6
 8008414:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008418:	81a3      	strh	r3, [r4, #12]
 800841a:	4628      	mov	r0, r5
 800841c:	463b      	mov	r3, r7
 800841e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008422:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008426:	f000 b865 	b.w	80084f4 <_write_r>

0800842a <__sseek>:
 800842a:	b510      	push	{r4, lr}
 800842c:	460c      	mov	r4, r1
 800842e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008432:	f000 f83b 	bl	80084ac <_lseek_r>
 8008436:	1c43      	adds	r3, r0, #1
 8008438:	89a3      	ldrh	r3, [r4, #12]
 800843a:	bf15      	itete	ne
 800843c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800843e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008442:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008446:	81a3      	strheq	r3, [r4, #12]
 8008448:	bf18      	it	ne
 800844a:	81a3      	strhne	r3, [r4, #12]
 800844c:	bd10      	pop	{r4, pc}

0800844e <__sclose>:
 800844e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008452:	f000 b81b 	b.w	800848c <_close_r>

08008456 <memset>:
 8008456:	4603      	mov	r3, r0
 8008458:	4402      	add	r2, r0
 800845a:	4293      	cmp	r3, r2
 800845c:	d100      	bne.n	8008460 <memset+0xa>
 800845e:	4770      	bx	lr
 8008460:	f803 1b01 	strb.w	r1, [r3], #1
 8008464:	e7f9      	b.n	800845a <memset+0x4>

08008466 <strncpy>:
 8008466:	4603      	mov	r3, r0
 8008468:	b510      	push	{r4, lr}
 800846a:	3901      	subs	r1, #1
 800846c:	b132      	cbz	r2, 800847c <strncpy+0x16>
 800846e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008472:	3a01      	subs	r2, #1
 8008474:	f803 4b01 	strb.w	r4, [r3], #1
 8008478:	2c00      	cmp	r4, #0
 800847a:	d1f7      	bne.n	800846c <strncpy+0x6>
 800847c:	2100      	movs	r1, #0
 800847e:	441a      	add	r2, r3
 8008480:	4293      	cmp	r3, r2
 8008482:	d100      	bne.n	8008486 <strncpy+0x20>
 8008484:	bd10      	pop	{r4, pc}
 8008486:	f803 1b01 	strb.w	r1, [r3], #1
 800848a:	e7f9      	b.n	8008480 <strncpy+0x1a>

0800848c <_close_r>:
 800848c:	b538      	push	{r3, r4, r5, lr}
 800848e:	2300      	movs	r3, #0
 8008490:	4d05      	ldr	r5, [pc, #20]	@ (80084a8 <_close_r+0x1c>)
 8008492:	4604      	mov	r4, r0
 8008494:	4608      	mov	r0, r1
 8008496:	602b      	str	r3, [r5, #0]
 8008498:	f7fc ffa7 	bl	80053ea <_close>
 800849c:	1c43      	adds	r3, r0, #1
 800849e:	d102      	bne.n	80084a6 <_close_r+0x1a>
 80084a0:	682b      	ldr	r3, [r5, #0]
 80084a2:	b103      	cbz	r3, 80084a6 <_close_r+0x1a>
 80084a4:	6023      	str	r3, [r4, #0]
 80084a6:	bd38      	pop	{r3, r4, r5, pc}
 80084a8:	200040f4 	.word	0x200040f4

080084ac <_lseek_r>:
 80084ac:	b538      	push	{r3, r4, r5, lr}
 80084ae:	4604      	mov	r4, r0
 80084b0:	4608      	mov	r0, r1
 80084b2:	4611      	mov	r1, r2
 80084b4:	2200      	movs	r2, #0
 80084b6:	4d05      	ldr	r5, [pc, #20]	@ (80084cc <_lseek_r+0x20>)
 80084b8:	602a      	str	r2, [r5, #0]
 80084ba:	461a      	mov	r2, r3
 80084bc:	f7fc ffb9 	bl	8005432 <_lseek>
 80084c0:	1c43      	adds	r3, r0, #1
 80084c2:	d102      	bne.n	80084ca <_lseek_r+0x1e>
 80084c4:	682b      	ldr	r3, [r5, #0]
 80084c6:	b103      	cbz	r3, 80084ca <_lseek_r+0x1e>
 80084c8:	6023      	str	r3, [r4, #0]
 80084ca:	bd38      	pop	{r3, r4, r5, pc}
 80084cc:	200040f4 	.word	0x200040f4

080084d0 <_read_r>:
 80084d0:	b538      	push	{r3, r4, r5, lr}
 80084d2:	4604      	mov	r4, r0
 80084d4:	4608      	mov	r0, r1
 80084d6:	4611      	mov	r1, r2
 80084d8:	2200      	movs	r2, #0
 80084da:	4d05      	ldr	r5, [pc, #20]	@ (80084f0 <_read_r+0x20>)
 80084dc:	602a      	str	r2, [r5, #0]
 80084de:	461a      	mov	r2, r3
 80084e0:	f7fc ff4a 	bl	8005378 <_read>
 80084e4:	1c43      	adds	r3, r0, #1
 80084e6:	d102      	bne.n	80084ee <_read_r+0x1e>
 80084e8:	682b      	ldr	r3, [r5, #0]
 80084ea:	b103      	cbz	r3, 80084ee <_read_r+0x1e>
 80084ec:	6023      	str	r3, [r4, #0]
 80084ee:	bd38      	pop	{r3, r4, r5, pc}
 80084f0:	200040f4 	.word	0x200040f4

080084f4 <_write_r>:
 80084f4:	b538      	push	{r3, r4, r5, lr}
 80084f6:	4604      	mov	r4, r0
 80084f8:	4608      	mov	r0, r1
 80084fa:	4611      	mov	r1, r2
 80084fc:	2200      	movs	r2, #0
 80084fe:	4d05      	ldr	r5, [pc, #20]	@ (8008514 <_write_r+0x20>)
 8008500:	602a      	str	r2, [r5, #0]
 8008502:	461a      	mov	r2, r3
 8008504:	f7fc ff55 	bl	80053b2 <_write>
 8008508:	1c43      	adds	r3, r0, #1
 800850a:	d102      	bne.n	8008512 <_write_r+0x1e>
 800850c:	682b      	ldr	r3, [r5, #0]
 800850e:	b103      	cbz	r3, 8008512 <_write_r+0x1e>
 8008510:	6023      	str	r3, [r4, #0]
 8008512:	bd38      	pop	{r3, r4, r5, pc}
 8008514:	200040f4 	.word	0x200040f4

08008518 <__errno>:
 8008518:	4b01      	ldr	r3, [pc, #4]	@ (8008520 <__errno+0x8>)
 800851a:	6818      	ldr	r0, [r3, #0]
 800851c:	4770      	bx	lr
 800851e:	bf00      	nop
 8008520:	20000030 	.word	0x20000030

08008524 <__libc_init_array>:
 8008524:	b570      	push	{r4, r5, r6, lr}
 8008526:	2600      	movs	r6, #0
 8008528:	4d0c      	ldr	r5, [pc, #48]	@ (800855c <__libc_init_array+0x38>)
 800852a:	4c0d      	ldr	r4, [pc, #52]	@ (8008560 <__libc_init_array+0x3c>)
 800852c:	1b64      	subs	r4, r4, r5
 800852e:	10a4      	asrs	r4, r4, #2
 8008530:	42a6      	cmp	r6, r4
 8008532:	d109      	bne.n	8008548 <__libc_init_array+0x24>
 8008534:	f002 fa56 	bl	800a9e4 <_init>
 8008538:	2600      	movs	r6, #0
 800853a:	4d0a      	ldr	r5, [pc, #40]	@ (8008564 <__libc_init_array+0x40>)
 800853c:	4c0a      	ldr	r4, [pc, #40]	@ (8008568 <__libc_init_array+0x44>)
 800853e:	1b64      	subs	r4, r4, r5
 8008540:	10a4      	asrs	r4, r4, #2
 8008542:	42a6      	cmp	r6, r4
 8008544:	d105      	bne.n	8008552 <__libc_init_array+0x2e>
 8008546:	bd70      	pop	{r4, r5, r6, pc}
 8008548:	f855 3b04 	ldr.w	r3, [r5], #4
 800854c:	4798      	blx	r3
 800854e:	3601      	adds	r6, #1
 8008550:	e7ee      	b.n	8008530 <__libc_init_array+0xc>
 8008552:	f855 3b04 	ldr.w	r3, [r5], #4
 8008556:	4798      	blx	r3
 8008558:	3601      	adds	r6, #1
 800855a:	e7f2      	b.n	8008542 <__libc_init_array+0x1e>
 800855c:	0800b328 	.word	0x0800b328
 8008560:	0800b328 	.word	0x0800b328
 8008564:	0800b328 	.word	0x0800b328
 8008568:	0800b32c 	.word	0x0800b32c

0800856c <__retarget_lock_init_recursive>:
 800856c:	4770      	bx	lr

0800856e <__retarget_lock_acquire_recursive>:
 800856e:	4770      	bx	lr

08008570 <__retarget_lock_release_recursive>:
 8008570:	4770      	bx	lr

08008572 <memcpy>:
 8008572:	440a      	add	r2, r1
 8008574:	4291      	cmp	r1, r2
 8008576:	f100 33ff 	add.w	r3, r0, #4294967295
 800857a:	d100      	bne.n	800857e <memcpy+0xc>
 800857c:	4770      	bx	lr
 800857e:	b510      	push	{r4, lr}
 8008580:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008584:	4291      	cmp	r1, r2
 8008586:	f803 4f01 	strb.w	r4, [r3, #1]!
 800858a:	d1f9      	bne.n	8008580 <memcpy+0xe>
 800858c:	bd10      	pop	{r4, pc}
	...

08008590 <__assert_func>:
 8008590:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008592:	4614      	mov	r4, r2
 8008594:	461a      	mov	r2, r3
 8008596:	4b09      	ldr	r3, [pc, #36]	@ (80085bc <__assert_func+0x2c>)
 8008598:	4605      	mov	r5, r0
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	68d8      	ldr	r0, [r3, #12]
 800859e:	b14c      	cbz	r4, 80085b4 <__assert_func+0x24>
 80085a0:	4b07      	ldr	r3, [pc, #28]	@ (80085c0 <__assert_func+0x30>)
 80085a2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80085a6:	9100      	str	r1, [sp, #0]
 80085a8:	462b      	mov	r3, r5
 80085aa:	4906      	ldr	r1, [pc, #24]	@ (80085c4 <__assert_func+0x34>)
 80085ac:	f000 fc9c 	bl	8008ee8 <fiprintf>
 80085b0:	f000 fce4 	bl	8008f7c <abort>
 80085b4:	4b04      	ldr	r3, [pc, #16]	@ (80085c8 <__assert_func+0x38>)
 80085b6:	461c      	mov	r4, r3
 80085b8:	e7f3      	b.n	80085a2 <__assert_func+0x12>
 80085ba:	bf00      	nop
 80085bc:	20000030 	.word	0x20000030
 80085c0:	0800aec1 	.word	0x0800aec1
 80085c4:	0800aece 	.word	0x0800aece
 80085c8:	0800aefc 	.word	0x0800aefc

080085cc <_free_r>:
 80085cc:	b538      	push	{r3, r4, r5, lr}
 80085ce:	4605      	mov	r5, r0
 80085d0:	2900      	cmp	r1, #0
 80085d2:	d040      	beq.n	8008656 <_free_r+0x8a>
 80085d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085d8:	1f0c      	subs	r4, r1, #4
 80085da:	2b00      	cmp	r3, #0
 80085dc:	bfb8      	it	lt
 80085de:	18e4      	addlt	r4, r4, r3
 80085e0:	f000 f8e6 	bl	80087b0 <__malloc_lock>
 80085e4:	4a1c      	ldr	r2, [pc, #112]	@ (8008658 <_free_r+0x8c>)
 80085e6:	6813      	ldr	r3, [r2, #0]
 80085e8:	b933      	cbnz	r3, 80085f8 <_free_r+0x2c>
 80085ea:	6063      	str	r3, [r4, #4]
 80085ec:	6014      	str	r4, [r2, #0]
 80085ee:	4628      	mov	r0, r5
 80085f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80085f4:	f000 b8e2 	b.w	80087bc <__malloc_unlock>
 80085f8:	42a3      	cmp	r3, r4
 80085fa:	d908      	bls.n	800860e <_free_r+0x42>
 80085fc:	6820      	ldr	r0, [r4, #0]
 80085fe:	1821      	adds	r1, r4, r0
 8008600:	428b      	cmp	r3, r1
 8008602:	bf01      	itttt	eq
 8008604:	6819      	ldreq	r1, [r3, #0]
 8008606:	685b      	ldreq	r3, [r3, #4]
 8008608:	1809      	addeq	r1, r1, r0
 800860a:	6021      	streq	r1, [r4, #0]
 800860c:	e7ed      	b.n	80085ea <_free_r+0x1e>
 800860e:	461a      	mov	r2, r3
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	b10b      	cbz	r3, 8008618 <_free_r+0x4c>
 8008614:	42a3      	cmp	r3, r4
 8008616:	d9fa      	bls.n	800860e <_free_r+0x42>
 8008618:	6811      	ldr	r1, [r2, #0]
 800861a:	1850      	adds	r0, r2, r1
 800861c:	42a0      	cmp	r0, r4
 800861e:	d10b      	bne.n	8008638 <_free_r+0x6c>
 8008620:	6820      	ldr	r0, [r4, #0]
 8008622:	4401      	add	r1, r0
 8008624:	1850      	adds	r0, r2, r1
 8008626:	4283      	cmp	r3, r0
 8008628:	6011      	str	r1, [r2, #0]
 800862a:	d1e0      	bne.n	80085ee <_free_r+0x22>
 800862c:	6818      	ldr	r0, [r3, #0]
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	4408      	add	r0, r1
 8008632:	6010      	str	r0, [r2, #0]
 8008634:	6053      	str	r3, [r2, #4]
 8008636:	e7da      	b.n	80085ee <_free_r+0x22>
 8008638:	d902      	bls.n	8008640 <_free_r+0x74>
 800863a:	230c      	movs	r3, #12
 800863c:	602b      	str	r3, [r5, #0]
 800863e:	e7d6      	b.n	80085ee <_free_r+0x22>
 8008640:	6820      	ldr	r0, [r4, #0]
 8008642:	1821      	adds	r1, r4, r0
 8008644:	428b      	cmp	r3, r1
 8008646:	bf01      	itttt	eq
 8008648:	6819      	ldreq	r1, [r3, #0]
 800864a:	685b      	ldreq	r3, [r3, #4]
 800864c:	1809      	addeq	r1, r1, r0
 800864e:	6021      	streq	r1, [r4, #0]
 8008650:	6063      	str	r3, [r4, #4]
 8008652:	6054      	str	r4, [r2, #4]
 8008654:	e7cb      	b.n	80085ee <_free_r+0x22>
 8008656:	bd38      	pop	{r3, r4, r5, pc}
 8008658:	20004100 	.word	0x20004100

0800865c <malloc>:
 800865c:	4b02      	ldr	r3, [pc, #8]	@ (8008668 <malloc+0xc>)
 800865e:	4601      	mov	r1, r0
 8008660:	6818      	ldr	r0, [r3, #0]
 8008662:	f000 b825 	b.w	80086b0 <_malloc_r>
 8008666:	bf00      	nop
 8008668:	20000030 	.word	0x20000030

0800866c <sbrk_aligned>:
 800866c:	b570      	push	{r4, r5, r6, lr}
 800866e:	4e0f      	ldr	r6, [pc, #60]	@ (80086ac <sbrk_aligned+0x40>)
 8008670:	460c      	mov	r4, r1
 8008672:	6831      	ldr	r1, [r6, #0]
 8008674:	4605      	mov	r5, r0
 8008676:	b911      	cbnz	r1, 800867e <sbrk_aligned+0x12>
 8008678:	f000 fc62 	bl	8008f40 <_sbrk_r>
 800867c:	6030      	str	r0, [r6, #0]
 800867e:	4621      	mov	r1, r4
 8008680:	4628      	mov	r0, r5
 8008682:	f000 fc5d 	bl	8008f40 <_sbrk_r>
 8008686:	1c43      	adds	r3, r0, #1
 8008688:	d103      	bne.n	8008692 <sbrk_aligned+0x26>
 800868a:	f04f 34ff 	mov.w	r4, #4294967295
 800868e:	4620      	mov	r0, r4
 8008690:	bd70      	pop	{r4, r5, r6, pc}
 8008692:	1cc4      	adds	r4, r0, #3
 8008694:	f024 0403 	bic.w	r4, r4, #3
 8008698:	42a0      	cmp	r0, r4
 800869a:	d0f8      	beq.n	800868e <sbrk_aligned+0x22>
 800869c:	1a21      	subs	r1, r4, r0
 800869e:	4628      	mov	r0, r5
 80086a0:	f000 fc4e 	bl	8008f40 <_sbrk_r>
 80086a4:	3001      	adds	r0, #1
 80086a6:	d1f2      	bne.n	800868e <sbrk_aligned+0x22>
 80086a8:	e7ef      	b.n	800868a <sbrk_aligned+0x1e>
 80086aa:	bf00      	nop
 80086ac:	200040fc 	.word	0x200040fc

080086b0 <_malloc_r>:
 80086b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086b4:	1ccd      	adds	r5, r1, #3
 80086b6:	f025 0503 	bic.w	r5, r5, #3
 80086ba:	3508      	adds	r5, #8
 80086bc:	2d0c      	cmp	r5, #12
 80086be:	bf38      	it	cc
 80086c0:	250c      	movcc	r5, #12
 80086c2:	2d00      	cmp	r5, #0
 80086c4:	4606      	mov	r6, r0
 80086c6:	db01      	blt.n	80086cc <_malloc_r+0x1c>
 80086c8:	42a9      	cmp	r1, r5
 80086ca:	d904      	bls.n	80086d6 <_malloc_r+0x26>
 80086cc:	230c      	movs	r3, #12
 80086ce:	6033      	str	r3, [r6, #0]
 80086d0:	2000      	movs	r0, #0
 80086d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80087ac <_malloc_r+0xfc>
 80086da:	f000 f869 	bl	80087b0 <__malloc_lock>
 80086de:	f8d8 3000 	ldr.w	r3, [r8]
 80086e2:	461c      	mov	r4, r3
 80086e4:	bb44      	cbnz	r4, 8008738 <_malloc_r+0x88>
 80086e6:	4629      	mov	r1, r5
 80086e8:	4630      	mov	r0, r6
 80086ea:	f7ff ffbf 	bl	800866c <sbrk_aligned>
 80086ee:	1c43      	adds	r3, r0, #1
 80086f0:	4604      	mov	r4, r0
 80086f2:	d158      	bne.n	80087a6 <_malloc_r+0xf6>
 80086f4:	f8d8 4000 	ldr.w	r4, [r8]
 80086f8:	4627      	mov	r7, r4
 80086fa:	2f00      	cmp	r7, #0
 80086fc:	d143      	bne.n	8008786 <_malloc_r+0xd6>
 80086fe:	2c00      	cmp	r4, #0
 8008700:	d04b      	beq.n	800879a <_malloc_r+0xea>
 8008702:	6823      	ldr	r3, [r4, #0]
 8008704:	4639      	mov	r1, r7
 8008706:	4630      	mov	r0, r6
 8008708:	eb04 0903 	add.w	r9, r4, r3
 800870c:	f000 fc18 	bl	8008f40 <_sbrk_r>
 8008710:	4581      	cmp	r9, r0
 8008712:	d142      	bne.n	800879a <_malloc_r+0xea>
 8008714:	6821      	ldr	r1, [r4, #0]
 8008716:	4630      	mov	r0, r6
 8008718:	1a6d      	subs	r5, r5, r1
 800871a:	4629      	mov	r1, r5
 800871c:	f7ff ffa6 	bl	800866c <sbrk_aligned>
 8008720:	3001      	adds	r0, #1
 8008722:	d03a      	beq.n	800879a <_malloc_r+0xea>
 8008724:	6823      	ldr	r3, [r4, #0]
 8008726:	442b      	add	r3, r5
 8008728:	6023      	str	r3, [r4, #0]
 800872a:	f8d8 3000 	ldr.w	r3, [r8]
 800872e:	685a      	ldr	r2, [r3, #4]
 8008730:	bb62      	cbnz	r2, 800878c <_malloc_r+0xdc>
 8008732:	f8c8 7000 	str.w	r7, [r8]
 8008736:	e00f      	b.n	8008758 <_malloc_r+0xa8>
 8008738:	6822      	ldr	r2, [r4, #0]
 800873a:	1b52      	subs	r2, r2, r5
 800873c:	d420      	bmi.n	8008780 <_malloc_r+0xd0>
 800873e:	2a0b      	cmp	r2, #11
 8008740:	d917      	bls.n	8008772 <_malloc_r+0xc2>
 8008742:	1961      	adds	r1, r4, r5
 8008744:	42a3      	cmp	r3, r4
 8008746:	6025      	str	r5, [r4, #0]
 8008748:	bf18      	it	ne
 800874a:	6059      	strne	r1, [r3, #4]
 800874c:	6863      	ldr	r3, [r4, #4]
 800874e:	bf08      	it	eq
 8008750:	f8c8 1000 	streq.w	r1, [r8]
 8008754:	5162      	str	r2, [r4, r5]
 8008756:	604b      	str	r3, [r1, #4]
 8008758:	4630      	mov	r0, r6
 800875a:	f000 f82f 	bl	80087bc <__malloc_unlock>
 800875e:	f104 000b 	add.w	r0, r4, #11
 8008762:	1d23      	adds	r3, r4, #4
 8008764:	f020 0007 	bic.w	r0, r0, #7
 8008768:	1ac2      	subs	r2, r0, r3
 800876a:	bf1c      	itt	ne
 800876c:	1a1b      	subne	r3, r3, r0
 800876e:	50a3      	strne	r3, [r4, r2]
 8008770:	e7af      	b.n	80086d2 <_malloc_r+0x22>
 8008772:	6862      	ldr	r2, [r4, #4]
 8008774:	42a3      	cmp	r3, r4
 8008776:	bf0c      	ite	eq
 8008778:	f8c8 2000 	streq.w	r2, [r8]
 800877c:	605a      	strne	r2, [r3, #4]
 800877e:	e7eb      	b.n	8008758 <_malloc_r+0xa8>
 8008780:	4623      	mov	r3, r4
 8008782:	6864      	ldr	r4, [r4, #4]
 8008784:	e7ae      	b.n	80086e4 <_malloc_r+0x34>
 8008786:	463c      	mov	r4, r7
 8008788:	687f      	ldr	r7, [r7, #4]
 800878a:	e7b6      	b.n	80086fa <_malloc_r+0x4a>
 800878c:	461a      	mov	r2, r3
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	42a3      	cmp	r3, r4
 8008792:	d1fb      	bne.n	800878c <_malloc_r+0xdc>
 8008794:	2300      	movs	r3, #0
 8008796:	6053      	str	r3, [r2, #4]
 8008798:	e7de      	b.n	8008758 <_malloc_r+0xa8>
 800879a:	230c      	movs	r3, #12
 800879c:	4630      	mov	r0, r6
 800879e:	6033      	str	r3, [r6, #0]
 80087a0:	f000 f80c 	bl	80087bc <__malloc_unlock>
 80087a4:	e794      	b.n	80086d0 <_malloc_r+0x20>
 80087a6:	6005      	str	r5, [r0, #0]
 80087a8:	e7d6      	b.n	8008758 <_malloc_r+0xa8>
 80087aa:	bf00      	nop
 80087ac:	20004100 	.word	0x20004100

080087b0 <__malloc_lock>:
 80087b0:	4801      	ldr	r0, [pc, #4]	@ (80087b8 <__malloc_lock+0x8>)
 80087b2:	f7ff bedc 	b.w	800856e <__retarget_lock_acquire_recursive>
 80087b6:	bf00      	nop
 80087b8:	200040f8 	.word	0x200040f8

080087bc <__malloc_unlock>:
 80087bc:	4801      	ldr	r0, [pc, #4]	@ (80087c4 <__malloc_unlock+0x8>)
 80087be:	f7ff bed7 	b.w	8008570 <__retarget_lock_release_recursive>
 80087c2:	bf00      	nop
 80087c4:	200040f8 	.word	0x200040f8

080087c8 <__ssputs_r>:
 80087c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087cc:	461f      	mov	r7, r3
 80087ce:	688e      	ldr	r6, [r1, #8]
 80087d0:	4682      	mov	sl, r0
 80087d2:	42be      	cmp	r6, r7
 80087d4:	460c      	mov	r4, r1
 80087d6:	4690      	mov	r8, r2
 80087d8:	680b      	ldr	r3, [r1, #0]
 80087da:	d82d      	bhi.n	8008838 <__ssputs_r+0x70>
 80087dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80087e0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80087e4:	d026      	beq.n	8008834 <__ssputs_r+0x6c>
 80087e6:	6965      	ldr	r5, [r4, #20]
 80087e8:	6909      	ldr	r1, [r1, #16]
 80087ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80087ee:	eba3 0901 	sub.w	r9, r3, r1
 80087f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80087f6:	1c7b      	adds	r3, r7, #1
 80087f8:	444b      	add	r3, r9
 80087fa:	106d      	asrs	r5, r5, #1
 80087fc:	429d      	cmp	r5, r3
 80087fe:	bf38      	it	cc
 8008800:	461d      	movcc	r5, r3
 8008802:	0553      	lsls	r3, r2, #21
 8008804:	d527      	bpl.n	8008856 <__ssputs_r+0x8e>
 8008806:	4629      	mov	r1, r5
 8008808:	f7ff ff52 	bl	80086b0 <_malloc_r>
 800880c:	4606      	mov	r6, r0
 800880e:	b360      	cbz	r0, 800886a <__ssputs_r+0xa2>
 8008810:	464a      	mov	r2, r9
 8008812:	6921      	ldr	r1, [r4, #16]
 8008814:	f7ff fead 	bl	8008572 <memcpy>
 8008818:	89a3      	ldrh	r3, [r4, #12]
 800881a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800881e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008822:	81a3      	strh	r3, [r4, #12]
 8008824:	6126      	str	r6, [r4, #16]
 8008826:	444e      	add	r6, r9
 8008828:	6026      	str	r6, [r4, #0]
 800882a:	463e      	mov	r6, r7
 800882c:	6165      	str	r5, [r4, #20]
 800882e:	eba5 0509 	sub.w	r5, r5, r9
 8008832:	60a5      	str	r5, [r4, #8]
 8008834:	42be      	cmp	r6, r7
 8008836:	d900      	bls.n	800883a <__ssputs_r+0x72>
 8008838:	463e      	mov	r6, r7
 800883a:	4632      	mov	r2, r6
 800883c:	4641      	mov	r1, r8
 800883e:	6820      	ldr	r0, [r4, #0]
 8008840:	f000 fb64 	bl	8008f0c <memmove>
 8008844:	2000      	movs	r0, #0
 8008846:	68a3      	ldr	r3, [r4, #8]
 8008848:	1b9b      	subs	r3, r3, r6
 800884a:	60a3      	str	r3, [r4, #8]
 800884c:	6823      	ldr	r3, [r4, #0]
 800884e:	4433      	add	r3, r6
 8008850:	6023      	str	r3, [r4, #0]
 8008852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008856:	462a      	mov	r2, r5
 8008858:	f000 fb97 	bl	8008f8a <_realloc_r>
 800885c:	4606      	mov	r6, r0
 800885e:	2800      	cmp	r0, #0
 8008860:	d1e0      	bne.n	8008824 <__ssputs_r+0x5c>
 8008862:	4650      	mov	r0, sl
 8008864:	6921      	ldr	r1, [r4, #16]
 8008866:	f7ff feb1 	bl	80085cc <_free_r>
 800886a:	230c      	movs	r3, #12
 800886c:	f8ca 3000 	str.w	r3, [sl]
 8008870:	89a3      	ldrh	r3, [r4, #12]
 8008872:	f04f 30ff 	mov.w	r0, #4294967295
 8008876:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800887a:	81a3      	strh	r3, [r4, #12]
 800887c:	e7e9      	b.n	8008852 <__ssputs_r+0x8a>
	...

08008880 <_svfiprintf_r>:
 8008880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008884:	4698      	mov	r8, r3
 8008886:	898b      	ldrh	r3, [r1, #12]
 8008888:	4607      	mov	r7, r0
 800888a:	061b      	lsls	r3, r3, #24
 800888c:	460d      	mov	r5, r1
 800888e:	4614      	mov	r4, r2
 8008890:	b09d      	sub	sp, #116	@ 0x74
 8008892:	d510      	bpl.n	80088b6 <_svfiprintf_r+0x36>
 8008894:	690b      	ldr	r3, [r1, #16]
 8008896:	b973      	cbnz	r3, 80088b6 <_svfiprintf_r+0x36>
 8008898:	2140      	movs	r1, #64	@ 0x40
 800889a:	f7ff ff09 	bl	80086b0 <_malloc_r>
 800889e:	6028      	str	r0, [r5, #0]
 80088a0:	6128      	str	r0, [r5, #16]
 80088a2:	b930      	cbnz	r0, 80088b2 <_svfiprintf_r+0x32>
 80088a4:	230c      	movs	r3, #12
 80088a6:	603b      	str	r3, [r7, #0]
 80088a8:	f04f 30ff 	mov.w	r0, #4294967295
 80088ac:	b01d      	add	sp, #116	@ 0x74
 80088ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088b2:	2340      	movs	r3, #64	@ 0x40
 80088b4:	616b      	str	r3, [r5, #20]
 80088b6:	2300      	movs	r3, #0
 80088b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80088ba:	2320      	movs	r3, #32
 80088bc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80088c0:	2330      	movs	r3, #48	@ 0x30
 80088c2:	f04f 0901 	mov.w	r9, #1
 80088c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80088ca:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008a64 <_svfiprintf_r+0x1e4>
 80088ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80088d2:	4623      	mov	r3, r4
 80088d4:	469a      	mov	sl, r3
 80088d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088da:	b10a      	cbz	r2, 80088e0 <_svfiprintf_r+0x60>
 80088dc:	2a25      	cmp	r2, #37	@ 0x25
 80088de:	d1f9      	bne.n	80088d4 <_svfiprintf_r+0x54>
 80088e0:	ebba 0b04 	subs.w	fp, sl, r4
 80088e4:	d00b      	beq.n	80088fe <_svfiprintf_r+0x7e>
 80088e6:	465b      	mov	r3, fp
 80088e8:	4622      	mov	r2, r4
 80088ea:	4629      	mov	r1, r5
 80088ec:	4638      	mov	r0, r7
 80088ee:	f7ff ff6b 	bl	80087c8 <__ssputs_r>
 80088f2:	3001      	adds	r0, #1
 80088f4:	f000 80a7 	beq.w	8008a46 <_svfiprintf_r+0x1c6>
 80088f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80088fa:	445a      	add	r2, fp
 80088fc:	9209      	str	r2, [sp, #36]	@ 0x24
 80088fe:	f89a 3000 	ldrb.w	r3, [sl]
 8008902:	2b00      	cmp	r3, #0
 8008904:	f000 809f 	beq.w	8008a46 <_svfiprintf_r+0x1c6>
 8008908:	2300      	movs	r3, #0
 800890a:	f04f 32ff 	mov.w	r2, #4294967295
 800890e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008912:	f10a 0a01 	add.w	sl, sl, #1
 8008916:	9304      	str	r3, [sp, #16]
 8008918:	9307      	str	r3, [sp, #28]
 800891a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800891e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008920:	4654      	mov	r4, sl
 8008922:	2205      	movs	r2, #5
 8008924:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008928:	484e      	ldr	r0, [pc, #312]	@ (8008a64 <_svfiprintf_r+0x1e4>)
 800892a:	f000 fb19 	bl	8008f60 <memchr>
 800892e:	9a04      	ldr	r2, [sp, #16]
 8008930:	b9d8      	cbnz	r0, 800896a <_svfiprintf_r+0xea>
 8008932:	06d0      	lsls	r0, r2, #27
 8008934:	bf44      	itt	mi
 8008936:	2320      	movmi	r3, #32
 8008938:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800893c:	0711      	lsls	r1, r2, #28
 800893e:	bf44      	itt	mi
 8008940:	232b      	movmi	r3, #43	@ 0x2b
 8008942:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008946:	f89a 3000 	ldrb.w	r3, [sl]
 800894a:	2b2a      	cmp	r3, #42	@ 0x2a
 800894c:	d015      	beq.n	800897a <_svfiprintf_r+0xfa>
 800894e:	4654      	mov	r4, sl
 8008950:	2000      	movs	r0, #0
 8008952:	f04f 0c0a 	mov.w	ip, #10
 8008956:	9a07      	ldr	r2, [sp, #28]
 8008958:	4621      	mov	r1, r4
 800895a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800895e:	3b30      	subs	r3, #48	@ 0x30
 8008960:	2b09      	cmp	r3, #9
 8008962:	d94b      	bls.n	80089fc <_svfiprintf_r+0x17c>
 8008964:	b1b0      	cbz	r0, 8008994 <_svfiprintf_r+0x114>
 8008966:	9207      	str	r2, [sp, #28]
 8008968:	e014      	b.n	8008994 <_svfiprintf_r+0x114>
 800896a:	eba0 0308 	sub.w	r3, r0, r8
 800896e:	fa09 f303 	lsl.w	r3, r9, r3
 8008972:	4313      	orrs	r3, r2
 8008974:	46a2      	mov	sl, r4
 8008976:	9304      	str	r3, [sp, #16]
 8008978:	e7d2      	b.n	8008920 <_svfiprintf_r+0xa0>
 800897a:	9b03      	ldr	r3, [sp, #12]
 800897c:	1d19      	adds	r1, r3, #4
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	9103      	str	r1, [sp, #12]
 8008982:	2b00      	cmp	r3, #0
 8008984:	bfbb      	ittet	lt
 8008986:	425b      	neglt	r3, r3
 8008988:	f042 0202 	orrlt.w	r2, r2, #2
 800898c:	9307      	strge	r3, [sp, #28]
 800898e:	9307      	strlt	r3, [sp, #28]
 8008990:	bfb8      	it	lt
 8008992:	9204      	strlt	r2, [sp, #16]
 8008994:	7823      	ldrb	r3, [r4, #0]
 8008996:	2b2e      	cmp	r3, #46	@ 0x2e
 8008998:	d10a      	bne.n	80089b0 <_svfiprintf_r+0x130>
 800899a:	7863      	ldrb	r3, [r4, #1]
 800899c:	2b2a      	cmp	r3, #42	@ 0x2a
 800899e:	d132      	bne.n	8008a06 <_svfiprintf_r+0x186>
 80089a0:	9b03      	ldr	r3, [sp, #12]
 80089a2:	3402      	adds	r4, #2
 80089a4:	1d1a      	adds	r2, r3, #4
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	9203      	str	r2, [sp, #12]
 80089aa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80089ae:	9305      	str	r3, [sp, #20]
 80089b0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008a68 <_svfiprintf_r+0x1e8>
 80089b4:	2203      	movs	r2, #3
 80089b6:	4650      	mov	r0, sl
 80089b8:	7821      	ldrb	r1, [r4, #0]
 80089ba:	f000 fad1 	bl	8008f60 <memchr>
 80089be:	b138      	cbz	r0, 80089d0 <_svfiprintf_r+0x150>
 80089c0:	2240      	movs	r2, #64	@ 0x40
 80089c2:	9b04      	ldr	r3, [sp, #16]
 80089c4:	eba0 000a 	sub.w	r0, r0, sl
 80089c8:	4082      	lsls	r2, r0
 80089ca:	4313      	orrs	r3, r2
 80089cc:	3401      	adds	r4, #1
 80089ce:	9304      	str	r3, [sp, #16]
 80089d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089d4:	2206      	movs	r2, #6
 80089d6:	4825      	ldr	r0, [pc, #148]	@ (8008a6c <_svfiprintf_r+0x1ec>)
 80089d8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80089dc:	f000 fac0 	bl	8008f60 <memchr>
 80089e0:	2800      	cmp	r0, #0
 80089e2:	d036      	beq.n	8008a52 <_svfiprintf_r+0x1d2>
 80089e4:	4b22      	ldr	r3, [pc, #136]	@ (8008a70 <_svfiprintf_r+0x1f0>)
 80089e6:	bb1b      	cbnz	r3, 8008a30 <_svfiprintf_r+0x1b0>
 80089e8:	9b03      	ldr	r3, [sp, #12]
 80089ea:	3307      	adds	r3, #7
 80089ec:	f023 0307 	bic.w	r3, r3, #7
 80089f0:	3308      	adds	r3, #8
 80089f2:	9303      	str	r3, [sp, #12]
 80089f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089f6:	4433      	add	r3, r6
 80089f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80089fa:	e76a      	b.n	80088d2 <_svfiprintf_r+0x52>
 80089fc:	460c      	mov	r4, r1
 80089fe:	2001      	movs	r0, #1
 8008a00:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a04:	e7a8      	b.n	8008958 <_svfiprintf_r+0xd8>
 8008a06:	2300      	movs	r3, #0
 8008a08:	f04f 0c0a 	mov.w	ip, #10
 8008a0c:	4619      	mov	r1, r3
 8008a0e:	3401      	adds	r4, #1
 8008a10:	9305      	str	r3, [sp, #20]
 8008a12:	4620      	mov	r0, r4
 8008a14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a18:	3a30      	subs	r2, #48	@ 0x30
 8008a1a:	2a09      	cmp	r2, #9
 8008a1c:	d903      	bls.n	8008a26 <_svfiprintf_r+0x1a6>
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d0c6      	beq.n	80089b0 <_svfiprintf_r+0x130>
 8008a22:	9105      	str	r1, [sp, #20]
 8008a24:	e7c4      	b.n	80089b0 <_svfiprintf_r+0x130>
 8008a26:	4604      	mov	r4, r0
 8008a28:	2301      	movs	r3, #1
 8008a2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a2e:	e7f0      	b.n	8008a12 <_svfiprintf_r+0x192>
 8008a30:	ab03      	add	r3, sp, #12
 8008a32:	9300      	str	r3, [sp, #0]
 8008a34:	462a      	mov	r2, r5
 8008a36:	4638      	mov	r0, r7
 8008a38:	4b0e      	ldr	r3, [pc, #56]	@ (8008a74 <_svfiprintf_r+0x1f4>)
 8008a3a:	a904      	add	r1, sp, #16
 8008a3c:	f3af 8000 	nop.w
 8008a40:	1c42      	adds	r2, r0, #1
 8008a42:	4606      	mov	r6, r0
 8008a44:	d1d6      	bne.n	80089f4 <_svfiprintf_r+0x174>
 8008a46:	89ab      	ldrh	r3, [r5, #12]
 8008a48:	065b      	lsls	r3, r3, #25
 8008a4a:	f53f af2d 	bmi.w	80088a8 <_svfiprintf_r+0x28>
 8008a4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008a50:	e72c      	b.n	80088ac <_svfiprintf_r+0x2c>
 8008a52:	ab03      	add	r3, sp, #12
 8008a54:	9300      	str	r3, [sp, #0]
 8008a56:	462a      	mov	r2, r5
 8008a58:	4638      	mov	r0, r7
 8008a5a:	4b06      	ldr	r3, [pc, #24]	@ (8008a74 <_svfiprintf_r+0x1f4>)
 8008a5c:	a904      	add	r1, sp, #16
 8008a5e:	f000 f87d 	bl	8008b5c <_printf_i>
 8008a62:	e7ed      	b.n	8008a40 <_svfiprintf_r+0x1c0>
 8008a64:	0800aefd 	.word	0x0800aefd
 8008a68:	0800af03 	.word	0x0800af03
 8008a6c:	0800af07 	.word	0x0800af07
 8008a70:	00000000 	.word	0x00000000
 8008a74:	080087c9 	.word	0x080087c9

08008a78 <_printf_common>:
 8008a78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a7c:	4616      	mov	r6, r2
 8008a7e:	4698      	mov	r8, r3
 8008a80:	688a      	ldr	r2, [r1, #8]
 8008a82:	690b      	ldr	r3, [r1, #16]
 8008a84:	4607      	mov	r7, r0
 8008a86:	4293      	cmp	r3, r2
 8008a88:	bfb8      	it	lt
 8008a8a:	4613      	movlt	r3, r2
 8008a8c:	6033      	str	r3, [r6, #0]
 8008a8e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008a92:	460c      	mov	r4, r1
 8008a94:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008a98:	b10a      	cbz	r2, 8008a9e <_printf_common+0x26>
 8008a9a:	3301      	adds	r3, #1
 8008a9c:	6033      	str	r3, [r6, #0]
 8008a9e:	6823      	ldr	r3, [r4, #0]
 8008aa0:	0699      	lsls	r1, r3, #26
 8008aa2:	bf42      	ittt	mi
 8008aa4:	6833      	ldrmi	r3, [r6, #0]
 8008aa6:	3302      	addmi	r3, #2
 8008aa8:	6033      	strmi	r3, [r6, #0]
 8008aaa:	6825      	ldr	r5, [r4, #0]
 8008aac:	f015 0506 	ands.w	r5, r5, #6
 8008ab0:	d106      	bne.n	8008ac0 <_printf_common+0x48>
 8008ab2:	f104 0a19 	add.w	sl, r4, #25
 8008ab6:	68e3      	ldr	r3, [r4, #12]
 8008ab8:	6832      	ldr	r2, [r6, #0]
 8008aba:	1a9b      	subs	r3, r3, r2
 8008abc:	42ab      	cmp	r3, r5
 8008abe:	dc2b      	bgt.n	8008b18 <_printf_common+0xa0>
 8008ac0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008ac4:	6822      	ldr	r2, [r4, #0]
 8008ac6:	3b00      	subs	r3, #0
 8008ac8:	bf18      	it	ne
 8008aca:	2301      	movne	r3, #1
 8008acc:	0692      	lsls	r2, r2, #26
 8008ace:	d430      	bmi.n	8008b32 <_printf_common+0xba>
 8008ad0:	4641      	mov	r1, r8
 8008ad2:	4638      	mov	r0, r7
 8008ad4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008ad8:	47c8      	blx	r9
 8008ada:	3001      	adds	r0, #1
 8008adc:	d023      	beq.n	8008b26 <_printf_common+0xae>
 8008ade:	6823      	ldr	r3, [r4, #0]
 8008ae0:	6922      	ldr	r2, [r4, #16]
 8008ae2:	f003 0306 	and.w	r3, r3, #6
 8008ae6:	2b04      	cmp	r3, #4
 8008ae8:	bf14      	ite	ne
 8008aea:	2500      	movne	r5, #0
 8008aec:	6833      	ldreq	r3, [r6, #0]
 8008aee:	f04f 0600 	mov.w	r6, #0
 8008af2:	bf08      	it	eq
 8008af4:	68e5      	ldreq	r5, [r4, #12]
 8008af6:	f104 041a 	add.w	r4, r4, #26
 8008afa:	bf08      	it	eq
 8008afc:	1aed      	subeq	r5, r5, r3
 8008afe:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008b02:	bf08      	it	eq
 8008b04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	bfc4      	itt	gt
 8008b0c:	1a9b      	subgt	r3, r3, r2
 8008b0e:	18ed      	addgt	r5, r5, r3
 8008b10:	42b5      	cmp	r5, r6
 8008b12:	d11a      	bne.n	8008b4a <_printf_common+0xd2>
 8008b14:	2000      	movs	r0, #0
 8008b16:	e008      	b.n	8008b2a <_printf_common+0xb2>
 8008b18:	2301      	movs	r3, #1
 8008b1a:	4652      	mov	r2, sl
 8008b1c:	4641      	mov	r1, r8
 8008b1e:	4638      	mov	r0, r7
 8008b20:	47c8      	blx	r9
 8008b22:	3001      	adds	r0, #1
 8008b24:	d103      	bne.n	8008b2e <_printf_common+0xb6>
 8008b26:	f04f 30ff 	mov.w	r0, #4294967295
 8008b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b2e:	3501      	adds	r5, #1
 8008b30:	e7c1      	b.n	8008ab6 <_printf_common+0x3e>
 8008b32:	2030      	movs	r0, #48	@ 0x30
 8008b34:	18e1      	adds	r1, r4, r3
 8008b36:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008b3a:	1c5a      	adds	r2, r3, #1
 8008b3c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008b40:	4422      	add	r2, r4
 8008b42:	3302      	adds	r3, #2
 8008b44:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008b48:	e7c2      	b.n	8008ad0 <_printf_common+0x58>
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	4622      	mov	r2, r4
 8008b4e:	4641      	mov	r1, r8
 8008b50:	4638      	mov	r0, r7
 8008b52:	47c8      	blx	r9
 8008b54:	3001      	adds	r0, #1
 8008b56:	d0e6      	beq.n	8008b26 <_printf_common+0xae>
 8008b58:	3601      	adds	r6, #1
 8008b5a:	e7d9      	b.n	8008b10 <_printf_common+0x98>

08008b5c <_printf_i>:
 8008b5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b60:	7e0f      	ldrb	r7, [r1, #24]
 8008b62:	4691      	mov	r9, r2
 8008b64:	2f78      	cmp	r7, #120	@ 0x78
 8008b66:	4680      	mov	r8, r0
 8008b68:	460c      	mov	r4, r1
 8008b6a:	469a      	mov	sl, r3
 8008b6c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008b6e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008b72:	d807      	bhi.n	8008b84 <_printf_i+0x28>
 8008b74:	2f62      	cmp	r7, #98	@ 0x62
 8008b76:	d80a      	bhi.n	8008b8e <_printf_i+0x32>
 8008b78:	2f00      	cmp	r7, #0
 8008b7a:	f000 80d1 	beq.w	8008d20 <_printf_i+0x1c4>
 8008b7e:	2f58      	cmp	r7, #88	@ 0x58
 8008b80:	f000 80b8 	beq.w	8008cf4 <_printf_i+0x198>
 8008b84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008b88:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008b8c:	e03a      	b.n	8008c04 <_printf_i+0xa8>
 8008b8e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008b92:	2b15      	cmp	r3, #21
 8008b94:	d8f6      	bhi.n	8008b84 <_printf_i+0x28>
 8008b96:	a101      	add	r1, pc, #4	@ (adr r1, 8008b9c <_printf_i+0x40>)
 8008b98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b9c:	08008bf5 	.word	0x08008bf5
 8008ba0:	08008c09 	.word	0x08008c09
 8008ba4:	08008b85 	.word	0x08008b85
 8008ba8:	08008b85 	.word	0x08008b85
 8008bac:	08008b85 	.word	0x08008b85
 8008bb0:	08008b85 	.word	0x08008b85
 8008bb4:	08008c09 	.word	0x08008c09
 8008bb8:	08008b85 	.word	0x08008b85
 8008bbc:	08008b85 	.word	0x08008b85
 8008bc0:	08008b85 	.word	0x08008b85
 8008bc4:	08008b85 	.word	0x08008b85
 8008bc8:	08008d07 	.word	0x08008d07
 8008bcc:	08008c33 	.word	0x08008c33
 8008bd0:	08008cc1 	.word	0x08008cc1
 8008bd4:	08008b85 	.word	0x08008b85
 8008bd8:	08008b85 	.word	0x08008b85
 8008bdc:	08008d29 	.word	0x08008d29
 8008be0:	08008b85 	.word	0x08008b85
 8008be4:	08008c33 	.word	0x08008c33
 8008be8:	08008b85 	.word	0x08008b85
 8008bec:	08008b85 	.word	0x08008b85
 8008bf0:	08008cc9 	.word	0x08008cc9
 8008bf4:	6833      	ldr	r3, [r6, #0]
 8008bf6:	1d1a      	adds	r2, r3, #4
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	6032      	str	r2, [r6, #0]
 8008bfc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008c00:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008c04:	2301      	movs	r3, #1
 8008c06:	e09c      	b.n	8008d42 <_printf_i+0x1e6>
 8008c08:	6833      	ldr	r3, [r6, #0]
 8008c0a:	6820      	ldr	r0, [r4, #0]
 8008c0c:	1d19      	adds	r1, r3, #4
 8008c0e:	6031      	str	r1, [r6, #0]
 8008c10:	0606      	lsls	r6, r0, #24
 8008c12:	d501      	bpl.n	8008c18 <_printf_i+0xbc>
 8008c14:	681d      	ldr	r5, [r3, #0]
 8008c16:	e003      	b.n	8008c20 <_printf_i+0xc4>
 8008c18:	0645      	lsls	r5, r0, #25
 8008c1a:	d5fb      	bpl.n	8008c14 <_printf_i+0xb8>
 8008c1c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008c20:	2d00      	cmp	r5, #0
 8008c22:	da03      	bge.n	8008c2c <_printf_i+0xd0>
 8008c24:	232d      	movs	r3, #45	@ 0x2d
 8008c26:	426d      	negs	r5, r5
 8008c28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c2c:	230a      	movs	r3, #10
 8008c2e:	4858      	ldr	r0, [pc, #352]	@ (8008d90 <_printf_i+0x234>)
 8008c30:	e011      	b.n	8008c56 <_printf_i+0xfa>
 8008c32:	6821      	ldr	r1, [r4, #0]
 8008c34:	6833      	ldr	r3, [r6, #0]
 8008c36:	0608      	lsls	r0, r1, #24
 8008c38:	f853 5b04 	ldr.w	r5, [r3], #4
 8008c3c:	d402      	bmi.n	8008c44 <_printf_i+0xe8>
 8008c3e:	0649      	lsls	r1, r1, #25
 8008c40:	bf48      	it	mi
 8008c42:	b2ad      	uxthmi	r5, r5
 8008c44:	2f6f      	cmp	r7, #111	@ 0x6f
 8008c46:	6033      	str	r3, [r6, #0]
 8008c48:	bf14      	ite	ne
 8008c4a:	230a      	movne	r3, #10
 8008c4c:	2308      	moveq	r3, #8
 8008c4e:	4850      	ldr	r0, [pc, #320]	@ (8008d90 <_printf_i+0x234>)
 8008c50:	2100      	movs	r1, #0
 8008c52:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008c56:	6866      	ldr	r6, [r4, #4]
 8008c58:	2e00      	cmp	r6, #0
 8008c5a:	60a6      	str	r6, [r4, #8]
 8008c5c:	db05      	blt.n	8008c6a <_printf_i+0x10e>
 8008c5e:	6821      	ldr	r1, [r4, #0]
 8008c60:	432e      	orrs	r6, r5
 8008c62:	f021 0104 	bic.w	r1, r1, #4
 8008c66:	6021      	str	r1, [r4, #0]
 8008c68:	d04b      	beq.n	8008d02 <_printf_i+0x1a6>
 8008c6a:	4616      	mov	r6, r2
 8008c6c:	fbb5 f1f3 	udiv	r1, r5, r3
 8008c70:	fb03 5711 	mls	r7, r3, r1, r5
 8008c74:	5dc7      	ldrb	r7, [r0, r7]
 8008c76:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008c7a:	462f      	mov	r7, r5
 8008c7c:	42bb      	cmp	r3, r7
 8008c7e:	460d      	mov	r5, r1
 8008c80:	d9f4      	bls.n	8008c6c <_printf_i+0x110>
 8008c82:	2b08      	cmp	r3, #8
 8008c84:	d10b      	bne.n	8008c9e <_printf_i+0x142>
 8008c86:	6823      	ldr	r3, [r4, #0]
 8008c88:	07df      	lsls	r7, r3, #31
 8008c8a:	d508      	bpl.n	8008c9e <_printf_i+0x142>
 8008c8c:	6923      	ldr	r3, [r4, #16]
 8008c8e:	6861      	ldr	r1, [r4, #4]
 8008c90:	4299      	cmp	r1, r3
 8008c92:	bfde      	ittt	le
 8008c94:	2330      	movle	r3, #48	@ 0x30
 8008c96:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008c9a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008c9e:	1b92      	subs	r2, r2, r6
 8008ca0:	6122      	str	r2, [r4, #16]
 8008ca2:	464b      	mov	r3, r9
 8008ca4:	4621      	mov	r1, r4
 8008ca6:	4640      	mov	r0, r8
 8008ca8:	f8cd a000 	str.w	sl, [sp]
 8008cac:	aa03      	add	r2, sp, #12
 8008cae:	f7ff fee3 	bl	8008a78 <_printf_common>
 8008cb2:	3001      	adds	r0, #1
 8008cb4:	d14a      	bne.n	8008d4c <_printf_i+0x1f0>
 8008cb6:	f04f 30ff 	mov.w	r0, #4294967295
 8008cba:	b004      	add	sp, #16
 8008cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cc0:	6823      	ldr	r3, [r4, #0]
 8008cc2:	f043 0320 	orr.w	r3, r3, #32
 8008cc6:	6023      	str	r3, [r4, #0]
 8008cc8:	2778      	movs	r7, #120	@ 0x78
 8008cca:	4832      	ldr	r0, [pc, #200]	@ (8008d94 <_printf_i+0x238>)
 8008ccc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008cd0:	6823      	ldr	r3, [r4, #0]
 8008cd2:	6831      	ldr	r1, [r6, #0]
 8008cd4:	061f      	lsls	r7, r3, #24
 8008cd6:	f851 5b04 	ldr.w	r5, [r1], #4
 8008cda:	d402      	bmi.n	8008ce2 <_printf_i+0x186>
 8008cdc:	065f      	lsls	r7, r3, #25
 8008cde:	bf48      	it	mi
 8008ce0:	b2ad      	uxthmi	r5, r5
 8008ce2:	6031      	str	r1, [r6, #0]
 8008ce4:	07d9      	lsls	r1, r3, #31
 8008ce6:	bf44      	itt	mi
 8008ce8:	f043 0320 	orrmi.w	r3, r3, #32
 8008cec:	6023      	strmi	r3, [r4, #0]
 8008cee:	b11d      	cbz	r5, 8008cf8 <_printf_i+0x19c>
 8008cf0:	2310      	movs	r3, #16
 8008cf2:	e7ad      	b.n	8008c50 <_printf_i+0xf4>
 8008cf4:	4826      	ldr	r0, [pc, #152]	@ (8008d90 <_printf_i+0x234>)
 8008cf6:	e7e9      	b.n	8008ccc <_printf_i+0x170>
 8008cf8:	6823      	ldr	r3, [r4, #0]
 8008cfa:	f023 0320 	bic.w	r3, r3, #32
 8008cfe:	6023      	str	r3, [r4, #0]
 8008d00:	e7f6      	b.n	8008cf0 <_printf_i+0x194>
 8008d02:	4616      	mov	r6, r2
 8008d04:	e7bd      	b.n	8008c82 <_printf_i+0x126>
 8008d06:	6833      	ldr	r3, [r6, #0]
 8008d08:	6825      	ldr	r5, [r4, #0]
 8008d0a:	1d18      	adds	r0, r3, #4
 8008d0c:	6961      	ldr	r1, [r4, #20]
 8008d0e:	6030      	str	r0, [r6, #0]
 8008d10:	062e      	lsls	r6, r5, #24
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	d501      	bpl.n	8008d1a <_printf_i+0x1be>
 8008d16:	6019      	str	r1, [r3, #0]
 8008d18:	e002      	b.n	8008d20 <_printf_i+0x1c4>
 8008d1a:	0668      	lsls	r0, r5, #25
 8008d1c:	d5fb      	bpl.n	8008d16 <_printf_i+0x1ba>
 8008d1e:	8019      	strh	r1, [r3, #0]
 8008d20:	2300      	movs	r3, #0
 8008d22:	4616      	mov	r6, r2
 8008d24:	6123      	str	r3, [r4, #16]
 8008d26:	e7bc      	b.n	8008ca2 <_printf_i+0x146>
 8008d28:	6833      	ldr	r3, [r6, #0]
 8008d2a:	2100      	movs	r1, #0
 8008d2c:	1d1a      	adds	r2, r3, #4
 8008d2e:	6032      	str	r2, [r6, #0]
 8008d30:	681e      	ldr	r6, [r3, #0]
 8008d32:	6862      	ldr	r2, [r4, #4]
 8008d34:	4630      	mov	r0, r6
 8008d36:	f000 f913 	bl	8008f60 <memchr>
 8008d3a:	b108      	cbz	r0, 8008d40 <_printf_i+0x1e4>
 8008d3c:	1b80      	subs	r0, r0, r6
 8008d3e:	6060      	str	r0, [r4, #4]
 8008d40:	6863      	ldr	r3, [r4, #4]
 8008d42:	6123      	str	r3, [r4, #16]
 8008d44:	2300      	movs	r3, #0
 8008d46:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d4a:	e7aa      	b.n	8008ca2 <_printf_i+0x146>
 8008d4c:	4632      	mov	r2, r6
 8008d4e:	4649      	mov	r1, r9
 8008d50:	4640      	mov	r0, r8
 8008d52:	6923      	ldr	r3, [r4, #16]
 8008d54:	47d0      	blx	sl
 8008d56:	3001      	adds	r0, #1
 8008d58:	d0ad      	beq.n	8008cb6 <_printf_i+0x15a>
 8008d5a:	6823      	ldr	r3, [r4, #0]
 8008d5c:	079b      	lsls	r3, r3, #30
 8008d5e:	d413      	bmi.n	8008d88 <_printf_i+0x22c>
 8008d60:	68e0      	ldr	r0, [r4, #12]
 8008d62:	9b03      	ldr	r3, [sp, #12]
 8008d64:	4298      	cmp	r0, r3
 8008d66:	bfb8      	it	lt
 8008d68:	4618      	movlt	r0, r3
 8008d6a:	e7a6      	b.n	8008cba <_printf_i+0x15e>
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	4632      	mov	r2, r6
 8008d70:	4649      	mov	r1, r9
 8008d72:	4640      	mov	r0, r8
 8008d74:	47d0      	blx	sl
 8008d76:	3001      	adds	r0, #1
 8008d78:	d09d      	beq.n	8008cb6 <_printf_i+0x15a>
 8008d7a:	3501      	adds	r5, #1
 8008d7c:	68e3      	ldr	r3, [r4, #12]
 8008d7e:	9903      	ldr	r1, [sp, #12]
 8008d80:	1a5b      	subs	r3, r3, r1
 8008d82:	42ab      	cmp	r3, r5
 8008d84:	dcf2      	bgt.n	8008d6c <_printf_i+0x210>
 8008d86:	e7eb      	b.n	8008d60 <_printf_i+0x204>
 8008d88:	2500      	movs	r5, #0
 8008d8a:	f104 0619 	add.w	r6, r4, #25
 8008d8e:	e7f5      	b.n	8008d7c <_printf_i+0x220>
 8008d90:	0800af0e 	.word	0x0800af0e
 8008d94:	0800af1f 	.word	0x0800af1f

08008d98 <__sflush_r>:
 8008d98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d9e:	0716      	lsls	r6, r2, #28
 8008da0:	4605      	mov	r5, r0
 8008da2:	460c      	mov	r4, r1
 8008da4:	d454      	bmi.n	8008e50 <__sflush_r+0xb8>
 8008da6:	684b      	ldr	r3, [r1, #4]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	dc02      	bgt.n	8008db2 <__sflush_r+0x1a>
 8008dac:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	dd48      	ble.n	8008e44 <__sflush_r+0xac>
 8008db2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008db4:	2e00      	cmp	r6, #0
 8008db6:	d045      	beq.n	8008e44 <__sflush_r+0xac>
 8008db8:	2300      	movs	r3, #0
 8008dba:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008dbe:	682f      	ldr	r7, [r5, #0]
 8008dc0:	6a21      	ldr	r1, [r4, #32]
 8008dc2:	602b      	str	r3, [r5, #0]
 8008dc4:	d030      	beq.n	8008e28 <__sflush_r+0x90>
 8008dc6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008dc8:	89a3      	ldrh	r3, [r4, #12]
 8008dca:	0759      	lsls	r1, r3, #29
 8008dcc:	d505      	bpl.n	8008dda <__sflush_r+0x42>
 8008dce:	6863      	ldr	r3, [r4, #4]
 8008dd0:	1ad2      	subs	r2, r2, r3
 8008dd2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008dd4:	b10b      	cbz	r3, 8008dda <__sflush_r+0x42>
 8008dd6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008dd8:	1ad2      	subs	r2, r2, r3
 8008dda:	2300      	movs	r3, #0
 8008ddc:	4628      	mov	r0, r5
 8008dde:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008de0:	6a21      	ldr	r1, [r4, #32]
 8008de2:	47b0      	blx	r6
 8008de4:	1c43      	adds	r3, r0, #1
 8008de6:	89a3      	ldrh	r3, [r4, #12]
 8008de8:	d106      	bne.n	8008df8 <__sflush_r+0x60>
 8008dea:	6829      	ldr	r1, [r5, #0]
 8008dec:	291d      	cmp	r1, #29
 8008dee:	d82b      	bhi.n	8008e48 <__sflush_r+0xb0>
 8008df0:	4a28      	ldr	r2, [pc, #160]	@ (8008e94 <__sflush_r+0xfc>)
 8008df2:	40ca      	lsrs	r2, r1
 8008df4:	07d6      	lsls	r6, r2, #31
 8008df6:	d527      	bpl.n	8008e48 <__sflush_r+0xb0>
 8008df8:	2200      	movs	r2, #0
 8008dfa:	6062      	str	r2, [r4, #4]
 8008dfc:	6922      	ldr	r2, [r4, #16]
 8008dfe:	04d9      	lsls	r1, r3, #19
 8008e00:	6022      	str	r2, [r4, #0]
 8008e02:	d504      	bpl.n	8008e0e <__sflush_r+0x76>
 8008e04:	1c42      	adds	r2, r0, #1
 8008e06:	d101      	bne.n	8008e0c <__sflush_r+0x74>
 8008e08:	682b      	ldr	r3, [r5, #0]
 8008e0a:	b903      	cbnz	r3, 8008e0e <__sflush_r+0x76>
 8008e0c:	6560      	str	r0, [r4, #84]	@ 0x54
 8008e0e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008e10:	602f      	str	r7, [r5, #0]
 8008e12:	b1b9      	cbz	r1, 8008e44 <__sflush_r+0xac>
 8008e14:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008e18:	4299      	cmp	r1, r3
 8008e1a:	d002      	beq.n	8008e22 <__sflush_r+0x8a>
 8008e1c:	4628      	mov	r0, r5
 8008e1e:	f7ff fbd5 	bl	80085cc <_free_r>
 8008e22:	2300      	movs	r3, #0
 8008e24:	6363      	str	r3, [r4, #52]	@ 0x34
 8008e26:	e00d      	b.n	8008e44 <__sflush_r+0xac>
 8008e28:	2301      	movs	r3, #1
 8008e2a:	4628      	mov	r0, r5
 8008e2c:	47b0      	blx	r6
 8008e2e:	4602      	mov	r2, r0
 8008e30:	1c50      	adds	r0, r2, #1
 8008e32:	d1c9      	bne.n	8008dc8 <__sflush_r+0x30>
 8008e34:	682b      	ldr	r3, [r5, #0]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d0c6      	beq.n	8008dc8 <__sflush_r+0x30>
 8008e3a:	2b1d      	cmp	r3, #29
 8008e3c:	d001      	beq.n	8008e42 <__sflush_r+0xaa>
 8008e3e:	2b16      	cmp	r3, #22
 8008e40:	d11d      	bne.n	8008e7e <__sflush_r+0xe6>
 8008e42:	602f      	str	r7, [r5, #0]
 8008e44:	2000      	movs	r0, #0
 8008e46:	e021      	b.n	8008e8c <__sflush_r+0xf4>
 8008e48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e4c:	b21b      	sxth	r3, r3
 8008e4e:	e01a      	b.n	8008e86 <__sflush_r+0xee>
 8008e50:	690f      	ldr	r7, [r1, #16]
 8008e52:	2f00      	cmp	r7, #0
 8008e54:	d0f6      	beq.n	8008e44 <__sflush_r+0xac>
 8008e56:	0793      	lsls	r3, r2, #30
 8008e58:	bf18      	it	ne
 8008e5a:	2300      	movne	r3, #0
 8008e5c:	680e      	ldr	r6, [r1, #0]
 8008e5e:	bf08      	it	eq
 8008e60:	694b      	ldreq	r3, [r1, #20]
 8008e62:	1bf6      	subs	r6, r6, r7
 8008e64:	600f      	str	r7, [r1, #0]
 8008e66:	608b      	str	r3, [r1, #8]
 8008e68:	2e00      	cmp	r6, #0
 8008e6a:	ddeb      	ble.n	8008e44 <__sflush_r+0xac>
 8008e6c:	4633      	mov	r3, r6
 8008e6e:	463a      	mov	r2, r7
 8008e70:	4628      	mov	r0, r5
 8008e72:	6a21      	ldr	r1, [r4, #32]
 8008e74:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008e78:	47e0      	blx	ip
 8008e7a:	2800      	cmp	r0, #0
 8008e7c:	dc07      	bgt.n	8008e8e <__sflush_r+0xf6>
 8008e7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e86:	f04f 30ff 	mov.w	r0, #4294967295
 8008e8a:	81a3      	strh	r3, [r4, #12]
 8008e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e8e:	4407      	add	r7, r0
 8008e90:	1a36      	subs	r6, r6, r0
 8008e92:	e7e9      	b.n	8008e68 <__sflush_r+0xd0>
 8008e94:	20400001 	.word	0x20400001

08008e98 <_fflush_r>:
 8008e98:	b538      	push	{r3, r4, r5, lr}
 8008e9a:	690b      	ldr	r3, [r1, #16]
 8008e9c:	4605      	mov	r5, r0
 8008e9e:	460c      	mov	r4, r1
 8008ea0:	b913      	cbnz	r3, 8008ea8 <_fflush_r+0x10>
 8008ea2:	2500      	movs	r5, #0
 8008ea4:	4628      	mov	r0, r5
 8008ea6:	bd38      	pop	{r3, r4, r5, pc}
 8008ea8:	b118      	cbz	r0, 8008eb2 <_fflush_r+0x1a>
 8008eaa:	6a03      	ldr	r3, [r0, #32]
 8008eac:	b90b      	cbnz	r3, 8008eb2 <_fflush_r+0x1a>
 8008eae:	f7ff fa37 	bl	8008320 <__sinit>
 8008eb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d0f3      	beq.n	8008ea2 <_fflush_r+0xa>
 8008eba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008ebc:	07d0      	lsls	r0, r2, #31
 8008ebe:	d404      	bmi.n	8008eca <_fflush_r+0x32>
 8008ec0:	0599      	lsls	r1, r3, #22
 8008ec2:	d402      	bmi.n	8008eca <_fflush_r+0x32>
 8008ec4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008ec6:	f7ff fb52 	bl	800856e <__retarget_lock_acquire_recursive>
 8008eca:	4628      	mov	r0, r5
 8008ecc:	4621      	mov	r1, r4
 8008ece:	f7ff ff63 	bl	8008d98 <__sflush_r>
 8008ed2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008ed4:	4605      	mov	r5, r0
 8008ed6:	07da      	lsls	r2, r3, #31
 8008ed8:	d4e4      	bmi.n	8008ea4 <_fflush_r+0xc>
 8008eda:	89a3      	ldrh	r3, [r4, #12]
 8008edc:	059b      	lsls	r3, r3, #22
 8008ede:	d4e1      	bmi.n	8008ea4 <_fflush_r+0xc>
 8008ee0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008ee2:	f7ff fb45 	bl	8008570 <__retarget_lock_release_recursive>
 8008ee6:	e7dd      	b.n	8008ea4 <_fflush_r+0xc>

08008ee8 <fiprintf>:
 8008ee8:	b40e      	push	{r1, r2, r3}
 8008eea:	b503      	push	{r0, r1, lr}
 8008eec:	4601      	mov	r1, r0
 8008eee:	ab03      	add	r3, sp, #12
 8008ef0:	4805      	ldr	r0, [pc, #20]	@ (8008f08 <fiprintf+0x20>)
 8008ef2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ef6:	6800      	ldr	r0, [r0, #0]
 8008ef8:	9301      	str	r3, [sp, #4]
 8008efa:	f000 f89b 	bl	8009034 <_vfiprintf_r>
 8008efe:	b002      	add	sp, #8
 8008f00:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f04:	b003      	add	sp, #12
 8008f06:	4770      	bx	lr
 8008f08:	20000030 	.word	0x20000030

08008f0c <memmove>:
 8008f0c:	4288      	cmp	r0, r1
 8008f0e:	b510      	push	{r4, lr}
 8008f10:	eb01 0402 	add.w	r4, r1, r2
 8008f14:	d902      	bls.n	8008f1c <memmove+0x10>
 8008f16:	4284      	cmp	r4, r0
 8008f18:	4623      	mov	r3, r4
 8008f1a:	d807      	bhi.n	8008f2c <memmove+0x20>
 8008f1c:	1e43      	subs	r3, r0, #1
 8008f1e:	42a1      	cmp	r1, r4
 8008f20:	d008      	beq.n	8008f34 <memmove+0x28>
 8008f22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008f2a:	e7f8      	b.n	8008f1e <memmove+0x12>
 8008f2c:	4601      	mov	r1, r0
 8008f2e:	4402      	add	r2, r0
 8008f30:	428a      	cmp	r2, r1
 8008f32:	d100      	bne.n	8008f36 <memmove+0x2a>
 8008f34:	bd10      	pop	{r4, pc}
 8008f36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008f3e:	e7f7      	b.n	8008f30 <memmove+0x24>

08008f40 <_sbrk_r>:
 8008f40:	b538      	push	{r3, r4, r5, lr}
 8008f42:	2300      	movs	r3, #0
 8008f44:	4d05      	ldr	r5, [pc, #20]	@ (8008f5c <_sbrk_r+0x1c>)
 8008f46:	4604      	mov	r4, r0
 8008f48:	4608      	mov	r0, r1
 8008f4a:	602b      	str	r3, [r5, #0]
 8008f4c:	f7fc fa7e 	bl	800544c <_sbrk>
 8008f50:	1c43      	adds	r3, r0, #1
 8008f52:	d102      	bne.n	8008f5a <_sbrk_r+0x1a>
 8008f54:	682b      	ldr	r3, [r5, #0]
 8008f56:	b103      	cbz	r3, 8008f5a <_sbrk_r+0x1a>
 8008f58:	6023      	str	r3, [r4, #0]
 8008f5a:	bd38      	pop	{r3, r4, r5, pc}
 8008f5c:	200040f4 	.word	0x200040f4

08008f60 <memchr>:
 8008f60:	4603      	mov	r3, r0
 8008f62:	b510      	push	{r4, lr}
 8008f64:	b2c9      	uxtb	r1, r1
 8008f66:	4402      	add	r2, r0
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	d101      	bne.n	8008f72 <memchr+0x12>
 8008f6e:	2000      	movs	r0, #0
 8008f70:	e003      	b.n	8008f7a <memchr+0x1a>
 8008f72:	7804      	ldrb	r4, [r0, #0]
 8008f74:	3301      	adds	r3, #1
 8008f76:	428c      	cmp	r4, r1
 8008f78:	d1f6      	bne.n	8008f68 <memchr+0x8>
 8008f7a:	bd10      	pop	{r4, pc}

08008f7c <abort>:
 8008f7c:	2006      	movs	r0, #6
 8008f7e:	b508      	push	{r3, lr}
 8008f80:	f000 fa2c 	bl	80093dc <raise>
 8008f84:	2001      	movs	r0, #1
 8008f86:	f7fc f9ec 	bl	8005362 <_exit>

08008f8a <_realloc_r>:
 8008f8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f8e:	4607      	mov	r7, r0
 8008f90:	4614      	mov	r4, r2
 8008f92:	460d      	mov	r5, r1
 8008f94:	b921      	cbnz	r1, 8008fa0 <_realloc_r+0x16>
 8008f96:	4611      	mov	r1, r2
 8008f98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f9c:	f7ff bb88 	b.w	80086b0 <_malloc_r>
 8008fa0:	b92a      	cbnz	r2, 8008fae <_realloc_r+0x24>
 8008fa2:	f7ff fb13 	bl	80085cc <_free_r>
 8008fa6:	4625      	mov	r5, r4
 8008fa8:	4628      	mov	r0, r5
 8008faa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fae:	f000 fa31 	bl	8009414 <_malloc_usable_size_r>
 8008fb2:	4284      	cmp	r4, r0
 8008fb4:	4606      	mov	r6, r0
 8008fb6:	d802      	bhi.n	8008fbe <_realloc_r+0x34>
 8008fb8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008fbc:	d8f4      	bhi.n	8008fa8 <_realloc_r+0x1e>
 8008fbe:	4621      	mov	r1, r4
 8008fc0:	4638      	mov	r0, r7
 8008fc2:	f7ff fb75 	bl	80086b0 <_malloc_r>
 8008fc6:	4680      	mov	r8, r0
 8008fc8:	b908      	cbnz	r0, 8008fce <_realloc_r+0x44>
 8008fca:	4645      	mov	r5, r8
 8008fcc:	e7ec      	b.n	8008fa8 <_realloc_r+0x1e>
 8008fce:	42b4      	cmp	r4, r6
 8008fd0:	4622      	mov	r2, r4
 8008fd2:	4629      	mov	r1, r5
 8008fd4:	bf28      	it	cs
 8008fd6:	4632      	movcs	r2, r6
 8008fd8:	f7ff facb 	bl	8008572 <memcpy>
 8008fdc:	4629      	mov	r1, r5
 8008fde:	4638      	mov	r0, r7
 8008fe0:	f7ff faf4 	bl	80085cc <_free_r>
 8008fe4:	e7f1      	b.n	8008fca <_realloc_r+0x40>

08008fe6 <__sfputc_r>:
 8008fe6:	6893      	ldr	r3, [r2, #8]
 8008fe8:	b410      	push	{r4}
 8008fea:	3b01      	subs	r3, #1
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	6093      	str	r3, [r2, #8]
 8008ff0:	da07      	bge.n	8009002 <__sfputc_r+0x1c>
 8008ff2:	6994      	ldr	r4, [r2, #24]
 8008ff4:	42a3      	cmp	r3, r4
 8008ff6:	db01      	blt.n	8008ffc <__sfputc_r+0x16>
 8008ff8:	290a      	cmp	r1, #10
 8008ffa:	d102      	bne.n	8009002 <__sfputc_r+0x1c>
 8008ffc:	bc10      	pop	{r4}
 8008ffe:	f000 b931 	b.w	8009264 <__swbuf_r>
 8009002:	6813      	ldr	r3, [r2, #0]
 8009004:	1c58      	adds	r0, r3, #1
 8009006:	6010      	str	r0, [r2, #0]
 8009008:	7019      	strb	r1, [r3, #0]
 800900a:	4608      	mov	r0, r1
 800900c:	bc10      	pop	{r4}
 800900e:	4770      	bx	lr

08009010 <__sfputs_r>:
 8009010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009012:	4606      	mov	r6, r0
 8009014:	460f      	mov	r7, r1
 8009016:	4614      	mov	r4, r2
 8009018:	18d5      	adds	r5, r2, r3
 800901a:	42ac      	cmp	r4, r5
 800901c:	d101      	bne.n	8009022 <__sfputs_r+0x12>
 800901e:	2000      	movs	r0, #0
 8009020:	e007      	b.n	8009032 <__sfputs_r+0x22>
 8009022:	463a      	mov	r2, r7
 8009024:	4630      	mov	r0, r6
 8009026:	f814 1b01 	ldrb.w	r1, [r4], #1
 800902a:	f7ff ffdc 	bl	8008fe6 <__sfputc_r>
 800902e:	1c43      	adds	r3, r0, #1
 8009030:	d1f3      	bne.n	800901a <__sfputs_r+0xa>
 8009032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009034 <_vfiprintf_r>:
 8009034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009038:	460d      	mov	r5, r1
 800903a:	4614      	mov	r4, r2
 800903c:	4698      	mov	r8, r3
 800903e:	4606      	mov	r6, r0
 8009040:	b09d      	sub	sp, #116	@ 0x74
 8009042:	b118      	cbz	r0, 800904c <_vfiprintf_r+0x18>
 8009044:	6a03      	ldr	r3, [r0, #32]
 8009046:	b90b      	cbnz	r3, 800904c <_vfiprintf_r+0x18>
 8009048:	f7ff f96a 	bl	8008320 <__sinit>
 800904c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800904e:	07d9      	lsls	r1, r3, #31
 8009050:	d405      	bmi.n	800905e <_vfiprintf_r+0x2a>
 8009052:	89ab      	ldrh	r3, [r5, #12]
 8009054:	059a      	lsls	r2, r3, #22
 8009056:	d402      	bmi.n	800905e <_vfiprintf_r+0x2a>
 8009058:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800905a:	f7ff fa88 	bl	800856e <__retarget_lock_acquire_recursive>
 800905e:	89ab      	ldrh	r3, [r5, #12]
 8009060:	071b      	lsls	r3, r3, #28
 8009062:	d501      	bpl.n	8009068 <_vfiprintf_r+0x34>
 8009064:	692b      	ldr	r3, [r5, #16]
 8009066:	b99b      	cbnz	r3, 8009090 <_vfiprintf_r+0x5c>
 8009068:	4629      	mov	r1, r5
 800906a:	4630      	mov	r0, r6
 800906c:	f000 f938 	bl	80092e0 <__swsetup_r>
 8009070:	b170      	cbz	r0, 8009090 <_vfiprintf_r+0x5c>
 8009072:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009074:	07dc      	lsls	r4, r3, #31
 8009076:	d504      	bpl.n	8009082 <_vfiprintf_r+0x4e>
 8009078:	f04f 30ff 	mov.w	r0, #4294967295
 800907c:	b01d      	add	sp, #116	@ 0x74
 800907e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009082:	89ab      	ldrh	r3, [r5, #12]
 8009084:	0598      	lsls	r0, r3, #22
 8009086:	d4f7      	bmi.n	8009078 <_vfiprintf_r+0x44>
 8009088:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800908a:	f7ff fa71 	bl	8008570 <__retarget_lock_release_recursive>
 800908e:	e7f3      	b.n	8009078 <_vfiprintf_r+0x44>
 8009090:	2300      	movs	r3, #0
 8009092:	9309      	str	r3, [sp, #36]	@ 0x24
 8009094:	2320      	movs	r3, #32
 8009096:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800909a:	2330      	movs	r3, #48	@ 0x30
 800909c:	f04f 0901 	mov.w	r9, #1
 80090a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80090a4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8009250 <_vfiprintf_r+0x21c>
 80090a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80090ac:	4623      	mov	r3, r4
 80090ae:	469a      	mov	sl, r3
 80090b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090b4:	b10a      	cbz	r2, 80090ba <_vfiprintf_r+0x86>
 80090b6:	2a25      	cmp	r2, #37	@ 0x25
 80090b8:	d1f9      	bne.n	80090ae <_vfiprintf_r+0x7a>
 80090ba:	ebba 0b04 	subs.w	fp, sl, r4
 80090be:	d00b      	beq.n	80090d8 <_vfiprintf_r+0xa4>
 80090c0:	465b      	mov	r3, fp
 80090c2:	4622      	mov	r2, r4
 80090c4:	4629      	mov	r1, r5
 80090c6:	4630      	mov	r0, r6
 80090c8:	f7ff ffa2 	bl	8009010 <__sfputs_r>
 80090cc:	3001      	adds	r0, #1
 80090ce:	f000 80a7 	beq.w	8009220 <_vfiprintf_r+0x1ec>
 80090d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80090d4:	445a      	add	r2, fp
 80090d6:	9209      	str	r2, [sp, #36]	@ 0x24
 80090d8:	f89a 3000 	ldrb.w	r3, [sl]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	f000 809f 	beq.w	8009220 <_vfiprintf_r+0x1ec>
 80090e2:	2300      	movs	r3, #0
 80090e4:	f04f 32ff 	mov.w	r2, #4294967295
 80090e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090ec:	f10a 0a01 	add.w	sl, sl, #1
 80090f0:	9304      	str	r3, [sp, #16]
 80090f2:	9307      	str	r3, [sp, #28]
 80090f4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80090f8:	931a      	str	r3, [sp, #104]	@ 0x68
 80090fa:	4654      	mov	r4, sl
 80090fc:	2205      	movs	r2, #5
 80090fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009102:	4853      	ldr	r0, [pc, #332]	@ (8009250 <_vfiprintf_r+0x21c>)
 8009104:	f7ff ff2c 	bl	8008f60 <memchr>
 8009108:	9a04      	ldr	r2, [sp, #16]
 800910a:	b9d8      	cbnz	r0, 8009144 <_vfiprintf_r+0x110>
 800910c:	06d1      	lsls	r1, r2, #27
 800910e:	bf44      	itt	mi
 8009110:	2320      	movmi	r3, #32
 8009112:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009116:	0713      	lsls	r3, r2, #28
 8009118:	bf44      	itt	mi
 800911a:	232b      	movmi	r3, #43	@ 0x2b
 800911c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009120:	f89a 3000 	ldrb.w	r3, [sl]
 8009124:	2b2a      	cmp	r3, #42	@ 0x2a
 8009126:	d015      	beq.n	8009154 <_vfiprintf_r+0x120>
 8009128:	4654      	mov	r4, sl
 800912a:	2000      	movs	r0, #0
 800912c:	f04f 0c0a 	mov.w	ip, #10
 8009130:	9a07      	ldr	r2, [sp, #28]
 8009132:	4621      	mov	r1, r4
 8009134:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009138:	3b30      	subs	r3, #48	@ 0x30
 800913a:	2b09      	cmp	r3, #9
 800913c:	d94b      	bls.n	80091d6 <_vfiprintf_r+0x1a2>
 800913e:	b1b0      	cbz	r0, 800916e <_vfiprintf_r+0x13a>
 8009140:	9207      	str	r2, [sp, #28]
 8009142:	e014      	b.n	800916e <_vfiprintf_r+0x13a>
 8009144:	eba0 0308 	sub.w	r3, r0, r8
 8009148:	fa09 f303 	lsl.w	r3, r9, r3
 800914c:	4313      	orrs	r3, r2
 800914e:	46a2      	mov	sl, r4
 8009150:	9304      	str	r3, [sp, #16]
 8009152:	e7d2      	b.n	80090fa <_vfiprintf_r+0xc6>
 8009154:	9b03      	ldr	r3, [sp, #12]
 8009156:	1d19      	adds	r1, r3, #4
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	9103      	str	r1, [sp, #12]
 800915c:	2b00      	cmp	r3, #0
 800915e:	bfbb      	ittet	lt
 8009160:	425b      	neglt	r3, r3
 8009162:	f042 0202 	orrlt.w	r2, r2, #2
 8009166:	9307      	strge	r3, [sp, #28]
 8009168:	9307      	strlt	r3, [sp, #28]
 800916a:	bfb8      	it	lt
 800916c:	9204      	strlt	r2, [sp, #16]
 800916e:	7823      	ldrb	r3, [r4, #0]
 8009170:	2b2e      	cmp	r3, #46	@ 0x2e
 8009172:	d10a      	bne.n	800918a <_vfiprintf_r+0x156>
 8009174:	7863      	ldrb	r3, [r4, #1]
 8009176:	2b2a      	cmp	r3, #42	@ 0x2a
 8009178:	d132      	bne.n	80091e0 <_vfiprintf_r+0x1ac>
 800917a:	9b03      	ldr	r3, [sp, #12]
 800917c:	3402      	adds	r4, #2
 800917e:	1d1a      	adds	r2, r3, #4
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	9203      	str	r2, [sp, #12]
 8009184:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009188:	9305      	str	r3, [sp, #20]
 800918a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8009254 <_vfiprintf_r+0x220>
 800918e:	2203      	movs	r2, #3
 8009190:	4650      	mov	r0, sl
 8009192:	7821      	ldrb	r1, [r4, #0]
 8009194:	f7ff fee4 	bl	8008f60 <memchr>
 8009198:	b138      	cbz	r0, 80091aa <_vfiprintf_r+0x176>
 800919a:	2240      	movs	r2, #64	@ 0x40
 800919c:	9b04      	ldr	r3, [sp, #16]
 800919e:	eba0 000a 	sub.w	r0, r0, sl
 80091a2:	4082      	lsls	r2, r0
 80091a4:	4313      	orrs	r3, r2
 80091a6:	3401      	adds	r4, #1
 80091a8:	9304      	str	r3, [sp, #16]
 80091aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091ae:	2206      	movs	r2, #6
 80091b0:	4829      	ldr	r0, [pc, #164]	@ (8009258 <_vfiprintf_r+0x224>)
 80091b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80091b6:	f7ff fed3 	bl	8008f60 <memchr>
 80091ba:	2800      	cmp	r0, #0
 80091bc:	d03f      	beq.n	800923e <_vfiprintf_r+0x20a>
 80091be:	4b27      	ldr	r3, [pc, #156]	@ (800925c <_vfiprintf_r+0x228>)
 80091c0:	bb1b      	cbnz	r3, 800920a <_vfiprintf_r+0x1d6>
 80091c2:	9b03      	ldr	r3, [sp, #12]
 80091c4:	3307      	adds	r3, #7
 80091c6:	f023 0307 	bic.w	r3, r3, #7
 80091ca:	3308      	adds	r3, #8
 80091cc:	9303      	str	r3, [sp, #12]
 80091ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091d0:	443b      	add	r3, r7
 80091d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80091d4:	e76a      	b.n	80090ac <_vfiprintf_r+0x78>
 80091d6:	460c      	mov	r4, r1
 80091d8:	2001      	movs	r0, #1
 80091da:	fb0c 3202 	mla	r2, ip, r2, r3
 80091de:	e7a8      	b.n	8009132 <_vfiprintf_r+0xfe>
 80091e0:	2300      	movs	r3, #0
 80091e2:	f04f 0c0a 	mov.w	ip, #10
 80091e6:	4619      	mov	r1, r3
 80091e8:	3401      	adds	r4, #1
 80091ea:	9305      	str	r3, [sp, #20]
 80091ec:	4620      	mov	r0, r4
 80091ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091f2:	3a30      	subs	r2, #48	@ 0x30
 80091f4:	2a09      	cmp	r2, #9
 80091f6:	d903      	bls.n	8009200 <_vfiprintf_r+0x1cc>
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d0c6      	beq.n	800918a <_vfiprintf_r+0x156>
 80091fc:	9105      	str	r1, [sp, #20]
 80091fe:	e7c4      	b.n	800918a <_vfiprintf_r+0x156>
 8009200:	4604      	mov	r4, r0
 8009202:	2301      	movs	r3, #1
 8009204:	fb0c 2101 	mla	r1, ip, r1, r2
 8009208:	e7f0      	b.n	80091ec <_vfiprintf_r+0x1b8>
 800920a:	ab03      	add	r3, sp, #12
 800920c:	9300      	str	r3, [sp, #0]
 800920e:	462a      	mov	r2, r5
 8009210:	4630      	mov	r0, r6
 8009212:	4b13      	ldr	r3, [pc, #76]	@ (8009260 <_vfiprintf_r+0x22c>)
 8009214:	a904      	add	r1, sp, #16
 8009216:	f3af 8000 	nop.w
 800921a:	4607      	mov	r7, r0
 800921c:	1c78      	adds	r0, r7, #1
 800921e:	d1d6      	bne.n	80091ce <_vfiprintf_r+0x19a>
 8009220:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009222:	07d9      	lsls	r1, r3, #31
 8009224:	d405      	bmi.n	8009232 <_vfiprintf_r+0x1fe>
 8009226:	89ab      	ldrh	r3, [r5, #12]
 8009228:	059a      	lsls	r2, r3, #22
 800922a:	d402      	bmi.n	8009232 <_vfiprintf_r+0x1fe>
 800922c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800922e:	f7ff f99f 	bl	8008570 <__retarget_lock_release_recursive>
 8009232:	89ab      	ldrh	r3, [r5, #12]
 8009234:	065b      	lsls	r3, r3, #25
 8009236:	f53f af1f 	bmi.w	8009078 <_vfiprintf_r+0x44>
 800923a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800923c:	e71e      	b.n	800907c <_vfiprintf_r+0x48>
 800923e:	ab03      	add	r3, sp, #12
 8009240:	9300      	str	r3, [sp, #0]
 8009242:	462a      	mov	r2, r5
 8009244:	4630      	mov	r0, r6
 8009246:	4b06      	ldr	r3, [pc, #24]	@ (8009260 <_vfiprintf_r+0x22c>)
 8009248:	a904      	add	r1, sp, #16
 800924a:	f7ff fc87 	bl	8008b5c <_printf_i>
 800924e:	e7e4      	b.n	800921a <_vfiprintf_r+0x1e6>
 8009250:	0800aefd 	.word	0x0800aefd
 8009254:	0800af03 	.word	0x0800af03
 8009258:	0800af07 	.word	0x0800af07
 800925c:	00000000 	.word	0x00000000
 8009260:	08009011 	.word	0x08009011

08009264 <__swbuf_r>:
 8009264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009266:	460e      	mov	r6, r1
 8009268:	4614      	mov	r4, r2
 800926a:	4605      	mov	r5, r0
 800926c:	b118      	cbz	r0, 8009276 <__swbuf_r+0x12>
 800926e:	6a03      	ldr	r3, [r0, #32]
 8009270:	b90b      	cbnz	r3, 8009276 <__swbuf_r+0x12>
 8009272:	f7ff f855 	bl	8008320 <__sinit>
 8009276:	69a3      	ldr	r3, [r4, #24]
 8009278:	60a3      	str	r3, [r4, #8]
 800927a:	89a3      	ldrh	r3, [r4, #12]
 800927c:	071a      	lsls	r2, r3, #28
 800927e:	d501      	bpl.n	8009284 <__swbuf_r+0x20>
 8009280:	6923      	ldr	r3, [r4, #16]
 8009282:	b943      	cbnz	r3, 8009296 <__swbuf_r+0x32>
 8009284:	4621      	mov	r1, r4
 8009286:	4628      	mov	r0, r5
 8009288:	f000 f82a 	bl	80092e0 <__swsetup_r>
 800928c:	b118      	cbz	r0, 8009296 <__swbuf_r+0x32>
 800928e:	f04f 37ff 	mov.w	r7, #4294967295
 8009292:	4638      	mov	r0, r7
 8009294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009296:	6823      	ldr	r3, [r4, #0]
 8009298:	6922      	ldr	r2, [r4, #16]
 800929a:	b2f6      	uxtb	r6, r6
 800929c:	1a98      	subs	r0, r3, r2
 800929e:	6963      	ldr	r3, [r4, #20]
 80092a0:	4637      	mov	r7, r6
 80092a2:	4283      	cmp	r3, r0
 80092a4:	dc05      	bgt.n	80092b2 <__swbuf_r+0x4e>
 80092a6:	4621      	mov	r1, r4
 80092a8:	4628      	mov	r0, r5
 80092aa:	f7ff fdf5 	bl	8008e98 <_fflush_r>
 80092ae:	2800      	cmp	r0, #0
 80092b0:	d1ed      	bne.n	800928e <__swbuf_r+0x2a>
 80092b2:	68a3      	ldr	r3, [r4, #8]
 80092b4:	3b01      	subs	r3, #1
 80092b6:	60a3      	str	r3, [r4, #8]
 80092b8:	6823      	ldr	r3, [r4, #0]
 80092ba:	1c5a      	adds	r2, r3, #1
 80092bc:	6022      	str	r2, [r4, #0]
 80092be:	701e      	strb	r6, [r3, #0]
 80092c0:	6962      	ldr	r2, [r4, #20]
 80092c2:	1c43      	adds	r3, r0, #1
 80092c4:	429a      	cmp	r2, r3
 80092c6:	d004      	beq.n	80092d2 <__swbuf_r+0x6e>
 80092c8:	89a3      	ldrh	r3, [r4, #12]
 80092ca:	07db      	lsls	r3, r3, #31
 80092cc:	d5e1      	bpl.n	8009292 <__swbuf_r+0x2e>
 80092ce:	2e0a      	cmp	r6, #10
 80092d0:	d1df      	bne.n	8009292 <__swbuf_r+0x2e>
 80092d2:	4621      	mov	r1, r4
 80092d4:	4628      	mov	r0, r5
 80092d6:	f7ff fddf 	bl	8008e98 <_fflush_r>
 80092da:	2800      	cmp	r0, #0
 80092dc:	d0d9      	beq.n	8009292 <__swbuf_r+0x2e>
 80092de:	e7d6      	b.n	800928e <__swbuf_r+0x2a>

080092e0 <__swsetup_r>:
 80092e0:	b538      	push	{r3, r4, r5, lr}
 80092e2:	4b29      	ldr	r3, [pc, #164]	@ (8009388 <__swsetup_r+0xa8>)
 80092e4:	4605      	mov	r5, r0
 80092e6:	6818      	ldr	r0, [r3, #0]
 80092e8:	460c      	mov	r4, r1
 80092ea:	b118      	cbz	r0, 80092f4 <__swsetup_r+0x14>
 80092ec:	6a03      	ldr	r3, [r0, #32]
 80092ee:	b90b      	cbnz	r3, 80092f4 <__swsetup_r+0x14>
 80092f0:	f7ff f816 	bl	8008320 <__sinit>
 80092f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092f8:	0719      	lsls	r1, r3, #28
 80092fa:	d422      	bmi.n	8009342 <__swsetup_r+0x62>
 80092fc:	06da      	lsls	r2, r3, #27
 80092fe:	d407      	bmi.n	8009310 <__swsetup_r+0x30>
 8009300:	2209      	movs	r2, #9
 8009302:	602a      	str	r2, [r5, #0]
 8009304:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009308:	f04f 30ff 	mov.w	r0, #4294967295
 800930c:	81a3      	strh	r3, [r4, #12]
 800930e:	e033      	b.n	8009378 <__swsetup_r+0x98>
 8009310:	0758      	lsls	r0, r3, #29
 8009312:	d512      	bpl.n	800933a <__swsetup_r+0x5a>
 8009314:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009316:	b141      	cbz	r1, 800932a <__swsetup_r+0x4a>
 8009318:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800931c:	4299      	cmp	r1, r3
 800931e:	d002      	beq.n	8009326 <__swsetup_r+0x46>
 8009320:	4628      	mov	r0, r5
 8009322:	f7ff f953 	bl	80085cc <_free_r>
 8009326:	2300      	movs	r3, #0
 8009328:	6363      	str	r3, [r4, #52]	@ 0x34
 800932a:	89a3      	ldrh	r3, [r4, #12]
 800932c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009330:	81a3      	strh	r3, [r4, #12]
 8009332:	2300      	movs	r3, #0
 8009334:	6063      	str	r3, [r4, #4]
 8009336:	6923      	ldr	r3, [r4, #16]
 8009338:	6023      	str	r3, [r4, #0]
 800933a:	89a3      	ldrh	r3, [r4, #12]
 800933c:	f043 0308 	orr.w	r3, r3, #8
 8009340:	81a3      	strh	r3, [r4, #12]
 8009342:	6923      	ldr	r3, [r4, #16]
 8009344:	b94b      	cbnz	r3, 800935a <__swsetup_r+0x7a>
 8009346:	89a3      	ldrh	r3, [r4, #12]
 8009348:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800934c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009350:	d003      	beq.n	800935a <__swsetup_r+0x7a>
 8009352:	4621      	mov	r1, r4
 8009354:	4628      	mov	r0, r5
 8009356:	f000 f88a 	bl	800946e <__smakebuf_r>
 800935a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800935e:	f013 0201 	ands.w	r2, r3, #1
 8009362:	d00a      	beq.n	800937a <__swsetup_r+0x9a>
 8009364:	2200      	movs	r2, #0
 8009366:	60a2      	str	r2, [r4, #8]
 8009368:	6962      	ldr	r2, [r4, #20]
 800936a:	4252      	negs	r2, r2
 800936c:	61a2      	str	r2, [r4, #24]
 800936e:	6922      	ldr	r2, [r4, #16]
 8009370:	b942      	cbnz	r2, 8009384 <__swsetup_r+0xa4>
 8009372:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009376:	d1c5      	bne.n	8009304 <__swsetup_r+0x24>
 8009378:	bd38      	pop	{r3, r4, r5, pc}
 800937a:	0799      	lsls	r1, r3, #30
 800937c:	bf58      	it	pl
 800937e:	6962      	ldrpl	r2, [r4, #20]
 8009380:	60a2      	str	r2, [r4, #8]
 8009382:	e7f4      	b.n	800936e <__swsetup_r+0x8e>
 8009384:	2000      	movs	r0, #0
 8009386:	e7f7      	b.n	8009378 <__swsetup_r+0x98>
 8009388:	20000030 	.word	0x20000030

0800938c <_raise_r>:
 800938c:	291f      	cmp	r1, #31
 800938e:	b538      	push	{r3, r4, r5, lr}
 8009390:	4605      	mov	r5, r0
 8009392:	460c      	mov	r4, r1
 8009394:	d904      	bls.n	80093a0 <_raise_r+0x14>
 8009396:	2316      	movs	r3, #22
 8009398:	6003      	str	r3, [r0, #0]
 800939a:	f04f 30ff 	mov.w	r0, #4294967295
 800939e:	bd38      	pop	{r3, r4, r5, pc}
 80093a0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80093a2:	b112      	cbz	r2, 80093aa <_raise_r+0x1e>
 80093a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80093a8:	b94b      	cbnz	r3, 80093be <_raise_r+0x32>
 80093aa:	4628      	mov	r0, r5
 80093ac:	f000 f830 	bl	8009410 <_getpid_r>
 80093b0:	4622      	mov	r2, r4
 80093b2:	4601      	mov	r1, r0
 80093b4:	4628      	mov	r0, r5
 80093b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093ba:	f000 b817 	b.w	80093ec <_kill_r>
 80093be:	2b01      	cmp	r3, #1
 80093c0:	d00a      	beq.n	80093d8 <_raise_r+0x4c>
 80093c2:	1c59      	adds	r1, r3, #1
 80093c4:	d103      	bne.n	80093ce <_raise_r+0x42>
 80093c6:	2316      	movs	r3, #22
 80093c8:	6003      	str	r3, [r0, #0]
 80093ca:	2001      	movs	r0, #1
 80093cc:	e7e7      	b.n	800939e <_raise_r+0x12>
 80093ce:	2100      	movs	r1, #0
 80093d0:	4620      	mov	r0, r4
 80093d2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80093d6:	4798      	blx	r3
 80093d8:	2000      	movs	r0, #0
 80093da:	e7e0      	b.n	800939e <_raise_r+0x12>

080093dc <raise>:
 80093dc:	4b02      	ldr	r3, [pc, #8]	@ (80093e8 <raise+0xc>)
 80093de:	4601      	mov	r1, r0
 80093e0:	6818      	ldr	r0, [r3, #0]
 80093e2:	f7ff bfd3 	b.w	800938c <_raise_r>
 80093e6:	bf00      	nop
 80093e8:	20000030 	.word	0x20000030

080093ec <_kill_r>:
 80093ec:	b538      	push	{r3, r4, r5, lr}
 80093ee:	2300      	movs	r3, #0
 80093f0:	4d06      	ldr	r5, [pc, #24]	@ (800940c <_kill_r+0x20>)
 80093f2:	4604      	mov	r4, r0
 80093f4:	4608      	mov	r0, r1
 80093f6:	4611      	mov	r1, r2
 80093f8:	602b      	str	r3, [r5, #0]
 80093fa:	f7fb ffa2 	bl	8005342 <_kill>
 80093fe:	1c43      	adds	r3, r0, #1
 8009400:	d102      	bne.n	8009408 <_kill_r+0x1c>
 8009402:	682b      	ldr	r3, [r5, #0]
 8009404:	b103      	cbz	r3, 8009408 <_kill_r+0x1c>
 8009406:	6023      	str	r3, [r4, #0]
 8009408:	bd38      	pop	{r3, r4, r5, pc}
 800940a:	bf00      	nop
 800940c:	200040f4 	.word	0x200040f4

08009410 <_getpid_r>:
 8009410:	f7fb bf90 	b.w	8005334 <_getpid>

08009414 <_malloc_usable_size_r>:
 8009414:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009418:	1f18      	subs	r0, r3, #4
 800941a:	2b00      	cmp	r3, #0
 800941c:	bfbc      	itt	lt
 800941e:	580b      	ldrlt	r3, [r1, r0]
 8009420:	18c0      	addlt	r0, r0, r3
 8009422:	4770      	bx	lr

08009424 <__swhatbuf_r>:
 8009424:	b570      	push	{r4, r5, r6, lr}
 8009426:	460c      	mov	r4, r1
 8009428:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800942c:	4615      	mov	r5, r2
 800942e:	2900      	cmp	r1, #0
 8009430:	461e      	mov	r6, r3
 8009432:	b096      	sub	sp, #88	@ 0x58
 8009434:	da0c      	bge.n	8009450 <__swhatbuf_r+0x2c>
 8009436:	89a3      	ldrh	r3, [r4, #12]
 8009438:	2100      	movs	r1, #0
 800943a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800943e:	bf14      	ite	ne
 8009440:	2340      	movne	r3, #64	@ 0x40
 8009442:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009446:	2000      	movs	r0, #0
 8009448:	6031      	str	r1, [r6, #0]
 800944a:	602b      	str	r3, [r5, #0]
 800944c:	b016      	add	sp, #88	@ 0x58
 800944e:	bd70      	pop	{r4, r5, r6, pc}
 8009450:	466a      	mov	r2, sp
 8009452:	f000 f849 	bl	80094e8 <_fstat_r>
 8009456:	2800      	cmp	r0, #0
 8009458:	dbed      	blt.n	8009436 <__swhatbuf_r+0x12>
 800945a:	9901      	ldr	r1, [sp, #4]
 800945c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009460:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009464:	4259      	negs	r1, r3
 8009466:	4159      	adcs	r1, r3
 8009468:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800946c:	e7eb      	b.n	8009446 <__swhatbuf_r+0x22>

0800946e <__smakebuf_r>:
 800946e:	898b      	ldrh	r3, [r1, #12]
 8009470:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009472:	079d      	lsls	r5, r3, #30
 8009474:	4606      	mov	r6, r0
 8009476:	460c      	mov	r4, r1
 8009478:	d507      	bpl.n	800948a <__smakebuf_r+0x1c>
 800947a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800947e:	6023      	str	r3, [r4, #0]
 8009480:	6123      	str	r3, [r4, #16]
 8009482:	2301      	movs	r3, #1
 8009484:	6163      	str	r3, [r4, #20]
 8009486:	b003      	add	sp, #12
 8009488:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800948a:	466a      	mov	r2, sp
 800948c:	ab01      	add	r3, sp, #4
 800948e:	f7ff ffc9 	bl	8009424 <__swhatbuf_r>
 8009492:	9f00      	ldr	r7, [sp, #0]
 8009494:	4605      	mov	r5, r0
 8009496:	4639      	mov	r1, r7
 8009498:	4630      	mov	r0, r6
 800949a:	f7ff f909 	bl	80086b0 <_malloc_r>
 800949e:	b948      	cbnz	r0, 80094b4 <__smakebuf_r+0x46>
 80094a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094a4:	059a      	lsls	r2, r3, #22
 80094a6:	d4ee      	bmi.n	8009486 <__smakebuf_r+0x18>
 80094a8:	f023 0303 	bic.w	r3, r3, #3
 80094ac:	f043 0302 	orr.w	r3, r3, #2
 80094b0:	81a3      	strh	r3, [r4, #12]
 80094b2:	e7e2      	b.n	800947a <__smakebuf_r+0xc>
 80094b4:	89a3      	ldrh	r3, [r4, #12]
 80094b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80094ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80094be:	81a3      	strh	r3, [r4, #12]
 80094c0:	9b01      	ldr	r3, [sp, #4]
 80094c2:	6020      	str	r0, [r4, #0]
 80094c4:	b15b      	cbz	r3, 80094de <__smakebuf_r+0x70>
 80094c6:	4630      	mov	r0, r6
 80094c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094cc:	f000 f81e 	bl	800950c <_isatty_r>
 80094d0:	b128      	cbz	r0, 80094de <__smakebuf_r+0x70>
 80094d2:	89a3      	ldrh	r3, [r4, #12]
 80094d4:	f023 0303 	bic.w	r3, r3, #3
 80094d8:	f043 0301 	orr.w	r3, r3, #1
 80094dc:	81a3      	strh	r3, [r4, #12]
 80094de:	89a3      	ldrh	r3, [r4, #12]
 80094e0:	431d      	orrs	r5, r3
 80094e2:	81a5      	strh	r5, [r4, #12]
 80094e4:	e7cf      	b.n	8009486 <__smakebuf_r+0x18>
	...

080094e8 <_fstat_r>:
 80094e8:	b538      	push	{r3, r4, r5, lr}
 80094ea:	2300      	movs	r3, #0
 80094ec:	4d06      	ldr	r5, [pc, #24]	@ (8009508 <_fstat_r+0x20>)
 80094ee:	4604      	mov	r4, r0
 80094f0:	4608      	mov	r0, r1
 80094f2:	4611      	mov	r1, r2
 80094f4:	602b      	str	r3, [r5, #0]
 80094f6:	f7fb ff83 	bl	8005400 <_fstat>
 80094fa:	1c43      	adds	r3, r0, #1
 80094fc:	d102      	bne.n	8009504 <_fstat_r+0x1c>
 80094fe:	682b      	ldr	r3, [r5, #0]
 8009500:	b103      	cbz	r3, 8009504 <_fstat_r+0x1c>
 8009502:	6023      	str	r3, [r4, #0]
 8009504:	bd38      	pop	{r3, r4, r5, pc}
 8009506:	bf00      	nop
 8009508:	200040f4 	.word	0x200040f4

0800950c <_isatty_r>:
 800950c:	b538      	push	{r3, r4, r5, lr}
 800950e:	2300      	movs	r3, #0
 8009510:	4d05      	ldr	r5, [pc, #20]	@ (8009528 <_isatty_r+0x1c>)
 8009512:	4604      	mov	r4, r0
 8009514:	4608      	mov	r0, r1
 8009516:	602b      	str	r3, [r5, #0]
 8009518:	f7fb ff81 	bl	800541e <_isatty>
 800951c:	1c43      	adds	r3, r0, #1
 800951e:	d102      	bne.n	8009526 <_isatty_r+0x1a>
 8009520:	682b      	ldr	r3, [r5, #0]
 8009522:	b103      	cbz	r3, 8009526 <_isatty_r+0x1a>
 8009524:	6023      	str	r3, [r4, #0]
 8009526:	bd38      	pop	{r3, r4, r5, pc}
 8009528:	200040f4 	.word	0x200040f4

0800952c <powf>:
 800952c:	b570      	push	{r4, r5, r6, lr}
 800952e:	460c      	mov	r4, r1
 8009530:	4606      	mov	r6, r0
 8009532:	f000 fa43 	bl	80099bc <__ieee754_powf>
 8009536:	4621      	mov	r1, r4
 8009538:	4605      	mov	r5, r0
 800953a:	4620      	mov	r0, r4
 800953c:	f7f7 f8ec 	bl	8000718 <__aeabi_fcmpun>
 8009540:	bb68      	cbnz	r0, 800959e <powf+0x72>
 8009542:	2100      	movs	r1, #0
 8009544:	4630      	mov	r0, r6
 8009546:	f7f7 f8b5 	bl	80006b4 <__aeabi_fcmpeq>
 800954a:	b190      	cbz	r0, 8009572 <powf+0x46>
 800954c:	2100      	movs	r1, #0
 800954e:	4620      	mov	r0, r4
 8009550:	f7f7 f8b0 	bl	80006b4 <__aeabi_fcmpeq>
 8009554:	2800      	cmp	r0, #0
 8009556:	d133      	bne.n	80095c0 <powf+0x94>
 8009558:	4620      	mov	r0, r4
 800955a:	f000 f8c1 	bl	80096e0 <finitef>
 800955e:	b1f0      	cbz	r0, 800959e <powf+0x72>
 8009560:	2100      	movs	r1, #0
 8009562:	4620      	mov	r0, r4
 8009564:	f7f7 f8b0 	bl	80006c8 <__aeabi_fcmplt>
 8009568:	b1c8      	cbz	r0, 800959e <powf+0x72>
 800956a:	f7fe ffd5 	bl	8008518 <__errno>
 800956e:	2322      	movs	r3, #34	@ 0x22
 8009570:	e014      	b.n	800959c <powf+0x70>
 8009572:	4628      	mov	r0, r5
 8009574:	f000 f8b4 	bl	80096e0 <finitef>
 8009578:	b998      	cbnz	r0, 80095a2 <powf+0x76>
 800957a:	4630      	mov	r0, r6
 800957c:	f000 f8b0 	bl	80096e0 <finitef>
 8009580:	b178      	cbz	r0, 80095a2 <powf+0x76>
 8009582:	4620      	mov	r0, r4
 8009584:	f000 f8ac 	bl	80096e0 <finitef>
 8009588:	b158      	cbz	r0, 80095a2 <powf+0x76>
 800958a:	4629      	mov	r1, r5
 800958c:	4628      	mov	r0, r5
 800958e:	f7f7 f8c3 	bl	8000718 <__aeabi_fcmpun>
 8009592:	2800      	cmp	r0, #0
 8009594:	d0e9      	beq.n	800956a <powf+0x3e>
 8009596:	f7fe ffbf 	bl	8008518 <__errno>
 800959a:	2321      	movs	r3, #33	@ 0x21
 800959c:	6003      	str	r3, [r0, #0]
 800959e:	4628      	mov	r0, r5
 80095a0:	bd70      	pop	{r4, r5, r6, pc}
 80095a2:	2100      	movs	r1, #0
 80095a4:	4628      	mov	r0, r5
 80095a6:	f7f7 f885 	bl	80006b4 <__aeabi_fcmpeq>
 80095aa:	2800      	cmp	r0, #0
 80095ac:	d0f7      	beq.n	800959e <powf+0x72>
 80095ae:	4630      	mov	r0, r6
 80095b0:	f000 f896 	bl	80096e0 <finitef>
 80095b4:	2800      	cmp	r0, #0
 80095b6:	d0f2      	beq.n	800959e <powf+0x72>
 80095b8:	4620      	mov	r0, r4
 80095ba:	f000 f891 	bl	80096e0 <finitef>
 80095be:	e7d3      	b.n	8009568 <powf+0x3c>
 80095c0:	f04f 557e 	mov.w	r5, #1065353216	@ 0x3f800000
 80095c4:	e7eb      	b.n	800959e <powf+0x72>

080095c6 <sqrtf>:
 80095c6:	b538      	push	{r3, r4, r5, lr}
 80095c8:	4605      	mov	r5, r0
 80095ca:	f000 f891 	bl	80096f0 <__ieee754_sqrtf>
 80095ce:	4629      	mov	r1, r5
 80095d0:	4604      	mov	r4, r0
 80095d2:	4628      	mov	r0, r5
 80095d4:	f7f7 f8a0 	bl	8000718 <__aeabi_fcmpun>
 80095d8:	b968      	cbnz	r0, 80095f6 <sqrtf+0x30>
 80095da:	2100      	movs	r1, #0
 80095dc:	4628      	mov	r0, r5
 80095de:	f7f7 f873 	bl	80006c8 <__aeabi_fcmplt>
 80095e2:	b140      	cbz	r0, 80095f6 <sqrtf+0x30>
 80095e4:	f7fe ff98 	bl	8008518 <__errno>
 80095e8:	2321      	movs	r3, #33	@ 0x21
 80095ea:	2100      	movs	r1, #0
 80095ec:	6003      	str	r3, [r0, #0]
 80095ee:	4608      	mov	r0, r1
 80095f0:	f7f6 ff80 	bl	80004f4 <__aeabi_fdiv>
 80095f4:	4604      	mov	r4, r0
 80095f6:	4620      	mov	r0, r4
 80095f8:	bd38      	pop	{r3, r4, r5, pc}
	...

080095fc <cosf>:
 80095fc:	b507      	push	{r0, r1, r2, lr}
 80095fe:	4a1a      	ldr	r2, [pc, #104]	@ (8009668 <cosf+0x6c>)
 8009600:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8009604:	4293      	cmp	r3, r2
 8009606:	4601      	mov	r1, r0
 8009608:	d805      	bhi.n	8009616 <cosf+0x1a>
 800960a:	2100      	movs	r1, #0
 800960c:	b003      	add	sp, #12
 800960e:	f85d eb04 	ldr.w	lr, [sp], #4
 8009612:	f000 b8dd 	b.w	80097d0 <__kernel_cosf>
 8009616:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800961a:	d304      	bcc.n	8009626 <cosf+0x2a>
 800961c:	f7f6 fdac 	bl	8000178 <__aeabi_fsub>
 8009620:	b003      	add	sp, #12
 8009622:	f85d fb04 	ldr.w	pc, [sp], #4
 8009626:	4669      	mov	r1, sp
 8009628:	f000 fd28 	bl	800a07c <__ieee754_rem_pio2f>
 800962c:	f000 0203 	and.w	r2, r0, #3
 8009630:	2a01      	cmp	r2, #1
 8009632:	d007      	beq.n	8009644 <cosf+0x48>
 8009634:	2a02      	cmp	r2, #2
 8009636:	d00c      	beq.n	8009652 <cosf+0x56>
 8009638:	b982      	cbnz	r2, 800965c <cosf+0x60>
 800963a:	9901      	ldr	r1, [sp, #4]
 800963c:	9800      	ldr	r0, [sp, #0]
 800963e:	f000 f8c7 	bl	80097d0 <__kernel_cosf>
 8009642:	e7ed      	b.n	8009620 <cosf+0x24>
 8009644:	9901      	ldr	r1, [sp, #4]
 8009646:	9800      	ldr	r0, [sp, #0]
 8009648:	f000 f942 	bl	80098d0 <__kernel_sinf>
 800964c:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8009650:	e7e6      	b.n	8009620 <cosf+0x24>
 8009652:	9901      	ldr	r1, [sp, #4]
 8009654:	9800      	ldr	r0, [sp, #0]
 8009656:	f000 f8bb 	bl	80097d0 <__kernel_cosf>
 800965a:	e7f7      	b.n	800964c <cosf+0x50>
 800965c:	2201      	movs	r2, #1
 800965e:	9901      	ldr	r1, [sp, #4]
 8009660:	9800      	ldr	r0, [sp, #0]
 8009662:	f000 f935 	bl	80098d0 <__kernel_sinf>
 8009666:	e7db      	b.n	8009620 <cosf+0x24>
 8009668:	3f490fd8 	.word	0x3f490fd8

0800966c <sinf>:
 800966c:	b507      	push	{r0, r1, r2, lr}
 800966e:	4a1b      	ldr	r2, [pc, #108]	@ (80096dc <sinf+0x70>)
 8009670:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8009674:	4293      	cmp	r3, r2
 8009676:	4601      	mov	r1, r0
 8009678:	d806      	bhi.n	8009688 <sinf+0x1c>
 800967a:	2200      	movs	r2, #0
 800967c:	2100      	movs	r1, #0
 800967e:	b003      	add	sp, #12
 8009680:	f85d eb04 	ldr.w	lr, [sp], #4
 8009684:	f000 b924 	b.w	80098d0 <__kernel_sinf>
 8009688:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800968c:	d304      	bcc.n	8009698 <sinf+0x2c>
 800968e:	f7f6 fd73 	bl	8000178 <__aeabi_fsub>
 8009692:	b003      	add	sp, #12
 8009694:	f85d fb04 	ldr.w	pc, [sp], #4
 8009698:	4669      	mov	r1, sp
 800969a:	f000 fcef 	bl	800a07c <__ieee754_rem_pio2f>
 800969e:	f000 0003 	and.w	r0, r0, #3
 80096a2:	2801      	cmp	r0, #1
 80096a4:	d008      	beq.n	80096b8 <sinf+0x4c>
 80096a6:	2802      	cmp	r0, #2
 80096a8:	d00b      	beq.n	80096c2 <sinf+0x56>
 80096aa:	b990      	cbnz	r0, 80096d2 <sinf+0x66>
 80096ac:	2201      	movs	r2, #1
 80096ae:	9901      	ldr	r1, [sp, #4]
 80096b0:	9800      	ldr	r0, [sp, #0]
 80096b2:	f000 f90d 	bl	80098d0 <__kernel_sinf>
 80096b6:	e7ec      	b.n	8009692 <sinf+0x26>
 80096b8:	9901      	ldr	r1, [sp, #4]
 80096ba:	9800      	ldr	r0, [sp, #0]
 80096bc:	f000 f888 	bl	80097d0 <__kernel_cosf>
 80096c0:	e7e7      	b.n	8009692 <sinf+0x26>
 80096c2:	2201      	movs	r2, #1
 80096c4:	9901      	ldr	r1, [sp, #4]
 80096c6:	9800      	ldr	r0, [sp, #0]
 80096c8:	f000 f902 	bl	80098d0 <__kernel_sinf>
 80096cc:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 80096d0:	e7df      	b.n	8009692 <sinf+0x26>
 80096d2:	9901      	ldr	r1, [sp, #4]
 80096d4:	9800      	ldr	r0, [sp, #0]
 80096d6:	f000 f87b 	bl	80097d0 <__kernel_cosf>
 80096da:	e7f7      	b.n	80096cc <sinf+0x60>
 80096dc:	3f490fd8 	.word	0x3f490fd8

080096e0 <finitef>:
 80096e0:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80096e4:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 80096e8:	bfac      	ite	ge
 80096ea:	2000      	movge	r0, #0
 80096ec:	2001      	movlt	r0, #1
 80096ee:	4770      	bx	lr

080096f0 <__ieee754_sqrtf>:
 80096f0:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 80096f4:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80096f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096fc:	4603      	mov	r3, r0
 80096fe:	4604      	mov	r4, r0
 8009700:	d30a      	bcc.n	8009718 <__ieee754_sqrtf+0x28>
 8009702:	4601      	mov	r1, r0
 8009704:	f7f6 fe42 	bl	800038c <__aeabi_fmul>
 8009708:	4601      	mov	r1, r0
 800970a:	4620      	mov	r0, r4
 800970c:	f7f6 fd36 	bl	800017c <__addsf3>
 8009710:	4604      	mov	r4, r0
 8009712:	4620      	mov	r0, r4
 8009714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009718:	2a00      	cmp	r2, #0
 800971a:	d0fa      	beq.n	8009712 <__ieee754_sqrtf+0x22>
 800971c:	2800      	cmp	r0, #0
 800971e:	da06      	bge.n	800972e <__ieee754_sqrtf+0x3e>
 8009720:	4601      	mov	r1, r0
 8009722:	f7f6 fd29 	bl	8000178 <__aeabi_fsub>
 8009726:	4601      	mov	r1, r0
 8009728:	f7f6 fee4 	bl	80004f4 <__aeabi_fdiv>
 800972c:	e7f0      	b.n	8009710 <__ieee754_sqrtf+0x20>
 800972e:	f010 41ff 	ands.w	r1, r0, #2139095040	@ 0x7f800000
 8009732:	d03c      	beq.n	80097ae <__ieee754_sqrtf+0xbe>
 8009734:	15c2      	asrs	r2, r0, #23
 8009736:	2400      	movs	r4, #0
 8009738:	2019      	movs	r0, #25
 800973a:	4626      	mov	r6, r4
 800973c:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8009740:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009744:	f1a2 057f 	sub.w	r5, r2, #127	@ 0x7f
 8009748:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800974c:	07d2      	lsls	r2, r2, #31
 800974e:	bf58      	it	pl
 8009750:	005b      	lslpl	r3, r3, #1
 8009752:	106d      	asrs	r5, r5, #1
 8009754:	005b      	lsls	r3, r3, #1
 8009756:	1872      	adds	r2, r6, r1
 8009758:	429a      	cmp	r2, r3
 800975a:	bfcf      	iteee	gt
 800975c:	461a      	movgt	r2, r3
 800975e:	1856      	addle	r6, r2, r1
 8009760:	1864      	addle	r4, r4, r1
 8009762:	1a9a      	suble	r2, r3, r2
 8009764:	3801      	subs	r0, #1
 8009766:	ea4f 0342 	mov.w	r3, r2, lsl #1
 800976a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800976e:	d1f2      	bne.n	8009756 <__ieee754_sqrtf+0x66>
 8009770:	b1ba      	cbz	r2, 80097a2 <__ieee754_sqrtf+0xb2>
 8009772:	4e15      	ldr	r6, [pc, #84]	@ (80097c8 <__ieee754_sqrtf+0xd8>)
 8009774:	4f15      	ldr	r7, [pc, #84]	@ (80097cc <__ieee754_sqrtf+0xdc>)
 8009776:	6830      	ldr	r0, [r6, #0]
 8009778:	6839      	ldr	r1, [r7, #0]
 800977a:	f7f6 fcfd 	bl	8000178 <__aeabi_fsub>
 800977e:	f8d6 8000 	ldr.w	r8, [r6]
 8009782:	4601      	mov	r1, r0
 8009784:	4640      	mov	r0, r8
 8009786:	f7f6 ffa9 	bl	80006dc <__aeabi_fcmple>
 800978a:	b150      	cbz	r0, 80097a2 <__ieee754_sqrtf+0xb2>
 800978c:	6830      	ldr	r0, [r6, #0]
 800978e:	6839      	ldr	r1, [r7, #0]
 8009790:	f7f6 fcf4 	bl	800017c <__addsf3>
 8009794:	6836      	ldr	r6, [r6, #0]
 8009796:	4601      	mov	r1, r0
 8009798:	4630      	mov	r0, r6
 800979a:	f7f6 ff95 	bl	80006c8 <__aeabi_fcmplt>
 800979e:	b170      	cbz	r0, 80097be <__ieee754_sqrtf+0xce>
 80097a0:	3402      	adds	r4, #2
 80097a2:	1064      	asrs	r4, r4, #1
 80097a4:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 80097a8:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 80097ac:	e7b1      	b.n	8009712 <__ieee754_sqrtf+0x22>
 80097ae:	005b      	lsls	r3, r3, #1
 80097b0:	0218      	lsls	r0, r3, #8
 80097b2:	460a      	mov	r2, r1
 80097b4:	f101 0101 	add.w	r1, r1, #1
 80097b8:	d5f9      	bpl.n	80097ae <__ieee754_sqrtf+0xbe>
 80097ba:	4252      	negs	r2, r2
 80097bc:	e7bb      	b.n	8009736 <__ieee754_sqrtf+0x46>
 80097be:	3401      	adds	r4, #1
 80097c0:	f024 0401 	bic.w	r4, r4, #1
 80097c4:	e7ed      	b.n	80097a2 <__ieee754_sqrtf+0xb2>
 80097c6:	bf00      	nop
 80097c8:	0800af34 	.word	0x0800af34
 80097cc:	0800af30 	.word	0x0800af30

080097d0 <__kernel_cosf>:
 80097d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097d4:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 80097d8:	f1b5 5f48 	cmp.w	r5, #838860800	@ 0x32000000
 80097dc:	4606      	mov	r6, r0
 80097de:	4688      	mov	r8, r1
 80097e0:	d203      	bcs.n	80097ea <__kernel_cosf+0x1a>
 80097e2:	f7f6 ffaf 	bl	8000744 <__aeabi_f2iz>
 80097e6:	2800      	cmp	r0, #0
 80097e8:	d05c      	beq.n	80098a4 <__kernel_cosf+0xd4>
 80097ea:	4631      	mov	r1, r6
 80097ec:	4630      	mov	r0, r6
 80097ee:	f7f6 fdcd 	bl	800038c <__aeabi_fmul>
 80097f2:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80097f6:	4604      	mov	r4, r0
 80097f8:	f7f6 fdc8 	bl	800038c <__aeabi_fmul>
 80097fc:	492b      	ldr	r1, [pc, #172]	@ (80098ac <__kernel_cosf+0xdc>)
 80097fe:	4607      	mov	r7, r0
 8009800:	4620      	mov	r0, r4
 8009802:	f7f6 fdc3 	bl	800038c <__aeabi_fmul>
 8009806:	492a      	ldr	r1, [pc, #168]	@ (80098b0 <__kernel_cosf+0xe0>)
 8009808:	f7f6 fcb8 	bl	800017c <__addsf3>
 800980c:	4621      	mov	r1, r4
 800980e:	f7f6 fdbd 	bl	800038c <__aeabi_fmul>
 8009812:	4928      	ldr	r1, [pc, #160]	@ (80098b4 <__kernel_cosf+0xe4>)
 8009814:	f7f6 fcb0 	bl	8000178 <__aeabi_fsub>
 8009818:	4621      	mov	r1, r4
 800981a:	f7f6 fdb7 	bl	800038c <__aeabi_fmul>
 800981e:	4926      	ldr	r1, [pc, #152]	@ (80098b8 <__kernel_cosf+0xe8>)
 8009820:	f7f6 fcac 	bl	800017c <__addsf3>
 8009824:	4621      	mov	r1, r4
 8009826:	f7f6 fdb1 	bl	800038c <__aeabi_fmul>
 800982a:	4924      	ldr	r1, [pc, #144]	@ (80098bc <__kernel_cosf+0xec>)
 800982c:	f7f6 fca4 	bl	8000178 <__aeabi_fsub>
 8009830:	4621      	mov	r1, r4
 8009832:	f7f6 fdab 	bl	800038c <__aeabi_fmul>
 8009836:	4922      	ldr	r1, [pc, #136]	@ (80098c0 <__kernel_cosf+0xf0>)
 8009838:	f7f6 fca0 	bl	800017c <__addsf3>
 800983c:	4621      	mov	r1, r4
 800983e:	f7f6 fda5 	bl	800038c <__aeabi_fmul>
 8009842:	4621      	mov	r1, r4
 8009844:	f7f6 fda2 	bl	800038c <__aeabi_fmul>
 8009848:	4641      	mov	r1, r8
 800984a:	4604      	mov	r4, r0
 800984c:	4630      	mov	r0, r6
 800984e:	f7f6 fd9d 	bl	800038c <__aeabi_fmul>
 8009852:	4601      	mov	r1, r0
 8009854:	4620      	mov	r0, r4
 8009856:	f7f6 fc8f 	bl	8000178 <__aeabi_fsub>
 800985a:	4b1a      	ldr	r3, [pc, #104]	@ (80098c4 <__kernel_cosf+0xf4>)
 800985c:	4604      	mov	r4, r0
 800985e:	429d      	cmp	r5, r3
 8009860:	d80a      	bhi.n	8009878 <__kernel_cosf+0xa8>
 8009862:	4601      	mov	r1, r0
 8009864:	4638      	mov	r0, r7
 8009866:	f7f6 fc87 	bl	8000178 <__aeabi_fsub>
 800986a:	4601      	mov	r1, r0
 800986c:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8009870:	f7f6 fc82 	bl	8000178 <__aeabi_fsub>
 8009874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009878:	4b13      	ldr	r3, [pc, #76]	@ (80098c8 <__kernel_cosf+0xf8>)
 800987a:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800987e:	429d      	cmp	r5, r3
 8009880:	bf8c      	ite	hi
 8009882:	4d12      	ldrhi	r5, [pc, #72]	@ (80098cc <__kernel_cosf+0xfc>)
 8009884:	f105 457f 	addls.w	r5, r5, #4278190080	@ 0xff000000
 8009888:	4629      	mov	r1, r5
 800988a:	f7f6 fc75 	bl	8000178 <__aeabi_fsub>
 800988e:	4629      	mov	r1, r5
 8009890:	4606      	mov	r6, r0
 8009892:	4638      	mov	r0, r7
 8009894:	f7f6 fc70 	bl	8000178 <__aeabi_fsub>
 8009898:	4621      	mov	r1, r4
 800989a:	f7f6 fc6d 	bl	8000178 <__aeabi_fsub>
 800989e:	4601      	mov	r1, r0
 80098a0:	4630      	mov	r0, r6
 80098a2:	e7e5      	b.n	8009870 <__kernel_cosf+0xa0>
 80098a4:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80098a8:	e7e4      	b.n	8009874 <__kernel_cosf+0xa4>
 80098aa:	bf00      	nop
 80098ac:	ad47d74e 	.word	0xad47d74e
 80098b0:	310f74f6 	.word	0x310f74f6
 80098b4:	3493f27c 	.word	0x3493f27c
 80098b8:	37d00d01 	.word	0x37d00d01
 80098bc:	3ab60b61 	.word	0x3ab60b61
 80098c0:	3d2aaaab 	.word	0x3d2aaaab
 80098c4:	3e999999 	.word	0x3e999999
 80098c8:	3f480000 	.word	0x3f480000
 80098cc:	3e900000 	.word	0x3e900000

080098d0 <__kernel_sinf>:
 80098d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098d4:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 80098d8:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80098dc:	4604      	mov	r4, r0
 80098de:	460f      	mov	r7, r1
 80098e0:	4691      	mov	r9, r2
 80098e2:	d203      	bcs.n	80098ec <__kernel_sinf+0x1c>
 80098e4:	f7f6 ff2e 	bl	8000744 <__aeabi_f2iz>
 80098e8:	2800      	cmp	r0, #0
 80098ea:	d035      	beq.n	8009958 <__kernel_sinf+0x88>
 80098ec:	4621      	mov	r1, r4
 80098ee:	4620      	mov	r0, r4
 80098f0:	f7f6 fd4c 	bl	800038c <__aeabi_fmul>
 80098f4:	4605      	mov	r5, r0
 80098f6:	4601      	mov	r1, r0
 80098f8:	4620      	mov	r0, r4
 80098fa:	f7f6 fd47 	bl	800038c <__aeabi_fmul>
 80098fe:	4929      	ldr	r1, [pc, #164]	@ (80099a4 <__kernel_sinf+0xd4>)
 8009900:	4606      	mov	r6, r0
 8009902:	4628      	mov	r0, r5
 8009904:	f7f6 fd42 	bl	800038c <__aeabi_fmul>
 8009908:	4927      	ldr	r1, [pc, #156]	@ (80099a8 <__kernel_sinf+0xd8>)
 800990a:	f7f6 fc35 	bl	8000178 <__aeabi_fsub>
 800990e:	4629      	mov	r1, r5
 8009910:	f7f6 fd3c 	bl	800038c <__aeabi_fmul>
 8009914:	4925      	ldr	r1, [pc, #148]	@ (80099ac <__kernel_sinf+0xdc>)
 8009916:	f7f6 fc31 	bl	800017c <__addsf3>
 800991a:	4629      	mov	r1, r5
 800991c:	f7f6 fd36 	bl	800038c <__aeabi_fmul>
 8009920:	4923      	ldr	r1, [pc, #140]	@ (80099b0 <__kernel_sinf+0xe0>)
 8009922:	f7f6 fc29 	bl	8000178 <__aeabi_fsub>
 8009926:	4629      	mov	r1, r5
 8009928:	f7f6 fd30 	bl	800038c <__aeabi_fmul>
 800992c:	4921      	ldr	r1, [pc, #132]	@ (80099b4 <__kernel_sinf+0xe4>)
 800992e:	f7f6 fc25 	bl	800017c <__addsf3>
 8009932:	4680      	mov	r8, r0
 8009934:	f1b9 0f00 	cmp.w	r9, #0
 8009938:	d111      	bne.n	800995e <__kernel_sinf+0x8e>
 800993a:	4601      	mov	r1, r0
 800993c:	4628      	mov	r0, r5
 800993e:	f7f6 fd25 	bl	800038c <__aeabi_fmul>
 8009942:	491d      	ldr	r1, [pc, #116]	@ (80099b8 <__kernel_sinf+0xe8>)
 8009944:	f7f6 fc18 	bl	8000178 <__aeabi_fsub>
 8009948:	4631      	mov	r1, r6
 800994a:	f7f6 fd1f 	bl	800038c <__aeabi_fmul>
 800994e:	4601      	mov	r1, r0
 8009950:	4620      	mov	r0, r4
 8009952:	f7f6 fc13 	bl	800017c <__addsf3>
 8009956:	4604      	mov	r4, r0
 8009958:	4620      	mov	r0, r4
 800995a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800995e:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8009962:	4638      	mov	r0, r7
 8009964:	f7f6 fd12 	bl	800038c <__aeabi_fmul>
 8009968:	4641      	mov	r1, r8
 800996a:	4681      	mov	r9, r0
 800996c:	4630      	mov	r0, r6
 800996e:	f7f6 fd0d 	bl	800038c <__aeabi_fmul>
 8009972:	4601      	mov	r1, r0
 8009974:	4648      	mov	r0, r9
 8009976:	f7f6 fbff 	bl	8000178 <__aeabi_fsub>
 800997a:	4629      	mov	r1, r5
 800997c:	f7f6 fd06 	bl	800038c <__aeabi_fmul>
 8009980:	4639      	mov	r1, r7
 8009982:	f7f6 fbf9 	bl	8000178 <__aeabi_fsub>
 8009986:	490c      	ldr	r1, [pc, #48]	@ (80099b8 <__kernel_sinf+0xe8>)
 8009988:	4605      	mov	r5, r0
 800998a:	4630      	mov	r0, r6
 800998c:	f7f6 fcfe 	bl	800038c <__aeabi_fmul>
 8009990:	4601      	mov	r1, r0
 8009992:	4628      	mov	r0, r5
 8009994:	f7f6 fbf2 	bl	800017c <__addsf3>
 8009998:	4601      	mov	r1, r0
 800999a:	4620      	mov	r0, r4
 800999c:	f7f6 fbec 	bl	8000178 <__aeabi_fsub>
 80099a0:	e7d9      	b.n	8009956 <__kernel_sinf+0x86>
 80099a2:	bf00      	nop
 80099a4:	2f2ec9d3 	.word	0x2f2ec9d3
 80099a8:	32d72f34 	.word	0x32d72f34
 80099ac:	3638ef1b 	.word	0x3638ef1b
 80099b0:	39500d01 	.word	0x39500d01
 80099b4:	3c088889 	.word	0x3c088889
 80099b8:	3e2aaaab 	.word	0x3e2aaaab

080099bc <__ieee754_powf>:
 80099bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099c0:	f031 4b00 	bics.w	fp, r1, #2147483648	@ 0x80000000
 80099c4:	4681      	mov	r9, r0
 80099c6:	460f      	mov	r7, r1
 80099c8:	4606      	mov	r6, r0
 80099ca:	460c      	mov	r4, r1
 80099cc:	b087      	sub	sp, #28
 80099ce:	d10c      	bne.n	80099ea <__ieee754_powf+0x2e>
 80099d0:	f480 0680 	eor.w	r6, r0, #4194304	@ 0x400000
 80099d4:	0076      	lsls	r6, r6, #1
 80099d6:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 80099da:	f240 8310 	bls.w	8009ffe <__ieee754_powf+0x642>
 80099de:	4639      	mov	r1, r7
 80099e0:	4648      	mov	r0, r9
 80099e2:	f7f6 fbcb 	bl	800017c <__addsf3>
 80099e6:	4601      	mov	r1, r0
 80099e8:	e043      	b.n	8009a72 <__ieee754_powf+0xb6>
 80099ea:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 80099ee:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 80099f2:	d802      	bhi.n	80099fa <__ieee754_powf+0x3e>
 80099f4:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 80099f8:	d908      	bls.n	8009a0c <__ieee754_powf+0x50>
 80099fa:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 80099fe:	d1ee      	bne.n	80099de <__ieee754_powf+0x22>
 8009a00:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8009a04:	0064      	lsls	r4, r4, #1
 8009a06:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8009a0a:	e7e6      	b.n	80099da <__ieee754_powf+0x1e>
 8009a0c:	2800      	cmp	r0, #0
 8009a0e:	da1f      	bge.n	8009a50 <__ieee754_powf+0x94>
 8009a10:	f1bb 4f97 	cmp.w	fp, #1266679808	@ 0x4b800000
 8009a14:	f080 82f8 	bcs.w	800a008 <__ieee754_powf+0x64c>
 8009a18:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 8009a1c:	d32f      	bcc.n	8009a7e <__ieee754_powf+0xc2>
 8009a1e:	ea4f 53eb 	mov.w	r3, fp, asr #23
 8009a22:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8009a26:	fa4b f503 	asr.w	r5, fp, r3
 8009a2a:	fa05 f303 	lsl.w	r3, r5, r3
 8009a2e:	455b      	cmp	r3, fp
 8009a30:	d123      	bne.n	8009a7a <__ieee754_powf+0xbe>
 8009a32:	f005 0501 	and.w	r5, r5, #1
 8009a36:	f1c5 0502 	rsb	r5, r5, #2
 8009a3a:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 8009a3e:	d11f      	bne.n	8009a80 <__ieee754_powf+0xc4>
 8009a40:	2c00      	cmp	r4, #0
 8009a42:	4649      	mov	r1, r9
 8009a44:	da15      	bge.n	8009a72 <__ieee754_powf+0xb6>
 8009a46:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8009a4a:	f7f6 fd53 	bl	80004f4 <__aeabi_fdiv>
 8009a4e:	e7ca      	b.n	80099e6 <__ieee754_powf+0x2a>
 8009a50:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 8009a54:	d111      	bne.n	8009a7a <__ieee754_powf+0xbe>
 8009a56:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8009a5a:	f000 82d0 	beq.w	8009ffe <__ieee754_powf+0x642>
 8009a5e:	d904      	bls.n	8009a6a <__ieee754_powf+0xae>
 8009a60:	2c00      	cmp	r4, #0
 8009a62:	f280 82cf 	bge.w	800a004 <__ieee754_powf+0x648>
 8009a66:	2100      	movs	r1, #0
 8009a68:	e003      	b.n	8009a72 <__ieee754_powf+0xb6>
 8009a6a:	2c00      	cmp	r4, #0
 8009a6c:	dafb      	bge.n	8009a66 <__ieee754_powf+0xaa>
 8009a6e:	f107 4100 	add.w	r1, r7, #2147483648	@ 0x80000000
 8009a72:	4608      	mov	r0, r1
 8009a74:	b007      	add	sp, #28
 8009a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a7a:	2500      	movs	r5, #0
 8009a7c:	e7dd      	b.n	8009a3a <__ieee754_powf+0x7e>
 8009a7e:	2500      	movs	r5, #0
 8009a80:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8009a84:	d104      	bne.n	8009a90 <__ieee754_powf+0xd4>
 8009a86:	4649      	mov	r1, r9
 8009a88:	4648      	mov	r0, r9
 8009a8a:	f7f6 fc7f 	bl	800038c <__aeabi_fmul>
 8009a8e:	e7aa      	b.n	80099e6 <__ieee754_powf+0x2a>
 8009a90:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8009a94:	f040 82bd 	bne.w	800a012 <__ieee754_powf+0x656>
 8009a98:	2e00      	cmp	r6, #0
 8009a9a:	f2c0 82ba 	blt.w	800a012 <__ieee754_powf+0x656>
 8009a9e:	4648      	mov	r0, r9
 8009aa0:	b007      	add	sp, #28
 8009aa2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aa6:	f7ff be23 	b.w	80096f0 <__ieee754_sqrtf>
 8009aaa:	2d01      	cmp	r5, #1
 8009aac:	d1e1      	bne.n	8009a72 <__ieee754_powf+0xb6>
 8009aae:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 8009ab2:	e798      	b.n	80099e6 <__ieee754_powf+0x2a>
 8009ab4:	0ff3      	lsrs	r3, r6, #31
 8009ab6:	3b01      	subs	r3, #1
 8009ab8:	9303      	str	r3, [sp, #12]
 8009aba:	432b      	orrs	r3, r5
 8009abc:	d101      	bne.n	8009ac2 <__ieee754_powf+0x106>
 8009abe:	4649      	mov	r1, r9
 8009ac0:	e2c5      	b.n	800a04e <__ieee754_powf+0x692>
 8009ac2:	f1bb 4f9a 	cmp.w	fp, #1291845632	@ 0x4d000000
 8009ac6:	f240 809b 	bls.w	8009c00 <__ieee754_powf+0x244>
 8009aca:	4b46      	ldr	r3, [pc, #280]	@ (8009be4 <__ieee754_powf+0x228>)
 8009acc:	4598      	cmp	r8, r3
 8009ace:	d807      	bhi.n	8009ae0 <__ieee754_powf+0x124>
 8009ad0:	2c00      	cmp	r4, #0
 8009ad2:	da0a      	bge.n	8009aea <__ieee754_powf+0x12e>
 8009ad4:	2000      	movs	r0, #0
 8009ad6:	b007      	add	sp, #28
 8009ad8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009adc:	f000 bc9d 	b.w	800a41a <__math_oflowf>
 8009ae0:	4b41      	ldr	r3, [pc, #260]	@ (8009be8 <__ieee754_powf+0x22c>)
 8009ae2:	4598      	cmp	r8, r3
 8009ae4:	d907      	bls.n	8009af6 <__ieee754_powf+0x13a>
 8009ae6:	2c00      	cmp	r4, #0
 8009ae8:	dcf4      	bgt.n	8009ad4 <__ieee754_powf+0x118>
 8009aea:	2000      	movs	r0, #0
 8009aec:	b007      	add	sp, #28
 8009aee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009af2:	f000 bc8e 	b.w	800a412 <__math_uflowf>
 8009af6:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8009afa:	f7f6 fb3d 	bl	8000178 <__aeabi_fsub>
 8009afe:	493b      	ldr	r1, [pc, #236]	@ (8009bec <__ieee754_powf+0x230>)
 8009b00:	4606      	mov	r6, r0
 8009b02:	f7f6 fc43 	bl	800038c <__aeabi_fmul>
 8009b06:	493a      	ldr	r1, [pc, #232]	@ (8009bf0 <__ieee754_powf+0x234>)
 8009b08:	4680      	mov	r8, r0
 8009b0a:	4630      	mov	r0, r6
 8009b0c:	f7f6 fc3e 	bl	800038c <__aeabi_fmul>
 8009b10:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 8009b14:	4681      	mov	r9, r0
 8009b16:	4630      	mov	r0, r6
 8009b18:	f7f6 fc38 	bl	800038c <__aeabi_fmul>
 8009b1c:	4601      	mov	r1, r0
 8009b1e:	4835      	ldr	r0, [pc, #212]	@ (8009bf4 <__ieee754_powf+0x238>)
 8009b20:	f7f6 fb2a 	bl	8000178 <__aeabi_fsub>
 8009b24:	4631      	mov	r1, r6
 8009b26:	f7f6 fc31 	bl	800038c <__aeabi_fmul>
 8009b2a:	4601      	mov	r1, r0
 8009b2c:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 8009b30:	f7f6 fb22 	bl	8000178 <__aeabi_fsub>
 8009b34:	4631      	mov	r1, r6
 8009b36:	4682      	mov	sl, r0
 8009b38:	4630      	mov	r0, r6
 8009b3a:	f7f6 fc27 	bl	800038c <__aeabi_fmul>
 8009b3e:	4601      	mov	r1, r0
 8009b40:	4650      	mov	r0, sl
 8009b42:	f7f6 fc23 	bl	800038c <__aeabi_fmul>
 8009b46:	492c      	ldr	r1, [pc, #176]	@ (8009bf8 <__ieee754_powf+0x23c>)
 8009b48:	f7f6 fc20 	bl	800038c <__aeabi_fmul>
 8009b4c:	4601      	mov	r1, r0
 8009b4e:	4648      	mov	r0, r9
 8009b50:	f7f6 fb12 	bl	8000178 <__aeabi_fsub>
 8009b54:	4601      	mov	r1, r0
 8009b56:	4606      	mov	r6, r0
 8009b58:	4640      	mov	r0, r8
 8009b5a:	f7f6 fb0f 	bl	800017c <__addsf3>
 8009b5e:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 8009b62:	f02b 0b0f 	bic.w	fp, fp, #15
 8009b66:	4641      	mov	r1, r8
 8009b68:	4658      	mov	r0, fp
 8009b6a:	f7f6 fb05 	bl	8000178 <__aeabi_fsub>
 8009b6e:	4601      	mov	r1, r0
 8009b70:	4630      	mov	r0, r6
 8009b72:	f7f6 fb01 	bl	8000178 <__aeabi_fsub>
 8009b76:	9b03      	ldr	r3, [sp, #12]
 8009b78:	3d01      	subs	r5, #1
 8009b7a:	f36f 040b 	bfc	r4, #0, #12
 8009b7e:	431d      	orrs	r5, r3
 8009b80:	4606      	mov	r6, r0
 8009b82:	4621      	mov	r1, r4
 8009b84:	4638      	mov	r0, r7
 8009b86:	bf14      	ite	ne
 8009b88:	f04f 557e 	movne.w	r5, #1065353216	@ 0x3f800000
 8009b8c:	4d1b      	ldreq	r5, [pc, #108]	@ (8009bfc <__ieee754_powf+0x240>)
 8009b8e:	f7f6 faf3 	bl	8000178 <__aeabi_fsub>
 8009b92:	4659      	mov	r1, fp
 8009b94:	f7f6 fbfa 	bl	800038c <__aeabi_fmul>
 8009b98:	4639      	mov	r1, r7
 8009b9a:	4680      	mov	r8, r0
 8009b9c:	4630      	mov	r0, r6
 8009b9e:	f7f6 fbf5 	bl	800038c <__aeabi_fmul>
 8009ba2:	4601      	mov	r1, r0
 8009ba4:	4640      	mov	r0, r8
 8009ba6:	f7f6 fae9 	bl	800017c <__addsf3>
 8009baa:	4621      	mov	r1, r4
 8009bac:	4606      	mov	r6, r0
 8009bae:	4658      	mov	r0, fp
 8009bb0:	f7f6 fbec 	bl	800038c <__aeabi_fmul>
 8009bb4:	4601      	mov	r1, r0
 8009bb6:	4607      	mov	r7, r0
 8009bb8:	4630      	mov	r0, r6
 8009bba:	f7f6 fadf 	bl	800017c <__addsf3>
 8009bbe:	2800      	cmp	r0, #0
 8009bc0:	4604      	mov	r4, r0
 8009bc2:	4680      	mov	r8, r0
 8009bc4:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8009bc8:	f340 813f 	ble.w	8009e4a <__ieee754_powf+0x48e>
 8009bcc:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8009bd0:	f240 8128 	bls.w	8009e24 <__ieee754_powf+0x468>
 8009bd4:	2100      	movs	r1, #0
 8009bd6:	4628      	mov	r0, r5
 8009bd8:	f7f6 fd76 	bl	80006c8 <__aeabi_fcmplt>
 8009bdc:	3800      	subs	r0, #0
 8009bde:	bf18      	it	ne
 8009be0:	2001      	movne	r0, #1
 8009be2:	e778      	b.n	8009ad6 <__ieee754_powf+0x11a>
 8009be4:	3f7ffff3 	.word	0x3f7ffff3
 8009be8:	3f800007 	.word	0x3f800007
 8009bec:	3fb8aa00 	.word	0x3fb8aa00
 8009bf0:	36eca570 	.word	0x36eca570
 8009bf4:	3eaaaaab 	.word	0x3eaaaaab
 8009bf8:	3fb8aa3b 	.word	0x3fb8aa3b
 8009bfc:	bf800000 	.word	0xbf800000
 8009c00:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8009c04:	f040 810a 	bne.w	8009e1c <__ieee754_powf+0x460>
 8009c08:	f04f 4197 	mov.w	r1, #1266679808	@ 0x4b800000
 8009c0c:	f7f6 fbbe 	bl	800038c <__aeabi_fmul>
 8009c10:	f06f 0217 	mvn.w	r2, #23
 8009c14:	4682      	mov	sl, r0
 8009c16:	ea4f 53ea 	mov.w	r3, sl, asr #23
 8009c1a:	3b7f      	subs	r3, #127	@ 0x7f
 8009c1c:	441a      	add	r2, r3
 8009c1e:	4b95      	ldr	r3, [pc, #596]	@ (8009e74 <__ieee754_powf+0x4b8>)
 8009c20:	f3ca 0a16 	ubfx	sl, sl, #0, #23
 8009c24:	459a      	cmp	sl, r3
 8009c26:	f04a 567e 	orr.w	r6, sl, #1065353216	@ 0x3f800000
 8009c2a:	dd06      	ble.n	8009c3a <__ieee754_powf+0x27e>
 8009c2c:	4b92      	ldr	r3, [pc, #584]	@ (8009e78 <__ieee754_powf+0x4bc>)
 8009c2e:	459a      	cmp	sl, r3
 8009c30:	f340 80f6 	ble.w	8009e20 <__ieee754_powf+0x464>
 8009c34:	3201      	adds	r2, #1
 8009c36:	f5a6 0600 	sub.w	r6, r6, #8388608	@ 0x800000
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	9301      	str	r3, [sp, #4]
 8009c3e:	9205      	str	r2, [sp, #20]
 8009c40:	4b8e      	ldr	r3, [pc, #568]	@ (8009e7c <__ieee754_powf+0x4c0>)
 8009c42:	9a01      	ldr	r2, [sp, #4]
 8009c44:	4630      	mov	r0, r6
 8009c46:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 8009c4a:	46b2      	mov	sl, r6
 8009c4c:	4659      	mov	r1, fp
 8009c4e:	f7f6 fa93 	bl	8000178 <__aeabi_fsub>
 8009c52:	4631      	mov	r1, r6
 8009c54:	4681      	mov	r9, r0
 8009c56:	4658      	mov	r0, fp
 8009c58:	f7f6 fa90 	bl	800017c <__addsf3>
 8009c5c:	4601      	mov	r1, r0
 8009c5e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8009c62:	f7f6 fc47 	bl	80004f4 <__aeabi_fdiv>
 8009c66:	4601      	mov	r1, r0
 8009c68:	9004      	str	r0, [sp, #16]
 8009c6a:	4648      	mov	r0, r9
 8009c6c:	f7f6 fb8e 	bl	800038c <__aeabi_fmul>
 8009c70:	9002      	str	r0, [sp, #8]
 8009c72:	9b02      	ldr	r3, [sp, #8]
 8009c74:	1076      	asrs	r6, r6, #1
 8009c76:	f36f 030b 	bfc	r3, #0, #12
 8009c7a:	4698      	mov	r8, r3
 8009c7c:	f046 5600 	orr.w	r6, r6, #536870912	@ 0x20000000
 8009c80:	9b01      	ldr	r3, [sp, #4]
 8009c82:	f506 2680 	add.w	r6, r6, #262144	@ 0x40000
 8009c86:	eb06 5643 	add.w	r6, r6, r3, lsl #21
 8009c8a:	4631      	mov	r1, r6
 8009c8c:	4640      	mov	r0, r8
 8009c8e:	f7f6 fb7d 	bl	800038c <__aeabi_fmul>
 8009c92:	4601      	mov	r1, r0
 8009c94:	4648      	mov	r0, r9
 8009c96:	f7f6 fa6f 	bl	8000178 <__aeabi_fsub>
 8009c9a:	4659      	mov	r1, fp
 8009c9c:	4681      	mov	r9, r0
 8009c9e:	4630      	mov	r0, r6
 8009ca0:	f7f6 fa6a 	bl	8000178 <__aeabi_fsub>
 8009ca4:	4601      	mov	r1, r0
 8009ca6:	4650      	mov	r0, sl
 8009ca8:	f7f6 fa66 	bl	8000178 <__aeabi_fsub>
 8009cac:	4641      	mov	r1, r8
 8009cae:	f7f6 fb6d 	bl	800038c <__aeabi_fmul>
 8009cb2:	4601      	mov	r1, r0
 8009cb4:	4648      	mov	r0, r9
 8009cb6:	f7f6 fa5f 	bl	8000178 <__aeabi_fsub>
 8009cba:	9b04      	ldr	r3, [sp, #16]
 8009cbc:	4619      	mov	r1, r3
 8009cbe:	f7f6 fb65 	bl	800038c <__aeabi_fmul>
 8009cc2:	9902      	ldr	r1, [sp, #8]
 8009cc4:	4683      	mov	fp, r0
 8009cc6:	4608      	mov	r0, r1
 8009cc8:	f7f6 fb60 	bl	800038c <__aeabi_fmul>
 8009ccc:	4606      	mov	r6, r0
 8009cce:	496c      	ldr	r1, [pc, #432]	@ (8009e80 <__ieee754_powf+0x4c4>)
 8009cd0:	f7f6 fb5c 	bl	800038c <__aeabi_fmul>
 8009cd4:	496b      	ldr	r1, [pc, #428]	@ (8009e84 <__ieee754_powf+0x4c8>)
 8009cd6:	f7f6 fa51 	bl	800017c <__addsf3>
 8009cda:	4631      	mov	r1, r6
 8009cdc:	f7f6 fb56 	bl	800038c <__aeabi_fmul>
 8009ce0:	4969      	ldr	r1, [pc, #420]	@ (8009e88 <__ieee754_powf+0x4cc>)
 8009ce2:	f7f6 fa4b 	bl	800017c <__addsf3>
 8009ce6:	4631      	mov	r1, r6
 8009ce8:	f7f6 fb50 	bl	800038c <__aeabi_fmul>
 8009cec:	4967      	ldr	r1, [pc, #412]	@ (8009e8c <__ieee754_powf+0x4d0>)
 8009cee:	f7f6 fa45 	bl	800017c <__addsf3>
 8009cf2:	4631      	mov	r1, r6
 8009cf4:	f7f6 fb4a 	bl	800038c <__aeabi_fmul>
 8009cf8:	4965      	ldr	r1, [pc, #404]	@ (8009e90 <__ieee754_powf+0x4d4>)
 8009cfa:	f7f6 fa3f 	bl	800017c <__addsf3>
 8009cfe:	4631      	mov	r1, r6
 8009d00:	f7f6 fb44 	bl	800038c <__aeabi_fmul>
 8009d04:	4963      	ldr	r1, [pc, #396]	@ (8009e94 <__ieee754_powf+0x4d8>)
 8009d06:	f7f6 fa39 	bl	800017c <__addsf3>
 8009d0a:	4631      	mov	r1, r6
 8009d0c:	4681      	mov	r9, r0
 8009d0e:	4630      	mov	r0, r6
 8009d10:	f7f6 fb3c 	bl	800038c <__aeabi_fmul>
 8009d14:	4601      	mov	r1, r0
 8009d16:	4648      	mov	r0, r9
 8009d18:	f7f6 fb38 	bl	800038c <__aeabi_fmul>
 8009d1c:	4606      	mov	r6, r0
 8009d1e:	4641      	mov	r1, r8
 8009d20:	9802      	ldr	r0, [sp, #8]
 8009d22:	f7f6 fa2b 	bl	800017c <__addsf3>
 8009d26:	4659      	mov	r1, fp
 8009d28:	f7f6 fb30 	bl	800038c <__aeabi_fmul>
 8009d2c:	4631      	mov	r1, r6
 8009d2e:	f7f6 fa25 	bl	800017c <__addsf3>
 8009d32:	4641      	mov	r1, r8
 8009d34:	4681      	mov	r9, r0
 8009d36:	4640      	mov	r0, r8
 8009d38:	f7f6 fb28 	bl	800038c <__aeabi_fmul>
 8009d3c:	4956      	ldr	r1, [pc, #344]	@ (8009e98 <__ieee754_powf+0x4dc>)
 8009d3e:	4682      	mov	sl, r0
 8009d40:	f7f6 fa1c 	bl	800017c <__addsf3>
 8009d44:	4649      	mov	r1, r9
 8009d46:	f7f6 fa19 	bl	800017c <__addsf3>
 8009d4a:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 8009d4e:	f026 060f 	bic.w	r6, r6, #15
 8009d52:	4631      	mov	r1, r6
 8009d54:	4640      	mov	r0, r8
 8009d56:	f7f6 fb19 	bl	800038c <__aeabi_fmul>
 8009d5a:	494f      	ldr	r1, [pc, #316]	@ (8009e98 <__ieee754_powf+0x4dc>)
 8009d5c:	4680      	mov	r8, r0
 8009d5e:	4630      	mov	r0, r6
 8009d60:	f7f6 fa0a 	bl	8000178 <__aeabi_fsub>
 8009d64:	4651      	mov	r1, sl
 8009d66:	f7f6 fa07 	bl	8000178 <__aeabi_fsub>
 8009d6a:	4601      	mov	r1, r0
 8009d6c:	4648      	mov	r0, r9
 8009d6e:	f7f6 fa03 	bl	8000178 <__aeabi_fsub>
 8009d72:	9902      	ldr	r1, [sp, #8]
 8009d74:	f7f6 fb0a 	bl	800038c <__aeabi_fmul>
 8009d78:	4631      	mov	r1, r6
 8009d7a:	4681      	mov	r9, r0
 8009d7c:	4658      	mov	r0, fp
 8009d7e:	f7f6 fb05 	bl	800038c <__aeabi_fmul>
 8009d82:	4601      	mov	r1, r0
 8009d84:	4648      	mov	r0, r9
 8009d86:	f7f6 f9f9 	bl	800017c <__addsf3>
 8009d8a:	4682      	mov	sl, r0
 8009d8c:	4601      	mov	r1, r0
 8009d8e:	4640      	mov	r0, r8
 8009d90:	f7f6 f9f4 	bl	800017c <__addsf3>
 8009d94:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 8009d98:	f026 060f 	bic.w	r6, r6, #15
 8009d9c:	4630      	mov	r0, r6
 8009d9e:	493f      	ldr	r1, [pc, #252]	@ (8009e9c <__ieee754_powf+0x4e0>)
 8009da0:	f7f6 faf4 	bl	800038c <__aeabi_fmul>
 8009da4:	4641      	mov	r1, r8
 8009da6:	4681      	mov	r9, r0
 8009da8:	4630      	mov	r0, r6
 8009daa:	f7f6 f9e5 	bl	8000178 <__aeabi_fsub>
 8009dae:	4601      	mov	r1, r0
 8009db0:	4650      	mov	r0, sl
 8009db2:	f7f6 f9e1 	bl	8000178 <__aeabi_fsub>
 8009db6:	493a      	ldr	r1, [pc, #232]	@ (8009ea0 <__ieee754_powf+0x4e4>)
 8009db8:	f7f6 fae8 	bl	800038c <__aeabi_fmul>
 8009dbc:	4939      	ldr	r1, [pc, #228]	@ (8009ea4 <__ieee754_powf+0x4e8>)
 8009dbe:	4680      	mov	r8, r0
 8009dc0:	4630      	mov	r0, r6
 8009dc2:	f7f6 fae3 	bl	800038c <__aeabi_fmul>
 8009dc6:	4601      	mov	r1, r0
 8009dc8:	4640      	mov	r0, r8
 8009dca:	f7f6 f9d7 	bl	800017c <__addsf3>
 8009dce:	4b36      	ldr	r3, [pc, #216]	@ (8009ea8 <__ieee754_powf+0x4ec>)
 8009dd0:	9a01      	ldr	r2, [sp, #4]
 8009dd2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009dd6:	f7f6 f9d1 	bl	800017c <__addsf3>
 8009dda:	9a05      	ldr	r2, [sp, #20]
 8009ddc:	4606      	mov	r6, r0
 8009dde:	4610      	mov	r0, r2
 8009de0:	f7f6 fa80 	bl	80002e4 <__aeabi_i2f>
 8009de4:	4680      	mov	r8, r0
 8009de6:	4b31      	ldr	r3, [pc, #196]	@ (8009eac <__ieee754_powf+0x4f0>)
 8009de8:	9a01      	ldr	r2, [sp, #4]
 8009dea:	4631      	mov	r1, r6
 8009dec:	f853 a022 	ldr.w	sl, [r3, r2, lsl #2]
 8009df0:	4648      	mov	r0, r9
 8009df2:	f7f6 f9c3 	bl	800017c <__addsf3>
 8009df6:	4651      	mov	r1, sl
 8009df8:	f7f6 f9c0 	bl	800017c <__addsf3>
 8009dfc:	4641      	mov	r1, r8
 8009dfe:	f7f6 f9bd 	bl	800017c <__addsf3>
 8009e02:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 8009e06:	f02b 0b0f 	bic.w	fp, fp, #15
 8009e0a:	4641      	mov	r1, r8
 8009e0c:	4658      	mov	r0, fp
 8009e0e:	f7f6 f9b3 	bl	8000178 <__aeabi_fsub>
 8009e12:	4651      	mov	r1, sl
 8009e14:	f7f6 f9b0 	bl	8000178 <__aeabi_fsub>
 8009e18:	4649      	mov	r1, r9
 8009e1a:	e6a6      	b.n	8009b6a <__ieee754_powf+0x1ae>
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	e6fa      	b.n	8009c16 <__ieee754_powf+0x25a>
 8009e20:	2301      	movs	r3, #1
 8009e22:	e70b      	b.n	8009c3c <__ieee754_powf+0x280>
 8009e24:	d148      	bne.n	8009eb8 <__ieee754_powf+0x4fc>
 8009e26:	4922      	ldr	r1, [pc, #136]	@ (8009eb0 <__ieee754_powf+0x4f4>)
 8009e28:	4630      	mov	r0, r6
 8009e2a:	f7f6 f9a7 	bl	800017c <__addsf3>
 8009e2e:	4639      	mov	r1, r7
 8009e30:	4681      	mov	r9, r0
 8009e32:	4620      	mov	r0, r4
 8009e34:	f7f6 f9a0 	bl	8000178 <__aeabi_fsub>
 8009e38:	4601      	mov	r1, r0
 8009e3a:	4648      	mov	r0, r9
 8009e3c:	f7f6 fc62 	bl	8000704 <__aeabi_fcmpgt>
 8009e40:	2800      	cmp	r0, #0
 8009e42:	f47f aec7 	bne.w	8009bd4 <__ieee754_powf+0x218>
 8009e46:	2386      	movs	r3, #134	@ 0x86
 8009e48:	e03b      	b.n	8009ec2 <__ieee754_powf+0x506>
 8009e4a:	4a1a      	ldr	r2, [pc, #104]	@ (8009eb4 <__ieee754_powf+0x4f8>)
 8009e4c:	4293      	cmp	r3, r2
 8009e4e:	d907      	bls.n	8009e60 <__ieee754_powf+0x4a4>
 8009e50:	2100      	movs	r1, #0
 8009e52:	4628      	mov	r0, r5
 8009e54:	f7f6 fc38 	bl	80006c8 <__aeabi_fcmplt>
 8009e58:	3800      	subs	r0, #0
 8009e5a:	bf18      	it	ne
 8009e5c:	2001      	movne	r0, #1
 8009e5e:	e645      	b.n	8009aec <__ieee754_powf+0x130>
 8009e60:	d12a      	bne.n	8009eb8 <__ieee754_powf+0x4fc>
 8009e62:	4639      	mov	r1, r7
 8009e64:	f7f6 f988 	bl	8000178 <__aeabi_fsub>
 8009e68:	4631      	mov	r1, r6
 8009e6a:	f7f6 fc41 	bl	80006f0 <__aeabi_fcmpge>
 8009e6e:	2800      	cmp	r0, #0
 8009e70:	d0e9      	beq.n	8009e46 <__ieee754_powf+0x48a>
 8009e72:	e7ed      	b.n	8009e50 <__ieee754_powf+0x494>
 8009e74:	001cc471 	.word	0x001cc471
 8009e78:	005db3d6 	.word	0x005db3d6
 8009e7c:	0800af48 	.word	0x0800af48
 8009e80:	3e53f142 	.word	0x3e53f142
 8009e84:	3e6c3255 	.word	0x3e6c3255
 8009e88:	3e8ba305 	.word	0x3e8ba305
 8009e8c:	3eaaaaab 	.word	0x3eaaaaab
 8009e90:	3edb6db7 	.word	0x3edb6db7
 8009e94:	3f19999a 	.word	0x3f19999a
 8009e98:	40400000 	.word	0x40400000
 8009e9c:	3f763800 	.word	0x3f763800
 8009ea0:	3f76384f 	.word	0x3f76384f
 8009ea4:	369dc3a0 	.word	0x369dc3a0
 8009ea8:	0800af38 	.word	0x0800af38
 8009eac:	0800af40 	.word	0x0800af40
 8009eb0:	3338aa3c 	.word	0x3338aa3c
 8009eb4:	43160000 	.word	0x43160000
 8009eb8:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8009ebc:	f240 809b 	bls.w	8009ff6 <__ieee754_powf+0x63a>
 8009ec0:	15db      	asrs	r3, r3, #23
 8009ec2:	f44f 0400 	mov.w	r4, #8388608	@ 0x800000
 8009ec6:	3b7e      	subs	r3, #126	@ 0x7e
 8009ec8:	411c      	asrs	r4, r3
 8009eca:	4444      	add	r4, r8
 8009ecc:	f3c4 53c7 	ubfx	r3, r4, #23, #8
 8009ed0:	4961      	ldr	r1, [pc, #388]	@ (800a058 <__ieee754_powf+0x69c>)
 8009ed2:	3b7f      	subs	r3, #127	@ 0x7f
 8009ed4:	4119      	asrs	r1, r3
 8009ed6:	4021      	ands	r1, r4
 8009ed8:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8009edc:	f1c3 0317 	rsb	r3, r3, #23
 8009ee0:	f444 0400 	orr.w	r4, r4, #8388608	@ 0x800000
 8009ee4:	4638      	mov	r0, r7
 8009ee6:	411c      	asrs	r4, r3
 8009ee8:	f1b8 0f00 	cmp.w	r8, #0
 8009eec:	bfb8      	it	lt
 8009eee:	4264      	neglt	r4, r4
 8009ef0:	f7f6 f942 	bl	8000178 <__aeabi_fsub>
 8009ef4:	4607      	mov	r7, r0
 8009ef6:	4631      	mov	r1, r6
 8009ef8:	4638      	mov	r0, r7
 8009efa:	f7f6 f93f 	bl	800017c <__addsf3>
 8009efe:	f420 687f 	bic.w	r8, r0, #4080	@ 0xff0
 8009f02:	f028 080f 	bic.w	r8, r8, #15
 8009f06:	4640      	mov	r0, r8
 8009f08:	4954      	ldr	r1, [pc, #336]	@ (800a05c <__ieee754_powf+0x6a0>)
 8009f0a:	f7f6 fa3f 	bl	800038c <__aeabi_fmul>
 8009f0e:	4639      	mov	r1, r7
 8009f10:	4681      	mov	r9, r0
 8009f12:	4640      	mov	r0, r8
 8009f14:	f7f6 f930 	bl	8000178 <__aeabi_fsub>
 8009f18:	4601      	mov	r1, r0
 8009f1a:	4630      	mov	r0, r6
 8009f1c:	f7f6 f92c 	bl	8000178 <__aeabi_fsub>
 8009f20:	494f      	ldr	r1, [pc, #316]	@ (800a060 <__ieee754_powf+0x6a4>)
 8009f22:	f7f6 fa33 	bl	800038c <__aeabi_fmul>
 8009f26:	494f      	ldr	r1, [pc, #316]	@ (800a064 <__ieee754_powf+0x6a8>)
 8009f28:	4606      	mov	r6, r0
 8009f2a:	4640      	mov	r0, r8
 8009f2c:	f7f6 fa2e 	bl	800038c <__aeabi_fmul>
 8009f30:	4601      	mov	r1, r0
 8009f32:	4630      	mov	r0, r6
 8009f34:	f7f6 f922 	bl	800017c <__addsf3>
 8009f38:	4607      	mov	r7, r0
 8009f3a:	4601      	mov	r1, r0
 8009f3c:	4648      	mov	r0, r9
 8009f3e:	f7f6 f91d 	bl	800017c <__addsf3>
 8009f42:	4649      	mov	r1, r9
 8009f44:	4606      	mov	r6, r0
 8009f46:	f7f6 f917 	bl	8000178 <__aeabi_fsub>
 8009f4a:	4601      	mov	r1, r0
 8009f4c:	4638      	mov	r0, r7
 8009f4e:	f7f6 f913 	bl	8000178 <__aeabi_fsub>
 8009f52:	4631      	mov	r1, r6
 8009f54:	4680      	mov	r8, r0
 8009f56:	4630      	mov	r0, r6
 8009f58:	f7f6 fa18 	bl	800038c <__aeabi_fmul>
 8009f5c:	4607      	mov	r7, r0
 8009f5e:	4942      	ldr	r1, [pc, #264]	@ (800a068 <__ieee754_powf+0x6ac>)
 8009f60:	f7f6 fa14 	bl	800038c <__aeabi_fmul>
 8009f64:	4941      	ldr	r1, [pc, #260]	@ (800a06c <__ieee754_powf+0x6b0>)
 8009f66:	f7f6 f907 	bl	8000178 <__aeabi_fsub>
 8009f6a:	4639      	mov	r1, r7
 8009f6c:	f7f6 fa0e 	bl	800038c <__aeabi_fmul>
 8009f70:	493f      	ldr	r1, [pc, #252]	@ (800a070 <__ieee754_powf+0x6b4>)
 8009f72:	f7f6 f903 	bl	800017c <__addsf3>
 8009f76:	4639      	mov	r1, r7
 8009f78:	f7f6 fa08 	bl	800038c <__aeabi_fmul>
 8009f7c:	493d      	ldr	r1, [pc, #244]	@ (800a074 <__ieee754_powf+0x6b8>)
 8009f7e:	f7f6 f8fb 	bl	8000178 <__aeabi_fsub>
 8009f82:	4639      	mov	r1, r7
 8009f84:	f7f6 fa02 	bl	800038c <__aeabi_fmul>
 8009f88:	493b      	ldr	r1, [pc, #236]	@ (800a078 <__ieee754_powf+0x6bc>)
 8009f8a:	f7f6 f8f7 	bl	800017c <__addsf3>
 8009f8e:	4639      	mov	r1, r7
 8009f90:	f7f6 f9fc 	bl	800038c <__aeabi_fmul>
 8009f94:	4601      	mov	r1, r0
 8009f96:	4630      	mov	r0, r6
 8009f98:	f7f6 f8ee 	bl	8000178 <__aeabi_fsub>
 8009f9c:	4607      	mov	r7, r0
 8009f9e:	4601      	mov	r1, r0
 8009fa0:	4630      	mov	r0, r6
 8009fa2:	f7f6 f9f3 	bl	800038c <__aeabi_fmul>
 8009fa6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8009faa:	4681      	mov	r9, r0
 8009fac:	4638      	mov	r0, r7
 8009fae:	f7f6 f8e3 	bl	8000178 <__aeabi_fsub>
 8009fb2:	4601      	mov	r1, r0
 8009fb4:	4648      	mov	r0, r9
 8009fb6:	f7f6 fa9d 	bl	80004f4 <__aeabi_fdiv>
 8009fba:	4641      	mov	r1, r8
 8009fbc:	4607      	mov	r7, r0
 8009fbe:	4630      	mov	r0, r6
 8009fc0:	f7f6 f9e4 	bl	800038c <__aeabi_fmul>
 8009fc4:	4641      	mov	r1, r8
 8009fc6:	f7f6 f8d9 	bl	800017c <__addsf3>
 8009fca:	4601      	mov	r1, r0
 8009fcc:	4638      	mov	r0, r7
 8009fce:	f7f6 f8d3 	bl	8000178 <__aeabi_fsub>
 8009fd2:	4631      	mov	r1, r6
 8009fd4:	f7f6 f8d0 	bl	8000178 <__aeabi_fsub>
 8009fd8:	4601      	mov	r1, r0
 8009fda:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8009fde:	f7f6 f8cb 	bl	8000178 <__aeabi_fsub>
 8009fe2:	eb00 53c4 	add.w	r3, r0, r4, lsl #23
 8009fe6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009fea:	da06      	bge.n	8009ffa <__ieee754_powf+0x63e>
 8009fec:	4621      	mov	r1, r4
 8009fee:	f000 f9af 	bl	800a350 <scalbnf>
 8009ff2:	4629      	mov	r1, r5
 8009ff4:	e549      	b.n	8009a8a <__ieee754_powf+0xce>
 8009ff6:	2400      	movs	r4, #0
 8009ff8:	e77d      	b.n	8009ef6 <__ieee754_powf+0x53a>
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	e7f9      	b.n	8009ff2 <__ieee754_powf+0x636>
 8009ffe:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800a002:	e536      	b.n	8009a72 <__ieee754_powf+0xb6>
 800a004:	4639      	mov	r1, r7
 800a006:	e534      	b.n	8009a72 <__ieee754_powf+0xb6>
 800a008:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 800a00c:	f43f ad23 	beq.w	8009a56 <__ieee754_powf+0x9a>
 800a010:	2502      	movs	r5, #2
 800a012:	4648      	mov	r0, r9
 800a014:	f000 f998 	bl	800a348 <fabsf>
 800a018:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800a01c:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800a020:	46c2      	mov	sl, r8
 800a022:	4601      	mov	r1, r0
 800a024:	d003      	beq.n	800a02e <__ieee754_powf+0x672>
 800a026:	f1b8 0f00 	cmp.w	r8, #0
 800a02a:	f47f ad43 	bne.w	8009ab4 <__ieee754_powf+0xf8>
 800a02e:	2c00      	cmp	r4, #0
 800a030:	da04      	bge.n	800a03c <__ieee754_powf+0x680>
 800a032:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800a036:	f7f6 fa5d 	bl	80004f4 <__aeabi_fdiv>
 800a03a:	4601      	mov	r1, r0
 800a03c:	2e00      	cmp	r6, #0
 800a03e:	f6bf ad18 	bge.w	8009a72 <__ieee754_powf+0xb6>
 800a042:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800a046:	ea58 0805 	orrs.w	r8, r8, r5
 800a04a:	f47f ad2e 	bne.w	8009aaa <__ieee754_powf+0xee>
 800a04e:	4608      	mov	r0, r1
 800a050:	f7f6 f892 	bl	8000178 <__aeabi_fsub>
 800a054:	4601      	mov	r1, r0
 800a056:	e4f8      	b.n	8009a4a <__ieee754_powf+0x8e>
 800a058:	ff800000 	.word	0xff800000
 800a05c:	3f317200 	.word	0x3f317200
 800a060:	3f317218 	.word	0x3f317218
 800a064:	35bfbe8c 	.word	0x35bfbe8c
 800a068:	3331bb4c 	.word	0x3331bb4c
 800a06c:	35ddea0e 	.word	0x35ddea0e
 800a070:	388ab355 	.word	0x388ab355
 800a074:	3b360b61 	.word	0x3b360b61
 800a078:	3e2aaaab 	.word	0x3e2aaaab

0800a07c <__ieee754_rem_pio2f>:
 800a07c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a080:	4aa4      	ldr	r2, [pc, #656]	@ (800a314 <__ieee754_rem_pio2f+0x298>)
 800a082:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 800a086:	4590      	cmp	r8, r2
 800a088:	460c      	mov	r4, r1
 800a08a:	4682      	mov	sl, r0
 800a08c:	b087      	sub	sp, #28
 800a08e:	d804      	bhi.n	800a09a <__ieee754_rem_pio2f+0x1e>
 800a090:	2300      	movs	r3, #0
 800a092:	6008      	str	r0, [r1, #0]
 800a094:	604b      	str	r3, [r1, #4]
 800a096:	2500      	movs	r5, #0
 800a098:	e01d      	b.n	800a0d6 <__ieee754_rem_pio2f+0x5a>
 800a09a:	4a9f      	ldr	r2, [pc, #636]	@ (800a318 <__ieee754_rem_pio2f+0x29c>)
 800a09c:	4590      	cmp	r8, r2
 800a09e:	d84f      	bhi.n	800a140 <__ieee754_rem_pio2f+0xc4>
 800a0a0:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 800a0a4:	2800      	cmp	r0, #0
 800a0a6:	499d      	ldr	r1, [pc, #628]	@ (800a31c <__ieee754_rem_pio2f+0x2a0>)
 800a0a8:	4f9d      	ldr	r7, [pc, #628]	@ (800a320 <__ieee754_rem_pio2f+0x2a4>)
 800a0aa:	f025 050f 	bic.w	r5, r5, #15
 800a0ae:	dd24      	ble.n	800a0fa <__ieee754_rem_pio2f+0x7e>
 800a0b0:	f7f6 f862 	bl	8000178 <__aeabi_fsub>
 800a0b4:	42bd      	cmp	r5, r7
 800a0b6:	4606      	mov	r6, r0
 800a0b8:	d011      	beq.n	800a0de <__ieee754_rem_pio2f+0x62>
 800a0ba:	499a      	ldr	r1, [pc, #616]	@ (800a324 <__ieee754_rem_pio2f+0x2a8>)
 800a0bc:	f7f6 f85c 	bl	8000178 <__aeabi_fsub>
 800a0c0:	4601      	mov	r1, r0
 800a0c2:	4605      	mov	r5, r0
 800a0c4:	4630      	mov	r0, r6
 800a0c6:	f7f6 f857 	bl	8000178 <__aeabi_fsub>
 800a0ca:	4996      	ldr	r1, [pc, #600]	@ (800a324 <__ieee754_rem_pio2f+0x2a8>)
 800a0cc:	f7f6 f854 	bl	8000178 <__aeabi_fsub>
 800a0d0:	6025      	str	r5, [r4, #0]
 800a0d2:	2501      	movs	r5, #1
 800a0d4:	6060      	str	r0, [r4, #4]
 800a0d6:	4628      	mov	r0, r5
 800a0d8:	b007      	add	sp, #28
 800a0da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0de:	4992      	ldr	r1, [pc, #584]	@ (800a328 <__ieee754_rem_pio2f+0x2ac>)
 800a0e0:	f7f6 f84a 	bl	8000178 <__aeabi_fsub>
 800a0e4:	4991      	ldr	r1, [pc, #580]	@ (800a32c <__ieee754_rem_pio2f+0x2b0>)
 800a0e6:	4606      	mov	r6, r0
 800a0e8:	f7f6 f846 	bl	8000178 <__aeabi_fsub>
 800a0ec:	4601      	mov	r1, r0
 800a0ee:	4605      	mov	r5, r0
 800a0f0:	4630      	mov	r0, r6
 800a0f2:	f7f6 f841 	bl	8000178 <__aeabi_fsub>
 800a0f6:	498d      	ldr	r1, [pc, #564]	@ (800a32c <__ieee754_rem_pio2f+0x2b0>)
 800a0f8:	e7e8      	b.n	800a0cc <__ieee754_rem_pio2f+0x50>
 800a0fa:	f7f6 f83f 	bl	800017c <__addsf3>
 800a0fe:	42bd      	cmp	r5, r7
 800a100:	4606      	mov	r6, r0
 800a102:	d00f      	beq.n	800a124 <__ieee754_rem_pio2f+0xa8>
 800a104:	4987      	ldr	r1, [pc, #540]	@ (800a324 <__ieee754_rem_pio2f+0x2a8>)
 800a106:	f7f6 f839 	bl	800017c <__addsf3>
 800a10a:	4601      	mov	r1, r0
 800a10c:	4605      	mov	r5, r0
 800a10e:	4630      	mov	r0, r6
 800a110:	f7f6 f832 	bl	8000178 <__aeabi_fsub>
 800a114:	4983      	ldr	r1, [pc, #524]	@ (800a324 <__ieee754_rem_pio2f+0x2a8>)
 800a116:	f7f6 f831 	bl	800017c <__addsf3>
 800a11a:	6025      	str	r5, [r4, #0]
 800a11c:	6060      	str	r0, [r4, #4]
 800a11e:	f04f 35ff 	mov.w	r5, #4294967295
 800a122:	e7d8      	b.n	800a0d6 <__ieee754_rem_pio2f+0x5a>
 800a124:	4980      	ldr	r1, [pc, #512]	@ (800a328 <__ieee754_rem_pio2f+0x2ac>)
 800a126:	f7f6 f829 	bl	800017c <__addsf3>
 800a12a:	4980      	ldr	r1, [pc, #512]	@ (800a32c <__ieee754_rem_pio2f+0x2b0>)
 800a12c:	4606      	mov	r6, r0
 800a12e:	f7f6 f825 	bl	800017c <__addsf3>
 800a132:	4601      	mov	r1, r0
 800a134:	4605      	mov	r5, r0
 800a136:	4630      	mov	r0, r6
 800a138:	f7f6 f81e 	bl	8000178 <__aeabi_fsub>
 800a13c:	497b      	ldr	r1, [pc, #492]	@ (800a32c <__ieee754_rem_pio2f+0x2b0>)
 800a13e:	e7ea      	b.n	800a116 <__ieee754_rem_pio2f+0x9a>
 800a140:	4a7b      	ldr	r2, [pc, #492]	@ (800a330 <__ieee754_rem_pio2f+0x2b4>)
 800a142:	4590      	cmp	r8, r2
 800a144:	f200 8095 	bhi.w	800a272 <__ieee754_rem_pio2f+0x1f6>
 800a148:	f000 f8fe 	bl	800a348 <fabsf>
 800a14c:	4979      	ldr	r1, [pc, #484]	@ (800a334 <__ieee754_rem_pio2f+0x2b8>)
 800a14e:	4606      	mov	r6, r0
 800a150:	f7f6 f91c 	bl	800038c <__aeabi_fmul>
 800a154:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800a158:	f7f6 f810 	bl	800017c <__addsf3>
 800a15c:	f7f6 faf2 	bl	8000744 <__aeabi_f2iz>
 800a160:	4605      	mov	r5, r0
 800a162:	f7f6 f8bf 	bl	80002e4 <__aeabi_i2f>
 800a166:	496d      	ldr	r1, [pc, #436]	@ (800a31c <__ieee754_rem_pio2f+0x2a0>)
 800a168:	4681      	mov	r9, r0
 800a16a:	f7f6 f90f 	bl	800038c <__aeabi_fmul>
 800a16e:	4601      	mov	r1, r0
 800a170:	4630      	mov	r0, r6
 800a172:	f7f6 f801 	bl	8000178 <__aeabi_fsub>
 800a176:	496b      	ldr	r1, [pc, #428]	@ (800a324 <__ieee754_rem_pio2f+0x2a8>)
 800a178:	4607      	mov	r7, r0
 800a17a:	4648      	mov	r0, r9
 800a17c:	f7f6 f906 	bl	800038c <__aeabi_fmul>
 800a180:	2d1f      	cmp	r5, #31
 800a182:	4606      	mov	r6, r0
 800a184:	dc0e      	bgt.n	800a1a4 <__ieee754_rem_pio2f+0x128>
 800a186:	4a6c      	ldr	r2, [pc, #432]	@ (800a338 <__ieee754_rem_pio2f+0x2bc>)
 800a188:	1e69      	subs	r1, r5, #1
 800a18a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a18e:	f02a 4300 	bic.w	r3, sl, #2147483648	@ 0x80000000
 800a192:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a196:	4293      	cmp	r3, r2
 800a198:	d004      	beq.n	800a1a4 <__ieee754_rem_pio2f+0x128>
 800a19a:	4631      	mov	r1, r6
 800a19c:	4638      	mov	r0, r7
 800a19e:	f7f5 ffeb 	bl	8000178 <__aeabi_fsub>
 800a1a2:	e00b      	b.n	800a1bc <__ieee754_rem_pio2f+0x140>
 800a1a4:	4631      	mov	r1, r6
 800a1a6:	4638      	mov	r0, r7
 800a1a8:	f7f5 ffe6 	bl	8000178 <__aeabi_fsub>
 800a1ac:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800a1b0:	ebc3 53d8 	rsb	r3, r3, r8, lsr #23
 800a1b4:	2b08      	cmp	r3, #8
 800a1b6:	ea4f 5be8 	mov.w	fp, r8, asr #23
 800a1ba:	dc01      	bgt.n	800a1c0 <__ieee754_rem_pio2f+0x144>
 800a1bc:	6020      	str	r0, [r4, #0]
 800a1be:	e026      	b.n	800a20e <__ieee754_rem_pio2f+0x192>
 800a1c0:	4959      	ldr	r1, [pc, #356]	@ (800a328 <__ieee754_rem_pio2f+0x2ac>)
 800a1c2:	4648      	mov	r0, r9
 800a1c4:	f7f6 f8e2 	bl	800038c <__aeabi_fmul>
 800a1c8:	4606      	mov	r6, r0
 800a1ca:	4601      	mov	r1, r0
 800a1cc:	4638      	mov	r0, r7
 800a1ce:	f7f5 ffd3 	bl	8000178 <__aeabi_fsub>
 800a1d2:	4601      	mov	r1, r0
 800a1d4:	4680      	mov	r8, r0
 800a1d6:	4638      	mov	r0, r7
 800a1d8:	f7f5 ffce 	bl	8000178 <__aeabi_fsub>
 800a1dc:	4631      	mov	r1, r6
 800a1de:	f7f5 ffcb 	bl	8000178 <__aeabi_fsub>
 800a1e2:	4606      	mov	r6, r0
 800a1e4:	4951      	ldr	r1, [pc, #324]	@ (800a32c <__ieee754_rem_pio2f+0x2b0>)
 800a1e6:	4648      	mov	r0, r9
 800a1e8:	f7f6 f8d0 	bl	800038c <__aeabi_fmul>
 800a1ec:	4631      	mov	r1, r6
 800a1ee:	f7f5 ffc3 	bl	8000178 <__aeabi_fsub>
 800a1f2:	4601      	mov	r1, r0
 800a1f4:	4606      	mov	r6, r0
 800a1f6:	4640      	mov	r0, r8
 800a1f8:	f7f5 ffbe 	bl	8000178 <__aeabi_fsub>
 800a1fc:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800a200:	ebab 0b03 	sub.w	fp, fp, r3
 800a204:	f1bb 0f19 	cmp.w	fp, #25
 800a208:	dc18      	bgt.n	800a23c <__ieee754_rem_pio2f+0x1c0>
 800a20a:	4647      	mov	r7, r8
 800a20c:	6020      	str	r0, [r4, #0]
 800a20e:	f8d4 8000 	ldr.w	r8, [r4]
 800a212:	4638      	mov	r0, r7
 800a214:	4641      	mov	r1, r8
 800a216:	f7f5 ffaf 	bl	8000178 <__aeabi_fsub>
 800a21a:	4631      	mov	r1, r6
 800a21c:	f7f5 ffac 	bl	8000178 <__aeabi_fsub>
 800a220:	f1ba 0f00 	cmp.w	sl, #0
 800a224:	6060      	str	r0, [r4, #4]
 800a226:	f6bf af56 	bge.w	800a0d6 <__ieee754_rem_pio2f+0x5a>
 800a22a:	f108 4800 	add.w	r8, r8, #2147483648	@ 0x80000000
 800a22e:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800a232:	f8c4 8000 	str.w	r8, [r4]
 800a236:	6060      	str	r0, [r4, #4]
 800a238:	426d      	negs	r5, r5
 800a23a:	e74c      	b.n	800a0d6 <__ieee754_rem_pio2f+0x5a>
 800a23c:	493f      	ldr	r1, [pc, #252]	@ (800a33c <__ieee754_rem_pio2f+0x2c0>)
 800a23e:	4648      	mov	r0, r9
 800a240:	f7f6 f8a4 	bl	800038c <__aeabi_fmul>
 800a244:	4606      	mov	r6, r0
 800a246:	4601      	mov	r1, r0
 800a248:	4640      	mov	r0, r8
 800a24a:	f7f5 ff95 	bl	8000178 <__aeabi_fsub>
 800a24e:	4601      	mov	r1, r0
 800a250:	4607      	mov	r7, r0
 800a252:	4640      	mov	r0, r8
 800a254:	f7f5 ff90 	bl	8000178 <__aeabi_fsub>
 800a258:	4631      	mov	r1, r6
 800a25a:	f7f5 ff8d 	bl	8000178 <__aeabi_fsub>
 800a25e:	4606      	mov	r6, r0
 800a260:	4937      	ldr	r1, [pc, #220]	@ (800a340 <__ieee754_rem_pio2f+0x2c4>)
 800a262:	4648      	mov	r0, r9
 800a264:	f7f6 f892 	bl	800038c <__aeabi_fmul>
 800a268:	4631      	mov	r1, r6
 800a26a:	f7f5 ff85 	bl	8000178 <__aeabi_fsub>
 800a26e:	4606      	mov	r6, r0
 800a270:	e793      	b.n	800a19a <__ieee754_rem_pio2f+0x11e>
 800a272:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800a276:	d305      	bcc.n	800a284 <__ieee754_rem_pio2f+0x208>
 800a278:	4601      	mov	r1, r0
 800a27a:	f7f5 ff7d 	bl	8000178 <__aeabi_fsub>
 800a27e:	6060      	str	r0, [r4, #4]
 800a280:	6020      	str	r0, [r4, #0]
 800a282:	e708      	b.n	800a096 <__ieee754_rem_pio2f+0x1a>
 800a284:	ea4f 56e8 	mov.w	r6, r8, asr #23
 800a288:	3e86      	subs	r6, #134	@ 0x86
 800a28a:	eba8 58c6 	sub.w	r8, r8, r6, lsl #23
 800a28e:	4640      	mov	r0, r8
 800a290:	f7f6 fa58 	bl	8000744 <__aeabi_f2iz>
 800a294:	f7f6 f826 	bl	80002e4 <__aeabi_i2f>
 800a298:	4601      	mov	r1, r0
 800a29a:	9003      	str	r0, [sp, #12]
 800a29c:	4640      	mov	r0, r8
 800a29e:	f7f5 ff6b 	bl	8000178 <__aeabi_fsub>
 800a2a2:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800a2a6:	f7f6 f871 	bl	800038c <__aeabi_fmul>
 800a2aa:	4607      	mov	r7, r0
 800a2ac:	f7f6 fa4a 	bl	8000744 <__aeabi_f2iz>
 800a2b0:	f7f6 f818 	bl	80002e4 <__aeabi_i2f>
 800a2b4:	4601      	mov	r1, r0
 800a2b6:	9004      	str	r0, [sp, #16]
 800a2b8:	4605      	mov	r5, r0
 800a2ba:	4638      	mov	r0, r7
 800a2bc:	f7f5 ff5c 	bl	8000178 <__aeabi_fsub>
 800a2c0:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800a2c4:	f7f6 f862 	bl	800038c <__aeabi_fmul>
 800a2c8:	2100      	movs	r1, #0
 800a2ca:	9005      	str	r0, [sp, #20]
 800a2cc:	f7f6 f9f2 	bl	80006b4 <__aeabi_fcmpeq>
 800a2d0:	b1f0      	cbz	r0, 800a310 <__ieee754_rem_pio2f+0x294>
 800a2d2:	2100      	movs	r1, #0
 800a2d4:	4628      	mov	r0, r5
 800a2d6:	f7f6 f9ed 	bl	80006b4 <__aeabi_fcmpeq>
 800a2da:	2800      	cmp	r0, #0
 800a2dc:	bf14      	ite	ne
 800a2de:	2301      	movne	r3, #1
 800a2e0:	2302      	moveq	r3, #2
 800a2e2:	4a18      	ldr	r2, [pc, #96]	@ (800a344 <__ieee754_rem_pio2f+0x2c8>)
 800a2e4:	4621      	mov	r1, r4
 800a2e6:	9201      	str	r2, [sp, #4]
 800a2e8:	2202      	movs	r2, #2
 800a2ea:	a803      	add	r0, sp, #12
 800a2ec:	9200      	str	r2, [sp, #0]
 800a2ee:	4632      	mov	r2, r6
 800a2f0:	f000 f898 	bl	800a424 <__kernel_rem_pio2f>
 800a2f4:	f1ba 0f00 	cmp.w	sl, #0
 800a2f8:	4605      	mov	r5, r0
 800a2fa:	f6bf aeec 	bge.w	800a0d6 <__ieee754_rem_pio2f+0x5a>
 800a2fe:	6823      	ldr	r3, [r4, #0]
 800a300:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800a304:	6023      	str	r3, [r4, #0]
 800a306:	6863      	ldr	r3, [r4, #4]
 800a308:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800a30c:	6063      	str	r3, [r4, #4]
 800a30e:	e793      	b.n	800a238 <__ieee754_rem_pio2f+0x1bc>
 800a310:	2303      	movs	r3, #3
 800a312:	e7e6      	b.n	800a2e2 <__ieee754_rem_pio2f+0x266>
 800a314:	3f490fd8 	.word	0x3f490fd8
 800a318:	4016cbe3 	.word	0x4016cbe3
 800a31c:	3fc90f80 	.word	0x3fc90f80
 800a320:	3fc90fd0 	.word	0x3fc90fd0
 800a324:	37354443 	.word	0x37354443
 800a328:	37354400 	.word	0x37354400
 800a32c:	2e85a308 	.word	0x2e85a308
 800a330:	43490f80 	.word	0x43490f80
 800a334:	3f22f984 	.word	0x3f22f984
 800a338:	0800af50 	.word	0x0800af50
 800a33c:	2e85a300 	.word	0x2e85a300
 800a340:	248d3132 	.word	0x248d3132
 800a344:	0800afd0 	.word	0x0800afd0

0800a348 <fabsf>:
 800a348:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800a34c:	4770      	bx	lr
	...

0800a350 <scalbnf>:
 800a350:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800a354:	b538      	push	{r3, r4, r5, lr}
 800a356:	4603      	mov	r3, r0
 800a358:	460d      	mov	r5, r1
 800a35a:	4604      	mov	r4, r0
 800a35c:	d02e      	beq.n	800a3bc <scalbnf+0x6c>
 800a35e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800a362:	d304      	bcc.n	800a36e <scalbnf+0x1e>
 800a364:	4601      	mov	r1, r0
 800a366:	f7f5 ff09 	bl	800017c <__addsf3>
 800a36a:	4603      	mov	r3, r0
 800a36c:	e026      	b.n	800a3bc <scalbnf+0x6c>
 800a36e:	f010 4fff 	tst.w	r0, #2139095040	@ 0x7f800000
 800a372:	d118      	bne.n	800a3a6 <scalbnf+0x56>
 800a374:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
 800a378:	f7f6 f808 	bl	800038c <__aeabi_fmul>
 800a37c:	4a17      	ldr	r2, [pc, #92]	@ (800a3dc <scalbnf+0x8c>)
 800a37e:	4603      	mov	r3, r0
 800a380:	4295      	cmp	r5, r2
 800a382:	db0c      	blt.n	800a39e <scalbnf+0x4e>
 800a384:	4604      	mov	r4, r0
 800a386:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800a38a:	3a19      	subs	r2, #25
 800a38c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800a390:	428d      	cmp	r5, r1
 800a392:	dd0a      	ble.n	800a3aa <scalbnf+0x5a>
 800a394:	4912      	ldr	r1, [pc, #72]	@ (800a3e0 <scalbnf+0x90>)
 800a396:	4618      	mov	r0, r3
 800a398:	f361 001e 	bfi	r0, r1, #0, #31
 800a39c:	e000      	b.n	800a3a0 <scalbnf+0x50>
 800a39e:	4911      	ldr	r1, [pc, #68]	@ (800a3e4 <scalbnf+0x94>)
 800a3a0:	f7f5 fff4 	bl	800038c <__aeabi_fmul>
 800a3a4:	e7e1      	b.n	800a36a <scalbnf+0x1a>
 800a3a6:	0dd2      	lsrs	r2, r2, #23
 800a3a8:	e7f0      	b.n	800a38c <scalbnf+0x3c>
 800a3aa:	1951      	adds	r1, r2, r5
 800a3ac:	29fe      	cmp	r1, #254	@ 0xfe
 800a3ae:	dcf1      	bgt.n	800a394 <scalbnf+0x44>
 800a3b0:	2900      	cmp	r1, #0
 800a3b2:	dd05      	ble.n	800a3c0 <scalbnf+0x70>
 800a3b4:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 800a3b8:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 800a3bc:	4618      	mov	r0, r3
 800a3be:	bd38      	pop	{r3, r4, r5, pc}
 800a3c0:	f111 0f16 	cmn.w	r1, #22
 800a3c4:	da01      	bge.n	800a3ca <scalbnf+0x7a>
 800a3c6:	4907      	ldr	r1, [pc, #28]	@ (800a3e4 <scalbnf+0x94>)
 800a3c8:	e7e5      	b.n	800a396 <scalbnf+0x46>
 800a3ca:	f101 0019 	add.w	r0, r1, #25
 800a3ce:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 800a3d2:	f04f 514c 	mov.w	r1, #855638016	@ 0x33000000
 800a3d6:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 800a3da:	e7e1      	b.n	800a3a0 <scalbnf+0x50>
 800a3dc:	ffff3cb0 	.word	0xffff3cb0
 800a3e0:	7149f2ca 	.word	0x7149f2ca
 800a3e4:	0da24260 	.word	0x0da24260

0800a3e8 <with_errnof>:
 800a3e8:	b538      	push	{r3, r4, r5, lr}
 800a3ea:	4604      	mov	r4, r0
 800a3ec:	460d      	mov	r5, r1
 800a3ee:	f7fe f893 	bl	8008518 <__errno>
 800a3f2:	6005      	str	r5, [r0, #0]
 800a3f4:	4620      	mov	r0, r4
 800a3f6:	bd38      	pop	{r3, r4, r5, pc}

0800a3f8 <xflowf>:
 800a3f8:	b508      	push	{r3, lr}
 800a3fa:	b140      	cbz	r0, 800a40e <xflowf+0x16>
 800a3fc:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 800a400:	f7f5 ffc4 	bl	800038c <__aeabi_fmul>
 800a404:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a408:	2122      	movs	r1, #34	@ 0x22
 800a40a:	f7ff bfed 	b.w	800a3e8 <with_errnof>
 800a40e:	4608      	mov	r0, r1
 800a410:	e7f6      	b.n	800a400 <xflowf+0x8>

0800a412 <__math_uflowf>:
 800a412:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 800a416:	f7ff bfef 	b.w	800a3f8 <xflowf>

0800a41a <__math_oflowf>:
 800a41a:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 800a41e:	f7ff bfeb 	b.w	800a3f8 <xflowf>
	...

0800a424 <__kernel_rem_pio2f>:
 800a424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a428:	b0db      	sub	sp, #364	@ 0x16c
 800a42a:	9202      	str	r2, [sp, #8]
 800a42c:	9304      	str	r3, [sp, #16]
 800a42e:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 800a430:	4bac      	ldr	r3, [pc, #688]	@ (800a6e4 <__kernel_rem_pio2f+0x2c0>)
 800a432:	9005      	str	r0, [sp, #20]
 800a434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a438:	9100      	str	r1, [sp, #0]
 800a43a:	9301      	str	r3, [sp, #4]
 800a43c:	9b04      	ldr	r3, [sp, #16]
 800a43e:	3b01      	subs	r3, #1
 800a440:	9303      	str	r3, [sp, #12]
 800a442:	9b02      	ldr	r3, [sp, #8]
 800a444:	1d1a      	adds	r2, r3, #4
 800a446:	f2c0 8099 	blt.w	800a57c <__kernel_rem_pio2f+0x158>
 800a44a:	1edc      	subs	r4, r3, #3
 800a44c:	bf48      	it	mi
 800a44e:	1d1c      	addmi	r4, r3, #4
 800a450:	10e4      	asrs	r4, r4, #3
 800a452:	2500      	movs	r5, #0
 800a454:	f04f 0b00 	mov.w	fp, #0
 800a458:	1c67      	adds	r7, r4, #1
 800a45a:	00fb      	lsls	r3, r7, #3
 800a45c:	9306      	str	r3, [sp, #24]
 800a45e:	9b02      	ldr	r3, [sp, #8]
 800a460:	9a03      	ldr	r2, [sp, #12]
 800a462:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 800a466:	9b01      	ldr	r3, [sp, #4]
 800a468:	eba4 0802 	sub.w	r8, r4, r2
 800a46c:	eb03 0902 	add.w	r9, r3, r2
 800a470:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 800a472:	ae1e      	add	r6, sp, #120	@ 0x78
 800a474:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 800a478:	454d      	cmp	r5, r9
 800a47a:	f340 8081 	ble.w	800a580 <__kernel_rem_pio2f+0x15c>
 800a47e:	9a04      	ldr	r2, [sp, #16]
 800a480:	ab1e      	add	r3, sp, #120	@ 0x78
 800a482:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 800a486:	f04f 0900 	mov.w	r9, #0
 800a48a:	2300      	movs	r3, #0
 800a48c:	f50d 7a8c 	add.w	sl, sp, #280	@ 0x118
 800a490:	9a01      	ldr	r2, [sp, #4]
 800a492:	4591      	cmp	r9, r2
 800a494:	f340 809a 	ble.w	800a5cc <__kernel_rem_pio2f+0x1a8>
 800a498:	4613      	mov	r3, r2
 800a49a:	aa0a      	add	r2, sp, #40	@ 0x28
 800a49c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a4a0:	9308      	str	r3, [sp, #32]
 800a4a2:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 800a4a4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a4a8:	9c01      	ldr	r4, [sp, #4]
 800a4aa:	9307      	str	r3, [sp, #28]
 800a4ac:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 800a4b0:	4646      	mov	r6, r8
 800a4b2:	4625      	mov	r5, r4
 800a4b4:	f04f 4987 	mov.w	r9, #1132462080	@ 0x43800000
 800a4b8:	ab5a      	add	r3, sp, #360	@ 0x168
 800a4ba:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a4be:	f853 bc50 	ldr.w	fp, [r3, #-80]
 800a4c2:	f50d 7a8c 	add.w	sl, sp, #280	@ 0x118
 800a4c6:	2d00      	cmp	r5, #0
 800a4c8:	f300 8085 	bgt.w	800a5d6 <__kernel_rem_pio2f+0x1b2>
 800a4cc:	4639      	mov	r1, r7
 800a4ce:	4658      	mov	r0, fp
 800a4d0:	f7ff ff3e 	bl	800a350 <scalbnf>
 800a4d4:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 800a4d8:	4605      	mov	r5, r0
 800a4da:	f7f5 ff57 	bl	800038c <__aeabi_fmul>
 800a4de:	f000 fa3f 	bl	800a960 <floorf>
 800a4e2:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 800a4e6:	f7f5 ff51 	bl	800038c <__aeabi_fmul>
 800a4ea:	4601      	mov	r1, r0
 800a4ec:	4628      	mov	r0, r5
 800a4ee:	f7f5 fe43 	bl	8000178 <__aeabi_fsub>
 800a4f2:	4605      	mov	r5, r0
 800a4f4:	f7f6 f926 	bl	8000744 <__aeabi_f2iz>
 800a4f8:	4606      	mov	r6, r0
 800a4fa:	f7f5 fef3 	bl	80002e4 <__aeabi_i2f>
 800a4fe:	4601      	mov	r1, r0
 800a500:	4628      	mov	r0, r5
 800a502:	f7f5 fe39 	bl	8000178 <__aeabi_fsub>
 800a506:	2f00      	cmp	r7, #0
 800a508:	4681      	mov	r9, r0
 800a50a:	f340 8081 	ble.w	800a610 <__kernel_rem_pio2f+0x1ec>
 800a50e:	1e62      	subs	r2, r4, #1
 800a510:	ab0a      	add	r3, sp, #40	@ 0x28
 800a512:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800a516:	f1c7 0108 	rsb	r1, r7, #8
 800a51a:	fa45 f301 	asr.w	r3, r5, r1
 800a51e:	441e      	add	r6, r3
 800a520:	408b      	lsls	r3, r1
 800a522:	1aed      	subs	r5, r5, r3
 800a524:	ab0a      	add	r3, sp, #40	@ 0x28
 800a526:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800a52a:	f1c7 0307 	rsb	r3, r7, #7
 800a52e:	411d      	asrs	r5, r3
 800a530:	2d00      	cmp	r5, #0
 800a532:	dd7a      	ble.n	800a62a <__kernel_rem_pio2f+0x206>
 800a534:	2200      	movs	r2, #0
 800a536:	4692      	mov	sl, r2
 800a538:	3601      	adds	r6, #1
 800a53a:	4294      	cmp	r4, r2
 800a53c:	f300 80aa 	bgt.w	800a694 <__kernel_rem_pio2f+0x270>
 800a540:	2f00      	cmp	r7, #0
 800a542:	dd05      	ble.n	800a550 <__kernel_rem_pio2f+0x12c>
 800a544:	2f01      	cmp	r7, #1
 800a546:	f000 80b6 	beq.w	800a6b6 <__kernel_rem_pio2f+0x292>
 800a54a:	2f02      	cmp	r7, #2
 800a54c:	f000 80bd 	beq.w	800a6ca <__kernel_rem_pio2f+0x2a6>
 800a550:	2d02      	cmp	r5, #2
 800a552:	d16a      	bne.n	800a62a <__kernel_rem_pio2f+0x206>
 800a554:	4649      	mov	r1, r9
 800a556:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800a55a:	f7f5 fe0d 	bl	8000178 <__aeabi_fsub>
 800a55e:	4681      	mov	r9, r0
 800a560:	f1ba 0f00 	cmp.w	sl, #0
 800a564:	d061      	beq.n	800a62a <__kernel_rem_pio2f+0x206>
 800a566:	4639      	mov	r1, r7
 800a568:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800a56c:	f7ff fef0 	bl	800a350 <scalbnf>
 800a570:	4601      	mov	r1, r0
 800a572:	4648      	mov	r0, r9
 800a574:	f7f5 fe00 	bl	8000178 <__aeabi_fsub>
 800a578:	4681      	mov	r9, r0
 800a57a:	e056      	b.n	800a62a <__kernel_rem_pio2f+0x206>
 800a57c:	2400      	movs	r4, #0
 800a57e:	e768      	b.n	800a452 <__kernel_rem_pio2f+0x2e>
 800a580:	eb18 0f05 	cmn.w	r8, r5
 800a584:	d407      	bmi.n	800a596 <__kernel_rem_pio2f+0x172>
 800a586:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 800a58a:	f7f5 feab 	bl	80002e4 <__aeabi_i2f>
 800a58e:	f846 0b04 	str.w	r0, [r6], #4
 800a592:	3501      	adds	r5, #1
 800a594:	e770      	b.n	800a478 <__kernel_rem_pio2f+0x54>
 800a596:	4658      	mov	r0, fp
 800a598:	e7f9      	b.n	800a58e <__kernel_rem_pio2f+0x16a>
 800a59a:	9307      	str	r3, [sp, #28]
 800a59c:	9b05      	ldr	r3, [sp, #20]
 800a59e:	f85b 1d04 	ldr.w	r1, [fp, #-4]!
 800a5a2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800a5a6:	f7f5 fef1 	bl	800038c <__aeabi_fmul>
 800a5aa:	4601      	mov	r1, r0
 800a5ac:	4630      	mov	r0, r6
 800a5ae:	f7f5 fde5 	bl	800017c <__addsf3>
 800a5b2:	4606      	mov	r6, r0
 800a5b4:	9b07      	ldr	r3, [sp, #28]
 800a5b6:	f108 0801 	add.w	r8, r8, #1
 800a5ba:	9a03      	ldr	r2, [sp, #12]
 800a5bc:	4590      	cmp	r8, r2
 800a5be:	ddec      	ble.n	800a59a <__kernel_rem_pio2f+0x176>
 800a5c0:	f84a 6b04 	str.w	r6, [sl], #4
 800a5c4:	f109 0901 	add.w	r9, r9, #1
 800a5c8:	3504      	adds	r5, #4
 800a5ca:	e761      	b.n	800a490 <__kernel_rem_pio2f+0x6c>
 800a5cc:	46ab      	mov	fp, r5
 800a5ce:	461e      	mov	r6, r3
 800a5d0:	f04f 0800 	mov.w	r8, #0
 800a5d4:	e7f1      	b.n	800a5ba <__kernel_rem_pio2f+0x196>
 800a5d6:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 800a5da:	4658      	mov	r0, fp
 800a5dc:	f7f5 fed6 	bl	800038c <__aeabi_fmul>
 800a5e0:	f7f6 f8b0 	bl	8000744 <__aeabi_f2iz>
 800a5e4:	f7f5 fe7e 	bl	80002e4 <__aeabi_i2f>
 800a5e8:	4649      	mov	r1, r9
 800a5ea:	9009      	str	r0, [sp, #36]	@ 0x24
 800a5ec:	f7f5 fece 	bl	800038c <__aeabi_fmul>
 800a5f0:	4601      	mov	r1, r0
 800a5f2:	4658      	mov	r0, fp
 800a5f4:	f7f5 fdc0 	bl	8000178 <__aeabi_fsub>
 800a5f8:	f7f6 f8a4 	bl	8000744 <__aeabi_f2iz>
 800a5fc:	3d01      	subs	r5, #1
 800a5fe:	f846 0b04 	str.w	r0, [r6], #4
 800a602:	f85a 1025 	ldr.w	r1, [sl, r5, lsl #2]
 800a606:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a608:	f7f5 fdb8 	bl	800017c <__addsf3>
 800a60c:	4683      	mov	fp, r0
 800a60e:	e75a      	b.n	800a4c6 <__kernel_rem_pio2f+0xa2>
 800a610:	d105      	bne.n	800a61e <__kernel_rem_pio2f+0x1fa>
 800a612:	1e63      	subs	r3, r4, #1
 800a614:	aa0a      	add	r2, sp, #40	@ 0x28
 800a616:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 800a61a:	11ed      	asrs	r5, r5, #7
 800a61c:	e788      	b.n	800a530 <__kernel_rem_pio2f+0x10c>
 800a61e:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800a622:	f7f6 f865 	bl	80006f0 <__aeabi_fcmpge>
 800a626:	4605      	mov	r5, r0
 800a628:	bb90      	cbnz	r0, 800a690 <__kernel_rem_pio2f+0x26c>
 800a62a:	2100      	movs	r1, #0
 800a62c:	4648      	mov	r0, r9
 800a62e:	f7f6 f841 	bl	80006b4 <__aeabi_fcmpeq>
 800a632:	2800      	cmp	r0, #0
 800a634:	f000 8090 	beq.w	800a758 <__kernel_rem_pio2f+0x334>
 800a638:	2200      	movs	r2, #0
 800a63a:	1e63      	subs	r3, r4, #1
 800a63c:	9901      	ldr	r1, [sp, #4]
 800a63e:	428b      	cmp	r3, r1
 800a640:	da4a      	bge.n	800a6d8 <__kernel_rem_pio2f+0x2b4>
 800a642:	2a00      	cmp	r2, #0
 800a644:	d076      	beq.n	800a734 <__kernel_rem_pio2f+0x310>
 800a646:	3c01      	subs	r4, #1
 800a648:	ab0a      	add	r3, sp, #40	@ 0x28
 800a64a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800a64e:	3f08      	subs	r7, #8
 800a650:	2b00      	cmp	r3, #0
 800a652:	d0f8      	beq.n	800a646 <__kernel_rem_pio2f+0x222>
 800a654:	4639      	mov	r1, r7
 800a656:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800a65a:	f7ff fe79 	bl	800a350 <scalbnf>
 800a65e:	46a2      	mov	sl, r4
 800a660:	4607      	mov	r7, r0
 800a662:	f04f 596e 	mov.w	r9, #998244352	@ 0x3b800000
 800a666:	f50d 788c 	add.w	r8, sp, #280	@ 0x118
 800a66a:	f1ba 0f00 	cmp.w	sl, #0
 800a66e:	f280 80a1 	bge.w	800a7b4 <__kernel_rem_pio2f+0x390>
 800a672:	4627      	mov	r7, r4
 800a674:	2200      	movs	r2, #0
 800a676:	2f00      	cmp	r7, #0
 800a678:	f2c0 80cb 	blt.w	800a812 <__kernel_rem_pio2f+0x3ee>
 800a67c:	a946      	add	r1, sp, #280	@ 0x118
 800a67e:	4690      	mov	r8, r2
 800a680:	f04f 0a00 	mov.w	sl, #0
 800a684:	4b18      	ldr	r3, [pc, #96]	@ (800a6e8 <__kernel_rem_pio2f+0x2c4>)
 800a686:	eb01 0b87 	add.w	fp, r1, r7, lsl #2
 800a68a:	eba4 0907 	sub.w	r9, r4, r7
 800a68e:	e0b4      	b.n	800a7fa <__kernel_rem_pio2f+0x3d6>
 800a690:	2502      	movs	r5, #2
 800a692:	e74f      	b.n	800a534 <__kernel_rem_pio2f+0x110>
 800a694:	f858 3b04 	ldr.w	r3, [r8], #4
 800a698:	f1ba 0f00 	cmp.w	sl, #0
 800a69c:	d108      	bne.n	800a6b0 <__kernel_rem_pio2f+0x28c>
 800a69e:	b123      	cbz	r3, 800a6aa <__kernel_rem_pio2f+0x286>
 800a6a0:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800a6a4:	f848 3c04 	str.w	r3, [r8, #-4]
 800a6a8:	2301      	movs	r3, #1
 800a6aa:	469a      	mov	sl, r3
 800a6ac:	3201      	adds	r2, #1
 800a6ae:	e744      	b.n	800a53a <__kernel_rem_pio2f+0x116>
 800a6b0:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 800a6b4:	e7f6      	b.n	800a6a4 <__kernel_rem_pio2f+0x280>
 800a6b6:	1e62      	subs	r2, r4, #1
 800a6b8:	ab0a      	add	r3, sp, #40	@ 0x28
 800a6ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a6c2:	a90a      	add	r1, sp, #40	@ 0x28
 800a6c4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a6c8:	e742      	b.n	800a550 <__kernel_rem_pio2f+0x12c>
 800a6ca:	1e62      	subs	r2, r4, #1
 800a6cc:	ab0a      	add	r3, sp, #40	@ 0x28
 800a6ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6d2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a6d6:	e7f4      	b.n	800a6c2 <__kernel_rem_pio2f+0x29e>
 800a6d8:	a90a      	add	r1, sp, #40	@ 0x28
 800a6da:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a6de:	3b01      	subs	r3, #1
 800a6e0:	430a      	orrs	r2, r1
 800a6e2:	e7ab      	b.n	800a63c <__kernel_rem_pio2f+0x218>
 800a6e4:	0800b314 	.word	0x0800b314
 800a6e8:	0800b2e8 	.word	0x0800b2e8
 800a6ec:	3301      	adds	r3, #1
 800a6ee:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800a6f2:	2900      	cmp	r1, #0
 800a6f4:	d0fa      	beq.n	800a6ec <__kernel_rem_pio2f+0x2c8>
 800a6f6:	9a04      	ldr	r2, [sp, #16]
 800a6f8:	a91e      	add	r1, sp, #120	@ 0x78
 800a6fa:	18a2      	adds	r2, r4, r2
 800a6fc:	1c66      	adds	r6, r4, #1
 800a6fe:	eb01 0582 	add.w	r5, r1, r2, lsl #2
 800a702:	441c      	add	r4, r3
 800a704:	f50d 798c 	add.w	r9, sp, #280	@ 0x118
 800a708:	42b4      	cmp	r4, r6
 800a70a:	f6ff aecf 	blt.w	800a4ac <__kernel_rem_pio2f+0x88>
 800a70e:	9b07      	ldr	r3, [sp, #28]
 800a710:	46ab      	mov	fp, r5
 800a712:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a716:	f7f5 fde5 	bl	80002e4 <__aeabi_i2f>
 800a71a:	f04f 0a00 	mov.w	sl, #0
 800a71e:	f04f 0800 	mov.w	r8, #0
 800a722:	6028      	str	r0, [r5, #0]
 800a724:	9b03      	ldr	r3, [sp, #12]
 800a726:	459a      	cmp	sl, r3
 800a728:	dd07      	ble.n	800a73a <__kernel_rem_pio2f+0x316>
 800a72a:	f849 8026 	str.w	r8, [r9, r6, lsl #2]
 800a72e:	3504      	adds	r5, #4
 800a730:	3601      	adds	r6, #1
 800a732:	e7e9      	b.n	800a708 <__kernel_rem_pio2f+0x2e4>
 800a734:	2301      	movs	r3, #1
 800a736:	9a08      	ldr	r2, [sp, #32]
 800a738:	e7d9      	b.n	800a6ee <__kernel_rem_pio2f+0x2ca>
 800a73a:	9b05      	ldr	r3, [sp, #20]
 800a73c:	f85b 0904 	ldr.w	r0, [fp], #-4
 800a740:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 800a744:	f7f5 fe22 	bl	800038c <__aeabi_fmul>
 800a748:	4601      	mov	r1, r0
 800a74a:	4640      	mov	r0, r8
 800a74c:	f7f5 fd16 	bl	800017c <__addsf3>
 800a750:	f10a 0a01 	add.w	sl, sl, #1
 800a754:	4680      	mov	r8, r0
 800a756:	e7e5      	b.n	800a724 <__kernel_rem_pio2f+0x300>
 800a758:	9b06      	ldr	r3, [sp, #24]
 800a75a:	9a02      	ldr	r2, [sp, #8]
 800a75c:	4648      	mov	r0, r9
 800a75e:	1a99      	subs	r1, r3, r2
 800a760:	f7ff fdf6 	bl	800a350 <scalbnf>
 800a764:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800a768:	4680      	mov	r8, r0
 800a76a:	f7f5 ffc1 	bl	80006f0 <__aeabi_fcmpge>
 800a76e:	b1f8      	cbz	r0, 800a7b0 <__kernel_rem_pio2f+0x38c>
 800a770:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 800a774:	4640      	mov	r0, r8
 800a776:	f7f5 fe09 	bl	800038c <__aeabi_fmul>
 800a77a:	f7f5 ffe3 	bl	8000744 <__aeabi_f2iz>
 800a77e:	f7f5 fdb1 	bl	80002e4 <__aeabi_i2f>
 800a782:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800a786:	4681      	mov	r9, r0
 800a788:	f7f5 fe00 	bl	800038c <__aeabi_fmul>
 800a78c:	4601      	mov	r1, r0
 800a78e:	4640      	mov	r0, r8
 800a790:	f7f5 fcf2 	bl	8000178 <__aeabi_fsub>
 800a794:	f7f5 ffd6 	bl	8000744 <__aeabi_f2iz>
 800a798:	ab0a      	add	r3, sp, #40	@ 0x28
 800a79a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a79e:	4648      	mov	r0, r9
 800a7a0:	3401      	adds	r4, #1
 800a7a2:	3708      	adds	r7, #8
 800a7a4:	f7f5 ffce 	bl	8000744 <__aeabi_f2iz>
 800a7a8:	ab0a      	add	r3, sp, #40	@ 0x28
 800a7aa:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a7ae:	e751      	b.n	800a654 <__kernel_rem_pio2f+0x230>
 800a7b0:	4640      	mov	r0, r8
 800a7b2:	e7f7      	b.n	800a7a4 <__kernel_rem_pio2f+0x380>
 800a7b4:	ab0a      	add	r3, sp, #40	@ 0x28
 800a7b6:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800a7ba:	f7f5 fd93 	bl	80002e4 <__aeabi_i2f>
 800a7be:	4639      	mov	r1, r7
 800a7c0:	f7f5 fde4 	bl	800038c <__aeabi_fmul>
 800a7c4:	4649      	mov	r1, r9
 800a7c6:	f848 002a 	str.w	r0, [r8, sl, lsl #2]
 800a7ca:	4638      	mov	r0, r7
 800a7cc:	f7f5 fdde 	bl	800038c <__aeabi_fmul>
 800a7d0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a7d4:	4607      	mov	r7, r0
 800a7d6:	e748      	b.n	800a66a <__kernel_rem_pio2f+0x246>
 800a7d8:	f853 0b04 	ldr.w	r0, [r3], #4
 800a7dc:	f85b 1b04 	ldr.w	r1, [fp], #4
 800a7e0:	9203      	str	r2, [sp, #12]
 800a7e2:	9302      	str	r3, [sp, #8]
 800a7e4:	f7f5 fdd2 	bl	800038c <__aeabi_fmul>
 800a7e8:	4601      	mov	r1, r0
 800a7ea:	4640      	mov	r0, r8
 800a7ec:	f7f5 fcc6 	bl	800017c <__addsf3>
 800a7f0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a7f4:	4680      	mov	r8, r0
 800a7f6:	f10a 0a01 	add.w	sl, sl, #1
 800a7fa:	9901      	ldr	r1, [sp, #4]
 800a7fc:	458a      	cmp	sl, r1
 800a7fe:	dc01      	bgt.n	800a804 <__kernel_rem_pio2f+0x3e0>
 800a800:	45ca      	cmp	sl, r9
 800a802:	dde9      	ble.n	800a7d8 <__kernel_rem_pio2f+0x3b4>
 800a804:	ab5a      	add	r3, sp, #360	@ 0x168
 800a806:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 800a80a:	f849 8ca0 	str.w	r8, [r9, #-160]
 800a80e:	3f01      	subs	r7, #1
 800a810:	e731      	b.n	800a676 <__kernel_rem_pio2f+0x252>
 800a812:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800a814:	2b02      	cmp	r3, #2
 800a816:	dc07      	bgt.n	800a828 <__kernel_rem_pio2f+0x404>
 800a818:	2b00      	cmp	r3, #0
 800a81a:	dc4e      	bgt.n	800a8ba <__kernel_rem_pio2f+0x496>
 800a81c:	d02e      	beq.n	800a87c <__kernel_rem_pio2f+0x458>
 800a81e:	f006 0007 	and.w	r0, r6, #7
 800a822:	b05b      	add	sp, #364	@ 0x16c
 800a824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a828:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800a82a:	2b03      	cmp	r3, #3
 800a82c:	d1f7      	bne.n	800a81e <__kernel_rem_pio2f+0x3fa>
 800a82e:	f10d 0bc8 	add.w	fp, sp, #200	@ 0xc8
 800a832:	eb0b 0784 	add.w	r7, fp, r4, lsl #2
 800a836:	46b8      	mov	r8, r7
 800a838:	46a2      	mov	sl, r4
 800a83a:	f1ba 0f00 	cmp.w	sl, #0
 800a83e:	dc49      	bgt.n	800a8d4 <__kernel_rem_pio2f+0x4b0>
 800a840:	46a1      	mov	r9, r4
 800a842:	f1b9 0f01 	cmp.w	r9, #1
 800a846:	dc60      	bgt.n	800a90a <__kernel_rem_pio2f+0x4e6>
 800a848:	2000      	movs	r0, #0
 800a84a:	2c01      	cmp	r4, #1
 800a84c:	dc76      	bgt.n	800a93c <__kernel_rem_pio2f+0x518>
 800a84e:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 800a850:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 800a852:	2d00      	cmp	r5, #0
 800a854:	d178      	bne.n	800a948 <__kernel_rem_pio2f+0x524>
 800a856:	9900      	ldr	r1, [sp, #0]
 800a858:	600a      	str	r2, [r1, #0]
 800a85a:	460a      	mov	r2, r1
 800a85c:	604b      	str	r3, [r1, #4]
 800a85e:	6090      	str	r0, [r2, #8]
 800a860:	e7dd      	b.n	800a81e <__kernel_rem_pio2f+0x3fa>
 800a862:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 800a866:	f7f5 fc89 	bl	800017c <__addsf3>
 800a86a:	3c01      	subs	r4, #1
 800a86c:	2c00      	cmp	r4, #0
 800a86e:	daf8      	bge.n	800a862 <__kernel_rem_pio2f+0x43e>
 800a870:	b10d      	cbz	r5, 800a876 <__kernel_rem_pio2f+0x452>
 800a872:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800a876:	9b00      	ldr	r3, [sp, #0]
 800a878:	6018      	str	r0, [r3, #0]
 800a87a:	e7d0      	b.n	800a81e <__kernel_rem_pio2f+0x3fa>
 800a87c:	2000      	movs	r0, #0
 800a87e:	af32      	add	r7, sp, #200	@ 0xc8
 800a880:	e7f4      	b.n	800a86c <__kernel_rem_pio2f+0x448>
 800a882:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 800a886:	f7f5 fc79 	bl	800017c <__addsf3>
 800a88a:	f108 38ff 	add.w	r8, r8, #4294967295
 800a88e:	f1b8 0f00 	cmp.w	r8, #0
 800a892:	daf6      	bge.n	800a882 <__kernel_rem_pio2f+0x45e>
 800a894:	b1ad      	cbz	r5, 800a8c2 <__kernel_rem_pio2f+0x49e>
 800a896:	f100 4300 	add.w	r3, r0, #2147483648	@ 0x80000000
 800a89a:	9a00      	ldr	r2, [sp, #0]
 800a89c:	4601      	mov	r1, r0
 800a89e:	6013      	str	r3, [r2, #0]
 800a8a0:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 800a8a2:	f7f5 fc69 	bl	8000178 <__aeabi_fsub>
 800a8a6:	f04f 0801 	mov.w	r8, #1
 800a8aa:	4544      	cmp	r4, r8
 800a8ac:	da0b      	bge.n	800a8c6 <__kernel_rem_pio2f+0x4a2>
 800a8ae:	b10d      	cbz	r5, 800a8b4 <__kernel_rem_pio2f+0x490>
 800a8b0:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800a8b4:	9b00      	ldr	r3, [sp, #0]
 800a8b6:	6058      	str	r0, [r3, #4]
 800a8b8:	e7b1      	b.n	800a81e <__kernel_rem_pio2f+0x3fa>
 800a8ba:	46a0      	mov	r8, r4
 800a8bc:	2000      	movs	r0, #0
 800a8be:	af32      	add	r7, sp, #200	@ 0xc8
 800a8c0:	e7e5      	b.n	800a88e <__kernel_rem_pio2f+0x46a>
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	e7e9      	b.n	800a89a <__kernel_rem_pio2f+0x476>
 800a8c6:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800a8ca:	f7f5 fc57 	bl	800017c <__addsf3>
 800a8ce:	f108 0801 	add.w	r8, r8, #1
 800a8d2:	e7ea      	b.n	800a8aa <__kernel_rem_pio2f+0x486>
 800a8d4:	f8d8 3000 	ldr.w	r3, [r8]
 800a8d8:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800a8dc:	4619      	mov	r1, r3
 800a8de:	4610      	mov	r0, r2
 800a8e0:	9302      	str	r3, [sp, #8]
 800a8e2:	9201      	str	r2, [sp, #4]
 800a8e4:	f7f5 fc4a 	bl	800017c <__addsf3>
 800a8e8:	9a01      	ldr	r2, [sp, #4]
 800a8ea:	4601      	mov	r1, r0
 800a8ec:	4681      	mov	r9, r0
 800a8ee:	4610      	mov	r0, r2
 800a8f0:	f7f5 fc42 	bl	8000178 <__aeabi_fsub>
 800a8f4:	9b02      	ldr	r3, [sp, #8]
 800a8f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a8fa:	4619      	mov	r1, r3
 800a8fc:	f7f5 fc3e 	bl	800017c <__addsf3>
 800a900:	f848 0904 	str.w	r0, [r8], #-4
 800a904:	f8c8 9000 	str.w	r9, [r8]
 800a908:	e797      	b.n	800a83a <__kernel_rem_pio2f+0x416>
 800a90a:	f857 3c04 	ldr.w	r3, [r7, #-4]
 800a90e:	f8d7 a000 	ldr.w	sl, [r7]
 800a912:	4618      	mov	r0, r3
 800a914:	4651      	mov	r1, sl
 800a916:	9301      	str	r3, [sp, #4]
 800a918:	f7f5 fc30 	bl	800017c <__addsf3>
 800a91c:	9b01      	ldr	r3, [sp, #4]
 800a91e:	4601      	mov	r1, r0
 800a920:	4680      	mov	r8, r0
 800a922:	4618      	mov	r0, r3
 800a924:	f7f5 fc28 	bl	8000178 <__aeabi_fsub>
 800a928:	4651      	mov	r1, sl
 800a92a:	f7f5 fc27 	bl	800017c <__addsf3>
 800a92e:	f847 0904 	str.w	r0, [r7], #-4
 800a932:	f109 39ff 	add.w	r9, r9, #4294967295
 800a936:	f8c7 8000 	str.w	r8, [r7]
 800a93a:	e782      	b.n	800a842 <__kernel_rem_pio2f+0x41e>
 800a93c:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 800a940:	f7f5 fc1c 	bl	800017c <__addsf3>
 800a944:	3c01      	subs	r4, #1
 800a946:	e780      	b.n	800a84a <__kernel_rem_pio2f+0x426>
 800a948:	9900      	ldr	r1, [sp, #0]
 800a94a:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 800a94e:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800a952:	600a      	str	r2, [r1, #0]
 800a954:	604b      	str	r3, [r1, #4]
 800a956:	460a      	mov	r2, r1
 800a958:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800a95c:	e77f      	b.n	800a85e <__kernel_rem_pio2f+0x43a>
 800a95e:	bf00      	nop

0800a960 <floorf>:
 800a960:	b570      	push	{r4, r5, r6, lr}
 800a962:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 800a966:	3d7f      	subs	r5, #127	@ 0x7f
 800a968:	2d16      	cmp	r5, #22
 800a96a:	4601      	mov	r1, r0
 800a96c:	4604      	mov	r4, r0
 800a96e:	f020 4600 	bic.w	r6, r0, #2147483648	@ 0x80000000
 800a972:	dc26      	bgt.n	800a9c2 <floorf+0x62>
 800a974:	2d00      	cmp	r5, #0
 800a976:	da0f      	bge.n	800a998 <floorf+0x38>
 800a978:	4917      	ldr	r1, [pc, #92]	@ (800a9d8 <floorf+0x78>)
 800a97a:	f7f5 fbff 	bl	800017c <__addsf3>
 800a97e:	2100      	movs	r1, #0
 800a980:	f7f5 fec0 	bl	8000704 <__aeabi_fcmpgt>
 800a984:	b130      	cbz	r0, 800a994 <floorf+0x34>
 800a986:	2c00      	cmp	r4, #0
 800a988:	da23      	bge.n	800a9d2 <floorf+0x72>
 800a98a:	2e00      	cmp	r6, #0
 800a98c:	4c13      	ldr	r4, [pc, #76]	@ (800a9dc <floorf+0x7c>)
 800a98e:	bf08      	it	eq
 800a990:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800a994:	4621      	mov	r1, r4
 800a996:	e01a      	b.n	800a9ce <floorf+0x6e>
 800a998:	4e11      	ldr	r6, [pc, #68]	@ (800a9e0 <floorf+0x80>)
 800a99a:	412e      	asrs	r6, r5
 800a99c:	4230      	tst	r0, r6
 800a99e:	d016      	beq.n	800a9ce <floorf+0x6e>
 800a9a0:	490d      	ldr	r1, [pc, #52]	@ (800a9d8 <floorf+0x78>)
 800a9a2:	f7f5 fbeb 	bl	800017c <__addsf3>
 800a9a6:	2100      	movs	r1, #0
 800a9a8:	f7f5 feac 	bl	8000704 <__aeabi_fcmpgt>
 800a9ac:	2800      	cmp	r0, #0
 800a9ae:	d0f1      	beq.n	800a994 <floorf+0x34>
 800a9b0:	2c00      	cmp	r4, #0
 800a9b2:	bfbe      	ittt	lt
 800a9b4:	f44f 0300 	movlt.w	r3, #8388608	@ 0x800000
 800a9b8:	412b      	asrlt	r3, r5
 800a9ba:	18e4      	addlt	r4, r4, r3
 800a9bc:	ea24 0406 	bic.w	r4, r4, r6
 800a9c0:	e7e8      	b.n	800a994 <floorf+0x34>
 800a9c2:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 800a9c6:	d302      	bcc.n	800a9ce <floorf+0x6e>
 800a9c8:	f7f5 fbd8 	bl	800017c <__addsf3>
 800a9cc:	4601      	mov	r1, r0
 800a9ce:	4608      	mov	r0, r1
 800a9d0:	bd70      	pop	{r4, r5, r6, pc}
 800a9d2:	2400      	movs	r4, #0
 800a9d4:	e7de      	b.n	800a994 <floorf+0x34>
 800a9d6:	bf00      	nop
 800a9d8:	7149f2ca 	.word	0x7149f2ca
 800a9dc:	bf800000 	.word	0xbf800000
 800a9e0:	007fffff 	.word	0x007fffff

0800a9e4 <_init>:
 800a9e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9e6:	bf00      	nop
 800a9e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9ea:	bc08      	pop	{r3}
 800a9ec:	469e      	mov	lr, r3
 800a9ee:	4770      	bx	lr

0800a9f0 <_fini>:
 800a9f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9f2:	bf00      	nop
 800a9f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9f6:	bc08      	pop	{r3}
 800a9f8:	469e      	mov	lr, r3
 800a9fa:	4770      	bx	lr
