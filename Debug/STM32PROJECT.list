
STM32PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065c8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006f0c  080066d4  080066d4  000076d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d5e0  0800d5e0  0000f070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800d5e0  0800d5e0  0000f070  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800d5e0  0800d5e0  0000f070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d5e0  0800d5e0  0000e5e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d5e4  0800d5e4  0000e5e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  0800d5e8  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003e6c  20000070  0800d658  0000f070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003edc  0800d658  0000fedc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000f070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010023  00000000  00000000  0000f099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e1c  00000000  00000000  0001f0bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b0  00000000  00000000  00021ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e09  00000000  00000000  00023088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018254  00000000  00000000  00023e91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016081  00000000  00000000  0003c0e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008debf  00000000  00000000  00052166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e0025  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053b0  00000000  00000000  000e0068  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000e5418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080066bc 	.word	0x080066bc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080066bc 	.word	0x080066bc

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	@ 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ba:	2afd      	cmp	r2, #253	@ 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	@ 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	@ 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	@ 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_fcmpun>:
 80006f4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006f8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80006fc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000700:	d102      	bne.n	8000708 <__aeabi_fcmpun+0x14>
 8000702:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000706:	d108      	bne.n	800071a <__aeabi_fcmpun+0x26>
 8000708:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800070c:	d102      	bne.n	8000714 <__aeabi_fcmpun+0x20>
 800070e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000712:	d102      	bne.n	800071a <__aeabi_fcmpun+0x26>
 8000714:	f04f 0000 	mov.w	r0, #0
 8000718:	4770      	bx	lr
 800071a:	f04f 0001 	mov.w	r0, #1
 800071e:	4770      	bx	lr

08000720 <__aeabi_f2iz>:
 8000720:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000724:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000728:	d30f      	bcc.n	800074a <__aeabi_f2iz+0x2a>
 800072a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800072e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000732:	d90d      	bls.n	8000750 <__aeabi_f2iz+0x30>
 8000734:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000738:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800073c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000740:	fa23 f002 	lsr.w	r0, r3, r2
 8000744:	bf18      	it	ne
 8000746:	4240      	negne	r0, r0
 8000748:	4770      	bx	lr
 800074a:	f04f 0000 	mov.w	r0, #0
 800074e:	4770      	bx	lr
 8000750:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000754:	d101      	bne.n	800075a <__aeabi_f2iz+0x3a>
 8000756:	0242      	lsls	r2, r0, #9
 8000758:	d105      	bne.n	8000766 <__aeabi_f2iz+0x46>
 800075a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800075e:	bf08      	it	eq
 8000760:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000764:	4770      	bx	lr
 8000766:	f04f 0000 	mov.w	r0, #0
 800076a:	4770      	bx	lr

0800076c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000772:	4b0c      	ldr	r3, [pc, #48]	@ (80007a4 <MX_DMA_Init+0x38>)
 8000774:	695b      	ldr	r3, [r3, #20]
 8000776:	4a0b      	ldr	r2, [pc, #44]	@ (80007a4 <MX_DMA_Init+0x38>)
 8000778:	f043 0301 	orr.w	r3, r3, #1
 800077c:	6153      	str	r3, [r2, #20]
 800077e:	4b09      	ldr	r3, [pc, #36]	@ (80007a4 <MX_DMA_Init+0x38>)
 8000780:	695b      	ldr	r3, [r3, #20]
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800078a:	2200      	movs	r2, #0
 800078c:	2100      	movs	r1, #0
 800078e:	2010      	movs	r0, #16
 8000790:	f002 fa19 	bl	8002bc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000794:	2010      	movs	r0, #16
 8000796:	f002 fa32 	bl	8002bfe <HAL_NVIC_EnableIRQ>

}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40021000 	.word	0x40021000

080007a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b088      	sub	sp, #32
 80007ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ae:	f107 0310 	add.w	r3, r7, #16
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007bc:	4b34      	ldr	r3, [pc, #208]	@ (8000890 <MX_GPIO_Init+0xe8>)
 80007be:	699b      	ldr	r3, [r3, #24]
 80007c0:	4a33      	ldr	r2, [pc, #204]	@ (8000890 <MX_GPIO_Init+0xe8>)
 80007c2:	f043 0310 	orr.w	r3, r3, #16
 80007c6:	6193      	str	r3, [r2, #24]
 80007c8:	4b31      	ldr	r3, [pc, #196]	@ (8000890 <MX_GPIO_Init+0xe8>)
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	f003 0310 	and.w	r3, r3, #16
 80007d0:	60fb      	str	r3, [r7, #12]
 80007d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007d4:	4b2e      	ldr	r3, [pc, #184]	@ (8000890 <MX_GPIO_Init+0xe8>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	4a2d      	ldr	r2, [pc, #180]	@ (8000890 <MX_GPIO_Init+0xe8>)
 80007da:	f043 0320 	orr.w	r3, r3, #32
 80007de:	6193      	str	r3, [r2, #24]
 80007e0:	4b2b      	ldr	r3, [pc, #172]	@ (8000890 <MX_GPIO_Init+0xe8>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	f003 0320 	and.w	r3, r3, #32
 80007e8:	60bb      	str	r3, [r7, #8]
 80007ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ec:	4b28      	ldr	r3, [pc, #160]	@ (8000890 <MX_GPIO_Init+0xe8>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	4a27      	ldr	r2, [pc, #156]	@ (8000890 <MX_GPIO_Init+0xe8>)
 80007f2:	f043 0304 	orr.w	r3, r3, #4
 80007f6:	6193      	str	r3, [r2, #24]
 80007f8:	4b25      	ldr	r3, [pc, #148]	@ (8000890 <MX_GPIO_Init+0xe8>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	f003 0304 	and.w	r3, r3, #4
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000804:	4b22      	ldr	r3, [pc, #136]	@ (8000890 <MX_GPIO_Init+0xe8>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	4a21      	ldr	r2, [pc, #132]	@ (8000890 <MX_GPIO_Init+0xe8>)
 800080a:	f043 0308 	orr.w	r3, r3, #8
 800080e:	6193      	str	r3, [r2, #24]
 8000810:	4b1f      	ldr	r3, [pc, #124]	@ (8000890 <MX_GPIO_Init+0xe8>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	f003 0308 	and.w	r3, r3, #8
 8000818:	603b      	str	r3, [r7, #0]
 800081a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SysWork_Light_GPIO_Port, SysWork_Light_Pin, GPIO_PIN_RESET);
 800081c:	2200      	movs	r2, #0
 800081e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000822:	481c      	ldr	r0, [pc, #112]	@ (8000894 <MX_GPIO_Init+0xec>)
 8000824:	f002 fcea 	bl	80031fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Flash_CS_GPIO_Port, Flash_CS_Pin, GPIO_PIN_RESET);
 8000828:	2200      	movs	r2, #0
 800082a:	2180      	movs	r1, #128	@ 0x80
 800082c:	481a      	ldr	r0, [pc, #104]	@ (8000898 <MX_GPIO_Init+0xf0>)
 800082e:	f002 fce5 	bl	80031fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SysWork_Light_Pin */
  GPIO_InitStruct.Pin = SysWork_Light_Pin;
 8000832:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000836:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000838:	2301      	movs	r3, #1
 800083a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000840:	2302      	movs	r3, #2
 8000842:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SysWork_Light_GPIO_Port, &GPIO_InitStruct);
 8000844:	f107 0310 	add.w	r3, r7, #16
 8000848:	4619      	mov	r1, r3
 800084a:	4812      	ldr	r0, [pc, #72]	@ (8000894 <MX_GPIO_Init+0xec>)
 800084c:	f002 fb52 	bl	8002ef4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Flash_CS_Pin */
  GPIO_InitStruct.Pin = Flash_CS_Pin;
 8000850:	2380      	movs	r3, #128	@ 0x80
 8000852:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000854:	2301      	movs	r3, #1
 8000856:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000858:	2301      	movs	r3, #1
 800085a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085c:	2302      	movs	r3, #2
 800085e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Flash_CS_GPIO_Port, &GPIO_InitStruct);
 8000860:	f107 0310 	add.w	r3, r7, #16
 8000864:	4619      	mov	r1, r3
 8000866:	480c      	ldr	r0, [pc, #48]	@ (8000898 <MX_GPIO_Init+0xf0>)
 8000868:	f002 fb44 	bl	8002ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Switch_Input_Pin Encoder_Input_Pin */
  GPIO_InitStruct.Pin = Switch_Input_Pin|Encoder_Input_Pin;
 800086c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000870:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000872:	2300      	movs	r3, #0
 8000874:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000876:	2301      	movs	r3, #1
 8000878:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800087a:	f107 0310 	add.w	r3, r7, #16
 800087e:	4619      	mov	r1, r3
 8000880:	4806      	ldr	r0, [pc, #24]	@ (800089c <MX_GPIO_Init+0xf4>)
 8000882:	f002 fb37 	bl	8002ef4 <HAL_GPIO_Init>

}
 8000886:	bf00      	nop
 8000888:	3720      	adds	r7, #32
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40021000 	.word	0x40021000
 8000894:	40011000 	.word	0x40011000
 8000898:	40010800 	.word	0x40010800
 800089c:	40010c00 	.word	0x40010c00

080008a0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008a4:	4b12      	ldr	r3, [pc, #72]	@ (80008f0 <MX_I2C1_Init+0x50>)
 80008a6:	4a13      	ldr	r2, [pc, #76]	@ (80008f4 <MX_I2C1_Init+0x54>)
 80008a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80008aa:	4b11      	ldr	r3, [pc, #68]	@ (80008f0 <MX_I2C1_Init+0x50>)
 80008ac:	4a12      	ldr	r2, [pc, #72]	@ (80008f8 <MX_I2C1_Init+0x58>)
 80008ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008b0:	4b0f      	ldr	r3, [pc, #60]	@ (80008f0 <MX_I2C1_Init+0x50>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008b6:	4b0e      	ldr	r3, [pc, #56]	@ (80008f0 <MX_I2C1_Init+0x50>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008bc:	4b0c      	ldr	r3, [pc, #48]	@ (80008f0 <MX_I2C1_Init+0x50>)
 80008be:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80008c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008c4:	4b0a      	ldr	r3, [pc, #40]	@ (80008f0 <MX_I2C1_Init+0x50>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008ca:	4b09      	ldr	r3, [pc, #36]	@ (80008f0 <MX_I2C1_Init+0x50>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008d0:	4b07      	ldr	r3, [pc, #28]	@ (80008f0 <MX_I2C1_Init+0x50>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008d6:	4b06      	ldr	r3, [pc, #24]	@ (80008f0 <MX_I2C1_Init+0x50>)
 80008d8:	2200      	movs	r2, #0
 80008da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008dc:	4804      	ldr	r0, [pc, #16]	@ (80008f0 <MX_I2C1_Init+0x50>)
 80008de:	f002 fca5 	bl	800322c <HAL_I2C_Init>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008e8:	f000 f937 	bl	8000b5a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008ec:	bf00      	nop
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	2000008c 	.word	0x2000008c
 80008f4:	40005400 	.word	0x40005400
 80008f8:	00061a80 	.word	0x00061a80

080008fc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b088      	sub	sp, #32
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000904:	f107 0310 	add.w	r3, r7, #16
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4a29      	ldr	r2, [pc, #164]	@ (80009bc <HAL_I2C_MspInit+0xc0>)
 8000918:	4293      	cmp	r3, r2
 800091a:	d14a      	bne.n	80009b2 <HAL_I2C_MspInit+0xb6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800091c:	4b28      	ldr	r3, [pc, #160]	@ (80009c0 <HAL_I2C_MspInit+0xc4>)
 800091e:	699b      	ldr	r3, [r3, #24]
 8000920:	4a27      	ldr	r2, [pc, #156]	@ (80009c0 <HAL_I2C_MspInit+0xc4>)
 8000922:	f043 0308 	orr.w	r3, r3, #8
 8000926:	6193      	str	r3, [r2, #24]
 8000928:	4b25      	ldr	r3, [pc, #148]	@ (80009c0 <HAL_I2C_MspInit+0xc4>)
 800092a:	699b      	ldr	r3, [r3, #24]
 800092c:	f003 0308 	and.w	r3, r3, #8
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 8000934:	23c0      	movs	r3, #192	@ 0xc0
 8000936:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000938:	2312      	movs	r3, #18
 800093a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800093c:	2303      	movs	r3, #3
 800093e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000940:	f107 0310 	add.w	r3, r7, #16
 8000944:	4619      	mov	r1, r3
 8000946:	481f      	ldr	r0, [pc, #124]	@ (80009c4 <HAL_I2C_MspInit+0xc8>)
 8000948:	f002 fad4 	bl	8002ef4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800094c:	4b1c      	ldr	r3, [pc, #112]	@ (80009c0 <HAL_I2C_MspInit+0xc4>)
 800094e:	69db      	ldr	r3, [r3, #28]
 8000950:	4a1b      	ldr	r2, [pc, #108]	@ (80009c0 <HAL_I2C_MspInit+0xc4>)
 8000952:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000956:	61d3      	str	r3, [r2, #28]
 8000958:	4b19      	ldr	r3, [pc, #100]	@ (80009c0 <HAL_I2C_MspInit+0xc4>)
 800095a:	69db      	ldr	r3, [r3, #28]
 800095c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000960:	60bb      	str	r3, [r7, #8]
 8000962:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8000964:	4b18      	ldr	r3, [pc, #96]	@ (80009c8 <HAL_I2C_MspInit+0xcc>)
 8000966:	4a19      	ldr	r2, [pc, #100]	@ (80009cc <HAL_I2C_MspInit+0xd0>)
 8000968:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800096a:	4b17      	ldr	r3, [pc, #92]	@ (80009c8 <HAL_I2C_MspInit+0xcc>)
 800096c:	2210      	movs	r2, #16
 800096e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000970:	4b15      	ldr	r3, [pc, #84]	@ (80009c8 <HAL_I2C_MspInit+0xcc>)
 8000972:	2200      	movs	r2, #0
 8000974:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000976:	4b14      	ldr	r3, [pc, #80]	@ (80009c8 <HAL_I2C_MspInit+0xcc>)
 8000978:	2280      	movs	r2, #128	@ 0x80
 800097a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800097c:	4b12      	ldr	r3, [pc, #72]	@ (80009c8 <HAL_I2C_MspInit+0xcc>)
 800097e:	2200      	movs	r2, #0
 8000980:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000982:	4b11      	ldr	r3, [pc, #68]	@ (80009c8 <HAL_I2C_MspInit+0xcc>)
 8000984:	2200      	movs	r2, #0
 8000986:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000988:	4b0f      	ldr	r3, [pc, #60]	@ (80009c8 <HAL_I2C_MspInit+0xcc>)
 800098a:	2200      	movs	r2, #0
 800098c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800098e:	4b0e      	ldr	r3, [pc, #56]	@ (80009c8 <HAL_I2C_MspInit+0xcc>)
 8000990:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000994:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000996:	480c      	ldr	r0, [pc, #48]	@ (80009c8 <HAL_I2C_MspInit+0xcc>)
 8000998:	f002 f94c 	bl	8002c34 <HAL_DMA_Init>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <HAL_I2C_MspInit+0xaa>
    {
      Error_Handler();
 80009a2:	f000 f8da 	bl	8000b5a <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4a07      	ldr	r2, [pc, #28]	@ (80009c8 <HAL_I2C_MspInit+0xcc>)
 80009aa:	635a      	str	r2, [r3, #52]	@ 0x34
 80009ac:	4a06      	ldr	r2, [pc, #24]	@ (80009c8 <HAL_I2C_MspInit+0xcc>)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80009b2:	bf00      	nop
 80009b4:	3720      	adds	r7, #32
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40005400 	.word	0x40005400
 80009c0:	40021000 	.word	0x40021000
 80009c4:	40010c00 	.word	0x40010c00
 80009c8:	200000e0 	.word	0x200000e0
 80009cc:	4002006c 	.word	0x4002006c

080009d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009d4:	f001 ff9a 	bl	800290c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009d8:	f000 f87a 	bl	8000ad0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009dc:	f7ff fee4 	bl	80007a8 <MX_GPIO_Init>
  MX_DMA_Init();
 80009e0:	f7ff fec4 	bl	800076c <MX_DMA_Init>
  MX_I2C1_Init();
 80009e4:	f7ff ff5c 	bl	80008a0 <MX_I2C1_Init>
  MX_TIM3_Init();
 80009e8:	f001 fd6a 	bl	80024c0 <MX_TIM3_Init>
  MX_SPI2_Init();
 80009ec:	f001 fc42 	bl	8002274 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  // W25Q64_Init(); // 初始化W25Q64
  OLED_Init(); // 初始化OLED
 80009f0:	f000 fa96 	bl	8000f20 <OLED_Init>
  OLED_InitBuffer(); // 初始化双缓冲
 80009f4:	f000 f8b8 	bl	8000b68 <OLED_InitBuffer>
  OLED_ClearBuffer(); // 清空缓冲区
 80009f8:	f000 f8ea 	bl	8000bd0 <OLED_ClearBuffer>
  
  OLED_EnableDiffMode(1);  // 启用差分更新
 80009fc:	2001      	movs	r0, #1
 80009fe:	f000 fbfd 	bl	80011fc <OLED_EnableDiffMode>
  OLED_EnableFastUpdate(1); // 启用快速更新
 8000a02:	2001      	movs	r0, #1
 8000a04:	f000 fc18 	bl	8001238 <OLED_EnableFastUpdate>

  
  // HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3); // 启动PWM
  // HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3); // 启动PWM
  // HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); // 启动PWM
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1); // 启动编码器
 8000a08:	2100      	movs	r1, #0
 8000a0a:	4827      	ldr	r0, [pc, #156]	@ (8000aa8 <main+0xd8>)
 8000a0c:	f003 fdcc 	bl	80045a8 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_2); // 启动编码器
 8000a10:	2104      	movs	r1, #4
 8000a12:	4825      	ldr	r0, [pc, #148]	@ (8000aa8 <main+0xd8>)
 8000a14:	f003 fdc8 	bl	80045a8 <HAL_TIM_Encoder_Start>

  OLED_InitAnimationManager(&g_AnimationManager); // 初始化动画管理器
 8000a18:	4824      	ldr	r0, [pc, #144]	@ (8000aac <main+0xdc>)
 8000a1a:	f001 fbc7 	bl	80021ac <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&Menu_AnimationManager); // 初始化菜单动画管理器
 8000a1e:	4824      	ldr	r0, [pc, #144]	@ (8000ab0 <main+0xe0>)
 8000a20:	f001 fbc4 	bl	80021ac <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&Games_AnimationManager); // 初始化游戏动画管理器
 8000a24:	4823      	ldr	r0, [pc, #140]	@ (8000ab4 <main+0xe4>)
 8000a26:	f001 fbc1 	bl	80021ac <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&Tools_AnimationManager); // 初始化工具动画管理器
 8000a2a:	4823      	ldr	r0, [pc, #140]	@ (8000ab8 <main+0xe8>)
 8000a2c:	f001 fbbe 	bl	80021ac <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&Settings_AnimationManager); // 初始化设置动画管理器
 8000a30:	4822      	ldr	r0, [pc, #136]	@ (8000abc <main+0xec>)
 8000a32:	f001 fbbb 	bl	80021ac <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&About_AnimationManager); // 初始化关于动画管理器
 8000a36:	4822      	ldr	r0, [pc, #136]	@ (8000ac0 <main+0xf0>)
 8000a38:	f001 fbb8 	bl	80021ac <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&Status_AnimationManager); // 初始化状态动画管理器
 8000a3c:	4821      	ldr	r0, [pc, #132]	@ (8000ac4 <main+0xf4>)
 8000a3e:	f001 fbb5 	bl	80021ac <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&g_Title_AnimationManager); // 初始化标题动画管理器
 8000a42:	4821      	ldr	r0, [pc, #132]	@ (8000ac8 <main+0xf8>)
 8000a44:	f001 fbb2 	bl	80021ac <OLED_InitAnimationManager>
  __HAL_TIM_SET_COUNTER(&htim3, 32767);
 8000a48:	4b17      	ldr	r3, [pc, #92]	@ (8000aa8 <main+0xd8>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000a50:	625a      	str	r2, [r3, #36]	@ 0x24
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {    
    #pragma region OLED_UI_SETTINGS // UI设置
    OLED_ClearBuffer();
 8000a52:	f000 f8bd 	bl	8000bd0 <OLED_ClearBuffer>
    
    // System_UI_Loop(); // UI循环
    play_video(); // 播放视频
 8000a56:	f001 fecb 	bl	80027f0 <play_video>
    // uint8_t data[12]; // 分配内存
    // W25Q64_Read(0x0000, data, 12); // 读取数据
    
    OLED_OptimizedDisplayFPS(80, 56); // 显示帧率
 8000a5a:	2138      	movs	r1, #56	@ 0x38
 8000a5c:	2050      	movs	r0, #80	@ 0x50
 8000a5e:	f000 fc95 	bl	800138c <OLED_OptimizedDisplayFPS>
    count = __HAL_TIM_GET_COUNTER(&htim3); // 获取编码器计数值 1圈40
 8000a62:	4b11      	ldr	r3, [pc, #68]	@ (8000aa8 <main+0xd8>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a68:	b29a      	uxth	r2, r3
 8000a6a:	4b18      	ldr	r3, [pc, #96]	@ (8000acc <main+0xfc>)
 8000a6c:	801a      	strh	r2, [r3, #0]
    OLED_UpdateAnimationManager(&Menu_AnimationManager); // 更新菜单动画管理器
 8000a6e:	4810      	ldr	r0, [pc, #64]	@ (8000ab0 <main+0xe0>)
 8000a70:	f001 fbaf 	bl	80021d2 <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&g_AnimationManager); // 更新动画管理器
 8000a74:	480d      	ldr	r0, [pc, #52]	@ (8000aac <main+0xdc>)
 8000a76:	f001 fbac 	bl	80021d2 <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&Games_AnimationManager); // 更新游戏动画管理器
 8000a7a:	480e      	ldr	r0, [pc, #56]	@ (8000ab4 <main+0xe4>)
 8000a7c:	f001 fba9 	bl	80021d2 <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&Tools_AnimationManager); // 更新工具动画管理器
 8000a80:	480d      	ldr	r0, [pc, #52]	@ (8000ab8 <main+0xe8>)
 8000a82:	f001 fba6 	bl	80021d2 <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&Settings_AnimationManager); // 更新设置动画管理器
 8000a86:	480d      	ldr	r0, [pc, #52]	@ (8000abc <main+0xec>)
 8000a88:	f001 fba3 	bl	80021d2 <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&About_AnimationManager); // 更新关于动画管理器
 8000a8c:	480c      	ldr	r0, [pc, #48]	@ (8000ac0 <main+0xf0>)
 8000a8e:	f001 fba0 	bl	80021d2 <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&Status_AnimationManager); // 更新状态动画管理器
 8000a92:	480c      	ldr	r0, [pc, #48]	@ (8000ac4 <main+0xf4>)
 8000a94:	f001 fb9d 	bl	80021d2 <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&g_Title_AnimationManager); // 更新标题动画管理器
 8000a98:	480b      	ldr	r0, [pc, #44]	@ (8000ac8 <main+0xf8>)
 8000a9a:	f001 fb9a 	bl	80021d2 <OLED_UpdateAnimationManager>
    // OLED_DisplayString(0, 0, data); // 显示字符串
    // OLED_SmartUpdate(); // 智能更新显示
    OLED_UpdateDisplayVSync(); // 垂直同步更新显示
 8000a9e:	f000 f8df 	bl	8000c60 <OLED_UpdateDisplayVSync>
    OLED_ClearBuffer();
 8000aa2:	bf00      	nop
 8000aa4:	e7d5      	b.n	8000a52 <main+0x82>
 8000aa6:	bf00      	nop
 8000aa8:	20003d48 	.word	0x20003d48
 8000aac:	200036f8 	.word	0x200036f8
 8000ab0:	20000d4c 	.word	0x20000d4c
 8000ab4:	20001340 	.word	0x20001340
 8000ab8:	20001934 	.word	0x20001934
 8000abc:	20001f28 	.word	0x20001f28
 8000ac0:	2000251c 	.word	0x2000251c
 8000ac4:	20002b10 	.word	0x20002b10
 8000ac8:	20003104 	.word	0x20003104
 8000acc:	20000124 	.word	0x20000124

08000ad0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b090      	sub	sp, #64	@ 0x40
 8000ad4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ad6:	f107 0318 	add.w	r3, r7, #24
 8000ada:	2228      	movs	r2, #40	@ 0x28
 8000adc:	2100      	movs	r1, #0
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f003 ff02 	bl	80048e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	601a      	str	r2, [r3, #0]
 8000aea:	605a      	str	r2, [r3, #4]
 8000aec:	609a      	str	r2, [r3, #8]
 8000aee:	60da      	str	r2, [r3, #12]
 8000af0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000af2:	2301      	movs	r3, #1
 8000af4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000af6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000afa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000afc:	2300      	movs	r3, #0
 8000afe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b00:	2301      	movs	r3, #1
 8000b02:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b04:	2302      	movs	r3, #2
 8000b06:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b08:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b0c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b0e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000b12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b14:	f107 0318 	add.w	r3, r7, #24
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f003 f823 	bl	8003b64 <HAL_RCC_OscConfig>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000b24:	f000 f819 	bl	8000b5a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b28:	230f      	movs	r3, #15
 8000b2a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b30:	2300      	movs	r3, #0
 8000b32:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b38:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b3e:	1d3b      	adds	r3, r7, #4
 8000b40:	2102      	movs	r1, #2
 8000b42:	4618      	mov	r0, r3
 8000b44:	f003 fa90 	bl	8004068 <HAL_RCC_ClockConfig>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000b4e:	f000 f804 	bl	8000b5a <Error_Handler>
  }
}
 8000b52:	bf00      	nop
 8000b54:	3740      	adds	r7, #64	@ 0x40
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b5e:	b672      	cpsid	i
}
 8000b60:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b62:	bf00      	nop
 8000b64:	e7fd      	b.n	8000b62 <Error_Handler+0x8>
	...

08000b68 <OLED_InitBuffer>:
        0x22, 0x00, 0x07  // 页地址范围: 0-7
};

// 初始化缓冲区
void OLED_InitBuffer(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
    // 清空缓冲区
    memset(OLED_BackBuffer, 0, sizeof(OLED_BackBuffer));
 8000b6e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b72:	2100      	movs	r1, #0
 8000b74:	4811      	ldr	r0, [pc, #68]	@ (8000bbc <OLED_InitBuffer+0x54>)
 8000b76:	f003 feb7 	bl	80048e8 <memset>
    memset(OLED_FrontBuffer, 0, sizeof(OLED_FrontBuffer));
 8000b7a:	f240 4201 	movw	r2, #1025	@ 0x401
 8000b7e:	2100      	movs	r1, #0
 8000b80:	480f      	ldr	r0, [pc, #60]	@ (8000bc0 <OLED_InitBuffer+0x58>)
 8000b82:	f003 feb1 	bl	80048e8 <memset>

    // 初始化第一个字节为数据控制字节
    OLED_FrontBuffer[0] = 0x40; // 数据控制字节：Co=0, D/C#=1 (数据)
 8000b86:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc0 <OLED_InitBuffer+0x58>)
 8000b88:	2240      	movs	r2, #64	@ 0x40
 8000b8a:	701a      	strb	r2, [r3, #0]

    // 初始化状态变量
    oled_update_flag = OLED_READY;
 8000b8c:	4b0d      	ldr	r3, [pc, #52]	@ (8000bc4 <OLED_InitBuffer+0x5c>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	701a      	strb	r2, [r3, #0]
    oled_dma_busy = OLED_READY;
 8000b92:	4b0d      	ldr	r3, [pc, #52]	@ (8000bc8 <OLED_InitBuffer+0x60>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	701a      	strb	r2, [r3, #0]

    // 将所有页面标记为脏（需要更新）
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8000b98:	2300      	movs	r3, #0
 8000b9a:	71fb      	strb	r3, [r7, #7]
 8000b9c:	e006      	b.n	8000bac <OLED_InitBuffer+0x44>
    {
        oled_dirty_pages[i] = 1;
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	4a0a      	ldr	r2, [pc, #40]	@ (8000bcc <OLED_InitBuffer+0x64>)
 8000ba2:	2101      	movs	r1, #1
 8000ba4:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8000ba6:	79fb      	ldrb	r3, [r7, #7]
 8000ba8:	3301      	adds	r3, #1
 8000baa:	71fb      	strb	r3, [r7, #7]
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	2b07      	cmp	r3, #7
 8000bb0:	d9f5      	bls.n	8000b9e <OLED_InitBuffer+0x36>
    }
}
 8000bb2:	bf00      	nop
 8000bb4:	bf00      	nop
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	20000138 	.word	0x20000138
 8000bc0:	20000538 	.word	0x20000538
 8000bc4:	2000012c 	.word	0x2000012c
 8000bc8:	2000012d 	.word	0x2000012d
 8000bcc:	20000130 	.word	0x20000130

08000bd0 <OLED_ClearBuffer>:

// 清空缓冲区
void OLED_ClearBuffer(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
    // 重置缓冲区为全0 (全黑)
    memset(OLED_BackBuffer, 0, sizeof(OLED_BackBuffer));
 8000bd6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000bda:	2100      	movs	r1, #0
 8000bdc:	480a      	ldr	r0, [pc, #40]	@ (8000c08 <OLED_ClearBuffer+0x38>)
 8000bde:	f003 fe83 	bl	80048e8 <memset>

    // 将所有页面标记为脏（需要更新）
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8000be2:	2300      	movs	r3, #0
 8000be4:	71fb      	strb	r3, [r7, #7]
 8000be6:	e006      	b.n	8000bf6 <OLED_ClearBuffer+0x26>
    {
        oled_dirty_pages[i] = 1;
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	4a08      	ldr	r2, [pc, #32]	@ (8000c0c <OLED_ClearBuffer+0x3c>)
 8000bec:	2101      	movs	r1, #1
 8000bee:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	71fb      	strb	r3, [r7, #7]
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	2b07      	cmp	r3, #7
 8000bfa:	d9f5      	bls.n	8000be8 <OLED_ClearBuffer+0x18>
    }
}
 8000bfc:	bf00      	nop
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000138 	.word	0x20000138
 8000c0c:	20000130 	.word	0x20000130

08000c10 <OLED_IsBusy>:

uint8_t OLED_IsBusy(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
    // 如果标记为忙，检查是否已经过了足够时间
    if (oled_update_flag)
 8000c16:	4b0f      	ldr	r3, [pc, #60]	@ (8000c54 <OLED_IsBusy+0x44>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d007      	beq.n	8000c30 <OLED_IsBusy+0x20>
    {
        // SSD1315/SSD1306 典型帧率约为60Hz，每帧约16.7ms
        // 可以根据需要调整刷新率，减小此值可以提高帧率
        uint32_t current_time = HAL_GetTick();
 8000c20:	f001 fecc 	bl	80029bc <HAL_GetTick>
 8000c24:	6078      	str	r0, [r7, #4]
        if (current_time - oled_last_update_time >= 0)
 8000c26:	4b0c      	ldr	r3, [pc, #48]	@ (8000c58 <OLED_IsBusy+0x48>)
 8000c28:	681b      	ldr	r3, [r3, #0]
        {
            oled_update_flag = OLED_READY; // 已经过了足够时间，不再忙
 8000c2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c54 <OLED_IsBusy+0x44>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	701a      	strb	r2, [r3, #0]
        }
    }

    // 如果DMA传输正在进行，也视为忙
    return (oled_update_flag || oled_dma_busy);
 8000c30:	4b08      	ldr	r3, [pc, #32]	@ (8000c54 <OLED_IsBusy+0x44>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d104      	bne.n	8000c44 <OLED_IsBusy+0x34>
 8000c3a:	4b08      	ldr	r3, [pc, #32]	@ (8000c5c <OLED_IsBusy+0x4c>)
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <OLED_IsBusy+0x38>
 8000c44:	2301      	movs	r3, #1
 8000c46:	e000      	b.n	8000c4a <OLED_IsBusy+0x3a>
 8000c48:	2300      	movs	r3, #0
 8000c4a:	b2db      	uxtb	r3, r3
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	2000012c 	.word	0x2000012c
 8000c58:	20000128 	.word	0x20000128
 8000c5c:	2000012d 	.word	0x2000012d

08000c60 <OLED_UpdateDisplayVSync>:

void OLED_UpdateDisplayVSync(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af02      	add	r7, sp, #8
    // 等待上一次更新完成
    while (OLED_IsBusy())
 8000c66:	bf00      	nop
 8000c68:	f7ff ffd2 	bl	8000c10 <OLED_IsBusy>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d1fa      	bne.n	8000c68 <OLED_UpdateDisplayVSync+0x8>
    {
        // 可以加入短暂延时或者让出CPU，但通常不会停留很久
    }

    oled_update_flag = OLED_BUSY;
 8000c72:	4b1f      	ldr	r3, [pc, #124]	@ (8000cf0 <OLED_UpdateDisplayVSync+0x90>)
 8000c74:	2201      	movs	r2, #1
 8000c76:	701a      	strb	r2, [r3, #0]
    oled_last_update_time = HAL_GetTick();
 8000c78:	f001 fea0 	bl	80029bc <HAL_GetTick>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	4a1d      	ldr	r2, [pc, #116]	@ (8000cf4 <OLED_UpdateDisplayVSync+0x94>)
 8000c80:	6013      	str	r3, [r2, #0]

    OLED_FrontBuffer[0] = 0x40;                                             // 数据控制字节：Co=0, D/C#=1 (数据)
 8000c82:	4b1d      	ldr	r3, [pc, #116]	@ (8000cf8 <OLED_UpdateDisplayVSync+0x98>)
 8000c84:	2240      	movs	r2, #64	@ 0x40
 8000c86:	701a      	strb	r2, [r3, #0]
    memcpy(OLED_FrontBuffer + 1, OLED_BackBuffer, OLED_WIDTH * OLED_PAGES); // 复制当前缓冲区到前缓冲区
 8000c88:	4a1c      	ldr	r2, [pc, #112]	@ (8000cfc <OLED_UpdateDisplayVSync+0x9c>)
 8000c8a:	4b1d      	ldr	r3, [pc, #116]	@ (8000d00 <OLED_UpdateDisplayVSync+0xa0>)
 8000c8c:	4610      	mov	r0, r2
 8000c8e:	4619      	mov	r1, r3
 8000c90:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c94:	461a      	mov	r2, r3
 8000c96:	f003 fe5b 	bl	8004950 <memcpy>

    // 一次性发送所有命令
    for (uint8_t i = 0; i < sizeof(cmds); i++)
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	71fb      	strb	r3, [r7, #7]
 8000c9e:	e008      	b.n	8000cb2 <OLED_UpdateDisplayVSync+0x52>
    {
        OLED_SendCommand(cmds[i]);
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	4a18      	ldr	r2, [pc, #96]	@ (8000d04 <OLED_UpdateDisplayVSync+0xa4>)
 8000ca4:	5cd3      	ldrb	r3, [r2, r3]
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f000 f920 	bl	8000eec <OLED_SendCommand>
    for (uint8_t i = 0; i < sizeof(cmds); i++)
 8000cac:	79fb      	ldrb	r3, [r7, #7]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	71fb      	strb	r3, [r7, #7]
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	2b07      	cmp	r3, #7
 8000cb6:	d9f3      	bls.n	8000ca0 <OLED_UpdateDisplayVSync+0x40>
    }


    HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDR << 1, OLED_FrontBuffer, OLED_WIDTH * OLED_PAGES + 1, HAL_MAX_DELAY);
 8000cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8000cbc:	9300      	str	r3, [sp, #0]
 8000cbe:	f240 4301 	movw	r3, #1025	@ 0x401
 8000cc2:	4a0d      	ldr	r2, [pc, #52]	@ (8000cf8 <OLED_UpdateDisplayVSync+0x98>)
 8000cc4:	2178      	movs	r1, #120	@ 0x78
 8000cc6:	4810      	ldr	r0, [pc, #64]	@ (8000d08 <OLED_UpdateDisplayVSync+0xa8>)
 8000cc8:	f002 fbf4 	bl	80034b4 <HAL_I2C_Master_Transmit>

    // 重置所有脏页标记
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8000ccc:	2300      	movs	r3, #0
 8000cce:	71bb      	strb	r3, [r7, #6]
 8000cd0:	e006      	b.n	8000ce0 <OLED_UpdateDisplayVSync+0x80>
    {
        oled_dirty_pages[i] = 0;
 8000cd2:	79bb      	ldrb	r3, [r7, #6]
 8000cd4:	4a0d      	ldr	r2, [pc, #52]	@ (8000d0c <OLED_UpdateDisplayVSync+0xac>)
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8000cda:	79bb      	ldrb	r3, [r7, #6]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	71bb      	strb	r3, [r7, #6]
 8000ce0:	79bb      	ldrb	r3, [r7, #6]
 8000ce2:	2b07      	cmp	r3, #7
 8000ce4:	d9f5      	bls.n	8000cd2 <OLED_UpdateDisplayVSync+0x72>
    }
}
 8000ce6:	bf00      	nop
 8000ce8:	bf00      	nop
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	2000012c 	.word	0x2000012c
 8000cf4:	20000128 	.word	0x20000128
 8000cf8:	20000538 	.word	0x20000538
 8000cfc:	20000539 	.word	0x20000539
 8000d00:	20000138 	.word	0x20000138
 8000d04:	0800691c 	.word	0x0800691c
 8000d08:	2000008c 	.word	0x2000008c
 8000d0c:	20000130 	.word	0x20000130

08000d10 <OLED_UpdateDisplayPartial>:
    }
}

// 局部更新显示函数
void OLED_UpdateDisplayPartial(uint8_t startPage, uint8_t endPage)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af02      	add	r7, sp, #8
 8000d16:	4603      	mov	r3, r0
 8000d18:	460a      	mov	r2, r1
 8000d1a:	71fb      	strb	r3, [r7, #7]
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	71bb      	strb	r3, [r7, #6]
    // 边界检查
    if (startPage >= OLED_PAGES || endPage >= OLED_PAGES || startPage > endPage)
 8000d20:	79fb      	ldrb	r3, [r7, #7]
 8000d22:	2b07      	cmp	r3, #7
 8000d24:	d85c      	bhi.n	8000de0 <OLED_UpdateDisplayPartial+0xd0>
 8000d26:	79bb      	ldrb	r3, [r7, #6]
 8000d28:	2b07      	cmp	r3, #7
 8000d2a:	d859      	bhi.n	8000de0 <OLED_UpdateDisplayPartial+0xd0>
 8000d2c:	79fa      	ldrb	r2, [r7, #7]
 8000d2e:	79bb      	ldrb	r3, [r7, #6]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d855      	bhi.n	8000de0 <OLED_UpdateDisplayPartial+0xd0>
        return;

    // 等待上一次更新完成
    while (OLED_IsBusy())
 8000d34:	bf00      	nop
 8000d36:	f7ff ff6b 	bl	8000c10 <OLED_IsBusy>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d1fa      	bne.n	8000d36 <OLED_UpdateDisplayPartial+0x26>
    {
        // 可以加入短暂延时或者让出CPU
    }

    oled_update_flag = OLED_BUSY;
 8000d40:	4b29      	ldr	r3, [pc, #164]	@ (8000de8 <OLED_UpdateDisplayPartial+0xd8>)
 8000d42:	2201      	movs	r2, #1
 8000d44:	701a      	strb	r2, [r3, #0]
    oled_last_update_time = HAL_GetTick();
 8000d46:	f001 fe39 	bl	80029bc <HAL_GetTick>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	4a27      	ldr	r2, [pc, #156]	@ (8000dec <OLED_UpdateDisplayPartial+0xdc>)
 8000d4e:	6013      	str	r3, [r2, #0]

    // 设置页地址范围
    OLED_SendCommand(0x22);      // 页地址设置命令
 8000d50:	2022      	movs	r0, #34	@ 0x22
 8000d52:	f000 f8cb 	bl	8000eec <OLED_SendCommand>
    OLED_SendCommand(startPage); // 起始页
 8000d56:	79fb      	ldrb	r3, [r7, #7]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f000 f8c7 	bl	8000eec <OLED_SendCommand>
    OLED_SendCommand(endPage);   // 结束页
 8000d5e:	79bb      	ldrb	r3, [r7, #6]
 8000d60:	4618      	mov	r0, r3
 8000d62:	f000 f8c3 	bl	8000eec <OLED_SendCommand>

    // 设置列地址范围（总是更新整行）
    OLED_SendCommand(0x21); // 列地址设置命令
 8000d66:	2021      	movs	r0, #33	@ 0x21
 8000d68:	f000 f8c0 	bl	8000eec <OLED_SendCommand>
    OLED_SendCommand(0x00); // 起始列
 8000d6c:	2000      	movs	r0, #0
 8000d6e:	f000 f8bd 	bl	8000eec <OLED_SendCommand>
    OLED_SendCommand(0x7F); // 结束列 (127)
 8000d72:	207f      	movs	r0, #127	@ 0x7f
 8000d74:	f000 f8ba 	bl	8000eec <OLED_SendCommand>

    // 计算需要传输的数据长度
    uint16_t dataLen = OLED_WIDTH * (endPage - startPage + 1);
 8000d78:	79ba      	ldrb	r2, [r7, #6]
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
 8000d7c:	1ad3      	subs	r3, r2, r3
 8000d7e:	3301      	adds	r3, #1
 8000d80:	b29b      	uxth	r3, r3
 8000d82:	01db      	lsls	r3, r3, #7
 8000d84:	81bb      	strh	r3, [r7, #12]

    // 前缓冲区的第一个字节设为数据控制字节
    OLED_FrontBuffer[0] = 0x40; // 数据控制字节：Co=0, D/C#=1 (数据)
 8000d86:	4b1a      	ldr	r3, [pc, #104]	@ (8000df0 <OLED_UpdateDisplayPartial+0xe0>)
 8000d88:	2240      	movs	r2, #64	@ 0x40
 8000d8a:	701a      	strb	r2, [r3, #0]

    // 只复制需要更新的页
    for (uint8_t page = startPage; page <= endPage; page++)
 8000d8c:	79fb      	ldrb	r3, [r7, #7]
 8000d8e:	73fb      	strb	r3, [r7, #15]
 8000d90:	e016      	b.n	8000dc0 <OLED_UpdateDisplayPartial+0xb0>
    {
        memcpy(
            OLED_FrontBuffer + 1 + (page - startPage) * OLED_WIDTH,
 8000d92:	7bfa      	ldrb	r2, [r7, #15]
 8000d94:	79fb      	ldrb	r3, [r7, #7]
 8000d96:	1ad3      	subs	r3, r2, r3
 8000d98:	01db      	lsls	r3, r3, #7
 8000d9a:	3301      	adds	r3, #1
        memcpy(
 8000d9c:	4a14      	ldr	r2, [pc, #80]	@ (8000df0 <OLED_UpdateDisplayPartial+0xe0>)
 8000d9e:	1898      	adds	r0, r3, r2
            OLED_BackBuffer + page * OLED_WIDTH,
 8000da0:	7bfb      	ldrb	r3, [r7, #15]
 8000da2:	01db      	lsls	r3, r3, #7
 8000da4:	461a      	mov	r2, r3
        memcpy(
 8000da6:	4b13      	ldr	r3, [pc, #76]	@ (8000df4 <OLED_UpdateDisplayPartial+0xe4>)
 8000da8:	4413      	add	r3, r2
 8000daa:	2280      	movs	r2, #128	@ 0x80
 8000dac:	4619      	mov	r1, r3
 8000dae:	f003 fdcf 	bl	8004950 <memcpy>
            OLED_WIDTH);
        oled_dirty_pages[page] = 0; // 重置脏页标记
 8000db2:	7bfb      	ldrb	r3, [r7, #15]
 8000db4:	4a10      	ldr	r2, [pc, #64]	@ (8000df8 <OLED_UpdateDisplayPartial+0xe8>)
 8000db6:	2100      	movs	r1, #0
 8000db8:	54d1      	strb	r1, [r2, r3]
    for (uint8_t page = startPage; page <= endPage; page++)
 8000dba:	7bfb      	ldrb	r3, [r7, #15]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	73fb      	strb	r3, [r7, #15]
 8000dc0:	7bfa      	ldrb	r2, [r7, #15]
 8000dc2:	79bb      	ldrb	r3, [r7, #6]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d9e4      	bls.n	8000d92 <OLED_UpdateDisplayPartial+0x82>
    }

    // 发送数据
    HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDR << 1, OLED_FrontBuffer, dataLen + 1, HAL_MAX_DELAY);
 8000dc8:	89bb      	ldrh	r3, [r7, #12]
 8000dca:	3301      	adds	r3, #1
 8000dcc:	b29b      	uxth	r3, r3
 8000dce:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd2:	9200      	str	r2, [sp, #0]
 8000dd4:	4a06      	ldr	r2, [pc, #24]	@ (8000df0 <OLED_UpdateDisplayPartial+0xe0>)
 8000dd6:	2178      	movs	r1, #120	@ 0x78
 8000dd8:	4808      	ldr	r0, [pc, #32]	@ (8000dfc <OLED_UpdateDisplayPartial+0xec>)
 8000dda:	f002 fb6b 	bl	80034b4 <HAL_I2C_Master_Transmit>
 8000dde:	e000      	b.n	8000de2 <OLED_UpdateDisplayPartial+0xd2>
        return;
 8000de0:	bf00      	nop
}
 8000de2:	3710      	adds	r7, #16
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	2000012c 	.word	0x2000012c
 8000dec:	20000128 	.word	0x20000128
 8000df0:	20000538 	.word	0x20000538
 8000df4:	20000138 	.word	0x20000138
 8000df8:	20000130 	.word	0x20000130
 8000dfc:	2000008c 	.word	0x2000008c

08000e00 <OLED_WritePixel>:

void OLED_WritePixel(int16_t x, int16_t y, uint8_t color)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	80fb      	strh	r3, [r7, #6]
 8000e0a:	460b      	mov	r3, r1
 8000e0c:	80bb      	strh	r3, [r7, #4]
 8000e0e:	4613      	mov	r3, r2
 8000e10:	70fb      	strb	r3, [r7, #3]
    // 边界检查
    if (x >= OLED_WIDTH || x < 0 || y >= OLED_HEIGHT || y < 0)
 8000e12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e16:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e18:	dc5e      	bgt.n	8000ed8 <OLED_WritePixel+0xd8>
 8000e1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	db5a      	blt.n	8000ed8 <OLED_WritePixel+0xd8>
 8000e22:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e26:	2b3f      	cmp	r3, #63	@ 0x3f
 8000e28:	dc56      	bgt.n	8000ed8 <OLED_WritePixel+0xd8>
 8000e2a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	db52      	blt.n	8000ed8 <OLED_WritePixel+0xd8>
        return;

    // 计算像素所在的字节位置
    uint16_t byte_index = x + (y / 8) * OLED_WIDTH;
 8000e32:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	da00      	bge.n	8000e3c <OLED_WritePixel+0x3c>
 8000e3a:	3307      	adds	r3, #7
 8000e3c:	10db      	asrs	r3, r3, #3
 8000e3e:	b21b      	sxth	r3, r3
 8000e40:	b29b      	uxth	r3, r3
 8000e42:	01db      	lsls	r3, r3, #7
 8000e44:	b29a      	uxth	r2, r3
 8000e46:	88fb      	ldrh	r3, [r7, #6]
 8000e48:	4413      	add	r3, r2
 8000e4a:	81fb      	strh	r3, [r7, #14]
    uint8_t bit_position = y % 8;
 8000e4c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e50:	425a      	negs	r2, r3
 8000e52:	f003 0307 	and.w	r3, r3, #7
 8000e56:	f002 0207 	and.w	r2, r2, #7
 8000e5a:	bf58      	it	pl
 8000e5c:	4253      	negpl	r3, r2
 8000e5e:	b21b      	sxth	r3, r3
 8000e60:	737b      	strb	r3, [r7, #13]
    uint8_t page = y / 8; // 计算所在页
 8000e62:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	da00      	bge.n	8000e6c <OLED_WritePixel+0x6c>
 8000e6a:	3307      	adds	r3, #7
 8000e6c:	10db      	asrs	r3, r3, #3
 8000e6e:	b21b      	sxth	r3, r3
 8000e70:	733b      	strb	r3, [r7, #12]

    // 记录当前像素值
    uint8_t old_value = OLED_BackBuffer[byte_index];
 8000e72:	89fb      	ldrh	r3, [r7, #14]
 8000e74:	4a1b      	ldr	r2, [pc, #108]	@ (8000ee4 <OLED_WritePixel+0xe4>)
 8000e76:	5cd3      	ldrb	r3, [r2, r3]
 8000e78:	72fb      	strb	r3, [r7, #11]

    if (color) // 如果需要点亮像素
 8000e7a:	78fb      	ldrb	r3, [r7, #3]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d00f      	beq.n	8000ea0 <OLED_WritePixel+0xa0>
        OLED_BackBuffer[byte_index] |= (1 << bit_position);
 8000e80:	89fb      	ldrh	r3, [r7, #14]
 8000e82:	4a18      	ldr	r2, [pc, #96]	@ (8000ee4 <OLED_WritePixel+0xe4>)
 8000e84:	5cd3      	ldrb	r3, [r2, r3]
 8000e86:	b25a      	sxtb	r2, r3
 8000e88:	7b7b      	ldrb	r3, [r7, #13]
 8000e8a:	2101      	movs	r1, #1
 8000e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e90:	b25b      	sxtb	r3, r3
 8000e92:	4313      	orrs	r3, r2
 8000e94:	b25a      	sxtb	r2, r3
 8000e96:	89fb      	ldrh	r3, [r7, #14]
 8000e98:	b2d1      	uxtb	r1, r2
 8000e9a:	4a12      	ldr	r2, [pc, #72]	@ (8000ee4 <OLED_WritePixel+0xe4>)
 8000e9c:	54d1      	strb	r1, [r2, r3]
 8000e9e:	e010      	b.n	8000ec2 <OLED_WritePixel+0xc2>
    else // 如果需要熄灭像素
        OLED_BackBuffer[byte_index] &= ~(1 << bit_position);
 8000ea0:	89fb      	ldrh	r3, [r7, #14]
 8000ea2:	4a10      	ldr	r2, [pc, #64]	@ (8000ee4 <OLED_WritePixel+0xe4>)
 8000ea4:	5cd3      	ldrb	r3, [r2, r3]
 8000ea6:	b25a      	sxtb	r2, r3
 8000ea8:	7b7b      	ldrb	r3, [r7, #13]
 8000eaa:	2101      	movs	r1, #1
 8000eac:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb0:	b25b      	sxtb	r3, r3
 8000eb2:	43db      	mvns	r3, r3
 8000eb4:	b25b      	sxtb	r3, r3
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	b25a      	sxtb	r2, r3
 8000eba:	89fb      	ldrh	r3, [r7, #14]
 8000ebc:	b2d1      	uxtb	r1, r2
 8000ebe:	4a09      	ldr	r2, [pc, #36]	@ (8000ee4 <OLED_WritePixel+0xe4>)
 8000ec0:	54d1      	strb	r1, [r2, r3]

    // 如果像素值发生变化，标记该页为脏
    if (old_value != OLED_BackBuffer[byte_index])
 8000ec2:	89fb      	ldrh	r3, [r7, #14]
 8000ec4:	4a07      	ldr	r2, [pc, #28]	@ (8000ee4 <OLED_WritePixel+0xe4>)
 8000ec6:	5cd3      	ldrb	r3, [r2, r3]
 8000ec8:	7afa      	ldrb	r2, [r7, #11]
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	d005      	beq.n	8000eda <OLED_WritePixel+0xda>
    {
        oled_dirty_pages[page] = 1;
 8000ece:	7b3b      	ldrb	r3, [r7, #12]
 8000ed0:	4a05      	ldr	r2, [pc, #20]	@ (8000ee8 <OLED_WritePixel+0xe8>)
 8000ed2:	2101      	movs	r1, #1
 8000ed4:	54d1      	strb	r1, [r2, r3]
 8000ed6:	e000      	b.n	8000eda <OLED_WritePixel+0xda>
        return;
 8000ed8:	bf00      	nop
    }
}
 8000eda:	3714      	adds	r7, #20
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bc80      	pop	{r7}
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	20000138 	.word	0x20000138
 8000ee8:	20000130 	.word	0x20000130

08000eec <OLED_SendCommand>:

void OLED_SendCommand(uint8_t command)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b086      	sub	sp, #24
 8000ef0:	af02      	add	r7, sp, #8
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	71fb      	strb	r3, [r7, #7]
    uint8_t data[2];
    data[0] = 0x00; // Co = 0, D/C# = 0
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	733b      	strb	r3, [r7, #12]
    data[1] = command;
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDR << 1, data, 2, HAL_MAX_DELAY);
 8000efe:	f107 020c 	add.w	r2, r7, #12
 8000f02:	f04f 33ff 	mov.w	r3, #4294967295
 8000f06:	9300      	str	r3, [sp, #0]
 8000f08:	2302      	movs	r3, #2
 8000f0a:	2178      	movs	r1, #120	@ 0x78
 8000f0c:	4803      	ldr	r0, [pc, #12]	@ (8000f1c <OLED_SendCommand+0x30>)
 8000f0e:	f002 fad1 	bl	80034b4 <HAL_I2C_Master_Transmit>
}
 8000f12:	bf00      	nop
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	2000008c 	.word	0x2000008c

08000f20 <OLED_Init>:
    OLED_UpdateDisplayVSync();
}

// 更新OLED初始化函数来使用双缓冲
void OLED_Init()
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
    HAL_Delay(100); // 等待OLED上电稳定
 8000f24:	2064      	movs	r0, #100	@ 0x64
 8000f26:	f001 fd53 	bl	80029d0 <HAL_Delay>

    // 初始化命令序列
    OLED_SendCommand(0xAE); // 关闭显示
 8000f2a:	20ae      	movs	r0, #174	@ 0xae
 8000f2c:	f7ff ffde 	bl	8000eec <OLED_SendCommand>
    OLED_SendCommand(0xD5); // 设置显示时钟分频比/振荡器频率
 8000f30:	20d5      	movs	r0, #213	@ 0xd5
 8000f32:	f7ff ffdb 	bl	8000eec <OLED_SendCommand>
    OLED_SendCommand(0x80); // 推荐值
 8000f36:	2080      	movs	r0, #128	@ 0x80
 8000f38:	f7ff ffd8 	bl	8000eec <OLED_SendCommand>
    OLED_SendCommand(0xA8); // 设置多路复用比
 8000f3c:	20a8      	movs	r0, #168	@ 0xa8
 8000f3e:	f7ff ffd5 	bl	8000eec <OLED_SendCommand>
    OLED_SendCommand(0x3F); // 默认 0x3F (1/64 duty)
 8000f42:	203f      	movs	r0, #63	@ 0x3f
 8000f44:	f7ff ffd2 	bl	8000eec <OLED_SendCommand>
    OLED_SendCommand(0xD3); // 设置显示偏移
 8000f48:	20d3      	movs	r0, #211	@ 0xd3
 8000f4a:	f7ff ffcf 	bl	8000eec <OLED_SendCommand>
    OLED_SendCommand(0x00); // 无偏移
 8000f4e:	2000      	movs	r0, #0
 8000f50:	f7ff ffcc 	bl	8000eec <OLED_SendCommand>
    OLED_SendCommand(0x40); // 设置显示开始行 (0x40-0x7F)
 8000f54:	2040      	movs	r0, #64	@ 0x40
 8000f56:	f7ff ffc9 	bl	8000eec <OLED_SendCommand>
    OLED_SendCommand(0x8D); // 电荷泵设置
 8000f5a:	208d      	movs	r0, #141	@ 0x8d
 8000f5c:	f7ff ffc6 	bl	8000eec <OLED_SendCommand>
    OLED_SendCommand(0x14); // 启用电荷泵
 8000f60:	2014      	movs	r0, #20
 8000f62:	f7ff ffc3 	bl	8000eec <OLED_SendCommand>
    OLED_SendCommand(0x20); // 设置内存寻址模式
 8000f66:	2020      	movs	r0, #32
 8000f68:	f7ff ffc0 	bl	8000eec <OLED_SendCommand>
    OLED_SendCommand(0x00); // 水平寻址模式
 8000f6c:	2000      	movs	r0, #0
 8000f6e:	f7ff ffbd 	bl	8000eec <OLED_SendCommand>
    OLED_SendCommand(0xA1); // 段重映射，列地址127映射到SEG0
 8000f72:	20a1      	movs	r0, #161	@ 0xa1
 8000f74:	f7ff ffba 	bl	8000eec <OLED_SendCommand>
    OLED_SendCommand(0xC8); // COM输出扫描方向，从COM[N-1]到COM0
 8000f78:	20c8      	movs	r0, #200	@ 0xc8
 8000f7a:	f7ff ffb7 	bl	8000eec <OLED_SendCommand>
    OLED_SendCommand(0xDA); // COM硬件配置
 8000f7e:	20da      	movs	r0, #218	@ 0xda
 8000f80:	f7ff ffb4 	bl	8000eec <OLED_SendCommand>
    OLED_SendCommand(0x12); // 交替COM配置，使能COM左/右重映射
 8000f84:	2012      	movs	r0, #18
 8000f86:	f7ff ffb1 	bl	8000eec <OLED_SendCommand>
    OLED_SendCommand(0x81); // 设置对比度控制
 8000f8a:	2081      	movs	r0, #129	@ 0x81
 8000f8c:	f7ff ffae 	bl	8000eec <OLED_SendCommand>
    OLED_SendCommand(0xCF); // 对比度值(0-255)
 8000f90:	20cf      	movs	r0, #207	@ 0xcf
 8000f92:	f7ff ffab 	bl	8000eec <OLED_SendCommand>
    OLED_SendCommand(0xD9); // 设置预充电周期
 8000f96:	20d9      	movs	r0, #217	@ 0xd9
 8000f98:	f7ff ffa8 	bl	8000eec <OLED_SendCommand>
    OLED_SendCommand(0xF1); // 第1和第2阶段的预充电周期
 8000f9c:	20f1      	movs	r0, #241	@ 0xf1
 8000f9e:	f7ff ffa5 	bl	8000eec <OLED_SendCommand>
    OLED_SendCommand(0xDB); // 设置VCOMH解除选择电平
 8000fa2:	20db      	movs	r0, #219	@ 0xdb
 8000fa4:	f7ff ffa2 	bl	8000eec <OLED_SendCommand>
    OLED_SendCommand(0x30); // 约0.83xVcc
 8000fa8:	2030      	movs	r0, #48	@ 0x30
 8000faa:	f7ff ff9f 	bl	8000eec <OLED_SendCommand>
    OLED_SendCommand(0xA4); // 显示RAM内容
 8000fae:	20a4      	movs	r0, #164	@ 0xa4
 8000fb0:	f7ff ff9c 	bl	8000eec <OLED_SendCommand>
    OLED_SendCommand(0xA6); // 正常显示(非反显)
 8000fb4:	20a6      	movs	r0, #166	@ 0xa6
 8000fb6:	f7ff ff99 	bl	8000eec <OLED_SendCommand>
    OLED_SendCommand(0x2E); // 禁用滚动
 8000fba:	202e      	movs	r0, #46	@ 0x2e
 8000fbc:	f7ff ff96 	bl	8000eec <OLED_SendCommand>

    // 初始化缓冲区
    OLED_InitBuffer();
 8000fc0:	f7ff fdd2 	bl	8000b68 <OLED_InitBuffer>

    // 清屏
    OLED_ClearBuffer();
 8000fc4:	f7ff fe04 	bl	8000bd0 <OLED_ClearBuffer>

    // 开启显示
    OLED_SendCommand(0xAF);
 8000fc8:	20af      	movs	r0, #175	@ 0xaf
 8000fca:	f7ff ff8f 	bl	8000eec <OLED_SendCommand>
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
	...

08000fd4 <OLED_DisplayChar>:
    OLED_SendCommand(0x00 + (x & 0x0F));        // 设置低4位列地址
    OLED_SendCommand(0x10 + ((x >> 4) & 0x0F)); // 设置高4位列地址
}

void OLED_DisplayChar(int16_t x, int16_t y, char ch) //! UPDATEDISPLAY REQUIRED
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b089      	sub	sp, #36	@ 0x24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	80fb      	strh	r3, [r7, #6]
 8000fde:	460b      	mov	r3, r1
 8000fe0:	80bb      	strh	r3, [r7, #4]
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	70fb      	strb	r3, [r7, #3]
    const uint8_t font_width = 6;
 8000fe6:	2306      	movs	r3, #6
 8000fe8:	773b      	strb	r3, [r7, #28]
    const uint8_t font_height = 8;
 8000fea:	2308      	movs	r3, #8
 8000fec:	76fb      	strb	r3, [r7, #27]

    if (ch < 32)
 8000fee:	78fb      	ldrb	r3, [r7, #3]
 8000ff0:	2b1f      	cmp	r3, #31
 8000ff2:	f240 80a8 	bls.w	8001146 <OLED_DisplayChar+0x172>
        return;

    uint8_t c = ch - 32;
 8000ff6:	78fb      	ldrb	r3, [r7, #3]
 8000ff8:	3b20      	subs	r3, #32
 8000ffa:	76bb      	strb	r3, [r7, #26]

    uint8_t start_page = (y >= 0) ? (y / 8) : 0;
 8000ffc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001000:	2b00      	cmp	r3, #0
 8001002:	db08      	blt.n	8001016 <OLED_DisplayChar+0x42>
 8001004:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001008:	2b00      	cmp	r3, #0
 800100a:	da00      	bge.n	800100e <OLED_DisplayChar+0x3a>
 800100c:	3307      	adds	r3, #7
 800100e:	10db      	asrs	r3, r3, #3
 8001010:	b21b      	sxth	r3, r3
 8001012:	b2db      	uxtb	r3, r3
 8001014:	e000      	b.n	8001018 <OLED_DisplayChar+0x44>
 8001016:	2300      	movs	r3, #0
 8001018:	767b      	strb	r3, [r7, #25]
    uint8_t end_page = ((y + font_height - 1) < OLED_HEIGHT) ? ((y + font_height - 1) / 8) : (OLED_HEIGHT / 8 - 1);
 800101a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800101e:	7efb      	ldrb	r3, [r7, #27]
 8001020:	4413      	add	r3, r2
 8001022:	2b40      	cmp	r3, #64	@ 0x40
 8001024:	dc0a      	bgt.n	800103c <OLED_DisplayChar+0x68>
 8001026:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800102a:	7efb      	ldrb	r3, [r7, #27]
 800102c:	4413      	add	r3, r2
 800102e:	3b01      	subs	r3, #1
 8001030:	2b00      	cmp	r3, #0
 8001032:	da00      	bge.n	8001036 <OLED_DisplayChar+0x62>
 8001034:	3307      	adds	r3, #7
 8001036:	10db      	asrs	r3, r3, #3
 8001038:	b2db      	uxtb	r3, r3
 800103a:	e000      	b.n	800103e <OLED_DisplayChar+0x6a>
 800103c:	2307      	movs	r3, #7
 800103e:	763b      	strb	r3, [r7, #24]

    extern volatile uint8_t oled_dirty_pages[];
    for (uint8_t page = start_page; page <= end_page && page < OLED_PAGES; page++)
 8001040:	7e7b      	ldrb	r3, [r7, #25]
 8001042:	77fb      	strb	r3, [r7, #31]
 8001044:	e006      	b.n	8001054 <OLED_DisplayChar+0x80>
    {
        oled_dirty_pages[page] = 1;
 8001046:	7ffb      	ldrb	r3, [r7, #31]
 8001048:	4a42      	ldr	r2, [pc, #264]	@ (8001154 <OLED_DisplayChar+0x180>)
 800104a:	2101      	movs	r1, #1
 800104c:	54d1      	strb	r1, [r2, r3]
    for (uint8_t page = start_page; page <= end_page && page < OLED_PAGES; page++)
 800104e:	7ffb      	ldrb	r3, [r7, #31]
 8001050:	3301      	adds	r3, #1
 8001052:	77fb      	strb	r3, [r7, #31]
 8001054:	7ffa      	ldrb	r2, [r7, #31]
 8001056:	7e3b      	ldrb	r3, [r7, #24]
 8001058:	429a      	cmp	r2, r3
 800105a:	d802      	bhi.n	8001062 <OLED_DisplayChar+0x8e>
 800105c:	7ffb      	ldrb	r3, [r7, #31]
 800105e:	2b07      	cmp	r3, #7
 8001060:	d9f1      	bls.n	8001046 <OLED_DisplayChar+0x72>
    }
    // 按列渲染
    for (uint8_t char_col = 0; char_col < font_width; char_col++)
 8001062:	2300      	movs	r3, #0
 8001064:	77bb      	strb	r3, [r7, #30]
 8001066:	e069      	b.n	800113c <OLED_DisplayChar+0x168>
    {
        int16_t screen_x = x + char_col;
 8001068:	7fbb      	ldrb	r3, [r7, #30]
 800106a:	b29a      	uxth	r2, r3
 800106c:	88fb      	ldrh	r3, [r7, #6]
 800106e:	4413      	add	r3, r2
 8001070:	b29b      	uxth	r3, r3
 8001072:	82fb      	strh	r3, [r7, #22]
        if (screen_x < 0 || screen_x >= OLED_WIDTH)
 8001074:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001078:	2b00      	cmp	r3, #0
 800107a:	db5b      	blt.n	8001134 <OLED_DisplayChar+0x160>
 800107c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001080:	2b7f      	cmp	r3, #127	@ 0x7f
 8001082:	dc57      	bgt.n	8001134 <OLED_DisplayChar+0x160>
            continue;

        if ((c * font_width + char_col) >= sizeof(OLED_FONT_6x8))
 8001084:	7ebb      	ldrb	r3, [r7, #26]
 8001086:	7f3a      	ldrb	r2, [r7, #28]
 8001088:	fb03 f202 	mul.w	r2, r3, r2
 800108c:	7fbb      	ldrb	r3, [r7, #30]
 800108e:	4413      	add	r3, r2
 8001090:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 8001094:	d259      	bcs.n	800114a <OLED_DisplayChar+0x176>
            break;
        uint8_t font_data_col = OLED_FONT_6x8[c * font_width + char_col];
 8001096:	7ebb      	ldrb	r3, [r7, #26]
 8001098:	7f3a      	ldrb	r2, [r7, #28]
 800109a:	fb03 f202 	mul.w	r2, r3, r2
 800109e:	7fbb      	ldrb	r3, [r7, #30]
 80010a0:	4413      	add	r3, r2
 80010a2:	4a2d      	ldr	r2, [pc, #180]	@ (8001158 <OLED_DisplayChar+0x184>)
 80010a4:	5cd3      	ldrb	r3, [r2, r3]
 80010a6:	757b      	strb	r3, [r7, #21]

        for (uint8_t char_row_bit = 0; char_row_bit < font_height; char_row_bit++)
 80010a8:	2300      	movs	r3, #0
 80010aa:	777b      	strb	r3, [r7, #29]
 80010ac:	e03d      	b.n	800112a <OLED_DisplayChar+0x156>
        {
            int16_t screen_y = y + char_row_bit;
 80010ae:	7f7b      	ldrb	r3, [r7, #29]
 80010b0:	b29a      	uxth	r2, r3
 80010b2:	88bb      	ldrh	r3, [r7, #4]
 80010b4:	4413      	add	r3, r2
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	827b      	strh	r3, [r7, #18]
            if (screen_y < 0 || screen_y >= OLED_HEIGHT)
 80010ba:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	db2f      	blt.n	8001122 <OLED_DisplayChar+0x14e>
 80010c2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80010c6:	2b3f      	cmp	r3, #63	@ 0x3f
 80010c8:	dc2b      	bgt.n	8001122 <OLED_DisplayChar+0x14e>
                continue;

            if ((font_data_col >> char_row_bit) & 0x01)
 80010ca:	7d7a      	ldrb	r2, [r7, #21]
 80010cc:	7f7b      	ldrb	r3, [r7, #29]
 80010ce:	fa42 f303 	asr.w	r3, r2, r3
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d024      	beq.n	8001124 <OLED_DisplayChar+0x150>
            {
                uint8_t page = (uint8_t)screen_y / 8;
 80010da:	8a7b      	ldrh	r3, [r7, #18]
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	08db      	lsrs	r3, r3, #3
 80010e0:	747b      	strb	r3, [r7, #17]
                uint8_t bit_offset_in_page = (uint8_t)screen_y % 8;
 80010e2:	8a7b      	ldrh	r3, [r7, #18]
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	f003 0307 	and.w	r3, r3, #7
 80010ea:	743b      	strb	r3, [r7, #16]
                uint16_t buffer_index = (uint16_t)screen_x + page * OLED_WIDTH;
 80010ec:	7c7b      	ldrb	r3, [r7, #17]
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	01db      	lsls	r3, r3, #7
 80010f2:	b29a      	uxth	r2, r3
 80010f4:	8afb      	ldrh	r3, [r7, #22]
 80010f6:	4413      	add	r3, r2
 80010f8:	81fb      	strh	r3, [r7, #14]

                if (buffer_index < sizeof(OLED_BackBuffer))
 80010fa:	89fb      	ldrh	r3, [r7, #14]
 80010fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001100:	d210      	bcs.n	8001124 <OLED_DisplayChar+0x150>
                {
                    OLED_BackBuffer[buffer_index] |= (1 << bit_offset_in_page);
 8001102:	89fb      	ldrh	r3, [r7, #14]
 8001104:	4a15      	ldr	r2, [pc, #84]	@ (800115c <OLED_DisplayChar+0x188>)
 8001106:	5cd3      	ldrb	r3, [r2, r3]
 8001108:	b25a      	sxtb	r2, r3
 800110a:	7c3b      	ldrb	r3, [r7, #16]
 800110c:	2101      	movs	r1, #1
 800110e:	fa01 f303 	lsl.w	r3, r1, r3
 8001112:	b25b      	sxtb	r3, r3
 8001114:	4313      	orrs	r3, r2
 8001116:	b25a      	sxtb	r2, r3
 8001118:	89fb      	ldrh	r3, [r7, #14]
 800111a:	b2d1      	uxtb	r1, r2
 800111c:	4a0f      	ldr	r2, [pc, #60]	@ (800115c <OLED_DisplayChar+0x188>)
 800111e:	54d1      	strb	r1, [r2, r3]
 8001120:	e000      	b.n	8001124 <OLED_DisplayChar+0x150>
                continue;
 8001122:	bf00      	nop
        for (uint8_t char_row_bit = 0; char_row_bit < font_height; char_row_bit++)
 8001124:	7f7b      	ldrb	r3, [r7, #29]
 8001126:	3301      	adds	r3, #1
 8001128:	777b      	strb	r3, [r7, #29]
 800112a:	7f7a      	ldrb	r2, [r7, #29]
 800112c:	7efb      	ldrb	r3, [r7, #27]
 800112e:	429a      	cmp	r2, r3
 8001130:	d3bd      	bcc.n	80010ae <OLED_DisplayChar+0xda>
 8001132:	e000      	b.n	8001136 <OLED_DisplayChar+0x162>
            continue;
 8001134:	bf00      	nop
    for (uint8_t char_col = 0; char_col < font_width; char_col++)
 8001136:	7fbb      	ldrb	r3, [r7, #30]
 8001138:	3301      	adds	r3, #1
 800113a:	77bb      	strb	r3, [r7, #30]
 800113c:	7fba      	ldrb	r2, [r7, #30]
 800113e:	7f3b      	ldrb	r3, [r7, #28]
 8001140:	429a      	cmp	r2, r3
 8001142:	d391      	bcc.n	8001068 <OLED_DisplayChar+0x94>
 8001144:	e002      	b.n	800114c <OLED_DisplayChar+0x178>
        return;
 8001146:	bf00      	nop
 8001148:	e000      	b.n	800114c <OLED_DisplayChar+0x178>
            break;
 800114a:	bf00      	nop
                }
            }
        }
    }
}
 800114c:	3724      	adds	r7, #36	@ 0x24
 800114e:	46bd      	mov	sp, r7
 8001150:	bc80      	pop	{r7}
 8001152:	4770      	bx	lr
 8001154:	20000130 	.word	0x20000130
 8001158:	080066dc 	.word	0x080066dc
 800115c:	20000138 	.word	0x20000138

08001160 <OLED_DisplayString>:
        }
    }
}

void OLED_DisplayString(int16_t x, int16_t y, char *str) //! UPDATEDISPLAY REQUIRED
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	603a      	str	r2, [r7, #0]
 800116a:	80fb      	strh	r3, [r7, #6]
 800116c:	460b      	mov	r3, r1
 800116e:	80bb      	strh	r3, [r7, #4]
    uint8_t j = 0;
 8001170:	2300      	movs	r3, #0
 8001172:	73fb      	strb	r3, [r7, #15]
    const uint8_t font_width = 6;
 8001174:	2306      	movs	r3, #6
 8001176:	73bb      	strb	r3, [r7, #14]
    const uint8_t font_height = 8;
 8001178:	2308      	movs	r3, #8
 800117a:	737b      	strb	r3, [r7, #13]

    if (y >= OLED_HEIGHT || (y + font_height - 1) < 0)
 800117c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001180:	2b3f      	cmp	r3, #63	@ 0x3f
 8001182:	dc34      	bgt.n	80011ee <OLED_DisplayString+0x8e>
 8001184:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001188:	7b7b      	ldrb	r3, [r7, #13]
 800118a:	4413      	add	r3, r2
 800118c:	2b00      	cmp	r3, #0
 800118e:	dd2e      	ble.n	80011ee <OLED_DisplayString+0x8e>
    {
        return;
    }

    int16_t current_char_x;
    while (str[j] != '\0')
 8001190:	e026      	b.n	80011e0 <OLED_DisplayString+0x80>
    {
        current_char_x = x + (j * font_width);
 8001192:	7bfb      	ldrb	r3, [r7, #15]
 8001194:	b29b      	uxth	r3, r3
 8001196:	7bba      	ldrb	r2, [r7, #14]
 8001198:	b292      	uxth	r2, r2
 800119a:	fb02 f303 	mul.w	r3, r2, r3
 800119e:	b29a      	uxth	r2, r3
 80011a0:	88fb      	ldrh	r3, [r7, #6]
 80011a2:	4413      	add	r3, r2
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	817b      	strh	r3, [r7, #10]
        if (current_char_x >= OLED_WIDTH)
 80011a8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80011ac:	2b7f      	cmp	r3, #127	@ 0x7f
 80011ae:	dc20      	bgt.n	80011f2 <OLED_DisplayString+0x92>
        {
            break;
        }
        if ((current_char_x + font_width - 1) < 0)
 80011b0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80011b4:	7bbb      	ldrb	r3, [r7, #14]
 80011b6:	4413      	add	r3, r2
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	dc03      	bgt.n	80011c4 <OLED_DisplayString+0x64>
        {
            j++;
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
 80011be:	3301      	adds	r3, #1
 80011c0:	73fb      	strb	r3, [r7, #15]
            continue;
 80011c2:	e00d      	b.n	80011e0 <OLED_DisplayString+0x80>
        }
        OLED_DisplayChar(current_char_x, y, str[j]);
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
 80011c6:	683a      	ldr	r2, [r7, #0]
 80011c8:	4413      	add	r3, r2
 80011ca:	781a      	ldrb	r2, [r3, #0]
 80011cc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80011d0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff fefd 	bl	8000fd4 <OLED_DisplayChar>
        j++;
 80011da:	7bfb      	ldrb	r3, [r7, #15]
 80011dc:	3301      	adds	r3, #1
 80011de:	73fb      	strb	r3, [r7, #15]
    while (str[j] != '\0')
 80011e0:	7bfb      	ldrb	r3, [r7, #15]
 80011e2:	683a      	ldr	r2, [r7, #0]
 80011e4:	4413      	add	r3, r2
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d1d2      	bne.n	8001192 <OLED_DisplayString+0x32>
 80011ec:	e002      	b.n	80011f4 <OLED_DisplayString+0x94>
        return;
 80011ee:	bf00      	nop
 80011f0:	e000      	b.n	80011f4 <OLED_DisplayString+0x94>
            break;
 80011f2:	bf00      	nop
    }
}
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
	...

080011fc <OLED_EnableDiffMode>:
    }
}

// 启用差分更新模式
void OLED_EnableDiffMode(uint8_t enable)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	71fb      	strb	r3, [r7, #7]
    diff_mode_enabled = enable;
 8001206:	4a09      	ldr	r2, [pc, #36]	@ (800122c <OLED_EnableDiffMode+0x30>)
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	7013      	strb	r3, [r2, #0]
    if (enable)
 800120c:	79fb      	ldrb	r3, [r7, #7]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d008      	beq.n	8001224 <OLED_EnableDiffMode+0x28>
    {
        memcpy(OLED_PrevBuffer, OLED_BackBuffer, OLED_WIDTH * OLED_PAGES);
 8001212:	4a07      	ldr	r2, [pc, #28]	@ (8001230 <OLED_EnableDiffMode+0x34>)
 8001214:	4b07      	ldr	r3, [pc, #28]	@ (8001234 <OLED_EnableDiffMode+0x38>)
 8001216:	4610      	mov	r0, r2
 8001218:	4619      	mov	r1, r3
 800121a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800121e:	461a      	mov	r2, r3
 8001220:	f003 fb96 	bl	8004950 <memcpy>
    }
}
 8001224:	bf00      	nop
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	20000d3c 	.word	0x20000d3c
 8001230:	2000093c 	.word	0x2000093c
 8001234:	20000138 	.word	0x20000138

08001238 <OLED_EnableFastUpdate>:

// 设置快速更新模式
void OLED_EnableFastUpdate(uint8_t enable)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	71fb      	strb	r3, [r7, #7]
    fast_update_enabled = enable;
 8001242:	4a04      	ldr	r2, [pc, #16]	@ (8001254 <OLED_EnableFastUpdate+0x1c>)
 8001244:	79fb      	ldrb	r3, [r7, #7]
 8001246:	7013      	strb	r3, [r2, #0]
}
 8001248:	bf00      	nop
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	bc80      	pop	{r7}
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	20000000 	.word	0x20000000

08001258 <OLED_SmartUpdate>:

// 智能更新显示
// 选择性更新脏页，以提高帧率
void OLED_SmartUpdate(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
    // 如果OLED/DMA忙，直接返回
    if (OLED_IsBusy())
 800125e:	f7ff fcd7 	bl	8000c10 <OLED_IsBusy>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	f040 8082 	bne.w	800136e <OLED_SmartUpdate+0x116>
    {
        return;
    }

    // 检查是否有脏页需要更新
    uint8_t has_dirty = 0;
 800126a:	2300      	movs	r3, #0
 800126c:	73fb      	strb	r3, [r7, #15]
    uint8_t first_dirty = 255;
 800126e:	23ff      	movs	r3, #255	@ 0xff
 8001270:	73bb      	strb	r3, [r7, #14]
    uint8_t last_dirty = 0;
 8001272:	2300      	movs	r3, #0
 8001274:	737b      	strb	r3, [r7, #13]

    // 如果启用了差分更新，检查哪些页已经变化
    if (diff_mode_enabled)
 8001276:	4b40      	ldr	r3, [pc, #256]	@ (8001378 <OLED_SmartUpdate+0x120>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d046      	beq.n	800130c <OLED_SmartUpdate+0xb4>
    {
        for (uint8_t page = 0; page < OLED_PAGES; page++)
 800127e:	2300      	movs	r3, #0
 8001280:	733b      	strb	r3, [r7, #12]
 8001282:	e03f      	b.n	8001304 <OLED_SmartUpdate+0xac>
        {
            // 检查此页中是否有任何字节发生变化
            uint8_t page_changed = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	72fb      	strb	r3, [r7, #11]
            uint16_t start_idx = page * OLED_WIDTH;
 8001288:	7b3b      	ldrb	r3, [r7, #12]
 800128a:	b29b      	uxth	r3, r3
 800128c:	01db      	lsls	r3, r3, #7
 800128e:	80bb      	strh	r3, [r7, #4]

            for (uint16_t i = 0; i < OLED_WIDTH; i++)
 8001290:	2300      	movs	r3, #0
 8001292:	813b      	strh	r3, [r7, #8]
 8001294:	e015      	b.n	80012c2 <OLED_SmartUpdate+0x6a>
            {
                if (OLED_BackBuffer[start_idx + i] != OLED_PrevBuffer[start_idx + i])
 8001296:	88ba      	ldrh	r2, [r7, #4]
 8001298:	893b      	ldrh	r3, [r7, #8]
 800129a:	4413      	add	r3, r2
 800129c:	4a37      	ldr	r2, [pc, #220]	@ (800137c <OLED_SmartUpdate+0x124>)
 800129e:	5cd2      	ldrb	r2, [r2, r3]
 80012a0:	88b9      	ldrh	r1, [r7, #4]
 80012a2:	893b      	ldrh	r3, [r7, #8]
 80012a4:	440b      	add	r3, r1
 80012a6:	4936      	ldr	r1, [pc, #216]	@ (8001380 <OLED_SmartUpdate+0x128>)
 80012a8:	5ccb      	ldrb	r3, [r1, r3]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d006      	beq.n	80012bc <OLED_SmartUpdate+0x64>
                {
                    page_changed = 1;
 80012ae:	2301      	movs	r3, #1
 80012b0:	72fb      	strb	r3, [r7, #11]
                    oled_dirty_pages[page] = 1;
 80012b2:	7b3b      	ldrb	r3, [r7, #12]
 80012b4:	4a33      	ldr	r2, [pc, #204]	@ (8001384 <OLED_SmartUpdate+0x12c>)
 80012b6:	2101      	movs	r1, #1
 80012b8:	54d1      	strb	r1, [r2, r3]
                    break;
 80012ba:	e005      	b.n	80012c8 <OLED_SmartUpdate+0x70>
            for (uint16_t i = 0; i < OLED_WIDTH; i++)
 80012bc:	893b      	ldrh	r3, [r7, #8]
 80012be:	3301      	adds	r3, #1
 80012c0:	813b      	strh	r3, [r7, #8]
 80012c2:	893b      	ldrh	r3, [r7, #8]
 80012c4:	2b7f      	cmp	r3, #127	@ 0x7f
 80012c6:	d9e6      	bls.n	8001296 <OLED_SmartUpdate+0x3e>
                }
            }

            if (page_changed)
 80012c8:	7afb      	ldrb	r3, [r7, #11]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d017      	beq.n	80012fe <OLED_SmartUpdate+0xa6>
            {
                has_dirty = 1;
 80012ce:	2301      	movs	r3, #1
 80012d0:	73fb      	strb	r3, [r7, #15]
                if (page < first_dirty)
 80012d2:	7b3a      	ldrb	r2, [r7, #12]
 80012d4:	7bbb      	ldrb	r3, [r7, #14]
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d201      	bcs.n	80012de <OLED_SmartUpdate+0x86>
                    first_dirty = page;
 80012da:	7b3b      	ldrb	r3, [r7, #12]
 80012dc:	73bb      	strb	r3, [r7, #14]
                if (page > last_dirty)
 80012de:	7b3a      	ldrb	r2, [r7, #12]
 80012e0:	7b7b      	ldrb	r3, [r7, #13]
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d901      	bls.n	80012ea <OLED_SmartUpdate+0x92>
                    last_dirty = page;
 80012e6:	7b3b      	ldrb	r3, [r7, #12]
 80012e8:	737b      	strb	r3, [r7, #13]

                // 更新上一帧缓存
                memcpy(
 80012ea:	88bb      	ldrh	r3, [r7, #4]
 80012ec:	4a24      	ldr	r2, [pc, #144]	@ (8001380 <OLED_SmartUpdate+0x128>)
 80012ee:	1898      	adds	r0, r3, r2
 80012f0:	88bb      	ldrh	r3, [r7, #4]
 80012f2:	4a22      	ldr	r2, [pc, #136]	@ (800137c <OLED_SmartUpdate+0x124>)
 80012f4:	4413      	add	r3, r2
 80012f6:	2280      	movs	r2, #128	@ 0x80
 80012f8:	4619      	mov	r1, r3
 80012fa:	f003 fb29 	bl	8004950 <memcpy>
        for (uint8_t page = 0; page < OLED_PAGES; page++)
 80012fe:	7b3b      	ldrb	r3, [r7, #12]
 8001300:	3301      	adds	r3, #1
 8001302:	733b      	strb	r3, [r7, #12]
 8001304:	7b3b      	ldrb	r3, [r7, #12]
 8001306:	2b07      	cmp	r3, #7
 8001308:	d9bc      	bls.n	8001284 <OLED_SmartUpdate+0x2c>
 800130a:	e01c      	b.n	8001346 <OLED_SmartUpdate+0xee>
        }
    }
    else
    {
        // 如果未启用差分更新，使用脏页标记
        for (uint8_t i = 0; i < OLED_PAGES; i++)
 800130c:	2300      	movs	r3, #0
 800130e:	71fb      	strb	r3, [r7, #7]
 8001310:	e016      	b.n	8001340 <OLED_SmartUpdate+0xe8>
        {
            if (oled_dirty_pages[i])
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	4a1b      	ldr	r2, [pc, #108]	@ (8001384 <OLED_SmartUpdate+0x12c>)
 8001316:	5cd3      	ldrb	r3, [r2, r3]
 8001318:	b2db      	uxtb	r3, r3
 800131a:	2b00      	cmp	r3, #0
 800131c:	d00d      	beq.n	800133a <OLED_SmartUpdate+0xe2>
            {
                has_dirty = 1;
 800131e:	2301      	movs	r3, #1
 8001320:	73fb      	strb	r3, [r7, #15]
                if (i < first_dirty)
 8001322:	79fa      	ldrb	r2, [r7, #7]
 8001324:	7bbb      	ldrb	r3, [r7, #14]
 8001326:	429a      	cmp	r2, r3
 8001328:	d201      	bcs.n	800132e <OLED_SmartUpdate+0xd6>
                    first_dirty = i;
 800132a:	79fb      	ldrb	r3, [r7, #7]
 800132c:	73bb      	strb	r3, [r7, #14]
                if (i > last_dirty)
 800132e:	79fa      	ldrb	r2, [r7, #7]
 8001330:	7b7b      	ldrb	r3, [r7, #13]
 8001332:	429a      	cmp	r2, r3
 8001334:	d901      	bls.n	800133a <OLED_SmartUpdate+0xe2>
                    last_dirty = i;
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	737b      	strb	r3, [r7, #13]
        for (uint8_t i = 0; i < OLED_PAGES; i++)
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	3301      	adds	r3, #1
 800133e:	71fb      	strb	r3, [r7, #7]
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	2b07      	cmp	r3, #7
 8001344:	d9e5      	bls.n	8001312 <OLED_SmartUpdate+0xba>
            }
        }
    }

    // 如果有脏页，只更新这些页
    if (has_dirty && fast_update_enabled)
 8001346:	7bfb      	ldrb	r3, [r7, #15]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d00a      	beq.n	8001362 <OLED_SmartUpdate+0x10a>
 800134c:	4b0e      	ldr	r3, [pc, #56]	@ (8001388 <OLED_SmartUpdate+0x130>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d006      	beq.n	8001362 <OLED_SmartUpdate+0x10a>
    {
        OLED_UpdateDisplayPartial(first_dirty, last_dirty);
 8001354:	7b7a      	ldrb	r2, [r7, #13]
 8001356:	7bbb      	ldrb	r3, [r7, #14]
 8001358:	4611      	mov	r1, r2
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff fcd8 	bl	8000d10 <OLED_UpdateDisplayPartial>
 8001360:	e006      	b.n	8001370 <OLED_SmartUpdate+0x118>
    }
    else if (has_dirty)
 8001362:	7bfb      	ldrb	r3, [r7, #15]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d003      	beq.n	8001370 <OLED_SmartUpdate+0x118>
    {
        OLED_UpdateDisplayVSync();
 8001368:	f7ff fc7a 	bl	8000c60 <OLED_UpdateDisplayVSync>
 800136c:	e000      	b.n	8001370 <OLED_SmartUpdate+0x118>
        return;
 800136e:	bf00      	nop
    }
}
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20000d3c 	.word	0x20000d3c
 800137c:	20000138 	.word	0x20000138
 8001380:	2000093c 	.word	0x2000093c
 8001384:	20000130 	.word	0x20000130
 8001388:	20000000 	.word	0x20000000

0800138c <OLED_OptimizedDisplayFPS>:


// 显示FPS
void OLED_OptimizedDisplayFPS(int16_t x, int16_t y)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	460a      	mov	r2, r1
 8001396:	80fb      	strh	r3, [r7, #6]
 8001398:	4613      	mov	r3, r2
 800139a:	80bb      	strh	r3, [r7, #4]
    static uint32_t last_time = 0;
    static uint32_t frames = 0;
    static uint32_t fps = 0;
    static char fps_str[16] = "FPS:0";

    frames++;
 800139c:	4b15      	ldr	r3, [pc, #84]	@ (80013f4 <OLED_OptimizedDisplayFPS+0x68>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	3301      	adds	r3, #1
 80013a2:	4a14      	ldr	r2, [pc, #80]	@ (80013f4 <OLED_OptimizedDisplayFPS+0x68>)
 80013a4:	6013      	str	r3, [r2, #0]

    // 每秒更新一次FPS
    uint32_t current_time = HAL_GetTick();
 80013a6:	f001 fb09 	bl	80029bc <HAL_GetTick>
 80013aa:	60f8      	str	r0, [r7, #12]
    if (current_time - last_time >= 1000)
 80013ac:	4b12      	ldr	r3, [pc, #72]	@ (80013f8 <OLED_OptimizedDisplayFPS+0x6c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	68fa      	ldr	r2, [r7, #12]
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80013b8:	d310      	bcc.n	80013dc <OLED_OptimizedDisplayFPS+0x50>
    {
        fps = frames;
 80013ba:	4b0e      	ldr	r3, [pc, #56]	@ (80013f4 <OLED_OptimizedDisplayFPS+0x68>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a0f      	ldr	r2, [pc, #60]	@ (80013fc <OLED_OptimizedDisplayFPS+0x70>)
 80013c0:	6013      	str	r3, [r2, #0]
        sprintf(fps_str, "FPS:%d", fps);
 80013c2:	4b0e      	ldr	r3, [pc, #56]	@ (80013fc <OLED_OptimizedDisplayFPS+0x70>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	461a      	mov	r2, r3
 80013c8:	490d      	ldr	r1, [pc, #52]	@ (8001400 <OLED_OptimizedDisplayFPS+0x74>)
 80013ca:	480e      	ldr	r0, [pc, #56]	@ (8001404 <OLED_OptimizedDisplayFPS+0x78>)
 80013cc:	f003 fa6a 	bl	80048a4 <siprintf>
        frames = 0;
 80013d0:	4b08      	ldr	r3, [pc, #32]	@ (80013f4 <OLED_OptimizedDisplayFPS+0x68>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
        last_time = current_time;
 80013d6:	4a08      	ldr	r2, [pc, #32]	@ (80013f8 <OLED_OptimizedDisplayFPS+0x6c>)
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	6013      	str	r3, [r2, #0]
    }

    OLED_DisplayString(x, y, fps_str);
 80013dc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80013e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013e4:	4a07      	ldr	r2, [pc, #28]	@ (8001404 <OLED_OptimizedDisplayFPS+0x78>)
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff feba 	bl	8001160 <OLED_DisplayString>
 80013ec:	bf00      	nop
 80013ee:	3710      	adds	r7, #16
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	20000d40 	.word	0x20000d40
 80013f8:	20000d44 	.word	0x20000d44
 80013fc:	20000d48 	.word	0x20000d48
 8001400:	080066d4 	.word	0x080066d4
 8001404:	20000004 	.word	0x20000004

08001408 <EaseLinear>:
#include "stdint.h" // 添加 stdint.h 以支持标准整数类型
#include "oled_ui.h"
#pragma region TWEENS // 动画缓动函数全部在这里定义

static float EaseLinear(float t)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
    return t;
 8001410:	687b      	ldr	r3, [r7, #4]
}
 8001412:	4618      	mov	r0, r3
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	bc80      	pop	{r7}
 800141a:	4770      	bx	lr

0800141c <EaseInQuad>:

static float EaseInQuad(float t)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
    return t * t;
 8001424:	6879      	ldr	r1, [r7, #4]
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f7fe ff9e 	bl	8000368 <__aeabi_fmul>
 800142c:	4603      	mov	r3, r0
}
 800142e:	4618      	mov	r0, r3
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <EaseOutQuad>:

static float EaseOutQuad(float t)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	b082      	sub	sp, #8
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
    return t * (2 - t);
 800143e:	6879      	ldr	r1, [r7, #4]
 8001440:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001444:	f7fe fe86 	bl	8000154 <__aeabi_fsub>
 8001448:	4603      	mov	r3, r0
 800144a:	6879      	ldr	r1, [r7, #4]
 800144c:	4618      	mov	r0, r3
 800144e:	f7fe ff8b 	bl	8000368 <__aeabi_fmul>
 8001452:	4603      	mov	r3, r0
}
 8001454:	4618      	mov	r0, r3
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <EaseInOutQuad>:

static float EaseInOutQuad(float t)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
    return t < 0.5f ? 2 * t * t : -1 + (4 - 2 * t) * t;
 8001464:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f7ff f91b 	bl	80006a4 <__aeabi_fcmplt>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d00b      	beq.n	800148c <EaseInOutQuad+0x30>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	4619      	mov	r1, r3
 8001478:	4618      	mov	r0, r3
 800147a:	f7fe fe6d 	bl	8000158 <__addsf3>
 800147e:	4603      	mov	r3, r0
 8001480:	6879      	ldr	r1, [r7, #4]
 8001482:	4618      	mov	r0, r3
 8001484:	f7fe ff70 	bl	8000368 <__aeabi_fmul>
 8001488:	4603      	mov	r3, r0
 800148a:	e016      	b.n	80014ba <EaseInOutQuad+0x5e>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4619      	mov	r1, r3
 8001490:	4618      	mov	r0, r3
 8001492:	f7fe fe61 	bl	8000158 <__addsf3>
 8001496:	4603      	mov	r3, r0
 8001498:	4619      	mov	r1, r3
 800149a:	f04f 4081 	mov.w	r0, #1082130432	@ 0x40800000
 800149e:	f7fe fe59 	bl	8000154 <__aeabi_fsub>
 80014a2:	4603      	mov	r3, r0
 80014a4:	6879      	ldr	r1, [r7, #4]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7fe ff5e 	bl	8000368 <__aeabi_fmul>
 80014ac:	4603      	mov	r3, r0
 80014ae:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7fe fe4e 	bl	8000154 <__aeabi_fsub>
 80014b8:	4603      	mov	r3, r0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <EaseInCubic>:

static float EaseInCubic(float t)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b082      	sub	sp, #8
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
    return t * t * t;
 80014ca:	6879      	ldr	r1, [r7, #4]
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f7fe ff4b 	bl	8000368 <__aeabi_fmul>
 80014d2:	4603      	mov	r3, r0
 80014d4:	6879      	ldr	r1, [r7, #4]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7fe ff46 	bl	8000368 <__aeabi_fmul>
 80014dc:	4603      	mov	r3, r0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <EaseOutCubic>:

static float EaseOutCubic(float t)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b084      	sub	sp, #16
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
    float t1 = t - 1;
 80014ee:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f7fe fe2e 	bl	8000154 <__aeabi_fsub>
 80014f8:	4603      	mov	r3, r0
 80014fa:	60fb      	str	r3, [r7, #12]
    return t1 * t1 * t1 + 1;
 80014fc:	68f9      	ldr	r1, [r7, #12]
 80014fe:	68f8      	ldr	r0, [r7, #12]
 8001500:	f7fe ff32 	bl	8000368 <__aeabi_fmul>
 8001504:	4603      	mov	r3, r0
 8001506:	68f9      	ldr	r1, [r7, #12]
 8001508:	4618      	mov	r0, r3
 800150a:	f7fe ff2d 	bl	8000368 <__aeabi_fmul>
 800150e:	4603      	mov	r3, r0
 8001510:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001514:	4618      	mov	r0, r3
 8001516:	f7fe fe1f 	bl	8000158 <__addsf3>
 800151a:	4603      	mov	r3, r0
}
 800151c:	4618      	mov	r0, r3
 800151e:	3710      	adds	r7, #16
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <EaseInOutCubic>:

static float EaseInOutCubic(float t)
{
 8001524:	b590      	push	{r4, r7, lr}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
    return t < 0.5f ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;
 800152c:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f7ff f8b7 	bl	80006a4 <__aeabi_fcmplt>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d010      	beq.n	800155e <EaseInOutCubic+0x3a>
 800153c:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f7fe ff11 	bl	8000368 <__aeabi_fmul>
 8001546:	4603      	mov	r3, r0
 8001548:	6879      	ldr	r1, [r7, #4]
 800154a:	4618      	mov	r0, r3
 800154c:	f7fe ff0c 	bl	8000368 <__aeabi_fmul>
 8001550:	4603      	mov	r3, r0
 8001552:	6879      	ldr	r1, [r7, #4]
 8001554:	4618      	mov	r0, r3
 8001556:	f7fe ff07 	bl	8000368 <__aeabi_fmul>
 800155a:	4603      	mov	r3, r0
 800155c:	e02f      	b.n	80015be <EaseInOutCubic+0x9a>
 800155e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f7fe fdf6 	bl	8000154 <__aeabi_fsub>
 8001568:	4603      	mov	r3, r0
 800156a:	461c      	mov	r4, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4619      	mov	r1, r3
 8001570:	4618      	mov	r0, r3
 8001572:	f7fe fdf1 	bl	8000158 <__addsf3>
 8001576:	4603      	mov	r3, r0
 8001578:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800157c:	4618      	mov	r0, r3
 800157e:	f7fe fde9 	bl	8000154 <__aeabi_fsub>
 8001582:	4603      	mov	r3, r0
 8001584:	4619      	mov	r1, r3
 8001586:	4620      	mov	r0, r4
 8001588:	f7fe feee 	bl	8000368 <__aeabi_fmul>
 800158c:	4603      	mov	r3, r0
 800158e:	461c      	mov	r4, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	4619      	mov	r1, r3
 8001594:	4618      	mov	r0, r3
 8001596:	f7fe fddf 	bl	8000158 <__addsf3>
 800159a:	4603      	mov	r3, r0
 800159c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7fe fdd7 	bl	8000154 <__aeabi_fsub>
 80015a6:	4603      	mov	r3, r0
 80015a8:	4619      	mov	r1, r3
 80015aa:	4620      	mov	r0, r4
 80015ac:	f7fe fedc 	bl	8000368 <__aeabi_fmul>
 80015b0:	4603      	mov	r3, r0
 80015b2:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7fe fdce 	bl	8000158 <__addsf3>
 80015bc:	4603      	mov	r3, r0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd90      	pop	{r4, r7, pc}
	...

080015c8 <EaseInExpo>:

// 在现有EaseType_t枚举中添加这些新类型
// 指数缓动
static float EaseInExpo(float t)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
    return (t == 0) ? 0 : powf(2, 10 * (t - 1));
 80015d0:	f04f 0100 	mov.w	r1, #0
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f7ff f85b 	bl	8000690 <__aeabi_fcmpeq>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d111      	bne.n	8001604 <EaseInExpo+0x3c>
 80015e0:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f7fe fdb5 	bl	8000154 <__aeabi_fsub>
 80015ea:	4603      	mov	r3, r0
 80015ec:	4908      	ldr	r1, [pc, #32]	@ (8001610 <EaseInExpo+0x48>)
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7fe feba 	bl	8000368 <__aeabi_fmul>
 80015f4:	4603      	mov	r3, r0
 80015f6:	4619      	mov	r1, r3
 80015f8:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80015fc:	f003 fe02 	bl	8005204 <powf>
 8001600:	4603      	mov	r3, r0
 8001602:	e001      	b.n	8001608 <EaseInExpo+0x40>
 8001604:	f04f 0300 	mov.w	r3, #0
}
 8001608:	4618      	mov	r0, r3
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	41200000 	.word	0x41200000

08001614 <EaseOutExpo>:

static float EaseOutExpo(float t)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
    return (t == 1) ? 1 : (1 - powf(2, -10 * t));
 800161c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f7ff f835 	bl	8000690 <__aeabi_fcmpeq>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d111      	bne.n	8001650 <EaseOutExpo+0x3c>
 800162c:	490b      	ldr	r1, [pc, #44]	@ (800165c <EaseOutExpo+0x48>)
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f7fe fe9a 	bl	8000368 <__aeabi_fmul>
 8001634:	4603      	mov	r3, r0
 8001636:	4619      	mov	r1, r3
 8001638:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800163c:	f003 fde2 	bl	8005204 <powf>
 8001640:	4603      	mov	r3, r0
 8001642:	4619      	mov	r1, r3
 8001644:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001648:	f7fe fd84 	bl	8000154 <__aeabi_fsub>
 800164c:	4603      	mov	r3, r0
 800164e:	e001      	b.n	8001654 <EaseOutExpo+0x40>
 8001650:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
}
 8001654:	4618      	mov	r0, r3
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	c1200000 	.word	0xc1200000

08001660 <EaseInOutExpo>:

static float EaseInOutExpo(float t)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
    if (t == 0)
 8001668:	f04f 0100 	mov.w	r1, #0
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f7ff f80f 	bl	8000690 <__aeabi_fcmpeq>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d002      	beq.n	800167e <EaseInOutExpo+0x1e>
        return 0;
 8001678:	f04f 0300 	mov.w	r3, #0
 800167c:	e045      	b.n	800170a <EaseInOutExpo+0xaa>
    if (t == 1)
 800167e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f7ff f804 	bl	8000690 <__aeabi_fcmpeq>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d002      	beq.n	8001694 <EaseInOutExpo+0x34>
        return 1;
 800168e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001692:	e03a      	b.n	800170a <EaseInOutExpo+0xaa>
    if (t < 0.5f)
 8001694:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f7ff f803 	bl	80006a4 <__aeabi_fcmplt>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d016      	beq.n	80016d2 <EaseInOutExpo+0x72>
        return powf(2, 20 * t - 10) / 2;
 80016a4:	491b      	ldr	r1, [pc, #108]	@ (8001714 <EaseInOutExpo+0xb4>)
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f7fe fe5e 	bl	8000368 <__aeabi_fmul>
 80016ac:	4603      	mov	r3, r0
 80016ae:	491a      	ldr	r1, [pc, #104]	@ (8001718 <EaseInOutExpo+0xb8>)
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7fe fd4f 	bl	8000154 <__aeabi_fsub>
 80016b6:	4603      	mov	r3, r0
 80016b8:	4619      	mov	r1, r3
 80016ba:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80016be:	f003 fda1 	bl	8005204 <powf>
 80016c2:	4603      	mov	r3, r0
 80016c4:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7fe ff01 	bl	80004d0 <__aeabi_fdiv>
 80016ce:	4603      	mov	r3, r0
 80016d0:	e01b      	b.n	800170a <EaseInOutExpo+0xaa>
    return (2 - powf(2, -20 * t + 10)) / 2;
 80016d2:	4912      	ldr	r1, [pc, #72]	@ (800171c <EaseInOutExpo+0xbc>)
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f7fe fe47 	bl	8000368 <__aeabi_fmul>
 80016da:	4603      	mov	r3, r0
 80016dc:	490e      	ldr	r1, [pc, #56]	@ (8001718 <EaseInOutExpo+0xb8>)
 80016de:	4618      	mov	r0, r3
 80016e0:	f7fe fd3a 	bl	8000158 <__addsf3>
 80016e4:	4603      	mov	r3, r0
 80016e6:	4619      	mov	r1, r3
 80016e8:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80016ec:	f003 fd8a 	bl	8005204 <powf>
 80016f0:	4603      	mov	r3, r0
 80016f2:	4619      	mov	r1, r3
 80016f4:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80016f8:	f7fe fd2c 	bl	8000154 <__aeabi_fsub>
 80016fc:	4603      	mov	r3, r0
 80016fe:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001702:	4618      	mov	r0, r3
 8001704:	f7fe fee4 	bl	80004d0 <__aeabi_fdiv>
 8001708:	4603      	mov	r3, r0
}
 800170a:	4618      	mov	r0, r3
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	41a00000 	.word	0x41a00000
 8001718:	41200000 	.word	0x41200000
 800171c:	c1a00000 	.word	0xc1a00000

08001720 <EaseInCirc>:

// 圆形曲线缓动
static float EaseInCirc(float t)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
    return 1 - sqrtf(1 - t * t);
 8001728:	6879      	ldr	r1, [r7, #4]
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f7fe fe1c 	bl	8000368 <__aeabi_fmul>
 8001730:	4603      	mov	r3, r0
 8001732:	4619      	mov	r1, r3
 8001734:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001738:	f7fe fd0c 	bl	8000154 <__aeabi_fsub>
 800173c:	4603      	mov	r3, r0
 800173e:	4618      	mov	r0, r3
 8001740:	f003 fdad 	bl	800529e <sqrtf>
 8001744:	4603      	mov	r3, r0
 8001746:	4619      	mov	r1, r3
 8001748:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800174c:	f7fe fd02 	bl	8000154 <__aeabi_fsub>
 8001750:	4603      	mov	r3, r0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <EaseOutCirc>:

static float EaseOutCirc(float t)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b082      	sub	sp, #8
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
    return sqrtf(1 - powf(t - 1, 2));
 8001762:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f7fe fcf4 	bl	8000154 <__aeabi_fsub>
 800176c:	4603      	mov	r3, r0
 800176e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001772:	4618      	mov	r0, r3
 8001774:	f003 fd46 	bl	8005204 <powf>
 8001778:	4603      	mov	r3, r0
 800177a:	4619      	mov	r1, r3
 800177c:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001780:	f7fe fce8 	bl	8000154 <__aeabi_fsub>
 8001784:	4603      	mov	r3, r0
 8001786:	4618      	mov	r0, r3
 8001788:	f003 fd89 	bl	800529e <sqrtf>
 800178c:	4603      	mov	r3, r0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <EaseInOutCirc>:

static float EaseInOutCirc(float t)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b082      	sub	sp, #8
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
    if (t < 0.5f)
 800179e:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f7fe ff7e 	bl	80006a4 <__aeabi_fcmplt>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d022      	beq.n	80017f4 <EaseInOutCirc+0x5e>
        return (1 - sqrtf(1 - powf(2 * t, 2))) / 2;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4619      	mov	r1, r3
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7fe fcd0 	bl	8000158 <__addsf3>
 80017b8:	4603      	mov	r3, r0
 80017ba:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80017be:	4618      	mov	r0, r3
 80017c0:	f003 fd20 	bl	8005204 <powf>
 80017c4:	4603      	mov	r3, r0
 80017c6:	4619      	mov	r1, r3
 80017c8:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80017cc:	f7fe fcc2 	bl	8000154 <__aeabi_fsub>
 80017d0:	4603      	mov	r3, r0
 80017d2:	4618      	mov	r0, r3
 80017d4:	f003 fd63 	bl	800529e <sqrtf>
 80017d8:	4603      	mov	r3, r0
 80017da:	4619      	mov	r1, r3
 80017dc:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80017e0:	f7fe fcb8 	bl	8000154 <__aeabi_fsub>
 80017e4:	4603      	mov	r3, r0
 80017e6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7fe fe70 	bl	80004d0 <__aeabi_fdiv>
 80017f0:	4603      	mov	r3, r0
 80017f2:	e027      	b.n	8001844 <EaseInOutCirc+0xae>
    return (sqrtf(1 - powf(-2 * t + 2, 2)) + 1) / 2;
 80017f4:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f7fe fdb5 	bl	8000368 <__aeabi_fmul>
 80017fe:	4603      	mov	r3, r0
 8001800:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001804:	4618      	mov	r0, r3
 8001806:	f7fe fca7 	bl	8000158 <__addsf3>
 800180a:	4603      	mov	r3, r0
 800180c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001810:	4618      	mov	r0, r3
 8001812:	f003 fcf7 	bl	8005204 <powf>
 8001816:	4603      	mov	r3, r0
 8001818:	4619      	mov	r1, r3
 800181a:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800181e:	f7fe fc99 	bl	8000154 <__aeabi_fsub>
 8001822:	4603      	mov	r3, r0
 8001824:	4618      	mov	r0, r3
 8001826:	f003 fd3a 	bl	800529e <sqrtf>
 800182a:	4603      	mov	r3, r0
 800182c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001830:	4618      	mov	r0, r3
 8001832:	f7fe fc91 	bl	8000158 <__addsf3>
 8001836:	4603      	mov	r3, r0
 8001838:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800183c:	4618      	mov	r0, r3
 800183e:	f7fe fe47 	bl	80004d0 <__aeabi_fdiv>
 8001842:	4603      	mov	r3, r0
}
 8001844:	4618      	mov	r0, r3
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <EaseInElastic>:

// 弹性缓动
static float EaseInElastic(float t)
{
 800184c:	b590      	push	{r4, r7, lr}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
    const float c4 = (2 * 3.14159f) / 3;
 8001854:	4b22      	ldr	r3, [pc, #136]	@ (80018e0 <EaseInElastic+0x94>)
 8001856:	60fb      	str	r3, [r7, #12]

    if (t == 0)
 8001858:	f04f 0100 	mov.w	r1, #0
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f7fe ff17 	bl	8000690 <__aeabi_fcmpeq>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d002      	beq.n	800186e <EaseInElastic+0x22>
        return 0;
 8001868:	f04f 0300 	mov.w	r3, #0
 800186c:	e034      	b.n	80018d8 <EaseInElastic+0x8c>
    if (t == 1)
 800186e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f7fe ff0c 	bl	8000690 <__aeabi_fcmpeq>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d002      	beq.n	8001884 <EaseInElastic+0x38>
        return 1;
 800187e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001882:	e029      	b.n	80018d8 <EaseInElastic+0x8c>
    return -powf(2, 10 * t - 10) * sinf((t * 10 - 10.75f) * c4);
 8001884:	4917      	ldr	r1, [pc, #92]	@ (80018e4 <EaseInElastic+0x98>)
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7fe fd6e 	bl	8000368 <__aeabi_fmul>
 800188c:	4603      	mov	r3, r0
 800188e:	4915      	ldr	r1, [pc, #84]	@ (80018e4 <EaseInElastic+0x98>)
 8001890:	4618      	mov	r0, r3
 8001892:	f7fe fc5f 	bl	8000154 <__aeabi_fsub>
 8001896:	4603      	mov	r3, r0
 8001898:	4619      	mov	r1, r3
 800189a:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800189e:	f003 fcb1 	bl	8005204 <powf>
 80018a2:	4603      	mov	r3, r0
 80018a4:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 80018a8:	490e      	ldr	r1, [pc, #56]	@ (80018e4 <EaseInElastic+0x98>)
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f7fe fd5c 	bl	8000368 <__aeabi_fmul>
 80018b0:	4603      	mov	r3, r0
 80018b2:	490d      	ldr	r1, [pc, #52]	@ (80018e8 <EaseInElastic+0x9c>)
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7fe fc4d 	bl	8000154 <__aeabi_fsub>
 80018ba:	4603      	mov	r3, r0
 80018bc:	68f9      	ldr	r1, [r7, #12]
 80018be:	4618      	mov	r0, r3
 80018c0:	f7fe fd52 	bl	8000368 <__aeabi_fmul>
 80018c4:	4603      	mov	r3, r0
 80018c6:	4618      	mov	r0, r3
 80018c8:	f003 fd3c 	bl	8005344 <sinf>
 80018cc:	4603      	mov	r3, r0
 80018ce:	4619      	mov	r1, r3
 80018d0:	4620      	mov	r0, r4
 80018d2:	f7fe fd49 	bl	8000368 <__aeabi_fmul>
 80018d6:	4603      	mov	r3, r0
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3714      	adds	r7, #20
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd90      	pop	{r4, r7, pc}
 80018e0:	40060a8b 	.word	0x40060a8b
 80018e4:	41200000 	.word	0x41200000
 80018e8:	412c0000 	.word	0x412c0000

080018ec <EaseOutElastic>:

static float EaseOutElastic(float t)
{
 80018ec:	b590      	push	{r4, r7, lr}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
    const float c4 = (2 * 3.14159f) / 3;
 80018f4:	4b22      	ldr	r3, [pc, #136]	@ (8001980 <EaseOutElastic+0x94>)
 80018f6:	60fb      	str	r3, [r7, #12]

    if (t == 0)
 80018f8:	f04f 0100 	mov.w	r1, #0
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f7fe fec7 	bl	8000690 <__aeabi_fcmpeq>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d002      	beq.n	800190e <EaseOutElastic+0x22>
        return 0;
 8001908:	f04f 0300 	mov.w	r3, #0
 800190c:	e034      	b.n	8001978 <EaseOutElastic+0x8c>
    if (t == 1)
 800190e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f7fe febc 	bl	8000690 <__aeabi_fcmpeq>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d002      	beq.n	8001924 <EaseOutElastic+0x38>
        return 1;
 800191e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001922:	e029      	b.n	8001978 <EaseOutElastic+0x8c>
    return powf(2, -10 * t) * sinf((t * 10 - 0.75f) * c4) + 1;
 8001924:	4917      	ldr	r1, [pc, #92]	@ (8001984 <EaseOutElastic+0x98>)
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f7fe fd1e 	bl	8000368 <__aeabi_fmul>
 800192c:	4603      	mov	r3, r0
 800192e:	4619      	mov	r1, r3
 8001930:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001934:	f003 fc66 	bl	8005204 <powf>
 8001938:	4604      	mov	r4, r0
 800193a:	4913      	ldr	r1, [pc, #76]	@ (8001988 <EaseOutElastic+0x9c>)
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f7fe fd13 	bl	8000368 <__aeabi_fmul>
 8001942:	4603      	mov	r3, r0
 8001944:	f04f 517d 	mov.w	r1, #1061158912	@ 0x3f400000
 8001948:	4618      	mov	r0, r3
 800194a:	f7fe fc03 	bl	8000154 <__aeabi_fsub>
 800194e:	4603      	mov	r3, r0
 8001950:	68f9      	ldr	r1, [r7, #12]
 8001952:	4618      	mov	r0, r3
 8001954:	f7fe fd08 	bl	8000368 <__aeabi_fmul>
 8001958:	4603      	mov	r3, r0
 800195a:	4618      	mov	r0, r3
 800195c:	f003 fcf2 	bl	8005344 <sinf>
 8001960:	4603      	mov	r3, r0
 8001962:	4619      	mov	r1, r3
 8001964:	4620      	mov	r0, r4
 8001966:	f7fe fcff 	bl	8000368 <__aeabi_fmul>
 800196a:	4603      	mov	r3, r0
 800196c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001970:	4618      	mov	r0, r3
 8001972:	f7fe fbf1 	bl	8000158 <__addsf3>
 8001976:	4603      	mov	r3, r0
}
 8001978:	4618      	mov	r0, r3
 800197a:	3714      	adds	r7, #20
 800197c:	46bd      	mov	sp, r7
 800197e:	bd90      	pop	{r4, r7, pc}
 8001980:	40060a8b 	.word	0x40060a8b
 8001984:	c1200000 	.word	0xc1200000
 8001988:	41200000 	.word	0x41200000

0800198c <EaseInOutElastic>:

static float EaseInOutElastic(float t)
{
 800198c:	b590      	push	{r4, r7, lr}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
    const float c5 = (2 * 3.14159f) / 4.5f;
 8001994:	4b44      	ldr	r3, [pc, #272]	@ (8001aa8 <EaseInOutElastic+0x11c>)
 8001996:	60fb      	str	r3, [r7, #12]

    if (t == 0)
 8001998:	f04f 0100 	mov.w	r1, #0
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f7fe fe77 	bl	8000690 <__aeabi_fcmpeq>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d002      	beq.n	80019ae <EaseInOutElastic+0x22>
        return 0;
 80019a8:	f04f 0300 	mov.w	r3, #0
 80019ac:	e077      	b.n	8001a9e <EaseInOutElastic+0x112>
    if (t == 1)
 80019ae:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f7fe fe6c 	bl	8000690 <__aeabi_fcmpeq>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d002      	beq.n	80019c4 <EaseInOutElastic+0x38>
        return 1;
 80019be:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80019c2:	e06c      	b.n	8001a9e <EaseInOutElastic+0x112>
    if (t < 0.5f)
 80019c4:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f7fe fe6b 	bl	80006a4 <__aeabi_fcmplt>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d030      	beq.n	8001a36 <EaseInOutElastic+0xaa>
        return -(powf(2, 20 * t - 10) * sinf((20 * t - 11.125f) * c5)) / 2;
 80019d4:	4935      	ldr	r1, [pc, #212]	@ (8001aac <EaseInOutElastic+0x120>)
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f7fe fcc6 	bl	8000368 <__aeabi_fmul>
 80019dc:	4603      	mov	r3, r0
 80019de:	4934      	ldr	r1, [pc, #208]	@ (8001ab0 <EaseInOutElastic+0x124>)
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7fe fbb7 	bl	8000154 <__aeabi_fsub>
 80019e6:	4603      	mov	r3, r0
 80019e8:	4619      	mov	r1, r3
 80019ea:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80019ee:	f003 fc09 	bl	8005204 <powf>
 80019f2:	4604      	mov	r4, r0
 80019f4:	492d      	ldr	r1, [pc, #180]	@ (8001aac <EaseInOutElastic+0x120>)
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f7fe fcb6 	bl	8000368 <__aeabi_fmul>
 80019fc:	4603      	mov	r3, r0
 80019fe:	492d      	ldr	r1, [pc, #180]	@ (8001ab4 <EaseInOutElastic+0x128>)
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7fe fba7 	bl	8000154 <__aeabi_fsub>
 8001a06:	4603      	mov	r3, r0
 8001a08:	68f9      	ldr	r1, [r7, #12]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7fe fcac 	bl	8000368 <__aeabi_fmul>
 8001a10:	4603      	mov	r3, r0
 8001a12:	4618      	mov	r0, r3
 8001a14:	f003 fc96 	bl	8005344 <sinf>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4620      	mov	r0, r4
 8001a1e:	f7fe fca3 	bl	8000368 <__aeabi_fmul>
 8001a22:	4603      	mov	r3, r0
 8001a24:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001a28:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7fe fd4f 	bl	80004d0 <__aeabi_fdiv>
 8001a32:	4603      	mov	r3, r0
 8001a34:	e033      	b.n	8001a9e <EaseInOutElastic+0x112>
    return (powf(2, -20 * t + 10) * sinf((20 * t - 11.125f) * c5)) / 2 + 1;
 8001a36:	4920      	ldr	r1, [pc, #128]	@ (8001ab8 <EaseInOutElastic+0x12c>)
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f7fe fc95 	bl	8000368 <__aeabi_fmul>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	491b      	ldr	r1, [pc, #108]	@ (8001ab0 <EaseInOutElastic+0x124>)
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7fe fb88 	bl	8000158 <__addsf3>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001a50:	f003 fbd8 	bl	8005204 <powf>
 8001a54:	4604      	mov	r4, r0
 8001a56:	4915      	ldr	r1, [pc, #84]	@ (8001aac <EaseInOutElastic+0x120>)
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f7fe fc85 	bl	8000368 <__aeabi_fmul>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	4914      	ldr	r1, [pc, #80]	@ (8001ab4 <EaseInOutElastic+0x128>)
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7fe fb76 	bl	8000154 <__aeabi_fsub>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	68f9      	ldr	r1, [r7, #12]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7fe fc7b 	bl	8000368 <__aeabi_fmul>
 8001a72:	4603      	mov	r3, r0
 8001a74:	4618      	mov	r0, r3
 8001a76:	f003 fc65 	bl	8005344 <sinf>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4620      	mov	r0, r4
 8001a80:	f7fe fc72 	bl	8000368 <__aeabi_fmul>
 8001a84:	4603      	mov	r3, r0
 8001a86:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7fe fd20 	bl	80004d0 <__aeabi_fdiv>
 8001a90:	4603      	mov	r3, r0
 8001a92:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7fe fb5e 	bl	8000158 <__addsf3>
 8001a9c:	4603      	mov	r3, r0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3714      	adds	r7, #20
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd90      	pop	{r4, r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	3fb2b8b9 	.word	0x3fb2b8b9
 8001aac:	41a00000 	.word	0x41a00000
 8001ab0:	41200000 	.word	0x41200000
 8001ab4:	41320000 	.word	0x41320000
 8001ab8:	c1a00000 	.word	0xc1a00000

08001abc <EaseOutBounce>:

static float EaseOutBounce(float t)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
    const float n1 = 7.5625f;
 8001ac4:	4b45      	ldr	r3, [pc, #276]	@ (8001bdc <EaseOutBounce+0x120>)
 8001ac6:	60fb      	str	r3, [r7, #12]
    const float d1 = 2.75f;
 8001ac8:	4b45      	ldr	r3, [pc, #276]	@ (8001be0 <EaseOutBounce+0x124>)
 8001aca:	60bb      	str	r3, [r7, #8]

    if (t < 1 / d1)
 8001acc:	68b9      	ldr	r1, [r7, #8]
 8001ace:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001ad2:	f7fe fcfd 	bl	80004d0 <__aeabi_fdiv>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	4619      	mov	r1, r3
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7fe fde2 	bl	80006a4 <__aeabi_fcmplt>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d00a      	beq.n	8001afc <EaseOutBounce+0x40>
    {
        return n1 * t * t;
 8001ae6:	6879      	ldr	r1, [r7, #4]
 8001ae8:	68f8      	ldr	r0, [r7, #12]
 8001aea:	f7fe fc3d 	bl	8000368 <__aeabi_fmul>
 8001aee:	4603      	mov	r3, r0
 8001af0:	6879      	ldr	r1, [r7, #4]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7fe fc38 	bl	8000368 <__aeabi_fmul>
 8001af8:	4603      	mov	r3, r0
 8001afa:	e06a      	b.n	8001bd2 <EaseOutBounce+0x116>
    }
    else if (t < 2 / d1)
 8001afc:	68b9      	ldr	r1, [r7, #8]
 8001afe:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001b02:	f7fe fce5 	bl	80004d0 <__aeabi_fdiv>
 8001b06:	4603      	mov	r3, r0
 8001b08:	4619      	mov	r1, r3
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f7fe fdca 	bl	80006a4 <__aeabi_fcmplt>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d01c      	beq.n	8001b50 <EaseOutBounce+0x94>
    {
        t -= 1.5f / d1;
 8001b16:	68b9      	ldr	r1, [r7, #8]
 8001b18:	f04f 507f 	mov.w	r0, #1069547520	@ 0x3fc00000
 8001b1c:	f7fe fcd8 	bl	80004d0 <__aeabi_fdiv>
 8001b20:	4603      	mov	r3, r0
 8001b22:	4619      	mov	r1, r3
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f7fe fb15 	bl	8000154 <__aeabi_fsub>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	607b      	str	r3, [r7, #4]
        return n1 * t * t + 0.75f;
 8001b2e:	6879      	ldr	r1, [r7, #4]
 8001b30:	68f8      	ldr	r0, [r7, #12]
 8001b32:	f7fe fc19 	bl	8000368 <__aeabi_fmul>
 8001b36:	4603      	mov	r3, r0
 8001b38:	6879      	ldr	r1, [r7, #4]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7fe fc14 	bl	8000368 <__aeabi_fmul>
 8001b40:	4603      	mov	r3, r0
 8001b42:	f04f 517d 	mov.w	r1, #1061158912	@ 0x3f400000
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7fe fb06 	bl	8000158 <__addsf3>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	e040      	b.n	8001bd2 <EaseOutBounce+0x116>
    }
    else if (t < 2.5f / d1)
 8001b50:	68b9      	ldr	r1, [r7, #8]
 8001b52:	4824      	ldr	r0, [pc, #144]	@ (8001be4 <EaseOutBounce+0x128>)
 8001b54:	f7fe fcbc 	bl	80004d0 <__aeabi_fdiv>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f7fe fda1 	bl	80006a4 <__aeabi_fcmplt>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d01a      	beq.n	8001b9e <EaseOutBounce+0xe2>
    {
        t -= 2.25f / d1;
 8001b68:	68b9      	ldr	r1, [r7, #8]
 8001b6a:	481f      	ldr	r0, [pc, #124]	@ (8001be8 <EaseOutBounce+0x12c>)
 8001b6c:	f7fe fcb0 	bl	80004d0 <__aeabi_fdiv>
 8001b70:	4603      	mov	r3, r0
 8001b72:	4619      	mov	r1, r3
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f7fe faed 	bl	8000154 <__aeabi_fsub>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	607b      	str	r3, [r7, #4]
        return n1 * t * t + 0.9375f;
 8001b7e:	6879      	ldr	r1, [r7, #4]
 8001b80:	68f8      	ldr	r0, [r7, #12]
 8001b82:	f7fe fbf1 	bl	8000368 <__aeabi_fmul>
 8001b86:	4603      	mov	r3, r0
 8001b88:	6879      	ldr	r1, [r7, #4]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7fe fbec 	bl	8000368 <__aeabi_fmul>
 8001b90:	4603      	mov	r3, r0
 8001b92:	4916      	ldr	r1, [pc, #88]	@ (8001bec <EaseOutBounce+0x130>)
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7fe fadf 	bl	8000158 <__addsf3>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	e019      	b.n	8001bd2 <EaseOutBounce+0x116>
    }
    else
    {
        t -= 2.625f / d1;
 8001b9e:	68b9      	ldr	r1, [r7, #8]
 8001ba0:	4813      	ldr	r0, [pc, #76]	@ (8001bf0 <EaseOutBounce+0x134>)
 8001ba2:	f7fe fc95 	bl	80004d0 <__aeabi_fdiv>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	4619      	mov	r1, r3
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7fe fad2 	bl	8000154 <__aeabi_fsub>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	607b      	str	r3, [r7, #4]
        return n1 * t * t + 0.984375f;
 8001bb4:	6879      	ldr	r1, [r7, #4]
 8001bb6:	68f8      	ldr	r0, [r7, #12]
 8001bb8:	f7fe fbd6 	bl	8000368 <__aeabi_fmul>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	6879      	ldr	r1, [r7, #4]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7fe fbd1 	bl	8000368 <__aeabi_fmul>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	490a      	ldr	r1, [pc, #40]	@ (8001bf4 <EaseOutBounce+0x138>)
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7fe fac4 	bl	8000158 <__addsf3>
 8001bd0:	4603      	mov	r3, r0
    }
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3710      	adds	r7, #16
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40f20000 	.word	0x40f20000
 8001be0:	40300000 	.word	0x40300000
 8001be4:	40200000 	.word	0x40200000
 8001be8:	40100000 	.word	0x40100000
 8001bec:	3f700000 	.word	0x3f700000
 8001bf0:	40280000 	.word	0x40280000
 8001bf4:	3f7c0000 	.word	0x3f7c0000

08001bf8 <EaseInBounce>:

// 反弹缓动
static float EaseInBounce(float t)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
    return 1 - EaseOutBounce(1 - t);
 8001c00:	6879      	ldr	r1, [r7, #4]
 8001c02:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001c06:	f7fe faa5 	bl	8000154 <__aeabi_fsub>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff ff55 	bl	8001abc <EaseOutBounce>
 8001c12:	4603      	mov	r3, r0
 8001c14:	4619      	mov	r1, r3
 8001c16:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001c1a:	f7fe fa9b 	bl	8000154 <__aeabi_fsub>
 8001c1e:	4603      	mov	r3, r0
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3708      	adds	r7, #8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <EaseInOutBounce>:

static float EaseInOutBounce(float t)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
    if (t < 0.5f)
 8001c30:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f7fe fd35 	bl	80006a4 <__aeabi_fcmplt>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d010      	beq.n	8001c62 <EaseInOutBounce+0x3a>
        return EaseInBounce(t * 2) * 0.5f;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4619      	mov	r1, r3
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7fe fa87 	bl	8000158 <__addsf3>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff ffd3 	bl	8001bf8 <EaseInBounce>
 8001c52:	4603      	mov	r3, r0
 8001c54:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7fe fb85 	bl	8000368 <__aeabi_fmul>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	e01b      	b.n	8001c9a <EaseInOutBounce+0x72>
    return EaseOutBounce(t * 2 - 1) * 0.5f + 0.5f;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4619      	mov	r1, r3
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7fe fa76 	bl	8000158 <__addsf3>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7fe fa6e 	bl	8000154 <__aeabi_fsub>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff ff1e 	bl	8001abc <EaseOutBounce>
 8001c80:	4603      	mov	r3, r0
 8001c82:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7fe fb6e 	bl	8000368 <__aeabi_fmul>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7fe fa60 	bl	8000158 <__addsf3>
 8001c98:	4603      	mov	r3, r0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
	...

08001ca4 <EaseInBack>:

// 背越式缓动
static float EaseInBack(float t)
{
 8001ca4:	b590      	push	{r4, r7, lr}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
    const float c1 = 1.70158f;
 8001cac:	4b15      	ldr	r3, [pc, #84]	@ (8001d04 <EaseInBack+0x60>)
 8001cae:	60fb      	str	r3, [r7, #12]
    const float c3 = c1 + 1;
 8001cb0:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001cb4:	68f8      	ldr	r0, [r7, #12]
 8001cb6:	f7fe fa4f 	bl	8000158 <__addsf3>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	60bb      	str	r3, [r7, #8]

    return c3 * t * t * t - c1 * t * t;
 8001cbe:	6879      	ldr	r1, [r7, #4]
 8001cc0:	68b8      	ldr	r0, [r7, #8]
 8001cc2:	f7fe fb51 	bl	8000368 <__aeabi_fmul>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	6879      	ldr	r1, [r7, #4]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7fe fb4c 	bl	8000368 <__aeabi_fmul>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	6879      	ldr	r1, [r7, #4]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7fe fb47 	bl	8000368 <__aeabi_fmul>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	461c      	mov	r4, r3
 8001cde:	6879      	ldr	r1, [r7, #4]
 8001ce0:	68f8      	ldr	r0, [r7, #12]
 8001ce2:	f7fe fb41 	bl	8000368 <__aeabi_fmul>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	6879      	ldr	r1, [r7, #4]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7fe fb3c 	bl	8000368 <__aeabi_fmul>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4620      	mov	r0, r4
 8001cf6:	f7fe fa2d 	bl	8000154 <__aeabi_fsub>
 8001cfa:	4603      	mov	r3, r0
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3714      	adds	r7, #20
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd90      	pop	{r4, r7, pc}
 8001d04:	3fd9cd60 	.word	0x3fd9cd60

08001d08 <EaseOutBack>:

static float EaseOutBack(float t)
{
 8001d08:	b590      	push	{r4, r7, lr}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
    const float c1 = 1.70158f;
 8001d10:	4b1c      	ldr	r3, [pc, #112]	@ (8001d84 <EaseOutBack+0x7c>)
 8001d12:	60fb      	str	r3, [r7, #12]
    const float c3 = c1 + 1;
 8001d14:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001d18:	68f8      	ldr	r0, [r7, #12]
 8001d1a:	f7fe fa1d 	bl	8000158 <__addsf3>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	60bb      	str	r3, [r7, #8]

    return 1 + c3 * powf(t - 1, 3) + c1 * powf(t - 1, 2);
 8001d22:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f7fe fa14 	bl	8000154 <__aeabi_fsub>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	4916      	ldr	r1, [pc, #88]	@ (8001d88 <EaseOutBack+0x80>)
 8001d30:	4618      	mov	r0, r3
 8001d32:	f003 fa67 	bl	8005204 <powf>
 8001d36:	4603      	mov	r3, r0
 8001d38:	68b9      	ldr	r1, [r7, #8]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7fe fb14 	bl	8000368 <__aeabi_fmul>
 8001d40:	4603      	mov	r3, r0
 8001d42:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7fe fa06 	bl	8000158 <__addsf3>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	461c      	mov	r4, r3
 8001d50:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f7fe f9fd 	bl	8000154 <__aeabi_fsub>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001d60:	4618      	mov	r0, r3
 8001d62:	f003 fa4f 	bl	8005204 <powf>
 8001d66:	4603      	mov	r3, r0
 8001d68:	68f9      	ldr	r1, [r7, #12]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7fe fafc 	bl	8000368 <__aeabi_fmul>
 8001d70:	4603      	mov	r3, r0
 8001d72:	4619      	mov	r1, r3
 8001d74:	4620      	mov	r0, r4
 8001d76:	f7fe f9ef 	bl	8000158 <__addsf3>
 8001d7a:	4603      	mov	r3, r0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3714      	adds	r7, #20
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd90      	pop	{r4, r7, pc}
 8001d84:	3fd9cd60 	.word	0x3fd9cd60
 8001d88:	40400000 	.word	0x40400000

08001d8c <EaseInOutBack>:

static float EaseInOutBack(float t)
{
 8001d8c:	b5b0      	push	{r4, r5, r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
    const float c1 = 1.70158f;
 8001d94:	4b40      	ldr	r3, [pc, #256]	@ (8001e98 <EaseInOutBack+0x10c>)
 8001d96:	60fb      	str	r3, [r7, #12]
    const float c2 = c1 * 1.525f;
 8001d98:	4940      	ldr	r1, [pc, #256]	@ (8001e9c <EaseInOutBack+0x110>)
 8001d9a:	68f8      	ldr	r0, [r7, #12]
 8001d9c:	f7fe fae4 	bl	8000368 <__aeabi_fmul>
 8001da0:	4603      	mov	r3, r0
 8001da2:	60bb      	str	r3, [r7, #8]

    if (t < 0.5f)
 8001da4:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f7fe fc7b 	bl	80006a4 <__aeabi_fcmplt>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d02c      	beq.n	8001e0e <EaseInOutBack+0x82>
        return (powf(2 * t, 2) * ((c2 + 1) * 2 * t - c2)) / 2;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4619      	mov	r1, r3
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7fe f9cd 	bl	8000158 <__addsf3>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f003 fa1d 	bl	8005204 <powf>
 8001dca:	4604      	mov	r4, r0
 8001dcc:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001dd0:	68b8      	ldr	r0, [r7, #8]
 8001dd2:	f7fe f9c1 	bl	8000158 <__addsf3>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7fe f9bc 	bl	8000158 <__addsf3>
 8001de0:	4603      	mov	r3, r0
 8001de2:	6879      	ldr	r1, [r7, #4]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7fe fabf 	bl	8000368 <__aeabi_fmul>
 8001dea:	4603      	mov	r3, r0
 8001dec:	68b9      	ldr	r1, [r7, #8]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7fe f9b0 	bl	8000154 <__aeabi_fsub>
 8001df4:	4603      	mov	r3, r0
 8001df6:	4619      	mov	r1, r3
 8001df8:	4620      	mov	r0, r4
 8001dfa:	f7fe fab5 	bl	8000368 <__aeabi_fmul>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7fe fb63 	bl	80004d0 <__aeabi_fdiv>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	e03f      	b.n	8001e8e <EaseInOutBack+0x102>
    return (powf(2 * t - 2, 2) * ((c2 + 1) * (t * 2 - 2) + c2) + 2) / 2;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4619      	mov	r1, r3
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7fe f9a0 	bl	8000158 <__addsf3>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7fe f998 	bl	8000154 <__aeabi_fsub>
 8001e24:	4603      	mov	r3, r0
 8001e26:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f003 f9ea 	bl	8005204 <powf>
 8001e30:	4604      	mov	r4, r0
 8001e32:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001e36:	68b8      	ldr	r0, [r7, #8]
 8001e38:	f7fe f98e 	bl	8000158 <__addsf3>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	461d      	mov	r5, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4619      	mov	r1, r3
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7fe f987 	bl	8000158 <__addsf3>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7fe f97f 	bl	8000154 <__aeabi_fsub>
 8001e56:	4603      	mov	r3, r0
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4628      	mov	r0, r5
 8001e5c:	f7fe fa84 	bl	8000368 <__aeabi_fmul>
 8001e60:	4603      	mov	r3, r0
 8001e62:	68b9      	ldr	r1, [r7, #8]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7fe f977 	bl	8000158 <__addsf3>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4620      	mov	r0, r4
 8001e70:	f7fe fa7a 	bl	8000368 <__aeabi_fmul>
 8001e74:	4603      	mov	r3, r0
 8001e76:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7fe f96c 	bl	8000158 <__addsf3>
 8001e80:	4603      	mov	r3, r0
 8001e82:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7fe fb22 	bl	80004d0 <__aeabi_fdiv>
 8001e8c:	4603      	mov	r3, r0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bdb0      	pop	{r4, r5, r7, pc}
 8001e96:	bf00      	nop
 8001e98:	3fd9cd60 	.word	0x3fd9cd60
 8001e9c:	3fc33333 	.word	0x3fc33333

08001ea0 <EaseInSine>:

// 正弦缓动
static float EaseInSine(float t)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
    return 1 - cosf((t * 3.14159f) / 2);
 8001ea8:	490c      	ldr	r1, [pc, #48]	@ (8001edc <EaseInSine+0x3c>)
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f7fe fa5c 	bl	8000368 <__aeabi_fmul>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7fe fb0a 	bl	80004d0 <__aeabi_fdiv>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f003 fa08 	bl	80052d4 <cosf>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001ecc:	f7fe f942 	bl	8000154 <__aeabi_fsub>
 8001ed0:	4603      	mov	r3, r0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	40490fd0 	.word	0x40490fd0

08001ee0 <EaseOutSine>:

static float EaseOutSine(float t)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
    return sinf((t * 3.14159f) / 2);
 8001ee8:	4909      	ldr	r1, [pc, #36]	@ (8001f10 <EaseOutSine+0x30>)
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f7fe fa3c 	bl	8000368 <__aeabi_fmul>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7fe faea 	bl	80004d0 <__aeabi_fdiv>
 8001efc:	4603      	mov	r3, r0
 8001efe:	4618      	mov	r0, r3
 8001f00:	f003 fa20 	bl	8005344 <sinf>
 8001f04:	4603      	mov	r3, r0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	40490fd0 	.word	0x40490fd0

08001f14 <EaseInOutSine>:

static float EaseInOutSine(float t)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
    return -(cosf(3.14159f * t) - 1) / 2;
 8001f1c:	490d      	ldr	r1, [pc, #52]	@ (8001f54 <EaseInOutSine+0x40>)
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f7fe fa22 	bl	8000368 <__aeabi_fmul>
 8001f24:	4603      	mov	r3, r0
 8001f26:	4618      	mov	r0, r3
 8001f28:	f003 f9d4 	bl	80052d4 <cosf>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7fe f90e 	bl	8000154 <__aeabi_fsub>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001f3e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7fe fac4 	bl	80004d0 <__aeabi_fdiv>
 8001f48:	4603      	mov	r3, r0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	40490fd0 	.word	0x40490fd0

08001f58 <GetEaseValue>:

static float GetEaseValue(float progress, EaseType_t easeType)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	460b      	mov	r3, r1
 8001f62:	70fb      	strb	r3, [r7, #3]
    switch (easeType)
 8001f64:	78fb      	ldrb	r3, [r7, #3]
 8001f66:	2b18      	cmp	r3, #24
 8001f68:	f200 80b3 	bhi.w	80020d2 <GetEaseValue+0x17a>
 8001f6c:	a201      	add	r2, pc, #4	@ (adr r2, 8001f74 <GetEaseValue+0x1c>)
 8001f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f72:	bf00      	nop
 8001f74:	08001fd9 	.word	0x08001fd9
 8001f78:	08001fe3 	.word	0x08001fe3
 8001f7c:	08001fed 	.word	0x08001fed
 8001f80:	08001ff7 	.word	0x08001ff7
 8001f84:	08002001 	.word	0x08002001
 8001f88:	0800200b 	.word	0x0800200b
 8001f8c:	08002015 	.word	0x08002015
 8001f90:	0800201f 	.word	0x0800201f
 8001f94:	08002029 	.word	0x08002029
 8001f98:	08002033 	.word	0x08002033
 8001f9c:	0800203d 	.word	0x0800203d
 8001fa0:	08002047 	.word	0x08002047
 8001fa4:	08002051 	.word	0x08002051
 8001fa8:	0800205b 	.word	0x0800205b
 8001fac:	08002065 	.word	0x08002065
 8001fb0:	0800206f 	.word	0x0800206f
 8001fb4:	08002079 	.word	0x08002079
 8001fb8:	08002083 	.word	0x08002083
 8001fbc:	0800208d 	.word	0x0800208d
 8001fc0:	08002097 	.word	0x08002097
 8001fc4:	080020a1 	.word	0x080020a1
 8001fc8:	080020ab 	.word	0x080020ab
 8001fcc:	080020b5 	.word	0x080020b5
 8001fd0:	080020bf 	.word	0x080020bf
 8001fd4:	080020c9 	.word	0x080020c9
    {
    case EASE_LINEAR:
        return EaseLinear(progress);
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f7ff fa15 	bl	8001408 <EaseLinear>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	e078      	b.n	80020d4 <GetEaseValue+0x17c>
    case EASE_IN_QUAD:
        return EaseInQuad(progress);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f7ff fa1a 	bl	800141c <EaseInQuad>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	e073      	b.n	80020d4 <GetEaseValue+0x17c>
    case EASE_OUT_QUAD:
        return EaseOutQuad(progress);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f7ff fa22 	bl	8001436 <EaseOutQuad>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	e06e      	b.n	80020d4 <GetEaseValue+0x17c>
    case EASE_INOUT_QUAD:
        return EaseInOutQuad(progress);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f7ff fa30 	bl	800145c <EaseInOutQuad>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	e069      	b.n	80020d4 <GetEaseValue+0x17c>
    case EASE_IN_CUBIC:
        return EaseInCubic(progress);
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f7ff fa5e 	bl	80014c2 <EaseInCubic>
 8002006:	4603      	mov	r3, r0
 8002008:	e064      	b.n	80020d4 <GetEaseValue+0x17c>
    case EASE_OUT_CUBIC:
        return EaseOutCubic(progress);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7ff fa6b 	bl	80014e6 <EaseOutCubic>
 8002010:	4603      	mov	r3, r0
 8002012:	e05f      	b.n	80020d4 <GetEaseValue+0x17c>
    case EASE_INOUT_CUBIC:
        return EaseInOutCubic(progress);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f7ff fa85 	bl	8001524 <EaseInOutCubic>
 800201a:	4603      	mov	r3, r0
 800201c:	e05a      	b.n	80020d4 <GetEaseValue+0x17c>
    case EASE_IN_EXPO:
        return EaseInExpo(progress);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f7ff fad2 	bl	80015c8 <EaseInExpo>
 8002024:	4603      	mov	r3, r0
 8002026:	e055      	b.n	80020d4 <GetEaseValue+0x17c>
    case EASE_OUT_EXPO:
        return EaseOutExpo(progress);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f7ff faf3 	bl	8001614 <EaseOutExpo>
 800202e:	4603      	mov	r3, r0
 8002030:	e050      	b.n	80020d4 <GetEaseValue+0x17c>
    case EASE_INOUT_EXPO:
        return EaseInOutExpo(progress);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7ff fb14 	bl	8001660 <EaseInOutExpo>
 8002038:	4603      	mov	r3, r0
 800203a:	e04b      	b.n	80020d4 <GetEaseValue+0x17c>
    case EASE_IN_CIRC:
        return EaseInCirc(progress);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f7ff fb6f 	bl	8001720 <EaseInCirc>
 8002042:	4603      	mov	r3, r0
 8002044:	e046      	b.n	80020d4 <GetEaseValue+0x17c>
    case EASE_OUT_CIRC:
        return EaseOutCirc(progress);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f7ff fb87 	bl	800175a <EaseOutCirc>
 800204c:	4603      	mov	r3, r0
 800204e:	e041      	b.n	80020d4 <GetEaseValue+0x17c>
    case EASE_INOUT_CIRC:
        return EaseInOutCirc(progress);
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f7ff fba0 	bl	8001796 <EaseInOutCirc>
 8002056:	4603      	mov	r3, r0
 8002058:	e03c      	b.n	80020d4 <GetEaseValue+0x17c>
    case EASE_IN_ELASTIC:
        return EaseInElastic(progress);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f7ff fbf6 	bl	800184c <EaseInElastic>
 8002060:	4603      	mov	r3, r0
 8002062:	e037      	b.n	80020d4 <GetEaseValue+0x17c>
    case EASE_OUT_ELASTIC:
        return EaseOutElastic(progress);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f7ff fc41 	bl	80018ec <EaseOutElastic>
 800206a:	4603      	mov	r3, r0
 800206c:	e032      	b.n	80020d4 <GetEaseValue+0x17c>
    case EASE_INOUT_ELASTIC:
        return EaseInOutElastic(progress);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7ff fc8c 	bl	800198c <EaseInOutElastic>
 8002074:	4603      	mov	r3, r0
 8002076:	e02d      	b.n	80020d4 <GetEaseValue+0x17c>
    case EASE_IN_BOUNCE:
        return EaseInBounce(progress);
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f7ff fdbd 	bl	8001bf8 <EaseInBounce>
 800207e:	4603      	mov	r3, r0
 8002080:	e028      	b.n	80020d4 <GetEaseValue+0x17c>
    case EASE_OUT_BOUNCE:
        return EaseOutBounce(progress);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f7ff fd1a 	bl	8001abc <EaseOutBounce>
 8002088:	4603      	mov	r3, r0
 800208a:	e023      	b.n	80020d4 <GetEaseValue+0x17c>
    case EASE_INOUT_BOUNCE:
        return EaseInOutBounce(progress);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f7ff fdcb 	bl	8001c28 <EaseInOutBounce>
 8002092:	4603      	mov	r3, r0
 8002094:	e01e      	b.n	80020d4 <GetEaseValue+0x17c>
    case EASE_IN_BACK:
        return EaseInBack(progress);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f7ff fe04 	bl	8001ca4 <EaseInBack>
 800209c:	4603      	mov	r3, r0
 800209e:	e019      	b.n	80020d4 <GetEaseValue+0x17c>
    case EASE_OUT_BACK:
        return EaseOutBack(progress);
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f7ff fe31 	bl	8001d08 <EaseOutBack>
 80020a6:	4603      	mov	r3, r0
 80020a8:	e014      	b.n	80020d4 <GetEaseValue+0x17c>
    case EASE_INOUT_BACK:
        return EaseInOutBack(progress);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f7ff fe6e 	bl	8001d8c <EaseInOutBack>
 80020b0:	4603      	mov	r3, r0
 80020b2:	e00f      	b.n	80020d4 <GetEaseValue+0x17c>
    case EASE_IN_SINE:
        return EaseInSine(progress);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f7ff fef3 	bl	8001ea0 <EaseInSine>
 80020ba:	4603      	mov	r3, r0
 80020bc:	e00a      	b.n	80020d4 <GetEaseValue+0x17c>
    case EASE_OUT_SINE:
        return EaseOutSine(progress);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f7ff ff0e 	bl	8001ee0 <EaseOutSine>
 80020c4:	4603      	mov	r3, r0
 80020c6:	e005      	b.n	80020d4 <GetEaseValue+0x17c>
    case EASE_INOUT_SINE:
        return EaseInOutSine(progress);
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f7ff ff23 	bl	8001f14 <EaseInOutSine>
 80020ce:	4603      	mov	r3, r0
 80020d0:	e000      	b.n	80020d4 <GetEaseValue+0x17c>
    default:
        return progress;
 80020d2:	687b      	ldr	r3, [r7, #4]
    }
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <OLED_UpdateAnimation>:
    anim->easeType = easeType;
}

// 更新动画状态，返回isActive的值
uint8_t OLED_UpdateAnimation(Animation_t *anim, uint32_t currentTime)
{
 80020dc:	b590      	push	{r4, r7, lr}
 80020de:	b087      	sub	sp, #28
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
    if (!anim->isActive)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	7d1b      	ldrb	r3, [r3, #20]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d101      	bne.n	80020f2 <OLED_UpdateAnimation+0x16>
        return 0;
 80020ee:	2300      	movs	r3, #0
 80020f0:	e04d      	b.n	800218e <OLED_UpdateAnimation+0xb2>

    uint32_t elapsedTime = currentTime - anim->startTime;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	683a      	ldr	r2, [r7, #0]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	617b      	str	r3, [r7, #20]
    // 动画完成
    if (elapsedTime >= anim->duration || anim->currentValue == anim->endValue) // 如果我的目标在指定的点上，也关闭isActive
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	697a      	ldr	r2, [r7, #20]
 8002102:	429a      	cmp	r2, r3
 8002104:	d20a      	bcs.n	800211c <OLED_UpdateAnimation+0x40>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	691a      	ldr	r2, [r3, #16]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	4619      	mov	r1, r3
 8002110:	4610      	mov	r0, r2
 8002112:	f7fe fabd 	bl	8000690 <__aeabi_fcmpeq>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d008      	beq.n	800212e <OLED_UpdateAnimation+0x52>
    {
        anim->currentValue = anim->endValue;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	68da      	ldr	r2, [r3, #12]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	611a      	str	r2, [r3, #16]
        anim->isActive = 0;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	751a      	strb	r2, [r3, #20]
        return 0;
 800212a:	2300      	movs	r3, #0
 800212c:	e02f      	b.n	800218e <OLED_UpdateAnimation+0xb2>
    }

    // 计算当前进度 (0.0 - 1.0)
    float progress = (float)elapsedTime / anim->duration;
 800212e:	6978      	ldr	r0, [r7, #20]
 8002130:	f7fe f8c2 	bl	80002b8 <__aeabi_ui2f>
 8002134:	4604      	mov	r4, r0
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	4618      	mov	r0, r3
 800213c:	f7fe f8bc 	bl	80002b8 <__aeabi_ui2f>
 8002140:	4603      	mov	r3, r0
 8002142:	4619      	mov	r1, r3
 8002144:	4620      	mov	r0, r4
 8002146:	f7fe f9c3 	bl	80004d0 <__aeabi_fdiv>
 800214a:	4603      	mov	r3, r0
 800214c:	613b      	str	r3, [r7, #16]

    // 应用缓动函数
    float easedProgress = GetEaseValue(progress, anim->easeType);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	7d5b      	ldrb	r3, [r3, #21]
 8002152:	4619      	mov	r1, r3
 8002154:	6938      	ldr	r0, [r7, #16]
 8002156:	f7ff feff 	bl	8001f58 <GetEaseValue>
 800215a:	60f8      	str	r0, [r7, #12]

    // 计算当前值
    anim->currentValue = anim->startValue + (anim->endValue - anim->startValue) * easedProgress;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	689c      	ldr	r4, [r3, #8]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	68da      	ldr	r2, [r3, #12]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	4619      	mov	r1, r3
 800216a:	4610      	mov	r0, r2
 800216c:	f7fd fff2 	bl	8000154 <__aeabi_fsub>
 8002170:	4603      	mov	r3, r0
 8002172:	68f9      	ldr	r1, [r7, #12]
 8002174:	4618      	mov	r0, r3
 8002176:	f7fe f8f7 	bl	8000368 <__aeabi_fmul>
 800217a:	4603      	mov	r3, r0
 800217c:	4619      	mov	r1, r3
 800217e:	4620      	mov	r0, r4
 8002180:	f7fd ffea 	bl	8000158 <__addsf3>
 8002184:	4603      	mov	r3, r0
 8002186:	461a      	mov	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	611a      	str	r2, [r3, #16]

    return 1;
 800218c:	2301      	movs	r3, #1
}
 800218e:	4618      	mov	r0, r3
 8002190:	371c      	adds	r7, #28
 8002192:	46bd      	mov	sp, r7
 8002194:	bd90      	pop	{r4, r7, pc}

08002196 <OLED_GetAnimationValue>:

// 获取当前动画值
float OLED_GetAnimationValue(Animation_t *anim)
{
 8002196:	b480      	push	{r7}
 8002198:	b083      	sub	sp, #12
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
    return anim->currentValue;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	691b      	ldr	r3, [r3, #16]
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bc80      	pop	{r7}
 80021aa:	4770      	bx	lr

080021ac <OLED_InitAnimationManager>:
AnimationManager_t Status_AnimationManager;
AnimationManager_t g_Title_AnimationManager; // 菜单动画管理器
AnimationManager_t g_AnimationManager; // 全局动画管理器

void OLED_InitAnimationManager(AnimationManager_t *manager) // 这是初始化一个动画管理器，填入你的manager名字，在系统初始化时候调用它
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
    manager->count = 0;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 25f0 	strb.w	r2, [r3, #1520]	@ 0x5f0
    memset(manager->taggedAnimations, 0, sizeof(manager->taggedAnimations));
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f44f 62be 	mov.w	r2, #1520	@ 0x5f0
 80021c2:	2100      	movs	r1, #0
 80021c4:	4618      	mov	r0, r3
 80021c6:	f002 fb8f 	bl	80048e8 <memset>
}
 80021ca:	bf00      	nop
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <OLED_UpdateAnimationManager>:
    anim->isActive = 1;
}

// 更新manager里面的所有动画!
void OLED_UpdateAnimationManager(AnimationManager_t *manager) //! 这里需要使用OLED_UpdateDisplayVSync()来更新显示
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b086      	sub	sp, #24
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
    uint32_t currentTime = HAL_GetTick();
 80021da:	f000 fbef 	bl	80029bc <HAL_GetTick>
 80021de:	6138      	str	r0, [r7, #16]

    for (uint8_t i = 0; i < manager->count; i++)
 80021e0:	2300      	movs	r3, #0
 80021e2:	75fb      	strb	r3, [r7, #23]
 80021e4:	e03a      	b.n	800225c <OLED_UpdateAnimationManager+0x8a>
    {
        TaggedAnimation_t *anim = &manager->taggedAnimations[i];
 80021e6:	7dfb      	ldrb	r3, [r7, #23]
 80021e8:	224c      	movs	r2, #76	@ 0x4c
 80021ea:	fb02 f303 	mul.w	r3, r2, r3
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	4413      	add	r3, r2
 80021f2:	60fb      	str	r3, [r7, #12]
        if (!anim->isActive)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d02a      	beq.n	8002254 <OLED_UpdateAnimationManager+0x82>
            continue;

        uint8_t activeX = OLED_UpdateAnimation(&anim->xAnimation, currentTime);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	3310      	adds	r3, #16
 8002202:	6939      	ldr	r1, [r7, #16]
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff ff69 	bl	80020dc <OLED_UpdateAnimation>
 800220a:	4603      	mov	r3, r0
 800220c:	72fb      	strb	r3, [r7, #11]
        uint8_t activeY = OLED_UpdateAnimation(&anim->yAnimation, currentTime);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	3328      	adds	r3, #40	@ 0x28
 8002212:	6939      	ldr	r1, [r7, #16]
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff ff61 	bl	80020dc <OLED_UpdateAnimation>
 800221a:	4603      	mov	r3, r0
 800221c:	72bb      	strb	r3, [r7, #10]

        anim->currentX = OLED_GetAnimationValue(&anim->xAnimation);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	3310      	adds	r3, #16
 8002222:	4618      	mov	r0, r3
 8002224:	f7ff ffb7 	bl	8002196 <OLED_GetAnimationValue>
 8002228:	4602      	mov	r2, r0
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	645a      	str	r2, [r3, #68]	@ 0x44
        anim->currentY = OLED_GetAnimationValue(&anim->yAnimation);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	3328      	adds	r3, #40	@ 0x28
 8002232:	4618      	mov	r0, r3
 8002234:	f7ff ffaf 	bl	8002196 <OLED_GetAnimationValue>
 8002238:	4602      	mov	r2, r0
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	649a      	str	r2, [r3, #72]	@ 0x48

        // 如果两个动画都结束，则标记该对象动画为非活跃
        if (!activeX && !activeY)
 800223e:	7afb      	ldrb	r3, [r7, #11]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d108      	bne.n	8002256 <OLED_UpdateAnimationManager+0x84>
 8002244:	7abb      	ldrb	r3, [r7, #10]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d105      	bne.n	8002256 <OLED_UpdateAnimationManager+0x84>
            anim->isActive = 0;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002252:	e000      	b.n	8002256 <OLED_UpdateAnimationManager+0x84>
            continue;
 8002254:	bf00      	nop
    for (uint8_t i = 0; i < manager->count; i++)
 8002256:	7dfb      	ldrb	r3, [r7, #23]
 8002258:	3301      	adds	r3, #1
 800225a:	75fb      	strb	r3, [r7, #23]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f893 35f0 	ldrb.w	r3, [r3, #1520]	@ 0x5f0
 8002262:	7dfa      	ldrb	r2, [r7, #23]
 8002264:	429a      	cmp	r2, r3
 8002266:	d3be      	bcc.n	80021e6 <OLED_UpdateAnimationManager+0x14>
    }
}
 8002268:	bf00      	nop
 800226a:	bf00      	nop
 800226c:	3718      	adds	r7, #24
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
	...

08002274 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002278:	4b17      	ldr	r3, [pc, #92]	@ (80022d8 <MX_SPI2_Init+0x64>)
 800227a:	4a18      	ldr	r2, [pc, #96]	@ (80022dc <MX_SPI2_Init+0x68>)
 800227c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800227e:	4b16      	ldr	r3, [pc, #88]	@ (80022d8 <MX_SPI2_Init+0x64>)
 8002280:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002284:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002286:	4b14      	ldr	r3, [pc, #80]	@ (80022d8 <MX_SPI2_Init+0x64>)
 8002288:	2200      	movs	r2, #0
 800228a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800228c:	4b12      	ldr	r3, [pc, #72]	@ (80022d8 <MX_SPI2_Init+0x64>)
 800228e:	2200      	movs	r2, #0
 8002290:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002292:	4b11      	ldr	r3, [pc, #68]	@ (80022d8 <MX_SPI2_Init+0x64>)
 8002294:	2200      	movs	r2, #0
 8002296:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002298:	4b0f      	ldr	r3, [pc, #60]	@ (80022d8 <MX_SPI2_Init+0x64>)
 800229a:	2200      	movs	r2, #0
 800229c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800229e:	4b0e      	ldr	r3, [pc, #56]	@ (80022d8 <MX_SPI2_Init+0x64>)
 80022a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022a4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80022a6:	4b0c      	ldr	r3, [pc, #48]	@ (80022d8 <MX_SPI2_Init+0x64>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022ac:	4b0a      	ldr	r3, [pc, #40]	@ (80022d8 <MX_SPI2_Init+0x64>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80022b2:	4b09      	ldr	r3, [pc, #36]	@ (80022d8 <MX_SPI2_Init+0x64>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022b8:	4b07      	ldr	r3, [pc, #28]	@ (80022d8 <MX_SPI2_Init+0x64>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80022be:	4b06      	ldr	r3, [pc, #24]	@ (80022d8 <MX_SPI2_Init+0x64>)
 80022c0:	220a      	movs	r2, #10
 80022c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80022c4:	4804      	ldr	r0, [pc, #16]	@ (80022d8 <MX_SPI2_Init+0x64>)
 80022c6:	f002 f849 	bl	800435c <HAL_SPI_Init>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80022d0:	f7fe fc43 	bl	8000b5a <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80022d4:	bf00      	nop
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	20003cec 	.word	0x20003cec
 80022dc:	40003800 	.word	0x40003800

080022e0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b088      	sub	sp, #32
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e8:	f107 0310 	add.w	r3, r7, #16
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	605a      	str	r2, [r3, #4]
 80022f2:	609a      	str	r2, [r3, #8]
 80022f4:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a1c      	ldr	r2, [pc, #112]	@ (800236c <HAL_SPI_MspInit+0x8c>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d131      	bne.n	8002364 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002300:	4b1b      	ldr	r3, [pc, #108]	@ (8002370 <HAL_SPI_MspInit+0x90>)
 8002302:	69db      	ldr	r3, [r3, #28]
 8002304:	4a1a      	ldr	r2, [pc, #104]	@ (8002370 <HAL_SPI_MspInit+0x90>)
 8002306:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800230a:	61d3      	str	r3, [r2, #28]
 800230c:	4b18      	ldr	r3, [pc, #96]	@ (8002370 <HAL_SPI_MspInit+0x90>)
 800230e:	69db      	ldr	r3, [r3, #28]
 8002310:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002314:	60fb      	str	r3, [r7, #12]
 8002316:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002318:	4b15      	ldr	r3, [pc, #84]	@ (8002370 <HAL_SPI_MspInit+0x90>)
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	4a14      	ldr	r2, [pc, #80]	@ (8002370 <HAL_SPI_MspInit+0x90>)
 800231e:	f043 0308 	orr.w	r3, r3, #8
 8002322:	6193      	str	r3, [r2, #24]
 8002324:	4b12      	ldr	r3, [pc, #72]	@ (8002370 <HAL_SPI_MspInit+0x90>)
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	f003 0308 	and.w	r3, r3, #8
 800232c:	60bb      	str	r3, [r7, #8]
 800232e:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = Flash_SCK_Pin|Flash_MOSI_Pin;
 8002330:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8002334:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002336:	2302      	movs	r3, #2
 8002338:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800233a:	2303      	movs	r3, #3
 800233c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800233e:	f107 0310 	add.w	r3, r7, #16
 8002342:	4619      	mov	r1, r3
 8002344:	480b      	ldr	r0, [pc, #44]	@ (8002374 <HAL_SPI_MspInit+0x94>)
 8002346:	f000 fdd5 	bl	8002ef4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Flash_MISO_Pin;
 800234a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800234e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002350:	2300      	movs	r3, #0
 8002352:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002354:	2300      	movs	r3, #0
 8002356:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(Flash_MISO_GPIO_Port, &GPIO_InitStruct);
 8002358:	f107 0310 	add.w	r3, r7, #16
 800235c:	4619      	mov	r1, r3
 800235e:	4805      	ldr	r0, [pc, #20]	@ (8002374 <HAL_SPI_MspInit+0x94>)
 8002360:	f000 fdc8 	bl	8002ef4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002364:	bf00      	nop
 8002366:	3720      	adds	r7, #32
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	40003800 	.word	0x40003800
 8002370:	40021000 	.word	0x40021000
 8002374:	40010c00 	.word	0x40010c00

08002378 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800237e:	4b15      	ldr	r3, [pc, #84]	@ (80023d4 <HAL_MspInit+0x5c>)
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	4a14      	ldr	r2, [pc, #80]	@ (80023d4 <HAL_MspInit+0x5c>)
 8002384:	f043 0301 	orr.w	r3, r3, #1
 8002388:	6193      	str	r3, [r2, #24]
 800238a:	4b12      	ldr	r3, [pc, #72]	@ (80023d4 <HAL_MspInit+0x5c>)
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	60bb      	str	r3, [r7, #8]
 8002394:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002396:	4b0f      	ldr	r3, [pc, #60]	@ (80023d4 <HAL_MspInit+0x5c>)
 8002398:	69db      	ldr	r3, [r3, #28]
 800239a:	4a0e      	ldr	r2, [pc, #56]	@ (80023d4 <HAL_MspInit+0x5c>)
 800239c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023a0:	61d3      	str	r3, [r2, #28]
 80023a2:	4b0c      	ldr	r3, [pc, #48]	@ (80023d4 <HAL_MspInit+0x5c>)
 80023a4:	69db      	ldr	r3, [r3, #28]
 80023a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023aa:	607b      	str	r3, [r7, #4]
 80023ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80023ae:	4b0a      	ldr	r3, [pc, #40]	@ (80023d8 <HAL_MspInit+0x60>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	60fb      	str	r3, [r7, #12]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80023ba:	60fb      	str	r3, [r7, #12]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80023c2:	60fb      	str	r3, [r7, #12]
 80023c4:	4a04      	ldr	r2, [pc, #16]	@ (80023d8 <HAL_MspInit+0x60>)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023ca:	bf00      	nop
 80023cc:	3714      	adds	r7, #20
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bc80      	pop	{r7}
 80023d2:	4770      	bx	lr
 80023d4:	40021000 	.word	0x40021000
 80023d8:	40010000 	.word	0x40010000

080023dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023e0:	bf00      	nop
 80023e2:	e7fd      	b.n	80023e0 <NMI_Handler+0x4>

080023e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023e8:	bf00      	nop
 80023ea:	e7fd      	b.n	80023e8 <HardFault_Handler+0x4>

080023ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023f0:	bf00      	nop
 80023f2:	e7fd      	b.n	80023f0 <MemManage_Handler+0x4>

080023f4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023f8:	bf00      	nop
 80023fa:	e7fd      	b.n	80023f8 <BusFault_Handler+0x4>

080023fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002400:	bf00      	nop
 8002402:	e7fd      	b.n	8002400 <UsageFault_Handler+0x4>

08002404 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002408:	bf00      	nop
 800240a:	46bd      	mov	sp, r7
 800240c:	bc80      	pop	{r7}
 800240e:	4770      	bx	lr

08002410 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002414:	bf00      	nop
 8002416:	46bd      	mov	sp, r7
 8002418:	bc80      	pop	{r7}
 800241a:	4770      	bx	lr

0800241c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002420:	bf00      	nop
 8002422:	46bd      	mov	sp, r7
 8002424:	bc80      	pop	{r7}
 8002426:	4770      	bx	lr

08002428 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800242c:	f000 fab4 	bl	8002998 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002430:	bf00      	nop
 8002432:	bd80      	pop	{r7, pc}

08002434 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002438:	4802      	ldr	r0, [pc, #8]	@ (8002444 <DMA1_Channel6_IRQHandler+0x10>)
 800243a:	f000 fc55 	bl	8002ce8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800243e:	bf00      	nop
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	200000e0 	.word	0x200000e0

08002448 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002450:	4a14      	ldr	r2, [pc, #80]	@ (80024a4 <_sbrk+0x5c>)
 8002452:	4b15      	ldr	r3, [pc, #84]	@ (80024a8 <_sbrk+0x60>)
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800245c:	4b13      	ldr	r3, [pc, #76]	@ (80024ac <_sbrk+0x64>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d102      	bne.n	800246a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002464:	4b11      	ldr	r3, [pc, #68]	@ (80024ac <_sbrk+0x64>)
 8002466:	4a12      	ldr	r2, [pc, #72]	@ (80024b0 <_sbrk+0x68>)
 8002468:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800246a:	4b10      	ldr	r3, [pc, #64]	@ (80024ac <_sbrk+0x64>)
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4413      	add	r3, r2
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	429a      	cmp	r2, r3
 8002476:	d207      	bcs.n	8002488 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002478:	f002 fa3e 	bl	80048f8 <__errno>
 800247c:	4603      	mov	r3, r0
 800247e:	220c      	movs	r2, #12
 8002480:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002482:	f04f 33ff 	mov.w	r3, #4294967295
 8002486:	e009      	b.n	800249c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002488:	4b08      	ldr	r3, [pc, #32]	@ (80024ac <_sbrk+0x64>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800248e:	4b07      	ldr	r3, [pc, #28]	@ (80024ac <_sbrk+0x64>)
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4413      	add	r3, r2
 8002496:	4a05      	ldr	r2, [pc, #20]	@ (80024ac <_sbrk+0x64>)
 8002498:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800249a:	68fb      	ldr	r3, [r7, #12]
}
 800249c:	4618      	mov	r0, r3
 800249e:	3718      	adds	r7, #24
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	20005000 	.word	0x20005000
 80024a8:	00000400 	.word	0x00000400
 80024ac:	20003d44 	.word	0x20003d44
 80024b0:	20003ee0 	.word	0x20003ee0

080024b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024b8:	bf00      	nop
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bc80      	pop	{r7}
 80024be:	4770      	bx	lr

080024c0 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b08c      	sub	sp, #48	@ 0x30
 80024c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80024c6:	f107 030c 	add.w	r3, r7, #12
 80024ca:	2224      	movs	r2, #36	@ 0x24
 80024cc:	2100      	movs	r1, #0
 80024ce:	4618      	mov	r0, r3
 80024d0:	f002 fa0a 	bl	80048e8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024d4:	1d3b      	adds	r3, r7, #4
 80024d6:	2200      	movs	r2, #0
 80024d8:	601a      	str	r2, [r3, #0]
 80024da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80024dc:	4b20      	ldr	r3, [pc, #128]	@ (8002560 <MX_TIM3_Init+0xa0>)
 80024de:	4a21      	ldr	r2, [pc, #132]	@ (8002564 <MX_TIM3_Init+0xa4>)
 80024e0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80024e2:	4b1f      	ldr	r3, [pc, #124]	@ (8002560 <MX_TIM3_Init+0xa0>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024e8:	4b1d      	ldr	r3, [pc, #116]	@ (8002560 <MX_TIM3_Init+0xa0>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80024ee:	4b1c      	ldr	r3, [pc, #112]	@ (8002560 <MX_TIM3_Init+0xa0>)
 80024f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80024f4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024f6:	4b1a      	ldr	r3, [pc, #104]	@ (8002560 <MX_TIM3_Init+0xa0>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024fc:	4b18      	ldr	r3, [pc, #96]	@ (8002560 <MX_TIM3_Init+0xa0>)
 80024fe:	2200      	movs	r2, #0
 8002500:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002502:	2301      	movs	r3, #1
 8002504:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002506:	2300      	movs	r3, #0
 8002508:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800250a:	2301      	movs	r3, #1
 800250c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800250e:	2300      	movs	r3, #0
 8002510:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002512:	2300      	movs	r3, #0
 8002514:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002516:	2300      	movs	r3, #0
 8002518:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800251a:	2301      	movs	r3, #1
 800251c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800251e:	2300      	movs	r3, #0
 8002520:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002522:	2300      	movs	r3, #0
 8002524:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002526:	f107 030c 	add.w	r3, r7, #12
 800252a:	4619      	mov	r1, r3
 800252c:	480c      	ldr	r0, [pc, #48]	@ (8002560 <MX_TIM3_Init+0xa0>)
 800252e:	f001 ff99 	bl	8004464 <HAL_TIM_Encoder_Init>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002538:	f7fe fb0f 	bl	8000b5a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800253c:	2300      	movs	r3, #0
 800253e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002540:	2300      	movs	r3, #0
 8002542:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002544:	1d3b      	adds	r3, r7, #4
 8002546:	4619      	mov	r1, r3
 8002548:	4805      	ldr	r0, [pc, #20]	@ (8002560 <MX_TIM3_Init+0xa0>)
 800254a:	f002 f94d 	bl	80047e8 <HAL_TIMEx_MasterConfigSynchronization>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002554:	f7fe fb01 	bl	8000b5a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002558:	bf00      	nop
 800255a:	3730      	adds	r7, #48	@ 0x30
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	20003d48 	.word	0x20003d48
 8002564:	40000400 	.word	0x40000400

08002568 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b08a      	sub	sp, #40	@ 0x28
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002570:	f107 0314 	add.w	r3, r7, #20
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]
 8002578:	605a      	str	r2, [r3, #4]
 800257a:	609a      	str	r2, [r3, #8]
 800257c:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM3)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a1e      	ldr	r2, [pc, #120]	@ (80025fc <HAL_TIM_Encoder_MspInit+0x94>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d135      	bne.n	80025f4 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002588:	4b1d      	ldr	r3, [pc, #116]	@ (8002600 <HAL_TIM_Encoder_MspInit+0x98>)
 800258a:	69db      	ldr	r3, [r3, #28]
 800258c:	4a1c      	ldr	r2, [pc, #112]	@ (8002600 <HAL_TIM_Encoder_MspInit+0x98>)
 800258e:	f043 0302 	orr.w	r3, r3, #2
 8002592:	61d3      	str	r3, [r2, #28]
 8002594:	4b1a      	ldr	r3, [pc, #104]	@ (8002600 <HAL_TIM_Encoder_MspInit+0x98>)
 8002596:	69db      	ldr	r3, [r3, #28]
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	613b      	str	r3, [r7, #16]
 800259e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025a0:	4b17      	ldr	r3, [pc, #92]	@ (8002600 <HAL_TIM_Encoder_MspInit+0x98>)
 80025a2:	699b      	ldr	r3, [r3, #24]
 80025a4:	4a16      	ldr	r2, [pc, #88]	@ (8002600 <HAL_TIM_Encoder_MspInit+0x98>)
 80025a6:	f043 0308 	orr.w	r3, r3, #8
 80025aa:	6193      	str	r3, [r2, #24]
 80025ac:	4b14      	ldr	r3, [pc, #80]	@ (8002600 <HAL_TIM_Encoder_MspInit+0x98>)
 80025ae:	699b      	ldr	r3, [r3, #24]
 80025b0:	f003 0308 	and.w	r3, r3, #8
 80025b4:	60fb      	str	r3, [r7, #12]
 80025b6:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Encoder_CH1_Pin|Encoder_CH2_Pin;
 80025b8:	2330      	movs	r3, #48	@ 0x30
 80025ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025bc:	2300      	movs	r3, #0
 80025be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c0:	2300      	movs	r3, #0
 80025c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025c4:	f107 0314 	add.w	r3, r7, #20
 80025c8:	4619      	mov	r1, r3
 80025ca:	480e      	ldr	r0, [pc, #56]	@ (8002604 <HAL_TIM_Encoder_MspInit+0x9c>)
 80025cc:	f000 fc92 	bl	8002ef4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 80025d0:	4b0d      	ldr	r3, [pc, #52]	@ (8002608 <HAL_TIM_Encoder_MspInit+0xa0>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80025d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80025dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80025de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e0:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80025e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80025e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80025ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80025ee:	4a06      	ldr	r2, [pc, #24]	@ (8002608 <HAL_TIM_Encoder_MspInit+0xa0>)
 80025f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f2:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80025f4:	bf00      	nop
 80025f6:	3728      	adds	r7, #40	@ 0x28
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	40000400 	.word	0x40000400
 8002600:	40021000 	.word	0x40021000
 8002604:	40010c00 	.word	0x40010c00
 8002608:	40010000 	.word	0x40010000

0800260c <lz77_decompress>:
#include <stdint.h>
#include <stdio.h>
#include <stddef.h>

int lz77_decompress(const uint8_t *input, size_t input_size, uint8_t *output, size_t output_size)
{
 800260c:	b480      	push	{r7}
 800260e:	b08f      	sub	sp, #60	@ 0x3c
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]
 8002618:	603b      	str	r3, [r7, #0]
    const uint8_t *input_end = input + input_size;
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	4413      	add	r3, r2
 8002620:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t *output_end = output + output_size;
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	4413      	add	r3, r2
 8002628:	623b      	str	r3, [r7, #32]
    uint8_t *output_ptr = output;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	637b      	str	r3, [r7, #52]	@ 0x34

    while (input < input_end)
 800262e:	e07d      	b.n	800272c <lz77_decompress+0x120>
    {
        uint8_t flag = *input++;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	1c5a      	adds	r2, r3, #1
 8002634:	60fa      	str	r2, [r7, #12]
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	77fb      	strb	r3, [r7, #31]
        if (flag < 0x80)
 800263a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800263e:	2b00      	cmp	r3, #0
 8002640:	db25      	blt.n	800268e <lz77_decompress+0x82>
        {
            // Literal run
            size_t len = flag & 0x7F;
 8002642:	7ffb      	ldrb	r3, [r7, #31]
 8002644:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002648:	617b      	str	r3, [r7, #20]
            if (input + len > input_end || output_ptr + len > output_end)
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	4413      	add	r3, r2
 8002650:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002652:	429a      	cmp	r2, r3
 8002654:	d305      	bcc.n	8002662 <lz77_decompress+0x56>
 8002656:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	4413      	add	r3, r2
 800265c:	6a3a      	ldr	r2, [r7, #32]
 800265e:	429a      	cmp	r2, r3
 8002660:	d202      	bcs.n	8002668 <lz77_decompress+0x5c>
            {
                return -1; // Overflow check
 8002662:	f04f 33ff 	mov.w	r3, #4294967295
 8002666:	e069      	b.n	800273c <lz77_decompress+0x130>
            }
            for (size_t i = 0; i < len; i++)
 8002668:	2300      	movs	r3, #0
 800266a:	633b      	str	r3, [r7, #48]	@ 0x30
 800266c:	e00a      	b.n	8002684 <lz77_decompress+0x78>
            {
                *output_ptr++ = *input++;
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	1c53      	adds	r3, r2, #1
 8002672:	60fb      	str	r3, [r7, #12]
 8002674:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002676:	1c59      	adds	r1, r3, #1
 8002678:	6379      	str	r1, [r7, #52]	@ 0x34
 800267a:	7812      	ldrb	r2, [r2, #0]
 800267c:	701a      	strb	r2, [r3, #0]
            for (size_t i = 0; i < len; i++)
 800267e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002680:	3301      	adds	r3, #1
 8002682:	633b      	str	r3, [r7, #48]	@ 0x30
 8002684:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	429a      	cmp	r2, r3
 800268a:	d3f0      	bcc.n	800266e <lz77_decompress+0x62>
 800268c:	e04e      	b.n	800272c <lz77_decompress+0x120>
            }
        }
        else
        {
            // Back reference
            if (input + 2 > input_end)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	3302      	adds	r3, #2
 8002692:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002694:	429a      	cmp	r2, r3
 8002696:	d202      	bcs.n	800269e <lz77_decompress+0x92>
            {
                return -1; // Input overflow
 8002698:	f04f 33ff 	mov.w	r3, #4294967295
 800269c:	e04e      	b.n	800273c <lz77_decompress+0x130>
            }
            uint16_t offset = ((flag & 0x7F) << 8) | *input++;
 800269e:	7ffb      	ldrb	r3, [r7, #31]
 80026a0:	b21b      	sxth	r3, r3
 80026a2:	021b      	lsls	r3, r3, #8
 80026a4:	b21b      	sxth	r3, r3
 80026a6:	f403 43fe 	and.w	r3, r3, #32512	@ 0x7f00
 80026aa:	b21a      	sxth	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	1c59      	adds	r1, r3, #1
 80026b0:	60f9      	str	r1, [r7, #12]
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	b21b      	sxth	r3, r3
 80026b6:	4313      	orrs	r3, r2
 80026b8:	b21b      	sxth	r3, r3
 80026ba:	83bb      	strh	r3, [r7, #28]
            offset += 1; // Offset starts from 1
 80026bc:	8bbb      	ldrh	r3, [r7, #28]
 80026be:	3301      	adds	r3, #1
 80026c0:	83bb      	strh	r3, [r7, #28]
            uint8_t length = *input++;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	1c5a      	adds	r2, r3, #1
 80026c6:	60fa      	str	r2, [r7, #12]
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	76fb      	strb	r3, [r7, #27]
            if (length == 0 || offset > (size_t)(output_ptr - output))
 80026cc:	7efb      	ldrb	r3, [r7, #27]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d005      	beq.n	80026de <lz77_decompress+0xd2>
 80026d2:	8bbb      	ldrh	r3, [r7, #28]
 80026d4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	1a8a      	subs	r2, r1, r2
 80026da:	4293      	cmp	r3, r2
 80026dc:	d902      	bls.n	80026e4 <lz77_decompress+0xd8>
            {
                return -1; // Invalid length or offset
 80026de:	f04f 33ff 	mov.w	r3, #4294967295
 80026e2:	e02b      	b.n	800273c <lz77_decompress+0x130>
            }
            uint8_t *src = output_ptr - offset;
 80026e4:	8bbb      	ldrh	r3, [r7, #28]
 80026e6:	425b      	negs	r3, r3
 80026e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80026ea:	4413      	add	r3, r2
 80026ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
            if (output_ptr + length > output_end)
 80026ee:	7efb      	ldrb	r3, [r7, #27]
 80026f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80026f2:	4413      	add	r3, r2
 80026f4:	6a3a      	ldr	r2, [r7, #32]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d202      	bcs.n	8002700 <lz77_decompress+0xf4>
            {
                return -1; // Output overflow
 80026fa:	f04f 33ff 	mov.w	r3, #4294967295
 80026fe:	e01d      	b.n	800273c <lz77_decompress+0x130>
            }
            for (uint8_t i = 0; i < length; i++)
 8002700:	2300      	movs	r3, #0
 8002702:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002706:	e00c      	b.n	8002722 <lz77_decompress+0x116>
            {
                *output_ptr++ = *src++;
 8002708:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800270a:	1c53      	adds	r3, r2, #1
 800270c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800270e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002710:	1c59      	adds	r1, r3, #1
 8002712:	6379      	str	r1, [r7, #52]	@ 0x34
 8002714:	7812      	ldrb	r2, [r2, #0]
 8002716:	701a      	strb	r2, [r3, #0]
            for (uint8_t i = 0; i < length; i++)
 8002718:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800271c:	3301      	adds	r3, #1
 800271e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002722:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8002726:	7efb      	ldrb	r3, [r7, #27]
 8002728:	429a      	cmp	r2, r3
 800272a:	d3ed      	bcc.n	8002708 <lz77_decompress+0xfc>
    while (input < input_end)
 800272c:	68fa      	ldr	r2, [r7, #12]
 800272e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002730:	429a      	cmp	r2, r3
 8002732:	f4ff af7d 	bcc.w	8002630 <lz77_decompress+0x24>
            }
        }
    }
    return (int)(output_ptr - output);
 8002736:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	1ad3      	subs	r3, r2, r3
}
 800273c:	4618      	mov	r0, r3
 800273e:	373c      	adds	r7, #60	@ 0x3c
 8002740:	46bd      	mov	sp, r7
 8002742:	bc80      	pop	{r7}
 8002744:	4770      	bx	lr
	...

08002748 <display_frame_oled>:

void display_frame_oled(unsigned char *frame)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
    OLED_ClearBuffer();
 8002750:	f7fe fa3e 	bl	8000bd0 <OLED_ClearBuffer>
    for (int i = 0; i < 114 * 64; i++)
 8002754:	2300      	movs	r3, #0
 8002756:	617b      	str	r3, [r7, #20]
 8002758:	e03d      	b.n	80027d6 <display_frame_oled+0x8e>
    { // Assuming OLED is 128x64, video is 114x64
        bool pixel = (frame[i / 8] & (1 << (i % 8))) != 0;
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	2b00      	cmp	r3, #0
 800275e:	da00      	bge.n	8002762 <display_frame_oled+0x1a>
 8002760:	3307      	adds	r3, #7
 8002762:	10db      	asrs	r3, r3, #3
 8002764:	461a      	mov	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4413      	add	r3, r2
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	461a      	mov	r2, r3
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	f003 0307 	and.w	r3, r3, #7
 8002774:	fa42 f303 	asr.w	r3, r2, r3
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	2b00      	cmp	r3, #0
 800277e:	bf14      	ite	ne
 8002780:	2301      	movne	r3, #1
 8002782:	2300      	moveq	r3, #0
 8002784:	74fb      	strb	r3, [r7, #19]
        // Adjust x-coordinate to center the 114-width video on a 128-width screen
        int x = (i % 114) + (OLED_WIDTH - 114) / 2;
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	4a18      	ldr	r2, [pc, #96]	@ (80027ec <display_frame_oled+0xa4>)
 800278a:	fb82 1203 	smull	r1, r2, r2, r3
 800278e:	441a      	add	r2, r3
 8002790:	1191      	asrs	r1, r2, #6
 8002792:	17da      	asrs	r2, r3, #31
 8002794:	1a8a      	subs	r2, r1, r2
 8002796:	2172      	movs	r1, #114	@ 0x72
 8002798:	fb01 f202 	mul.w	r2, r1, r2
 800279c:	1a9a      	subs	r2, r3, r2
 800279e:	1dd3      	adds	r3, r2, #7
 80027a0:	60fb      	str	r3, [r7, #12]
        int y = i / 114;
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	4a11      	ldr	r2, [pc, #68]	@ (80027ec <display_frame_oled+0xa4>)
 80027a6:	fb82 1203 	smull	r1, r2, r2, r3
 80027aa:	441a      	add	r2, r3
 80027ac:	1192      	asrs	r2, r2, #6
 80027ae:	17db      	asrs	r3, r3, #31
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	60bb      	str	r3, [r7, #8]
        if (x < OLED_WIDTH && y < OLED_HEIGHT)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2b7f      	cmp	r3, #127	@ 0x7f
 80027b8:	dc0a      	bgt.n	80027d0 <display_frame_oled+0x88>
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	2b3f      	cmp	r3, #63	@ 0x3f
 80027be:	dc07      	bgt.n	80027d0 <display_frame_oled+0x88>
        {                                         // Boundary check
            OLED_WritePixel(x, y, pixel ? 1 : 0); // Draw pixel (1 for white, 0 for black)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	b21b      	sxth	r3, r3
 80027c4:	68ba      	ldr	r2, [r7, #8]
 80027c6:	b211      	sxth	r1, r2
 80027c8:	7cfa      	ldrb	r2, [r7, #19]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7fe fb18 	bl	8000e00 <OLED_WritePixel>
    for (int i = 0; i < 114 * 64; i++)
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	3301      	adds	r3, #1
 80027d4:	617b      	str	r3, [r7, #20]
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	f5b3 5fe4 	cmp.w	r3, #7296	@ 0x1c80
 80027dc:	dbbd      	blt.n	800275a <display_frame_oled+0x12>
    }

    //退出视频播放状态在这里！
        /*code here*/

    OLED_SmartUpdate();
 80027de:	f7fe fd3b 	bl	8001258 <OLED_SmartUpdate>
}
 80027e2:	bf00      	nop
 80027e4:	3718      	adds	r7, #24
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	8fb823ef 	.word	0x8fb823ef

080027f0 <play_video>:

void play_video()
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	f5ad 7d6c 	sub.w	sp, sp, #944	@ 0x3b0
 80027f6:	af00      	add	r7, sp, #0
    unsigned char frame_buffer[920]; // Buffer for one decompressed frame (114*64/8 = 912, rounded up)
    
    const unsigned char *frame_start = bad_apple;
 80027f8:	4b30      	ldr	r3, [pc, #192]	@ (80028bc <play_video+0xcc>)
 80027fa:	f8c7 33a4 	str.w	r3, [r7, #932]	@ 0x3a4
    int frame_count = 0;
 80027fe:	2300      	movs	r3, #0
 8002800:	f8c7 33ac 	str.w	r3, [r7, #940]	@ 0x3ac
    unsigned int current_offset = 0;
 8002804:	2300      	movs	r3, #0
 8002806:	f8c7 33a8 	str.w	r3, [r7, #936]	@ 0x3a8

    while (current_offset < sizeof(bad_apple))
 800280a:	e043      	b.n	8002894 <play_video+0xa4>
    {
        frame_count++;
 800280c:	f8d7 33ac 	ldr.w	r3, [r7, #940]	@ 0x3ac
 8002810:	3301      	adds	r3, #1
 8002812:	f8c7 33ac 	str.w	r3, [r7, #940]	@ 0x3ac
        unsigned short length = *(unsigned short *)(frame_start + current_offset);
 8002816:	f8d7 23a4 	ldr.w	r2, [r7, #932]	@ 0x3a4
 800281a:	f8d7 33a8 	ldr.w	r3, [r7, #936]	@ 0x3a8
 800281e:	4413      	add	r3, r2
 8002820:	881b      	ldrh	r3, [r3, #0]
 8002822:	f8a7 33a2 	strh.w	r3, [r7, #930]	@ 0x3a2
        if (length == 0)
 8002826:	f8b7 33a2 	ldrh.w	r3, [r7, #930]	@ 0x3a2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d039      	beq.n	80028a2 <play_video+0xb2>
        { // End of video data marker or error
            break;
        }

        // Ensure we don't read past the end of video for the length itself
        if (current_offset + 2 > sizeof(bad_apple))
 800282e:	f8d7 33a8 	ldr.w	r3, [r7, #936]	@ 0x3a8
 8002832:	3302      	adds	r3, #2
 8002834:	f646 026a 	movw	r2, #26730	@ 0x686a
 8002838:	4293      	cmp	r3, r2
 800283a:	d834      	bhi.n	80028a6 <play_video+0xb6>
        {
            break;
        }

        // Ensure the compressed data length doesn't exceed remaining data
        if (current_offset + 2 + length > sizeof(bad_apple))
 800283c:	f8b7 23a2 	ldrh.w	r2, [r7, #930]	@ 0x3a2
 8002840:	f8d7 33a8 	ldr.w	r3, [r7, #936]	@ 0x3a8
 8002844:	4413      	add	r3, r2
 8002846:	3302      	adds	r3, #2
 8002848:	f646 026a 	movw	r2, #26730	@ 0x686a
 800284c:	4293      	cmp	r3, r2
 800284e:	d82c      	bhi.n	80028aa <play_video+0xba>
        {
            break;
        }

        int decompressed_size = lz77_decompress(frame_start + current_offset + 2, length, frame_buffer, sizeof(frame_buffer));
 8002850:	f8d7 33a8 	ldr.w	r3, [r7, #936]	@ 0x3a8
 8002854:	3302      	adds	r3, #2
 8002856:	f8d7 23a4 	ldr.w	r2, [r7, #932]	@ 0x3a4
 800285a:	18d0      	adds	r0, r2, r3
 800285c:	f8b7 13a2 	ldrh.w	r1, [r7, #930]	@ 0x3a2
 8002860:	1d3a      	adds	r2, r7, #4
 8002862:	f44f 7366 	mov.w	r3, #920	@ 0x398
 8002866:	f7ff fed1 	bl	800260c <lz77_decompress>
 800286a:	f8c7 039c 	str.w	r0, [r7, #924]	@ 0x39c

        if (decompressed_size > 0)
 800286e:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 8002872:	2b00      	cmp	r3, #0
 8002874:	dd1b      	ble.n	80028ae <play_video+0xbe>
        {
            display_frame_oled(frame_buffer);
 8002876:	1d3b      	adds	r3, r7, #4
 8002878:	4618      	mov	r0, r3
 800287a:	f7ff ff65 	bl	8002748 <display_frame_oled>
        {
            // Handle decompression error, maybe log or break
            break;
        }

        current_offset += length + 2;
 800287e:	f8b7 23a2 	ldrh.w	r2, [r7, #930]	@ 0x3a2
 8002882:	f8d7 33a8 	ldr.w	r3, [r7, #936]	@ 0x3a8
 8002886:	4413      	add	r3, r2
 8002888:	3302      	adds	r3, #2
 800288a:	f8c7 33a8 	str.w	r3, [r7, #936]	@ 0x3a8

        // Optional: Add a delay here if needed to control playback speed
        HAL_Delay(5); //这里调整播放速度
 800288e:	2005      	movs	r0, #5
 8002890:	f000 f89e 	bl	80029d0 <HAL_Delay>
    while (current_offset < sizeof(bad_apple))
 8002894:	f8d7 33a8 	ldr.w	r3, [r7, #936]	@ 0x3a8
 8002898:	f646 0269 	movw	r2, #26729	@ 0x6869
 800289c:	4293      	cmp	r3, r2
 800289e:	d9b5      	bls.n	800280c <play_video+0x1c>
    }
    // Optionally, display total frames or a message when done
}
 80028a0:	e006      	b.n	80028b0 <play_video+0xc0>
            break;
 80028a2:	bf00      	nop
 80028a4:	e004      	b.n	80028b0 <play_video+0xc0>
            break;
 80028a6:	bf00      	nop
 80028a8:	e002      	b.n	80028b0 <play_video+0xc0>
            break;
 80028aa:	bf00      	nop
 80028ac:	e000      	b.n	80028b0 <play_video+0xc0>
            break;
 80028ae:	bf00      	nop
}
 80028b0:	bf00      	nop
 80028b2:	f507 776c 	add.w	r7, r7, #944	@ 0x3b0
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	0800693c 	.word	0x0800693c

080028c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80028c0:	f7ff fdf8 	bl	80024b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028c4:	480b      	ldr	r0, [pc, #44]	@ (80028f4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80028c6:	490c      	ldr	r1, [pc, #48]	@ (80028f8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80028c8:	4a0c      	ldr	r2, [pc, #48]	@ (80028fc <LoopFillZerobss+0x16>)
  movs r3, #0
 80028ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028cc:	e002      	b.n	80028d4 <LoopCopyDataInit>

080028ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028d2:	3304      	adds	r3, #4

080028d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028d8:	d3f9      	bcc.n	80028ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028da:	4a09      	ldr	r2, [pc, #36]	@ (8002900 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80028dc:	4c09      	ldr	r4, [pc, #36]	@ (8002904 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80028de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028e0:	e001      	b.n	80028e6 <LoopFillZerobss>

080028e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028e4:	3204      	adds	r2, #4

080028e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028e8:	d3fb      	bcc.n	80028e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80028ea:	f002 f80b 	bl	8004904 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80028ee:	f7fe f86f 	bl	80009d0 <main>
  bx lr
 80028f2:	4770      	bx	lr
  ldr r0, =_sdata
 80028f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028f8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80028fc:	0800d5e8 	.word	0x0800d5e8
  ldr r2, =_sbss
 8002900:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002904:	20003edc 	.word	0x20003edc

08002908 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002908:	e7fe      	b.n	8002908 <ADC1_2_IRQHandler>
	...

0800290c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002910:	4b08      	ldr	r3, [pc, #32]	@ (8002934 <HAL_Init+0x28>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a07      	ldr	r2, [pc, #28]	@ (8002934 <HAL_Init+0x28>)
 8002916:	f043 0310 	orr.w	r3, r3, #16
 800291a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800291c:	2003      	movs	r0, #3
 800291e:	f000 f947 	bl	8002bb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002922:	200f      	movs	r0, #15
 8002924:	f000 f808 	bl	8002938 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002928:	f7ff fd26 	bl	8002378 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	40022000 	.word	0x40022000

08002938 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002940:	4b12      	ldr	r3, [pc, #72]	@ (800298c <HAL_InitTick+0x54>)
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	4b12      	ldr	r3, [pc, #72]	@ (8002990 <HAL_InitTick+0x58>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	4619      	mov	r1, r3
 800294a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800294e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002952:	fbb2 f3f3 	udiv	r3, r2, r3
 8002956:	4618      	mov	r0, r3
 8002958:	f000 f95f 	bl	8002c1a <HAL_SYSTICK_Config>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e00e      	b.n	8002984 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2b0f      	cmp	r3, #15
 800296a:	d80a      	bhi.n	8002982 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800296c:	2200      	movs	r2, #0
 800296e:	6879      	ldr	r1, [r7, #4]
 8002970:	f04f 30ff 	mov.w	r0, #4294967295
 8002974:	f000 f927 	bl	8002bc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002978:	4a06      	ldr	r2, [pc, #24]	@ (8002994 <HAL_InitTick+0x5c>)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800297e:	2300      	movs	r3, #0
 8002980:	e000      	b.n	8002984 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
}
 8002984:	4618      	mov	r0, r3
 8002986:	3708      	adds	r7, #8
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	20000014 	.word	0x20000014
 8002990:	2000001c 	.word	0x2000001c
 8002994:	20000018 	.word	0x20000018

08002998 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800299c:	4b05      	ldr	r3, [pc, #20]	@ (80029b4 <HAL_IncTick+0x1c>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	461a      	mov	r2, r3
 80029a2:	4b05      	ldr	r3, [pc, #20]	@ (80029b8 <HAL_IncTick+0x20>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4413      	add	r3, r2
 80029a8:	4a03      	ldr	r2, [pc, #12]	@ (80029b8 <HAL_IncTick+0x20>)
 80029aa:	6013      	str	r3, [r2, #0]
}
 80029ac:	bf00      	nop
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bc80      	pop	{r7}
 80029b2:	4770      	bx	lr
 80029b4:	2000001c 	.word	0x2000001c
 80029b8:	20003d90 	.word	0x20003d90

080029bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  return uwTick;
 80029c0:	4b02      	ldr	r3, [pc, #8]	@ (80029cc <HAL_GetTick+0x10>)
 80029c2:	681b      	ldr	r3, [r3, #0]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bc80      	pop	{r7}
 80029ca:	4770      	bx	lr
 80029cc:	20003d90 	.word	0x20003d90

080029d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029d8:	f7ff fff0 	bl	80029bc <HAL_GetTick>
 80029dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029e8:	d005      	beq.n	80029f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002a14 <HAL_Delay+0x44>)
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	461a      	mov	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	4413      	add	r3, r2
 80029f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029f6:	bf00      	nop
 80029f8:	f7ff ffe0 	bl	80029bc <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d8f7      	bhi.n	80029f8 <HAL_Delay+0x28>
  {
  }
}
 8002a08:	bf00      	nop
 8002a0a:	bf00      	nop
 8002a0c:	3710      	adds	r7, #16
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	2000001c 	.word	0x2000001c

08002a18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b085      	sub	sp, #20
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f003 0307 	and.w	r3, r3, #7
 8002a26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a28:	4b0c      	ldr	r3, [pc, #48]	@ (8002a5c <__NVIC_SetPriorityGrouping+0x44>)
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a2e:	68ba      	ldr	r2, [r7, #8]
 8002a30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a34:	4013      	ands	r3, r2
 8002a36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a4a:	4a04      	ldr	r2, [pc, #16]	@ (8002a5c <__NVIC_SetPriorityGrouping+0x44>)
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	60d3      	str	r3, [r2, #12]
}
 8002a50:	bf00      	nop
 8002a52:	3714      	adds	r7, #20
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bc80      	pop	{r7}
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	e000ed00 	.word	0xe000ed00

08002a60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a64:	4b04      	ldr	r3, [pc, #16]	@ (8002a78 <__NVIC_GetPriorityGrouping+0x18>)
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	0a1b      	lsrs	r3, r3, #8
 8002a6a:	f003 0307 	and.w	r3, r3, #7
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bc80      	pop	{r7}
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	e000ed00 	.word	0xe000ed00

08002a7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	4603      	mov	r3, r0
 8002a84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	db0b      	blt.n	8002aa6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a8e:	79fb      	ldrb	r3, [r7, #7]
 8002a90:	f003 021f 	and.w	r2, r3, #31
 8002a94:	4906      	ldr	r1, [pc, #24]	@ (8002ab0 <__NVIC_EnableIRQ+0x34>)
 8002a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a9a:	095b      	lsrs	r3, r3, #5
 8002a9c:	2001      	movs	r0, #1
 8002a9e:	fa00 f202 	lsl.w	r2, r0, r2
 8002aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002aa6:	bf00      	nop
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bc80      	pop	{r7}
 8002aae:	4770      	bx	lr
 8002ab0:	e000e100 	.word	0xe000e100

08002ab4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	4603      	mov	r3, r0
 8002abc:	6039      	str	r1, [r7, #0]
 8002abe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	db0a      	blt.n	8002ade <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	b2da      	uxtb	r2, r3
 8002acc:	490c      	ldr	r1, [pc, #48]	@ (8002b00 <__NVIC_SetPriority+0x4c>)
 8002ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad2:	0112      	lsls	r2, r2, #4
 8002ad4:	b2d2      	uxtb	r2, r2
 8002ad6:	440b      	add	r3, r1
 8002ad8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002adc:	e00a      	b.n	8002af4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	b2da      	uxtb	r2, r3
 8002ae2:	4908      	ldr	r1, [pc, #32]	@ (8002b04 <__NVIC_SetPriority+0x50>)
 8002ae4:	79fb      	ldrb	r3, [r7, #7]
 8002ae6:	f003 030f 	and.w	r3, r3, #15
 8002aea:	3b04      	subs	r3, #4
 8002aec:	0112      	lsls	r2, r2, #4
 8002aee:	b2d2      	uxtb	r2, r2
 8002af0:	440b      	add	r3, r1
 8002af2:	761a      	strb	r2, [r3, #24]
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bc80      	pop	{r7}
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	e000e100 	.word	0xe000e100
 8002b04:	e000ed00 	.word	0xe000ed00

08002b08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b089      	sub	sp, #36	@ 0x24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	f1c3 0307 	rsb	r3, r3, #7
 8002b22:	2b04      	cmp	r3, #4
 8002b24:	bf28      	it	cs
 8002b26:	2304      	movcs	r3, #4
 8002b28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	3304      	adds	r3, #4
 8002b2e:	2b06      	cmp	r3, #6
 8002b30:	d902      	bls.n	8002b38 <NVIC_EncodePriority+0x30>
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	3b03      	subs	r3, #3
 8002b36:	e000      	b.n	8002b3a <NVIC_EncodePriority+0x32>
 8002b38:	2300      	movs	r3, #0
 8002b3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	fa02 f303 	lsl.w	r3, r2, r3
 8002b46:	43da      	mvns	r2, r3
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	401a      	ands	r2, r3
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b50:	f04f 31ff 	mov.w	r1, #4294967295
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	fa01 f303 	lsl.w	r3, r1, r3
 8002b5a:	43d9      	mvns	r1, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b60:	4313      	orrs	r3, r2
         );
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3724      	adds	r7, #36	@ 0x24
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bc80      	pop	{r7}
 8002b6a:	4770      	bx	lr

08002b6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	3b01      	subs	r3, #1
 8002b78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b7c:	d301      	bcc.n	8002b82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e00f      	b.n	8002ba2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b82:	4a0a      	ldr	r2, [pc, #40]	@ (8002bac <SysTick_Config+0x40>)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	3b01      	subs	r3, #1
 8002b88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b8a:	210f      	movs	r1, #15
 8002b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b90:	f7ff ff90 	bl	8002ab4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b94:	4b05      	ldr	r3, [pc, #20]	@ (8002bac <SysTick_Config+0x40>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b9a:	4b04      	ldr	r3, [pc, #16]	@ (8002bac <SysTick_Config+0x40>)
 8002b9c:	2207      	movs	r2, #7
 8002b9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	e000e010 	.word	0xe000e010

08002bb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f7ff ff2d 	bl	8002a18 <__NVIC_SetPriorityGrouping>
}
 8002bbe:	bf00      	nop
 8002bc0:	3708      	adds	r7, #8
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b086      	sub	sp, #24
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	4603      	mov	r3, r0
 8002bce:	60b9      	str	r1, [r7, #8]
 8002bd0:	607a      	str	r2, [r7, #4]
 8002bd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bd8:	f7ff ff42 	bl	8002a60 <__NVIC_GetPriorityGrouping>
 8002bdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	68b9      	ldr	r1, [r7, #8]
 8002be2:	6978      	ldr	r0, [r7, #20]
 8002be4:	f7ff ff90 	bl	8002b08 <NVIC_EncodePriority>
 8002be8:	4602      	mov	r2, r0
 8002bea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bee:	4611      	mov	r1, r2
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7ff ff5f 	bl	8002ab4 <__NVIC_SetPriority>
}
 8002bf6:	bf00      	nop
 8002bf8:	3718      	adds	r7, #24
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b082      	sub	sp, #8
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	4603      	mov	r3, r0
 8002c06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7ff ff35 	bl	8002a7c <__NVIC_EnableIRQ>
}
 8002c12:	bf00      	nop
 8002c14:	3708      	adds	r7, #8
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b082      	sub	sp, #8
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f7ff ffa2 	bl	8002b6c <SysTick_Config>
 8002c28:	4603      	mov	r3, r0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
	...

08002c34 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b085      	sub	sp, #20
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e043      	b.n	8002cd2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	461a      	mov	r2, r3
 8002c50:	4b22      	ldr	r3, [pc, #136]	@ (8002cdc <HAL_DMA_Init+0xa8>)
 8002c52:	4413      	add	r3, r2
 8002c54:	4a22      	ldr	r2, [pc, #136]	@ (8002ce0 <HAL_DMA_Init+0xac>)
 8002c56:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5a:	091b      	lsrs	r3, r3, #4
 8002c5c:	009a      	lsls	r2, r3, #2
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a1f      	ldr	r2, [pc, #124]	@ (8002ce4 <HAL_DMA_Init+0xb0>)
 8002c66:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2202      	movs	r2, #2
 8002c6c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002c7e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002c82:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002c8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ca4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3714      	adds	r7, #20
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bc80      	pop	{r7}
 8002cda:	4770      	bx	lr
 8002cdc:	bffdfff8 	.word	0xbffdfff8
 8002ce0:	cccccccd 	.word	0xcccccccd
 8002ce4:	40020000 	.word	0x40020000

08002ce8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d04:	2204      	movs	r2, #4
 8002d06:	409a      	lsls	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d04f      	beq.n	8002db0 <HAL_DMA_IRQHandler+0xc8>
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	f003 0304 	and.w	r3, r3, #4
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d04a      	beq.n	8002db0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0320 	and.w	r3, r3, #32
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d107      	bne.n	8002d38 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f022 0204 	bic.w	r2, r2, #4
 8002d36:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a66      	ldr	r2, [pc, #408]	@ (8002ed8 <HAL_DMA_IRQHandler+0x1f0>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d029      	beq.n	8002d96 <HAL_DMA_IRQHandler+0xae>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a65      	ldr	r2, [pc, #404]	@ (8002edc <HAL_DMA_IRQHandler+0x1f4>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d022      	beq.n	8002d92 <HAL_DMA_IRQHandler+0xaa>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a63      	ldr	r2, [pc, #396]	@ (8002ee0 <HAL_DMA_IRQHandler+0x1f8>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d01a      	beq.n	8002d8c <HAL_DMA_IRQHandler+0xa4>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a62      	ldr	r2, [pc, #392]	@ (8002ee4 <HAL_DMA_IRQHandler+0x1fc>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d012      	beq.n	8002d86 <HAL_DMA_IRQHandler+0x9e>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a60      	ldr	r2, [pc, #384]	@ (8002ee8 <HAL_DMA_IRQHandler+0x200>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d00a      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x98>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a5f      	ldr	r2, [pc, #380]	@ (8002eec <HAL_DMA_IRQHandler+0x204>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d102      	bne.n	8002d7a <HAL_DMA_IRQHandler+0x92>
 8002d74:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002d78:	e00e      	b.n	8002d98 <HAL_DMA_IRQHandler+0xb0>
 8002d7a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002d7e:	e00b      	b.n	8002d98 <HAL_DMA_IRQHandler+0xb0>
 8002d80:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002d84:	e008      	b.n	8002d98 <HAL_DMA_IRQHandler+0xb0>
 8002d86:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002d8a:	e005      	b.n	8002d98 <HAL_DMA_IRQHandler+0xb0>
 8002d8c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002d90:	e002      	b.n	8002d98 <HAL_DMA_IRQHandler+0xb0>
 8002d92:	2340      	movs	r3, #64	@ 0x40
 8002d94:	e000      	b.n	8002d98 <HAL_DMA_IRQHandler+0xb0>
 8002d96:	2304      	movs	r3, #4
 8002d98:	4a55      	ldr	r2, [pc, #340]	@ (8002ef0 <HAL_DMA_IRQHandler+0x208>)
 8002d9a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	f000 8094 	beq.w	8002ece <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002dae:	e08e      	b.n	8002ece <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db4:	2202      	movs	r2, #2
 8002db6:	409a      	lsls	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d056      	beq.n	8002e6e <HAL_DMA_IRQHandler+0x186>
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d051      	beq.n	8002e6e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0320 	and.w	r3, r3, #32
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d10b      	bne.n	8002df0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f022 020a 	bic.w	r2, r2, #10
 8002de6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a38      	ldr	r2, [pc, #224]	@ (8002ed8 <HAL_DMA_IRQHandler+0x1f0>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d029      	beq.n	8002e4e <HAL_DMA_IRQHandler+0x166>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a37      	ldr	r2, [pc, #220]	@ (8002edc <HAL_DMA_IRQHandler+0x1f4>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d022      	beq.n	8002e4a <HAL_DMA_IRQHandler+0x162>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a35      	ldr	r2, [pc, #212]	@ (8002ee0 <HAL_DMA_IRQHandler+0x1f8>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d01a      	beq.n	8002e44 <HAL_DMA_IRQHandler+0x15c>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a34      	ldr	r2, [pc, #208]	@ (8002ee4 <HAL_DMA_IRQHandler+0x1fc>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d012      	beq.n	8002e3e <HAL_DMA_IRQHandler+0x156>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a32      	ldr	r2, [pc, #200]	@ (8002ee8 <HAL_DMA_IRQHandler+0x200>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d00a      	beq.n	8002e38 <HAL_DMA_IRQHandler+0x150>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a31      	ldr	r2, [pc, #196]	@ (8002eec <HAL_DMA_IRQHandler+0x204>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d102      	bne.n	8002e32 <HAL_DMA_IRQHandler+0x14a>
 8002e2c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002e30:	e00e      	b.n	8002e50 <HAL_DMA_IRQHandler+0x168>
 8002e32:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e36:	e00b      	b.n	8002e50 <HAL_DMA_IRQHandler+0x168>
 8002e38:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e3c:	e008      	b.n	8002e50 <HAL_DMA_IRQHandler+0x168>
 8002e3e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002e42:	e005      	b.n	8002e50 <HAL_DMA_IRQHandler+0x168>
 8002e44:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002e48:	e002      	b.n	8002e50 <HAL_DMA_IRQHandler+0x168>
 8002e4a:	2320      	movs	r3, #32
 8002e4c:	e000      	b.n	8002e50 <HAL_DMA_IRQHandler+0x168>
 8002e4e:	2302      	movs	r3, #2
 8002e50:	4a27      	ldr	r2, [pc, #156]	@ (8002ef0 <HAL_DMA_IRQHandler+0x208>)
 8002e52:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d034      	beq.n	8002ece <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002e6c:	e02f      	b.n	8002ece <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e72:	2208      	movs	r2, #8
 8002e74:	409a      	lsls	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d028      	beq.n	8002ed0 <HAL_DMA_IRQHandler+0x1e8>
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	f003 0308 	and.w	r3, r3, #8
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d023      	beq.n	8002ed0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f022 020e 	bic.w	r2, r2, #14
 8002e96:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ea0:	2101      	movs	r1, #1
 8002ea2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ea6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d004      	beq.n	8002ed0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	4798      	blx	r3
    }
  }
  return;
 8002ece:	bf00      	nop
 8002ed0:	bf00      	nop
}
 8002ed2:	3710      	adds	r7, #16
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	40020008 	.word	0x40020008
 8002edc:	4002001c 	.word	0x4002001c
 8002ee0:	40020030 	.word	0x40020030
 8002ee4:	40020044 	.word	0x40020044
 8002ee8:	40020058 	.word	0x40020058
 8002eec:	4002006c 	.word	0x4002006c
 8002ef0:	40020000 	.word	0x40020000

08002ef4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b08b      	sub	sp, #44	@ 0x2c
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002efe:	2300      	movs	r3, #0
 8002f00:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002f02:	2300      	movs	r3, #0
 8002f04:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f06:	e169      	b.n	80031dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002f08:	2201      	movs	r2, #1
 8002f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f10:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	69fa      	ldr	r2, [r7, #28]
 8002f18:	4013      	ands	r3, r2
 8002f1a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	f040 8158 	bne.w	80031d6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	4a9a      	ldr	r2, [pc, #616]	@ (8003194 <HAL_GPIO_Init+0x2a0>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d05e      	beq.n	8002fee <HAL_GPIO_Init+0xfa>
 8002f30:	4a98      	ldr	r2, [pc, #608]	@ (8003194 <HAL_GPIO_Init+0x2a0>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d875      	bhi.n	8003022 <HAL_GPIO_Init+0x12e>
 8002f36:	4a98      	ldr	r2, [pc, #608]	@ (8003198 <HAL_GPIO_Init+0x2a4>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d058      	beq.n	8002fee <HAL_GPIO_Init+0xfa>
 8002f3c:	4a96      	ldr	r2, [pc, #600]	@ (8003198 <HAL_GPIO_Init+0x2a4>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d86f      	bhi.n	8003022 <HAL_GPIO_Init+0x12e>
 8002f42:	4a96      	ldr	r2, [pc, #600]	@ (800319c <HAL_GPIO_Init+0x2a8>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d052      	beq.n	8002fee <HAL_GPIO_Init+0xfa>
 8002f48:	4a94      	ldr	r2, [pc, #592]	@ (800319c <HAL_GPIO_Init+0x2a8>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d869      	bhi.n	8003022 <HAL_GPIO_Init+0x12e>
 8002f4e:	4a94      	ldr	r2, [pc, #592]	@ (80031a0 <HAL_GPIO_Init+0x2ac>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d04c      	beq.n	8002fee <HAL_GPIO_Init+0xfa>
 8002f54:	4a92      	ldr	r2, [pc, #584]	@ (80031a0 <HAL_GPIO_Init+0x2ac>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d863      	bhi.n	8003022 <HAL_GPIO_Init+0x12e>
 8002f5a:	4a92      	ldr	r2, [pc, #584]	@ (80031a4 <HAL_GPIO_Init+0x2b0>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d046      	beq.n	8002fee <HAL_GPIO_Init+0xfa>
 8002f60:	4a90      	ldr	r2, [pc, #576]	@ (80031a4 <HAL_GPIO_Init+0x2b0>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d85d      	bhi.n	8003022 <HAL_GPIO_Init+0x12e>
 8002f66:	2b12      	cmp	r3, #18
 8002f68:	d82a      	bhi.n	8002fc0 <HAL_GPIO_Init+0xcc>
 8002f6a:	2b12      	cmp	r3, #18
 8002f6c:	d859      	bhi.n	8003022 <HAL_GPIO_Init+0x12e>
 8002f6e:	a201      	add	r2, pc, #4	@ (adr r2, 8002f74 <HAL_GPIO_Init+0x80>)
 8002f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f74:	08002fef 	.word	0x08002fef
 8002f78:	08002fc9 	.word	0x08002fc9
 8002f7c:	08002fdb 	.word	0x08002fdb
 8002f80:	0800301d 	.word	0x0800301d
 8002f84:	08003023 	.word	0x08003023
 8002f88:	08003023 	.word	0x08003023
 8002f8c:	08003023 	.word	0x08003023
 8002f90:	08003023 	.word	0x08003023
 8002f94:	08003023 	.word	0x08003023
 8002f98:	08003023 	.word	0x08003023
 8002f9c:	08003023 	.word	0x08003023
 8002fa0:	08003023 	.word	0x08003023
 8002fa4:	08003023 	.word	0x08003023
 8002fa8:	08003023 	.word	0x08003023
 8002fac:	08003023 	.word	0x08003023
 8002fb0:	08003023 	.word	0x08003023
 8002fb4:	08003023 	.word	0x08003023
 8002fb8:	08002fd1 	.word	0x08002fd1
 8002fbc:	08002fe5 	.word	0x08002fe5
 8002fc0:	4a79      	ldr	r2, [pc, #484]	@ (80031a8 <HAL_GPIO_Init+0x2b4>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d013      	beq.n	8002fee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002fc6:	e02c      	b.n	8003022 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	623b      	str	r3, [r7, #32]
          break;
 8002fce:	e029      	b.n	8003024 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	3304      	adds	r3, #4
 8002fd6:	623b      	str	r3, [r7, #32]
          break;
 8002fd8:	e024      	b.n	8003024 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	3308      	adds	r3, #8
 8002fe0:	623b      	str	r3, [r7, #32]
          break;
 8002fe2:	e01f      	b.n	8003024 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	330c      	adds	r3, #12
 8002fea:	623b      	str	r3, [r7, #32]
          break;
 8002fec:	e01a      	b.n	8003024 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d102      	bne.n	8002ffc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002ff6:	2304      	movs	r3, #4
 8002ff8:	623b      	str	r3, [r7, #32]
          break;
 8002ffa:	e013      	b.n	8003024 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	2b01      	cmp	r3, #1
 8003002:	d105      	bne.n	8003010 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003004:	2308      	movs	r3, #8
 8003006:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	69fa      	ldr	r2, [r7, #28]
 800300c:	611a      	str	r2, [r3, #16]
          break;
 800300e:	e009      	b.n	8003024 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003010:	2308      	movs	r3, #8
 8003012:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	69fa      	ldr	r2, [r7, #28]
 8003018:	615a      	str	r2, [r3, #20]
          break;
 800301a:	e003      	b.n	8003024 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800301c:	2300      	movs	r3, #0
 800301e:	623b      	str	r3, [r7, #32]
          break;
 8003020:	e000      	b.n	8003024 <HAL_GPIO_Init+0x130>
          break;
 8003022:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	2bff      	cmp	r3, #255	@ 0xff
 8003028:	d801      	bhi.n	800302e <HAL_GPIO_Init+0x13a>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	e001      	b.n	8003032 <HAL_GPIO_Init+0x13e>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	3304      	adds	r3, #4
 8003032:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	2bff      	cmp	r3, #255	@ 0xff
 8003038:	d802      	bhi.n	8003040 <HAL_GPIO_Init+0x14c>
 800303a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	e002      	b.n	8003046 <HAL_GPIO_Init+0x152>
 8003040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003042:	3b08      	subs	r3, #8
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	210f      	movs	r1, #15
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	fa01 f303 	lsl.w	r3, r1, r3
 8003054:	43db      	mvns	r3, r3
 8003056:	401a      	ands	r2, r3
 8003058:	6a39      	ldr	r1, [r7, #32]
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	fa01 f303 	lsl.w	r3, r1, r3
 8003060:	431a      	orrs	r2, r3
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800306e:	2b00      	cmp	r3, #0
 8003070:	f000 80b1 	beq.w	80031d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003074:	4b4d      	ldr	r3, [pc, #308]	@ (80031ac <HAL_GPIO_Init+0x2b8>)
 8003076:	699b      	ldr	r3, [r3, #24]
 8003078:	4a4c      	ldr	r2, [pc, #304]	@ (80031ac <HAL_GPIO_Init+0x2b8>)
 800307a:	f043 0301 	orr.w	r3, r3, #1
 800307e:	6193      	str	r3, [r2, #24]
 8003080:	4b4a      	ldr	r3, [pc, #296]	@ (80031ac <HAL_GPIO_Init+0x2b8>)
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	f003 0301 	and.w	r3, r3, #1
 8003088:	60bb      	str	r3, [r7, #8]
 800308a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800308c:	4a48      	ldr	r2, [pc, #288]	@ (80031b0 <HAL_GPIO_Init+0x2bc>)
 800308e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003090:	089b      	lsrs	r3, r3, #2
 8003092:	3302      	adds	r3, #2
 8003094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003098:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800309a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800309c:	f003 0303 	and.w	r3, r3, #3
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	220f      	movs	r2, #15
 80030a4:	fa02 f303 	lsl.w	r3, r2, r3
 80030a8:	43db      	mvns	r3, r3
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	4013      	ands	r3, r2
 80030ae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4a40      	ldr	r2, [pc, #256]	@ (80031b4 <HAL_GPIO_Init+0x2c0>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d013      	beq.n	80030e0 <HAL_GPIO_Init+0x1ec>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4a3f      	ldr	r2, [pc, #252]	@ (80031b8 <HAL_GPIO_Init+0x2c4>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d00d      	beq.n	80030dc <HAL_GPIO_Init+0x1e8>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4a3e      	ldr	r2, [pc, #248]	@ (80031bc <HAL_GPIO_Init+0x2c8>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d007      	beq.n	80030d8 <HAL_GPIO_Init+0x1e4>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4a3d      	ldr	r2, [pc, #244]	@ (80031c0 <HAL_GPIO_Init+0x2cc>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d101      	bne.n	80030d4 <HAL_GPIO_Init+0x1e0>
 80030d0:	2303      	movs	r3, #3
 80030d2:	e006      	b.n	80030e2 <HAL_GPIO_Init+0x1ee>
 80030d4:	2304      	movs	r3, #4
 80030d6:	e004      	b.n	80030e2 <HAL_GPIO_Init+0x1ee>
 80030d8:	2302      	movs	r3, #2
 80030da:	e002      	b.n	80030e2 <HAL_GPIO_Init+0x1ee>
 80030dc:	2301      	movs	r3, #1
 80030de:	e000      	b.n	80030e2 <HAL_GPIO_Init+0x1ee>
 80030e0:	2300      	movs	r3, #0
 80030e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030e4:	f002 0203 	and.w	r2, r2, #3
 80030e8:	0092      	lsls	r2, r2, #2
 80030ea:	4093      	lsls	r3, r2
 80030ec:	68fa      	ldr	r2, [r7, #12]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80030f2:	492f      	ldr	r1, [pc, #188]	@ (80031b0 <HAL_GPIO_Init+0x2bc>)
 80030f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f6:	089b      	lsrs	r3, r3, #2
 80030f8:	3302      	adds	r3, #2
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d006      	beq.n	800311a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800310c:	4b2d      	ldr	r3, [pc, #180]	@ (80031c4 <HAL_GPIO_Init+0x2d0>)
 800310e:	689a      	ldr	r2, [r3, #8]
 8003110:	492c      	ldr	r1, [pc, #176]	@ (80031c4 <HAL_GPIO_Init+0x2d0>)
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	4313      	orrs	r3, r2
 8003116:	608b      	str	r3, [r1, #8]
 8003118:	e006      	b.n	8003128 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800311a:	4b2a      	ldr	r3, [pc, #168]	@ (80031c4 <HAL_GPIO_Init+0x2d0>)
 800311c:	689a      	ldr	r2, [r3, #8]
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	43db      	mvns	r3, r3
 8003122:	4928      	ldr	r1, [pc, #160]	@ (80031c4 <HAL_GPIO_Init+0x2d0>)
 8003124:	4013      	ands	r3, r2
 8003126:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d006      	beq.n	8003142 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003134:	4b23      	ldr	r3, [pc, #140]	@ (80031c4 <HAL_GPIO_Init+0x2d0>)
 8003136:	68da      	ldr	r2, [r3, #12]
 8003138:	4922      	ldr	r1, [pc, #136]	@ (80031c4 <HAL_GPIO_Init+0x2d0>)
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	4313      	orrs	r3, r2
 800313e:	60cb      	str	r3, [r1, #12]
 8003140:	e006      	b.n	8003150 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003142:	4b20      	ldr	r3, [pc, #128]	@ (80031c4 <HAL_GPIO_Init+0x2d0>)
 8003144:	68da      	ldr	r2, [r3, #12]
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	43db      	mvns	r3, r3
 800314a:	491e      	ldr	r1, [pc, #120]	@ (80031c4 <HAL_GPIO_Init+0x2d0>)
 800314c:	4013      	ands	r3, r2
 800314e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d006      	beq.n	800316a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800315c:	4b19      	ldr	r3, [pc, #100]	@ (80031c4 <HAL_GPIO_Init+0x2d0>)
 800315e:	685a      	ldr	r2, [r3, #4]
 8003160:	4918      	ldr	r1, [pc, #96]	@ (80031c4 <HAL_GPIO_Init+0x2d0>)
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	4313      	orrs	r3, r2
 8003166:	604b      	str	r3, [r1, #4]
 8003168:	e006      	b.n	8003178 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800316a:	4b16      	ldr	r3, [pc, #88]	@ (80031c4 <HAL_GPIO_Init+0x2d0>)
 800316c:	685a      	ldr	r2, [r3, #4]
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	43db      	mvns	r3, r3
 8003172:	4914      	ldr	r1, [pc, #80]	@ (80031c4 <HAL_GPIO_Init+0x2d0>)
 8003174:	4013      	ands	r3, r2
 8003176:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d021      	beq.n	80031c8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003184:	4b0f      	ldr	r3, [pc, #60]	@ (80031c4 <HAL_GPIO_Init+0x2d0>)
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	490e      	ldr	r1, [pc, #56]	@ (80031c4 <HAL_GPIO_Init+0x2d0>)
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	4313      	orrs	r3, r2
 800318e:	600b      	str	r3, [r1, #0]
 8003190:	e021      	b.n	80031d6 <HAL_GPIO_Init+0x2e2>
 8003192:	bf00      	nop
 8003194:	10320000 	.word	0x10320000
 8003198:	10310000 	.word	0x10310000
 800319c:	10220000 	.word	0x10220000
 80031a0:	10210000 	.word	0x10210000
 80031a4:	10120000 	.word	0x10120000
 80031a8:	10110000 	.word	0x10110000
 80031ac:	40021000 	.word	0x40021000
 80031b0:	40010000 	.word	0x40010000
 80031b4:	40010800 	.word	0x40010800
 80031b8:	40010c00 	.word	0x40010c00
 80031bc:	40011000 	.word	0x40011000
 80031c0:	40011400 	.word	0x40011400
 80031c4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80031c8:	4b0b      	ldr	r3, [pc, #44]	@ (80031f8 <HAL_GPIO_Init+0x304>)
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	43db      	mvns	r3, r3
 80031d0:	4909      	ldr	r1, [pc, #36]	@ (80031f8 <HAL_GPIO_Init+0x304>)
 80031d2:	4013      	ands	r3, r2
 80031d4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80031d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d8:	3301      	adds	r3, #1
 80031da:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e2:	fa22 f303 	lsr.w	r3, r2, r3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f47f ae8e 	bne.w	8002f08 <HAL_GPIO_Init+0x14>
  }
}
 80031ec:	bf00      	nop
 80031ee:	bf00      	nop
 80031f0:	372c      	adds	r7, #44	@ 0x2c
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bc80      	pop	{r7}
 80031f6:	4770      	bx	lr
 80031f8:	40010400 	.word	0x40010400

080031fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	460b      	mov	r3, r1
 8003206:	807b      	strh	r3, [r7, #2]
 8003208:	4613      	mov	r3, r2
 800320a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800320c:	787b      	ldrb	r3, [r7, #1]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d003      	beq.n	800321a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003212:	887a      	ldrh	r2, [r7, #2]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003218:	e003      	b.n	8003222 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800321a:	887b      	ldrh	r3, [r7, #2]
 800321c:	041a      	lsls	r2, r3, #16
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	611a      	str	r2, [r3, #16]
}
 8003222:	bf00      	nop
 8003224:	370c      	adds	r7, #12
 8003226:	46bd      	mov	sp, r7
 8003228:	bc80      	pop	{r7}
 800322a:	4770      	bx	lr

0800322c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d101      	bne.n	800323e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e12b      	b.n	8003496 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003244:	b2db      	uxtb	r3, r3
 8003246:	2b00      	cmp	r3, #0
 8003248:	d106      	bne.n	8003258 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f7fd fb52 	bl	80008fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2224      	movs	r2, #36	@ 0x24
 800325c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f022 0201 	bic.w	r2, r2, #1
 800326e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800327e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800328e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003290:	f001 f832 	bl	80042f8 <HAL_RCC_GetPCLK1Freq>
 8003294:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	4a81      	ldr	r2, [pc, #516]	@ (80034a0 <HAL_I2C_Init+0x274>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d807      	bhi.n	80032b0 <HAL_I2C_Init+0x84>
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	4a80      	ldr	r2, [pc, #512]	@ (80034a4 <HAL_I2C_Init+0x278>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	bf94      	ite	ls
 80032a8:	2301      	movls	r3, #1
 80032aa:	2300      	movhi	r3, #0
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	e006      	b.n	80032be <HAL_I2C_Init+0x92>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	4a7d      	ldr	r2, [pc, #500]	@ (80034a8 <HAL_I2C_Init+0x27c>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	bf94      	ite	ls
 80032b8:	2301      	movls	r3, #1
 80032ba:	2300      	movhi	r3, #0
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e0e7      	b.n	8003496 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	4a78      	ldr	r2, [pc, #480]	@ (80034ac <HAL_I2C_Init+0x280>)
 80032ca:	fba2 2303 	umull	r2, r3, r2, r3
 80032ce:	0c9b      	lsrs	r3, r3, #18
 80032d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68ba      	ldr	r2, [r7, #8]
 80032e2:	430a      	orrs	r2, r1
 80032e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	6a1b      	ldr	r3, [r3, #32]
 80032ec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	4a6a      	ldr	r2, [pc, #424]	@ (80034a0 <HAL_I2C_Init+0x274>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d802      	bhi.n	8003300 <HAL_I2C_Init+0xd4>
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	3301      	adds	r3, #1
 80032fe:	e009      	b.n	8003314 <HAL_I2C_Init+0xe8>
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003306:	fb02 f303 	mul.w	r3, r2, r3
 800330a:	4a69      	ldr	r2, [pc, #420]	@ (80034b0 <HAL_I2C_Init+0x284>)
 800330c:	fba2 2303 	umull	r2, r3, r2, r3
 8003310:	099b      	lsrs	r3, r3, #6
 8003312:	3301      	adds	r3, #1
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	6812      	ldr	r2, [r2, #0]
 8003318:	430b      	orrs	r3, r1
 800331a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	69db      	ldr	r3, [r3, #28]
 8003322:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003326:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	495c      	ldr	r1, [pc, #368]	@ (80034a0 <HAL_I2C_Init+0x274>)
 8003330:	428b      	cmp	r3, r1
 8003332:	d819      	bhi.n	8003368 <HAL_I2C_Init+0x13c>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	1e59      	subs	r1, r3, #1
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003342:	1c59      	adds	r1, r3, #1
 8003344:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003348:	400b      	ands	r3, r1
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00a      	beq.n	8003364 <HAL_I2C_Init+0x138>
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	1e59      	subs	r1, r3, #1
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	005b      	lsls	r3, r3, #1
 8003358:	fbb1 f3f3 	udiv	r3, r1, r3
 800335c:	3301      	adds	r3, #1
 800335e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003362:	e051      	b.n	8003408 <HAL_I2C_Init+0x1dc>
 8003364:	2304      	movs	r3, #4
 8003366:	e04f      	b.n	8003408 <HAL_I2C_Init+0x1dc>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d111      	bne.n	8003394 <HAL_I2C_Init+0x168>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	1e58      	subs	r0, r3, #1
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6859      	ldr	r1, [r3, #4]
 8003378:	460b      	mov	r3, r1
 800337a:	005b      	lsls	r3, r3, #1
 800337c:	440b      	add	r3, r1
 800337e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003382:	3301      	adds	r3, #1
 8003384:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003388:	2b00      	cmp	r3, #0
 800338a:	bf0c      	ite	eq
 800338c:	2301      	moveq	r3, #1
 800338e:	2300      	movne	r3, #0
 8003390:	b2db      	uxtb	r3, r3
 8003392:	e012      	b.n	80033ba <HAL_I2C_Init+0x18e>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	1e58      	subs	r0, r3, #1
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6859      	ldr	r1, [r3, #4]
 800339c:	460b      	mov	r3, r1
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	440b      	add	r3, r1
 80033a2:	0099      	lsls	r1, r3, #2
 80033a4:	440b      	add	r3, r1
 80033a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80033aa:	3301      	adds	r3, #1
 80033ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	bf0c      	ite	eq
 80033b4:	2301      	moveq	r3, #1
 80033b6:	2300      	movne	r3, #0
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d001      	beq.n	80033c2 <HAL_I2C_Init+0x196>
 80033be:	2301      	movs	r3, #1
 80033c0:	e022      	b.n	8003408 <HAL_I2C_Init+0x1dc>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d10e      	bne.n	80033e8 <HAL_I2C_Init+0x1bc>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	1e58      	subs	r0, r3, #1
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6859      	ldr	r1, [r3, #4]
 80033d2:	460b      	mov	r3, r1
 80033d4:	005b      	lsls	r3, r3, #1
 80033d6:	440b      	add	r3, r1
 80033d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80033dc:	3301      	adds	r3, #1
 80033de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80033e6:	e00f      	b.n	8003408 <HAL_I2C_Init+0x1dc>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	1e58      	subs	r0, r3, #1
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6859      	ldr	r1, [r3, #4]
 80033f0:	460b      	mov	r3, r1
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	440b      	add	r3, r1
 80033f6:	0099      	lsls	r1, r3, #2
 80033f8:	440b      	add	r3, r1
 80033fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80033fe:	3301      	adds	r3, #1
 8003400:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003404:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003408:	6879      	ldr	r1, [r7, #4]
 800340a:	6809      	ldr	r1, [r1, #0]
 800340c:	4313      	orrs	r3, r2
 800340e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	69da      	ldr	r2, [r3, #28]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a1b      	ldr	r3, [r3, #32]
 8003422:	431a      	orrs	r2, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	430a      	orrs	r2, r1
 800342a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003436:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	6911      	ldr	r1, [r2, #16]
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	68d2      	ldr	r2, [r2, #12]
 8003442:	4311      	orrs	r1, r2
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	6812      	ldr	r2, [r2, #0]
 8003448:	430b      	orrs	r3, r1
 800344a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	695a      	ldr	r2, [r3, #20]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	431a      	orrs	r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	430a      	orrs	r2, r1
 8003466:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f042 0201 	orr.w	r2, r2, #1
 8003476:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2220      	movs	r2, #32
 8003482:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3710      	adds	r7, #16
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	000186a0 	.word	0x000186a0
 80034a4:	001e847f 	.word	0x001e847f
 80034a8:	003d08ff 	.word	0x003d08ff
 80034ac:	431bde83 	.word	0x431bde83
 80034b0:	10624dd3 	.word	0x10624dd3

080034b4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b088      	sub	sp, #32
 80034b8:	af02      	add	r7, sp, #8
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	607a      	str	r2, [r7, #4]
 80034be:	461a      	mov	r2, r3
 80034c0:	460b      	mov	r3, r1
 80034c2:	817b      	strh	r3, [r7, #10]
 80034c4:	4613      	mov	r3, r2
 80034c6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80034c8:	f7ff fa78 	bl	80029bc <HAL_GetTick>
 80034cc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b20      	cmp	r3, #32
 80034d8:	f040 80e0 	bne.w	800369c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	9300      	str	r3, [sp, #0]
 80034e0:	2319      	movs	r3, #25
 80034e2:	2201      	movs	r2, #1
 80034e4:	4970      	ldr	r1, [pc, #448]	@ (80036a8 <HAL_I2C_Master_Transmit+0x1f4>)
 80034e6:	68f8      	ldr	r0, [r7, #12]
 80034e8:	f000 f964 	bl	80037b4 <I2C_WaitOnFlagUntilTimeout>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80034f2:	2302      	movs	r3, #2
 80034f4:	e0d3      	b.n	800369e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d101      	bne.n	8003504 <HAL_I2C_Master_Transmit+0x50>
 8003500:	2302      	movs	r3, #2
 8003502:	e0cc      	b.n	800369e <HAL_I2C_Master_Transmit+0x1ea>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	2b01      	cmp	r3, #1
 8003518:	d007      	beq.n	800352a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f042 0201 	orr.w	r2, r2, #1
 8003528:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003538:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2221      	movs	r2, #33	@ 0x21
 800353e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2210      	movs	r2, #16
 8003546:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2200      	movs	r2, #0
 800354e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	893a      	ldrh	r2, [r7, #8]
 800355a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003560:	b29a      	uxth	r2, r3
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	4a50      	ldr	r2, [pc, #320]	@ (80036ac <HAL_I2C_Master_Transmit+0x1f8>)
 800356a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800356c:	8979      	ldrh	r1, [r7, #10]
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	6a3a      	ldr	r2, [r7, #32]
 8003572:	68f8      	ldr	r0, [r7, #12]
 8003574:	f000 f89c 	bl	80036b0 <I2C_MasterRequestWrite>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e08d      	b.n	800369e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003582:	2300      	movs	r3, #0
 8003584:	613b      	str	r3, [r7, #16]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	695b      	ldr	r3, [r3, #20]
 800358c:	613b      	str	r3, [r7, #16]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	613b      	str	r3, [r7, #16]
 8003596:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003598:	e066      	b.n	8003668 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800359a:	697a      	ldr	r2, [r7, #20]
 800359c:	6a39      	ldr	r1, [r7, #32]
 800359e:	68f8      	ldr	r0, [r7, #12]
 80035a0:	f000 fa22 	bl	80039e8 <I2C_WaitOnTXEFlagUntilTimeout>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00d      	beq.n	80035c6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ae:	2b04      	cmp	r3, #4
 80035b0:	d107      	bne.n	80035c2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e06b      	b.n	800369e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ca:	781a      	ldrb	r2, [r3, #0]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d6:	1c5a      	adds	r2, r3, #1
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	3b01      	subs	r3, #1
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035ee:	3b01      	subs	r3, #1
 80035f0:	b29a      	uxth	r2, r3
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	695b      	ldr	r3, [r3, #20]
 80035fc:	f003 0304 	and.w	r3, r3, #4
 8003600:	2b04      	cmp	r3, #4
 8003602:	d11b      	bne.n	800363c <HAL_I2C_Master_Transmit+0x188>
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003608:	2b00      	cmp	r3, #0
 800360a:	d017      	beq.n	800363c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003610:	781a      	ldrb	r2, [r3, #0]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800361c:	1c5a      	adds	r2, r3, #1
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003626:	b29b      	uxth	r3, r3
 8003628:	3b01      	subs	r3, #1
 800362a:	b29a      	uxth	r2, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003634:	3b01      	subs	r3, #1
 8003636:	b29a      	uxth	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800363c:	697a      	ldr	r2, [r7, #20]
 800363e:	6a39      	ldr	r1, [r7, #32]
 8003640:	68f8      	ldr	r0, [r7, #12]
 8003642:	f000 fa19 	bl	8003a78 <I2C_WaitOnBTFFlagUntilTimeout>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00d      	beq.n	8003668 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003650:	2b04      	cmp	r3, #4
 8003652:	d107      	bne.n	8003664 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003662:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e01a      	b.n	800369e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800366c:	2b00      	cmp	r3, #0
 800366e:	d194      	bne.n	800359a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800367e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2220      	movs	r2, #32
 8003684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003698:	2300      	movs	r3, #0
 800369a:	e000      	b.n	800369e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800369c:	2302      	movs	r3, #2
  }
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3718      	adds	r7, #24
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	00100002 	.word	0x00100002
 80036ac:	ffff0000 	.word	0xffff0000

080036b0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b088      	sub	sp, #32
 80036b4:	af02      	add	r7, sp, #8
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	607a      	str	r2, [r7, #4]
 80036ba:	603b      	str	r3, [r7, #0]
 80036bc:	460b      	mov	r3, r1
 80036be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036c4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	2b08      	cmp	r3, #8
 80036ca:	d006      	beq.n	80036da <I2C_MasterRequestWrite+0x2a>
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d003      	beq.n	80036da <I2C_MasterRequestWrite+0x2a>
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80036d8:	d108      	bne.n	80036ec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80036e8:	601a      	str	r2, [r3, #0]
 80036ea:	e00b      	b.n	8003704 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036f0:	2b12      	cmp	r3, #18
 80036f2:	d107      	bne.n	8003704 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003702:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	9300      	str	r3, [sp, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003710:	68f8      	ldr	r0, [r7, #12]
 8003712:	f000 f84f 	bl	80037b4 <I2C_WaitOnFlagUntilTimeout>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d00d      	beq.n	8003738 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003726:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800372a:	d103      	bne.n	8003734 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003732:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e035      	b.n	80037a4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	691b      	ldr	r3, [r3, #16]
 800373c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003740:	d108      	bne.n	8003754 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003742:	897b      	ldrh	r3, [r7, #10]
 8003744:	b2db      	uxtb	r3, r3
 8003746:	461a      	mov	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003750:	611a      	str	r2, [r3, #16]
 8003752:	e01b      	b.n	800378c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003754:	897b      	ldrh	r3, [r7, #10]
 8003756:	11db      	asrs	r3, r3, #7
 8003758:	b2db      	uxtb	r3, r3
 800375a:	f003 0306 	and.w	r3, r3, #6
 800375e:	b2db      	uxtb	r3, r3
 8003760:	f063 030f 	orn	r3, r3, #15
 8003764:	b2da      	uxtb	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	490e      	ldr	r1, [pc, #56]	@ (80037ac <I2C_MasterRequestWrite+0xfc>)
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	f000 f898 	bl	80038a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e010      	b.n	80037a4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003782:	897b      	ldrh	r3, [r7, #10]
 8003784:	b2da      	uxtb	r2, r3
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	4907      	ldr	r1, [pc, #28]	@ (80037b0 <I2C_MasterRequestWrite+0x100>)
 8003792:	68f8      	ldr	r0, [r7, #12]
 8003794:	f000 f888 	bl	80038a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d001      	beq.n	80037a2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e000      	b.n	80037a4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3718      	adds	r7, #24
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	00010008 	.word	0x00010008
 80037b0:	00010002 	.word	0x00010002

080037b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	603b      	str	r3, [r7, #0]
 80037c0:	4613      	mov	r3, r2
 80037c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037c4:	e048      	b.n	8003858 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037cc:	d044      	beq.n	8003858 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037ce:	f7ff f8f5 	bl	80029bc <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	683a      	ldr	r2, [r7, #0]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d302      	bcc.n	80037e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d139      	bne.n	8003858 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	0c1b      	lsrs	r3, r3, #16
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d10d      	bne.n	800380a <I2C_WaitOnFlagUntilTimeout+0x56>
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	695b      	ldr	r3, [r3, #20]
 80037f4:	43da      	mvns	r2, r3
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	4013      	ands	r3, r2
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	bf0c      	ite	eq
 8003800:	2301      	moveq	r3, #1
 8003802:	2300      	movne	r3, #0
 8003804:	b2db      	uxtb	r3, r3
 8003806:	461a      	mov	r2, r3
 8003808:	e00c      	b.n	8003824 <I2C_WaitOnFlagUntilTimeout+0x70>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	43da      	mvns	r2, r3
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	4013      	ands	r3, r2
 8003816:	b29b      	uxth	r3, r3
 8003818:	2b00      	cmp	r3, #0
 800381a:	bf0c      	ite	eq
 800381c:	2301      	moveq	r3, #1
 800381e:	2300      	movne	r3, #0
 8003820:	b2db      	uxtb	r3, r3
 8003822:	461a      	mov	r2, r3
 8003824:	79fb      	ldrb	r3, [r7, #7]
 8003826:	429a      	cmp	r2, r3
 8003828:	d116      	bne.n	8003858 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2200      	movs	r2, #0
 800382e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2220      	movs	r2, #32
 8003834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003844:	f043 0220 	orr.w	r2, r3, #32
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e023      	b.n	80038a0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	0c1b      	lsrs	r3, r3, #16
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b01      	cmp	r3, #1
 8003860:	d10d      	bne.n	800387e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	695b      	ldr	r3, [r3, #20]
 8003868:	43da      	mvns	r2, r3
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	4013      	ands	r3, r2
 800386e:	b29b      	uxth	r3, r3
 8003870:	2b00      	cmp	r3, #0
 8003872:	bf0c      	ite	eq
 8003874:	2301      	moveq	r3, #1
 8003876:	2300      	movne	r3, #0
 8003878:	b2db      	uxtb	r3, r3
 800387a:	461a      	mov	r2, r3
 800387c:	e00c      	b.n	8003898 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	43da      	mvns	r2, r3
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	4013      	ands	r3, r2
 800388a:	b29b      	uxth	r3, r3
 800388c:	2b00      	cmp	r3, #0
 800388e:	bf0c      	ite	eq
 8003890:	2301      	moveq	r3, #1
 8003892:	2300      	movne	r3, #0
 8003894:	b2db      	uxtb	r3, r3
 8003896:	461a      	mov	r2, r3
 8003898:	79fb      	ldrb	r3, [r7, #7]
 800389a:	429a      	cmp	r2, r3
 800389c:	d093      	beq.n	80037c6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800389e:	2300      	movs	r3, #0
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3710      	adds	r7, #16
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	607a      	str	r2, [r7, #4]
 80038b4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038b6:	e071      	b.n	800399c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	695b      	ldr	r3, [r3, #20]
 80038be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038c6:	d123      	bne.n	8003910 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038d6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80038e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2200      	movs	r2, #0
 80038e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2220      	movs	r2, #32
 80038ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038fc:	f043 0204 	orr.w	r2, r3, #4
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e067      	b.n	80039e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003916:	d041      	beq.n	800399c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003918:	f7ff f850 	bl	80029bc <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	429a      	cmp	r2, r3
 8003926:	d302      	bcc.n	800392e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d136      	bne.n	800399c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	0c1b      	lsrs	r3, r3, #16
 8003932:	b2db      	uxtb	r3, r3
 8003934:	2b01      	cmp	r3, #1
 8003936:	d10c      	bne.n	8003952 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	695b      	ldr	r3, [r3, #20]
 800393e:	43da      	mvns	r2, r3
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	4013      	ands	r3, r2
 8003944:	b29b      	uxth	r3, r3
 8003946:	2b00      	cmp	r3, #0
 8003948:	bf14      	ite	ne
 800394a:	2301      	movne	r3, #1
 800394c:	2300      	moveq	r3, #0
 800394e:	b2db      	uxtb	r3, r3
 8003950:	e00b      	b.n	800396a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	43da      	mvns	r2, r3
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	4013      	ands	r3, r2
 800395e:	b29b      	uxth	r3, r3
 8003960:	2b00      	cmp	r3, #0
 8003962:	bf14      	ite	ne
 8003964:	2301      	movne	r3, #1
 8003966:	2300      	moveq	r3, #0
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d016      	beq.n	800399c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2200      	movs	r2, #0
 8003972:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2220      	movs	r2, #32
 8003978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003988:	f043 0220 	orr.w	r2, r3, #32
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e021      	b.n	80039e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	0c1b      	lsrs	r3, r3, #16
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d10c      	bne.n	80039c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	695b      	ldr	r3, [r3, #20]
 80039ac:	43da      	mvns	r2, r3
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	4013      	ands	r3, r2
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	bf14      	ite	ne
 80039b8:	2301      	movne	r3, #1
 80039ba:	2300      	moveq	r3, #0
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	e00b      	b.n	80039d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	699b      	ldr	r3, [r3, #24]
 80039c6:	43da      	mvns	r2, r3
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	4013      	ands	r3, r2
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	bf14      	ite	ne
 80039d2:	2301      	movne	r3, #1
 80039d4:	2300      	moveq	r3, #0
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	2b00      	cmp	r3, #0
 80039da:	f47f af6d 	bne.w	80038b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80039de:	2300      	movs	r3, #0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3710      	adds	r7, #16
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039f4:	e034      	b.n	8003a60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039f6:	68f8      	ldr	r0, [r7, #12]
 80039f8:	f000 f886 	bl	8003b08 <I2C_IsAcknowledgeFailed>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d001      	beq.n	8003a06 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e034      	b.n	8003a70 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a0c:	d028      	beq.n	8003a60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a0e:	f7fe ffd5 	bl	80029bc <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	68ba      	ldr	r2, [r7, #8]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d302      	bcc.n	8003a24 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d11d      	bne.n	8003a60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	695b      	ldr	r3, [r3, #20]
 8003a2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a2e:	2b80      	cmp	r3, #128	@ 0x80
 8003a30:	d016      	beq.n	8003a60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2200      	movs	r2, #0
 8003a36:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2220      	movs	r2, #32
 8003a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a4c:	f043 0220 	orr.w	r2, r3, #32
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e007      	b.n	8003a70 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a6a:	2b80      	cmp	r3, #128	@ 0x80
 8003a6c:	d1c3      	bne.n	80039f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003a6e:	2300      	movs	r3, #0
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3710      	adds	r7, #16
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a84:	e034      	b.n	8003af0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a86:	68f8      	ldr	r0, [r7, #12]
 8003a88:	f000 f83e 	bl	8003b08 <I2C_IsAcknowledgeFailed>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d001      	beq.n	8003a96 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e034      	b.n	8003b00 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a9c:	d028      	beq.n	8003af0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a9e:	f7fe ff8d 	bl	80029bc <HAL_GetTick>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	68ba      	ldr	r2, [r7, #8]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d302      	bcc.n	8003ab4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d11d      	bne.n	8003af0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	f003 0304 	and.w	r3, r3, #4
 8003abe:	2b04      	cmp	r3, #4
 8003ac0:	d016      	beq.n	8003af0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2220      	movs	r2, #32
 8003acc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003adc:	f043 0220 	orr.w	r2, r3, #32
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e007      	b.n	8003b00 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	695b      	ldr	r3, [r3, #20]
 8003af6:	f003 0304 	and.w	r3, r3, #4
 8003afa:	2b04      	cmp	r3, #4
 8003afc:	d1c3      	bne.n	8003a86 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003afe:	2300      	movs	r3, #0
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3710      	adds	r7, #16
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b1e:	d11b      	bne.n	8003b58 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003b28:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2220      	movs	r2, #32
 8003b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b44:	f043 0204 	orr.w	r2, r3, #4
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e000      	b.n	8003b5a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	370c      	adds	r7, #12
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bc80      	pop	{r7}
 8003b62:	4770      	bx	lr

08003b64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b086      	sub	sp, #24
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d101      	bne.n	8003b76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e272      	b.n	800405c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	f000 8087 	beq.w	8003c92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b84:	4b92      	ldr	r3, [pc, #584]	@ (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f003 030c 	and.w	r3, r3, #12
 8003b8c:	2b04      	cmp	r3, #4
 8003b8e:	d00c      	beq.n	8003baa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003b90:	4b8f      	ldr	r3, [pc, #572]	@ (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f003 030c 	and.w	r3, r3, #12
 8003b98:	2b08      	cmp	r3, #8
 8003b9a:	d112      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x5e>
 8003b9c:	4b8c      	ldr	r3, [pc, #560]	@ (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ba4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ba8:	d10b      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003baa:	4b89      	ldr	r3, [pc, #548]	@ (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d06c      	beq.n	8003c90 <HAL_RCC_OscConfig+0x12c>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d168      	bne.n	8003c90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e24c      	b.n	800405c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bca:	d106      	bne.n	8003bda <HAL_RCC_OscConfig+0x76>
 8003bcc:	4b80      	ldr	r3, [pc, #512]	@ (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a7f      	ldr	r2, [pc, #508]	@ (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003bd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bd6:	6013      	str	r3, [r2, #0]
 8003bd8:	e02e      	b.n	8003c38 <HAL_RCC_OscConfig+0xd4>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10c      	bne.n	8003bfc <HAL_RCC_OscConfig+0x98>
 8003be2:	4b7b      	ldr	r3, [pc, #492]	@ (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a7a      	ldr	r2, [pc, #488]	@ (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003be8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bec:	6013      	str	r3, [r2, #0]
 8003bee:	4b78      	ldr	r3, [pc, #480]	@ (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a77      	ldr	r2, [pc, #476]	@ (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003bf4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bf8:	6013      	str	r3, [r2, #0]
 8003bfa:	e01d      	b.n	8003c38 <HAL_RCC_OscConfig+0xd4>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c04:	d10c      	bne.n	8003c20 <HAL_RCC_OscConfig+0xbc>
 8003c06:	4b72      	ldr	r3, [pc, #456]	@ (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a71      	ldr	r2, [pc, #452]	@ (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003c0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c10:	6013      	str	r3, [r2, #0]
 8003c12:	4b6f      	ldr	r3, [pc, #444]	@ (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a6e      	ldr	r2, [pc, #440]	@ (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003c18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c1c:	6013      	str	r3, [r2, #0]
 8003c1e:	e00b      	b.n	8003c38 <HAL_RCC_OscConfig+0xd4>
 8003c20:	4b6b      	ldr	r3, [pc, #428]	@ (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a6a      	ldr	r2, [pc, #424]	@ (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003c26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c2a:	6013      	str	r3, [r2, #0]
 8003c2c:	4b68      	ldr	r3, [pc, #416]	@ (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a67      	ldr	r2, [pc, #412]	@ (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003c32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c36:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d013      	beq.n	8003c68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c40:	f7fe febc 	bl	80029bc <HAL_GetTick>
 8003c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c46:	e008      	b.n	8003c5a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c48:	f7fe feb8 	bl	80029bc <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	2b64      	cmp	r3, #100	@ 0x64
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e200      	b.n	800405c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c5a:	4b5d      	ldr	r3, [pc, #372]	@ (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d0f0      	beq.n	8003c48 <HAL_RCC_OscConfig+0xe4>
 8003c66:	e014      	b.n	8003c92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c68:	f7fe fea8 	bl	80029bc <HAL_GetTick>
 8003c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c6e:	e008      	b.n	8003c82 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c70:	f7fe fea4 	bl	80029bc <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b64      	cmp	r3, #100	@ 0x64
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e1ec      	b.n	800405c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c82:	4b53      	ldr	r3, [pc, #332]	@ (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1f0      	bne.n	8003c70 <HAL_RCC_OscConfig+0x10c>
 8003c8e:	e000      	b.n	8003c92 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d063      	beq.n	8003d66 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c9e:	4b4c      	ldr	r3, [pc, #304]	@ (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f003 030c 	and.w	r3, r3, #12
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00b      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003caa:	4b49      	ldr	r3, [pc, #292]	@ (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f003 030c 	and.w	r3, r3, #12
 8003cb2:	2b08      	cmp	r3, #8
 8003cb4:	d11c      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x18c>
 8003cb6:	4b46      	ldr	r3, [pc, #280]	@ (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d116      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cc2:	4b43      	ldr	r3, [pc, #268]	@ (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d005      	beq.n	8003cda <HAL_RCC_OscConfig+0x176>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d001      	beq.n	8003cda <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e1c0      	b.n	800405c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cda:	4b3d      	ldr	r3, [pc, #244]	@ (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	695b      	ldr	r3, [r3, #20]
 8003ce6:	00db      	lsls	r3, r3, #3
 8003ce8:	4939      	ldr	r1, [pc, #228]	@ (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cee:	e03a      	b.n	8003d66 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d020      	beq.n	8003d3a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cf8:	4b36      	ldr	r3, [pc, #216]	@ (8003dd4 <HAL_RCC_OscConfig+0x270>)
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cfe:	f7fe fe5d 	bl	80029bc <HAL_GetTick>
 8003d02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d04:	e008      	b.n	8003d18 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d06:	f7fe fe59 	bl	80029bc <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d901      	bls.n	8003d18 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e1a1      	b.n	800405c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d18:	4b2d      	ldr	r3, [pc, #180]	@ (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0302 	and.w	r3, r3, #2
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d0f0      	beq.n	8003d06 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d24:	4b2a      	ldr	r3, [pc, #168]	@ (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	695b      	ldr	r3, [r3, #20]
 8003d30:	00db      	lsls	r3, r3, #3
 8003d32:	4927      	ldr	r1, [pc, #156]	@ (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	600b      	str	r3, [r1, #0]
 8003d38:	e015      	b.n	8003d66 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d3a:	4b26      	ldr	r3, [pc, #152]	@ (8003dd4 <HAL_RCC_OscConfig+0x270>)
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d40:	f7fe fe3c 	bl	80029bc <HAL_GetTick>
 8003d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d46:	e008      	b.n	8003d5a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d48:	f7fe fe38 	bl	80029bc <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d901      	bls.n	8003d5a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e180      	b.n	800405c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d5a:	4b1d      	ldr	r3, [pc, #116]	@ (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1f0      	bne.n	8003d48 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0308 	and.w	r3, r3, #8
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d03a      	beq.n	8003de8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d019      	beq.n	8003dae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d7a:	4b17      	ldr	r3, [pc, #92]	@ (8003dd8 <HAL_RCC_OscConfig+0x274>)
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d80:	f7fe fe1c 	bl	80029bc <HAL_GetTick>
 8003d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d86:	e008      	b.n	8003d9a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d88:	f7fe fe18 	bl	80029bc <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d901      	bls.n	8003d9a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e160      	b.n	800405c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d0f0      	beq.n	8003d88 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003da6:	2001      	movs	r0, #1
 8003da8:	f000 faba 	bl	8004320 <RCC_Delay>
 8003dac:	e01c      	b.n	8003de8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dae:	4b0a      	ldr	r3, [pc, #40]	@ (8003dd8 <HAL_RCC_OscConfig+0x274>)
 8003db0:	2200      	movs	r2, #0
 8003db2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003db4:	f7fe fe02 	bl	80029bc <HAL_GetTick>
 8003db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dba:	e00f      	b.n	8003ddc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dbc:	f7fe fdfe 	bl	80029bc <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d908      	bls.n	8003ddc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e146      	b.n	800405c <HAL_RCC_OscConfig+0x4f8>
 8003dce:	bf00      	nop
 8003dd0:	40021000 	.word	0x40021000
 8003dd4:	42420000 	.word	0x42420000
 8003dd8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ddc:	4b92      	ldr	r3, [pc, #584]	@ (8004028 <HAL_RCC_OscConfig+0x4c4>)
 8003dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de0:	f003 0302 	and.w	r3, r3, #2
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d1e9      	bne.n	8003dbc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0304 	and.w	r3, r3, #4
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	f000 80a6 	beq.w	8003f42 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003df6:	2300      	movs	r3, #0
 8003df8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dfa:	4b8b      	ldr	r3, [pc, #556]	@ (8004028 <HAL_RCC_OscConfig+0x4c4>)
 8003dfc:	69db      	ldr	r3, [r3, #28]
 8003dfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10d      	bne.n	8003e22 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e06:	4b88      	ldr	r3, [pc, #544]	@ (8004028 <HAL_RCC_OscConfig+0x4c4>)
 8003e08:	69db      	ldr	r3, [r3, #28]
 8003e0a:	4a87      	ldr	r2, [pc, #540]	@ (8004028 <HAL_RCC_OscConfig+0x4c4>)
 8003e0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e10:	61d3      	str	r3, [r2, #28]
 8003e12:	4b85      	ldr	r3, [pc, #532]	@ (8004028 <HAL_RCC_OscConfig+0x4c4>)
 8003e14:	69db      	ldr	r3, [r3, #28]
 8003e16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e1a:	60bb      	str	r3, [r7, #8]
 8003e1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e22:	4b82      	ldr	r3, [pc, #520]	@ (800402c <HAL_RCC_OscConfig+0x4c8>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d118      	bne.n	8003e60 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e2e:	4b7f      	ldr	r3, [pc, #508]	@ (800402c <HAL_RCC_OscConfig+0x4c8>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a7e      	ldr	r2, [pc, #504]	@ (800402c <HAL_RCC_OscConfig+0x4c8>)
 8003e34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e3a:	f7fe fdbf 	bl	80029bc <HAL_GetTick>
 8003e3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e40:	e008      	b.n	8003e54 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e42:	f7fe fdbb 	bl	80029bc <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	2b64      	cmp	r3, #100	@ 0x64
 8003e4e:	d901      	bls.n	8003e54 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e103      	b.n	800405c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e54:	4b75      	ldr	r3, [pc, #468]	@ (800402c <HAL_RCC_OscConfig+0x4c8>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d0f0      	beq.n	8003e42 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d106      	bne.n	8003e76 <HAL_RCC_OscConfig+0x312>
 8003e68:	4b6f      	ldr	r3, [pc, #444]	@ (8004028 <HAL_RCC_OscConfig+0x4c4>)
 8003e6a:	6a1b      	ldr	r3, [r3, #32]
 8003e6c:	4a6e      	ldr	r2, [pc, #440]	@ (8004028 <HAL_RCC_OscConfig+0x4c4>)
 8003e6e:	f043 0301 	orr.w	r3, r3, #1
 8003e72:	6213      	str	r3, [r2, #32]
 8003e74:	e02d      	b.n	8003ed2 <HAL_RCC_OscConfig+0x36e>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d10c      	bne.n	8003e98 <HAL_RCC_OscConfig+0x334>
 8003e7e:	4b6a      	ldr	r3, [pc, #424]	@ (8004028 <HAL_RCC_OscConfig+0x4c4>)
 8003e80:	6a1b      	ldr	r3, [r3, #32]
 8003e82:	4a69      	ldr	r2, [pc, #420]	@ (8004028 <HAL_RCC_OscConfig+0x4c4>)
 8003e84:	f023 0301 	bic.w	r3, r3, #1
 8003e88:	6213      	str	r3, [r2, #32]
 8003e8a:	4b67      	ldr	r3, [pc, #412]	@ (8004028 <HAL_RCC_OscConfig+0x4c4>)
 8003e8c:	6a1b      	ldr	r3, [r3, #32]
 8003e8e:	4a66      	ldr	r2, [pc, #408]	@ (8004028 <HAL_RCC_OscConfig+0x4c4>)
 8003e90:	f023 0304 	bic.w	r3, r3, #4
 8003e94:	6213      	str	r3, [r2, #32]
 8003e96:	e01c      	b.n	8003ed2 <HAL_RCC_OscConfig+0x36e>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	2b05      	cmp	r3, #5
 8003e9e:	d10c      	bne.n	8003eba <HAL_RCC_OscConfig+0x356>
 8003ea0:	4b61      	ldr	r3, [pc, #388]	@ (8004028 <HAL_RCC_OscConfig+0x4c4>)
 8003ea2:	6a1b      	ldr	r3, [r3, #32]
 8003ea4:	4a60      	ldr	r2, [pc, #384]	@ (8004028 <HAL_RCC_OscConfig+0x4c4>)
 8003ea6:	f043 0304 	orr.w	r3, r3, #4
 8003eaa:	6213      	str	r3, [r2, #32]
 8003eac:	4b5e      	ldr	r3, [pc, #376]	@ (8004028 <HAL_RCC_OscConfig+0x4c4>)
 8003eae:	6a1b      	ldr	r3, [r3, #32]
 8003eb0:	4a5d      	ldr	r2, [pc, #372]	@ (8004028 <HAL_RCC_OscConfig+0x4c4>)
 8003eb2:	f043 0301 	orr.w	r3, r3, #1
 8003eb6:	6213      	str	r3, [r2, #32]
 8003eb8:	e00b      	b.n	8003ed2 <HAL_RCC_OscConfig+0x36e>
 8003eba:	4b5b      	ldr	r3, [pc, #364]	@ (8004028 <HAL_RCC_OscConfig+0x4c4>)
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	4a5a      	ldr	r2, [pc, #360]	@ (8004028 <HAL_RCC_OscConfig+0x4c4>)
 8003ec0:	f023 0301 	bic.w	r3, r3, #1
 8003ec4:	6213      	str	r3, [r2, #32]
 8003ec6:	4b58      	ldr	r3, [pc, #352]	@ (8004028 <HAL_RCC_OscConfig+0x4c4>)
 8003ec8:	6a1b      	ldr	r3, [r3, #32]
 8003eca:	4a57      	ldr	r2, [pc, #348]	@ (8004028 <HAL_RCC_OscConfig+0x4c4>)
 8003ecc:	f023 0304 	bic.w	r3, r3, #4
 8003ed0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d015      	beq.n	8003f06 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eda:	f7fe fd6f 	bl	80029bc <HAL_GetTick>
 8003ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ee0:	e00a      	b.n	8003ef8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ee2:	f7fe fd6b 	bl	80029bc <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d901      	bls.n	8003ef8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e0b1      	b.n	800405c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ef8:	4b4b      	ldr	r3, [pc, #300]	@ (8004028 <HAL_RCC_OscConfig+0x4c4>)
 8003efa:	6a1b      	ldr	r3, [r3, #32]
 8003efc:	f003 0302 	and.w	r3, r3, #2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d0ee      	beq.n	8003ee2 <HAL_RCC_OscConfig+0x37e>
 8003f04:	e014      	b.n	8003f30 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f06:	f7fe fd59 	bl	80029bc <HAL_GetTick>
 8003f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f0c:	e00a      	b.n	8003f24 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f0e:	f7fe fd55 	bl	80029bc <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d901      	bls.n	8003f24 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e09b      	b.n	800405c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f24:	4b40      	ldr	r3, [pc, #256]	@ (8004028 <HAL_RCC_OscConfig+0x4c4>)
 8003f26:	6a1b      	ldr	r3, [r3, #32]
 8003f28:	f003 0302 	and.w	r3, r3, #2
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d1ee      	bne.n	8003f0e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f30:	7dfb      	ldrb	r3, [r7, #23]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d105      	bne.n	8003f42 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f36:	4b3c      	ldr	r3, [pc, #240]	@ (8004028 <HAL_RCC_OscConfig+0x4c4>)
 8003f38:	69db      	ldr	r3, [r3, #28]
 8003f3a:	4a3b      	ldr	r2, [pc, #236]	@ (8004028 <HAL_RCC_OscConfig+0x4c4>)
 8003f3c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f40:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	69db      	ldr	r3, [r3, #28]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	f000 8087 	beq.w	800405a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f4c:	4b36      	ldr	r3, [pc, #216]	@ (8004028 <HAL_RCC_OscConfig+0x4c4>)
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f003 030c 	and.w	r3, r3, #12
 8003f54:	2b08      	cmp	r3, #8
 8003f56:	d061      	beq.n	800401c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	69db      	ldr	r3, [r3, #28]
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d146      	bne.n	8003fee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f60:	4b33      	ldr	r3, [pc, #204]	@ (8004030 <HAL_RCC_OscConfig+0x4cc>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f66:	f7fe fd29 	bl	80029bc <HAL_GetTick>
 8003f6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f6c:	e008      	b.n	8003f80 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f6e:	f7fe fd25 	bl	80029bc <HAL_GetTick>
 8003f72:	4602      	mov	r2, r0
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d901      	bls.n	8003f80 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	e06d      	b.n	800405c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f80:	4b29      	ldr	r3, [pc, #164]	@ (8004028 <HAL_RCC_OscConfig+0x4c4>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d1f0      	bne.n	8003f6e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a1b      	ldr	r3, [r3, #32]
 8003f90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f94:	d108      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003f96:	4b24      	ldr	r3, [pc, #144]	@ (8004028 <HAL_RCC_OscConfig+0x4c4>)
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	4921      	ldr	r1, [pc, #132]	@ (8004028 <HAL_RCC_OscConfig+0x4c4>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fa8:	4b1f      	ldr	r3, [pc, #124]	@ (8004028 <HAL_RCC_OscConfig+0x4c4>)
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a19      	ldr	r1, [r3, #32]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb8:	430b      	orrs	r3, r1
 8003fba:	491b      	ldr	r1, [pc, #108]	@ (8004028 <HAL_RCC_OscConfig+0x4c4>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fc0:	4b1b      	ldr	r3, [pc, #108]	@ (8004030 <HAL_RCC_OscConfig+0x4cc>)
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc6:	f7fe fcf9 	bl	80029bc <HAL_GetTick>
 8003fca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003fcc:	e008      	b.n	8003fe0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fce:	f7fe fcf5 	bl	80029bc <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d901      	bls.n	8003fe0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e03d      	b.n	800405c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003fe0:	4b11      	ldr	r3, [pc, #68]	@ (8004028 <HAL_RCC_OscConfig+0x4c4>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d0f0      	beq.n	8003fce <HAL_RCC_OscConfig+0x46a>
 8003fec:	e035      	b.n	800405a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fee:	4b10      	ldr	r3, [pc, #64]	@ (8004030 <HAL_RCC_OscConfig+0x4cc>)
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ff4:	f7fe fce2 	bl	80029bc <HAL_GetTick>
 8003ff8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ffa:	e008      	b.n	800400e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ffc:	f7fe fcde 	bl	80029bc <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	2b02      	cmp	r3, #2
 8004008:	d901      	bls.n	800400e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e026      	b.n	800405c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800400e:	4b06      	ldr	r3, [pc, #24]	@ (8004028 <HAL_RCC_OscConfig+0x4c4>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1f0      	bne.n	8003ffc <HAL_RCC_OscConfig+0x498>
 800401a:	e01e      	b.n	800405a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	69db      	ldr	r3, [r3, #28]
 8004020:	2b01      	cmp	r3, #1
 8004022:	d107      	bne.n	8004034 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e019      	b.n	800405c <HAL_RCC_OscConfig+0x4f8>
 8004028:	40021000 	.word	0x40021000
 800402c:	40007000 	.word	0x40007000
 8004030:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004034:	4b0b      	ldr	r3, [pc, #44]	@ (8004064 <HAL_RCC_OscConfig+0x500>)
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a1b      	ldr	r3, [r3, #32]
 8004044:	429a      	cmp	r2, r3
 8004046:	d106      	bne.n	8004056 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004052:	429a      	cmp	r2, r3
 8004054:	d001      	beq.n	800405a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e000      	b.n	800405c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800405a:	2300      	movs	r3, #0
}
 800405c:	4618      	mov	r0, r3
 800405e:	3718      	adds	r7, #24
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	40021000 	.word	0x40021000

08004068 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d101      	bne.n	800407c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e0d0      	b.n	800421e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800407c:	4b6a      	ldr	r3, [pc, #424]	@ (8004228 <HAL_RCC_ClockConfig+0x1c0>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0307 	and.w	r3, r3, #7
 8004084:	683a      	ldr	r2, [r7, #0]
 8004086:	429a      	cmp	r2, r3
 8004088:	d910      	bls.n	80040ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800408a:	4b67      	ldr	r3, [pc, #412]	@ (8004228 <HAL_RCC_ClockConfig+0x1c0>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f023 0207 	bic.w	r2, r3, #7
 8004092:	4965      	ldr	r1, [pc, #404]	@ (8004228 <HAL_RCC_ClockConfig+0x1c0>)
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	4313      	orrs	r3, r2
 8004098:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800409a:	4b63      	ldr	r3, [pc, #396]	@ (8004228 <HAL_RCC_ClockConfig+0x1c0>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0307 	and.w	r3, r3, #7
 80040a2:	683a      	ldr	r2, [r7, #0]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d001      	beq.n	80040ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e0b8      	b.n	800421e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0302 	and.w	r3, r3, #2
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d020      	beq.n	80040fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0304 	and.w	r3, r3, #4
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d005      	beq.n	80040d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040c4:	4b59      	ldr	r3, [pc, #356]	@ (800422c <HAL_RCC_ClockConfig+0x1c4>)
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	4a58      	ldr	r2, [pc, #352]	@ (800422c <HAL_RCC_ClockConfig+0x1c4>)
 80040ca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80040ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0308 	and.w	r3, r3, #8
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d005      	beq.n	80040e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040dc:	4b53      	ldr	r3, [pc, #332]	@ (800422c <HAL_RCC_ClockConfig+0x1c4>)
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	4a52      	ldr	r2, [pc, #328]	@ (800422c <HAL_RCC_ClockConfig+0x1c4>)
 80040e2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80040e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040e8:	4b50      	ldr	r3, [pc, #320]	@ (800422c <HAL_RCC_ClockConfig+0x1c4>)
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	494d      	ldr	r1, [pc, #308]	@ (800422c <HAL_RCC_ClockConfig+0x1c4>)
 80040f6:	4313      	orrs	r3, r2
 80040f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0301 	and.w	r3, r3, #1
 8004102:	2b00      	cmp	r3, #0
 8004104:	d040      	beq.n	8004188 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	2b01      	cmp	r3, #1
 800410c:	d107      	bne.n	800411e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800410e:	4b47      	ldr	r3, [pc, #284]	@ (800422c <HAL_RCC_ClockConfig+0x1c4>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d115      	bne.n	8004146 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e07f      	b.n	800421e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	2b02      	cmp	r3, #2
 8004124:	d107      	bne.n	8004136 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004126:	4b41      	ldr	r3, [pc, #260]	@ (800422c <HAL_RCC_ClockConfig+0x1c4>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d109      	bne.n	8004146 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e073      	b.n	800421e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004136:	4b3d      	ldr	r3, [pc, #244]	@ (800422c <HAL_RCC_ClockConfig+0x1c4>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b00      	cmp	r3, #0
 8004140:	d101      	bne.n	8004146 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e06b      	b.n	800421e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004146:	4b39      	ldr	r3, [pc, #228]	@ (800422c <HAL_RCC_ClockConfig+0x1c4>)
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	f023 0203 	bic.w	r2, r3, #3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	4936      	ldr	r1, [pc, #216]	@ (800422c <HAL_RCC_ClockConfig+0x1c4>)
 8004154:	4313      	orrs	r3, r2
 8004156:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004158:	f7fe fc30 	bl	80029bc <HAL_GetTick>
 800415c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800415e:	e00a      	b.n	8004176 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004160:	f7fe fc2c 	bl	80029bc <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800416e:	4293      	cmp	r3, r2
 8004170:	d901      	bls.n	8004176 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e053      	b.n	800421e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004176:	4b2d      	ldr	r3, [pc, #180]	@ (800422c <HAL_RCC_ClockConfig+0x1c4>)
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f003 020c 	and.w	r2, r3, #12
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	429a      	cmp	r2, r3
 8004186:	d1eb      	bne.n	8004160 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004188:	4b27      	ldr	r3, [pc, #156]	@ (8004228 <HAL_RCC_ClockConfig+0x1c0>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0307 	and.w	r3, r3, #7
 8004190:	683a      	ldr	r2, [r7, #0]
 8004192:	429a      	cmp	r2, r3
 8004194:	d210      	bcs.n	80041b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004196:	4b24      	ldr	r3, [pc, #144]	@ (8004228 <HAL_RCC_ClockConfig+0x1c0>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f023 0207 	bic.w	r2, r3, #7
 800419e:	4922      	ldr	r1, [pc, #136]	@ (8004228 <HAL_RCC_ClockConfig+0x1c0>)
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041a6:	4b20      	ldr	r3, [pc, #128]	@ (8004228 <HAL_RCC_ClockConfig+0x1c0>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0307 	and.w	r3, r3, #7
 80041ae:	683a      	ldr	r2, [r7, #0]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d001      	beq.n	80041b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e032      	b.n	800421e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0304 	and.w	r3, r3, #4
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d008      	beq.n	80041d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041c4:	4b19      	ldr	r3, [pc, #100]	@ (800422c <HAL_RCC_ClockConfig+0x1c4>)
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	4916      	ldr	r1, [pc, #88]	@ (800422c <HAL_RCC_ClockConfig+0x1c4>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0308 	and.w	r3, r3, #8
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d009      	beq.n	80041f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80041e2:	4b12      	ldr	r3, [pc, #72]	@ (800422c <HAL_RCC_ClockConfig+0x1c4>)
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	00db      	lsls	r3, r3, #3
 80041f0:	490e      	ldr	r1, [pc, #56]	@ (800422c <HAL_RCC_ClockConfig+0x1c4>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80041f6:	f000 f821 	bl	800423c <HAL_RCC_GetSysClockFreq>
 80041fa:	4602      	mov	r2, r0
 80041fc:	4b0b      	ldr	r3, [pc, #44]	@ (800422c <HAL_RCC_ClockConfig+0x1c4>)
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	091b      	lsrs	r3, r3, #4
 8004202:	f003 030f 	and.w	r3, r3, #15
 8004206:	490a      	ldr	r1, [pc, #40]	@ (8004230 <HAL_RCC_ClockConfig+0x1c8>)
 8004208:	5ccb      	ldrb	r3, [r1, r3]
 800420a:	fa22 f303 	lsr.w	r3, r2, r3
 800420e:	4a09      	ldr	r2, [pc, #36]	@ (8004234 <HAL_RCC_ClockConfig+0x1cc>)
 8004210:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004212:	4b09      	ldr	r3, [pc, #36]	@ (8004238 <HAL_RCC_ClockConfig+0x1d0>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4618      	mov	r0, r3
 8004218:	f7fe fb8e 	bl	8002938 <HAL_InitTick>

  return HAL_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3710      	adds	r7, #16
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	40022000 	.word	0x40022000
 800422c:	40021000 	.word	0x40021000
 8004230:	08006924 	.word	0x08006924
 8004234:	20000014 	.word	0x20000014
 8004238:	20000018 	.word	0x20000018

0800423c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800423c:	b480      	push	{r7}
 800423e:	b087      	sub	sp, #28
 8004240:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004242:	2300      	movs	r3, #0
 8004244:	60fb      	str	r3, [r7, #12]
 8004246:	2300      	movs	r3, #0
 8004248:	60bb      	str	r3, [r7, #8]
 800424a:	2300      	movs	r3, #0
 800424c:	617b      	str	r3, [r7, #20]
 800424e:	2300      	movs	r3, #0
 8004250:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004252:	2300      	movs	r3, #0
 8004254:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004256:	4b1e      	ldr	r3, [pc, #120]	@ (80042d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f003 030c 	and.w	r3, r3, #12
 8004262:	2b04      	cmp	r3, #4
 8004264:	d002      	beq.n	800426c <HAL_RCC_GetSysClockFreq+0x30>
 8004266:	2b08      	cmp	r3, #8
 8004268:	d003      	beq.n	8004272 <HAL_RCC_GetSysClockFreq+0x36>
 800426a:	e027      	b.n	80042bc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800426c:	4b19      	ldr	r3, [pc, #100]	@ (80042d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800426e:	613b      	str	r3, [r7, #16]
      break;
 8004270:	e027      	b.n	80042c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	0c9b      	lsrs	r3, r3, #18
 8004276:	f003 030f 	and.w	r3, r3, #15
 800427a:	4a17      	ldr	r2, [pc, #92]	@ (80042d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800427c:	5cd3      	ldrb	r3, [r2, r3]
 800427e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d010      	beq.n	80042ac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800428a:	4b11      	ldr	r3, [pc, #68]	@ (80042d0 <HAL_RCC_GetSysClockFreq+0x94>)
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	0c5b      	lsrs	r3, r3, #17
 8004290:	f003 0301 	and.w	r3, r3, #1
 8004294:	4a11      	ldr	r2, [pc, #68]	@ (80042dc <HAL_RCC_GetSysClockFreq+0xa0>)
 8004296:	5cd3      	ldrb	r3, [r2, r3]
 8004298:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a0d      	ldr	r2, [pc, #52]	@ (80042d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800429e:	fb03 f202 	mul.w	r2, r3, r2
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a8:	617b      	str	r3, [r7, #20]
 80042aa:	e004      	b.n	80042b6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a0c      	ldr	r2, [pc, #48]	@ (80042e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80042b0:	fb02 f303 	mul.w	r3, r2, r3
 80042b4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	613b      	str	r3, [r7, #16]
      break;
 80042ba:	e002      	b.n	80042c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80042bc:	4b05      	ldr	r3, [pc, #20]	@ (80042d4 <HAL_RCC_GetSysClockFreq+0x98>)
 80042be:	613b      	str	r3, [r7, #16]
      break;
 80042c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042c2:	693b      	ldr	r3, [r7, #16]
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	371c      	adds	r7, #28
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bc80      	pop	{r7}
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	40021000 	.word	0x40021000
 80042d4:	007a1200 	.word	0x007a1200
 80042d8:	0800d1a8 	.word	0x0800d1a8
 80042dc:	0800d1b8 	.word	0x0800d1b8
 80042e0:	003d0900 	.word	0x003d0900

080042e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042e4:	b480      	push	{r7}
 80042e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042e8:	4b02      	ldr	r3, [pc, #8]	@ (80042f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80042ea:	681b      	ldr	r3, [r3, #0]
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bc80      	pop	{r7}
 80042f2:	4770      	bx	lr
 80042f4:	20000014 	.word	0x20000014

080042f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80042fc:	f7ff fff2 	bl	80042e4 <HAL_RCC_GetHCLKFreq>
 8004300:	4602      	mov	r2, r0
 8004302:	4b05      	ldr	r3, [pc, #20]	@ (8004318 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	0a1b      	lsrs	r3, r3, #8
 8004308:	f003 0307 	and.w	r3, r3, #7
 800430c:	4903      	ldr	r1, [pc, #12]	@ (800431c <HAL_RCC_GetPCLK1Freq+0x24>)
 800430e:	5ccb      	ldrb	r3, [r1, r3]
 8004310:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004314:	4618      	mov	r0, r3
 8004316:	bd80      	pop	{r7, pc}
 8004318:	40021000 	.word	0x40021000
 800431c:	08006934 	.word	0x08006934

08004320 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004320:	b480      	push	{r7}
 8004322:	b085      	sub	sp, #20
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004328:	4b0a      	ldr	r3, [pc, #40]	@ (8004354 <RCC_Delay+0x34>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a0a      	ldr	r2, [pc, #40]	@ (8004358 <RCC_Delay+0x38>)
 800432e:	fba2 2303 	umull	r2, r3, r2, r3
 8004332:	0a5b      	lsrs	r3, r3, #9
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	fb02 f303 	mul.w	r3, r2, r3
 800433a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800433c:	bf00      	nop
  }
  while (Delay --);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	1e5a      	subs	r2, r3, #1
 8004342:	60fa      	str	r2, [r7, #12]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d1f9      	bne.n	800433c <RCC_Delay+0x1c>
}
 8004348:	bf00      	nop
 800434a:	bf00      	nop
 800434c:	3714      	adds	r7, #20
 800434e:	46bd      	mov	sp, r7
 8004350:	bc80      	pop	{r7}
 8004352:	4770      	bx	lr
 8004354:	20000014 	.word	0x20000014
 8004358:	10624dd3 	.word	0x10624dd3

0800435c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d101      	bne.n	800436e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e076      	b.n	800445c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004372:	2b00      	cmp	r3, #0
 8004374:	d108      	bne.n	8004388 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800437e:	d009      	beq.n	8004394 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	61da      	str	r2, [r3, #28]
 8004386:	e005      	b.n	8004394 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d106      	bne.n	80043b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f7fd ff96 	bl	80022e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2202      	movs	r2, #2
 80043b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80043ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80043dc:	431a      	orrs	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043e6:	431a      	orrs	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	691b      	ldr	r3, [r3, #16]
 80043ec:	f003 0302 	and.w	r3, r3, #2
 80043f0:	431a      	orrs	r2, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	f003 0301 	and.w	r3, r3, #1
 80043fa:	431a      	orrs	r2, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	699b      	ldr	r3, [r3, #24]
 8004400:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004404:	431a      	orrs	r2, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	69db      	ldr	r3, [r3, #28]
 800440a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800440e:	431a      	orrs	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6a1b      	ldr	r3, [r3, #32]
 8004414:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004418:	ea42 0103 	orr.w	r1, r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004420:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	430a      	orrs	r2, r1
 800442a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	699b      	ldr	r3, [r3, #24]
 8004430:	0c1a      	lsrs	r2, r3, #16
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f002 0204 	and.w	r2, r2, #4
 800443a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	69da      	ldr	r2, [r3, #28]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800444a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2201      	movs	r2, #1
 8004456:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800445a:	2300      	movs	r3, #0
}
 800445c:	4618      	mov	r0, r3
 800445e:	3708      	adds	r7, #8
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b086      	sub	sp, #24
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d101      	bne.n	8004478 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e093      	b.n	80045a0 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800447e:	b2db      	uxtb	r3, r3
 8004480:	2b00      	cmp	r3, #0
 8004482:	d106      	bne.n	8004492 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f7fe f86b 	bl	8002568 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2202      	movs	r2, #2
 8004496:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	6812      	ldr	r2, [r2, #0]
 80044a4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80044a8:	f023 0307 	bic.w	r3, r3, #7
 80044ac:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	3304      	adds	r3, #4
 80044b6:	4619      	mov	r1, r3
 80044b8:	4610      	mov	r0, r2
 80044ba:	f000 f903 	bl	80046c4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	699b      	ldr	r3, [r3, #24]
 80044cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	6a1b      	ldr	r3, [r3, #32]
 80044d4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	697a      	ldr	r2, [r7, #20]
 80044dc:	4313      	orrs	r3, r2
 80044de:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044e6:	f023 0303 	bic.w	r3, r3, #3
 80044ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	689a      	ldr	r2, [r3, #8]
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	021b      	lsls	r3, r3, #8
 80044f6:	4313      	orrs	r3, r2
 80044f8:	693a      	ldr	r2, [r7, #16]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004504:	f023 030c 	bic.w	r3, r3, #12
 8004508:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004510:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004514:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	68da      	ldr	r2, [r3, #12]
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	69db      	ldr	r3, [r3, #28]
 800451e:	021b      	lsls	r3, r3, #8
 8004520:	4313      	orrs	r3, r2
 8004522:	693a      	ldr	r2, [r7, #16]
 8004524:	4313      	orrs	r3, r2
 8004526:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	011a      	lsls	r2, r3, #4
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	6a1b      	ldr	r3, [r3, #32]
 8004532:	031b      	lsls	r3, r3, #12
 8004534:	4313      	orrs	r3, r2
 8004536:	693a      	ldr	r2, [r7, #16]
 8004538:	4313      	orrs	r3, r2
 800453a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004542:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	685a      	ldr	r2, [r3, #4]
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	695b      	ldr	r3, [r3, #20]
 800454c:	011b      	lsls	r3, r3, #4
 800454e:	4313      	orrs	r3, r2
 8004550:	68fa      	ldr	r2, [r7, #12]
 8004552:	4313      	orrs	r3, r2
 8004554:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	693a      	ldr	r2, [r7, #16]
 8004564:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2201      	movs	r2, #1
 8004572:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2201      	movs	r2, #1
 800457a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2201      	movs	r2, #1
 8004582:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2201      	movs	r2, #1
 800458a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2201      	movs	r2, #1
 8004592:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2201      	movs	r2, #1
 800459a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800459e:	2300      	movs	r3, #0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3718      	adds	r7, #24
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80045b8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80045c0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80045c8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80045d0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d110      	bne.n	80045fa <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80045d8:	7bfb      	ldrb	r3, [r7, #15]
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d102      	bne.n	80045e4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80045de:	7b7b      	ldrb	r3, [r7, #13]
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d001      	beq.n	80045e8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e069      	b.n	80046bc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2202      	movs	r2, #2
 80045ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2202      	movs	r2, #2
 80045f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045f8:	e031      	b.n	800465e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	2b04      	cmp	r3, #4
 80045fe:	d110      	bne.n	8004622 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004600:	7bbb      	ldrb	r3, [r7, #14]
 8004602:	2b01      	cmp	r3, #1
 8004604:	d102      	bne.n	800460c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004606:	7b3b      	ldrb	r3, [r7, #12]
 8004608:	2b01      	cmp	r3, #1
 800460a:	d001      	beq.n	8004610 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e055      	b.n	80046bc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2202      	movs	r2, #2
 8004614:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2202      	movs	r2, #2
 800461c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004620:	e01d      	b.n	800465e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004622:	7bfb      	ldrb	r3, [r7, #15]
 8004624:	2b01      	cmp	r3, #1
 8004626:	d108      	bne.n	800463a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004628:	7bbb      	ldrb	r3, [r7, #14]
 800462a:	2b01      	cmp	r3, #1
 800462c:	d105      	bne.n	800463a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800462e:	7b7b      	ldrb	r3, [r7, #13]
 8004630:	2b01      	cmp	r3, #1
 8004632:	d102      	bne.n	800463a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004634:	7b3b      	ldrb	r3, [r7, #12]
 8004636:	2b01      	cmp	r3, #1
 8004638:	d001      	beq.n	800463e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e03e      	b.n	80046bc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2202      	movs	r2, #2
 8004642:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2202      	movs	r2, #2
 800464a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2202      	movs	r2, #2
 8004652:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2202      	movs	r2, #2
 800465a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d003      	beq.n	800466c <HAL_TIM_Encoder_Start+0xc4>
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	2b04      	cmp	r3, #4
 8004668:	d008      	beq.n	800467c <HAL_TIM_Encoder_Start+0xd4>
 800466a:	e00f      	b.n	800468c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2201      	movs	r2, #1
 8004672:	2100      	movs	r1, #0
 8004674:	4618      	mov	r0, r3
 8004676:	f000 f893 	bl	80047a0 <TIM_CCxChannelCmd>
      break;
 800467a:	e016      	b.n	80046aa <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2201      	movs	r2, #1
 8004682:	2104      	movs	r1, #4
 8004684:	4618      	mov	r0, r3
 8004686:	f000 f88b 	bl	80047a0 <TIM_CCxChannelCmd>
      break;
 800468a:	e00e      	b.n	80046aa <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2201      	movs	r2, #1
 8004692:	2100      	movs	r1, #0
 8004694:	4618      	mov	r0, r3
 8004696:	f000 f883 	bl	80047a0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2201      	movs	r2, #1
 80046a0:	2104      	movs	r1, #4
 80046a2:	4618      	mov	r0, r3
 80046a4:	f000 f87c 	bl	80047a0 <TIM_CCxChannelCmd>
      break;
 80046a8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f042 0201 	orr.w	r2, r2, #1
 80046b8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80046ba:	2300      	movs	r3, #0
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3710      	adds	r7, #16
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b085      	sub	sp, #20
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4a2f      	ldr	r2, [pc, #188]	@ (8004794 <TIM_Base_SetConfig+0xd0>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d00b      	beq.n	80046f4 <TIM_Base_SetConfig+0x30>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046e2:	d007      	beq.n	80046f4 <TIM_Base_SetConfig+0x30>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4a2c      	ldr	r2, [pc, #176]	@ (8004798 <TIM_Base_SetConfig+0xd4>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d003      	beq.n	80046f4 <TIM_Base_SetConfig+0x30>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4a2b      	ldr	r2, [pc, #172]	@ (800479c <TIM_Base_SetConfig+0xd8>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d108      	bne.n	8004706 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	68fa      	ldr	r2, [r7, #12]
 8004702:	4313      	orrs	r3, r2
 8004704:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a22      	ldr	r2, [pc, #136]	@ (8004794 <TIM_Base_SetConfig+0xd0>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d00b      	beq.n	8004726 <TIM_Base_SetConfig+0x62>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004714:	d007      	beq.n	8004726 <TIM_Base_SetConfig+0x62>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a1f      	ldr	r2, [pc, #124]	@ (8004798 <TIM_Base_SetConfig+0xd4>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d003      	beq.n	8004726 <TIM_Base_SetConfig+0x62>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a1e      	ldr	r2, [pc, #120]	@ (800479c <TIM_Base_SetConfig+0xd8>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d108      	bne.n	8004738 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800472c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	4313      	orrs	r3, r2
 8004736:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	4313      	orrs	r3, r2
 8004744:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	689a      	ldr	r2, [r3, #8]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a0d      	ldr	r2, [pc, #52]	@ (8004794 <TIM_Base_SetConfig+0xd0>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d103      	bne.n	800476c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	691a      	ldr	r2, [r3, #16]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	f003 0301 	and.w	r3, r3, #1
 800477a:	2b00      	cmp	r3, #0
 800477c:	d005      	beq.n	800478a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	f023 0201 	bic.w	r2, r3, #1
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	611a      	str	r2, [r3, #16]
  }
}
 800478a:	bf00      	nop
 800478c:	3714      	adds	r7, #20
 800478e:	46bd      	mov	sp, r7
 8004790:	bc80      	pop	{r7}
 8004792:	4770      	bx	lr
 8004794:	40012c00 	.word	0x40012c00
 8004798:	40000400 	.word	0x40000400
 800479c:	40000800 	.word	0x40000800

080047a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b087      	sub	sp, #28
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	f003 031f 	and.w	r3, r3, #31
 80047b2:	2201      	movs	r2, #1
 80047b4:	fa02 f303 	lsl.w	r3, r2, r3
 80047b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6a1a      	ldr	r2, [r3, #32]
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	43db      	mvns	r3, r3
 80047c2:	401a      	ands	r2, r3
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6a1a      	ldr	r2, [r3, #32]
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	f003 031f 	and.w	r3, r3, #31
 80047d2:	6879      	ldr	r1, [r7, #4]
 80047d4:	fa01 f303 	lsl.w	r3, r1, r3
 80047d8:	431a      	orrs	r2, r3
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	621a      	str	r2, [r3, #32]
}
 80047de:	bf00      	nop
 80047e0:	371c      	adds	r7, #28
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bc80      	pop	{r7}
 80047e6:	4770      	bx	lr

080047e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b085      	sub	sp, #20
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d101      	bne.n	8004800 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047fc:	2302      	movs	r3, #2
 80047fe:	e046      	b.n	800488e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2202      	movs	r2, #2
 800480c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004826:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	4313      	orrs	r3, r2
 8004830:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a16      	ldr	r2, [pc, #88]	@ (8004898 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d00e      	beq.n	8004862 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800484c:	d009      	beq.n	8004862 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a12      	ldr	r2, [pc, #72]	@ (800489c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d004      	beq.n	8004862 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a10      	ldr	r2, [pc, #64]	@ (80048a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d10c      	bne.n	800487c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004868:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	68ba      	ldr	r2, [r7, #8]
 8004870:	4313      	orrs	r3, r2
 8004872:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68ba      	ldr	r2, [r7, #8]
 800487a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	3714      	adds	r7, #20
 8004892:	46bd      	mov	sp, r7
 8004894:	bc80      	pop	{r7}
 8004896:	4770      	bx	lr
 8004898:	40012c00 	.word	0x40012c00
 800489c:	40000400 	.word	0x40000400
 80048a0:	40000800 	.word	0x40000800

080048a4 <siprintf>:
 80048a4:	b40e      	push	{r1, r2, r3}
 80048a6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80048aa:	b510      	push	{r4, lr}
 80048ac:	2400      	movs	r4, #0
 80048ae:	b09d      	sub	sp, #116	@ 0x74
 80048b0:	ab1f      	add	r3, sp, #124	@ 0x7c
 80048b2:	9002      	str	r0, [sp, #8]
 80048b4:	9006      	str	r0, [sp, #24]
 80048b6:	9107      	str	r1, [sp, #28]
 80048b8:	9104      	str	r1, [sp, #16]
 80048ba:	4809      	ldr	r0, [pc, #36]	@ (80048e0 <siprintf+0x3c>)
 80048bc:	4909      	ldr	r1, [pc, #36]	@ (80048e4 <siprintf+0x40>)
 80048be:	f853 2b04 	ldr.w	r2, [r3], #4
 80048c2:	9105      	str	r1, [sp, #20]
 80048c4:	6800      	ldr	r0, [r0, #0]
 80048c6:	a902      	add	r1, sp, #8
 80048c8:	9301      	str	r3, [sp, #4]
 80048ca:	941b      	str	r4, [sp, #108]	@ 0x6c
 80048cc:	f000 f9a0 	bl	8004c10 <_svfiprintf_r>
 80048d0:	9b02      	ldr	r3, [sp, #8]
 80048d2:	701c      	strb	r4, [r3, #0]
 80048d4:	b01d      	add	sp, #116	@ 0x74
 80048d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048da:	b003      	add	sp, #12
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	20000020 	.word	0x20000020
 80048e4:	ffff0208 	.word	0xffff0208

080048e8 <memset>:
 80048e8:	4603      	mov	r3, r0
 80048ea:	4402      	add	r2, r0
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d100      	bne.n	80048f2 <memset+0xa>
 80048f0:	4770      	bx	lr
 80048f2:	f803 1b01 	strb.w	r1, [r3], #1
 80048f6:	e7f9      	b.n	80048ec <memset+0x4>

080048f8 <__errno>:
 80048f8:	4b01      	ldr	r3, [pc, #4]	@ (8004900 <__errno+0x8>)
 80048fa:	6818      	ldr	r0, [r3, #0]
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop
 8004900:	20000020 	.word	0x20000020

08004904 <__libc_init_array>:
 8004904:	b570      	push	{r4, r5, r6, lr}
 8004906:	2600      	movs	r6, #0
 8004908:	4d0c      	ldr	r5, [pc, #48]	@ (800493c <__libc_init_array+0x38>)
 800490a:	4c0d      	ldr	r4, [pc, #52]	@ (8004940 <__libc_init_array+0x3c>)
 800490c:	1b64      	subs	r4, r4, r5
 800490e:	10a4      	asrs	r4, r4, #2
 8004910:	42a6      	cmp	r6, r4
 8004912:	d109      	bne.n	8004928 <__libc_init_array+0x24>
 8004914:	f001 fed2 	bl	80066bc <_init>
 8004918:	2600      	movs	r6, #0
 800491a:	4d0a      	ldr	r5, [pc, #40]	@ (8004944 <__libc_init_array+0x40>)
 800491c:	4c0a      	ldr	r4, [pc, #40]	@ (8004948 <__libc_init_array+0x44>)
 800491e:	1b64      	subs	r4, r4, r5
 8004920:	10a4      	asrs	r4, r4, #2
 8004922:	42a6      	cmp	r6, r4
 8004924:	d105      	bne.n	8004932 <__libc_init_array+0x2e>
 8004926:	bd70      	pop	{r4, r5, r6, pc}
 8004928:	f855 3b04 	ldr.w	r3, [r5], #4
 800492c:	4798      	blx	r3
 800492e:	3601      	adds	r6, #1
 8004930:	e7ee      	b.n	8004910 <__libc_init_array+0xc>
 8004932:	f855 3b04 	ldr.w	r3, [r5], #4
 8004936:	4798      	blx	r3
 8004938:	3601      	adds	r6, #1
 800493a:	e7f2      	b.n	8004922 <__libc_init_array+0x1e>
 800493c:	0800d5e0 	.word	0x0800d5e0
 8004940:	0800d5e0 	.word	0x0800d5e0
 8004944:	0800d5e0 	.word	0x0800d5e0
 8004948:	0800d5e4 	.word	0x0800d5e4

0800494c <__retarget_lock_acquire_recursive>:
 800494c:	4770      	bx	lr

0800494e <__retarget_lock_release_recursive>:
 800494e:	4770      	bx	lr

08004950 <memcpy>:
 8004950:	440a      	add	r2, r1
 8004952:	4291      	cmp	r1, r2
 8004954:	f100 33ff 	add.w	r3, r0, #4294967295
 8004958:	d100      	bne.n	800495c <memcpy+0xc>
 800495a:	4770      	bx	lr
 800495c:	b510      	push	{r4, lr}
 800495e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004962:	4291      	cmp	r1, r2
 8004964:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004968:	d1f9      	bne.n	800495e <memcpy+0xe>
 800496a:	bd10      	pop	{r4, pc}

0800496c <_free_r>:
 800496c:	b538      	push	{r3, r4, r5, lr}
 800496e:	4605      	mov	r5, r0
 8004970:	2900      	cmp	r1, #0
 8004972:	d040      	beq.n	80049f6 <_free_r+0x8a>
 8004974:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004978:	1f0c      	subs	r4, r1, #4
 800497a:	2b00      	cmp	r3, #0
 800497c:	bfb8      	it	lt
 800497e:	18e4      	addlt	r4, r4, r3
 8004980:	f000 f8de 	bl	8004b40 <__malloc_lock>
 8004984:	4a1c      	ldr	r2, [pc, #112]	@ (80049f8 <_free_r+0x8c>)
 8004986:	6813      	ldr	r3, [r2, #0]
 8004988:	b933      	cbnz	r3, 8004998 <_free_r+0x2c>
 800498a:	6063      	str	r3, [r4, #4]
 800498c:	6014      	str	r4, [r2, #0]
 800498e:	4628      	mov	r0, r5
 8004990:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004994:	f000 b8da 	b.w	8004b4c <__malloc_unlock>
 8004998:	42a3      	cmp	r3, r4
 800499a:	d908      	bls.n	80049ae <_free_r+0x42>
 800499c:	6820      	ldr	r0, [r4, #0]
 800499e:	1821      	adds	r1, r4, r0
 80049a0:	428b      	cmp	r3, r1
 80049a2:	bf01      	itttt	eq
 80049a4:	6819      	ldreq	r1, [r3, #0]
 80049a6:	685b      	ldreq	r3, [r3, #4]
 80049a8:	1809      	addeq	r1, r1, r0
 80049aa:	6021      	streq	r1, [r4, #0]
 80049ac:	e7ed      	b.n	800498a <_free_r+0x1e>
 80049ae:	461a      	mov	r2, r3
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	b10b      	cbz	r3, 80049b8 <_free_r+0x4c>
 80049b4:	42a3      	cmp	r3, r4
 80049b6:	d9fa      	bls.n	80049ae <_free_r+0x42>
 80049b8:	6811      	ldr	r1, [r2, #0]
 80049ba:	1850      	adds	r0, r2, r1
 80049bc:	42a0      	cmp	r0, r4
 80049be:	d10b      	bne.n	80049d8 <_free_r+0x6c>
 80049c0:	6820      	ldr	r0, [r4, #0]
 80049c2:	4401      	add	r1, r0
 80049c4:	1850      	adds	r0, r2, r1
 80049c6:	4283      	cmp	r3, r0
 80049c8:	6011      	str	r1, [r2, #0]
 80049ca:	d1e0      	bne.n	800498e <_free_r+0x22>
 80049cc:	6818      	ldr	r0, [r3, #0]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	4408      	add	r0, r1
 80049d2:	6010      	str	r0, [r2, #0]
 80049d4:	6053      	str	r3, [r2, #4]
 80049d6:	e7da      	b.n	800498e <_free_r+0x22>
 80049d8:	d902      	bls.n	80049e0 <_free_r+0x74>
 80049da:	230c      	movs	r3, #12
 80049dc:	602b      	str	r3, [r5, #0]
 80049de:	e7d6      	b.n	800498e <_free_r+0x22>
 80049e0:	6820      	ldr	r0, [r4, #0]
 80049e2:	1821      	adds	r1, r4, r0
 80049e4:	428b      	cmp	r3, r1
 80049e6:	bf01      	itttt	eq
 80049e8:	6819      	ldreq	r1, [r3, #0]
 80049ea:	685b      	ldreq	r3, [r3, #4]
 80049ec:	1809      	addeq	r1, r1, r0
 80049ee:	6021      	streq	r1, [r4, #0]
 80049f0:	6063      	str	r3, [r4, #4]
 80049f2:	6054      	str	r4, [r2, #4]
 80049f4:	e7cb      	b.n	800498e <_free_r+0x22>
 80049f6:	bd38      	pop	{r3, r4, r5, pc}
 80049f8:	20003ed8 	.word	0x20003ed8

080049fc <sbrk_aligned>:
 80049fc:	b570      	push	{r4, r5, r6, lr}
 80049fe:	4e0f      	ldr	r6, [pc, #60]	@ (8004a3c <sbrk_aligned+0x40>)
 8004a00:	460c      	mov	r4, r1
 8004a02:	6831      	ldr	r1, [r6, #0]
 8004a04:	4605      	mov	r5, r0
 8004a06:	b911      	cbnz	r1, 8004a0e <sbrk_aligned+0x12>
 8004a08:	f000 fba8 	bl	800515c <_sbrk_r>
 8004a0c:	6030      	str	r0, [r6, #0]
 8004a0e:	4621      	mov	r1, r4
 8004a10:	4628      	mov	r0, r5
 8004a12:	f000 fba3 	bl	800515c <_sbrk_r>
 8004a16:	1c43      	adds	r3, r0, #1
 8004a18:	d103      	bne.n	8004a22 <sbrk_aligned+0x26>
 8004a1a:	f04f 34ff 	mov.w	r4, #4294967295
 8004a1e:	4620      	mov	r0, r4
 8004a20:	bd70      	pop	{r4, r5, r6, pc}
 8004a22:	1cc4      	adds	r4, r0, #3
 8004a24:	f024 0403 	bic.w	r4, r4, #3
 8004a28:	42a0      	cmp	r0, r4
 8004a2a:	d0f8      	beq.n	8004a1e <sbrk_aligned+0x22>
 8004a2c:	1a21      	subs	r1, r4, r0
 8004a2e:	4628      	mov	r0, r5
 8004a30:	f000 fb94 	bl	800515c <_sbrk_r>
 8004a34:	3001      	adds	r0, #1
 8004a36:	d1f2      	bne.n	8004a1e <sbrk_aligned+0x22>
 8004a38:	e7ef      	b.n	8004a1a <sbrk_aligned+0x1e>
 8004a3a:	bf00      	nop
 8004a3c:	20003ed4 	.word	0x20003ed4

08004a40 <_malloc_r>:
 8004a40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a44:	1ccd      	adds	r5, r1, #3
 8004a46:	f025 0503 	bic.w	r5, r5, #3
 8004a4a:	3508      	adds	r5, #8
 8004a4c:	2d0c      	cmp	r5, #12
 8004a4e:	bf38      	it	cc
 8004a50:	250c      	movcc	r5, #12
 8004a52:	2d00      	cmp	r5, #0
 8004a54:	4606      	mov	r6, r0
 8004a56:	db01      	blt.n	8004a5c <_malloc_r+0x1c>
 8004a58:	42a9      	cmp	r1, r5
 8004a5a:	d904      	bls.n	8004a66 <_malloc_r+0x26>
 8004a5c:	230c      	movs	r3, #12
 8004a5e:	6033      	str	r3, [r6, #0]
 8004a60:	2000      	movs	r0, #0
 8004a62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004b3c <_malloc_r+0xfc>
 8004a6a:	f000 f869 	bl	8004b40 <__malloc_lock>
 8004a6e:	f8d8 3000 	ldr.w	r3, [r8]
 8004a72:	461c      	mov	r4, r3
 8004a74:	bb44      	cbnz	r4, 8004ac8 <_malloc_r+0x88>
 8004a76:	4629      	mov	r1, r5
 8004a78:	4630      	mov	r0, r6
 8004a7a:	f7ff ffbf 	bl	80049fc <sbrk_aligned>
 8004a7e:	1c43      	adds	r3, r0, #1
 8004a80:	4604      	mov	r4, r0
 8004a82:	d158      	bne.n	8004b36 <_malloc_r+0xf6>
 8004a84:	f8d8 4000 	ldr.w	r4, [r8]
 8004a88:	4627      	mov	r7, r4
 8004a8a:	2f00      	cmp	r7, #0
 8004a8c:	d143      	bne.n	8004b16 <_malloc_r+0xd6>
 8004a8e:	2c00      	cmp	r4, #0
 8004a90:	d04b      	beq.n	8004b2a <_malloc_r+0xea>
 8004a92:	6823      	ldr	r3, [r4, #0]
 8004a94:	4639      	mov	r1, r7
 8004a96:	4630      	mov	r0, r6
 8004a98:	eb04 0903 	add.w	r9, r4, r3
 8004a9c:	f000 fb5e 	bl	800515c <_sbrk_r>
 8004aa0:	4581      	cmp	r9, r0
 8004aa2:	d142      	bne.n	8004b2a <_malloc_r+0xea>
 8004aa4:	6821      	ldr	r1, [r4, #0]
 8004aa6:	4630      	mov	r0, r6
 8004aa8:	1a6d      	subs	r5, r5, r1
 8004aaa:	4629      	mov	r1, r5
 8004aac:	f7ff ffa6 	bl	80049fc <sbrk_aligned>
 8004ab0:	3001      	adds	r0, #1
 8004ab2:	d03a      	beq.n	8004b2a <_malloc_r+0xea>
 8004ab4:	6823      	ldr	r3, [r4, #0]
 8004ab6:	442b      	add	r3, r5
 8004ab8:	6023      	str	r3, [r4, #0]
 8004aba:	f8d8 3000 	ldr.w	r3, [r8]
 8004abe:	685a      	ldr	r2, [r3, #4]
 8004ac0:	bb62      	cbnz	r2, 8004b1c <_malloc_r+0xdc>
 8004ac2:	f8c8 7000 	str.w	r7, [r8]
 8004ac6:	e00f      	b.n	8004ae8 <_malloc_r+0xa8>
 8004ac8:	6822      	ldr	r2, [r4, #0]
 8004aca:	1b52      	subs	r2, r2, r5
 8004acc:	d420      	bmi.n	8004b10 <_malloc_r+0xd0>
 8004ace:	2a0b      	cmp	r2, #11
 8004ad0:	d917      	bls.n	8004b02 <_malloc_r+0xc2>
 8004ad2:	1961      	adds	r1, r4, r5
 8004ad4:	42a3      	cmp	r3, r4
 8004ad6:	6025      	str	r5, [r4, #0]
 8004ad8:	bf18      	it	ne
 8004ada:	6059      	strne	r1, [r3, #4]
 8004adc:	6863      	ldr	r3, [r4, #4]
 8004ade:	bf08      	it	eq
 8004ae0:	f8c8 1000 	streq.w	r1, [r8]
 8004ae4:	5162      	str	r2, [r4, r5]
 8004ae6:	604b      	str	r3, [r1, #4]
 8004ae8:	4630      	mov	r0, r6
 8004aea:	f000 f82f 	bl	8004b4c <__malloc_unlock>
 8004aee:	f104 000b 	add.w	r0, r4, #11
 8004af2:	1d23      	adds	r3, r4, #4
 8004af4:	f020 0007 	bic.w	r0, r0, #7
 8004af8:	1ac2      	subs	r2, r0, r3
 8004afa:	bf1c      	itt	ne
 8004afc:	1a1b      	subne	r3, r3, r0
 8004afe:	50a3      	strne	r3, [r4, r2]
 8004b00:	e7af      	b.n	8004a62 <_malloc_r+0x22>
 8004b02:	6862      	ldr	r2, [r4, #4]
 8004b04:	42a3      	cmp	r3, r4
 8004b06:	bf0c      	ite	eq
 8004b08:	f8c8 2000 	streq.w	r2, [r8]
 8004b0c:	605a      	strne	r2, [r3, #4]
 8004b0e:	e7eb      	b.n	8004ae8 <_malloc_r+0xa8>
 8004b10:	4623      	mov	r3, r4
 8004b12:	6864      	ldr	r4, [r4, #4]
 8004b14:	e7ae      	b.n	8004a74 <_malloc_r+0x34>
 8004b16:	463c      	mov	r4, r7
 8004b18:	687f      	ldr	r7, [r7, #4]
 8004b1a:	e7b6      	b.n	8004a8a <_malloc_r+0x4a>
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	42a3      	cmp	r3, r4
 8004b22:	d1fb      	bne.n	8004b1c <_malloc_r+0xdc>
 8004b24:	2300      	movs	r3, #0
 8004b26:	6053      	str	r3, [r2, #4]
 8004b28:	e7de      	b.n	8004ae8 <_malloc_r+0xa8>
 8004b2a:	230c      	movs	r3, #12
 8004b2c:	4630      	mov	r0, r6
 8004b2e:	6033      	str	r3, [r6, #0]
 8004b30:	f000 f80c 	bl	8004b4c <__malloc_unlock>
 8004b34:	e794      	b.n	8004a60 <_malloc_r+0x20>
 8004b36:	6005      	str	r5, [r0, #0]
 8004b38:	e7d6      	b.n	8004ae8 <_malloc_r+0xa8>
 8004b3a:	bf00      	nop
 8004b3c:	20003ed8 	.word	0x20003ed8

08004b40 <__malloc_lock>:
 8004b40:	4801      	ldr	r0, [pc, #4]	@ (8004b48 <__malloc_lock+0x8>)
 8004b42:	f7ff bf03 	b.w	800494c <__retarget_lock_acquire_recursive>
 8004b46:	bf00      	nop
 8004b48:	20003ed0 	.word	0x20003ed0

08004b4c <__malloc_unlock>:
 8004b4c:	4801      	ldr	r0, [pc, #4]	@ (8004b54 <__malloc_unlock+0x8>)
 8004b4e:	f7ff befe 	b.w	800494e <__retarget_lock_release_recursive>
 8004b52:	bf00      	nop
 8004b54:	20003ed0 	.word	0x20003ed0

08004b58 <__ssputs_r>:
 8004b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b5c:	461f      	mov	r7, r3
 8004b5e:	688e      	ldr	r6, [r1, #8]
 8004b60:	4682      	mov	sl, r0
 8004b62:	42be      	cmp	r6, r7
 8004b64:	460c      	mov	r4, r1
 8004b66:	4690      	mov	r8, r2
 8004b68:	680b      	ldr	r3, [r1, #0]
 8004b6a:	d82d      	bhi.n	8004bc8 <__ssputs_r+0x70>
 8004b6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004b70:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004b74:	d026      	beq.n	8004bc4 <__ssputs_r+0x6c>
 8004b76:	6965      	ldr	r5, [r4, #20]
 8004b78:	6909      	ldr	r1, [r1, #16]
 8004b7a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004b7e:	eba3 0901 	sub.w	r9, r3, r1
 8004b82:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004b86:	1c7b      	adds	r3, r7, #1
 8004b88:	444b      	add	r3, r9
 8004b8a:	106d      	asrs	r5, r5, #1
 8004b8c:	429d      	cmp	r5, r3
 8004b8e:	bf38      	it	cc
 8004b90:	461d      	movcc	r5, r3
 8004b92:	0553      	lsls	r3, r2, #21
 8004b94:	d527      	bpl.n	8004be6 <__ssputs_r+0x8e>
 8004b96:	4629      	mov	r1, r5
 8004b98:	f7ff ff52 	bl	8004a40 <_malloc_r>
 8004b9c:	4606      	mov	r6, r0
 8004b9e:	b360      	cbz	r0, 8004bfa <__ssputs_r+0xa2>
 8004ba0:	464a      	mov	r2, r9
 8004ba2:	6921      	ldr	r1, [r4, #16]
 8004ba4:	f7ff fed4 	bl	8004950 <memcpy>
 8004ba8:	89a3      	ldrh	r3, [r4, #12]
 8004baa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004bae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bb2:	81a3      	strh	r3, [r4, #12]
 8004bb4:	6126      	str	r6, [r4, #16]
 8004bb6:	444e      	add	r6, r9
 8004bb8:	6026      	str	r6, [r4, #0]
 8004bba:	463e      	mov	r6, r7
 8004bbc:	6165      	str	r5, [r4, #20]
 8004bbe:	eba5 0509 	sub.w	r5, r5, r9
 8004bc2:	60a5      	str	r5, [r4, #8]
 8004bc4:	42be      	cmp	r6, r7
 8004bc6:	d900      	bls.n	8004bca <__ssputs_r+0x72>
 8004bc8:	463e      	mov	r6, r7
 8004bca:	4632      	mov	r2, r6
 8004bcc:	4641      	mov	r1, r8
 8004bce:	6820      	ldr	r0, [r4, #0]
 8004bd0:	f000 faaa 	bl	8005128 <memmove>
 8004bd4:	2000      	movs	r0, #0
 8004bd6:	68a3      	ldr	r3, [r4, #8]
 8004bd8:	1b9b      	subs	r3, r3, r6
 8004bda:	60a3      	str	r3, [r4, #8]
 8004bdc:	6823      	ldr	r3, [r4, #0]
 8004bde:	4433      	add	r3, r6
 8004be0:	6023      	str	r3, [r4, #0]
 8004be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004be6:	462a      	mov	r2, r5
 8004be8:	f000 fad6 	bl	8005198 <_realloc_r>
 8004bec:	4606      	mov	r6, r0
 8004bee:	2800      	cmp	r0, #0
 8004bf0:	d1e0      	bne.n	8004bb4 <__ssputs_r+0x5c>
 8004bf2:	4650      	mov	r0, sl
 8004bf4:	6921      	ldr	r1, [r4, #16]
 8004bf6:	f7ff feb9 	bl	800496c <_free_r>
 8004bfa:	230c      	movs	r3, #12
 8004bfc:	f8ca 3000 	str.w	r3, [sl]
 8004c00:	89a3      	ldrh	r3, [r4, #12]
 8004c02:	f04f 30ff 	mov.w	r0, #4294967295
 8004c06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c0a:	81a3      	strh	r3, [r4, #12]
 8004c0c:	e7e9      	b.n	8004be2 <__ssputs_r+0x8a>
	...

08004c10 <_svfiprintf_r>:
 8004c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c14:	4698      	mov	r8, r3
 8004c16:	898b      	ldrh	r3, [r1, #12]
 8004c18:	4607      	mov	r7, r0
 8004c1a:	061b      	lsls	r3, r3, #24
 8004c1c:	460d      	mov	r5, r1
 8004c1e:	4614      	mov	r4, r2
 8004c20:	b09d      	sub	sp, #116	@ 0x74
 8004c22:	d510      	bpl.n	8004c46 <_svfiprintf_r+0x36>
 8004c24:	690b      	ldr	r3, [r1, #16]
 8004c26:	b973      	cbnz	r3, 8004c46 <_svfiprintf_r+0x36>
 8004c28:	2140      	movs	r1, #64	@ 0x40
 8004c2a:	f7ff ff09 	bl	8004a40 <_malloc_r>
 8004c2e:	6028      	str	r0, [r5, #0]
 8004c30:	6128      	str	r0, [r5, #16]
 8004c32:	b930      	cbnz	r0, 8004c42 <_svfiprintf_r+0x32>
 8004c34:	230c      	movs	r3, #12
 8004c36:	603b      	str	r3, [r7, #0]
 8004c38:	f04f 30ff 	mov.w	r0, #4294967295
 8004c3c:	b01d      	add	sp, #116	@ 0x74
 8004c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c42:	2340      	movs	r3, #64	@ 0x40
 8004c44:	616b      	str	r3, [r5, #20]
 8004c46:	2300      	movs	r3, #0
 8004c48:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c4a:	2320      	movs	r3, #32
 8004c4c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004c50:	2330      	movs	r3, #48	@ 0x30
 8004c52:	f04f 0901 	mov.w	r9, #1
 8004c56:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c5a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004df4 <_svfiprintf_r+0x1e4>
 8004c5e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004c62:	4623      	mov	r3, r4
 8004c64:	469a      	mov	sl, r3
 8004c66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c6a:	b10a      	cbz	r2, 8004c70 <_svfiprintf_r+0x60>
 8004c6c:	2a25      	cmp	r2, #37	@ 0x25
 8004c6e:	d1f9      	bne.n	8004c64 <_svfiprintf_r+0x54>
 8004c70:	ebba 0b04 	subs.w	fp, sl, r4
 8004c74:	d00b      	beq.n	8004c8e <_svfiprintf_r+0x7e>
 8004c76:	465b      	mov	r3, fp
 8004c78:	4622      	mov	r2, r4
 8004c7a:	4629      	mov	r1, r5
 8004c7c:	4638      	mov	r0, r7
 8004c7e:	f7ff ff6b 	bl	8004b58 <__ssputs_r>
 8004c82:	3001      	adds	r0, #1
 8004c84:	f000 80a7 	beq.w	8004dd6 <_svfiprintf_r+0x1c6>
 8004c88:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004c8a:	445a      	add	r2, fp
 8004c8c:	9209      	str	r2, [sp, #36]	@ 0x24
 8004c8e:	f89a 3000 	ldrb.w	r3, [sl]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	f000 809f 	beq.w	8004dd6 <_svfiprintf_r+0x1c6>
 8004c98:	2300      	movs	r3, #0
 8004c9a:	f04f 32ff 	mov.w	r2, #4294967295
 8004c9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ca2:	f10a 0a01 	add.w	sl, sl, #1
 8004ca6:	9304      	str	r3, [sp, #16]
 8004ca8:	9307      	str	r3, [sp, #28]
 8004caa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004cae:	931a      	str	r3, [sp, #104]	@ 0x68
 8004cb0:	4654      	mov	r4, sl
 8004cb2:	2205      	movs	r2, #5
 8004cb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cb8:	484e      	ldr	r0, [pc, #312]	@ (8004df4 <_svfiprintf_r+0x1e4>)
 8004cba:	f000 fa5f 	bl	800517c <memchr>
 8004cbe:	9a04      	ldr	r2, [sp, #16]
 8004cc0:	b9d8      	cbnz	r0, 8004cfa <_svfiprintf_r+0xea>
 8004cc2:	06d0      	lsls	r0, r2, #27
 8004cc4:	bf44      	itt	mi
 8004cc6:	2320      	movmi	r3, #32
 8004cc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004ccc:	0711      	lsls	r1, r2, #28
 8004cce:	bf44      	itt	mi
 8004cd0:	232b      	movmi	r3, #43	@ 0x2b
 8004cd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004cd6:	f89a 3000 	ldrb.w	r3, [sl]
 8004cda:	2b2a      	cmp	r3, #42	@ 0x2a
 8004cdc:	d015      	beq.n	8004d0a <_svfiprintf_r+0xfa>
 8004cde:	4654      	mov	r4, sl
 8004ce0:	2000      	movs	r0, #0
 8004ce2:	f04f 0c0a 	mov.w	ip, #10
 8004ce6:	9a07      	ldr	r2, [sp, #28]
 8004ce8:	4621      	mov	r1, r4
 8004cea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004cee:	3b30      	subs	r3, #48	@ 0x30
 8004cf0:	2b09      	cmp	r3, #9
 8004cf2:	d94b      	bls.n	8004d8c <_svfiprintf_r+0x17c>
 8004cf4:	b1b0      	cbz	r0, 8004d24 <_svfiprintf_r+0x114>
 8004cf6:	9207      	str	r2, [sp, #28]
 8004cf8:	e014      	b.n	8004d24 <_svfiprintf_r+0x114>
 8004cfa:	eba0 0308 	sub.w	r3, r0, r8
 8004cfe:	fa09 f303 	lsl.w	r3, r9, r3
 8004d02:	4313      	orrs	r3, r2
 8004d04:	46a2      	mov	sl, r4
 8004d06:	9304      	str	r3, [sp, #16]
 8004d08:	e7d2      	b.n	8004cb0 <_svfiprintf_r+0xa0>
 8004d0a:	9b03      	ldr	r3, [sp, #12]
 8004d0c:	1d19      	adds	r1, r3, #4
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	9103      	str	r1, [sp, #12]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	bfbb      	ittet	lt
 8004d16:	425b      	neglt	r3, r3
 8004d18:	f042 0202 	orrlt.w	r2, r2, #2
 8004d1c:	9307      	strge	r3, [sp, #28]
 8004d1e:	9307      	strlt	r3, [sp, #28]
 8004d20:	bfb8      	it	lt
 8004d22:	9204      	strlt	r2, [sp, #16]
 8004d24:	7823      	ldrb	r3, [r4, #0]
 8004d26:	2b2e      	cmp	r3, #46	@ 0x2e
 8004d28:	d10a      	bne.n	8004d40 <_svfiprintf_r+0x130>
 8004d2a:	7863      	ldrb	r3, [r4, #1]
 8004d2c:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d2e:	d132      	bne.n	8004d96 <_svfiprintf_r+0x186>
 8004d30:	9b03      	ldr	r3, [sp, #12]
 8004d32:	3402      	adds	r4, #2
 8004d34:	1d1a      	adds	r2, r3, #4
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	9203      	str	r2, [sp, #12]
 8004d3a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004d3e:	9305      	str	r3, [sp, #20]
 8004d40:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004df8 <_svfiprintf_r+0x1e8>
 8004d44:	2203      	movs	r2, #3
 8004d46:	4650      	mov	r0, sl
 8004d48:	7821      	ldrb	r1, [r4, #0]
 8004d4a:	f000 fa17 	bl	800517c <memchr>
 8004d4e:	b138      	cbz	r0, 8004d60 <_svfiprintf_r+0x150>
 8004d50:	2240      	movs	r2, #64	@ 0x40
 8004d52:	9b04      	ldr	r3, [sp, #16]
 8004d54:	eba0 000a 	sub.w	r0, r0, sl
 8004d58:	4082      	lsls	r2, r0
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	3401      	adds	r4, #1
 8004d5e:	9304      	str	r3, [sp, #16]
 8004d60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d64:	2206      	movs	r2, #6
 8004d66:	4825      	ldr	r0, [pc, #148]	@ (8004dfc <_svfiprintf_r+0x1ec>)
 8004d68:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004d6c:	f000 fa06 	bl	800517c <memchr>
 8004d70:	2800      	cmp	r0, #0
 8004d72:	d036      	beq.n	8004de2 <_svfiprintf_r+0x1d2>
 8004d74:	4b22      	ldr	r3, [pc, #136]	@ (8004e00 <_svfiprintf_r+0x1f0>)
 8004d76:	bb1b      	cbnz	r3, 8004dc0 <_svfiprintf_r+0x1b0>
 8004d78:	9b03      	ldr	r3, [sp, #12]
 8004d7a:	3307      	adds	r3, #7
 8004d7c:	f023 0307 	bic.w	r3, r3, #7
 8004d80:	3308      	adds	r3, #8
 8004d82:	9303      	str	r3, [sp, #12]
 8004d84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d86:	4433      	add	r3, r6
 8004d88:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d8a:	e76a      	b.n	8004c62 <_svfiprintf_r+0x52>
 8004d8c:	460c      	mov	r4, r1
 8004d8e:	2001      	movs	r0, #1
 8004d90:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d94:	e7a8      	b.n	8004ce8 <_svfiprintf_r+0xd8>
 8004d96:	2300      	movs	r3, #0
 8004d98:	f04f 0c0a 	mov.w	ip, #10
 8004d9c:	4619      	mov	r1, r3
 8004d9e:	3401      	adds	r4, #1
 8004da0:	9305      	str	r3, [sp, #20]
 8004da2:	4620      	mov	r0, r4
 8004da4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004da8:	3a30      	subs	r2, #48	@ 0x30
 8004daa:	2a09      	cmp	r2, #9
 8004dac:	d903      	bls.n	8004db6 <_svfiprintf_r+0x1a6>
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d0c6      	beq.n	8004d40 <_svfiprintf_r+0x130>
 8004db2:	9105      	str	r1, [sp, #20]
 8004db4:	e7c4      	b.n	8004d40 <_svfiprintf_r+0x130>
 8004db6:	4604      	mov	r4, r0
 8004db8:	2301      	movs	r3, #1
 8004dba:	fb0c 2101 	mla	r1, ip, r1, r2
 8004dbe:	e7f0      	b.n	8004da2 <_svfiprintf_r+0x192>
 8004dc0:	ab03      	add	r3, sp, #12
 8004dc2:	9300      	str	r3, [sp, #0]
 8004dc4:	462a      	mov	r2, r5
 8004dc6:	4638      	mov	r0, r7
 8004dc8:	4b0e      	ldr	r3, [pc, #56]	@ (8004e04 <_svfiprintf_r+0x1f4>)
 8004dca:	a904      	add	r1, sp, #16
 8004dcc:	f3af 8000 	nop.w
 8004dd0:	1c42      	adds	r2, r0, #1
 8004dd2:	4606      	mov	r6, r0
 8004dd4:	d1d6      	bne.n	8004d84 <_svfiprintf_r+0x174>
 8004dd6:	89ab      	ldrh	r3, [r5, #12]
 8004dd8:	065b      	lsls	r3, r3, #25
 8004dda:	f53f af2d 	bmi.w	8004c38 <_svfiprintf_r+0x28>
 8004dde:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004de0:	e72c      	b.n	8004c3c <_svfiprintf_r+0x2c>
 8004de2:	ab03      	add	r3, sp, #12
 8004de4:	9300      	str	r3, [sp, #0]
 8004de6:	462a      	mov	r2, r5
 8004de8:	4638      	mov	r0, r7
 8004dea:	4b06      	ldr	r3, [pc, #24]	@ (8004e04 <_svfiprintf_r+0x1f4>)
 8004dec:	a904      	add	r1, sp, #16
 8004dee:	f000 f87d 	bl	8004eec <_printf_i>
 8004df2:	e7ed      	b.n	8004dd0 <_svfiprintf_r+0x1c0>
 8004df4:	0800d1ba 	.word	0x0800d1ba
 8004df8:	0800d1c0 	.word	0x0800d1c0
 8004dfc:	0800d1c4 	.word	0x0800d1c4
 8004e00:	00000000 	.word	0x00000000
 8004e04:	08004b59 	.word	0x08004b59

08004e08 <_printf_common>:
 8004e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e0c:	4616      	mov	r6, r2
 8004e0e:	4698      	mov	r8, r3
 8004e10:	688a      	ldr	r2, [r1, #8]
 8004e12:	690b      	ldr	r3, [r1, #16]
 8004e14:	4607      	mov	r7, r0
 8004e16:	4293      	cmp	r3, r2
 8004e18:	bfb8      	it	lt
 8004e1a:	4613      	movlt	r3, r2
 8004e1c:	6033      	str	r3, [r6, #0]
 8004e1e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004e22:	460c      	mov	r4, r1
 8004e24:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004e28:	b10a      	cbz	r2, 8004e2e <_printf_common+0x26>
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	6033      	str	r3, [r6, #0]
 8004e2e:	6823      	ldr	r3, [r4, #0]
 8004e30:	0699      	lsls	r1, r3, #26
 8004e32:	bf42      	ittt	mi
 8004e34:	6833      	ldrmi	r3, [r6, #0]
 8004e36:	3302      	addmi	r3, #2
 8004e38:	6033      	strmi	r3, [r6, #0]
 8004e3a:	6825      	ldr	r5, [r4, #0]
 8004e3c:	f015 0506 	ands.w	r5, r5, #6
 8004e40:	d106      	bne.n	8004e50 <_printf_common+0x48>
 8004e42:	f104 0a19 	add.w	sl, r4, #25
 8004e46:	68e3      	ldr	r3, [r4, #12]
 8004e48:	6832      	ldr	r2, [r6, #0]
 8004e4a:	1a9b      	subs	r3, r3, r2
 8004e4c:	42ab      	cmp	r3, r5
 8004e4e:	dc2b      	bgt.n	8004ea8 <_printf_common+0xa0>
 8004e50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004e54:	6822      	ldr	r2, [r4, #0]
 8004e56:	3b00      	subs	r3, #0
 8004e58:	bf18      	it	ne
 8004e5a:	2301      	movne	r3, #1
 8004e5c:	0692      	lsls	r2, r2, #26
 8004e5e:	d430      	bmi.n	8004ec2 <_printf_common+0xba>
 8004e60:	4641      	mov	r1, r8
 8004e62:	4638      	mov	r0, r7
 8004e64:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004e68:	47c8      	blx	r9
 8004e6a:	3001      	adds	r0, #1
 8004e6c:	d023      	beq.n	8004eb6 <_printf_common+0xae>
 8004e6e:	6823      	ldr	r3, [r4, #0]
 8004e70:	6922      	ldr	r2, [r4, #16]
 8004e72:	f003 0306 	and.w	r3, r3, #6
 8004e76:	2b04      	cmp	r3, #4
 8004e78:	bf14      	ite	ne
 8004e7a:	2500      	movne	r5, #0
 8004e7c:	6833      	ldreq	r3, [r6, #0]
 8004e7e:	f04f 0600 	mov.w	r6, #0
 8004e82:	bf08      	it	eq
 8004e84:	68e5      	ldreq	r5, [r4, #12]
 8004e86:	f104 041a 	add.w	r4, r4, #26
 8004e8a:	bf08      	it	eq
 8004e8c:	1aed      	subeq	r5, r5, r3
 8004e8e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004e92:	bf08      	it	eq
 8004e94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	bfc4      	itt	gt
 8004e9c:	1a9b      	subgt	r3, r3, r2
 8004e9e:	18ed      	addgt	r5, r5, r3
 8004ea0:	42b5      	cmp	r5, r6
 8004ea2:	d11a      	bne.n	8004eda <_printf_common+0xd2>
 8004ea4:	2000      	movs	r0, #0
 8004ea6:	e008      	b.n	8004eba <_printf_common+0xb2>
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	4652      	mov	r2, sl
 8004eac:	4641      	mov	r1, r8
 8004eae:	4638      	mov	r0, r7
 8004eb0:	47c8      	blx	r9
 8004eb2:	3001      	adds	r0, #1
 8004eb4:	d103      	bne.n	8004ebe <_printf_common+0xb6>
 8004eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8004eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ebe:	3501      	adds	r5, #1
 8004ec0:	e7c1      	b.n	8004e46 <_printf_common+0x3e>
 8004ec2:	2030      	movs	r0, #48	@ 0x30
 8004ec4:	18e1      	adds	r1, r4, r3
 8004ec6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004eca:	1c5a      	adds	r2, r3, #1
 8004ecc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004ed0:	4422      	add	r2, r4
 8004ed2:	3302      	adds	r3, #2
 8004ed4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004ed8:	e7c2      	b.n	8004e60 <_printf_common+0x58>
 8004eda:	2301      	movs	r3, #1
 8004edc:	4622      	mov	r2, r4
 8004ede:	4641      	mov	r1, r8
 8004ee0:	4638      	mov	r0, r7
 8004ee2:	47c8      	blx	r9
 8004ee4:	3001      	adds	r0, #1
 8004ee6:	d0e6      	beq.n	8004eb6 <_printf_common+0xae>
 8004ee8:	3601      	adds	r6, #1
 8004eea:	e7d9      	b.n	8004ea0 <_printf_common+0x98>

08004eec <_printf_i>:
 8004eec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ef0:	7e0f      	ldrb	r7, [r1, #24]
 8004ef2:	4691      	mov	r9, r2
 8004ef4:	2f78      	cmp	r7, #120	@ 0x78
 8004ef6:	4680      	mov	r8, r0
 8004ef8:	460c      	mov	r4, r1
 8004efa:	469a      	mov	sl, r3
 8004efc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004efe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004f02:	d807      	bhi.n	8004f14 <_printf_i+0x28>
 8004f04:	2f62      	cmp	r7, #98	@ 0x62
 8004f06:	d80a      	bhi.n	8004f1e <_printf_i+0x32>
 8004f08:	2f00      	cmp	r7, #0
 8004f0a:	f000 80d1 	beq.w	80050b0 <_printf_i+0x1c4>
 8004f0e:	2f58      	cmp	r7, #88	@ 0x58
 8004f10:	f000 80b8 	beq.w	8005084 <_printf_i+0x198>
 8004f14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f18:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004f1c:	e03a      	b.n	8004f94 <_printf_i+0xa8>
 8004f1e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004f22:	2b15      	cmp	r3, #21
 8004f24:	d8f6      	bhi.n	8004f14 <_printf_i+0x28>
 8004f26:	a101      	add	r1, pc, #4	@ (adr r1, 8004f2c <_printf_i+0x40>)
 8004f28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f2c:	08004f85 	.word	0x08004f85
 8004f30:	08004f99 	.word	0x08004f99
 8004f34:	08004f15 	.word	0x08004f15
 8004f38:	08004f15 	.word	0x08004f15
 8004f3c:	08004f15 	.word	0x08004f15
 8004f40:	08004f15 	.word	0x08004f15
 8004f44:	08004f99 	.word	0x08004f99
 8004f48:	08004f15 	.word	0x08004f15
 8004f4c:	08004f15 	.word	0x08004f15
 8004f50:	08004f15 	.word	0x08004f15
 8004f54:	08004f15 	.word	0x08004f15
 8004f58:	08005097 	.word	0x08005097
 8004f5c:	08004fc3 	.word	0x08004fc3
 8004f60:	08005051 	.word	0x08005051
 8004f64:	08004f15 	.word	0x08004f15
 8004f68:	08004f15 	.word	0x08004f15
 8004f6c:	080050b9 	.word	0x080050b9
 8004f70:	08004f15 	.word	0x08004f15
 8004f74:	08004fc3 	.word	0x08004fc3
 8004f78:	08004f15 	.word	0x08004f15
 8004f7c:	08004f15 	.word	0x08004f15
 8004f80:	08005059 	.word	0x08005059
 8004f84:	6833      	ldr	r3, [r6, #0]
 8004f86:	1d1a      	adds	r2, r3, #4
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	6032      	str	r2, [r6, #0]
 8004f8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f90:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004f94:	2301      	movs	r3, #1
 8004f96:	e09c      	b.n	80050d2 <_printf_i+0x1e6>
 8004f98:	6833      	ldr	r3, [r6, #0]
 8004f9a:	6820      	ldr	r0, [r4, #0]
 8004f9c:	1d19      	adds	r1, r3, #4
 8004f9e:	6031      	str	r1, [r6, #0]
 8004fa0:	0606      	lsls	r6, r0, #24
 8004fa2:	d501      	bpl.n	8004fa8 <_printf_i+0xbc>
 8004fa4:	681d      	ldr	r5, [r3, #0]
 8004fa6:	e003      	b.n	8004fb0 <_printf_i+0xc4>
 8004fa8:	0645      	lsls	r5, r0, #25
 8004faa:	d5fb      	bpl.n	8004fa4 <_printf_i+0xb8>
 8004fac:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004fb0:	2d00      	cmp	r5, #0
 8004fb2:	da03      	bge.n	8004fbc <_printf_i+0xd0>
 8004fb4:	232d      	movs	r3, #45	@ 0x2d
 8004fb6:	426d      	negs	r5, r5
 8004fb8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004fbc:	230a      	movs	r3, #10
 8004fbe:	4858      	ldr	r0, [pc, #352]	@ (8005120 <_printf_i+0x234>)
 8004fc0:	e011      	b.n	8004fe6 <_printf_i+0xfa>
 8004fc2:	6821      	ldr	r1, [r4, #0]
 8004fc4:	6833      	ldr	r3, [r6, #0]
 8004fc6:	0608      	lsls	r0, r1, #24
 8004fc8:	f853 5b04 	ldr.w	r5, [r3], #4
 8004fcc:	d402      	bmi.n	8004fd4 <_printf_i+0xe8>
 8004fce:	0649      	lsls	r1, r1, #25
 8004fd0:	bf48      	it	mi
 8004fd2:	b2ad      	uxthmi	r5, r5
 8004fd4:	2f6f      	cmp	r7, #111	@ 0x6f
 8004fd6:	6033      	str	r3, [r6, #0]
 8004fd8:	bf14      	ite	ne
 8004fda:	230a      	movne	r3, #10
 8004fdc:	2308      	moveq	r3, #8
 8004fde:	4850      	ldr	r0, [pc, #320]	@ (8005120 <_printf_i+0x234>)
 8004fe0:	2100      	movs	r1, #0
 8004fe2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004fe6:	6866      	ldr	r6, [r4, #4]
 8004fe8:	2e00      	cmp	r6, #0
 8004fea:	60a6      	str	r6, [r4, #8]
 8004fec:	db05      	blt.n	8004ffa <_printf_i+0x10e>
 8004fee:	6821      	ldr	r1, [r4, #0]
 8004ff0:	432e      	orrs	r6, r5
 8004ff2:	f021 0104 	bic.w	r1, r1, #4
 8004ff6:	6021      	str	r1, [r4, #0]
 8004ff8:	d04b      	beq.n	8005092 <_printf_i+0x1a6>
 8004ffa:	4616      	mov	r6, r2
 8004ffc:	fbb5 f1f3 	udiv	r1, r5, r3
 8005000:	fb03 5711 	mls	r7, r3, r1, r5
 8005004:	5dc7      	ldrb	r7, [r0, r7]
 8005006:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800500a:	462f      	mov	r7, r5
 800500c:	42bb      	cmp	r3, r7
 800500e:	460d      	mov	r5, r1
 8005010:	d9f4      	bls.n	8004ffc <_printf_i+0x110>
 8005012:	2b08      	cmp	r3, #8
 8005014:	d10b      	bne.n	800502e <_printf_i+0x142>
 8005016:	6823      	ldr	r3, [r4, #0]
 8005018:	07df      	lsls	r7, r3, #31
 800501a:	d508      	bpl.n	800502e <_printf_i+0x142>
 800501c:	6923      	ldr	r3, [r4, #16]
 800501e:	6861      	ldr	r1, [r4, #4]
 8005020:	4299      	cmp	r1, r3
 8005022:	bfde      	ittt	le
 8005024:	2330      	movle	r3, #48	@ 0x30
 8005026:	f806 3c01 	strble.w	r3, [r6, #-1]
 800502a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800502e:	1b92      	subs	r2, r2, r6
 8005030:	6122      	str	r2, [r4, #16]
 8005032:	464b      	mov	r3, r9
 8005034:	4621      	mov	r1, r4
 8005036:	4640      	mov	r0, r8
 8005038:	f8cd a000 	str.w	sl, [sp]
 800503c:	aa03      	add	r2, sp, #12
 800503e:	f7ff fee3 	bl	8004e08 <_printf_common>
 8005042:	3001      	adds	r0, #1
 8005044:	d14a      	bne.n	80050dc <_printf_i+0x1f0>
 8005046:	f04f 30ff 	mov.w	r0, #4294967295
 800504a:	b004      	add	sp, #16
 800504c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005050:	6823      	ldr	r3, [r4, #0]
 8005052:	f043 0320 	orr.w	r3, r3, #32
 8005056:	6023      	str	r3, [r4, #0]
 8005058:	2778      	movs	r7, #120	@ 0x78
 800505a:	4832      	ldr	r0, [pc, #200]	@ (8005124 <_printf_i+0x238>)
 800505c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005060:	6823      	ldr	r3, [r4, #0]
 8005062:	6831      	ldr	r1, [r6, #0]
 8005064:	061f      	lsls	r7, r3, #24
 8005066:	f851 5b04 	ldr.w	r5, [r1], #4
 800506a:	d402      	bmi.n	8005072 <_printf_i+0x186>
 800506c:	065f      	lsls	r7, r3, #25
 800506e:	bf48      	it	mi
 8005070:	b2ad      	uxthmi	r5, r5
 8005072:	6031      	str	r1, [r6, #0]
 8005074:	07d9      	lsls	r1, r3, #31
 8005076:	bf44      	itt	mi
 8005078:	f043 0320 	orrmi.w	r3, r3, #32
 800507c:	6023      	strmi	r3, [r4, #0]
 800507e:	b11d      	cbz	r5, 8005088 <_printf_i+0x19c>
 8005080:	2310      	movs	r3, #16
 8005082:	e7ad      	b.n	8004fe0 <_printf_i+0xf4>
 8005084:	4826      	ldr	r0, [pc, #152]	@ (8005120 <_printf_i+0x234>)
 8005086:	e7e9      	b.n	800505c <_printf_i+0x170>
 8005088:	6823      	ldr	r3, [r4, #0]
 800508a:	f023 0320 	bic.w	r3, r3, #32
 800508e:	6023      	str	r3, [r4, #0]
 8005090:	e7f6      	b.n	8005080 <_printf_i+0x194>
 8005092:	4616      	mov	r6, r2
 8005094:	e7bd      	b.n	8005012 <_printf_i+0x126>
 8005096:	6833      	ldr	r3, [r6, #0]
 8005098:	6825      	ldr	r5, [r4, #0]
 800509a:	1d18      	adds	r0, r3, #4
 800509c:	6961      	ldr	r1, [r4, #20]
 800509e:	6030      	str	r0, [r6, #0]
 80050a0:	062e      	lsls	r6, r5, #24
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	d501      	bpl.n	80050aa <_printf_i+0x1be>
 80050a6:	6019      	str	r1, [r3, #0]
 80050a8:	e002      	b.n	80050b0 <_printf_i+0x1c4>
 80050aa:	0668      	lsls	r0, r5, #25
 80050ac:	d5fb      	bpl.n	80050a6 <_printf_i+0x1ba>
 80050ae:	8019      	strh	r1, [r3, #0]
 80050b0:	2300      	movs	r3, #0
 80050b2:	4616      	mov	r6, r2
 80050b4:	6123      	str	r3, [r4, #16]
 80050b6:	e7bc      	b.n	8005032 <_printf_i+0x146>
 80050b8:	6833      	ldr	r3, [r6, #0]
 80050ba:	2100      	movs	r1, #0
 80050bc:	1d1a      	adds	r2, r3, #4
 80050be:	6032      	str	r2, [r6, #0]
 80050c0:	681e      	ldr	r6, [r3, #0]
 80050c2:	6862      	ldr	r2, [r4, #4]
 80050c4:	4630      	mov	r0, r6
 80050c6:	f000 f859 	bl	800517c <memchr>
 80050ca:	b108      	cbz	r0, 80050d0 <_printf_i+0x1e4>
 80050cc:	1b80      	subs	r0, r0, r6
 80050ce:	6060      	str	r0, [r4, #4]
 80050d0:	6863      	ldr	r3, [r4, #4]
 80050d2:	6123      	str	r3, [r4, #16]
 80050d4:	2300      	movs	r3, #0
 80050d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050da:	e7aa      	b.n	8005032 <_printf_i+0x146>
 80050dc:	4632      	mov	r2, r6
 80050de:	4649      	mov	r1, r9
 80050e0:	4640      	mov	r0, r8
 80050e2:	6923      	ldr	r3, [r4, #16]
 80050e4:	47d0      	blx	sl
 80050e6:	3001      	adds	r0, #1
 80050e8:	d0ad      	beq.n	8005046 <_printf_i+0x15a>
 80050ea:	6823      	ldr	r3, [r4, #0]
 80050ec:	079b      	lsls	r3, r3, #30
 80050ee:	d413      	bmi.n	8005118 <_printf_i+0x22c>
 80050f0:	68e0      	ldr	r0, [r4, #12]
 80050f2:	9b03      	ldr	r3, [sp, #12]
 80050f4:	4298      	cmp	r0, r3
 80050f6:	bfb8      	it	lt
 80050f8:	4618      	movlt	r0, r3
 80050fa:	e7a6      	b.n	800504a <_printf_i+0x15e>
 80050fc:	2301      	movs	r3, #1
 80050fe:	4632      	mov	r2, r6
 8005100:	4649      	mov	r1, r9
 8005102:	4640      	mov	r0, r8
 8005104:	47d0      	blx	sl
 8005106:	3001      	adds	r0, #1
 8005108:	d09d      	beq.n	8005046 <_printf_i+0x15a>
 800510a:	3501      	adds	r5, #1
 800510c:	68e3      	ldr	r3, [r4, #12]
 800510e:	9903      	ldr	r1, [sp, #12]
 8005110:	1a5b      	subs	r3, r3, r1
 8005112:	42ab      	cmp	r3, r5
 8005114:	dcf2      	bgt.n	80050fc <_printf_i+0x210>
 8005116:	e7eb      	b.n	80050f0 <_printf_i+0x204>
 8005118:	2500      	movs	r5, #0
 800511a:	f104 0619 	add.w	r6, r4, #25
 800511e:	e7f5      	b.n	800510c <_printf_i+0x220>
 8005120:	0800d1cb 	.word	0x0800d1cb
 8005124:	0800d1dc 	.word	0x0800d1dc

08005128 <memmove>:
 8005128:	4288      	cmp	r0, r1
 800512a:	b510      	push	{r4, lr}
 800512c:	eb01 0402 	add.w	r4, r1, r2
 8005130:	d902      	bls.n	8005138 <memmove+0x10>
 8005132:	4284      	cmp	r4, r0
 8005134:	4623      	mov	r3, r4
 8005136:	d807      	bhi.n	8005148 <memmove+0x20>
 8005138:	1e43      	subs	r3, r0, #1
 800513a:	42a1      	cmp	r1, r4
 800513c:	d008      	beq.n	8005150 <memmove+0x28>
 800513e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005142:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005146:	e7f8      	b.n	800513a <memmove+0x12>
 8005148:	4601      	mov	r1, r0
 800514a:	4402      	add	r2, r0
 800514c:	428a      	cmp	r2, r1
 800514e:	d100      	bne.n	8005152 <memmove+0x2a>
 8005150:	bd10      	pop	{r4, pc}
 8005152:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005156:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800515a:	e7f7      	b.n	800514c <memmove+0x24>

0800515c <_sbrk_r>:
 800515c:	b538      	push	{r3, r4, r5, lr}
 800515e:	2300      	movs	r3, #0
 8005160:	4d05      	ldr	r5, [pc, #20]	@ (8005178 <_sbrk_r+0x1c>)
 8005162:	4604      	mov	r4, r0
 8005164:	4608      	mov	r0, r1
 8005166:	602b      	str	r3, [r5, #0]
 8005168:	f7fd f96e 	bl	8002448 <_sbrk>
 800516c:	1c43      	adds	r3, r0, #1
 800516e:	d102      	bne.n	8005176 <_sbrk_r+0x1a>
 8005170:	682b      	ldr	r3, [r5, #0]
 8005172:	b103      	cbz	r3, 8005176 <_sbrk_r+0x1a>
 8005174:	6023      	str	r3, [r4, #0]
 8005176:	bd38      	pop	{r3, r4, r5, pc}
 8005178:	20003ecc 	.word	0x20003ecc

0800517c <memchr>:
 800517c:	4603      	mov	r3, r0
 800517e:	b510      	push	{r4, lr}
 8005180:	b2c9      	uxtb	r1, r1
 8005182:	4402      	add	r2, r0
 8005184:	4293      	cmp	r3, r2
 8005186:	4618      	mov	r0, r3
 8005188:	d101      	bne.n	800518e <memchr+0x12>
 800518a:	2000      	movs	r0, #0
 800518c:	e003      	b.n	8005196 <memchr+0x1a>
 800518e:	7804      	ldrb	r4, [r0, #0]
 8005190:	3301      	adds	r3, #1
 8005192:	428c      	cmp	r4, r1
 8005194:	d1f6      	bne.n	8005184 <memchr+0x8>
 8005196:	bd10      	pop	{r4, pc}

08005198 <_realloc_r>:
 8005198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800519c:	4607      	mov	r7, r0
 800519e:	4614      	mov	r4, r2
 80051a0:	460d      	mov	r5, r1
 80051a2:	b921      	cbnz	r1, 80051ae <_realloc_r+0x16>
 80051a4:	4611      	mov	r1, r2
 80051a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80051aa:	f7ff bc49 	b.w	8004a40 <_malloc_r>
 80051ae:	b92a      	cbnz	r2, 80051bc <_realloc_r+0x24>
 80051b0:	f7ff fbdc 	bl	800496c <_free_r>
 80051b4:	4625      	mov	r5, r4
 80051b6:	4628      	mov	r0, r5
 80051b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051bc:	f000 f81a 	bl	80051f4 <_malloc_usable_size_r>
 80051c0:	4284      	cmp	r4, r0
 80051c2:	4606      	mov	r6, r0
 80051c4:	d802      	bhi.n	80051cc <_realloc_r+0x34>
 80051c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80051ca:	d8f4      	bhi.n	80051b6 <_realloc_r+0x1e>
 80051cc:	4621      	mov	r1, r4
 80051ce:	4638      	mov	r0, r7
 80051d0:	f7ff fc36 	bl	8004a40 <_malloc_r>
 80051d4:	4680      	mov	r8, r0
 80051d6:	b908      	cbnz	r0, 80051dc <_realloc_r+0x44>
 80051d8:	4645      	mov	r5, r8
 80051da:	e7ec      	b.n	80051b6 <_realloc_r+0x1e>
 80051dc:	42b4      	cmp	r4, r6
 80051de:	4622      	mov	r2, r4
 80051e0:	4629      	mov	r1, r5
 80051e2:	bf28      	it	cs
 80051e4:	4632      	movcs	r2, r6
 80051e6:	f7ff fbb3 	bl	8004950 <memcpy>
 80051ea:	4629      	mov	r1, r5
 80051ec:	4638      	mov	r0, r7
 80051ee:	f7ff fbbd 	bl	800496c <_free_r>
 80051f2:	e7f1      	b.n	80051d8 <_realloc_r+0x40>

080051f4 <_malloc_usable_size_r>:
 80051f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051f8:	1f18      	subs	r0, r3, #4
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	bfbc      	itt	lt
 80051fe:	580b      	ldrlt	r3, [r1, r0]
 8005200:	18c0      	addlt	r0, r0, r3
 8005202:	4770      	bx	lr

08005204 <powf>:
 8005204:	b570      	push	{r4, r5, r6, lr}
 8005206:	460c      	mov	r4, r1
 8005208:	4606      	mov	r6, r0
 800520a:	f000 fa43 	bl	8005694 <__ieee754_powf>
 800520e:	4621      	mov	r1, r4
 8005210:	4605      	mov	r5, r0
 8005212:	4620      	mov	r0, r4
 8005214:	f7fb fa6e 	bl	80006f4 <__aeabi_fcmpun>
 8005218:	bb68      	cbnz	r0, 8005276 <powf+0x72>
 800521a:	2100      	movs	r1, #0
 800521c:	4630      	mov	r0, r6
 800521e:	f7fb fa37 	bl	8000690 <__aeabi_fcmpeq>
 8005222:	b190      	cbz	r0, 800524a <powf+0x46>
 8005224:	2100      	movs	r1, #0
 8005226:	4620      	mov	r0, r4
 8005228:	f7fb fa32 	bl	8000690 <__aeabi_fcmpeq>
 800522c:	2800      	cmp	r0, #0
 800522e:	d133      	bne.n	8005298 <powf+0x94>
 8005230:	4620      	mov	r0, r4
 8005232:	f000 f8c1 	bl	80053b8 <finitef>
 8005236:	b1f0      	cbz	r0, 8005276 <powf+0x72>
 8005238:	2100      	movs	r1, #0
 800523a:	4620      	mov	r0, r4
 800523c:	f7fb fa32 	bl	80006a4 <__aeabi_fcmplt>
 8005240:	b1c8      	cbz	r0, 8005276 <powf+0x72>
 8005242:	f7ff fb59 	bl	80048f8 <__errno>
 8005246:	2322      	movs	r3, #34	@ 0x22
 8005248:	e014      	b.n	8005274 <powf+0x70>
 800524a:	4628      	mov	r0, r5
 800524c:	f000 f8b4 	bl	80053b8 <finitef>
 8005250:	b998      	cbnz	r0, 800527a <powf+0x76>
 8005252:	4630      	mov	r0, r6
 8005254:	f000 f8b0 	bl	80053b8 <finitef>
 8005258:	b178      	cbz	r0, 800527a <powf+0x76>
 800525a:	4620      	mov	r0, r4
 800525c:	f000 f8ac 	bl	80053b8 <finitef>
 8005260:	b158      	cbz	r0, 800527a <powf+0x76>
 8005262:	4629      	mov	r1, r5
 8005264:	4628      	mov	r0, r5
 8005266:	f7fb fa45 	bl	80006f4 <__aeabi_fcmpun>
 800526a:	2800      	cmp	r0, #0
 800526c:	d0e9      	beq.n	8005242 <powf+0x3e>
 800526e:	f7ff fb43 	bl	80048f8 <__errno>
 8005272:	2321      	movs	r3, #33	@ 0x21
 8005274:	6003      	str	r3, [r0, #0]
 8005276:	4628      	mov	r0, r5
 8005278:	bd70      	pop	{r4, r5, r6, pc}
 800527a:	2100      	movs	r1, #0
 800527c:	4628      	mov	r0, r5
 800527e:	f7fb fa07 	bl	8000690 <__aeabi_fcmpeq>
 8005282:	2800      	cmp	r0, #0
 8005284:	d0f7      	beq.n	8005276 <powf+0x72>
 8005286:	4630      	mov	r0, r6
 8005288:	f000 f896 	bl	80053b8 <finitef>
 800528c:	2800      	cmp	r0, #0
 800528e:	d0f2      	beq.n	8005276 <powf+0x72>
 8005290:	4620      	mov	r0, r4
 8005292:	f000 f891 	bl	80053b8 <finitef>
 8005296:	e7d3      	b.n	8005240 <powf+0x3c>
 8005298:	f04f 557e 	mov.w	r5, #1065353216	@ 0x3f800000
 800529c:	e7eb      	b.n	8005276 <powf+0x72>

0800529e <sqrtf>:
 800529e:	b538      	push	{r3, r4, r5, lr}
 80052a0:	4605      	mov	r5, r0
 80052a2:	f000 f891 	bl	80053c8 <__ieee754_sqrtf>
 80052a6:	4629      	mov	r1, r5
 80052a8:	4604      	mov	r4, r0
 80052aa:	4628      	mov	r0, r5
 80052ac:	f7fb fa22 	bl	80006f4 <__aeabi_fcmpun>
 80052b0:	b968      	cbnz	r0, 80052ce <sqrtf+0x30>
 80052b2:	2100      	movs	r1, #0
 80052b4:	4628      	mov	r0, r5
 80052b6:	f7fb f9f5 	bl	80006a4 <__aeabi_fcmplt>
 80052ba:	b140      	cbz	r0, 80052ce <sqrtf+0x30>
 80052bc:	f7ff fb1c 	bl	80048f8 <__errno>
 80052c0:	2321      	movs	r3, #33	@ 0x21
 80052c2:	2100      	movs	r1, #0
 80052c4:	6003      	str	r3, [r0, #0]
 80052c6:	4608      	mov	r0, r1
 80052c8:	f7fb f902 	bl	80004d0 <__aeabi_fdiv>
 80052cc:	4604      	mov	r4, r0
 80052ce:	4620      	mov	r0, r4
 80052d0:	bd38      	pop	{r3, r4, r5, pc}
	...

080052d4 <cosf>:
 80052d4:	b507      	push	{r0, r1, r2, lr}
 80052d6:	4a1a      	ldr	r2, [pc, #104]	@ (8005340 <cosf+0x6c>)
 80052d8:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 80052dc:	4293      	cmp	r3, r2
 80052de:	4601      	mov	r1, r0
 80052e0:	d805      	bhi.n	80052ee <cosf+0x1a>
 80052e2:	2100      	movs	r1, #0
 80052e4:	b003      	add	sp, #12
 80052e6:	f85d eb04 	ldr.w	lr, [sp], #4
 80052ea:	f000 b8dd 	b.w	80054a8 <__kernel_cosf>
 80052ee:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80052f2:	d304      	bcc.n	80052fe <cosf+0x2a>
 80052f4:	f7fa ff2e 	bl	8000154 <__aeabi_fsub>
 80052f8:	b003      	add	sp, #12
 80052fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80052fe:	4669      	mov	r1, sp
 8005300:	f000 fd28 	bl	8005d54 <__ieee754_rem_pio2f>
 8005304:	f000 0203 	and.w	r2, r0, #3
 8005308:	2a01      	cmp	r2, #1
 800530a:	d007      	beq.n	800531c <cosf+0x48>
 800530c:	2a02      	cmp	r2, #2
 800530e:	d00c      	beq.n	800532a <cosf+0x56>
 8005310:	b982      	cbnz	r2, 8005334 <cosf+0x60>
 8005312:	9901      	ldr	r1, [sp, #4]
 8005314:	9800      	ldr	r0, [sp, #0]
 8005316:	f000 f8c7 	bl	80054a8 <__kernel_cosf>
 800531a:	e7ed      	b.n	80052f8 <cosf+0x24>
 800531c:	9901      	ldr	r1, [sp, #4]
 800531e:	9800      	ldr	r0, [sp, #0]
 8005320:	f000 f942 	bl	80055a8 <__kernel_sinf>
 8005324:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8005328:	e7e6      	b.n	80052f8 <cosf+0x24>
 800532a:	9901      	ldr	r1, [sp, #4]
 800532c:	9800      	ldr	r0, [sp, #0]
 800532e:	f000 f8bb 	bl	80054a8 <__kernel_cosf>
 8005332:	e7f7      	b.n	8005324 <cosf+0x50>
 8005334:	2201      	movs	r2, #1
 8005336:	9901      	ldr	r1, [sp, #4]
 8005338:	9800      	ldr	r0, [sp, #0]
 800533a:	f000 f935 	bl	80055a8 <__kernel_sinf>
 800533e:	e7db      	b.n	80052f8 <cosf+0x24>
 8005340:	3f490fd8 	.word	0x3f490fd8

08005344 <sinf>:
 8005344:	b507      	push	{r0, r1, r2, lr}
 8005346:	4a1b      	ldr	r2, [pc, #108]	@ (80053b4 <sinf+0x70>)
 8005348:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800534c:	4293      	cmp	r3, r2
 800534e:	4601      	mov	r1, r0
 8005350:	d806      	bhi.n	8005360 <sinf+0x1c>
 8005352:	2200      	movs	r2, #0
 8005354:	2100      	movs	r1, #0
 8005356:	b003      	add	sp, #12
 8005358:	f85d eb04 	ldr.w	lr, [sp], #4
 800535c:	f000 b924 	b.w	80055a8 <__kernel_sinf>
 8005360:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8005364:	d304      	bcc.n	8005370 <sinf+0x2c>
 8005366:	f7fa fef5 	bl	8000154 <__aeabi_fsub>
 800536a:	b003      	add	sp, #12
 800536c:	f85d fb04 	ldr.w	pc, [sp], #4
 8005370:	4669      	mov	r1, sp
 8005372:	f000 fcef 	bl	8005d54 <__ieee754_rem_pio2f>
 8005376:	f000 0003 	and.w	r0, r0, #3
 800537a:	2801      	cmp	r0, #1
 800537c:	d008      	beq.n	8005390 <sinf+0x4c>
 800537e:	2802      	cmp	r0, #2
 8005380:	d00b      	beq.n	800539a <sinf+0x56>
 8005382:	b990      	cbnz	r0, 80053aa <sinf+0x66>
 8005384:	2201      	movs	r2, #1
 8005386:	9901      	ldr	r1, [sp, #4]
 8005388:	9800      	ldr	r0, [sp, #0]
 800538a:	f000 f90d 	bl	80055a8 <__kernel_sinf>
 800538e:	e7ec      	b.n	800536a <sinf+0x26>
 8005390:	9901      	ldr	r1, [sp, #4]
 8005392:	9800      	ldr	r0, [sp, #0]
 8005394:	f000 f888 	bl	80054a8 <__kernel_cosf>
 8005398:	e7e7      	b.n	800536a <sinf+0x26>
 800539a:	2201      	movs	r2, #1
 800539c:	9901      	ldr	r1, [sp, #4]
 800539e:	9800      	ldr	r0, [sp, #0]
 80053a0:	f000 f902 	bl	80055a8 <__kernel_sinf>
 80053a4:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 80053a8:	e7df      	b.n	800536a <sinf+0x26>
 80053aa:	9901      	ldr	r1, [sp, #4]
 80053ac:	9800      	ldr	r0, [sp, #0]
 80053ae:	f000 f87b 	bl	80054a8 <__kernel_cosf>
 80053b2:	e7f7      	b.n	80053a4 <sinf+0x60>
 80053b4:	3f490fd8 	.word	0x3f490fd8

080053b8 <finitef>:
 80053b8:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80053bc:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 80053c0:	bfac      	ite	ge
 80053c2:	2000      	movge	r0, #0
 80053c4:	2001      	movlt	r0, #1
 80053c6:	4770      	bx	lr

080053c8 <__ieee754_sqrtf>:
 80053c8:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 80053cc:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80053d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053d4:	4603      	mov	r3, r0
 80053d6:	4604      	mov	r4, r0
 80053d8:	d30a      	bcc.n	80053f0 <__ieee754_sqrtf+0x28>
 80053da:	4601      	mov	r1, r0
 80053dc:	f7fa ffc4 	bl	8000368 <__aeabi_fmul>
 80053e0:	4601      	mov	r1, r0
 80053e2:	4620      	mov	r0, r4
 80053e4:	f7fa feb8 	bl	8000158 <__addsf3>
 80053e8:	4604      	mov	r4, r0
 80053ea:	4620      	mov	r0, r4
 80053ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053f0:	2a00      	cmp	r2, #0
 80053f2:	d0fa      	beq.n	80053ea <__ieee754_sqrtf+0x22>
 80053f4:	2800      	cmp	r0, #0
 80053f6:	da06      	bge.n	8005406 <__ieee754_sqrtf+0x3e>
 80053f8:	4601      	mov	r1, r0
 80053fa:	f7fa feab 	bl	8000154 <__aeabi_fsub>
 80053fe:	4601      	mov	r1, r0
 8005400:	f7fb f866 	bl	80004d0 <__aeabi_fdiv>
 8005404:	e7f0      	b.n	80053e8 <__ieee754_sqrtf+0x20>
 8005406:	f010 41ff 	ands.w	r1, r0, #2139095040	@ 0x7f800000
 800540a:	d03c      	beq.n	8005486 <__ieee754_sqrtf+0xbe>
 800540c:	15c2      	asrs	r2, r0, #23
 800540e:	2400      	movs	r4, #0
 8005410:	2019      	movs	r0, #25
 8005412:	4626      	mov	r6, r4
 8005414:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8005418:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800541c:	f1a2 057f 	sub.w	r5, r2, #127	@ 0x7f
 8005420:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005424:	07d2      	lsls	r2, r2, #31
 8005426:	bf58      	it	pl
 8005428:	005b      	lslpl	r3, r3, #1
 800542a:	106d      	asrs	r5, r5, #1
 800542c:	005b      	lsls	r3, r3, #1
 800542e:	1872      	adds	r2, r6, r1
 8005430:	429a      	cmp	r2, r3
 8005432:	bfcf      	iteee	gt
 8005434:	461a      	movgt	r2, r3
 8005436:	1856      	addle	r6, r2, r1
 8005438:	1864      	addle	r4, r4, r1
 800543a:	1a9a      	suble	r2, r3, r2
 800543c:	3801      	subs	r0, #1
 800543e:	ea4f 0342 	mov.w	r3, r2, lsl #1
 8005442:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8005446:	d1f2      	bne.n	800542e <__ieee754_sqrtf+0x66>
 8005448:	b1ba      	cbz	r2, 800547a <__ieee754_sqrtf+0xb2>
 800544a:	4e15      	ldr	r6, [pc, #84]	@ (80054a0 <__ieee754_sqrtf+0xd8>)
 800544c:	4f15      	ldr	r7, [pc, #84]	@ (80054a4 <__ieee754_sqrtf+0xdc>)
 800544e:	6830      	ldr	r0, [r6, #0]
 8005450:	6839      	ldr	r1, [r7, #0]
 8005452:	f7fa fe7f 	bl	8000154 <__aeabi_fsub>
 8005456:	f8d6 8000 	ldr.w	r8, [r6]
 800545a:	4601      	mov	r1, r0
 800545c:	4640      	mov	r0, r8
 800545e:	f7fb f92b 	bl	80006b8 <__aeabi_fcmple>
 8005462:	b150      	cbz	r0, 800547a <__ieee754_sqrtf+0xb2>
 8005464:	6830      	ldr	r0, [r6, #0]
 8005466:	6839      	ldr	r1, [r7, #0]
 8005468:	f7fa fe76 	bl	8000158 <__addsf3>
 800546c:	6836      	ldr	r6, [r6, #0]
 800546e:	4601      	mov	r1, r0
 8005470:	4630      	mov	r0, r6
 8005472:	f7fb f917 	bl	80006a4 <__aeabi_fcmplt>
 8005476:	b170      	cbz	r0, 8005496 <__ieee754_sqrtf+0xce>
 8005478:	3402      	adds	r4, #2
 800547a:	1064      	asrs	r4, r4, #1
 800547c:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 8005480:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 8005484:	e7b1      	b.n	80053ea <__ieee754_sqrtf+0x22>
 8005486:	005b      	lsls	r3, r3, #1
 8005488:	0218      	lsls	r0, r3, #8
 800548a:	460a      	mov	r2, r1
 800548c:	f101 0101 	add.w	r1, r1, #1
 8005490:	d5f9      	bpl.n	8005486 <__ieee754_sqrtf+0xbe>
 8005492:	4252      	negs	r2, r2
 8005494:	e7bb      	b.n	800540e <__ieee754_sqrtf+0x46>
 8005496:	3401      	adds	r4, #1
 8005498:	f024 0401 	bic.w	r4, r4, #1
 800549c:	e7ed      	b.n	800547a <__ieee754_sqrtf+0xb2>
 800549e:	bf00      	nop
 80054a0:	0800d1f4 	.word	0x0800d1f4
 80054a4:	0800d1f0 	.word	0x0800d1f0

080054a8 <__kernel_cosf>:
 80054a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054ac:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 80054b0:	f1b5 5f48 	cmp.w	r5, #838860800	@ 0x32000000
 80054b4:	4606      	mov	r6, r0
 80054b6:	4688      	mov	r8, r1
 80054b8:	d203      	bcs.n	80054c2 <__kernel_cosf+0x1a>
 80054ba:	f7fb f931 	bl	8000720 <__aeabi_f2iz>
 80054be:	2800      	cmp	r0, #0
 80054c0:	d05c      	beq.n	800557c <__kernel_cosf+0xd4>
 80054c2:	4631      	mov	r1, r6
 80054c4:	4630      	mov	r0, r6
 80054c6:	f7fa ff4f 	bl	8000368 <__aeabi_fmul>
 80054ca:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80054ce:	4604      	mov	r4, r0
 80054d0:	f7fa ff4a 	bl	8000368 <__aeabi_fmul>
 80054d4:	492b      	ldr	r1, [pc, #172]	@ (8005584 <__kernel_cosf+0xdc>)
 80054d6:	4607      	mov	r7, r0
 80054d8:	4620      	mov	r0, r4
 80054da:	f7fa ff45 	bl	8000368 <__aeabi_fmul>
 80054de:	492a      	ldr	r1, [pc, #168]	@ (8005588 <__kernel_cosf+0xe0>)
 80054e0:	f7fa fe3a 	bl	8000158 <__addsf3>
 80054e4:	4621      	mov	r1, r4
 80054e6:	f7fa ff3f 	bl	8000368 <__aeabi_fmul>
 80054ea:	4928      	ldr	r1, [pc, #160]	@ (800558c <__kernel_cosf+0xe4>)
 80054ec:	f7fa fe32 	bl	8000154 <__aeabi_fsub>
 80054f0:	4621      	mov	r1, r4
 80054f2:	f7fa ff39 	bl	8000368 <__aeabi_fmul>
 80054f6:	4926      	ldr	r1, [pc, #152]	@ (8005590 <__kernel_cosf+0xe8>)
 80054f8:	f7fa fe2e 	bl	8000158 <__addsf3>
 80054fc:	4621      	mov	r1, r4
 80054fe:	f7fa ff33 	bl	8000368 <__aeabi_fmul>
 8005502:	4924      	ldr	r1, [pc, #144]	@ (8005594 <__kernel_cosf+0xec>)
 8005504:	f7fa fe26 	bl	8000154 <__aeabi_fsub>
 8005508:	4621      	mov	r1, r4
 800550a:	f7fa ff2d 	bl	8000368 <__aeabi_fmul>
 800550e:	4922      	ldr	r1, [pc, #136]	@ (8005598 <__kernel_cosf+0xf0>)
 8005510:	f7fa fe22 	bl	8000158 <__addsf3>
 8005514:	4621      	mov	r1, r4
 8005516:	f7fa ff27 	bl	8000368 <__aeabi_fmul>
 800551a:	4621      	mov	r1, r4
 800551c:	f7fa ff24 	bl	8000368 <__aeabi_fmul>
 8005520:	4641      	mov	r1, r8
 8005522:	4604      	mov	r4, r0
 8005524:	4630      	mov	r0, r6
 8005526:	f7fa ff1f 	bl	8000368 <__aeabi_fmul>
 800552a:	4601      	mov	r1, r0
 800552c:	4620      	mov	r0, r4
 800552e:	f7fa fe11 	bl	8000154 <__aeabi_fsub>
 8005532:	4b1a      	ldr	r3, [pc, #104]	@ (800559c <__kernel_cosf+0xf4>)
 8005534:	4604      	mov	r4, r0
 8005536:	429d      	cmp	r5, r3
 8005538:	d80a      	bhi.n	8005550 <__kernel_cosf+0xa8>
 800553a:	4601      	mov	r1, r0
 800553c:	4638      	mov	r0, r7
 800553e:	f7fa fe09 	bl	8000154 <__aeabi_fsub>
 8005542:	4601      	mov	r1, r0
 8005544:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8005548:	f7fa fe04 	bl	8000154 <__aeabi_fsub>
 800554c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005550:	4b13      	ldr	r3, [pc, #76]	@ (80055a0 <__kernel_cosf+0xf8>)
 8005552:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8005556:	429d      	cmp	r5, r3
 8005558:	bf8c      	ite	hi
 800555a:	4d12      	ldrhi	r5, [pc, #72]	@ (80055a4 <__kernel_cosf+0xfc>)
 800555c:	f105 457f 	addls.w	r5, r5, #4278190080	@ 0xff000000
 8005560:	4629      	mov	r1, r5
 8005562:	f7fa fdf7 	bl	8000154 <__aeabi_fsub>
 8005566:	4629      	mov	r1, r5
 8005568:	4606      	mov	r6, r0
 800556a:	4638      	mov	r0, r7
 800556c:	f7fa fdf2 	bl	8000154 <__aeabi_fsub>
 8005570:	4621      	mov	r1, r4
 8005572:	f7fa fdef 	bl	8000154 <__aeabi_fsub>
 8005576:	4601      	mov	r1, r0
 8005578:	4630      	mov	r0, r6
 800557a:	e7e5      	b.n	8005548 <__kernel_cosf+0xa0>
 800557c:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8005580:	e7e4      	b.n	800554c <__kernel_cosf+0xa4>
 8005582:	bf00      	nop
 8005584:	ad47d74e 	.word	0xad47d74e
 8005588:	310f74f6 	.word	0x310f74f6
 800558c:	3493f27c 	.word	0x3493f27c
 8005590:	37d00d01 	.word	0x37d00d01
 8005594:	3ab60b61 	.word	0x3ab60b61
 8005598:	3d2aaaab 	.word	0x3d2aaaab
 800559c:	3e999999 	.word	0x3e999999
 80055a0:	3f480000 	.word	0x3f480000
 80055a4:	3e900000 	.word	0x3e900000

080055a8 <__kernel_sinf>:
 80055a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055ac:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 80055b0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80055b4:	4604      	mov	r4, r0
 80055b6:	460f      	mov	r7, r1
 80055b8:	4691      	mov	r9, r2
 80055ba:	d203      	bcs.n	80055c4 <__kernel_sinf+0x1c>
 80055bc:	f7fb f8b0 	bl	8000720 <__aeabi_f2iz>
 80055c0:	2800      	cmp	r0, #0
 80055c2:	d035      	beq.n	8005630 <__kernel_sinf+0x88>
 80055c4:	4621      	mov	r1, r4
 80055c6:	4620      	mov	r0, r4
 80055c8:	f7fa fece 	bl	8000368 <__aeabi_fmul>
 80055cc:	4605      	mov	r5, r0
 80055ce:	4601      	mov	r1, r0
 80055d0:	4620      	mov	r0, r4
 80055d2:	f7fa fec9 	bl	8000368 <__aeabi_fmul>
 80055d6:	4929      	ldr	r1, [pc, #164]	@ (800567c <__kernel_sinf+0xd4>)
 80055d8:	4606      	mov	r6, r0
 80055da:	4628      	mov	r0, r5
 80055dc:	f7fa fec4 	bl	8000368 <__aeabi_fmul>
 80055e0:	4927      	ldr	r1, [pc, #156]	@ (8005680 <__kernel_sinf+0xd8>)
 80055e2:	f7fa fdb7 	bl	8000154 <__aeabi_fsub>
 80055e6:	4629      	mov	r1, r5
 80055e8:	f7fa febe 	bl	8000368 <__aeabi_fmul>
 80055ec:	4925      	ldr	r1, [pc, #148]	@ (8005684 <__kernel_sinf+0xdc>)
 80055ee:	f7fa fdb3 	bl	8000158 <__addsf3>
 80055f2:	4629      	mov	r1, r5
 80055f4:	f7fa feb8 	bl	8000368 <__aeabi_fmul>
 80055f8:	4923      	ldr	r1, [pc, #140]	@ (8005688 <__kernel_sinf+0xe0>)
 80055fa:	f7fa fdab 	bl	8000154 <__aeabi_fsub>
 80055fe:	4629      	mov	r1, r5
 8005600:	f7fa feb2 	bl	8000368 <__aeabi_fmul>
 8005604:	4921      	ldr	r1, [pc, #132]	@ (800568c <__kernel_sinf+0xe4>)
 8005606:	f7fa fda7 	bl	8000158 <__addsf3>
 800560a:	4680      	mov	r8, r0
 800560c:	f1b9 0f00 	cmp.w	r9, #0
 8005610:	d111      	bne.n	8005636 <__kernel_sinf+0x8e>
 8005612:	4601      	mov	r1, r0
 8005614:	4628      	mov	r0, r5
 8005616:	f7fa fea7 	bl	8000368 <__aeabi_fmul>
 800561a:	491d      	ldr	r1, [pc, #116]	@ (8005690 <__kernel_sinf+0xe8>)
 800561c:	f7fa fd9a 	bl	8000154 <__aeabi_fsub>
 8005620:	4631      	mov	r1, r6
 8005622:	f7fa fea1 	bl	8000368 <__aeabi_fmul>
 8005626:	4601      	mov	r1, r0
 8005628:	4620      	mov	r0, r4
 800562a:	f7fa fd95 	bl	8000158 <__addsf3>
 800562e:	4604      	mov	r4, r0
 8005630:	4620      	mov	r0, r4
 8005632:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005636:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800563a:	4638      	mov	r0, r7
 800563c:	f7fa fe94 	bl	8000368 <__aeabi_fmul>
 8005640:	4641      	mov	r1, r8
 8005642:	4681      	mov	r9, r0
 8005644:	4630      	mov	r0, r6
 8005646:	f7fa fe8f 	bl	8000368 <__aeabi_fmul>
 800564a:	4601      	mov	r1, r0
 800564c:	4648      	mov	r0, r9
 800564e:	f7fa fd81 	bl	8000154 <__aeabi_fsub>
 8005652:	4629      	mov	r1, r5
 8005654:	f7fa fe88 	bl	8000368 <__aeabi_fmul>
 8005658:	4639      	mov	r1, r7
 800565a:	f7fa fd7b 	bl	8000154 <__aeabi_fsub>
 800565e:	490c      	ldr	r1, [pc, #48]	@ (8005690 <__kernel_sinf+0xe8>)
 8005660:	4605      	mov	r5, r0
 8005662:	4630      	mov	r0, r6
 8005664:	f7fa fe80 	bl	8000368 <__aeabi_fmul>
 8005668:	4601      	mov	r1, r0
 800566a:	4628      	mov	r0, r5
 800566c:	f7fa fd74 	bl	8000158 <__addsf3>
 8005670:	4601      	mov	r1, r0
 8005672:	4620      	mov	r0, r4
 8005674:	f7fa fd6e 	bl	8000154 <__aeabi_fsub>
 8005678:	e7d9      	b.n	800562e <__kernel_sinf+0x86>
 800567a:	bf00      	nop
 800567c:	2f2ec9d3 	.word	0x2f2ec9d3
 8005680:	32d72f34 	.word	0x32d72f34
 8005684:	3638ef1b 	.word	0x3638ef1b
 8005688:	39500d01 	.word	0x39500d01
 800568c:	3c088889 	.word	0x3c088889
 8005690:	3e2aaaab 	.word	0x3e2aaaab

08005694 <__ieee754_powf>:
 8005694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005698:	f031 4b00 	bics.w	fp, r1, #2147483648	@ 0x80000000
 800569c:	4681      	mov	r9, r0
 800569e:	460f      	mov	r7, r1
 80056a0:	4606      	mov	r6, r0
 80056a2:	460c      	mov	r4, r1
 80056a4:	b087      	sub	sp, #28
 80056a6:	d10c      	bne.n	80056c2 <__ieee754_powf+0x2e>
 80056a8:	f480 0680 	eor.w	r6, r0, #4194304	@ 0x400000
 80056ac:	0076      	lsls	r6, r6, #1
 80056ae:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 80056b2:	f240 8310 	bls.w	8005cd6 <__ieee754_powf+0x642>
 80056b6:	4639      	mov	r1, r7
 80056b8:	4648      	mov	r0, r9
 80056ba:	f7fa fd4d 	bl	8000158 <__addsf3>
 80056be:	4601      	mov	r1, r0
 80056c0:	e043      	b.n	800574a <__ieee754_powf+0xb6>
 80056c2:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 80056c6:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 80056ca:	d802      	bhi.n	80056d2 <__ieee754_powf+0x3e>
 80056cc:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 80056d0:	d908      	bls.n	80056e4 <__ieee754_powf+0x50>
 80056d2:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 80056d6:	d1ee      	bne.n	80056b6 <__ieee754_powf+0x22>
 80056d8:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 80056dc:	0064      	lsls	r4, r4, #1
 80056de:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 80056e2:	e7e6      	b.n	80056b2 <__ieee754_powf+0x1e>
 80056e4:	2800      	cmp	r0, #0
 80056e6:	da1f      	bge.n	8005728 <__ieee754_powf+0x94>
 80056e8:	f1bb 4f97 	cmp.w	fp, #1266679808	@ 0x4b800000
 80056ec:	f080 82f8 	bcs.w	8005ce0 <__ieee754_powf+0x64c>
 80056f0:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 80056f4:	d32f      	bcc.n	8005756 <__ieee754_powf+0xc2>
 80056f6:	ea4f 53eb 	mov.w	r3, fp, asr #23
 80056fa:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 80056fe:	fa4b f503 	asr.w	r5, fp, r3
 8005702:	fa05 f303 	lsl.w	r3, r5, r3
 8005706:	455b      	cmp	r3, fp
 8005708:	d123      	bne.n	8005752 <__ieee754_powf+0xbe>
 800570a:	f005 0501 	and.w	r5, r5, #1
 800570e:	f1c5 0502 	rsb	r5, r5, #2
 8005712:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 8005716:	d11f      	bne.n	8005758 <__ieee754_powf+0xc4>
 8005718:	2c00      	cmp	r4, #0
 800571a:	4649      	mov	r1, r9
 800571c:	da15      	bge.n	800574a <__ieee754_powf+0xb6>
 800571e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8005722:	f7fa fed5 	bl	80004d0 <__aeabi_fdiv>
 8005726:	e7ca      	b.n	80056be <__ieee754_powf+0x2a>
 8005728:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 800572c:	d111      	bne.n	8005752 <__ieee754_powf+0xbe>
 800572e:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8005732:	f000 82d0 	beq.w	8005cd6 <__ieee754_powf+0x642>
 8005736:	d904      	bls.n	8005742 <__ieee754_powf+0xae>
 8005738:	2c00      	cmp	r4, #0
 800573a:	f280 82cf 	bge.w	8005cdc <__ieee754_powf+0x648>
 800573e:	2100      	movs	r1, #0
 8005740:	e003      	b.n	800574a <__ieee754_powf+0xb6>
 8005742:	2c00      	cmp	r4, #0
 8005744:	dafb      	bge.n	800573e <__ieee754_powf+0xaa>
 8005746:	f107 4100 	add.w	r1, r7, #2147483648	@ 0x80000000
 800574a:	4608      	mov	r0, r1
 800574c:	b007      	add	sp, #28
 800574e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005752:	2500      	movs	r5, #0
 8005754:	e7dd      	b.n	8005712 <__ieee754_powf+0x7e>
 8005756:	2500      	movs	r5, #0
 8005758:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800575c:	d104      	bne.n	8005768 <__ieee754_powf+0xd4>
 800575e:	4649      	mov	r1, r9
 8005760:	4648      	mov	r0, r9
 8005762:	f7fa fe01 	bl	8000368 <__aeabi_fmul>
 8005766:	e7aa      	b.n	80056be <__ieee754_powf+0x2a>
 8005768:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800576c:	f040 82bd 	bne.w	8005cea <__ieee754_powf+0x656>
 8005770:	2e00      	cmp	r6, #0
 8005772:	f2c0 82ba 	blt.w	8005cea <__ieee754_powf+0x656>
 8005776:	4648      	mov	r0, r9
 8005778:	b007      	add	sp, #28
 800577a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800577e:	f7ff be23 	b.w	80053c8 <__ieee754_sqrtf>
 8005782:	2d01      	cmp	r5, #1
 8005784:	d1e1      	bne.n	800574a <__ieee754_powf+0xb6>
 8005786:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 800578a:	e798      	b.n	80056be <__ieee754_powf+0x2a>
 800578c:	0ff3      	lsrs	r3, r6, #31
 800578e:	3b01      	subs	r3, #1
 8005790:	9303      	str	r3, [sp, #12]
 8005792:	432b      	orrs	r3, r5
 8005794:	d101      	bne.n	800579a <__ieee754_powf+0x106>
 8005796:	4649      	mov	r1, r9
 8005798:	e2c5      	b.n	8005d26 <__ieee754_powf+0x692>
 800579a:	f1bb 4f9a 	cmp.w	fp, #1291845632	@ 0x4d000000
 800579e:	f240 809b 	bls.w	80058d8 <__ieee754_powf+0x244>
 80057a2:	4b46      	ldr	r3, [pc, #280]	@ (80058bc <__ieee754_powf+0x228>)
 80057a4:	4598      	cmp	r8, r3
 80057a6:	d807      	bhi.n	80057b8 <__ieee754_powf+0x124>
 80057a8:	2c00      	cmp	r4, #0
 80057aa:	da0a      	bge.n	80057c2 <__ieee754_powf+0x12e>
 80057ac:	2000      	movs	r0, #0
 80057ae:	b007      	add	sp, #28
 80057b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057b4:	f000 bc9d 	b.w	80060f2 <__math_oflowf>
 80057b8:	4b41      	ldr	r3, [pc, #260]	@ (80058c0 <__ieee754_powf+0x22c>)
 80057ba:	4598      	cmp	r8, r3
 80057bc:	d907      	bls.n	80057ce <__ieee754_powf+0x13a>
 80057be:	2c00      	cmp	r4, #0
 80057c0:	dcf4      	bgt.n	80057ac <__ieee754_powf+0x118>
 80057c2:	2000      	movs	r0, #0
 80057c4:	b007      	add	sp, #28
 80057c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057ca:	f000 bc8e 	b.w	80060ea <__math_uflowf>
 80057ce:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80057d2:	f7fa fcbf 	bl	8000154 <__aeabi_fsub>
 80057d6:	493b      	ldr	r1, [pc, #236]	@ (80058c4 <__ieee754_powf+0x230>)
 80057d8:	4606      	mov	r6, r0
 80057da:	f7fa fdc5 	bl	8000368 <__aeabi_fmul>
 80057de:	493a      	ldr	r1, [pc, #232]	@ (80058c8 <__ieee754_powf+0x234>)
 80057e0:	4680      	mov	r8, r0
 80057e2:	4630      	mov	r0, r6
 80057e4:	f7fa fdc0 	bl	8000368 <__aeabi_fmul>
 80057e8:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 80057ec:	4681      	mov	r9, r0
 80057ee:	4630      	mov	r0, r6
 80057f0:	f7fa fdba 	bl	8000368 <__aeabi_fmul>
 80057f4:	4601      	mov	r1, r0
 80057f6:	4835      	ldr	r0, [pc, #212]	@ (80058cc <__ieee754_powf+0x238>)
 80057f8:	f7fa fcac 	bl	8000154 <__aeabi_fsub>
 80057fc:	4631      	mov	r1, r6
 80057fe:	f7fa fdb3 	bl	8000368 <__aeabi_fmul>
 8005802:	4601      	mov	r1, r0
 8005804:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 8005808:	f7fa fca4 	bl	8000154 <__aeabi_fsub>
 800580c:	4631      	mov	r1, r6
 800580e:	4682      	mov	sl, r0
 8005810:	4630      	mov	r0, r6
 8005812:	f7fa fda9 	bl	8000368 <__aeabi_fmul>
 8005816:	4601      	mov	r1, r0
 8005818:	4650      	mov	r0, sl
 800581a:	f7fa fda5 	bl	8000368 <__aeabi_fmul>
 800581e:	492c      	ldr	r1, [pc, #176]	@ (80058d0 <__ieee754_powf+0x23c>)
 8005820:	f7fa fda2 	bl	8000368 <__aeabi_fmul>
 8005824:	4601      	mov	r1, r0
 8005826:	4648      	mov	r0, r9
 8005828:	f7fa fc94 	bl	8000154 <__aeabi_fsub>
 800582c:	4601      	mov	r1, r0
 800582e:	4606      	mov	r6, r0
 8005830:	4640      	mov	r0, r8
 8005832:	f7fa fc91 	bl	8000158 <__addsf3>
 8005836:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 800583a:	f02b 0b0f 	bic.w	fp, fp, #15
 800583e:	4641      	mov	r1, r8
 8005840:	4658      	mov	r0, fp
 8005842:	f7fa fc87 	bl	8000154 <__aeabi_fsub>
 8005846:	4601      	mov	r1, r0
 8005848:	4630      	mov	r0, r6
 800584a:	f7fa fc83 	bl	8000154 <__aeabi_fsub>
 800584e:	9b03      	ldr	r3, [sp, #12]
 8005850:	3d01      	subs	r5, #1
 8005852:	f36f 040b 	bfc	r4, #0, #12
 8005856:	431d      	orrs	r5, r3
 8005858:	4606      	mov	r6, r0
 800585a:	4621      	mov	r1, r4
 800585c:	4638      	mov	r0, r7
 800585e:	bf14      	ite	ne
 8005860:	f04f 557e 	movne.w	r5, #1065353216	@ 0x3f800000
 8005864:	4d1b      	ldreq	r5, [pc, #108]	@ (80058d4 <__ieee754_powf+0x240>)
 8005866:	f7fa fc75 	bl	8000154 <__aeabi_fsub>
 800586a:	4659      	mov	r1, fp
 800586c:	f7fa fd7c 	bl	8000368 <__aeabi_fmul>
 8005870:	4639      	mov	r1, r7
 8005872:	4680      	mov	r8, r0
 8005874:	4630      	mov	r0, r6
 8005876:	f7fa fd77 	bl	8000368 <__aeabi_fmul>
 800587a:	4601      	mov	r1, r0
 800587c:	4640      	mov	r0, r8
 800587e:	f7fa fc6b 	bl	8000158 <__addsf3>
 8005882:	4621      	mov	r1, r4
 8005884:	4606      	mov	r6, r0
 8005886:	4658      	mov	r0, fp
 8005888:	f7fa fd6e 	bl	8000368 <__aeabi_fmul>
 800588c:	4601      	mov	r1, r0
 800588e:	4607      	mov	r7, r0
 8005890:	4630      	mov	r0, r6
 8005892:	f7fa fc61 	bl	8000158 <__addsf3>
 8005896:	2800      	cmp	r0, #0
 8005898:	4604      	mov	r4, r0
 800589a:	4680      	mov	r8, r0
 800589c:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 80058a0:	f340 813f 	ble.w	8005b22 <__ieee754_powf+0x48e>
 80058a4:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 80058a8:	f240 8128 	bls.w	8005afc <__ieee754_powf+0x468>
 80058ac:	2100      	movs	r1, #0
 80058ae:	4628      	mov	r0, r5
 80058b0:	f7fa fef8 	bl	80006a4 <__aeabi_fcmplt>
 80058b4:	3800      	subs	r0, #0
 80058b6:	bf18      	it	ne
 80058b8:	2001      	movne	r0, #1
 80058ba:	e778      	b.n	80057ae <__ieee754_powf+0x11a>
 80058bc:	3f7ffff3 	.word	0x3f7ffff3
 80058c0:	3f800007 	.word	0x3f800007
 80058c4:	3fb8aa00 	.word	0x3fb8aa00
 80058c8:	36eca570 	.word	0x36eca570
 80058cc:	3eaaaaab 	.word	0x3eaaaaab
 80058d0:	3fb8aa3b 	.word	0x3fb8aa3b
 80058d4:	bf800000 	.word	0xbf800000
 80058d8:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 80058dc:	f040 810a 	bne.w	8005af4 <__ieee754_powf+0x460>
 80058e0:	f04f 4197 	mov.w	r1, #1266679808	@ 0x4b800000
 80058e4:	f7fa fd40 	bl	8000368 <__aeabi_fmul>
 80058e8:	f06f 0217 	mvn.w	r2, #23
 80058ec:	4682      	mov	sl, r0
 80058ee:	ea4f 53ea 	mov.w	r3, sl, asr #23
 80058f2:	3b7f      	subs	r3, #127	@ 0x7f
 80058f4:	441a      	add	r2, r3
 80058f6:	4b95      	ldr	r3, [pc, #596]	@ (8005b4c <__ieee754_powf+0x4b8>)
 80058f8:	f3ca 0a16 	ubfx	sl, sl, #0, #23
 80058fc:	459a      	cmp	sl, r3
 80058fe:	f04a 567e 	orr.w	r6, sl, #1065353216	@ 0x3f800000
 8005902:	dd06      	ble.n	8005912 <__ieee754_powf+0x27e>
 8005904:	4b92      	ldr	r3, [pc, #584]	@ (8005b50 <__ieee754_powf+0x4bc>)
 8005906:	459a      	cmp	sl, r3
 8005908:	f340 80f6 	ble.w	8005af8 <__ieee754_powf+0x464>
 800590c:	3201      	adds	r2, #1
 800590e:	f5a6 0600 	sub.w	r6, r6, #8388608	@ 0x800000
 8005912:	2300      	movs	r3, #0
 8005914:	9301      	str	r3, [sp, #4]
 8005916:	9205      	str	r2, [sp, #20]
 8005918:	4b8e      	ldr	r3, [pc, #568]	@ (8005b54 <__ieee754_powf+0x4c0>)
 800591a:	9a01      	ldr	r2, [sp, #4]
 800591c:	4630      	mov	r0, r6
 800591e:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 8005922:	46b2      	mov	sl, r6
 8005924:	4659      	mov	r1, fp
 8005926:	f7fa fc15 	bl	8000154 <__aeabi_fsub>
 800592a:	4631      	mov	r1, r6
 800592c:	4681      	mov	r9, r0
 800592e:	4658      	mov	r0, fp
 8005930:	f7fa fc12 	bl	8000158 <__addsf3>
 8005934:	4601      	mov	r1, r0
 8005936:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800593a:	f7fa fdc9 	bl	80004d0 <__aeabi_fdiv>
 800593e:	4601      	mov	r1, r0
 8005940:	9004      	str	r0, [sp, #16]
 8005942:	4648      	mov	r0, r9
 8005944:	f7fa fd10 	bl	8000368 <__aeabi_fmul>
 8005948:	9002      	str	r0, [sp, #8]
 800594a:	9b02      	ldr	r3, [sp, #8]
 800594c:	1076      	asrs	r6, r6, #1
 800594e:	f36f 030b 	bfc	r3, #0, #12
 8005952:	4698      	mov	r8, r3
 8005954:	f046 5600 	orr.w	r6, r6, #536870912	@ 0x20000000
 8005958:	9b01      	ldr	r3, [sp, #4]
 800595a:	f506 2680 	add.w	r6, r6, #262144	@ 0x40000
 800595e:	eb06 5643 	add.w	r6, r6, r3, lsl #21
 8005962:	4631      	mov	r1, r6
 8005964:	4640      	mov	r0, r8
 8005966:	f7fa fcff 	bl	8000368 <__aeabi_fmul>
 800596a:	4601      	mov	r1, r0
 800596c:	4648      	mov	r0, r9
 800596e:	f7fa fbf1 	bl	8000154 <__aeabi_fsub>
 8005972:	4659      	mov	r1, fp
 8005974:	4681      	mov	r9, r0
 8005976:	4630      	mov	r0, r6
 8005978:	f7fa fbec 	bl	8000154 <__aeabi_fsub>
 800597c:	4601      	mov	r1, r0
 800597e:	4650      	mov	r0, sl
 8005980:	f7fa fbe8 	bl	8000154 <__aeabi_fsub>
 8005984:	4641      	mov	r1, r8
 8005986:	f7fa fcef 	bl	8000368 <__aeabi_fmul>
 800598a:	4601      	mov	r1, r0
 800598c:	4648      	mov	r0, r9
 800598e:	f7fa fbe1 	bl	8000154 <__aeabi_fsub>
 8005992:	9b04      	ldr	r3, [sp, #16]
 8005994:	4619      	mov	r1, r3
 8005996:	f7fa fce7 	bl	8000368 <__aeabi_fmul>
 800599a:	9902      	ldr	r1, [sp, #8]
 800599c:	4683      	mov	fp, r0
 800599e:	4608      	mov	r0, r1
 80059a0:	f7fa fce2 	bl	8000368 <__aeabi_fmul>
 80059a4:	4606      	mov	r6, r0
 80059a6:	496c      	ldr	r1, [pc, #432]	@ (8005b58 <__ieee754_powf+0x4c4>)
 80059a8:	f7fa fcde 	bl	8000368 <__aeabi_fmul>
 80059ac:	496b      	ldr	r1, [pc, #428]	@ (8005b5c <__ieee754_powf+0x4c8>)
 80059ae:	f7fa fbd3 	bl	8000158 <__addsf3>
 80059b2:	4631      	mov	r1, r6
 80059b4:	f7fa fcd8 	bl	8000368 <__aeabi_fmul>
 80059b8:	4969      	ldr	r1, [pc, #420]	@ (8005b60 <__ieee754_powf+0x4cc>)
 80059ba:	f7fa fbcd 	bl	8000158 <__addsf3>
 80059be:	4631      	mov	r1, r6
 80059c0:	f7fa fcd2 	bl	8000368 <__aeabi_fmul>
 80059c4:	4967      	ldr	r1, [pc, #412]	@ (8005b64 <__ieee754_powf+0x4d0>)
 80059c6:	f7fa fbc7 	bl	8000158 <__addsf3>
 80059ca:	4631      	mov	r1, r6
 80059cc:	f7fa fccc 	bl	8000368 <__aeabi_fmul>
 80059d0:	4965      	ldr	r1, [pc, #404]	@ (8005b68 <__ieee754_powf+0x4d4>)
 80059d2:	f7fa fbc1 	bl	8000158 <__addsf3>
 80059d6:	4631      	mov	r1, r6
 80059d8:	f7fa fcc6 	bl	8000368 <__aeabi_fmul>
 80059dc:	4963      	ldr	r1, [pc, #396]	@ (8005b6c <__ieee754_powf+0x4d8>)
 80059de:	f7fa fbbb 	bl	8000158 <__addsf3>
 80059e2:	4631      	mov	r1, r6
 80059e4:	4681      	mov	r9, r0
 80059e6:	4630      	mov	r0, r6
 80059e8:	f7fa fcbe 	bl	8000368 <__aeabi_fmul>
 80059ec:	4601      	mov	r1, r0
 80059ee:	4648      	mov	r0, r9
 80059f0:	f7fa fcba 	bl	8000368 <__aeabi_fmul>
 80059f4:	4606      	mov	r6, r0
 80059f6:	4641      	mov	r1, r8
 80059f8:	9802      	ldr	r0, [sp, #8]
 80059fa:	f7fa fbad 	bl	8000158 <__addsf3>
 80059fe:	4659      	mov	r1, fp
 8005a00:	f7fa fcb2 	bl	8000368 <__aeabi_fmul>
 8005a04:	4631      	mov	r1, r6
 8005a06:	f7fa fba7 	bl	8000158 <__addsf3>
 8005a0a:	4641      	mov	r1, r8
 8005a0c:	4681      	mov	r9, r0
 8005a0e:	4640      	mov	r0, r8
 8005a10:	f7fa fcaa 	bl	8000368 <__aeabi_fmul>
 8005a14:	4956      	ldr	r1, [pc, #344]	@ (8005b70 <__ieee754_powf+0x4dc>)
 8005a16:	4682      	mov	sl, r0
 8005a18:	f7fa fb9e 	bl	8000158 <__addsf3>
 8005a1c:	4649      	mov	r1, r9
 8005a1e:	f7fa fb9b 	bl	8000158 <__addsf3>
 8005a22:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 8005a26:	f026 060f 	bic.w	r6, r6, #15
 8005a2a:	4631      	mov	r1, r6
 8005a2c:	4640      	mov	r0, r8
 8005a2e:	f7fa fc9b 	bl	8000368 <__aeabi_fmul>
 8005a32:	494f      	ldr	r1, [pc, #316]	@ (8005b70 <__ieee754_powf+0x4dc>)
 8005a34:	4680      	mov	r8, r0
 8005a36:	4630      	mov	r0, r6
 8005a38:	f7fa fb8c 	bl	8000154 <__aeabi_fsub>
 8005a3c:	4651      	mov	r1, sl
 8005a3e:	f7fa fb89 	bl	8000154 <__aeabi_fsub>
 8005a42:	4601      	mov	r1, r0
 8005a44:	4648      	mov	r0, r9
 8005a46:	f7fa fb85 	bl	8000154 <__aeabi_fsub>
 8005a4a:	9902      	ldr	r1, [sp, #8]
 8005a4c:	f7fa fc8c 	bl	8000368 <__aeabi_fmul>
 8005a50:	4631      	mov	r1, r6
 8005a52:	4681      	mov	r9, r0
 8005a54:	4658      	mov	r0, fp
 8005a56:	f7fa fc87 	bl	8000368 <__aeabi_fmul>
 8005a5a:	4601      	mov	r1, r0
 8005a5c:	4648      	mov	r0, r9
 8005a5e:	f7fa fb7b 	bl	8000158 <__addsf3>
 8005a62:	4682      	mov	sl, r0
 8005a64:	4601      	mov	r1, r0
 8005a66:	4640      	mov	r0, r8
 8005a68:	f7fa fb76 	bl	8000158 <__addsf3>
 8005a6c:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 8005a70:	f026 060f 	bic.w	r6, r6, #15
 8005a74:	4630      	mov	r0, r6
 8005a76:	493f      	ldr	r1, [pc, #252]	@ (8005b74 <__ieee754_powf+0x4e0>)
 8005a78:	f7fa fc76 	bl	8000368 <__aeabi_fmul>
 8005a7c:	4641      	mov	r1, r8
 8005a7e:	4681      	mov	r9, r0
 8005a80:	4630      	mov	r0, r6
 8005a82:	f7fa fb67 	bl	8000154 <__aeabi_fsub>
 8005a86:	4601      	mov	r1, r0
 8005a88:	4650      	mov	r0, sl
 8005a8a:	f7fa fb63 	bl	8000154 <__aeabi_fsub>
 8005a8e:	493a      	ldr	r1, [pc, #232]	@ (8005b78 <__ieee754_powf+0x4e4>)
 8005a90:	f7fa fc6a 	bl	8000368 <__aeabi_fmul>
 8005a94:	4939      	ldr	r1, [pc, #228]	@ (8005b7c <__ieee754_powf+0x4e8>)
 8005a96:	4680      	mov	r8, r0
 8005a98:	4630      	mov	r0, r6
 8005a9a:	f7fa fc65 	bl	8000368 <__aeabi_fmul>
 8005a9e:	4601      	mov	r1, r0
 8005aa0:	4640      	mov	r0, r8
 8005aa2:	f7fa fb59 	bl	8000158 <__addsf3>
 8005aa6:	4b36      	ldr	r3, [pc, #216]	@ (8005b80 <__ieee754_powf+0x4ec>)
 8005aa8:	9a01      	ldr	r2, [sp, #4]
 8005aaa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005aae:	f7fa fb53 	bl	8000158 <__addsf3>
 8005ab2:	9a05      	ldr	r2, [sp, #20]
 8005ab4:	4606      	mov	r6, r0
 8005ab6:	4610      	mov	r0, r2
 8005ab8:	f7fa fc02 	bl	80002c0 <__aeabi_i2f>
 8005abc:	4680      	mov	r8, r0
 8005abe:	4b31      	ldr	r3, [pc, #196]	@ (8005b84 <__ieee754_powf+0x4f0>)
 8005ac0:	9a01      	ldr	r2, [sp, #4]
 8005ac2:	4631      	mov	r1, r6
 8005ac4:	f853 a022 	ldr.w	sl, [r3, r2, lsl #2]
 8005ac8:	4648      	mov	r0, r9
 8005aca:	f7fa fb45 	bl	8000158 <__addsf3>
 8005ace:	4651      	mov	r1, sl
 8005ad0:	f7fa fb42 	bl	8000158 <__addsf3>
 8005ad4:	4641      	mov	r1, r8
 8005ad6:	f7fa fb3f 	bl	8000158 <__addsf3>
 8005ada:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 8005ade:	f02b 0b0f 	bic.w	fp, fp, #15
 8005ae2:	4641      	mov	r1, r8
 8005ae4:	4658      	mov	r0, fp
 8005ae6:	f7fa fb35 	bl	8000154 <__aeabi_fsub>
 8005aea:	4651      	mov	r1, sl
 8005aec:	f7fa fb32 	bl	8000154 <__aeabi_fsub>
 8005af0:	4649      	mov	r1, r9
 8005af2:	e6a6      	b.n	8005842 <__ieee754_powf+0x1ae>
 8005af4:	2200      	movs	r2, #0
 8005af6:	e6fa      	b.n	80058ee <__ieee754_powf+0x25a>
 8005af8:	2301      	movs	r3, #1
 8005afa:	e70b      	b.n	8005914 <__ieee754_powf+0x280>
 8005afc:	d148      	bne.n	8005b90 <__ieee754_powf+0x4fc>
 8005afe:	4922      	ldr	r1, [pc, #136]	@ (8005b88 <__ieee754_powf+0x4f4>)
 8005b00:	4630      	mov	r0, r6
 8005b02:	f7fa fb29 	bl	8000158 <__addsf3>
 8005b06:	4639      	mov	r1, r7
 8005b08:	4681      	mov	r9, r0
 8005b0a:	4620      	mov	r0, r4
 8005b0c:	f7fa fb22 	bl	8000154 <__aeabi_fsub>
 8005b10:	4601      	mov	r1, r0
 8005b12:	4648      	mov	r0, r9
 8005b14:	f7fa fde4 	bl	80006e0 <__aeabi_fcmpgt>
 8005b18:	2800      	cmp	r0, #0
 8005b1a:	f47f aec7 	bne.w	80058ac <__ieee754_powf+0x218>
 8005b1e:	2386      	movs	r3, #134	@ 0x86
 8005b20:	e03b      	b.n	8005b9a <__ieee754_powf+0x506>
 8005b22:	4a1a      	ldr	r2, [pc, #104]	@ (8005b8c <__ieee754_powf+0x4f8>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d907      	bls.n	8005b38 <__ieee754_powf+0x4a4>
 8005b28:	2100      	movs	r1, #0
 8005b2a:	4628      	mov	r0, r5
 8005b2c:	f7fa fdba 	bl	80006a4 <__aeabi_fcmplt>
 8005b30:	3800      	subs	r0, #0
 8005b32:	bf18      	it	ne
 8005b34:	2001      	movne	r0, #1
 8005b36:	e645      	b.n	80057c4 <__ieee754_powf+0x130>
 8005b38:	d12a      	bne.n	8005b90 <__ieee754_powf+0x4fc>
 8005b3a:	4639      	mov	r1, r7
 8005b3c:	f7fa fb0a 	bl	8000154 <__aeabi_fsub>
 8005b40:	4631      	mov	r1, r6
 8005b42:	f7fa fdc3 	bl	80006cc <__aeabi_fcmpge>
 8005b46:	2800      	cmp	r0, #0
 8005b48:	d0e9      	beq.n	8005b1e <__ieee754_powf+0x48a>
 8005b4a:	e7ed      	b.n	8005b28 <__ieee754_powf+0x494>
 8005b4c:	001cc471 	.word	0x001cc471
 8005b50:	005db3d6 	.word	0x005db3d6
 8005b54:	0800d208 	.word	0x0800d208
 8005b58:	3e53f142 	.word	0x3e53f142
 8005b5c:	3e6c3255 	.word	0x3e6c3255
 8005b60:	3e8ba305 	.word	0x3e8ba305
 8005b64:	3eaaaaab 	.word	0x3eaaaaab
 8005b68:	3edb6db7 	.word	0x3edb6db7
 8005b6c:	3f19999a 	.word	0x3f19999a
 8005b70:	40400000 	.word	0x40400000
 8005b74:	3f763800 	.word	0x3f763800
 8005b78:	3f76384f 	.word	0x3f76384f
 8005b7c:	369dc3a0 	.word	0x369dc3a0
 8005b80:	0800d1f8 	.word	0x0800d1f8
 8005b84:	0800d200 	.word	0x0800d200
 8005b88:	3338aa3c 	.word	0x3338aa3c
 8005b8c:	43160000 	.word	0x43160000
 8005b90:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8005b94:	f240 809b 	bls.w	8005cce <__ieee754_powf+0x63a>
 8005b98:	15db      	asrs	r3, r3, #23
 8005b9a:	f44f 0400 	mov.w	r4, #8388608	@ 0x800000
 8005b9e:	3b7e      	subs	r3, #126	@ 0x7e
 8005ba0:	411c      	asrs	r4, r3
 8005ba2:	4444      	add	r4, r8
 8005ba4:	f3c4 53c7 	ubfx	r3, r4, #23, #8
 8005ba8:	4961      	ldr	r1, [pc, #388]	@ (8005d30 <__ieee754_powf+0x69c>)
 8005baa:	3b7f      	subs	r3, #127	@ 0x7f
 8005bac:	4119      	asrs	r1, r3
 8005bae:	4021      	ands	r1, r4
 8005bb0:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8005bb4:	f1c3 0317 	rsb	r3, r3, #23
 8005bb8:	f444 0400 	orr.w	r4, r4, #8388608	@ 0x800000
 8005bbc:	4638      	mov	r0, r7
 8005bbe:	411c      	asrs	r4, r3
 8005bc0:	f1b8 0f00 	cmp.w	r8, #0
 8005bc4:	bfb8      	it	lt
 8005bc6:	4264      	neglt	r4, r4
 8005bc8:	f7fa fac4 	bl	8000154 <__aeabi_fsub>
 8005bcc:	4607      	mov	r7, r0
 8005bce:	4631      	mov	r1, r6
 8005bd0:	4638      	mov	r0, r7
 8005bd2:	f7fa fac1 	bl	8000158 <__addsf3>
 8005bd6:	f420 687f 	bic.w	r8, r0, #4080	@ 0xff0
 8005bda:	f028 080f 	bic.w	r8, r8, #15
 8005bde:	4640      	mov	r0, r8
 8005be0:	4954      	ldr	r1, [pc, #336]	@ (8005d34 <__ieee754_powf+0x6a0>)
 8005be2:	f7fa fbc1 	bl	8000368 <__aeabi_fmul>
 8005be6:	4639      	mov	r1, r7
 8005be8:	4681      	mov	r9, r0
 8005bea:	4640      	mov	r0, r8
 8005bec:	f7fa fab2 	bl	8000154 <__aeabi_fsub>
 8005bf0:	4601      	mov	r1, r0
 8005bf2:	4630      	mov	r0, r6
 8005bf4:	f7fa faae 	bl	8000154 <__aeabi_fsub>
 8005bf8:	494f      	ldr	r1, [pc, #316]	@ (8005d38 <__ieee754_powf+0x6a4>)
 8005bfa:	f7fa fbb5 	bl	8000368 <__aeabi_fmul>
 8005bfe:	494f      	ldr	r1, [pc, #316]	@ (8005d3c <__ieee754_powf+0x6a8>)
 8005c00:	4606      	mov	r6, r0
 8005c02:	4640      	mov	r0, r8
 8005c04:	f7fa fbb0 	bl	8000368 <__aeabi_fmul>
 8005c08:	4601      	mov	r1, r0
 8005c0a:	4630      	mov	r0, r6
 8005c0c:	f7fa faa4 	bl	8000158 <__addsf3>
 8005c10:	4607      	mov	r7, r0
 8005c12:	4601      	mov	r1, r0
 8005c14:	4648      	mov	r0, r9
 8005c16:	f7fa fa9f 	bl	8000158 <__addsf3>
 8005c1a:	4649      	mov	r1, r9
 8005c1c:	4606      	mov	r6, r0
 8005c1e:	f7fa fa99 	bl	8000154 <__aeabi_fsub>
 8005c22:	4601      	mov	r1, r0
 8005c24:	4638      	mov	r0, r7
 8005c26:	f7fa fa95 	bl	8000154 <__aeabi_fsub>
 8005c2a:	4631      	mov	r1, r6
 8005c2c:	4680      	mov	r8, r0
 8005c2e:	4630      	mov	r0, r6
 8005c30:	f7fa fb9a 	bl	8000368 <__aeabi_fmul>
 8005c34:	4607      	mov	r7, r0
 8005c36:	4942      	ldr	r1, [pc, #264]	@ (8005d40 <__ieee754_powf+0x6ac>)
 8005c38:	f7fa fb96 	bl	8000368 <__aeabi_fmul>
 8005c3c:	4941      	ldr	r1, [pc, #260]	@ (8005d44 <__ieee754_powf+0x6b0>)
 8005c3e:	f7fa fa89 	bl	8000154 <__aeabi_fsub>
 8005c42:	4639      	mov	r1, r7
 8005c44:	f7fa fb90 	bl	8000368 <__aeabi_fmul>
 8005c48:	493f      	ldr	r1, [pc, #252]	@ (8005d48 <__ieee754_powf+0x6b4>)
 8005c4a:	f7fa fa85 	bl	8000158 <__addsf3>
 8005c4e:	4639      	mov	r1, r7
 8005c50:	f7fa fb8a 	bl	8000368 <__aeabi_fmul>
 8005c54:	493d      	ldr	r1, [pc, #244]	@ (8005d4c <__ieee754_powf+0x6b8>)
 8005c56:	f7fa fa7d 	bl	8000154 <__aeabi_fsub>
 8005c5a:	4639      	mov	r1, r7
 8005c5c:	f7fa fb84 	bl	8000368 <__aeabi_fmul>
 8005c60:	493b      	ldr	r1, [pc, #236]	@ (8005d50 <__ieee754_powf+0x6bc>)
 8005c62:	f7fa fa79 	bl	8000158 <__addsf3>
 8005c66:	4639      	mov	r1, r7
 8005c68:	f7fa fb7e 	bl	8000368 <__aeabi_fmul>
 8005c6c:	4601      	mov	r1, r0
 8005c6e:	4630      	mov	r0, r6
 8005c70:	f7fa fa70 	bl	8000154 <__aeabi_fsub>
 8005c74:	4607      	mov	r7, r0
 8005c76:	4601      	mov	r1, r0
 8005c78:	4630      	mov	r0, r6
 8005c7a:	f7fa fb75 	bl	8000368 <__aeabi_fmul>
 8005c7e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8005c82:	4681      	mov	r9, r0
 8005c84:	4638      	mov	r0, r7
 8005c86:	f7fa fa65 	bl	8000154 <__aeabi_fsub>
 8005c8a:	4601      	mov	r1, r0
 8005c8c:	4648      	mov	r0, r9
 8005c8e:	f7fa fc1f 	bl	80004d0 <__aeabi_fdiv>
 8005c92:	4641      	mov	r1, r8
 8005c94:	4607      	mov	r7, r0
 8005c96:	4630      	mov	r0, r6
 8005c98:	f7fa fb66 	bl	8000368 <__aeabi_fmul>
 8005c9c:	4641      	mov	r1, r8
 8005c9e:	f7fa fa5b 	bl	8000158 <__addsf3>
 8005ca2:	4601      	mov	r1, r0
 8005ca4:	4638      	mov	r0, r7
 8005ca6:	f7fa fa55 	bl	8000154 <__aeabi_fsub>
 8005caa:	4631      	mov	r1, r6
 8005cac:	f7fa fa52 	bl	8000154 <__aeabi_fsub>
 8005cb0:	4601      	mov	r1, r0
 8005cb2:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8005cb6:	f7fa fa4d 	bl	8000154 <__aeabi_fsub>
 8005cba:	eb00 53c4 	add.w	r3, r0, r4, lsl #23
 8005cbe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005cc2:	da06      	bge.n	8005cd2 <__ieee754_powf+0x63e>
 8005cc4:	4621      	mov	r1, r4
 8005cc6:	f000 f9af 	bl	8006028 <scalbnf>
 8005cca:	4629      	mov	r1, r5
 8005ccc:	e549      	b.n	8005762 <__ieee754_powf+0xce>
 8005cce:	2400      	movs	r4, #0
 8005cd0:	e77d      	b.n	8005bce <__ieee754_powf+0x53a>
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	e7f9      	b.n	8005cca <__ieee754_powf+0x636>
 8005cd6:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8005cda:	e536      	b.n	800574a <__ieee754_powf+0xb6>
 8005cdc:	4639      	mov	r1, r7
 8005cde:	e534      	b.n	800574a <__ieee754_powf+0xb6>
 8005ce0:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 8005ce4:	f43f ad23 	beq.w	800572e <__ieee754_powf+0x9a>
 8005ce8:	2502      	movs	r5, #2
 8005cea:	4648      	mov	r0, r9
 8005cec:	f000 f998 	bl	8006020 <fabsf>
 8005cf0:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8005cf4:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8005cf8:	46c2      	mov	sl, r8
 8005cfa:	4601      	mov	r1, r0
 8005cfc:	d003      	beq.n	8005d06 <__ieee754_powf+0x672>
 8005cfe:	f1b8 0f00 	cmp.w	r8, #0
 8005d02:	f47f ad43 	bne.w	800578c <__ieee754_powf+0xf8>
 8005d06:	2c00      	cmp	r4, #0
 8005d08:	da04      	bge.n	8005d14 <__ieee754_powf+0x680>
 8005d0a:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8005d0e:	f7fa fbdf 	bl	80004d0 <__aeabi_fdiv>
 8005d12:	4601      	mov	r1, r0
 8005d14:	2e00      	cmp	r6, #0
 8005d16:	f6bf ad18 	bge.w	800574a <__ieee754_powf+0xb6>
 8005d1a:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8005d1e:	ea58 0805 	orrs.w	r8, r8, r5
 8005d22:	f47f ad2e 	bne.w	8005782 <__ieee754_powf+0xee>
 8005d26:	4608      	mov	r0, r1
 8005d28:	f7fa fa14 	bl	8000154 <__aeabi_fsub>
 8005d2c:	4601      	mov	r1, r0
 8005d2e:	e4f8      	b.n	8005722 <__ieee754_powf+0x8e>
 8005d30:	ff800000 	.word	0xff800000
 8005d34:	3f317200 	.word	0x3f317200
 8005d38:	3f317218 	.word	0x3f317218
 8005d3c:	35bfbe8c 	.word	0x35bfbe8c
 8005d40:	3331bb4c 	.word	0x3331bb4c
 8005d44:	35ddea0e 	.word	0x35ddea0e
 8005d48:	388ab355 	.word	0x388ab355
 8005d4c:	3b360b61 	.word	0x3b360b61
 8005d50:	3e2aaaab 	.word	0x3e2aaaab

08005d54 <__ieee754_rem_pio2f>:
 8005d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d58:	4aa4      	ldr	r2, [pc, #656]	@ (8005fec <__ieee754_rem_pio2f+0x298>)
 8005d5a:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 8005d5e:	4590      	cmp	r8, r2
 8005d60:	460c      	mov	r4, r1
 8005d62:	4682      	mov	sl, r0
 8005d64:	b087      	sub	sp, #28
 8005d66:	d804      	bhi.n	8005d72 <__ieee754_rem_pio2f+0x1e>
 8005d68:	2300      	movs	r3, #0
 8005d6a:	6008      	str	r0, [r1, #0]
 8005d6c:	604b      	str	r3, [r1, #4]
 8005d6e:	2500      	movs	r5, #0
 8005d70:	e01d      	b.n	8005dae <__ieee754_rem_pio2f+0x5a>
 8005d72:	4a9f      	ldr	r2, [pc, #636]	@ (8005ff0 <__ieee754_rem_pio2f+0x29c>)
 8005d74:	4590      	cmp	r8, r2
 8005d76:	d84f      	bhi.n	8005e18 <__ieee754_rem_pio2f+0xc4>
 8005d78:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 8005d7c:	2800      	cmp	r0, #0
 8005d7e:	499d      	ldr	r1, [pc, #628]	@ (8005ff4 <__ieee754_rem_pio2f+0x2a0>)
 8005d80:	4f9d      	ldr	r7, [pc, #628]	@ (8005ff8 <__ieee754_rem_pio2f+0x2a4>)
 8005d82:	f025 050f 	bic.w	r5, r5, #15
 8005d86:	dd24      	ble.n	8005dd2 <__ieee754_rem_pio2f+0x7e>
 8005d88:	f7fa f9e4 	bl	8000154 <__aeabi_fsub>
 8005d8c:	42bd      	cmp	r5, r7
 8005d8e:	4606      	mov	r6, r0
 8005d90:	d011      	beq.n	8005db6 <__ieee754_rem_pio2f+0x62>
 8005d92:	499a      	ldr	r1, [pc, #616]	@ (8005ffc <__ieee754_rem_pio2f+0x2a8>)
 8005d94:	f7fa f9de 	bl	8000154 <__aeabi_fsub>
 8005d98:	4601      	mov	r1, r0
 8005d9a:	4605      	mov	r5, r0
 8005d9c:	4630      	mov	r0, r6
 8005d9e:	f7fa f9d9 	bl	8000154 <__aeabi_fsub>
 8005da2:	4996      	ldr	r1, [pc, #600]	@ (8005ffc <__ieee754_rem_pio2f+0x2a8>)
 8005da4:	f7fa f9d6 	bl	8000154 <__aeabi_fsub>
 8005da8:	6025      	str	r5, [r4, #0]
 8005daa:	2501      	movs	r5, #1
 8005dac:	6060      	str	r0, [r4, #4]
 8005dae:	4628      	mov	r0, r5
 8005db0:	b007      	add	sp, #28
 8005db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005db6:	4992      	ldr	r1, [pc, #584]	@ (8006000 <__ieee754_rem_pio2f+0x2ac>)
 8005db8:	f7fa f9cc 	bl	8000154 <__aeabi_fsub>
 8005dbc:	4991      	ldr	r1, [pc, #580]	@ (8006004 <__ieee754_rem_pio2f+0x2b0>)
 8005dbe:	4606      	mov	r6, r0
 8005dc0:	f7fa f9c8 	bl	8000154 <__aeabi_fsub>
 8005dc4:	4601      	mov	r1, r0
 8005dc6:	4605      	mov	r5, r0
 8005dc8:	4630      	mov	r0, r6
 8005dca:	f7fa f9c3 	bl	8000154 <__aeabi_fsub>
 8005dce:	498d      	ldr	r1, [pc, #564]	@ (8006004 <__ieee754_rem_pio2f+0x2b0>)
 8005dd0:	e7e8      	b.n	8005da4 <__ieee754_rem_pio2f+0x50>
 8005dd2:	f7fa f9c1 	bl	8000158 <__addsf3>
 8005dd6:	42bd      	cmp	r5, r7
 8005dd8:	4606      	mov	r6, r0
 8005dda:	d00f      	beq.n	8005dfc <__ieee754_rem_pio2f+0xa8>
 8005ddc:	4987      	ldr	r1, [pc, #540]	@ (8005ffc <__ieee754_rem_pio2f+0x2a8>)
 8005dde:	f7fa f9bb 	bl	8000158 <__addsf3>
 8005de2:	4601      	mov	r1, r0
 8005de4:	4605      	mov	r5, r0
 8005de6:	4630      	mov	r0, r6
 8005de8:	f7fa f9b4 	bl	8000154 <__aeabi_fsub>
 8005dec:	4983      	ldr	r1, [pc, #524]	@ (8005ffc <__ieee754_rem_pio2f+0x2a8>)
 8005dee:	f7fa f9b3 	bl	8000158 <__addsf3>
 8005df2:	6025      	str	r5, [r4, #0]
 8005df4:	6060      	str	r0, [r4, #4]
 8005df6:	f04f 35ff 	mov.w	r5, #4294967295
 8005dfa:	e7d8      	b.n	8005dae <__ieee754_rem_pio2f+0x5a>
 8005dfc:	4980      	ldr	r1, [pc, #512]	@ (8006000 <__ieee754_rem_pio2f+0x2ac>)
 8005dfe:	f7fa f9ab 	bl	8000158 <__addsf3>
 8005e02:	4980      	ldr	r1, [pc, #512]	@ (8006004 <__ieee754_rem_pio2f+0x2b0>)
 8005e04:	4606      	mov	r6, r0
 8005e06:	f7fa f9a7 	bl	8000158 <__addsf3>
 8005e0a:	4601      	mov	r1, r0
 8005e0c:	4605      	mov	r5, r0
 8005e0e:	4630      	mov	r0, r6
 8005e10:	f7fa f9a0 	bl	8000154 <__aeabi_fsub>
 8005e14:	497b      	ldr	r1, [pc, #492]	@ (8006004 <__ieee754_rem_pio2f+0x2b0>)
 8005e16:	e7ea      	b.n	8005dee <__ieee754_rem_pio2f+0x9a>
 8005e18:	4a7b      	ldr	r2, [pc, #492]	@ (8006008 <__ieee754_rem_pio2f+0x2b4>)
 8005e1a:	4590      	cmp	r8, r2
 8005e1c:	f200 8095 	bhi.w	8005f4a <__ieee754_rem_pio2f+0x1f6>
 8005e20:	f000 f8fe 	bl	8006020 <fabsf>
 8005e24:	4979      	ldr	r1, [pc, #484]	@ (800600c <__ieee754_rem_pio2f+0x2b8>)
 8005e26:	4606      	mov	r6, r0
 8005e28:	f7fa fa9e 	bl	8000368 <__aeabi_fmul>
 8005e2c:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8005e30:	f7fa f992 	bl	8000158 <__addsf3>
 8005e34:	f7fa fc74 	bl	8000720 <__aeabi_f2iz>
 8005e38:	4605      	mov	r5, r0
 8005e3a:	f7fa fa41 	bl	80002c0 <__aeabi_i2f>
 8005e3e:	496d      	ldr	r1, [pc, #436]	@ (8005ff4 <__ieee754_rem_pio2f+0x2a0>)
 8005e40:	4681      	mov	r9, r0
 8005e42:	f7fa fa91 	bl	8000368 <__aeabi_fmul>
 8005e46:	4601      	mov	r1, r0
 8005e48:	4630      	mov	r0, r6
 8005e4a:	f7fa f983 	bl	8000154 <__aeabi_fsub>
 8005e4e:	496b      	ldr	r1, [pc, #428]	@ (8005ffc <__ieee754_rem_pio2f+0x2a8>)
 8005e50:	4607      	mov	r7, r0
 8005e52:	4648      	mov	r0, r9
 8005e54:	f7fa fa88 	bl	8000368 <__aeabi_fmul>
 8005e58:	2d1f      	cmp	r5, #31
 8005e5a:	4606      	mov	r6, r0
 8005e5c:	dc0e      	bgt.n	8005e7c <__ieee754_rem_pio2f+0x128>
 8005e5e:	4a6c      	ldr	r2, [pc, #432]	@ (8006010 <__ieee754_rem_pio2f+0x2bc>)
 8005e60:	1e69      	subs	r1, r5, #1
 8005e62:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8005e66:	f02a 4300 	bic.w	r3, sl, #2147483648	@ 0x80000000
 8005e6a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d004      	beq.n	8005e7c <__ieee754_rem_pio2f+0x128>
 8005e72:	4631      	mov	r1, r6
 8005e74:	4638      	mov	r0, r7
 8005e76:	f7fa f96d 	bl	8000154 <__aeabi_fsub>
 8005e7a:	e00b      	b.n	8005e94 <__ieee754_rem_pio2f+0x140>
 8005e7c:	4631      	mov	r1, r6
 8005e7e:	4638      	mov	r0, r7
 8005e80:	f7fa f968 	bl	8000154 <__aeabi_fsub>
 8005e84:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8005e88:	ebc3 53d8 	rsb	r3, r3, r8, lsr #23
 8005e8c:	2b08      	cmp	r3, #8
 8005e8e:	ea4f 5be8 	mov.w	fp, r8, asr #23
 8005e92:	dc01      	bgt.n	8005e98 <__ieee754_rem_pio2f+0x144>
 8005e94:	6020      	str	r0, [r4, #0]
 8005e96:	e026      	b.n	8005ee6 <__ieee754_rem_pio2f+0x192>
 8005e98:	4959      	ldr	r1, [pc, #356]	@ (8006000 <__ieee754_rem_pio2f+0x2ac>)
 8005e9a:	4648      	mov	r0, r9
 8005e9c:	f7fa fa64 	bl	8000368 <__aeabi_fmul>
 8005ea0:	4606      	mov	r6, r0
 8005ea2:	4601      	mov	r1, r0
 8005ea4:	4638      	mov	r0, r7
 8005ea6:	f7fa f955 	bl	8000154 <__aeabi_fsub>
 8005eaa:	4601      	mov	r1, r0
 8005eac:	4680      	mov	r8, r0
 8005eae:	4638      	mov	r0, r7
 8005eb0:	f7fa f950 	bl	8000154 <__aeabi_fsub>
 8005eb4:	4631      	mov	r1, r6
 8005eb6:	f7fa f94d 	bl	8000154 <__aeabi_fsub>
 8005eba:	4606      	mov	r6, r0
 8005ebc:	4951      	ldr	r1, [pc, #324]	@ (8006004 <__ieee754_rem_pio2f+0x2b0>)
 8005ebe:	4648      	mov	r0, r9
 8005ec0:	f7fa fa52 	bl	8000368 <__aeabi_fmul>
 8005ec4:	4631      	mov	r1, r6
 8005ec6:	f7fa f945 	bl	8000154 <__aeabi_fsub>
 8005eca:	4601      	mov	r1, r0
 8005ecc:	4606      	mov	r6, r0
 8005ece:	4640      	mov	r0, r8
 8005ed0:	f7fa f940 	bl	8000154 <__aeabi_fsub>
 8005ed4:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8005ed8:	ebab 0b03 	sub.w	fp, fp, r3
 8005edc:	f1bb 0f19 	cmp.w	fp, #25
 8005ee0:	dc18      	bgt.n	8005f14 <__ieee754_rem_pio2f+0x1c0>
 8005ee2:	4647      	mov	r7, r8
 8005ee4:	6020      	str	r0, [r4, #0]
 8005ee6:	f8d4 8000 	ldr.w	r8, [r4]
 8005eea:	4638      	mov	r0, r7
 8005eec:	4641      	mov	r1, r8
 8005eee:	f7fa f931 	bl	8000154 <__aeabi_fsub>
 8005ef2:	4631      	mov	r1, r6
 8005ef4:	f7fa f92e 	bl	8000154 <__aeabi_fsub>
 8005ef8:	f1ba 0f00 	cmp.w	sl, #0
 8005efc:	6060      	str	r0, [r4, #4]
 8005efe:	f6bf af56 	bge.w	8005dae <__ieee754_rem_pio2f+0x5a>
 8005f02:	f108 4800 	add.w	r8, r8, #2147483648	@ 0x80000000
 8005f06:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8005f0a:	f8c4 8000 	str.w	r8, [r4]
 8005f0e:	6060      	str	r0, [r4, #4]
 8005f10:	426d      	negs	r5, r5
 8005f12:	e74c      	b.n	8005dae <__ieee754_rem_pio2f+0x5a>
 8005f14:	493f      	ldr	r1, [pc, #252]	@ (8006014 <__ieee754_rem_pio2f+0x2c0>)
 8005f16:	4648      	mov	r0, r9
 8005f18:	f7fa fa26 	bl	8000368 <__aeabi_fmul>
 8005f1c:	4606      	mov	r6, r0
 8005f1e:	4601      	mov	r1, r0
 8005f20:	4640      	mov	r0, r8
 8005f22:	f7fa f917 	bl	8000154 <__aeabi_fsub>
 8005f26:	4601      	mov	r1, r0
 8005f28:	4607      	mov	r7, r0
 8005f2a:	4640      	mov	r0, r8
 8005f2c:	f7fa f912 	bl	8000154 <__aeabi_fsub>
 8005f30:	4631      	mov	r1, r6
 8005f32:	f7fa f90f 	bl	8000154 <__aeabi_fsub>
 8005f36:	4606      	mov	r6, r0
 8005f38:	4937      	ldr	r1, [pc, #220]	@ (8006018 <__ieee754_rem_pio2f+0x2c4>)
 8005f3a:	4648      	mov	r0, r9
 8005f3c:	f7fa fa14 	bl	8000368 <__aeabi_fmul>
 8005f40:	4631      	mov	r1, r6
 8005f42:	f7fa f907 	bl	8000154 <__aeabi_fsub>
 8005f46:	4606      	mov	r6, r0
 8005f48:	e793      	b.n	8005e72 <__ieee754_rem_pio2f+0x11e>
 8005f4a:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8005f4e:	d305      	bcc.n	8005f5c <__ieee754_rem_pio2f+0x208>
 8005f50:	4601      	mov	r1, r0
 8005f52:	f7fa f8ff 	bl	8000154 <__aeabi_fsub>
 8005f56:	6060      	str	r0, [r4, #4]
 8005f58:	6020      	str	r0, [r4, #0]
 8005f5a:	e708      	b.n	8005d6e <__ieee754_rem_pio2f+0x1a>
 8005f5c:	ea4f 56e8 	mov.w	r6, r8, asr #23
 8005f60:	3e86      	subs	r6, #134	@ 0x86
 8005f62:	eba8 58c6 	sub.w	r8, r8, r6, lsl #23
 8005f66:	4640      	mov	r0, r8
 8005f68:	f7fa fbda 	bl	8000720 <__aeabi_f2iz>
 8005f6c:	f7fa f9a8 	bl	80002c0 <__aeabi_i2f>
 8005f70:	4601      	mov	r1, r0
 8005f72:	9003      	str	r0, [sp, #12]
 8005f74:	4640      	mov	r0, r8
 8005f76:	f7fa f8ed 	bl	8000154 <__aeabi_fsub>
 8005f7a:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8005f7e:	f7fa f9f3 	bl	8000368 <__aeabi_fmul>
 8005f82:	4607      	mov	r7, r0
 8005f84:	f7fa fbcc 	bl	8000720 <__aeabi_f2iz>
 8005f88:	f7fa f99a 	bl	80002c0 <__aeabi_i2f>
 8005f8c:	4601      	mov	r1, r0
 8005f8e:	9004      	str	r0, [sp, #16]
 8005f90:	4605      	mov	r5, r0
 8005f92:	4638      	mov	r0, r7
 8005f94:	f7fa f8de 	bl	8000154 <__aeabi_fsub>
 8005f98:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8005f9c:	f7fa f9e4 	bl	8000368 <__aeabi_fmul>
 8005fa0:	2100      	movs	r1, #0
 8005fa2:	9005      	str	r0, [sp, #20]
 8005fa4:	f7fa fb74 	bl	8000690 <__aeabi_fcmpeq>
 8005fa8:	b1f0      	cbz	r0, 8005fe8 <__ieee754_rem_pio2f+0x294>
 8005faa:	2100      	movs	r1, #0
 8005fac:	4628      	mov	r0, r5
 8005fae:	f7fa fb6f 	bl	8000690 <__aeabi_fcmpeq>
 8005fb2:	2800      	cmp	r0, #0
 8005fb4:	bf14      	ite	ne
 8005fb6:	2301      	movne	r3, #1
 8005fb8:	2302      	moveq	r3, #2
 8005fba:	4a18      	ldr	r2, [pc, #96]	@ (800601c <__ieee754_rem_pio2f+0x2c8>)
 8005fbc:	4621      	mov	r1, r4
 8005fbe:	9201      	str	r2, [sp, #4]
 8005fc0:	2202      	movs	r2, #2
 8005fc2:	a803      	add	r0, sp, #12
 8005fc4:	9200      	str	r2, [sp, #0]
 8005fc6:	4632      	mov	r2, r6
 8005fc8:	f000 f898 	bl	80060fc <__kernel_rem_pio2f>
 8005fcc:	f1ba 0f00 	cmp.w	sl, #0
 8005fd0:	4605      	mov	r5, r0
 8005fd2:	f6bf aeec 	bge.w	8005dae <__ieee754_rem_pio2f+0x5a>
 8005fd6:	6823      	ldr	r3, [r4, #0]
 8005fd8:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8005fdc:	6023      	str	r3, [r4, #0]
 8005fde:	6863      	ldr	r3, [r4, #4]
 8005fe0:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8005fe4:	6063      	str	r3, [r4, #4]
 8005fe6:	e793      	b.n	8005f10 <__ieee754_rem_pio2f+0x1bc>
 8005fe8:	2303      	movs	r3, #3
 8005fea:	e7e6      	b.n	8005fba <__ieee754_rem_pio2f+0x266>
 8005fec:	3f490fd8 	.word	0x3f490fd8
 8005ff0:	4016cbe3 	.word	0x4016cbe3
 8005ff4:	3fc90f80 	.word	0x3fc90f80
 8005ff8:	3fc90fd0 	.word	0x3fc90fd0
 8005ffc:	37354443 	.word	0x37354443
 8006000:	37354400 	.word	0x37354400
 8006004:	2e85a308 	.word	0x2e85a308
 8006008:	43490f80 	.word	0x43490f80
 800600c:	3f22f984 	.word	0x3f22f984
 8006010:	0800d210 	.word	0x0800d210
 8006014:	2e85a300 	.word	0x2e85a300
 8006018:	248d3132 	.word	0x248d3132
 800601c:	0800d290 	.word	0x0800d290

08006020 <fabsf>:
 8006020:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8006024:	4770      	bx	lr
	...

08006028 <scalbnf>:
 8006028:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800602c:	b538      	push	{r3, r4, r5, lr}
 800602e:	4603      	mov	r3, r0
 8006030:	460d      	mov	r5, r1
 8006032:	4604      	mov	r4, r0
 8006034:	d02e      	beq.n	8006094 <scalbnf+0x6c>
 8006036:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800603a:	d304      	bcc.n	8006046 <scalbnf+0x1e>
 800603c:	4601      	mov	r1, r0
 800603e:	f7fa f88b 	bl	8000158 <__addsf3>
 8006042:	4603      	mov	r3, r0
 8006044:	e026      	b.n	8006094 <scalbnf+0x6c>
 8006046:	f010 4fff 	tst.w	r0, #2139095040	@ 0x7f800000
 800604a:	d118      	bne.n	800607e <scalbnf+0x56>
 800604c:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
 8006050:	f7fa f98a 	bl	8000368 <__aeabi_fmul>
 8006054:	4a17      	ldr	r2, [pc, #92]	@ (80060b4 <scalbnf+0x8c>)
 8006056:	4603      	mov	r3, r0
 8006058:	4295      	cmp	r5, r2
 800605a:	db0c      	blt.n	8006076 <scalbnf+0x4e>
 800605c:	4604      	mov	r4, r0
 800605e:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8006062:	3a19      	subs	r2, #25
 8006064:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8006068:	428d      	cmp	r5, r1
 800606a:	dd0a      	ble.n	8006082 <scalbnf+0x5a>
 800606c:	4912      	ldr	r1, [pc, #72]	@ (80060b8 <scalbnf+0x90>)
 800606e:	4618      	mov	r0, r3
 8006070:	f361 001e 	bfi	r0, r1, #0, #31
 8006074:	e000      	b.n	8006078 <scalbnf+0x50>
 8006076:	4911      	ldr	r1, [pc, #68]	@ (80060bc <scalbnf+0x94>)
 8006078:	f7fa f976 	bl	8000368 <__aeabi_fmul>
 800607c:	e7e1      	b.n	8006042 <scalbnf+0x1a>
 800607e:	0dd2      	lsrs	r2, r2, #23
 8006080:	e7f0      	b.n	8006064 <scalbnf+0x3c>
 8006082:	1951      	adds	r1, r2, r5
 8006084:	29fe      	cmp	r1, #254	@ 0xfe
 8006086:	dcf1      	bgt.n	800606c <scalbnf+0x44>
 8006088:	2900      	cmp	r1, #0
 800608a:	dd05      	ble.n	8006098 <scalbnf+0x70>
 800608c:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 8006090:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 8006094:	4618      	mov	r0, r3
 8006096:	bd38      	pop	{r3, r4, r5, pc}
 8006098:	f111 0f16 	cmn.w	r1, #22
 800609c:	da01      	bge.n	80060a2 <scalbnf+0x7a>
 800609e:	4907      	ldr	r1, [pc, #28]	@ (80060bc <scalbnf+0x94>)
 80060a0:	e7e5      	b.n	800606e <scalbnf+0x46>
 80060a2:	f101 0019 	add.w	r0, r1, #25
 80060a6:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 80060aa:	f04f 514c 	mov.w	r1, #855638016	@ 0x33000000
 80060ae:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 80060b2:	e7e1      	b.n	8006078 <scalbnf+0x50>
 80060b4:	ffff3cb0 	.word	0xffff3cb0
 80060b8:	7149f2ca 	.word	0x7149f2ca
 80060bc:	0da24260 	.word	0x0da24260

080060c0 <with_errnof>:
 80060c0:	b538      	push	{r3, r4, r5, lr}
 80060c2:	4604      	mov	r4, r0
 80060c4:	460d      	mov	r5, r1
 80060c6:	f7fe fc17 	bl	80048f8 <__errno>
 80060ca:	6005      	str	r5, [r0, #0]
 80060cc:	4620      	mov	r0, r4
 80060ce:	bd38      	pop	{r3, r4, r5, pc}

080060d0 <xflowf>:
 80060d0:	b508      	push	{r3, lr}
 80060d2:	b140      	cbz	r0, 80060e6 <xflowf+0x16>
 80060d4:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 80060d8:	f7fa f946 	bl	8000368 <__aeabi_fmul>
 80060dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80060e0:	2122      	movs	r1, #34	@ 0x22
 80060e2:	f7ff bfed 	b.w	80060c0 <with_errnof>
 80060e6:	4608      	mov	r0, r1
 80060e8:	e7f6      	b.n	80060d8 <xflowf+0x8>

080060ea <__math_uflowf>:
 80060ea:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 80060ee:	f7ff bfef 	b.w	80060d0 <xflowf>

080060f2 <__math_oflowf>:
 80060f2:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 80060f6:	f7ff bfeb 	b.w	80060d0 <xflowf>
	...

080060fc <__kernel_rem_pio2f>:
 80060fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006100:	b0db      	sub	sp, #364	@ 0x16c
 8006102:	9202      	str	r2, [sp, #8]
 8006104:	9304      	str	r3, [sp, #16]
 8006106:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8006108:	4bac      	ldr	r3, [pc, #688]	@ (80063bc <__kernel_rem_pio2f+0x2c0>)
 800610a:	9005      	str	r0, [sp, #20]
 800610c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006110:	9100      	str	r1, [sp, #0]
 8006112:	9301      	str	r3, [sp, #4]
 8006114:	9b04      	ldr	r3, [sp, #16]
 8006116:	3b01      	subs	r3, #1
 8006118:	9303      	str	r3, [sp, #12]
 800611a:	9b02      	ldr	r3, [sp, #8]
 800611c:	1d1a      	adds	r2, r3, #4
 800611e:	f2c0 8099 	blt.w	8006254 <__kernel_rem_pio2f+0x158>
 8006122:	1edc      	subs	r4, r3, #3
 8006124:	bf48      	it	mi
 8006126:	1d1c      	addmi	r4, r3, #4
 8006128:	10e4      	asrs	r4, r4, #3
 800612a:	2500      	movs	r5, #0
 800612c:	f04f 0b00 	mov.w	fp, #0
 8006130:	1c67      	adds	r7, r4, #1
 8006132:	00fb      	lsls	r3, r7, #3
 8006134:	9306      	str	r3, [sp, #24]
 8006136:	9b02      	ldr	r3, [sp, #8]
 8006138:	9a03      	ldr	r2, [sp, #12]
 800613a:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 800613e:	9b01      	ldr	r3, [sp, #4]
 8006140:	eba4 0802 	sub.w	r8, r4, r2
 8006144:	eb03 0902 	add.w	r9, r3, r2
 8006148:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 800614a:	ae1e      	add	r6, sp, #120	@ 0x78
 800614c:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 8006150:	454d      	cmp	r5, r9
 8006152:	f340 8081 	ble.w	8006258 <__kernel_rem_pio2f+0x15c>
 8006156:	9a04      	ldr	r2, [sp, #16]
 8006158:	ab1e      	add	r3, sp, #120	@ 0x78
 800615a:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 800615e:	f04f 0900 	mov.w	r9, #0
 8006162:	2300      	movs	r3, #0
 8006164:	f50d 7a8c 	add.w	sl, sp, #280	@ 0x118
 8006168:	9a01      	ldr	r2, [sp, #4]
 800616a:	4591      	cmp	r9, r2
 800616c:	f340 809a 	ble.w	80062a4 <__kernel_rem_pio2f+0x1a8>
 8006170:	4613      	mov	r3, r2
 8006172:	aa0a      	add	r2, sp, #40	@ 0x28
 8006174:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006178:	9308      	str	r3, [sp, #32]
 800617a:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 800617c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006180:	9c01      	ldr	r4, [sp, #4]
 8006182:	9307      	str	r3, [sp, #28]
 8006184:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 8006188:	4646      	mov	r6, r8
 800618a:	4625      	mov	r5, r4
 800618c:	f04f 4987 	mov.w	r9, #1132462080	@ 0x43800000
 8006190:	ab5a      	add	r3, sp, #360	@ 0x168
 8006192:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006196:	f853 bc50 	ldr.w	fp, [r3, #-80]
 800619a:	f50d 7a8c 	add.w	sl, sp, #280	@ 0x118
 800619e:	2d00      	cmp	r5, #0
 80061a0:	f300 8085 	bgt.w	80062ae <__kernel_rem_pio2f+0x1b2>
 80061a4:	4639      	mov	r1, r7
 80061a6:	4658      	mov	r0, fp
 80061a8:	f7ff ff3e 	bl	8006028 <scalbnf>
 80061ac:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 80061b0:	4605      	mov	r5, r0
 80061b2:	f7fa f8d9 	bl	8000368 <__aeabi_fmul>
 80061b6:	f000 fa3f 	bl	8006638 <floorf>
 80061ba:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 80061be:	f7fa f8d3 	bl	8000368 <__aeabi_fmul>
 80061c2:	4601      	mov	r1, r0
 80061c4:	4628      	mov	r0, r5
 80061c6:	f7f9 ffc5 	bl	8000154 <__aeabi_fsub>
 80061ca:	4605      	mov	r5, r0
 80061cc:	f7fa faa8 	bl	8000720 <__aeabi_f2iz>
 80061d0:	4606      	mov	r6, r0
 80061d2:	f7fa f875 	bl	80002c0 <__aeabi_i2f>
 80061d6:	4601      	mov	r1, r0
 80061d8:	4628      	mov	r0, r5
 80061da:	f7f9 ffbb 	bl	8000154 <__aeabi_fsub>
 80061de:	2f00      	cmp	r7, #0
 80061e0:	4681      	mov	r9, r0
 80061e2:	f340 8081 	ble.w	80062e8 <__kernel_rem_pio2f+0x1ec>
 80061e6:	1e62      	subs	r2, r4, #1
 80061e8:	ab0a      	add	r3, sp, #40	@ 0x28
 80061ea:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80061ee:	f1c7 0108 	rsb	r1, r7, #8
 80061f2:	fa45 f301 	asr.w	r3, r5, r1
 80061f6:	441e      	add	r6, r3
 80061f8:	408b      	lsls	r3, r1
 80061fa:	1aed      	subs	r5, r5, r3
 80061fc:	ab0a      	add	r3, sp, #40	@ 0x28
 80061fe:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006202:	f1c7 0307 	rsb	r3, r7, #7
 8006206:	411d      	asrs	r5, r3
 8006208:	2d00      	cmp	r5, #0
 800620a:	dd7a      	ble.n	8006302 <__kernel_rem_pio2f+0x206>
 800620c:	2200      	movs	r2, #0
 800620e:	4692      	mov	sl, r2
 8006210:	3601      	adds	r6, #1
 8006212:	4294      	cmp	r4, r2
 8006214:	f300 80aa 	bgt.w	800636c <__kernel_rem_pio2f+0x270>
 8006218:	2f00      	cmp	r7, #0
 800621a:	dd05      	ble.n	8006228 <__kernel_rem_pio2f+0x12c>
 800621c:	2f01      	cmp	r7, #1
 800621e:	f000 80b6 	beq.w	800638e <__kernel_rem_pio2f+0x292>
 8006222:	2f02      	cmp	r7, #2
 8006224:	f000 80bd 	beq.w	80063a2 <__kernel_rem_pio2f+0x2a6>
 8006228:	2d02      	cmp	r5, #2
 800622a:	d16a      	bne.n	8006302 <__kernel_rem_pio2f+0x206>
 800622c:	4649      	mov	r1, r9
 800622e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8006232:	f7f9 ff8f 	bl	8000154 <__aeabi_fsub>
 8006236:	4681      	mov	r9, r0
 8006238:	f1ba 0f00 	cmp.w	sl, #0
 800623c:	d061      	beq.n	8006302 <__kernel_rem_pio2f+0x206>
 800623e:	4639      	mov	r1, r7
 8006240:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8006244:	f7ff fef0 	bl	8006028 <scalbnf>
 8006248:	4601      	mov	r1, r0
 800624a:	4648      	mov	r0, r9
 800624c:	f7f9 ff82 	bl	8000154 <__aeabi_fsub>
 8006250:	4681      	mov	r9, r0
 8006252:	e056      	b.n	8006302 <__kernel_rem_pio2f+0x206>
 8006254:	2400      	movs	r4, #0
 8006256:	e768      	b.n	800612a <__kernel_rem_pio2f+0x2e>
 8006258:	eb18 0f05 	cmn.w	r8, r5
 800625c:	d407      	bmi.n	800626e <__kernel_rem_pio2f+0x172>
 800625e:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 8006262:	f7fa f82d 	bl	80002c0 <__aeabi_i2f>
 8006266:	f846 0b04 	str.w	r0, [r6], #4
 800626a:	3501      	adds	r5, #1
 800626c:	e770      	b.n	8006150 <__kernel_rem_pio2f+0x54>
 800626e:	4658      	mov	r0, fp
 8006270:	e7f9      	b.n	8006266 <__kernel_rem_pio2f+0x16a>
 8006272:	9307      	str	r3, [sp, #28]
 8006274:	9b05      	ldr	r3, [sp, #20]
 8006276:	f85b 1d04 	ldr.w	r1, [fp, #-4]!
 800627a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800627e:	f7fa f873 	bl	8000368 <__aeabi_fmul>
 8006282:	4601      	mov	r1, r0
 8006284:	4630      	mov	r0, r6
 8006286:	f7f9 ff67 	bl	8000158 <__addsf3>
 800628a:	4606      	mov	r6, r0
 800628c:	9b07      	ldr	r3, [sp, #28]
 800628e:	f108 0801 	add.w	r8, r8, #1
 8006292:	9a03      	ldr	r2, [sp, #12]
 8006294:	4590      	cmp	r8, r2
 8006296:	ddec      	ble.n	8006272 <__kernel_rem_pio2f+0x176>
 8006298:	f84a 6b04 	str.w	r6, [sl], #4
 800629c:	f109 0901 	add.w	r9, r9, #1
 80062a0:	3504      	adds	r5, #4
 80062a2:	e761      	b.n	8006168 <__kernel_rem_pio2f+0x6c>
 80062a4:	46ab      	mov	fp, r5
 80062a6:	461e      	mov	r6, r3
 80062a8:	f04f 0800 	mov.w	r8, #0
 80062ac:	e7f1      	b.n	8006292 <__kernel_rem_pio2f+0x196>
 80062ae:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 80062b2:	4658      	mov	r0, fp
 80062b4:	f7fa f858 	bl	8000368 <__aeabi_fmul>
 80062b8:	f7fa fa32 	bl	8000720 <__aeabi_f2iz>
 80062bc:	f7fa f800 	bl	80002c0 <__aeabi_i2f>
 80062c0:	4649      	mov	r1, r9
 80062c2:	9009      	str	r0, [sp, #36]	@ 0x24
 80062c4:	f7fa f850 	bl	8000368 <__aeabi_fmul>
 80062c8:	4601      	mov	r1, r0
 80062ca:	4658      	mov	r0, fp
 80062cc:	f7f9 ff42 	bl	8000154 <__aeabi_fsub>
 80062d0:	f7fa fa26 	bl	8000720 <__aeabi_f2iz>
 80062d4:	3d01      	subs	r5, #1
 80062d6:	f846 0b04 	str.w	r0, [r6], #4
 80062da:	f85a 1025 	ldr.w	r1, [sl, r5, lsl #2]
 80062de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80062e0:	f7f9 ff3a 	bl	8000158 <__addsf3>
 80062e4:	4683      	mov	fp, r0
 80062e6:	e75a      	b.n	800619e <__kernel_rem_pio2f+0xa2>
 80062e8:	d105      	bne.n	80062f6 <__kernel_rem_pio2f+0x1fa>
 80062ea:	1e63      	subs	r3, r4, #1
 80062ec:	aa0a      	add	r2, sp, #40	@ 0x28
 80062ee:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 80062f2:	11ed      	asrs	r5, r5, #7
 80062f4:	e788      	b.n	8006208 <__kernel_rem_pio2f+0x10c>
 80062f6:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80062fa:	f7fa f9e7 	bl	80006cc <__aeabi_fcmpge>
 80062fe:	4605      	mov	r5, r0
 8006300:	bb90      	cbnz	r0, 8006368 <__kernel_rem_pio2f+0x26c>
 8006302:	2100      	movs	r1, #0
 8006304:	4648      	mov	r0, r9
 8006306:	f7fa f9c3 	bl	8000690 <__aeabi_fcmpeq>
 800630a:	2800      	cmp	r0, #0
 800630c:	f000 8090 	beq.w	8006430 <__kernel_rem_pio2f+0x334>
 8006310:	2200      	movs	r2, #0
 8006312:	1e63      	subs	r3, r4, #1
 8006314:	9901      	ldr	r1, [sp, #4]
 8006316:	428b      	cmp	r3, r1
 8006318:	da4a      	bge.n	80063b0 <__kernel_rem_pio2f+0x2b4>
 800631a:	2a00      	cmp	r2, #0
 800631c:	d076      	beq.n	800640c <__kernel_rem_pio2f+0x310>
 800631e:	3c01      	subs	r4, #1
 8006320:	ab0a      	add	r3, sp, #40	@ 0x28
 8006322:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006326:	3f08      	subs	r7, #8
 8006328:	2b00      	cmp	r3, #0
 800632a:	d0f8      	beq.n	800631e <__kernel_rem_pio2f+0x222>
 800632c:	4639      	mov	r1, r7
 800632e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8006332:	f7ff fe79 	bl	8006028 <scalbnf>
 8006336:	46a2      	mov	sl, r4
 8006338:	4607      	mov	r7, r0
 800633a:	f04f 596e 	mov.w	r9, #998244352	@ 0x3b800000
 800633e:	f50d 788c 	add.w	r8, sp, #280	@ 0x118
 8006342:	f1ba 0f00 	cmp.w	sl, #0
 8006346:	f280 80a1 	bge.w	800648c <__kernel_rem_pio2f+0x390>
 800634a:	4627      	mov	r7, r4
 800634c:	2200      	movs	r2, #0
 800634e:	2f00      	cmp	r7, #0
 8006350:	f2c0 80cb 	blt.w	80064ea <__kernel_rem_pio2f+0x3ee>
 8006354:	a946      	add	r1, sp, #280	@ 0x118
 8006356:	4690      	mov	r8, r2
 8006358:	f04f 0a00 	mov.w	sl, #0
 800635c:	4b18      	ldr	r3, [pc, #96]	@ (80063c0 <__kernel_rem_pio2f+0x2c4>)
 800635e:	eb01 0b87 	add.w	fp, r1, r7, lsl #2
 8006362:	eba4 0907 	sub.w	r9, r4, r7
 8006366:	e0b4      	b.n	80064d2 <__kernel_rem_pio2f+0x3d6>
 8006368:	2502      	movs	r5, #2
 800636a:	e74f      	b.n	800620c <__kernel_rem_pio2f+0x110>
 800636c:	f858 3b04 	ldr.w	r3, [r8], #4
 8006370:	f1ba 0f00 	cmp.w	sl, #0
 8006374:	d108      	bne.n	8006388 <__kernel_rem_pio2f+0x28c>
 8006376:	b123      	cbz	r3, 8006382 <__kernel_rem_pio2f+0x286>
 8006378:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800637c:	f848 3c04 	str.w	r3, [r8, #-4]
 8006380:	2301      	movs	r3, #1
 8006382:	469a      	mov	sl, r3
 8006384:	3201      	adds	r2, #1
 8006386:	e744      	b.n	8006212 <__kernel_rem_pio2f+0x116>
 8006388:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 800638c:	e7f6      	b.n	800637c <__kernel_rem_pio2f+0x280>
 800638e:	1e62      	subs	r2, r4, #1
 8006390:	ab0a      	add	r3, sp, #40	@ 0x28
 8006392:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006396:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800639a:	a90a      	add	r1, sp, #40	@ 0x28
 800639c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80063a0:	e742      	b.n	8006228 <__kernel_rem_pio2f+0x12c>
 80063a2:	1e62      	subs	r2, r4, #1
 80063a4:	ab0a      	add	r3, sp, #40	@ 0x28
 80063a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063aa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80063ae:	e7f4      	b.n	800639a <__kernel_rem_pio2f+0x29e>
 80063b0:	a90a      	add	r1, sp, #40	@ 0x28
 80063b2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80063b6:	3b01      	subs	r3, #1
 80063b8:	430a      	orrs	r2, r1
 80063ba:	e7ab      	b.n	8006314 <__kernel_rem_pio2f+0x218>
 80063bc:	0800d5d4 	.word	0x0800d5d4
 80063c0:	0800d5a8 	.word	0x0800d5a8
 80063c4:	3301      	adds	r3, #1
 80063c6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80063ca:	2900      	cmp	r1, #0
 80063cc:	d0fa      	beq.n	80063c4 <__kernel_rem_pio2f+0x2c8>
 80063ce:	9a04      	ldr	r2, [sp, #16]
 80063d0:	a91e      	add	r1, sp, #120	@ 0x78
 80063d2:	18a2      	adds	r2, r4, r2
 80063d4:	1c66      	adds	r6, r4, #1
 80063d6:	eb01 0582 	add.w	r5, r1, r2, lsl #2
 80063da:	441c      	add	r4, r3
 80063dc:	f50d 798c 	add.w	r9, sp, #280	@ 0x118
 80063e0:	42b4      	cmp	r4, r6
 80063e2:	f6ff aecf 	blt.w	8006184 <__kernel_rem_pio2f+0x88>
 80063e6:	9b07      	ldr	r3, [sp, #28]
 80063e8:	46ab      	mov	fp, r5
 80063ea:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80063ee:	f7f9 ff67 	bl	80002c0 <__aeabi_i2f>
 80063f2:	f04f 0a00 	mov.w	sl, #0
 80063f6:	f04f 0800 	mov.w	r8, #0
 80063fa:	6028      	str	r0, [r5, #0]
 80063fc:	9b03      	ldr	r3, [sp, #12]
 80063fe:	459a      	cmp	sl, r3
 8006400:	dd07      	ble.n	8006412 <__kernel_rem_pio2f+0x316>
 8006402:	f849 8026 	str.w	r8, [r9, r6, lsl #2]
 8006406:	3504      	adds	r5, #4
 8006408:	3601      	adds	r6, #1
 800640a:	e7e9      	b.n	80063e0 <__kernel_rem_pio2f+0x2e4>
 800640c:	2301      	movs	r3, #1
 800640e:	9a08      	ldr	r2, [sp, #32]
 8006410:	e7d9      	b.n	80063c6 <__kernel_rem_pio2f+0x2ca>
 8006412:	9b05      	ldr	r3, [sp, #20]
 8006414:	f85b 0904 	ldr.w	r0, [fp], #-4
 8006418:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 800641c:	f7f9 ffa4 	bl	8000368 <__aeabi_fmul>
 8006420:	4601      	mov	r1, r0
 8006422:	4640      	mov	r0, r8
 8006424:	f7f9 fe98 	bl	8000158 <__addsf3>
 8006428:	f10a 0a01 	add.w	sl, sl, #1
 800642c:	4680      	mov	r8, r0
 800642e:	e7e5      	b.n	80063fc <__kernel_rem_pio2f+0x300>
 8006430:	9b06      	ldr	r3, [sp, #24]
 8006432:	9a02      	ldr	r2, [sp, #8]
 8006434:	4648      	mov	r0, r9
 8006436:	1a99      	subs	r1, r3, r2
 8006438:	f7ff fdf6 	bl	8006028 <scalbnf>
 800643c:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8006440:	4680      	mov	r8, r0
 8006442:	f7fa f943 	bl	80006cc <__aeabi_fcmpge>
 8006446:	b1f8      	cbz	r0, 8006488 <__kernel_rem_pio2f+0x38c>
 8006448:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 800644c:	4640      	mov	r0, r8
 800644e:	f7f9 ff8b 	bl	8000368 <__aeabi_fmul>
 8006452:	f7fa f965 	bl	8000720 <__aeabi_f2iz>
 8006456:	f7f9 ff33 	bl	80002c0 <__aeabi_i2f>
 800645a:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800645e:	4681      	mov	r9, r0
 8006460:	f7f9 ff82 	bl	8000368 <__aeabi_fmul>
 8006464:	4601      	mov	r1, r0
 8006466:	4640      	mov	r0, r8
 8006468:	f7f9 fe74 	bl	8000154 <__aeabi_fsub>
 800646c:	f7fa f958 	bl	8000720 <__aeabi_f2iz>
 8006470:	ab0a      	add	r3, sp, #40	@ 0x28
 8006472:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006476:	4648      	mov	r0, r9
 8006478:	3401      	adds	r4, #1
 800647a:	3708      	adds	r7, #8
 800647c:	f7fa f950 	bl	8000720 <__aeabi_f2iz>
 8006480:	ab0a      	add	r3, sp, #40	@ 0x28
 8006482:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006486:	e751      	b.n	800632c <__kernel_rem_pio2f+0x230>
 8006488:	4640      	mov	r0, r8
 800648a:	e7f7      	b.n	800647c <__kernel_rem_pio2f+0x380>
 800648c:	ab0a      	add	r3, sp, #40	@ 0x28
 800648e:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8006492:	f7f9 ff15 	bl	80002c0 <__aeabi_i2f>
 8006496:	4639      	mov	r1, r7
 8006498:	f7f9 ff66 	bl	8000368 <__aeabi_fmul>
 800649c:	4649      	mov	r1, r9
 800649e:	f848 002a 	str.w	r0, [r8, sl, lsl #2]
 80064a2:	4638      	mov	r0, r7
 80064a4:	f7f9 ff60 	bl	8000368 <__aeabi_fmul>
 80064a8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80064ac:	4607      	mov	r7, r0
 80064ae:	e748      	b.n	8006342 <__kernel_rem_pio2f+0x246>
 80064b0:	f853 0b04 	ldr.w	r0, [r3], #4
 80064b4:	f85b 1b04 	ldr.w	r1, [fp], #4
 80064b8:	9203      	str	r2, [sp, #12]
 80064ba:	9302      	str	r3, [sp, #8]
 80064bc:	f7f9 ff54 	bl	8000368 <__aeabi_fmul>
 80064c0:	4601      	mov	r1, r0
 80064c2:	4640      	mov	r0, r8
 80064c4:	f7f9 fe48 	bl	8000158 <__addsf3>
 80064c8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80064cc:	4680      	mov	r8, r0
 80064ce:	f10a 0a01 	add.w	sl, sl, #1
 80064d2:	9901      	ldr	r1, [sp, #4]
 80064d4:	458a      	cmp	sl, r1
 80064d6:	dc01      	bgt.n	80064dc <__kernel_rem_pio2f+0x3e0>
 80064d8:	45ca      	cmp	sl, r9
 80064da:	dde9      	ble.n	80064b0 <__kernel_rem_pio2f+0x3b4>
 80064dc:	ab5a      	add	r3, sp, #360	@ 0x168
 80064de:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 80064e2:	f849 8ca0 	str.w	r8, [r9, #-160]
 80064e6:	3f01      	subs	r7, #1
 80064e8:	e731      	b.n	800634e <__kernel_rem_pio2f+0x252>
 80064ea:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 80064ec:	2b02      	cmp	r3, #2
 80064ee:	dc07      	bgt.n	8006500 <__kernel_rem_pio2f+0x404>
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	dc4e      	bgt.n	8006592 <__kernel_rem_pio2f+0x496>
 80064f4:	d02e      	beq.n	8006554 <__kernel_rem_pio2f+0x458>
 80064f6:	f006 0007 	and.w	r0, r6, #7
 80064fa:	b05b      	add	sp, #364	@ 0x16c
 80064fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006500:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8006502:	2b03      	cmp	r3, #3
 8006504:	d1f7      	bne.n	80064f6 <__kernel_rem_pio2f+0x3fa>
 8006506:	f10d 0bc8 	add.w	fp, sp, #200	@ 0xc8
 800650a:	eb0b 0784 	add.w	r7, fp, r4, lsl #2
 800650e:	46b8      	mov	r8, r7
 8006510:	46a2      	mov	sl, r4
 8006512:	f1ba 0f00 	cmp.w	sl, #0
 8006516:	dc49      	bgt.n	80065ac <__kernel_rem_pio2f+0x4b0>
 8006518:	46a1      	mov	r9, r4
 800651a:	f1b9 0f01 	cmp.w	r9, #1
 800651e:	dc60      	bgt.n	80065e2 <__kernel_rem_pio2f+0x4e6>
 8006520:	2000      	movs	r0, #0
 8006522:	2c01      	cmp	r4, #1
 8006524:	dc76      	bgt.n	8006614 <__kernel_rem_pio2f+0x518>
 8006526:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 8006528:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 800652a:	2d00      	cmp	r5, #0
 800652c:	d178      	bne.n	8006620 <__kernel_rem_pio2f+0x524>
 800652e:	9900      	ldr	r1, [sp, #0]
 8006530:	600a      	str	r2, [r1, #0]
 8006532:	460a      	mov	r2, r1
 8006534:	604b      	str	r3, [r1, #4]
 8006536:	6090      	str	r0, [r2, #8]
 8006538:	e7dd      	b.n	80064f6 <__kernel_rem_pio2f+0x3fa>
 800653a:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 800653e:	f7f9 fe0b 	bl	8000158 <__addsf3>
 8006542:	3c01      	subs	r4, #1
 8006544:	2c00      	cmp	r4, #0
 8006546:	daf8      	bge.n	800653a <__kernel_rem_pio2f+0x43e>
 8006548:	b10d      	cbz	r5, 800654e <__kernel_rem_pio2f+0x452>
 800654a:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800654e:	9b00      	ldr	r3, [sp, #0]
 8006550:	6018      	str	r0, [r3, #0]
 8006552:	e7d0      	b.n	80064f6 <__kernel_rem_pio2f+0x3fa>
 8006554:	2000      	movs	r0, #0
 8006556:	af32      	add	r7, sp, #200	@ 0xc8
 8006558:	e7f4      	b.n	8006544 <__kernel_rem_pio2f+0x448>
 800655a:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 800655e:	f7f9 fdfb 	bl	8000158 <__addsf3>
 8006562:	f108 38ff 	add.w	r8, r8, #4294967295
 8006566:	f1b8 0f00 	cmp.w	r8, #0
 800656a:	daf6      	bge.n	800655a <__kernel_rem_pio2f+0x45e>
 800656c:	b1ad      	cbz	r5, 800659a <__kernel_rem_pio2f+0x49e>
 800656e:	f100 4300 	add.w	r3, r0, #2147483648	@ 0x80000000
 8006572:	9a00      	ldr	r2, [sp, #0]
 8006574:	4601      	mov	r1, r0
 8006576:	6013      	str	r3, [r2, #0]
 8006578:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 800657a:	f7f9 fdeb 	bl	8000154 <__aeabi_fsub>
 800657e:	f04f 0801 	mov.w	r8, #1
 8006582:	4544      	cmp	r4, r8
 8006584:	da0b      	bge.n	800659e <__kernel_rem_pio2f+0x4a2>
 8006586:	b10d      	cbz	r5, 800658c <__kernel_rem_pio2f+0x490>
 8006588:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800658c:	9b00      	ldr	r3, [sp, #0]
 800658e:	6058      	str	r0, [r3, #4]
 8006590:	e7b1      	b.n	80064f6 <__kernel_rem_pio2f+0x3fa>
 8006592:	46a0      	mov	r8, r4
 8006594:	2000      	movs	r0, #0
 8006596:	af32      	add	r7, sp, #200	@ 0xc8
 8006598:	e7e5      	b.n	8006566 <__kernel_rem_pio2f+0x46a>
 800659a:	4603      	mov	r3, r0
 800659c:	e7e9      	b.n	8006572 <__kernel_rem_pio2f+0x476>
 800659e:	f857 1f04 	ldr.w	r1, [r7, #4]!
 80065a2:	f7f9 fdd9 	bl	8000158 <__addsf3>
 80065a6:	f108 0801 	add.w	r8, r8, #1
 80065aa:	e7ea      	b.n	8006582 <__kernel_rem_pio2f+0x486>
 80065ac:	f8d8 3000 	ldr.w	r3, [r8]
 80065b0:	f858 2c04 	ldr.w	r2, [r8, #-4]
 80065b4:	4619      	mov	r1, r3
 80065b6:	4610      	mov	r0, r2
 80065b8:	9302      	str	r3, [sp, #8]
 80065ba:	9201      	str	r2, [sp, #4]
 80065bc:	f7f9 fdcc 	bl	8000158 <__addsf3>
 80065c0:	9a01      	ldr	r2, [sp, #4]
 80065c2:	4601      	mov	r1, r0
 80065c4:	4681      	mov	r9, r0
 80065c6:	4610      	mov	r0, r2
 80065c8:	f7f9 fdc4 	bl	8000154 <__aeabi_fsub>
 80065cc:	9b02      	ldr	r3, [sp, #8]
 80065ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80065d2:	4619      	mov	r1, r3
 80065d4:	f7f9 fdc0 	bl	8000158 <__addsf3>
 80065d8:	f848 0904 	str.w	r0, [r8], #-4
 80065dc:	f8c8 9000 	str.w	r9, [r8]
 80065e0:	e797      	b.n	8006512 <__kernel_rem_pio2f+0x416>
 80065e2:	f857 3c04 	ldr.w	r3, [r7, #-4]
 80065e6:	f8d7 a000 	ldr.w	sl, [r7]
 80065ea:	4618      	mov	r0, r3
 80065ec:	4651      	mov	r1, sl
 80065ee:	9301      	str	r3, [sp, #4]
 80065f0:	f7f9 fdb2 	bl	8000158 <__addsf3>
 80065f4:	9b01      	ldr	r3, [sp, #4]
 80065f6:	4601      	mov	r1, r0
 80065f8:	4680      	mov	r8, r0
 80065fa:	4618      	mov	r0, r3
 80065fc:	f7f9 fdaa 	bl	8000154 <__aeabi_fsub>
 8006600:	4651      	mov	r1, sl
 8006602:	f7f9 fda9 	bl	8000158 <__addsf3>
 8006606:	f847 0904 	str.w	r0, [r7], #-4
 800660a:	f109 39ff 	add.w	r9, r9, #4294967295
 800660e:	f8c7 8000 	str.w	r8, [r7]
 8006612:	e782      	b.n	800651a <__kernel_rem_pio2f+0x41e>
 8006614:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 8006618:	f7f9 fd9e 	bl	8000158 <__addsf3>
 800661c:	3c01      	subs	r4, #1
 800661e:	e780      	b.n	8006522 <__kernel_rem_pio2f+0x426>
 8006620:	9900      	ldr	r1, [sp, #0]
 8006622:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 8006626:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800662a:	600a      	str	r2, [r1, #0]
 800662c:	604b      	str	r3, [r1, #4]
 800662e:	460a      	mov	r2, r1
 8006630:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8006634:	e77f      	b.n	8006536 <__kernel_rem_pio2f+0x43a>
 8006636:	bf00      	nop

08006638 <floorf>:
 8006638:	b570      	push	{r4, r5, r6, lr}
 800663a:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 800663e:	3d7f      	subs	r5, #127	@ 0x7f
 8006640:	2d16      	cmp	r5, #22
 8006642:	4601      	mov	r1, r0
 8006644:	4604      	mov	r4, r0
 8006646:	f020 4600 	bic.w	r6, r0, #2147483648	@ 0x80000000
 800664a:	dc26      	bgt.n	800669a <floorf+0x62>
 800664c:	2d00      	cmp	r5, #0
 800664e:	da0f      	bge.n	8006670 <floorf+0x38>
 8006650:	4917      	ldr	r1, [pc, #92]	@ (80066b0 <floorf+0x78>)
 8006652:	f7f9 fd81 	bl	8000158 <__addsf3>
 8006656:	2100      	movs	r1, #0
 8006658:	f7fa f842 	bl	80006e0 <__aeabi_fcmpgt>
 800665c:	b130      	cbz	r0, 800666c <floorf+0x34>
 800665e:	2c00      	cmp	r4, #0
 8006660:	da23      	bge.n	80066aa <floorf+0x72>
 8006662:	2e00      	cmp	r6, #0
 8006664:	4c13      	ldr	r4, [pc, #76]	@ (80066b4 <floorf+0x7c>)
 8006666:	bf08      	it	eq
 8006668:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800666c:	4621      	mov	r1, r4
 800666e:	e01a      	b.n	80066a6 <floorf+0x6e>
 8006670:	4e11      	ldr	r6, [pc, #68]	@ (80066b8 <floorf+0x80>)
 8006672:	412e      	asrs	r6, r5
 8006674:	4230      	tst	r0, r6
 8006676:	d016      	beq.n	80066a6 <floorf+0x6e>
 8006678:	490d      	ldr	r1, [pc, #52]	@ (80066b0 <floorf+0x78>)
 800667a:	f7f9 fd6d 	bl	8000158 <__addsf3>
 800667e:	2100      	movs	r1, #0
 8006680:	f7fa f82e 	bl	80006e0 <__aeabi_fcmpgt>
 8006684:	2800      	cmp	r0, #0
 8006686:	d0f1      	beq.n	800666c <floorf+0x34>
 8006688:	2c00      	cmp	r4, #0
 800668a:	bfbe      	ittt	lt
 800668c:	f44f 0300 	movlt.w	r3, #8388608	@ 0x800000
 8006690:	412b      	asrlt	r3, r5
 8006692:	18e4      	addlt	r4, r4, r3
 8006694:	ea24 0406 	bic.w	r4, r4, r6
 8006698:	e7e8      	b.n	800666c <floorf+0x34>
 800669a:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 800669e:	d302      	bcc.n	80066a6 <floorf+0x6e>
 80066a0:	f7f9 fd5a 	bl	8000158 <__addsf3>
 80066a4:	4601      	mov	r1, r0
 80066a6:	4608      	mov	r0, r1
 80066a8:	bd70      	pop	{r4, r5, r6, pc}
 80066aa:	2400      	movs	r4, #0
 80066ac:	e7de      	b.n	800666c <floorf+0x34>
 80066ae:	bf00      	nop
 80066b0:	7149f2ca 	.word	0x7149f2ca
 80066b4:	bf800000 	.word	0xbf800000
 80066b8:	007fffff 	.word	0x007fffff

080066bc <_init>:
 80066bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066be:	bf00      	nop
 80066c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066c2:	bc08      	pop	{r3}
 80066c4:	469e      	mov	lr, r3
 80066c6:	4770      	bx	lr

080066c8 <_fini>:
 80066c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ca:	bf00      	nop
 80066cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066ce:	bc08      	pop	{r3}
 80066d0:	469e      	mov	lr, r3
 80066d2:	4770      	bx	lr
