
STM32PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b68  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08005c74  08005c74  00006c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060a0  080060a0  0000805c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080060a0  080060a0  000070a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060a8  080060a8  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060a8  080060a8  000070a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080060ac  080060ac  000070ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080060b0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ff0  2000005c  0800610c  0000805c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000104c  0800610c  0000904c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c2be  00000000  00000000  00008085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020df  00000000  00000000  00014343  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e70  00000000  00000000  00016428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b9c  00000000  00000000  00017298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018748  00000000  00000000  00017e34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010fa8  00000000  00000000  0003057c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b49d  00000000  00000000  00041524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cc9c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043a4  00000000  00000000  000cca04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000d0da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08005c5c 	.word	0x08005c5c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08005c5c 	.word	0x08005c5c

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <__aeabi_frsub>:
 8000160:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__addsf3>
 8000166:	bf00      	nop

08000168 <__aeabi_fsub>:
 8000168:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800016c <__addsf3>:
 800016c:	0042      	lsls	r2, r0, #1
 800016e:	bf1f      	itttt	ne
 8000170:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000174:	ea92 0f03 	teqne	r2, r3
 8000178:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800017c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000180:	d06a      	beq.n	8000258 <__addsf3+0xec>
 8000182:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000186:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800018a:	bfc1      	itttt	gt
 800018c:	18d2      	addgt	r2, r2, r3
 800018e:	4041      	eorgt	r1, r0
 8000190:	4048      	eorgt	r0, r1
 8000192:	4041      	eorgt	r1, r0
 8000194:	bfb8      	it	lt
 8000196:	425b      	neglt	r3, r3
 8000198:	2b19      	cmp	r3, #25
 800019a:	bf88      	it	hi
 800019c:	4770      	bxhi	lr
 800019e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80001a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001a6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4240      	negne	r0, r0
 80001ae:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001b6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4249      	negne	r1, r1
 80001be:	ea92 0f03 	teq	r2, r3
 80001c2:	d03f      	beq.n	8000244 <__addsf3+0xd8>
 80001c4:	f1a2 0201 	sub.w	r2, r2, #1
 80001c8:	fa41 fc03 	asr.w	ip, r1, r3
 80001cc:	eb10 000c 	adds.w	r0, r0, ip
 80001d0:	f1c3 0320 	rsb	r3, r3, #32
 80001d4:	fa01 f103 	lsl.w	r1, r1, r3
 80001d8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001dc:	d502      	bpl.n	80001e4 <__addsf3+0x78>
 80001de:	4249      	negs	r1, r1
 80001e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001e8:	d313      	bcc.n	8000212 <__addsf3+0xa6>
 80001ea:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001ee:	d306      	bcc.n	80001fe <__addsf3+0x92>
 80001f0:	0840      	lsrs	r0, r0, #1
 80001f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f6:	f102 0201 	add.w	r2, r2, #1
 80001fa:	2afe      	cmp	r2, #254	@ 0xfe
 80001fc:	d251      	bcs.n	80002a2 <__addsf3+0x136>
 80001fe:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000202:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000206:	bf08      	it	eq
 8000208:	f020 0001 	biceq.w	r0, r0, #1
 800020c:	ea40 0003 	orr.w	r0, r0, r3
 8000210:	4770      	bx	lr
 8000212:	0049      	lsls	r1, r1, #1
 8000214:	eb40 0000 	adc.w	r0, r0, r0
 8000218:	3a01      	subs	r2, #1
 800021a:	bf28      	it	cs
 800021c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000220:	d2ed      	bcs.n	80001fe <__addsf3+0x92>
 8000222:	fab0 fc80 	clz	ip, r0
 8000226:	f1ac 0c08 	sub.w	ip, ip, #8
 800022a:	ebb2 020c 	subs.w	r2, r2, ip
 800022e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000232:	bfaa      	itet	ge
 8000234:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000238:	4252      	neglt	r2, r2
 800023a:	4318      	orrge	r0, r3
 800023c:	bfbc      	itt	lt
 800023e:	40d0      	lsrlt	r0, r2
 8000240:	4318      	orrlt	r0, r3
 8000242:	4770      	bx	lr
 8000244:	f092 0f00 	teq	r2, #0
 8000248:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800024c:	bf06      	itte	eq
 800024e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000252:	3201      	addeq	r2, #1
 8000254:	3b01      	subne	r3, #1
 8000256:	e7b5      	b.n	80001c4 <__addsf3+0x58>
 8000258:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800025c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000260:	bf18      	it	ne
 8000262:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000266:	d021      	beq.n	80002ac <__addsf3+0x140>
 8000268:	ea92 0f03 	teq	r2, r3
 800026c:	d004      	beq.n	8000278 <__addsf3+0x10c>
 800026e:	f092 0f00 	teq	r2, #0
 8000272:	bf08      	it	eq
 8000274:	4608      	moveq	r0, r1
 8000276:	4770      	bx	lr
 8000278:	ea90 0f01 	teq	r0, r1
 800027c:	bf1c      	itt	ne
 800027e:	2000      	movne	r0, #0
 8000280:	4770      	bxne	lr
 8000282:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000286:	d104      	bne.n	8000292 <__addsf3+0x126>
 8000288:	0040      	lsls	r0, r0, #1
 800028a:	bf28      	it	cs
 800028c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000290:	4770      	bx	lr
 8000292:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000296:	bf3c      	itt	cc
 8000298:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 800029c:	4770      	bxcc	lr
 800029e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80002a2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80002a6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002aa:	4770      	bx	lr
 80002ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002b0:	bf16      	itet	ne
 80002b2:	4608      	movne	r0, r1
 80002b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b8:	4601      	movne	r1, r0
 80002ba:	0242      	lsls	r2, r0, #9
 80002bc:	bf06      	itte	eq
 80002be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002c2:	ea90 0f01 	teqeq	r0, r1
 80002c6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002ca:	4770      	bx	lr

080002cc <__aeabi_ui2f>:
 80002cc:	f04f 0300 	mov.w	r3, #0
 80002d0:	e004      	b.n	80002dc <__aeabi_i2f+0x8>
 80002d2:	bf00      	nop

080002d4 <__aeabi_i2f>:
 80002d4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002d8:	bf48      	it	mi
 80002da:	4240      	negmi	r0, r0
 80002dc:	ea5f 0c00 	movs.w	ip, r0
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002e8:	4601      	mov	r1, r0
 80002ea:	f04f 0000 	mov.w	r0, #0
 80002ee:	e01c      	b.n	800032a <__aeabi_l2f+0x2a>

080002f0 <__aeabi_ul2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f04f 0300 	mov.w	r3, #0
 80002fc:	e00a      	b.n	8000314 <__aeabi_l2f+0x14>
 80002fe:	bf00      	nop

08000300 <__aeabi_l2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800030c:	d502      	bpl.n	8000314 <__aeabi_l2f+0x14>
 800030e:	4240      	negs	r0, r0
 8000310:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000314:	ea5f 0c01 	movs.w	ip, r1
 8000318:	bf02      	ittt	eq
 800031a:	4684      	moveq	ip, r0
 800031c:	4601      	moveq	r1, r0
 800031e:	2000      	moveq	r0, #0
 8000320:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000324:	bf08      	it	eq
 8000326:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800032a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800032e:	fabc f28c 	clz	r2, ip
 8000332:	3a08      	subs	r2, #8
 8000334:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000338:	db10      	blt.n	800035c <__aeabi_l2f+0x5c>
 800033a:	fa01 fc02 	lsl.w	ip, r1, r2
 800033e:	4463      	add	r3, ip
 8000340:	fa00 fc02 	lsl.w	ip, r0, r2
 8000344:	f1c2 0220 	rsb	r2, r2, #32
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	fa20 f202 	lsr.w	r2, r0, r2
 8000350:	eb43 0002 	adc.w	r0, r3, r2
 8000354:	bf08      	it	eq
 8000356:	f020 0001 	biceq.w	r0, r0, #1
 800035a:	4770      	bx	lr
 800035c:	f102 0220 	add.w	r2, r2, #32
 8000360:	fa01 fc02 	lsl.w	ip, r1, r2
 8000364:	f1c2 0220 	rsb	r2, r2, #32
 8000368:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800036c:	fa21 f202 	lsr.w	r2, r1, r2
 8000370:	eb43 0002 	adc.w	r0, r3, r2
 8000374:	bf08      	it	eq
 8000376:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800037a:	4770      	bx	lr

0800037c <__aeabi_fmul>:
 800037c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000380:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000384:	bf1e      	ittt	ne
 8000386:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800038a:	ea92 0f0c 	teqne	r2, ip
 800038e:	ea93 0f0c 	teqne	r3, ip
 8000392:	d06f      	beq.n	8000474 <__aeabi_fmul+0xf8>
 8000394:	441a      	add	r2, r3
 8000396:	ea80 0c01 	eor.w	ip, r0, r1
 800039a:	0240      	lsls	r0, r0, #9
 800039c:	bf18      	it	ne
 800039e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003a2:	d01e      	beq.n	80003e2 <__aeabi_fmul+0x66>
 80003a4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80003a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003b0:	fba0 3101 	umull	r3, r1, r0, r1
 80003b4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003b8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003bc:	bf3e      	ittt	cc
 80003be:	0049      	lslcc	r1, r1, #1
 80003c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c4:	005b      	lslcc	r3, r3, #1
 80003c6:	ea40 0001 	orr.w	r0, r0, r1
 80003ca:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ce:	2afd      	cmp	r2, #253	@ 0xfd
 80003d0:	d81d      	bhi.n	800040e <__aeabi_fmul+0x92>
 80003d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003da:	bf08      	it	eq
 80003dc:	f020 0001 	biceq.w	r0, r0, #1
 80003e0:	4770      	bx	lr
 80003e2:	f090 0f00 	teq	r0, #0
 80003e6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003ea:	bf08      	it	eq
 80003ec:	0249      	lsleq	r1, r1, #9
 80003ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f6:	3a7f      	subs	r2, #127	@ 0x7f
 80003f8:	bfc2      	ittt	gt
 80003fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000402:	4770      	bxgt	lr
 8000404:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000408:	f04f 0300 	mov.w	r3, #0
 800040c:	3a01      	subs	r2, #1
 800040e:	dc5d      	bgt.n	80004cc <__aeabi_fmul+0x150>
 8000410:	f112 0f19 	cmn.w	r2, #25
 8000414:	bfdc      	itt	le
 8000416:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800041a:	4770      	bxle	lr
 800041c:	f1c2 0200 	rsb	r2, r2, #0
 8000420:	0041      	lsls	r1, r0, #1
 8000422:	fa21 f102 	lsr.w	r1, r1, r2
 8000426:	f1c2 0220 	rsb	r2, r2, #32
 800042a:	fa00 fc02 	lsl.w	ip, r0, r2
 800042e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000432:	f140 0000 	adc.w	r0, r0, #0
 8000436:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800043a:	bf08      	it	eq
 800043c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000440:	4770      	bx	lr
 8000442:	f092 0f00 	teq	r2, #0
 8000446:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800044a:	bf02      	ittt	eq
 800044c:	0040      	lsleq	r0, r0, #1
 800044e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000452:	3a01      	subeq	r2, #1
 8000454:	d0f9      	beq.n	800044a <__aeabi_fmul+0xce>
 8000456:	ea40 000c 	orr.w	r0, r0, ip
 800045a:	f093 0f00 	teq	r3, #0
 800045e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000462:	bf02      	ittt	eq
 8000464:	0049      	lsleq	r1, r1, #1
 8000466:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800046a:	3b01      	subeq	r3, #1
 800046c:	d0f9      	beq.n	8000462 <__aeabi_fmul+0xe6>
 800046e:	ea41 010c 	orr.w	r1, r1, ip
 8000472:	e78f      	b.n	8000394 <__aeabi_fmul+0x18>
 8000474:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000478:	ea92 0f0c 	teq	r2, ip
 800047c:	bf18      	it	ne
 800047e:	ea93 0f0c 	teqne	r3, ip
 8000482:	d00a      	beq.n	800049a <__aeabi_fmul+0x11e>
 8000484:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000488:	bf18      	it	ne
 800048a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800048e:	d1d8      	bne.n	8000442 <__aeabi_fmul+0xc6>
 8000490:	ea80 0001 	eor.w	r0, r0, r1
 8000494:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000498:	4770      	bx	lr
 800049a:	f090 0f00 	teq	r0, #0
 800049e:	bf17      	itett	ne
 80004a0:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80004a4:	4608      	moveq	r0, r1
 80004a6:	f091 0f00 	teqne	r1, #0
 80004aa:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80004ae:	d014      	beq.n	80004da <__aeabi_fmul+0x15e>
 80004b0:	ea92 0f0c 	teq	r2, ip
 80004b4:	d101      	bne.n	80004ba <__aeabi_fmul+0x13e>
 80004b6:	0242      	lsls	r2, r0, #9
 80004b8:	d10f      	bne.n	80004da <__aeabi_fmul+0x15e>
 80004ba:	ea93 0f0c 	teq	r3, ip
 80004be:	d103      	bne.n	80004c8 <__aeabi_fmul+0x14c>
 80004c0:	024b      	lsls	r3, r1, #9
 80004c2:	bf18      	it	ne
 80004c4:	4608      	movne	r0, r1
 80004c6:	d108      	bne.n	80004da <__aeabi_fmul+0x15e>
 80004c8:	ea80 0001 	eor.w	r0, r0, r1
 80004cc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004d0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004d4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004d8:	4770      	bx	lr
 80004da:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004de:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004e2:	4770      	bx	lr

080004e4 <__aeabi_fdiv>:
 80004e4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004ec:	bf1e      	ittt	ne
 80004ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004f2:	ea92 0f0c 	teqne	r2, ip
 80004f6:	ea93 0f0c 	teqne	r3, ip
 80004fa:	d069      	beq.n	80005d0 <__aeabi_fdiv+0xec>
 80004fc:	eba2 0203 	sub.w	r2, r2, r3
 8000500:	ea80 0c01 	eor.w	ip, r0, r1
 8000504:	0249      	lsls	r1, r1, #9
 8000506:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800050a:	d037      	beq.n	800057c <__aeabi_fdiv+0x98>
 800050c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000510:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000514:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000518:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800051c:	428b      	cmp	r3, r1
 800051e:	bf38      	it	cc
 8000520:	005b      	lslcc	r3, r3, #1
 8000522:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000526:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800052a:	428b      	cmp	r3, r1
 800052c:	bf24      	itt	cs
 800052e:	1a5b      	subcs	r3, r3, r1
 8000530:	ea40 000c 	orrcs.w	r0, r0, ip
 8000534:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000538:	bf24      	itt	cs
 800053a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000542:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000546:	bf24      	itt	cs
 8000548:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800054c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000550:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000554:	bf24      	itt	cs
 8000556:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800055a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055e:	011b      	lsls	r3, r3, #4
 8000560:	bf18      	it	ne
 8000562:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000566:	d1e0      	bne.n	800052a <__aeabi_fdiv+0x46>
 8000568:	2afd      	cmp	r2, #253	@ 0xfd
 800056a:	f63f af50 	bhi.w	800040e <__aeabi_fmul+0x92>
 800056e:	428b      	cmp	r3, r1
 8000570:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000574:	bf08      	it	eq
 8000576:	f020 0001 	biceq.w	r0, r0, #1
 800057a:	4770      	bx	lr
 800057c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000580:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000584:	327f      	adds	r2, #127	@ 0x7f
 8000586:	bfc2      	ittt	gt
 8000588:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800058c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000590:	4770      	bxgt	lr
 8000592:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000596:	f04f 0300 	mov.w	r3, #0
 800059a:	3a01      	subs	r2, #1
 800059c:	e737      	b.n	800040e <__aeabi_fmul+0x92>
 800059e:	f092 0f00 	teq	r2, #0
 80005a2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80005a6:	bf02      	ittt	eq
 80005a8:	0040      	lsleq	r0, r0, #1
 80005aa:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80005ae:	3a01      	subeq	r2, #1
 80005b0:	d0f9      	beq.n	80005a6 <__aeabi_fdiv+0xc2>
 80005b2:	ea40 000c 	orr.w	r0, r0, ip
 80005b6:	f093 0f00 	teq	r3, #0
 80005ba:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005be:	bf02      	ittt	eq
 80005c0:	0049      	lsleq	r1, r1, #1
 80005c2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005c6:	3b01      	subeq	r3, #1
 80005c8:	d0f9      	beq.n	80005be <__aeabi_fdiv+0xda>
 80005ca:	ea41 010c 	orr.w	r1, r1, ip
 80005ce:	e795      	b.n	80004fc <__aeabi_fdiv+0x18>
 80005d0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d4:	ea92 0f0c 	teq	r2, ip
 80005d8:	d108      	bne.n	80005ec <__aeabi_fdiv+0x108>
 80005da:	0242      	lsls	r2, r0, #9
 80005dc:	f47f af7d 	bne.w	80004da <__aeabi_fmul+0x15e>
 80005e0:	ea93 0f0c 	teq	r3, ip
 80005e4:	f47f af70 	bne.w	80004c8 <__aeabi_fmul+0x14c>
 80005e8:	4608      	mov	r0, r1
 80005ea:	e776      	b.n	80004da <__aeabi_fmul+0x15e>
 80005ec:	ea93 0f0c 	teq	r3, ip
 80005f0:	d104      	bne.n	80005fc <__aeabi_fdiv+0x118>
 80005f2:	024b      	lsls	r3, r1, #9
 80005f4:	f43f af4c 	beq.w	8000490 <__aeabi_fmul+0x114>
 80005f8:	4608      	mov	r0, r1
 80005fa:	e76e      	b.n	80004da <__aeabi_fmul+0x15e>
 80005fc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000600:	bf18      	it	ne
 8000602:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000606:	d1ca      	bne.n	800059e <__aeabi_fdiv+0xba>
 8000608:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800060c:	f47f af5c 	bne.w	80004c8 <__aeabi_fmul+0x14c>
 8000610:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000614:	f47f af3c 	bne.w	8000490 <__aeabi_fmul+0x114>
 8000618:	e75f      	b.n	80004da <__aeabi_fmul+0x15e>
 800061a:	bf00      	nop

0800061c <__gesf2>:
 800061c:	f04f 3cff 	mov.w	ip, #4294967295
 8000620:	e006      	b.n	8000630 <__cmpsf2+0x4>
 8000622:	bf00      	nop

08000624 <__lesf2>:
 8000624:	f04f 0c01 	mov.w	ip, #1
 8000628:	e002      	b.n	8000630 <__cmpsf2+0x4>
 800062a:	bf00      	nop

0800062c <__cmpsf2>:
 800062c:	f04f 0c01 	mov.w	ip, #1
 8000630:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000634:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000638:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800063c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000640:	bf18      	it	ne
 8000642:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000646:	d011      	beq.n	800066c <__cmpsf2+0x40>
 8000648:	b001      	add	sp, #4
 800064a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800064e:	bf18      	it	ne
 8000650:	ea90 0f01 	teqne	r0, r1
 8000654:	bf58      	it	pl
 8000656:	ebb2 0003 	subspl.w	r0, r2, r3
 800065a:	bf88      	it	hi
 800065c:	17c8      	asrhi	r0, r1, #31
 800065e:	bf38      	it	cc
 8000660:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000664:	bf18      	it	ne
 8000666:	f040 0001 	orrne.w	r0, r0, #1
 800066a:	4770      	bx	lr
 800066c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000670:	d102      	bne.n	8000678 <__cmpsf2+0x4c>
 8000672:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000676:	d105      	bne.n	8000684 <__cmpsf2+0x58>
 8000678:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800067c:	d1e4      	bne.n	8000648 <__cmpsf2+0x1c>
 800067e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000682:	d0e1      	beq.n	8000648 <__cmpsf2+0x1c>
 8000684:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <__aeabi_cfrcmple>:
 800068c:	4684      	mov	ip, r0
 800068e:	4608      	mov	r0, r1
 8000690:	4661      	mov	r1, ip
 8000692:	e7ff      	b.n	8000694 <__aeabi_cfcmpeq>

08000694 <__aeabi_cfcmpeq>:
 8000694:	b50f      	push	{r0, r1, r2, r3, lr}
 8000696:	f7ff ffc9 	bl	800062c <__cmpsf2>
 800069a:	2800      	cmp	r0, #0
 800069c:	bf48      	it	mi
 800069e:	f110 0f00 	cmnmi.w	r0, #0
 80006a2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006a4 <__aeabi_fcmpeq>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff fff4 	bl	8000694 <__aeabi_cfcmpeq>
 80006ac:	bf0c      	ite	eq
 80006ae:	2001      	moveq	r0, #1
 80006b0:	2000      	movne	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmplt>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffea 	bl	8000694 <__aeabi_cfcmpeq>
 80006c0:	bf34      	ite	cc
 80006c2:	2001      	movcc	r0, #1
 80006c4:	2000      	movcs	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmple>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffe0 	bl	8000694 <__aeabi_cfcmpeq>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpge>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffd2 	bl	800068c <__aeabi_cfrcmple>
 80006e8:	bf94      	ite	ls
 80006ea:	2001      	movls	r0, #1
 80006ec:	2000      	movhi	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_fcmpgt>:
 80006f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f8:	f7ff ffc8 	bl	800068c <__aeabi_cfrcmple>
 80006fc:	bf34      	ite	cc
 80006fe:	2001      	movcc	r0, #1
 8000700:	2000      	movcs	r0, #0
 8000702:	f85d fb08 	ldr.w	pc, [sp], #8
 8000706:	bf00      	nop

08000708 <__aeabi_fcmpun>:
 8000708:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800070c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000710:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000714:	d102      	bne.n	800071c <__aeabi_fcmpun+0x14>
 8000716:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800071a:	d108      	bne.n	800072e <__aeabi_fcmpun+0x26>
 800071c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000720:	d102      	bne.n	8000728 <__aeabi_fcmpun+0x20>
 8000722:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000726:	d102      	bne.n	800072e <__aeabi_fcmpun+0x26>
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	4770      	bx	lr
 800072e:	f04f 0001 	mov.w	r0, #1
 8000732:	4770      	bx	lr

08000734 <__aeabi_f2iz>:
 8000734:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000738:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800073c:	d30f      	bcc.n	800075e <__aeabi_f2iz+0x2a>
 800073e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000742:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000746:	d90d      	bls.n	8000764 <__aeabi_f2iz+0x30>
 8000748:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800074c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000750:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000754:	fa23 f002 	lsr.w	r0, r3, r2
 8000758:	bf18      	it	ne
 800075a:	4240      	negne	r0, r0
 800075c:	4770      	bx	lr
 800075e:	f04f 0000 	mov.w	r0, #0
 8000762:	4770      	bx	lr
 8000764:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000768:	d101      	bne.n	800076e <__aeabi_f2iz+0x3a>
 800076a:	0242      	lsls	r2, r0, #9
 800076c:	d105      	bne.n	800077a <__aeabi_f2iz+0x46>
 800076e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000772:	bf08      	it	eq
 8000774:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000778:	4770      	bx	lr
 800077a:	f04f 0000 	mov.w	r0, #0
 800077e:	4770      	bx	lr

08000780 <__aeabi_f2uiz>:
 8000780:	0042      	lsls	r2, r0, #1
 8000782:	d20e      	bcs.n	80007a2 <__aeabi_f2uiz+0x22>
 8000784:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000788:	d30b      	bcc.n	80007a2 <__aeabi_f2uiz+0x22>
 800078a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800078e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000792:	d409      	bmi.n	80007a8 <__aeabi_f2uiz+0x28>
 8000794:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000798:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800079c:	fa23 f002 	lsr.w	r0, r3, r2
 80007a0:	4770      	bx	lr
 80007a2:	f04f 0000 	mov.w	r0, #0
 80007a6:	4770      	bx	lr
 80007a8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80007ac:	d101      	bne.n	80007b2 <__aeabi_f2uiz+0x32>
 80007ae:	0242      	lsls	r2, r0, #9
 80007b0:	d102      	bne.n	80007b8 <__aeabi_f2uiz+0x38>
 80007b2:	f04f 30ff 	mov.w	r0, #4294967295
 80007b6:	4770      	bx	lr
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop

080007c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b088      	sub	sp, #32
 80007c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c6:	f107 0310 	add.w	r3, r7, #16
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]
 80007d2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d4:	4b1e      	ldr	r3, [pc, #120]	@ (8000850 <MX_GPIO_Init+0x90>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	4a1d      	ldr	r2, [pc, #116]	@ (8000850 <MX_GPIO_Init+0x90>)
 80007da:	f043 0310 	orr.w	r3, r3, #16
 80007de:	6193      	str	r3, [r2, #24]
 80007e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000850 <MX_GPIO_Init+0x90>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	f003 0310 	and.w	r3, r3, #16
 80007e8:	60fb      	str	r3, [r7, #12]
 80007ea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ec:	4b18      	ldr	r3, [pc, #96]	@ (8000850 <MX_GPIO_Init+0x90>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	4a17      	ldr	r2, [pc, #92]	@ (8000850 <MX_GPIO_Init+0x90>)
 80007f2:	f043 0304 	orr.w	r3, r3, #4
 80007f6:	6193      	str	r3, [r2, #24]
 80007f8:	4b15      	ldr	r3, [pc, #84]	@ (8000850 <MX_GPIO_Init+0x90>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	f003 0304 	and.w	r3, r3, #4
 8000800:	60bb      	str	r3, [r7, #8]
 8000802:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000804:	4b12      	ldr	r3, [pc, #72]	@ (8000850 <MX_GPIO_Init+0x90>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	4a11      	ldr	r2, [pc, #68]	@ (8000850 <MX_GPIO_Init+0x90>)
 800080a:	f043 0308 	orr.w	r3, r3, #8
 800080e:	6193      	str	r3, [r2, #24]
 8000810:	4b0f      	ldr	r3, [pc, #60]	@ (8000850 <MX_GPIO_Init+0x90>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	f003 0308 	and.w	r3, r3, #8
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800081c:	2200      	movs	r2, #0
 800081e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000822:	480c      	ldr	r0, [pc, #48]	@ (8000854 <MX_GPIO_Init+0x94>)
 8000824:	f002 f8e0 	bl	80029e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000828:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800082c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082e:	2301      	movs	r3, #1
 8000830:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000836:	2302      	movs	r3, #2
 8000838:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800083a:	f107 0310 	add.w	r3, r7, #16
 800083e:	4619      	mov	r1, r3
 8000840:	4804      	ldr	r0, [pc, #16]	@ (8000854 <MX_GPIO_Init+0x94>)
 8000842:	f001 ff4d 	bl	80026e0 <HAL_GPIO_Init>

}
 8000846:	bf00      	nop
 8000848:	3720      	adds	r7, #32
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40021000 	.word	0x40021000
 8000854:	40011000 	.word	0x40011000

08000858 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800085c:	4b12      	ldr	r3, [pc, #72]	@ (80008a8 <MX_I2C1_Init+0x50>)
 800085e:	4a13      	ldr	r2, [pc, #76]	@ (80008ac <MX_I2C1_Init+0x54>)
 8000860:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000862:	4b11      	ldr	r3, [pc, #68]	@ (80008a8 <MX_I2C1_Init+0x50>)
 8000864:	4a12      	ldr	r2, [pc, #72]	@ (80008b0 <MX_I2C1_Init+0x58>)
 8000866:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000868:	4b0f      	ldr	r3, [pc, #60]	@ (80008a8 <MX_I2C1_Init+0x50>)
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800086e:	4b0e      	ldr	r3, [pc, #56]	@ (80008a8 <MX_I2C1_Init+0x50>)
 8000870:	2200      	movs	r2, #0
 8000872:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000874:	4b0c      	ldr	r3, [pc, #48]	@ (80008a8 <MX_I2C1_Init+0x50>)
 8000876:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800087a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800087c:	4b0a      	ldr	r3, [pc, #40]	@ (80008a8 <MX_I2C1_Init+0x50>)
 800087e:	2200      	movs	r2, #0
 8000880:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000882:	4b09      	ldr	r3, [pc, #36]	@ (80008a8 <MX_I2C1_Init+0x50>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000888:	4b07      	ldr	r3, [pc, #28]	@ (80008a8 <MX_I2C1_Init+0x50>)
 800088a:	2200      	movs	r2, #0
 800088c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800088e:	4b06      	ldr	r3, [pc, #24]	@ (80008a8 <MX_I2C1_Init+0x50>)
 8000890:	2200      	movs	r2, #0
 8000892:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000894:	4804      	ldr	r0, [pc, #16]	@ (80008a8 <MX_I2C1_Init+0x50>)
 8000896:	f002 f8bf 	bl	8002a18 <HAL_I2C_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008a0:	f000 f929 	bl	8000af6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008a4:	bf00      	nop
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20000078 	.word	0x20000078
 80008ac:	40005400 	.word	0x40005400
 80008b0:	00061a80 	.word	0x00061a80

080008b4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b088      	sub	sp, #32
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008bc:	f107 0310 	add.w	r3, r7, #16
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4a15      	ldr	r2, [pc, #84]	@ (8000924 <HAL_I2C_MspInit+0x70>)
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d123      	bne.n	800091c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d4:	4b14      	ldr	r3, [pc, #80]	@ (8000928 <HAL_I2C_MspInit+0x74>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	4a13      	ldr	r2, [pc, #76]	@ (8000928 <HAL_I2C_MspInit+0x74>)
 80008da:	f043 0308 	orr.w	r3, r3, #8
 80008de:	6193      	str	r3, [r2, #24]
 80008e0:	4b11      	ldr	r3, [pc, #68]	@ (8000928 <HAL_I2C_MspInit+0x74>)
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	f003 0308 	and.w	r3, r3, #8
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008ec:	23c0      	movs	r3, #192	@ 0xc0
 80008ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008f0:	2312      	movs	r3, #18
 80008f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008f4:	2303      	movs	r3, #3
 80008f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f8:	f107 0310 	add.w	r3, r7, #16
 80008fc:	4619      	mov	r1, r3
 80008fe:	480b      	ldr	r0, [pc, #44]	@ (800092c <HAL_I2C_MspInit+0x78>)
 8000900:	f001 feee 	bl	80026e0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000904:	4b08      	ldr	r3, [pc, #32]	@ (8000928 <HAL_I2C_MspInit+0x74>)
 8000906:	69db      	ldr	r3, [r3, #28]
 8000908:	4a07      	ldr	r2, [pc, #28]	@ (8000928 <HAL_I2C_MspInit+0x74>)
 800090a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800090e:	61d3      	str	r3, [r2, #28]
 8000910:	4b05      	ldr	r3, [pc, #20]	@ (8000928 <HAL_I2C_MspInit+0x74>)
 8000912:	69db      	ldr	r3, [r3, #28]
 8000914:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000918:	60bb      	str	r3, [r7, #8]
 800091a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800091c:	bf00      	nop
 800091e:	3720      	adds	r7, #32
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	40005400 	.word	0x40005400
 8000928:	40021000 	.word	0x40021000
 800092c:	40010c00 	.word	0x40010c00

08000930 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000930:	b590      	push	{r4, r7, lr}
 8000932:	b087      	sub	sp, #28
 8000934:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000936:	f001 fd69 	bl	800240c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800093a:	f000 f89b 	bl	8000a74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800093e:	f7ff ff3f 	bl	80007c0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000942:	f7ff ff89 	bl	8000858 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000946:	f001 fc1d 	bl	8002184 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init(); // 初始化OLED
 800094a:	f000 f9d9 	bl	8000d00 <OLED_Init>
  OLED_InitBuffer(); // 初始化双缓冲
 800094e:	f000 f8d9 	bl	8000b04 <OLED_InitBuffer>
  OLED_ClearBuffer(); // 清空缓冲区
 8000952:	f000 f8eb 	bl	8000b2c <OLED_ClearBuffer>

  // InitBlockAnimation(); // 初始化方块动画
  // AnimationLoop(); // 执行动画循环

  OLED_InitAnimationManager(&g_AnimationManager); // 初始化动画管理器
 8000956:	4842      	ldr	r0, [pc, #264]	@ (8000a60 <main+0x130>)
 8000958:	f001 f91e 	bl	8001b98 <OLED_InitAnimationManager>
  OLED_MoveObject(&g_AnimationManager, "player", 0, 0, 0, 0, 1, EASE_OUT_BOUNCE); // 这里可以是初始化
 800095c:	2311      	movs	r3, #17
 800095e:	9303      	str	r3, [sp, #12]
 8000960:	2301      	movs	r3, #1
 8000962:	9302      	str	r3, [sp, #8]
 8000964:	f04f 0300 	mov.w	r3, #0
 8000968:	9301      	str	r3, [sp, #4]
 800096a:	f04f 0300 	mov.w	r3, #0
 800096e:	9300      	str	r3, [sp, #0]
 8000970:	f04f 0300 	mov.w	r3, #0
 8000974:	f04f 0200 	mov.w	r2, #0
 8000978:	493a      	ldr	r1, [pc, #232]	@ (8000a64 <main+0x134>)
 800097a:	4839      	ldr	r0, [pc, #228]	@ (8000a60 <main+0x130>)
 800097c:	f001 f96d 	bl	8001c5a <OLED_MoveObject>
  OLED_MoveObject(&g_AnimationManager, "player1", 128, 64, 100, 30, 1, EASE_IN_BOUNCE); // 这里可以是初始化
 8000980:	2310      	movs	r3, #16
 8000982:	9303      	str	r3, [sp, #12]
 8000984:	2301      	movs	r3, #1
 8000986:	9302      	str	r3, [sp, #8]
 8000988:	4b37      	ldr	r3, [pc, #220]	@ (8000a68 <main+0x138>)
 800098a:	9301      	str	r3, [sp, #4]
 800098c:	4b37      	ldr	r3, [pc, #220]	@ (8000a6c <main+0x13c>)
 800098e:	9300      	str	r3, [sp, #0]
 8000990:	f04f 4385 	mov.w	r3, #1115684864	@ 0x42800000
 8000994:	f04f 4286 	mov.w	r2, #1124073472	@ 0x43000000
 8000998:	4935      	ldr	r1, [pc, #212]	@ (8000a70 <main+0x140>)
 800099a:	4831      	ldr	r0, [pc, #196]	@ (8000a60 <main+0x130>)
 800099c:	f001 f95d 	bl	8001c5a <OLED_MoveObject>

  OLED_DoTweenObjectX(&g_AnimationManager, "player1", 0, 3000, EASE_IN_BOUNCE); // 移动对象
 80009a0:	2310      	movs	r3, #16
 80009a2:	9300      	str	r3, [sp, #0]
 80009a4:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80009a8:	f04f 0200 	mov.w	r2, #0
 80009ac:	4930      	ldr	r1, [pc, #192]	@ (8000a70 <main+0x140>)
 80009ae:	482c      	ldr	r0, [pc, #176]	@ (8000a60 <main+0x130>)
 80009b0:	f001 faaa 	bl	8001f08 <OLED_DoTweenObjectX>
  OLED_DoTweenObjectY(&g_AnimationManager, "player1", 0, 3000, EASE_IN_CUBIC); // 移动对象
 80009b4:	2304      	movs	r3, #4
 80009b6:	9300      	str	r3, [sp, #0]
 80009b8:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80009bc:	f04f 0200 	mov.w	r2, #0
 80009c0:	492b      	ldr	r1, [pc, #172]	@ (8000a70 <main+0x140>)
 80009c2:	4827      	ldr	r0, [pc, #156]	@ (8000a60 <main+0x130>)
 80009c4:	f001 fad5 	bl	8001f72 <OLED_DoTweenObjectY>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {    
    #pragma region OLED_UI_SETTINGS // UI设置
    OLED_ClearBuffer();
 80009c8:	f000 f8b0 	bl	8000b2c <OLED_ClearBuffer>
    
    OLED_DoTweenObject(&g_AnimationManager, "player", 128, 64, 4000, EASE_IN_BOUNCE, 1);
 80009cc:	2301      	movs	r3, #1
 80009ce:	9302      	str	r3, [sp, #8]
 80009d0:	2310      	movs	r3, #16
 80009d2:	9301      	str	r3, [sp, #4]
 80009d4:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 80009d8:	9300      	str	r3, [sp, #0]
 80009da:	f04f 4385 	mov.w	r3, #1115684864	@ 0x42800000
 80009de:	f04f 4286 	mov.w	r2, #1124073472	@ 0x43000000
 80009e2:	4920      	ldr	r1, [pc, #128]	@ (8000a64 <main+0x134>)
 80009e4:	481e      	ldr	r0, [pc, #120]	@ (8000a60 <main+0x130>)
 80009e6:	f001 f9d9 	bl	8001d9c <OLED_DoTweenObject>

    
    if (OLED_GetObjectPosition(&g_AnimationManager, "player", &x, &y))
 80009ea:	463b      	mov	r3, r7
 80009ec:	1d3a      	adds	r2, r7, #4
 80009ee:	491d      	ldr	r1, [pc, #116]	@ (8000a64 <main+0x134>)
 80009f0:	481b      	ldr	r0, [pc, #108]	@ (8000a60 <main+0x130>)
 80009f2:	f001 f90e 	bl	8001c12 <OLED_GetObjectPosition>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d010      	beq.n	8000a1e <main+0xee>
    {
        OLED_DrawRectangle((uint8_t)x, (uint8_t)y, 20, 20);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff febe 	bl	8000780 <__aeabi_f2uiz>
 8000a04:	4603      	mov	r3, r0
 8000a06:	b2dc      	uxtb	r4, r3
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f7ff feb8 	bl	8000780 <__aeabi_f2uiz>
 8000a10:	4603      	mov	r3, r0
 8000a12:	b2d9      	uxtb	r1, r3
 8000a14:	2314      	movs	r3, #20
 8000a16:	2214      	movs	r2, #20
 8000a18:	4620      	mov	r0, r4
 8000a1a:	f001 fadf 	bl	8001fdc <OLED_DrawRectangle>
    }

    if (OLED_GetObjectPosition(&g_AnimationManager, "player1", &x, &y))
 8000a1e:	463b      	mov	r3, r7
 8000a20:	1d3a      	adds	r2, r7, #4
 8000a22:	4913      	ldr	r1, [pc, #76]	@ (8000a70 <main+0x140>)
 8000a24:	480e      	ldr	r0, [pc, #56]	@ (8000a60 <main+0x130>)
 8000a26:	f001 f8f4 	bl	8001c12 <OLED_GetObjectPosition>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d010      	beq.n	8000a52 <main+0x122>
    {
        OLED_DrawRectangle((uint8_t)x, (uint8_t)y, 20, 20);
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4618      	mov	r0, r3
 8000a34:	f7ff fea4 	bl	8000780 <__aeabi_f2uiz>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	b2dc      	uxtb	r4, r3
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f7ff fe9e 	bl	8000780 <__aeabi_f2uiz>
 8000a44:	4603      	mov	r3, r0
 8000a46:	b2d9      	uxtb	r1, r3
 8000a48:	2314      	movs	r3, #20
 8000a4a:	2214      	movs	r2, #20
 8000a4c:	4620      	mov	r0, r4
 8000a4e:	f001 fac5 	bl	8001fdc <OLED_DrawRectangle>
    // }

    // OLED_InvertArea(64, 16, 64, 48); //


    OLED_UpdateAnimationManager(&g_AnimationManager); // 更新动画管理器
 8000a52:	4803      	ldr	r0, [pc, #12]	@ (8000a60 <main+0x130>)
 8000a54:	f001 f952 	bl	8001cfc <OLED_UpdateAnimationManager>
    OLED_UpdateDisplayVSync(); // 更新显示
 8000a58:	f000 f894 	bl	8000b84 <OLED_UpdateDisplayVSync>
    OLED_ClearBuffer();
 8000a5c:	e7b4      	b.n	80009c8 <main+0x98>
 8000a5e:	bf00      	nop
 8000a60:	200008d4 	.word	0x200008d4
 8000a64:	08005c74 	.word	0x08005c74
 8000a68:	41f00000 	.word	0x41f00000
 8000a6c:	42c80000 	.word	0x42c80000
 8000a70:	08005c7c 	.word	0x08005c7c

08000a74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b090      	sub	sp, #64	@ 0x40
 8000a78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a7a:	f107 0318 	add.w	r3, r7, #24
 8000a7e:	2228      	movs	r2, #40	@ 0x28
 8000a80:	2100      	movs	r1, #0
 8000a82:	4618      	mov	r0, r3
 8000a84:	f003 fe3b 	bl	80046fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a88:	1d3b      	adds	r3, r7, #4
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	605a      	str	r2, [r3, #4]
 8000a90:	609a      	str	r2, [r3, #8]
 8000a92:	60da      	str	r2, [r3, #12]
 8000a94:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a96:	2302      	movs	r3, #2
 8000a98:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a9e:	2310      	movs	r3, #16
 8000aa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000aaa:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab0:	f107 0318 	add.w	r3, r7, #24
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f002 fc4b 	bl	8003350 <HAL_RCC_OscConfig>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000ac0:	f000 f819 	bl	8000af6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac4:	230f      	movs	r3, #15
 8000ac6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000acc:	2300      	movs	r3, #0
 8000ace:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ad0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ad4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ada:	1d3b      	adds	r3, r7, #4
 8000adc:	2102      	movs	r1, #2
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f002 feb8 	bl	8003854 <HAL_RCC_ClockConfig>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000aea:	f000 f804 	bl	8000af6 <Error_Handler>
  }
}
 8000aee:	bf00      	nop
 8000af0:	3740      	adds	r7, #64	@ 0x40
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000afa:	b672      	cpsid	i
}
 8000afc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000afe:	bf00      	nop
 8000b00:	e7fd      	b.n	8000afe <Error_Handler+0x8>
	...

08000b04 <OLED_InitBuffer>:
    0x44, 0x64, 0x54, 0x4C, 0x44, 0x00  // z (122)
};

// 初始化缓冲区
void OLED_InitBuffer(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
    // 清空缓冲区
    memset(OLED_BackBuffer, 0, sizeof(OLED_BackBuffer));
 8000b08:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	4805      	ldr	r0, [pc, #20]	@ (8000b24 <OLED_InitBuffer+0x20>)
 8000b10:	f003 fdf5 	bl	80046fe <memset>
    memset(OLED_FrontBuffer, 0, sizeof(OLED_FrontBuffer));
 8000b14:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b18:	2100      	movs	r1, #0
 8000b1a:	4803      	ldr	r0, [pc, #12]	@ (8000b28 <OLED_InitBuffer+0x24>)
 8000b1c:	f003 fdef 	bl	80046fe <memset>
}
 8000b20:	bf00      	nop
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	200000d4 	.word	0x200000d4
 8000b28:	200004d4 	.word	0x200004d4

08000b2c <OLED_ClearBuffer>:

// 清空缓冲区
void OLED_ClearBuffer(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
    // 重置缓冲区为全0 (全黑)
    memset(OLED_BackBuffer, 0, sizeof(OLED_BackBuffer));
 8000b30:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b34:	2100      	movs	r1, #0
 8000b36:	4802      	ldr	r0, [pc, #8]	@ (8000b40 <OLED_ClearBuffer+0x14>)
 8000b38:	f003 fde1 	bl	80046fe <memset>
}
 8000b3c:	bf00      	nop
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	200000d4 	.word	0x200000d4

08000b44 <OLED_IsBusy>:

uint8_t OLED_IsBusy(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
    // 如果标记为忙，检查是否已经过了足够时间
    if (oled_update_flag)
 8000b4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b7c <OLED_IsBusy+0x38>)
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d00b      	beq.n	8000b6c <OLED_IsBusy+0x28>
    {
        // SSD1315/SSD1306 典型帧率约为60Hz，每帧约16.7ms
        uint32_t current_time = HAL_GetTick();
 8000b54:	f001 fcb2 	bl	80024bc <HAL_GetTick>
 8000b58:	6078      	str	r0, [r7, #4]
        if (current_time - oled_last_update_time >= 2)
 8000b5a:	4b09      	ldr	r3, [pc, #36]	@ (8000b80 <OLED_IsBusy+0x3c>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	687a      	ldr	r2, [r7, #4]
 8000b60:	1ad3      	subs	r3, r2, r3
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d902      	bls.n	8000b6c <OLED_IsBusy+0x28>
        {
            oled_update_flag = 0; // 已经过了足够时间，不再忙
 8000b66:	4b05      	ldr	r3, [pc, #20]	@ (8000b7c <OLED_IsBusy+0x38>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	701a      	strb	r2, [r3, #0]
        }
    }
    return oled_update_flag;
 8000b6c:	4b03      	ldr	r3, [pc, #12]	@ (8000b7c <OLED_IsBusy+0x38>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	b2db      	uxtb	r3, r3
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	200000d0 	.word	0x200000d0
 8000b80:	200000cc 	.word	0x200000cc

08000b84 <OLED_UpdateDisplayVSync>:

void OLED_UpdateDisplayVSync(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b0a4      	sub	sp, #144	@ 0x90
 8000b88:	af02      	add	r7, sp, #8
    while (OLED_IsBusy()) 
 8000b8a:	bf00      	nop
 8000b8c:	f7ff ffda 	bl	8000b44 <OLED_IsBusy>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d1fa      	bne.n	8000b8c <OLED_UpdateDisplayVSync+0x8>
    {

    }
    oled_update_flag = 1;
 8000b96:	4b23      	ldr	r3, [pc, #140]	@ (8000c24 <OLED_UpdateDisplayVSync+0xa0>)
 8000b98:	2201      	movs	r2, #1
 8000b9a:	701a      	strb	r2, [r3, #0]
    oled_last_update_time = HAL_GetTick();
 8000b9c:	f001 fc8e 	bl	80024bc <HAL_GetTick>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	4a21      	ldr	r2, [pc, #132]	@ (8000c28 <OLED_UpdateDisplayVSync+0xa4>)
 8000ba4:	6013      	str	r3, [r2, #0]

    // 交换前后缓冲区
    memcpy(OLED_FrontBuffer, OLED_BackBuffer, 128 * 8); // 复制当前缓冲区到前缓冲区
 8000ba6:	4a21      	ldr	r2, [pc, #132]	@ (8000c2c <OLED_UpdateDisplayVSync+0xa8>)
 8000ba8:	4b21      	ldr	r3, [pc, #132]	@ (8000c30 <OLED_UpdateDisplayVSync+0xac>)
 8000baa:	4610      	mov	r0, r2
 8000bac:	4619      	mov	r1, r3
 8000bae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bb2:	461a      	mov	r2, r3
 8000bb4:	f003 fde8 	bl	8004788 <memcpy>

    // 将前缓冲区发送到显示器
    uint8_t data[129]; // 数据缓冲区 (包括控制字节)
    data[0] = 0x40;    // 数据控制字节
 8000bb8:	2340      	movs	r3, #64	@ 0x40
 8000bba:	713b      	strb	r3, [r7, #4]

    // 逐页发送数据，每页一次性发送整行
    for (uint8_t page = 0; page < 8; page++)
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8000bc2:	e025      	b.n	8000c10 <OLED_UpdateDisplayVSync+0x8c>
    {
        // 设置页地址
        OLED_SendCommand(0xB0 + page);
 8000bc4:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000bc8:	3b50      	subs	r3, #80	@ 0x50
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f000 f87d 	bl	8000ccc <OLED_SendCommand>
        // 设置列起始地址
        OLED_SendCommand(0x00); // 低位地址
 8000bd2:	2000      	movs	r0, #0
 8000bd4:	f000 f87a 	bl	8000ccc <OLED_SendCommand>
        OLED_SendCommand(0x10); // 高位地址
 8000bd8:	2010      	movs	r0, #16
 8000bda:	f000 f877 	bl	8000ccc <OLED_SendCommand>

        // 复制当前页到发送缓冲区
        memcpy(data + 1, &OLED_FrontBuffer[page * OLED_WIDTH], OLED_WIDTH);
 8000bde:	1d3b      	adds	r3, r7, #4
 8000be0:	3301      	adds	r3, #1
 8000be2:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 8000be6:	01d2      	lsls	r2, r2, #7
 8000be8:	4910      	ldr	r1, [pc, #64]	@ (8000c2c <OLED_UpdateDisplayVSync+0xa8>)
 8000bea:	4411      	add	r1, r2
 8000bec:	2280      	movs	r2, #128	@ 0x80
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f003 fdca 	bl	8004788 <memcpy>

        // 发送一整行数据
        HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDR << 1, data, OLED_WIDTH + 1, HAL_MAX_DELAY);
 8000bf4:	1d3a      	adds	r2, r7, #4
 8000bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bfa:	9300      	str	r3, [sp, #0]
 8000bfc:	2381      	movs	r3, #129	@ 0x81
 8000bfe:	2178      	movs	r1, #120	@ 0x78
 8000c00:	480c      	ldr	r0, [pc, #48]	@ (8000c34 <OLED_UpdateDisplayVSync+0xb0>)
 8000c02:	f002 f84d 	bl	8002ca0 <HAL_I2C_Master_Transmit>
    for (uint8_t page = 0; page < 8; page++)
 8000c06:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8000c10:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000c14:	2b07      	cmp	r3, #7
 8000c16:	d9d5      	bls.n	8000bc4 <OLED_UpdateDisplayVSync+0x40>
    }
}
 8000c18:	bf00      	nop
 8000c1a:	bf00      	nop
 8000c1c:	3788      	adds	r7, #136	@ 0x88
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	200000d0 	.word	0x200000d0
 8000c28:	200000cc 	.word	0x200000cc
 8000c2c:	200004d4 	.word	0x200004d4
 8000c30:	200000d4 	.word	0x200000d4
 8000c34:	20000078 	.word	0x20000078

08000c38 <OLED_WritePixel>:

void OLED_WritePixel(uint8_t x, uint8_t y, uint8_t color)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	71fb      	strb	r3, [r7, #7]
 8000c42:	460b      	mov	r3, r1
 8000c44:	71bb      	strb	r3, [r7, #6]
 8000c46:	4613      	mov	r3, r2
 8000c48:	717b      	strb	r3, [r7, #5]
    // 边界检查
    if (x >= 128 || y >= 64)
 8000c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	db34      	blt.n	8000cbc <OLED_WritePixel+0x84>
 8000c52:	79bb      	ldrb	r3, [r7, #6]
 8000c54:	2b3f      	cmp	r3, #63	@ 0x3f
 8000c56:	d831      	bhi.n	8000cbc <OLED_WritePixel+0x84>
        return;

    // 计算像素所在的字节位置
    uint16_t byte_index = x + (y / 8) * 128;
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	b29a      	uxth	r2, r3
 8000c5c:	79bb      	ldrb	r3, [r7, #6]
 8000c5e:	08db      	lsrs	r3, r3, #3
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	01db      	lsls	r3, r3, #7
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	4413      	add	r3, r2
 8000c68:	81fb      	strh	r3, [r7, #14]
    uint8_t bit_position = y % 8;
 8000c6a:	79bb      	ldrb	r3, [r7, #6]
 8000c6c:	f003 0307 	and.w	r3, r3, #7
 8000c70:	737b      	strb	r3, [r7, #13]

    if (color) // 如果需要点亮像素
 8000c72:	797b      	ldrb	r3, [r7, #5]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d00f      	beq.n	8000c98 <OLED_WritePixel+0x60>
        OLED_BackBuffer[byte_index] |= (1 << bit_position);
 8000c78:	89fb      	ldrh	r3, [r7, #14]
 8000c7a:	4a13      	ldr	r2, [pc, #76]	@ (8000cc8 <OLED_WritePixel+0x90>)
 8000c7c:	5cd3      	ldrb	r3, [r2, r3]
 8000c7e:	b25a      	sxtb	r2, r3
 8000c80:	7b7b      	ldrb	r3, [r7, #13]
 8000c82:	2101      	movs	r1, #1
 8000c84:	fa01 f303 	lsl.w	r3, r1, r3
 8000c88:	b25b      	sxtb	r3, r3
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	b25a      	sxtb	r2, r3
 8000c8e:	89fb      	ldrh	r3, [r7, #14]
 8000c90:	b2d1      	uxtb	r1, r2
 8000c92:	4a0d      	ldr	r2, [pc, #52]	@ (8000cc8 <OLED_WritePixel+0x90>)
 8000c94:	54d1      	strb	r1, [r2, r3]
 8000c96:	e012      	b.n	8000cbe <OLED_WritePixel+0x86>
    else // 如果需要熄灭像素
        OLED_BackBuffer[byte_index] &= ~(1 << bit_position);
 8000c98:	89fb      	ldrh	r3, [r7, #14]
 8000c9a:	4a0b      	ldr	r2, [pc, #44]	@ (8000cc8 <OLED_WritePixel+0x90>)
 8000c9c:	5cd3      	ldrb	r3, [r2, r3]
 8000c9e:	b25a      	sxtb	r2, r3
 8000ca0:	7b7b      	ldrb	r3, [r7, #13]
 8000ca2:	2101      	movs	r1, #1
 8000ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca8:	b25b      	sxtb	r3, r3
 8000caa:	43db      	mvns	r3, r3
 8000cac:	b25b      	sxtb	r3, r3
 8000cae:	4013      	ands	r3, r2
 8000cb0:	b25a      	sxtb	r2, r3
 8000cb2:	89fb      	ldrh	r3, [r7, #14]
 8000cb4:	b2d1      	uxtb	r1, r2
 8000cb6:	4a04      	ldr	r2, [pc, #16]	@ (8000cc8 <OLED_WritePixel+0x90>)
 8000cb8:	54d1      	strb	r1, [r2, r3]
 8000cba:	e000      	b.n	8000cbe <OLED_WritePixel+0x86>
        return;
 8000cbc:	bf00      	nop
}
 8000cbe:	3714      	adds	r7, #20
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bc80      	pop	{r7}
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	200000d4 	.word	0x200000d4

08000ccc <OLED_SendCommand>:

void OLED_SendCommand(uint8_t command)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af02      	add	r7, sp, #8
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	71fb      	strb	r3, [r7, #7]
    uint8_t data[2];
    data[0] = 0x00; // Co = 0, D/C# = 0
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	733b      	strb	r3, [r7, #12]
    data[1] = command;
 8000cda:	79fb      	ldrb	r3, [r7, #7]
 8000cdc:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDR << 1, data, 2, HAL_MAX_DELAY);
 8000cde:	f107 020c 	add.w	r2, r7, #12
 8000ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce6:	9300      	str	r3, [sp, #0]
 8000ce8:	2302      	movs	r3, #2
 8000cea:	2178      	movs	r1, #120	@ 0x78
 8000cec:	4803      	ldr	r0, [pc, #12]	@ (8000cfc <OLED_SendCommand+0x30>)
 8000cee:	f001 ffd7 	bl	8002ca0 <HAL_I2C_Master_Transmit>
}
 8000cf2:	bf00      	nop
 8000cf4:	3710      	adds	r7, #16
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	20000078 	.word	0x20000078

08000d00 <OLED_Init>:
    OLED_UpdateDisplayVSync();
}

// 更新OLED初始化函数来使用双缓冲
void OLED_Init()
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
    HAL_Delay(100); // 等待OLED上电稳定
 8000d04:	2064      	movs	r0, #100	@ 0x64
 8000d06:	f001 fbe3 	bl	80024d0 <HAL_Delay>

    // 初始化命令序列
    OLED_SendCommand(0xAE); // 关闭显示
 8000d0a:	20ae      	movs	r0, #174	@ 0xae
 8000d0c:	f7ff ffde 	bl	8000ccc <OLED_SendCommand>
    OLED_SendCommand(0xD5); // 设置显示时钟分频比/振荡器频率
 8000d10:	20d5      	movs	r0, #213	@ 0xd5
 8000d12:	f7ff ffdb 	bl	8000ccc <OLED_SendCommand>
    OLED_SendCommand(0x80); // 推荐值
 8000d16:	2080      	movs	r0, #128	@ 0x80
 8000d18:	f7ff ffd8 	bl	8000ccc <OLED_SendCommand>
    OLED_SendCommand(0xA8); // 设置多路复用比
 8000d1c:	20a8      	movs	r0, #168	@ 0xa8
 8000d1e:	f7ff ffd5 	bl	8000ccc <OLED_SendCommand>
    OLED_SendCommand(0x3F); // 默认 0x3F (1/64 duty)
 8000d22:	203f      	movs	r0, #63	@ 0x3f
 8000d24:	f7ff ffd2 	bl	8000ccc <OLED_SendCommand>
    OLED_SendCommand(0xD3); // 设置显示偏移
 8000d28:	20d3      	movs	r0, #211	@ 0xd3
 8000d2a:	f7ff ffcf 	bl	8000ccc <OLED_SendCommand>
    OLED_SendCommand(0x00); // 无偏移
 8000d2e:	2000      	movs	r0, #0
 8000d30:	f7ff ffcc 	bl	8000ccc <OLED_SendCommand>
    OLED_SendCommand(0x40); // 设置显示开始行 (0x40-0x7F)
 8000d34:	2040      	movs	r0, #64	@ 0x40
 8000d36:	f7ff ffc9 	bl	8000ccc <OLED_SendCommand>
    OLED_SendCommand(0x8D); // 电荷泵设置
 8000d3a:	208d      	movs	r0, #141	@ 0x8d
 8000d3c:	f7ff ffc6 	bl	8000ccc <OLED_SendCommand>
    OLED_SendCommand(0x14); // 启用电荷泵
 8000d40:	2014      	movs	r0, #20
 8000d42:	f7ff ffc3 	bl	8000ccc <OLED_SendCommand>
    OLED_SendCommand(0x20); // 设置内存寻址模式
 8000d46:	2020      	movs	r0, #32
 8000d48:	f7ff ffc0 	bl	8000ccc <OLED_SendCommand>
    OLED_SendCommand(0x00); // 水平寻址模式
 8000d4c:	2000      	movs	r0, #0
 8000d4e:	f7ff ffbd 	bl	8000ccc <OLED_SendCommand>
    OLED_SendCommand(0xA1); // 段重映射，列地址127映射到SEG0
 8000d52:	20a1      	movs	r0, #161	@ 0xa1
 8000d54:	f7ff ffba 	bl	8000ccc <OLED_SendCommand>
    OLED_SendCommand(0xC8); // COM输出扫描方向，从COM[N-1]到COM0
 8000d58:	20c8      	movs	r0, #200	@ 0xc8
 8000d5a:	f7ff ffb7 	bl	8000ccc <OLED_SendCommand>
    OLED_SendCommand(0xDA); // COM硬件配置
 8000d5e:	20da      	movs	r0, #218	@ 0xda
 8000d60:	f7ff ffb4 	bl	8000ccc <OLED_SendCommand>
    OLED_SendCommand(0x12); // 交替COM配置，使能COM左/右重映射
 8000d64:	2012      	movs	r0, #18
 8000d66:	f7ff ffb1 	bl	8000ccc <OLED_SendCommand>
    OLED_SendCommand(0x81); // 设置对比度控制
 8000d6a:	2081      	movs	r0, #129	@ 0x81
 8000d6c:	f7ff ffae 	bl	8000ccc <OLED_SendCommand>
    OLED_SendCommand(0xCF); // 对比度值(0-255)
 8000d70:	20cf      	movs	r0, #207	@ 0xcf
 8000d72:	f7ff ffab 	bl	8000ccc <OLED_SendCommand>
    OLED_SendCommand(0xD9); // 设置预充电周期
 8000d76:	20d9      	movs	r0, #217	@ 0xd9
 8000d78:	f7ff ffa8 	bl	8000ccc <OLED_SendCommand>
    OLED_SendCommand(0xF1); // 第1和第2阶段的预充电周期
 8000d7c:	20f1      	movs	r0, #241	@ 0xf1
 8000d7e:	f7ff ffa5 	bl	8000ccc <OLED_SendCommand>
    OLED_SendCommand(0xDB); // 设置VCOMH解除选择电平
 8000d82:	20db      	movs	r0, #219	@ 0xdb
 8000d84:	f7ff ffa2 	bl	8000ccc <OLED_SendCommand>
    OLED_SendCommand(0x30); // 约0.83xVcc
 8000d88:	2030      	movs	r0, #48	@ 0x30
 8000d8a:	f7ff ff9f 	bl	8000ccc <OLED_SendCommand>
    OLED_SendCommand(0xA4); // 显示RAM内容
 8000d8e:	20a4      	movs	r0, #164	@ 0xa4
 8000d90:	f7ff ff9c 	bl	8000ccc <OLED_SendCommand>
    OLED_SendCommand(0xA6); // 正常显示(非反显)
 8000d94:	20a6      	movs	r0, #166	@ 0xa6
 8000d96:	f7ff ff99 	bl	8000ccc <OLED_SendCommand>
    OLED_SendCommand(0x2E); // 禁用滚动
 8000d9a:	202e      	movs	r0, #46	@ 0x2e
 8000d9c:	f7ff ff96 	bl	8000ccc <OLED_SendCommand>

    // 初始化缓冲区
    OLED_InitBuffer();
 8000da0:	f7ff feb0 	bl	8000b04 <OLED_InitBuffer>

    // 清屏
    OLED_ClearBuffer();
 8000da4:	f7ff fec2 	bl	8000b2c <OLED_ClearBuffer>

    // 开启显示
    OLED_SendCommand(0xAF);
 8000da8:	20af      	movs	r0, #175	@ 0xaf
 8000daa:	f7ff ff8f 	bl	8000ccc <OLED_SendCommand>
}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <EaseLinear>:
#include "oled_ui.h"

#pragma region TWEENS // 动画缓动函数全部在这里定义

static float EaseLinear(float t)
{
 8000db2:	b480      	push	{r7}
 8000db4:	b083      	sub	sp, #12
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]
    return t;
 8000dba:	687b      	ldr	r3, [r7, #4]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	370c      	adds	r7, #12
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bc80      	pop	{r7}
 8000dc4:	4770      	bx	lr

08000dc6 <EaseInQuad>:

static float EaseInQuad(float t)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b082      	sub	sp, #8
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
    return t * t;
 8000dce:	6879      	ldr	r1, [r7, #4]
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	f7ff fad3 	bl	800037c <__aeabi_fmul>
 8000dd6:	4603      	mov	r3, r0
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <EaseOutQuad>:

static float EaseOutQuad(float t)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
    return t * (2 - t);
 8000de8:	6879      	ldr	r1, [r7, #4]
 8000dea:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000dee:	f7ff f9bb 	bl	8000168 <__aeabi_fsub>
 8000df2:	4603      	mov	r3, r0
 8000df4:	6879      	ldr	r1, [r7, #4]
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff fac0 	bl	800037c <__aeabi_fmul>
 8000dfc:	4603      	mov	r3, r0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <EaseInOutQuad>:

static float EaseInOutQuad(float t)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b082      	sub	sp, #8
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	6078      	str	r0, [r7, #4]
    return t < 0.5f ? 2 * t * t : -1 + (4 - 2 * t) * t;
 8000e0e:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f7ff fc50 	bl	80006b8 <__aeabi_fcmplt>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d00b      	beq.n	8000e36 <EaseInOutQuad+0x30>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4619      	mov	r1, r3
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff f9a2 	bl	800016c <__addsf3>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	6879      	ldr	r1, [r7, #4]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff faa5 	bl	800037c <__aeabi_fmul>
 8000e32:	4603      	mov	r3, r0
 8000e34:	e016      	b.n	8000e64 <EaseInOutQuad+0x5e>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff f996 	bl	800016c <__addsf3>
 8000e40:	4603      	mov	r3, r0
 8000e42:	4619      	mov	r1, r3
 8000e44:	f04f 4081 	mov.w	r0, #1082130432	@ 0x40800000
 8000e48:	f7ff f98e 	bl	8000168 <__aeabi_fsub>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	6879      	ldr	r1, [r7, #4]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff fa93 	bl	800037c <__aeabi_fmul>
 8000e56:	4603      	mov	r3, r0
 8000e58:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff f983 	bl	8000168 <__aeabi_fsub>
 8000e62:	4603      	mov	r3, r0
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <EaseInCubic>:

static float EaseInCubic(float t)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
    return t * t * t;
 8000e74:	6879      	ldr	r1, [r7, #4]
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f7ff fa80 	bl	800037c <__aeabi_fmul>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	6879      	ldr	r1, [r7, #4]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff fa7b 	bl	800037c <__aeabi_fmul>
 8000e86:	4603      	mov	r3, r0
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <EaseOutCubic>:

static float EaseOutCubic(float t)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
    float t1 = t - 1;
 8000e98:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f7ff f963 	bl	8000168 <__aeabi_fsub>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	60fb      	str	r3, [r7, #12]
    return t1 * t1 * t1 + 1;
 8000ea6:	68f9      	ldr	r1, [r7, #12]
 8000ea8:	68f8      	ldr	r0, [r7, #12]
 8000eaa:	f7ff fa67 	bl	800037c <__aeabi_fmul>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	68f9      	ldr	r1, [r7, #12]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff fa62 	bl	800037c <__aeabi_fmul>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f7ff f954 	bl	800016c <__addsf3>
 8000ec4:	4603      	mov	r3, r0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <EaseInOutCubic>:

static float EaseInOutCubic(float t)
{
 8000ece:	b590      	push	{r4, r7, lr}
 8000ed0:	b083      	sub	sp, #12
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
    return t < 0.5f ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;
 8000ed6:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f7ff fbec 	bl	80006b8 <__aeabi_fcmplt>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d010      	beq.n	8000f08 <EaseInOutCubic+0x3a>
 8000ee6:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f7ff fa46 	bl	800037c <__aeabi_fmul>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	6879      	ldr	r1, [r7, #4]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff fa41 	bl	800037c <__aeabi_fmul>
 8000efa:	4603      	mov	r3, r0
 8000efc:	6879      	ldr	r1, [r7, #4]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff fa3c 	bl	800037c <__aeabi_fmul>
 8000f04:	4603      	mov	r3, r0
 8000f06:	e02f      	b.n	8000f68 <EaseInOutCubic+0x9a>
 8000f08:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8000f0c:	6878      	ldr	r0, [r7, #4]
 8000f0e:	f7ff f92b 	bl	8000168 <__aeabi_fsub>
 8000f12:	4603      	mov	r3, r0
 8000f14:	461c      	mov	r4, r3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff f926 	bl	800016c <__addsf3>
 8000f20:	4603      	mov	r3, r0
 8000f22:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff f91e 	bl	8000168 <__aeabi_fsub>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4620      	mov	r0, r4
 8000f32:	f7ff fa23 	bl	800037c <__aeabi_fmul>
 8000f36:	4603      	mov	r3, r0
 8000f38:	461c      	mov	r4, r3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff f914 	bl	800016c <__addsf3>
 8000f44:	4603      	mov	r3, r0
 8000f46:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff f90c 	bl	8000168 <__aeabi_fsub>
 8000f50:	4603      	mov	r3, r0
 8000f52:	4619      	mov	r1, r3
 8000f54:	4620      	mov	r0, r4
 8000f56:	f7ff fa11 	bl	800037c <__aeabi_fmul>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff f903 	bl	800016c <__addsf3>
 8000f66:	4603      	mov	r3, r0
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd90      	pop	{r4, r7, pc}

08000f70 <EaseInExpo>:

// 在现有EaseType_t枚举中添加这些新类型
// 指数缓动
static float EaseInExpo(float t)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
    return (t == 0) ? 0 : powf(2, 10 * (t - 1));
 8000f78:	f04f 0100 	mov.w	r1, #0
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f7ff fb91 	bl	80006a4 <__aeabi_fcmpeq>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d111      	bne.n	8000fac <EaseInExpo+0x3c>
 8000f88:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f7ff f8eb 	bl	8000168 <__aeabi_fsub>
 8000f92:	4603      	mov	r3, r0
 8000f94:	4908      	ldr	r1, [pc, #32]	@ (8000fb8 <EaseInExpo+0x48>)
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff f9f0 	bl	800037c <__aeabi_fmul>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000fa4:	f003 fbfe 	bl	80047a4 <powf>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	e001      	b.n	8000fb0 <EaseInExpo+0x40>
 8000fac:	f04f 0300 	mov.w	r3, #0
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	41200000 	.word	0x41200000

08000fbc <EaseOutExpo>:

static float EaseOutExpo(float t)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
    return (t == 1) ? 1 : (1 - powf(2, -10 * t));
 8000fc4:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f7ff fb6b 	bl	80006a4 <__aeabi_fcmpeq>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d111      	bne.n	8000ff8 <EaseOutExpo+0x3c>
 8000fd4:	490b      	ldr	r1, [pc, #44]	@ (8001004 <EaseOutExpo+0x48>)
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f7ff f9d0 	bl	800037c <__aeabi_fmul>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	4619      	mov	r1, r3
 8000fe0:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000fe4:	f003 fbde 	bl	80047a4 <powf>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	4619      	mov	r1, r3
 8000fec:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8000ff0:	f7ff f8ba 	bl	8000168 <__aeabi_fsub>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	e001      	b.n	8000ffc <EaseOutExpo+0x40>
 8000ff8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	c1200000 	.word	0xc1200000

08001008 <EaseInOutExpo>:

static float EaseInOutExpo(float t)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
    if (t == 0)
 8001010:	f04f 0100 	mov.w	r1, #0
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f7ff fb45 	bl	80006a4 <__aeabi_fcmpeq>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d002      	beq.n	8001026 <EaseInOutExpo+0x1e>
        return 0;
 8001020:	f04f 0300 	mov.w	r3, #0
 8001024:	e045      	b.n	80010b2 <EaseInOutExpo+0xaa>
    if (t == 1)
 8001026:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f7ff fb3a 	bl	80006a4 <__aeabi_fcmpeq>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d002      	beq.n	800103c <EaseInOutExpo+0x34>
        return 1;
 8001036:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800103a:	e03a      	b.n	80010b2 <EaseInOutExpo+0xaa>
    if (t < 0.5f)
 800103c:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f7ff fb39 	bl	80006b8 <__aeabi_fcmplt>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d016      	beq.n	800107a <EaseInOutExpo+0x72>
        return powf(2, 20 * t - 10) / 2;
 800104c:	491b      	ldr	r1, [pc, #108]	@ (80010bc <EaseInOutExpo+0xb4>)
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f7ff f994 	bl	800037c <__aeabi_fmul>
 8001054:	4603      	mov	r3, r0
 8001056:	491a      	ldr	r1, [pc, #104]	@ (80010c0 <EaseInOutExpo+0xb8>)
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff f885 	bl	8000168 <__aeabi_fsub>
 800105e:	4603      	mov	r3, r0
 8001060:	4619      	mov	r1, r3
 8001062:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001066:	f003 fb9d 	bl	80047a4 <powf>
 800106a:	4603      	mov	r3, r0
 800106c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff fa37 	bl	80004e4 <__aeabi_fdiv>
 8001076:	4603      	mov	r3, r0
 8001078:	e01b      	b.n	80010b2 <EaseInOutExpo+0xaa>
    return (2 - powf(2, -20 * t + 10)) / 2;
 800107a:	4912      	ldr	r1, [pc, #72]	@ (80010c4 <EaseInOutExpo+0xbc>)
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f7ff f97d 	bl	800037c <__aeabi_fmul>
 8001082:	4603      	mov	r3, r0
 8001084:	490e      	ldr	r1, [pc, #56]	@ (80010c0 <EaseInOutExpo+0xb8>)
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff f870 	bl	800016c <__addsf3>
 800108c:	4603      	mov	r3, r0
 800108e:	4619      	mov	r1, r3
 8001090:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001094:	f003 fb86 	bl	80047a4 <powf>
 8001098:	4603      	mov	r3, r0
 800109a:	4619      	mov	r1, r3
 800109c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80010a0:	f7ff f862 	bl	8000168 <__aeabi_fsub>
 80010a4:	4603      	mov	r3, r0
 80010a6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff fa1a 	bl	80004e4 <__aeabi_fdiv>
 80010b0:	4603      	mov	r3, r0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	41a00000 	.word	0x41a00000
 80010c0:	41200000 	.word	0x41200000
 80010c4:	c1a00000 	.word	0xc1a00000

080010c8 <EaseInCirc>:

// 圆形曲线缓动
static float EaseInCirc(float t)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
    return 1 - sqrtf(1 - t * t);
 80010d0:	6879      	ldr	r1, [r7, #4]
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f7ff f952 	bl	800037c <__aeabi_fmul>
 80010d8:	4603      	mov	r3, r0
 80010da:	4619      	mov	r1, r3
 80010dc:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80010e0:	f7ff f842 	bl	8000168 <__aeabi_fsub>
 80010e4:	4603      	mov	r3, r0
 80010e6:	4618      	mov	r0, r3
 80010e8:	f003 fba9 	bl	800483e <sqrtf>
 80010ec:	4603      	mov	r3, r0
 80010ee:	4619      	mov	r1, r3
 80010f0:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80010f4:	f7ff f838 	bl	8000168 <__aeabi_fsub>
 80010f8:	4603      	mov	r3, r0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <EaseOutCirc>:

static float EaseOutCirc(float t)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
    return sqrtf(1 - powf(t - 1, 2));
 800110a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f7ff f82a 	bl	8000168 <__aeabi_fsub>
 8001114:	4603      	mov	r3, r0
 8001116:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800111a:	4618      	mov	r0, r3
 800111c:	f003 fb42 	bl	80047a4 <powf>
 8001120:	4603      	mov	r3, r0
 8001122:	4619      	mov	r1, r3
 8001124:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001128:	f7ff f81e 	bl	8000168 <__aeabi_fsub>
 800112c:	4603      	mov	r3, r0
 800112e:	4618      	mov	r0, r3
 8001130:	f003 fb85 	bl	800483e <sqrtf>
 8001134:	4603      	mov	r3, r0
}
 8001136:	4618      	mov	r0, r3
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <EaseInOutCirc>:

static float EaseInOutCirc(float t)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	b082      	sub	sp, #8
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
    if (t < 0.5f)
 8001146:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f7ff fab4 	bl	80006b8 <__aeabi_fcmplt>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d022      	beq.n	800119c <EaseInOutCirc+0x5e>
        return (1 - sqrtf(1 - powf(2 * t, 2))) / 2;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4619      	mov	r1, r3
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff f806 	bl	800016c <__addsf3>
 8001160:	4603      	mov	r3, r0
 8001162:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001166:	4618      	mov	r0, r3
 8001168:	f003 fb1c 	bl	80047a4 <powf>
 800116c:	4603      	mov	r3, r0
 800116e:	4619      	mov	r1, r3
 8001170:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001174:	f7fe fff8 	bl	8000168 <__aeabi_fsub>
 8001178:	4603      	mov	r3, r0
 800117a:	4618      	mov	r0, r3
 800117c:	f003 fb5f 	bl	800483e <sqrtf>
 8001180:	4603      	mov	r3, r0
 8001182:	4619      	mov	r1, r3
 8001184:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001188:	f7fe ffee 	bl	8000168 <__aeabi_fsub>
 800118c:	4603      	mov	r3, r0
 800118e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff f9a6 	bl	80004e4 <__aeabi_fdiv>
 8001198:	4603      	mov	r3, r0
 800119a:	e027      	b.n	80011ec <EaseInOutCirc+0xae>
    return (sqrtf(1 - powf(-2 * t + 2, 2)) + 1) / 2;
 800119c:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f7ff f8eb 	bl	800037c <__aeabi_fmul>
 80011a6:	4603      	mov	r3, r0
 80011a8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7fe ffdd 	bl	800016c <__addsf3>
 80011b2:	4603      	mov	r3, r0
 80011b4:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80011b8:	4618      	mov	r0, r3
 80011ba:	f003 faf3 	bl	80047a4 <powf>
 80011be:	4603      	mov	r3, r0
 80011c0:	4619      	mov	r1, r3
 80011c2:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80011c6:	f7fe ffcf 	bl	8000168 <__aeabi_fsub>
 80011ca:	4603      	mov	r3, r0
 80011cc:	4618      	mov	r0, r3
 80011ce:	f003 fb36 	bl	800483e <sqrtf>
 80011d2:	4603      	mov	r3, r0
 80011d4:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80011d8:	4618      	mov	r0, r3
 80011da:	f7fe ffc7 	bl	800016c <__addsf3>
 80011de:	4603      	mov	r3, r0
 80011e0:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff f97d 	bl	80004e4 <__aeabi_fdiv>
 80011ea:	4603      	mov	r3, r0
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <EaseInElastic>:

// 弹性缓动
static float EaseInElastic(float t)
{
 80011f4:	b590      	push	{r4, r7, lr}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
    const float c4 = (2 * 3.14159f) / 3;
 80011fc:	4b22      	ldr	r3, [pc, #136]	@ (8001288 <EaseInElastic+0x94>)
 80011fe:	60fb      	str	r3, [r7, #12]

    if (t == 0)
 8001200:	f04f 0100 	mov.w	r1, #0
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f7ff fa4d 	bl	80006a4 <__aeabi_fcmpeq>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d002      	beq.n	8001216 <EaseInElastic+0x22>
        return 0;
 8001210:	f04f 0300 	mov.w	r3, #0
 8001214:	e034      	b.n	8001280 <EaseInElastic+0x8c>
    if (t == 1)
 8001216:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f7ff fa42 	bl	80006a4 <__aeabi_fcmpeq>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d002      	beq.n	800122c <EaseInElastic+0x38>
        return 1;
 8001226:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800122a:	e029      	b.n	8001280 <EaseInElastic+0x8c>
    return -powf(2, 10 * t - 10) * sinf((t * 10 - 10.75f) * c4);
 800122c:	4917      	ldr	r1, [pc, #92]	@ (800128c <EaseInElastic+0x98>)
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f7ff f8a4 	bl	800037c <__aeabi_fmul>
 8001234:	4603      	mov	r3, r0
 8001236:	4915      	ldr	r1, [pc, #84]	@ (800128c <EaseInElastic+0x98>)
 8001238:	4618      	mov	r0, r3
 800123a:	f7fe ff95 	bl	8000168 <__aeabi_fsub>
 800123e:	4603      	mov	r3, r0
 8001240:	4619      	mov	r1, r3
 8001242:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001246:	f003 faad 	bl	80047a4 <powf>
 800124a:	4603      	mov	r3, r0
 800124c:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 8001250:	490e      	ldr	r1, [pc, #56]	@ (800128c <EaseInElastic+0x98>)
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f7ff f892 	bl	800037c <__aeabi_fmul>
 8001258:	4603      	mov	r3, r0
 800125a:	490d      	ldr	r1, [pc, #52]	@ (8001290 <EaseInElastic+0x9c>)
 800125c:	4618      	mov	r0, r3
 800125e:	f7fe ff83 	bl	8000168 <__aeabi_fsub>
 8001262:	4603      	mov	r3, r0
 8001264:	68f9      	ldr	r1, [r7, #12]
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff f888 	bl	800037c <__aeabi_fmul>
 800126c:	4603      	mov	r3, r0
 800126e:	4618      	mov	r0, r3
 8001270:	f003 fb38 	bl	80048e4 <sinf>
 8001274:	4603      	mov	r3, r0
 8001276:	4619      	mov	r1, r3
 8001278:	4620      	mov	r0, r4
 800127a:	f7ff f87f 	bl	800037c <__aeabi_fmul>
 800127e:	4603      	mov	r3, r0
}
 8001280:	4618      	mov	r0, r3
 8001282:	3714      	adds	r7, #20
 8001284:	46bd      	mov	sp, r7
 8001286:	bd90      	pop	{r4, r7, pc}
 8001288:	40060a8b 	.word	0x40060a8b
 800128c:	41200000 	.word	0x41200000
 8001290:	412c0000 	.word	0x412c0000

08001294 <EaseOutElastic>:

static float EaseOutElastic(float t)
{
 8001294:	b590      	push	{r4, r7, lr}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
    const float c4 = (2 * 3.14159f) / 3;
 800129c:	4b22      	ldr	r3, [pc, #136]	@ (8001328 <EaseOutElastic+0x94>)
 800129e:	60fb      	str	r3, [r7, #12]

    if (t == 0)
 80012a0:	f04f 0100 	mov.w	r1, #0
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f7ff f9fd 	bl	80006a4 <__aeabi_fcmpeq>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d002      	beq.n	80012b6 <EaseOutElastic+0x22>
        return 0;
 80012b0:	f04f 0300 	mov.w	r3, #0
 80012b4:	e034      	b.n	8001320 <EaseOutElastic+0x8c>
    if (t == 1)
 80012b6:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff f9f2 	bl	80006a4 <__aeabi_fcmpeq>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d002      	beq.n	80012cc <EaseOutElastic+0x38>
        return 1;
 80012c6:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80012ca:	e029      	b.n	8001320 <EaseOutElastic+0x8c>
    return powf(2, -10 * t) * sinf((t * 10 - 0.75f) * c4) + 1;
 80012cc:	4917      	ldr	r1, [pc, #92]	@ (800132c <EaseOutElastic+0x98>)
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff f854 	bl	800037c <__aeabi_fmul>
 80012d4:	4603      	mov	r3, r0
 80012d6:	4619      	mov	r1, r3
 80012d8:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80012dc:	f003 fa62 	bl	80047a4 <powf>
 80012e0:	4604      	mov	r4, r0
 80012e2:	4913      	ldr	r1, [pc, #76]	@ (8001330 <EaseOutElastic+0x9c>)
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f7ff f849 	bl	800037c <__aeabi_fmul>
 80012ea:	4603      	mov	r3, r0
 80012ec:	f04f 517d 	mov.w	r1, #1061158912	@ 0x3f400000
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7fe ff39 	bl	8000168 <__aeabi_fsub>
 80012f6:	4603      	mov	r3, r0
 80012f8:	68f9      	ldr	r1, [r7, #12]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff f83e 	bl	800037c <__aeabi_fmul>
 8001300:	4603      	mov	r3, r0
 8001302:	4618      	mov	r0, r3
 8001304:	f003 faee 	bl	80048e4 <sinf>
 8001308:	4603      	mov	r3, r0
 800130a:	4619      	mov	r1, r3
 800130c:	4620      	mov	r0, r4
 800130e:	f7ff f835 	bl	800037c <__aeabi_fmul>
 8001312:	4603      	mov	r3, r0
 8001314:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001318:	4618      	mov	r0, r3
 800131a:	f7fe ff27 	bl	800016c <__addsf3>
 800131e:	4603      	mov	r3, r0
}
 8001320:	4618      	mov	r0, r3
 8001322:	3714      	adds	r7, #20
 8001324:	46bd      	mov	sp, r7
 8001326:	bd90      	pop	{r4, r7, pc}
 8001328:	40060a8b 	.word	0x40060a8b
 800132c:	c1200000 	.word	0xc1200000
 8001330:	41200000 	.word	0x41200000

08001334 <EaseInOutElastic>:

static float EaseInOutElastic(float t)
{
 8001334:	b590      	push	{r4, r7, lr}
 8001336:	b085      	sub	sp, #20
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
    const float c5 = (2 * 3.14159f) / 4.5f;
 800133c:	4b44      	ldr	r3, [pc, #272]	@ (8001450 <EaseInOutElastic+0x11c>)
 800133e:	60fb      	str	r3, [r7, #12]

    if (t == 0)
 8001340:	f04f 0100 	mov.w	r1, #0
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f7ff f9ad 	bl	80006a4 <__aeabi_fcmpeq>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d002      	beq.n	8001356 <EaseInOutElastic+0x22>
        return 0;
 8001350:	f04f 0300 	mov.w	r3, #0
 8001354:	e077      	b.n	8001446 <EaseInOutElastic+0x112>
    if (t == 1)
 8001356:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f7ff f9a2 	bl	80006a4 <__aeabi_fcmpeq>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d002      	beq.n	800136c <EaseInOutElastic+0x38>
        return 1;
 8001366:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800136a:	e06c      	b.n	8001446 <EaseInOutElastic+0x112>
    if (t < 0.5f)
 800136c:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f7ff f9a1 	bl	80006b8 <__aeabi_fcmplt>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d030      	beq.n	80013de <EaseInOutElastic+0xaa>
        return -(powf(2, 20 * t - 10) * sinf((20 * t - 11.125f) * c5)) / 2;
 800137c:	4935      	ldr	r1, [pc, #212]	@ (8001454 <EaseInOutElastic+0x120>)
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f7fe fffc 	bl	800037c <__aeabi_fmul>
 8001384:	4603      	mov	r3, r0
 8001386:	4934      	ldr	r1, [pc, #208]	@ (8001458 <EaseInOutElastic+0x124>)
 8001388:	4618      	mov	r0, r3
 800138a:	f7fe feed 	bl	8000168 <__aeabi_fsub>
 800138e:	4603      	mov	r3, r0
 8001390:	4619      	mov	r1, r3
 8001392:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001396:	f003 fa05 	bl	80047a4 <powf>
 800139a:	4604      	mov	r4, r0
 800139c:	492d      	ldr	r1, [pc, #180]	@ (8001454 <EaseInOutElastic+0x120>)
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f7fe ffec 	bl	800037c <__aeabi_fmul>
 80013a4:	4603      	mov	r3, r0
 80013a6:	492d      	ldr	r1, [pc, #180]	@ (800145c <EaseInOutElastic+0x128>)
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7fe fedd 	bl	8000168 <__aeabi_fsub>
 80013ae:	4603      	mov	r3, r0
 80013b0:	68f9      	ldr	r1, [r7, #12]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7fe ffe2 	bl	800037c <__aeabi_fmul>
 80013b8:	4603      	mov	r3, r0
 80013ba:	4618      	mov	r0, r3
 80013bc:	f003 fa92 	bl	80048e4 <sinf>
 80013c0:	4603      	mov	r3, r0
 80013c2:	4619      	mov	r1, r3
 80013c4:	4620      	mov	r0, r4
 80013c6:	f7fe ffd9 	bl	800037c <__aeabi_fmul>
 80013ca:	4603      	mov	r3, r0
 80013cc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80013d0:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff f885 	bl	80004e4 <__aeabi_fdiv>
 80013da:	4603      	mov	r3, r0
 80013dc:	e033      	b.n	8001446 <EaseInOutElastic+0x112>
    return (powf(2, -20 * t + 10) * sinf((20 * t - 11.125f) * c5)) / 2 + 1;
 80013de:	4920      	ldr	r1, [pc, #128]	@ (8001460 <EaseInOutElastic+0x12c>)
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f7fe ffcb 	bl	800037c <__aeabi_fmul>
 80013e6:	4603      	mov	r3, r0
 80013e8:	491b      	ldr	r1, [pc, #108]	@ (8001458 <EaseInOutElastic+0x124>)
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7fe febe 	bl	800016c <__addsf3>
 80013f0:	4603      	mov	r3, r0
 80013f2:	4619      	mov	r1, r3
 80013f4:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80013f8:	f003 f9d4 	bl	80047a4 <powf>
 80013fc:	4604      	mov	r4, r0
 80013fe:	4915      	ldr	r1, [pc, #84]	@ (8001454 <EaseInOutElastic+0x120>)
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f7fe ffbb 	bl	800037c <__aeabi_fmul>
 8001406:	4603      	mov	r3, r0
 8001408:	4914      	ldr	r1, [pc, #80]	@ (800145c <EaseInOutElastic+0x128>)
 800140a:	4618      	mov	r0, r3
 800140c:	f7fe feac 	bl	8000168 <__aeabi_fsub>
 8001410:	4603      	mov	r3, r0
 8001412:	68f9      	ldr	r1, [r7, #12]
 8001414:	4618      	mov	r0, r3
 8001416:	f7fe ffb1 	bl	800037c <__aeabi_fmul>
 800141a:	4603      	mov	r3, r0
 800141c:	4618      	mov	r0, r3
 800141e:	f003 fa61 	bl	80048e4 <sinf>
 8001422:	4603      	mov	r3, r0
 8001424:	4619      	mov	r1, r3
 8001426:	4620      	mov	r0, r4
 8001428:	f7fe ffa8 	bl	800037c <__aeabi_fmul>
 800142c:	4603      	mov	r3, r0
 800142e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff f856 	bl	80004e4 <__aeabi_fdiv>
 8001438:	4603      	mov	r3, r0
 800143a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800143e:	4618      	mov	r0, r3
 8001440:	f7fe fe94 	bl	800016c <__addsf3>
 8001444:	4603      	mov	r3, r0
}
 8001446:	4618      	mov	r0, r3
 8001448:	3714      	adds	r7, #20
 800144a:	46bd      	mov	sp, r7
 800144c:	bd90      	pop	{r4, r7, pc}
 800144e:	bf00      	nop
 8001450:	3fb2b8b9 	.word	0x3fb2b8b9
 8001454:	41a00000 	.word	0x41a00000
 8001458:	41200000 	.word	0x41200000
 800145c:	41320000 	.word	0x41320000
 8001460:	c1a00000 	.word	0xc1a00000

08001464 <EaseOutBounce>:

static float EaseOutBounce(float t)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
    const float n1 = 7.5625f;
 800146c:	4b45      	ldr	r3, [pc, #276]	@ (8001584 <EaseOutBounce+0x120>)
 800146e:	60fb      	str	r3, [r7, #12]
    const float d1 = 2.75f;
 8001470:	4b45      	ldr	r3, [pc, #276]	@ (8001588 <EaseOutBounce+0x124>)
 8001472:	60bb      	str	r3, [r7, #8]

    if (t < 1 / d1)
 8001474:	68b9      	ldr	r1, [r7, #8]
 8001476:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800147a:	f7ff f833 	bl	80004e4 <__aeabi_fdiv>
 800147e:	4603      	mov	r3, r0
 8001480:	4619      	mov	r1, r3
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f7ff f918 	bl	80006b8 <__aeabi_fcmplt>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d00a      	beq.n	80014a4 <EaseOutBounce+0x40>
    {
        return n1 * t * t;
 800148e:	6879      	ldr	r1, [r7, #4]
 8001490:	68f8      	ldr	r0, [r7, #12]
 8001492:	f7fe ff73 	bl	800037c <__aeabi_fmul>
 8001496:	4603      	mov	r3, r0
 8001498:	6879      	ldr	r1, [r7, #4]
 800149a:	4618      	mov	r0, r3
 800149c:	f7fe ff6e 	bl	800037c <__aeabi_fmul>
 80014a0:	4603      	mov	r3, r0
 80014a2:	e06a      	b.n	800157a <EaseOutBounce+0x116>
    }
    else if (t < 2 / d1)
 80014a4:	68b9      	ldr	r1, [r7, #8]
 80014a6:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80014aa:	f7ff f81b 	bl	80004e4 <__aeabi_fdiv>
 80014ae:	4603      	mov	r3, r0
 80014b0:	4619      	mov	r1, r3
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f7ff f900 	bl	80006b8 <__aeabi_fcmplt>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d01c      	beq.n	80014f8 <EaseOutBounce+0x94>
    {
        t -= 1.5f / d1;
 80014be:	68b9      	ldr	r1, [r7, #8]
 80014c0:	f04f 507f 	mov.w	r0, #1069547520	@ 0x3fc00000
 80014c4:	f7ff f80e 	bl	80004e4 <__aeabi_fdiv>
 80014c8:	4603      	mov	r3, r0
 80014ca:	4619      	mov	r1, r3
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f7fe fe4b 	bl	8000168 <__aeabi_fsub>
 80014d2:	4603      	mov	r3, r0
 80014d4:	607b      	str	r3, [r7, #4]
        return n1 * t * t + 0.75f;
 80014d6:	6879      	ldr	r1, [r7, #4]
 80014d8:	68f8      	ldr	r0, [r7, #12]
 80014da:	f7fe ff4f 	bl	800037c <__aeabi_fmul>
 80014de:	4603      	mov	r3, r0
 80014e0:	6879      	ldr	r1, [r7, #4]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7fe ff4a 	bl	800037c <__aeabi_fmul>
 80014e8:	4603      	mov	r3, r0
 80014ea:	f04f 517d 	mov.w	r1, #1061158912	@ 0x3f400000
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7fe fe3c 	bl	800016c <__addsf3>
 80014f4:	4603      	mov	r3, r0
 80014f6:	e040      	b.n	800157a <EaseOutBounce+0x116>
    }
    else if (t < 2.5f / d1)
 80014f8:	68b9      	ldr	r1, [r7, #8]
 80014fa:	4824      	ldr	r0, [pc, #144]	@ (800158c <EaseOutBounce+0x128>)
 80014fc:	f7fe fff2 	bl	80004e4 <__aeabi_fdiv>
 8001500:	4603      	mov	r3, r0
 8001502:	4619      	mov	r1, r3
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f7ff f8d7 	bl	80006b8 <__aeabi_fcmplt>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d01a      	beq.n	8001546 <EaseOutBounce+0xe2>
    {
        t -= 2.25f / d1;
 8001510:	68b9      	ldr	r1, [r7, #8]
 8001512:	481f      	ldr	r0, [pc, #124]	@ (8001590 <EaseOutBounce+0x12c>)
 8001514:	f7fe ffe6 	bl	80004e4 <__aeabi_fdiv>
 8001518:	4603      	mov	r3, r0
 800151a:	4619      	mov	r1, r3
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f7fe fe23 	bl	8000168 <__aeabi_fsub>
 8001522:	4603      	mov	r3, r0
 8001524:	607b      	str	r3, [r7, #4]
        return n1 * t * t + 0.9375f;
 8001526:	6879      	ldr	r1, [r7, #4]
 8001528:	68f8      	ldr	r0, [r7, #12]
 800152a:	f7fe ff27 	bl	800037c <__aeabi_fmul>
 800152e:	4603      	mov	r3, r0
 8001530:	6879      	ldr	r1, [r7, #4]
 8001532:	4618      	mov	r0, r3
 8001534:	f7fe ff22 	bl	800037c <__aeabi_fmul>
 8001538:	4603      	mov	r3, r0
 800153a:	4916      	ldr	r1, [pc, #88]	@ (8001594 <EaseOutBounce+0x130>)
 800153c:	4618      	mov	r0, r3
 800153e:	f7fe fe15 	bl	800016c <__addsf3>
 8001542:	4603      	mov	r3, r0
 8001544:	e019      	b.n	800157a <EaseOutBounce+0x116>
    }
    else
    {
        t -= 2.625f / d1;
 8001546:	68b9      	ldr	r1, [r7, #8]
 8001548:	4813      	ldr	r0, [pc, #76]	@ (8001598 <EaseOutBounce+0x134>)
 800154a:	f7fe ffcb 	bl	80004e4 <__aeabi_fdiv>
 800154e:	4603      	mov	r3, r0
 8001550:	4619      	mov	r1, r3
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f7fe fe08 	bl	8000168 <__aeabi_fsub>
 8001558:	4603      	mov	r3, r0
 800155a:	607b      	str	r3, [r7, #4]
        return n1 * t * t + 0.984375f;
 800155c:	6879      	ldr	r1, [r7, #4]
 800155e:	68f8      	ldr	r0, [r7, #12]
 8001560:	f7fe ff0c 	bl	800037c <__aeabi_fmul>
 8001564:	4603      	mov	r3, r0
 8001566:	6879      	ldr	r1, [r7, #4]
 8001568:	4618      	mov	r0, r3
 800156a:	f7fe ff07 	bl	800037c <__aeabi_fmul>
 800156e:	4603      	mov	r3, r0
 8001570:	490a      	ldr	r1, [pc, #40]	@ (800159c <EaseOutBounce+0x138>)
 8001572:	4618      	mov	r0, r3
 8001574:	f7fe fdfa 	bl	800016c <__addsf3>
 8001578:	4603      	mov	r3, r0
    }
}
 800157a:	4618      	mov	r0, r3
 800157c:	3710      	adds	r7, #16
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40f20000 	.word	0x40f20000
 8001588:	40300000 	.word	0x40300000
 800158c:	40200000 	.word	0x40200000
 8001590:	40100000 	.word	0x40100000
 8001594:	3f700000 	.word	0x3f700000
 8001598:	40280000 	.word	0x40280000
 800159c:	3f7c0000 	.word	0x3f7c0000

080015a0 <EaseInBounce>:

// 反弹缓动
static float EaseInBounce(float t)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
    return 1 - EaseOutBounce(1 - t);
 80015a8:	6879      	ldr	r1, [r7, #4]
 80015aa:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80015ae:	f7fe fddb 	bl	8000168 <__aeabi_fsub>
 80015b2:	4603      	mov	r3, r0
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff ff55 	bl	8001464 <EaseOutBounce>
 80015ba:	4603      	mov	r3, r0
 80015bc:	4619      	mov	r1, r3
 80015be:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80015c2:	f7fe fdd1 	bl	8000168 <__aeabi_fsub>
 80015c6:	4603      	mov	r3, r0
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <EaseInOutBounce>:

static float EaseInOutBounce(float t)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
    if (t < 0.5f)
 80015d8:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f7ff f86b 	bl	80006b8 <__aeabi_fcmplt>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d010      	beq.n	800160a <EaseInOutBounce+0x3a>
        return EaseInBounce(t * 2) * 0.5f;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	4619      	mov	r1, r3
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7fe fdbd 	bl	800016c <__addsf3>
 80015f2:	4603      	mov	r3, r0
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff ffd3 	bl	80015a0 <EaseInBounce>
 80015fa:	4603      	mov	r3, r0
 80015fc:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001600:	4618      	mov	r0, r3
 8001602:	f7fe febb 	bl	800037c <__aeabi_fmul>
 8001606:	4603      	mov	r3, r0
 8001608:	e01b      	b.n	8001642 <EaseInOutBounce+0x72>
    return EaseOutBounce(t * 2 - 1) * 0.5f + 0.5f;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4619      	mov	r1, r3
 800160e:	4618      	mov	r0, r3
 8001610:	f7fe fdac 	bl	800016c <__addsf3>
 8001614:	4603      	mov	r3, r0
 8001616:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800161a:	4618      	mov	r0, r3
 800161c:	f7fe fda4 	bl	8000168 <__aeabi_fsub>
 8001620:	4603      	mov	r3, r0
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff ff1e 	bl	8001464 <EaseOutBounce>
 8001628:	4603      	mov	r3, r0
 800162a:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800162e:	4618      	mov	r0, r3
 8001630:	f7fe fea4 	bl	800037c <__aeabi_fmul>
 8001634:	4603      	mov	r3, r0
 8001636:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800163a:	4618      	mov	r0, r3
 800163c:	f7fe fd96 	bl	800016c <__addsf3>
 8001640:	4603      	mov	r3, r0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
	...

0800164c <EaseInBack>:

// 背越式缓动
static float EaseInBack(float t)
{
 800164c:	b590      	push	{r4, r7, lr}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
    const float c1 = 1.70158f;
 8001654:	4b15      	ldr	r3, [pc, #84]	@ (80016ac <EaseInBack+0x60>)
 8001656:	60fb      	str	r3, [r7, #12]
    const float c3 = c1 + 1;
 8001658:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800165c:	68f8      	ldr	r0, [r7, #12]
 800165e:	f7fe fd85 	bl	800016c <__addsf3>
 8001662:	4603      	mov	r3, r0
 8001664:	60bb      	str	r3, [r7, #8]

    return c3 * t * t * t - c1 * t * t;
 8001666:	6879      	ldr	r1, [r7, #4]
 8001668:	68b8      	ldr	r0, [r7, #8]
 800166a:	f7fe fe87 	bl	800037c <__aeabi_fmul>
 800166e:	4603      	mov	r3, r0
 8001670:	6879      	ldr	r1, [r7, #4]
 8001672:	4618      	mov	r0, r3
 8001674:	f7fe fe82 	bl	800037c <__aeabi_fmul>
 8001678:	4603      	mov	r3, r0
 800167a:	6879      	ldr	r1, [r7, #4]
 800167c:	4618      	mov	r0, r3
 800167e:	f7fe fe7d 	bl	800037c <__aeabi_fmul>
 8001682:	4603      	mov	r3, r0
 8001684:	461c      	mov	r4, r3
 8001686:	6879      	ldr	r1, [r7, #4]
 8001688:	68f8      	ldr	r0, [r7, #12]
 800168a:	f7fe fe77 	bl	800037c <__aeabi_fmul>
 800168e:	4603      	mov	r3, r0
 8001690:	6879      	ldr	r1, [r7, #4]
 8001692:	4618      	mov	r0, r3
 8001694:	f7fe fe72 	bl	800037c <__aeabi_fmul>
 8001698:	4603      	mov	r3, r0
 800169a:	4619      	mov	r1, r3
 800169c:	4620      	mov	r0, r4
 800169e:	f7fe fd63 	bl	8000168 <__aeabi_fsub>
 80016a2:	4603      	mov	r3, r0
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3714      	adds	r7, #20
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd90      	pop	{r4, r7, pc}
 80016ac:	3fd9cd60 	.word	0x3fd9cd60

080016b0 <EaseOutBack>:

static float EaseOutBack(float t)
{
 80016b0:	b590      	push	{r4, r7, lr}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
    const float c1 = 1.70158f;
 80016b8:	4b1c      	ldr	r3, [pc, #112]	@ (800172c <EaseOutBack+0x7c>)
 80016ba:	60fb      	str	r3, [r7, #12]
    const float c3 = c1 + 1;
 80016bc:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80016c0:	68f8      	ldr	r0, [r7, #12]
 80016c2:	f7fe fd53 	bl	800016c <__addsf3>
 80016c6:	4603      	mov	r3, r0
 80016c8:	60bb      	str	r3, [r7, #8]

    return 1 + c3 * powf(t - 1, 3) + c1 * powf(t - 1, 2);
 80016ca:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f7fe fd4a 	bl	8000168 <__aeabi_fsub>
 80016d4:	4603      	mov	r3, r0
 80016d6:	4916      	ldr	r1, [pc, #88]	@ (8001730 <EaseOutBack+0x80>)
 80016d8:	4618      	mov	r0, r3
 80016da:	f003 f863 	bl	80047a4 <powf>
 80016de:	4603      	mov	r3, r0
 80016e0:	68b9      	ldr	r1, [r7, #8]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7fe fe4a 	bl	800037c <__aeabi_fmul>
 80016e8:	4603      	mov	r3, r0
 80016ea:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7fe fd3c 	bl	800016c <__addsf3>
 80016f4:	4603      	mov	r3, r0
 80016f6:	461c      	mov	r4, r3
 80016f8:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f7fe fd33 	bl	8000168 <__aeabi_fsub>
 8001702:	4603      	mov	r3, r0
 8001704:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001708:	4618      	mov	r0, r3
 800170a:	f003 f84b 	bl	80047a4 <powf>
 800170e:	4603      	mov	r3, r0
 8001710:	68f9      	ldr	r1, [r7, #12]
 8001712:	4618      	mov	r0, r3
 8001714:	f7fe fe32 	bl	800037c <__aeabi_fmul>
 8001718:	4603      	mov	r3, r0
 800171a:	4619      	mov	r1, r3
 800171c:	4620      	mov	r0, r4
 800171e:	f7fe fd25 	bl	800016c <__addsf3>
 8001722:	4603      	mov	r3, r0
}
 8001724:	4618      	mov	r0, r3
 8001726:	3714      	adds	r7, #20
 8001728:	46bd      	mov	sp, r7
 800172a:	bd90      	pop	{r4, r7, pc}
 800172c:	3fd9cd60 	.word	0x3fd9cd60
 8001730:	40400000 	.word	0x40400000

08001734 <EaseInOutBack>:

static float EaseInOutBack(float t)
{
 8001734:	b5b0      	push	{r4, r5, r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
    const float c1 = 1.70158f;
 800173c:	4b40      	ldr	r3, [pc, #256]	@ (8001840 <EaseInOutBack+0x10c>)
 800173e:	60fb      	str	r3, [r7, #12]
    const float c2 = c1 * 1.525f;
 8001740:	4940      	ldr	r1, [pc, #256]	@ (8001844 <EaseInOutBack+0x110>)
 8001742:	68f8      	ldr	r0, [r7, #12]
 8001744:	f7fe fe1a 	bl	800037c <__aeabi_fmul>
 8001748:	4603      	mov	r3, r0
 800174a:	60bb      	str	r3, [r7, #8]

    if (t < 0.5f)
 800174c:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f7fe ffb1 	bl	80006b8 <__aeabi_fcmplt>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d02c      	beq.n	80017b6 <EaseInOutBack+0x82>
        return (powf(2 * t, 2) * ((c2 + 1) * 2 * t - c2)) / 2;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	4619      	mov	r1, r3
 8001760:	4618      	mov	r0, r3
 8001762:	f7fe fd03 	bl	800016c <__addsf3>
 8001766:	4603      	mov	r3, r0
 8001768:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800176c:	4618      	mov	r0, r3
 800176e:	f003 f819 	bl	80047a4 <powf>
 8001772:	4604      	mov	r4, r0
 8001774:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001778:	68b8      	ldr	r0, [r7, #8]
 800177a:	f7fe fcf7 	bl	800016c <__addsf3>
 800177e:	4603      	mov	r3, r0
 8001780:	4619      	mov	r1, r3
 8001782:	4618      	mov	r0, r3
 8001784:	f7fe fcf2 	bl	800016c <__addsf3>
 8001788:	4603      	mov	r3, r0
 800178a:	6879      	ldr	r1, [r7, #4]
 800178c:	4618      	mov	r0, r3
 800178e:	f7fe fdf5 	bl	800037c <__aeabi_fmul>
 8001792:	4603      	mov	r3, r0
 8001794:	68b9      	ldr	r1, [r7, #8]
 8001796:	4618      	mov	r0, r3
 8001798:	f7fe fce6 	bl	8000168 <__aeabi_fsub>
 800179c:	4603      	mov	r3, r0
 800179e:	4619      	mov	r1, r3
 80017a0:	4620      	mov	r0, r4
 80017a2:	f7fe fdeb 	bl	800037c <__aeabi_fmul>
 80017a6:	4603      	mov	r3, r0
 80017a8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7fe fe99 	bl	80004e4 <__aeabi_fdiv>
 80017b2:	4603      	mov	r3, r0
 80017b4:	e03f      	b.n	8001836 <EaseInOutBack+0x102>
    return (powf(2 * t - 2, 2) * ((c2 + 1) * (t * 2 - 2) + c2) + 2) / 2;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4619      	mov	r1, r3
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7fe fcd6 	bl	800016c <__addsf3>
 80017c0:	4603      	mov	r3, r0
 80017c2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7fe fcce 	bl	8000168 <__aeabi_fsub>
 80017cc:	4603      	mov	r3, r0
 80017ce:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80017d2:	4618      	mov	r0, r3
 80017d4:	f002 ffe6 	bl	80047a4 <powf>
 80017d8:	4604      	mov	r4, r0
 80017da:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80017de:	68b8      	ldr	r0, [r7, #8]
 80017e0:	f7fe fcc4 	bl	800016c <__addsf3>
 80017e4:	4603      	mov	r3, r0
 80017e6:	461d      	mov	r5, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4619      	mov	r1, r3
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7fe fcbd 	bl	800016c <__addsf3>
 80017f2:	4603      	mov	r3, r0
 80017f4:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7fe fcb5 	bl	8000168 <__aeabi_fsub>
 80017fe:	4603      	mov	r3, r0
 8001800:	4619      	mov	r1, r3
 8001802:	4628      	mov	r0, r5
 8001804:	f7fe fdba 	bl	800037c <__aeabi_fmul>
 8001808:	4603      	mov	r3, r0
 800180a:	68b9      	ldr	r1, [r7, #8]
 800180c:	4618      	mov	r0, r3
 800180e:	f7fe fcad 	bl	800016c <__addsf3>
 8001812:	4603      	mov	r3, r0
 8001814:	4619      	mov	r1, r3
 8001816:	4620      	mov	r0, r4
 8001818:	f7fe fdb0 	bl	800037c <__aeabi_fmul>
 800181c:	4603      	mov	r3, r0
 800181e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001822:	4618      	mov	r0, r3
 8001824:	f7fe fca2 	bl	800016c <__addsf3>
 8001828:	4603      	mov	r3, r0
 800182a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800182e:	4618      	mov	r0, r3
 8001830:	f7fe fe58 	bl	80004e4 <__aeabi_fdiv>
 8001834:	4603      	mov	r3, r0
}
 8001836:	4618      	mov	r0, r3
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bdb0      	pop	{r4, r5, r7, pc}
 800183e:	bf00      	nop
 8001840:	3fd9cd60 	.word	0x3fd9cd60
 8001844:	3fc33333 	.word	0x3fc33333

08001848 <EaseInSine>:

// 正弦缓动
static float EaseInSine(float t)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
    return 1 - cosf((t * 3.14159f) / 2);
 8001850:	490c      	ldr	r1, [pc, #48]	@ (8001884 <EaseInSine+0x3c>)
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f7fe fd92 	bl	800037c <__aeabi_fmul>
 8001858:	4603      	mov	r3, r0
 800185a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800185e:	4618      	mov	r0, r3
 8001860:	f7fe fe40 	bl	80004e4 <__aeabi_fdiv>
 8001864:	4603      	mov	r3, r0
 8001866:	4618      	mov	r0, r3
 8001868:	f003 f804 	bl	8004874 <cosf>
 800186c:	4603      	mov	r3, r0
 800186e:	4619      	mov	r1, r3
 8001870:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001874:	f7fe fc78 	bl	8000168 <__aeabi_fsub>
 8001878:	4603      	mov	r3, r0
}
 800187a:	4618      	mov	r0, r3
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40490fd0 	.word	0x40490fd0

08001888 <EaseOutSine>:

static float EaseOutSine(float t)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
    return sinf((t * 3.14159f) / 2);
 8001890:	4909      	ldr	r1, [pc, #36]	@ (80018b8 <EaseOutSine+0x30>)
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f7fe fd72 	bl	800037c <__aeabi_fmul>
 8001898:	4603      	mov	r3, r0
 800189a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800189e:	4618      	mov	r0, r3
 80018a0:	f7fe fe20 	bl	80004e4 <__aeabi_fdiv>
 80018a4:	4603      	mov	r3, r0
 80018a6:	4618      	mov	r0, r3
 80018a8:	f003 f81c 	bl	80048e4 <sinf>
 80018ac:	4603      	mov	r3, r0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40490fd0 	.word	0x40490fd0

080018bc <EaseInOutSine>:

static float EaseInOutSine(float t)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
    return -(cosf(3.14159f * t) - 1) / 2;
 80018c4:	490d      	ldr	r1, [pc, #52]	@ (80018fc <EaseInOutSine+0x40>)
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f7fe fd58 	bl	800037c <__aeabi_fmul>
 80018cc:	4603      	mov	r3, r0
 80018ce:	4618      	mov	r0, r3
 80018d0:	f002 ffd0 	bl	8004874 <cosf>
 80018d4:	4603      	mov	r3, r0
 80018d6:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80018da:	4618      	mov	r0, r3
 80018dc:	f7fe fc44 	bl	8000168 <__aeabi_fsub>
 80018e0:	4603      	mov	r3, r0
 80018e2:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80018e6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7fe fdfa 	bl	80004e4 <__aeabi_fdiv>
 80018f0:	4603      	mov	r3, r0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40490fd0 	.word	0x40490fd0

08001900 <GetEaseValue>:

static float GetEaseValue(float progress, EaseType_t easeType)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	460b      	mov	r3, r1
 800190a:	70fb      	strb	r3, [r7, #3]
    switch (easeType)
 800190c:	78fb      	ldrb	r3, [r7, #3]
 800190e:	2b18      	cmp	r3, #24
 8001910:	f200 80b3 	bhi.w	8001a7a <GetEaseValue+0x17a>
 8001914:	a201      	add	r2, pc, #4	@ (adr r2, 800191c <GetEaseValue+0x1c>)
 8001916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800191a:	bf00      	nop
 800191c:	08001981 	.word	0x08001981
 8001920:	0800198b 	.word	0x0800198b
 8001924:	08001995 	.word	0x08001995
 8001928:	0800199f 	.word	0x0800199f
 800192c:	080019a9 	.word	0x080019a9
 8001930:	080019b3 	.word	0x080019b3
 8001934:	080019bd 	.word	0x080019bd
 8001938:	080019c7 	.word	0x080019c7
 800193c:	080019d1 	.word	0x080019d1
 8001940:	080019db 	.word	0x080019db
 8001944:	080019e5 	.word	0x080019e5
 8001948:	080019ef 	.word	0x080019ef
 800194c:	080019f9 	.word	0x080019f9
 8001950:	08001a03 	.word	0x08001a03
 8001954:	08001a0d 	.word	0x08001a0d
 8001958:	08001a17 	.word	0x08001a17
 800195c:	08001a21 	.word	0x08001a21
 8001960:	08001a2b 	.word	0x08001a2b
 8001964:	08001a35 	.word	0x08001a35
 8001968:	08001a3f 	.word	0x08001a3f
 800196c:	08001a49 	.word	0x08001a49
 8001970:	08001a53 	.word	0x08001a53
 8001974:	08001a5d 	.word	0x08001a5d
 8001978:	08001a67 	.word	0x08001a67
 800197c:	08001a71 	.word	0x08001a71
    {
    case EASE_LINEAR:
        return EaseLinear(progress);
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f7ff fa16 	bl	8000db2 <EaseLinear>
 8001986:	4603      	mov	r3, r0
 8001988:	e078      	b.n	8001a7c <GetEaseValue+0x17c>
    case EASE_IN_QUAD:
        return EaseInQuad(progress);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f7ff fa1b 	bl	8000dc6 <EaseInQuad>
 8001990:	4603      	mov	r3, r0
 8001992:	e073      	b.n	8001a7c <GetEaseValue+0x17c>
    case EASE_OUT_QUAD:
        return EaseOutQuad(progress);
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f7ff fa23 	bl	8000de0 <EaseOutQuad>
 800199a:	4603      	mov	r3, r0
 800199c:	e06e      	b.n	8001a7c <GetEaseValue+0x17c>
    case EASE_INOUT_QUAD:
        return EaseInOutQuad(progress);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f7ff fa31 	bl	8000e06 <EaseInOutQuad>
 80019a4:	4603      	mov	r3, r0
 80019a6:	e069      	b.n	8001a7c <GetEaseValue+0x17c>
    case EASE_IN_CUBIC:
        return EaseInCubic(progress);
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f7ff fa5f 	bl	8000e6c <EaseInCubic>
 80019ae:	4603      	mov	r3, r0
 80019b0:	e064      	b.n	8001a7c <GetEaseValue+0x17c>
    case EASE_OUT_CUBIC:
        return EaseOutCubic(progress);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f7ff fa6c 	bl	8000e90 <EaseOutCubic>
 80019b8:	4603      	mov	r3, r0
 80019ba:	e05f      	b.n	8001a7c <GetEaseValue+0x17c>
    case EASE_INOUT_CUBIC:
        return EaseInOutCubic(progress);
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f7ff fa86 	bl	8000ece <EaseInOutCubic>
 80019c2:	4603      	mov	r3, r0
 80019c4:	e05a      	b.n	8001a7c <GetEaseValue+0x17c>
    case EASE_IN_EXPO:
        return EaseInExpo(progress);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f7ff fad2 	bl	8000f70 <EaseInExpo>
 80019cc:	4603      	mov	r3, r0
 80019ce:	e055      	b.n	8001a7c <GetEaseValue+0x17c>
    case EASE_OUT_EXPO:
        return EaseOutExpo(progress);
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f7ff faf3 	bl	8000fbc <EaseOutExpo>
 80019d6:	4603      	mov	r3, r0
 80019d8:	e050      	b.n	8001a7c <GetEaseValue+0x17c>
    case EASE_INOUT_EXPO:
        return EaseInOutExpo(progress);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f7ff fb14 	bl	8001008 <EaseInOutExpo>
 80019e0:	4603      	mov	r3, r0
 80019e2:	e04b      	b.n	8001a7c <GetEaseValue+0x17c>
    case EASE_IN_CIRC:
        return EaseInCirc(progress);
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f7ff fb6f 	bl	80010c8 <EaseInCirc>
 80019ea:	4603      	mov	r3, r0
 80019ec:	e046      	b.n	8001a7c <GetEaseValue+0x17c>
    case EASE_OUT_CIRC:
        return EaseOutCirc(progress);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f7ff fb87 	bl	8001102 <EaseOutCirc>
 80019f4:	4603      	mov	r3, r0
 80019f6:	e041      	b.n	8001a7c <GetEaseValue+0x17c>
    case EASE_INOUT_CIRC:
        return EaseInOutCirc(progress);
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f7ff fba0 	bl	800113e <EaseInOutCirc>
 80019fe:	4603      	mov	r3, r0
 8001a00:	e03c      	b.n	8001a7c <GetEaseValue+0x17c>
    case EASE_IN_ELASTIC:
        return EaseInElastic(progress);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f7ff fbf6 	bl	80011f4 <EaseInElastic>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	e037      	b.n	8001a7c <GetEaseValue+0x17c>
    case EASE_OUT_ELASTIC:
        return EaseOutElastic(progress);
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f7ff fc41 	bl	8001294 <EaseOutElastic>
 8001a12:	4603      	mov	r3, r0
 8001a14:	e032      	b.n	8001a7c <GetEaseValue+0x17c>
    case EASE_INOUT_ELASTIC:
        return EaseInOutElastic(progress);
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f7ff fc8c 	bl	8001334 <EaseInOutElastic>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	e02d      	b.n	8001a7c <GetEaseValue+0x17c>
    case EASE_IN_BOUNCE:
        return EaseInBounce(progress);
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f7ff fdbd 	bl	80015a0 <EaseInBounce>
 8001a26:	4603      	mov	r3, r0
 8001a28:	e028      	b.n	8001a7c <GetEaseValue+0x17c>
    case EASE_OUT_BOUNCE:
        return EaseOutBounce(progress);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f7ff fd1a 	bl	8001464 <EaseOutBounce>
 8001a30:	4603      	mov	r3, r0
 8001a32:	e023      	b.n	8001a7c <GetEaseValue+0x17c>
    case EASE_INOUT_BOUNCE:
        return EaseInOutBounce(progress);
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f7ff fdcb 	bl	80015d0 <EaseInOutBounce>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	e01e      	b.n	8001a7c <GetEaseValue+0x17c>
    case EASE_IN_BACK:
        return EaseInBack(progress);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f7ff fe04 	bl	800164c <EaseInBack>
 8001a44:	4603      	mov	r3, r0
 8001a46:	e019      	b.n	8001a7c <GetEaseValue+0x17c>
    case EASE_OUT_BACK:
        return EaseOutBack(progress);
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f7ff fe31 	bl	80016b0 <EaseOutBack>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	e014      	b.n	8001a7c <GetEaseValue+0x17c>
    case EASE_INOUT_BACK:
        return EaseInOutBack(progress);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f7ff fe6e 	bl	8001734 <EaseInOutBack>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	e00f      	b.n	8001a7c <GetEaseValue+0x17c>
    case EASE_IN_SINE:
        return EaseInSine(progress);
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f7ff fef3 	bl	8001848 <EaseInSine>
 8001a62:	4603      	mov	r3, r0
 8001a64:	e00a      	b.n	8001a7c <GetEaseValue+0x17c>
    case EASE_OUT_SINE:
        return EaseOutSine(progress);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f7ff ff0e 	bl	8001888 <EaseOutSine>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	e005      	b.n	8001a7c <GetEaseValue+0x17c>
    case EASE_INOUT_SINE:
        return EaseInOutSine(progress);
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f7ff ff23 	bl	80018bc <EaseInOutSine>
 8001a76:	4603      	mov	r3, r0
 8001a78:	e000      	b.n	8001a7c <GetEaseValue+0x17c>
    default:
        return progress;
 8001a7a:	687b      	ldr	r3, [r7, #4]
    }
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3708      	adds	r7, #8
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <OLED_InitAnimation>:

#pragma region ANIMATIONTWEENS
// 这里是底层动画实现
void OLED_InitAnimation(Animation_t *anim, float startValue, float endValue,
                        uint32_t duration, EaseType_t easeType)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
 8001a90:	603b      	str	r3, [r7, #0]
    anim->startTime = HAL_GetTick();
 8001a92:	f000 fd13 	bl	80024bc <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	601a      	str	r2, [r3, #0]
    anim->duration = duration;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	683a      	ldr	r2, [r7, #0]
 8001aa0:	605a      	str	r2, [r3, #4]
    anim->startValue = startValue;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	68ba      	ldr	r2, [r7, #8]
 8001aa6:	609a      	str	r2, [r3, #8]
    anim->endValue = endValue;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	60da      	str	r2, [r3, #12]
    anim->currentValue = startValue;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	68ba      	ldr	r2, [r7, #8]
 8001ab2:	611a      	str	r2, [r3, #16]
    anim->isActive = 1;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	751a      	strb	r2, [r3, #20]
    anim->easeType = easeType;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	7e3a      	ldrb	r2, [r7, #24]
 8001abe:	755a      	strb	r2, [r3, #21]
}
 8001ac0:	bf00      	nop
 8001ac2:	3710      	adds	r7, #16
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <OLED_UpdateAnimation>:

// 更新动画状态，返回isActive的值
uint8_t OLED_UpdateAnimation(Animation_t *anim, uint32_t currentTime)
{
 8001ac8:	b590      	push	{r4, r7, lr}
 8001aca:	b087      	sub	sp, #28
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
    if (!anim->isActive)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	7d1b      	ldrb	r3, [r3, #20]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d101      	bne.n	8001ade <OLED_UpdateAnimation+0x16>
        return 0;
 8001ada:	2300      	movs	r3, #0
 8001adc:	e04d      	b.n	8001b7a <OLED_UpdateAnimation+0xb2>

    uint32_t elapsedTime = currentTime - anim->startTime;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	683a      	ldr	r2, [r7, #0]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	617b      	str	r3, [r7, #20]

    // 动画完成
    if (elapsedTime >= anim->duration || anim->currentValue == anim->endValue) // 如果我的目标在指定的点上，也关闭isActive
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	697a      	ldr	r2, [r7, #20]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d20a      	bcs.n	8001b08 <OLED_UpdateAnimation+0x40>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	691a      	ldr	r2, [r3, #16]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	4619      	mov	r1, r3
 8001afc:	4610      	mov	r0, r2
 8001afe:	f7fe fdd1 	bl	80006a4 <__aeabi_fcmpeq>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d008      	beq.n	8001b1a <OLED_UpdateAnimation+0x52>
    {
        anim->currentValue = anim->endValue;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	68da      	ldr	r2, [r3, #12]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	611a      	str	r2, [r3, #16]
        anim->isActive = 0;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	751a      	strb	r2, [r3, #20]
        return 0;
 8001b16:	2300      	movs	r3, #0
 8001b18:	e02f      	b.n	8001b7a <OLED_UpdateAnimation+0xb2>
    }

    // 计算当前进度 (0.0 - 1.0)
    float progress = (float)elapsedTime / anim->duration;
 8001b1a:	6978      	ldr	r0, [r7, #20]
 8001b1c:	f7fe fbd6 	bl	80002cc <__aeabi_ui2f>
 8001b20:	4604      	mov	r4, r0
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7fe fbd0 	bl	80002cc <__aeabi_ui2f>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4620      	mov	r0, r4
 8001b32:	f7fe fcd7 	bl	80004e4 <__aeabi_fdiv>
 8001b36:	4603      	mov	r3, r0
 8001b38:	613b      	str	r3, [r7, #16]

    // 应用缓动函数
    float easedProgress = GetEaseValue(progress, anim->easeType);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	7d5b      	ldrb	r3, [r3, #21]
 8001b3e:	4619      	mov	r1, r3
 8001b40:	6938      	ldr	r0, [r7, #16]
 8001b42:	f7ff fedd 	bl	8001900 <GetEaseValue>
 8001b46:	60f8      	str	r0, [r7, #12]

    // 计算当前值
    anim->currentValue = anim->startValue + (anim->endValue - anim->startValue) * easedProgress;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689c      	ldr	r4, [r3, #8]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	68da      	ldr	r2, [r3, #12]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	4619      	mov	r1, r3
 8001b56:	4610      	mov	r0, r2
 8001b58:	f7fe fb06 	bl	8000168 <__aeabi_fsub>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	68f9      	ldr	r1, [r7, #12]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7fe fc0b 	bl	800037c <__aeabi_fmul>
 8001b66:	4603      	mov	r3, r0
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4620      	mov	r0, r4
 8001b6c:	f7fe fafe 	bl	800016c <__addsf3>
 8001b70:	4603      	mov	r3, r0
 8001b72:	461a      	mov	r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	611a      	str	r2, [r3, #16]

    return 1;
 8001b78:	2301      	movs	r3, #1
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	371c      	adds	r7, #28
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd90      	pop	{r4, r7, pc}

08001b82 <OLED_GetAnimationValue>:

// 获取当前动画值
float OLED_GetAnimationValue(Animation_t *anim)
{
 8001b82:	b480      	push	{r7}
 8001b84:	b083      	sub	sp, #12
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
    return anim->currentValue;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	691b      	ldr	r3, [r3, #16]
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc80      	pop	{r7}
 8001b96:	4770      	bx	lr

08001b98 <OLED_InitAnimationManager>:

// 动画管理器全局管理部分
AnimationManager_t g_AnimationManager; // 声明一个全局的动画管理器

void OLED_InitAnimationManager(AnimationManager_t *manager) // 这是初始化一个动画管理器，填入你的manager名字，在系统初始化时候调用它
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
    manager->count = 0;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f883 25f0 	strb.w	r2, [r3, #1520]	@ 0x5f0
    memset(manager->taggedAnimations, 0, sizeof(manager->taggedAnimations));
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f44f 62be 	mov.w	r2, #1520	@ 0x5f0
 8001bae:	2100      	movs	r1, #0
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f002 fda4 	bl	80046fe <memset>
}
 8001bb6:	bf00      	nop
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <OLED_FindTaggedAnimation>:

TaggedAnimation_t *OLED_FindTaggedAnimation(AnimationManager_t *manager, const char *tag) // 查找对应manager的标签对应的动画tag
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b084      	sub	sp, #16
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
 8001bc6:	6039      	str	r1, [r7, #0]
    for (uint8_t i = 0; i < manager->count; i++)
 8001bc8:	2300      	movs	r3, #0
 8001bca:	73fb      	strb	r3, [r7, #15]
 8001bcc:	e016      	b.n	8001bfc <OLED_FindTaggedAnimation+0x3e>
    {
        if (strcmp(manager->taggedAnimations[i].tag, tag) == 0)
 8001bce:	7bfb      	ldrb	r3, [r7, #15]
 8001bd0:	224c      	movs	r2, #76	@ 0x4c
 8001bd2:	fb02 f303 	mul.w	r3, r2, r3
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	4413      	add	r3, r2
 8001bda:	6839      	ldr	r1, [r7, #0]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7fe fab5 	bl	800014c <strcmp>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d106      	bne.n	8001bf6 <OLED_FindTaggedAnimation+0x38>
        {
            return &manager->taggedAnimations[i];
 8001be8:	7bfb      	ldrb	r3, [r7, #15]
 8001bea:	224c      	movs	r2, #76	@ 0x4c
 8001bec:	fb02 f303 	mul.w	r3, r2, r3
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	e009      	b.n	8001c0a <OLED_FindTaggedAnimation+0x4c>
    for (uint8_t i = 0; i < manager->count; i++)
 8001bf6:	7bfb      	ldrb	r3, [r7, #15]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	73fb      	strb	r3, [r7, #15]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f893 35f0 	ldrb.w	r3, [r3, #1520]	@ 0x5f0
 8001c02:	7bfa      	ldrb	r2, [r7, #15]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d3e2      	bcc.n	8001bce <OLED_FindTaggedAnimation+0x10>
        }
    }
    return NULL;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3710      	adds	r7, #16
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <OLED_GetObjectPosition>:

uint8_t OLED_GetObjectPosition(AnimationManager_t *manager, const char *tag, float *x, float *y) // 获取tag当前位置
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b086      	sub	sp, #24
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	60f8      	str	r0, [r7, #12]
 8001c1a:	60b9      	str	r1, [r7, #8]
 8001c1c:	607a      	str	r2, [r7, #4]
 8001c1e:	603b      	str	r3, [r7, #0]
    TaggedAnimation_t *anim = OLED_FindTaggedAnimation(manager, tag);
 8001c20:	68b9      	ldr	r1, [r7, #8]
 8001c22:	68f8      	ldr	r0, [r7, #12]
 8001c24:	f7ff ffcb 	bl	8001bbe <OLED_FindTaggedAnimation>
 8001c28:	6178      	str	r0, [r7, #20]
    if (anim)
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d00f      	beq.n	8001c50 <OLED_GetObjectPosition+0x3e>
    {
        if (x)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d003      	beq.n	8001c3e <OLED_GetObjectPosition+0x2c>
            *x = anim->currentX;
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	601a      	str	r2, [r3, #0]
        if (y)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d003      	beq.n	8001c4c <OLED_GetObjectPosition+0x3a>
            *y = anim->currentY;
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	601a      	str	r2, [r3, #0]
        return 1;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e000      	b.n	8001c52 <OLED_GetObjectPosition+0x40>
    }
    return 0;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3718      	adds	r7, #24
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <OLED_MoveObject>:

// 移动指定标签的对象
void OLED_MoveObject(AnimationManager_t *manager, const char *tag,
                     float startX, float startY, float targetX, float targetY,
                     uint32_t duration, EaseType_t easeType) // 这个函数是用来移动一个对象的，tag是对象的标签，startX和startY是起始坐标，targetX和targetY是目标坐标，duration是动画持续时间，easeType是缓动类型
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b088      	sub	sp, #32
 8001c5e:	af02      	add	r7, sp, #8
 8001c60:	60f8      	str	r0, [r7, #12]
 8001c62:	60b9      	str	r1, [r7, #8]
 8001c64:	607a      	str	r2, [r7, #4]
 8001c66:	603b      	str	r3, [r7, #0]
    // 查找已存在的动画
    TaggedAnimation_t *anim = OLED_FindTaggedAnimation(manager, tag);
 8001c68:	68b9      	ldr	r1, [r7, #8]
 8001c6a:	68f8      	ldr	r0, [r7, #12]
 8001c6c:	f7ff ffa7 	bl	8001bbe <OLED_FindTaggedAnimation>
 8001c70:	6178      	str	r0, [r7, #20]

    // 如果没找到并且还有可用槽位，创建新的动画
    if (anim == NULL)
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d122      	bne.n	8001cbe <OLED_MoveObject+0x64>
    {
        if (manager->count >= MAX_ANIMATIONS)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f893 35f0 	ldrb.w	r3, [r3, #1520]	@ 0x5f0
 8001c7e:	2b13      	cmp	r3, #19
 8001c80:	d838      	bhi.n	8001cf4 <OLED_MoveObject+0x9a>
            return; // 动画已满，无法添加

        anim = &manager->taggedAnimations[manager->count++];
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	f893 35f0 	ldrb.w	r3, [r3, #1520]	@ 0x5f0
 8001c88:	1c5a      	adds	r2, r3, #1
 8001c8a:	b2d1      	uxtb	r1, r2
 8001c8c:	68fa      	ldr	r2, [r7, #12]
 8001c8e:	f882 15f0 	strb.w	r1, [r2, #1520]	@ 0x5f0
 8001c92:	461a      	mov	r2, r3
 8001c94:	234c      	movs	r3, #76	@ 0x4c
 8001c96:	fb02 f303 	mul.w	r3, r2, r3
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	617b      	str	r3, [r7, #20]
        strncpy(anim->tag, tag, sizeof(anim->tag) - 1);
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	220f      	movs	r2, #15
 8001ca4:	68b9      	ldr	r1, [r7, #8]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f002 fd31 	bl	800470e <strncpy>
        anim->tag[sizeof(anim->tag) - 1] = '\0'; // 确保字符串结束
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	73da      	strb	r2, [r3, #15]
        anim->currentX = startX;
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	645a      	str	r2, [r3, #68]	@ 0x44
        anim->currentY = startY;
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	683a      	ldr	r2, [r7, #0]
 8001cbc:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    // 初始化或更新X和Y坐标的动画
    OLED_InitAnimation(&anim->xAnimation, startX, targetX, duration, easeType);
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	f103 0010 	add.w	r0, r3, #16
 8001cc4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001cc8:	9300      	str	r3, [sp, #0]
 8001cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ccc:	6a3a      	ldr	r2, [r7, #32]
 8001cce:	6879      	ldr	r1, [r7, #4]
 8001cd0:	f7ff fed8 	bl	8001a84 <OLED_InitAnimation>
    OLED_InitAnimation(&anim->yAnimation, startY, targetY, duration, easeType);
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8001cda:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001cde:	9300      	str	r3, [sp, #0]
 8001ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ce2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ce4:	6839      	ldr	r1, [r7, #0]
 8001ce6:	f7ff fecd 	bl	8001a84 <OLED_InitAnimation>
    anim->isActive = 1;
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	2201      	movs	r2, #1
 8001cee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001cf2:	e000      	b.n	8001cf6 <OLED_MoveObject+0x9c>
            return; // 动画已满，无法添加
 8001cf4:	bf00      	nop
}
 8001cf6:	3718      	adds	r7, #24
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <OLED_UpdateAnimationManager>:

// 更新manager里面的所有动画!
void OLED_UpdateAnimationManager(AnimationManager_t *manager) //! 这里需要使用OLED_UpdateDisplayVSync()来更新显示
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b086      	sub	sp, #24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
    uint32_t currentTime = HAL_GetTick();
 8001d04:	f000 fbda 	bl	80024bc <HAL_GetTick>
 8001d08:	6138      	str	r0, [r7, #16]

    for (uint8_t i = 0; i < manager->count; i++)
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	75fb      	strb	r3, [r7, #23]
 8001d0e:	e03a      	b.n	8001d86 <OLED_UpdateAnimationManager+0x8a>
    {
        TaggedAnimation_t *anim = &manager->taggedAnimations[i];
 8001d10:	7dfb      	ldrb	r3, [r7, #23]
 8001d12:	224c      	movs	r2, #76	@ 0x4c
 8001d14:	fb02 f303 	mul.w	r3, r2, r3
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	60fb      	str	r3, [r7, #12]
        if (!anim->isActive)
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d02a      	beq.n	8001d7e <OLED_UpdateAnimationManager+0x82>
            continue;

        uint8_t activeX = OLED_UpdateAnimation(&anim->xAnimation, currentTime);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	3310      	adds	r3, #16
 8001d2c:	6939      	ldr	r1, [r7, #16]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff feca 	bl	8001ac8 <OLED_UpdateAnimation>
 8001d34:	4603      	mov	r3, r0
 8001d36:	72fb      	strb	r3, [r7, #11]
        uint8_t activeY = OLED_UpdateAnimation(&anim->yAnimation, currentTime);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	3328      	adds	r3, #40	@ 0x28
 8001d3c:	6939      	ldr	r1, [r7, #16]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff fec2 	bl	8001ac8 <OLED_UpdateAnimation>
 8001d44:	4603      	mov	r3, r0
 8001d46:	72bb      	strb	r3, [r7, #10]

        anim->currentX = OLED_GetAnimationValue(&anim->xAnimation);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	3310      	adds	r3, #16
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff ff18 	bl	8001b82 <OLED_GetAnimationValue>
 8001d52:	4602      	mov	r2, r0
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	645a      	str	r2, [r3, #68]	@ 0x44
        anim->currentY = OLED_GetAnimationValue(&anim->yAnimation);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	3328      	adds	r3, #40	@ 0x28
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff ff10 	bl	8001b82 <OLED_GetAnimationValue>
 8001d62:	4602      	mov	r2, r0
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	649a      	str	r2, [r3, #72]	@ 0x48

        // 如果两个动画都结束，则标记该对象动画为非活跃
        if (!activeX && !activeY)
 8001d68:	7afb      	ldrb	r3, [r7, #11]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d108      	bne.n	8001d80 <OLED_UpdateAnimationManager+0x84>
 8001d6e:	7abb      	ldrb	r3, [r7, #10]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d105      	bne.n	8001d80 <OLED_UpdateAnimationManager+0x84>
            anim->isActive = 0;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2200      	movs	r2, #0
 8001d78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d7c:	e000      	b.n	8001d80 <OLED_UpdateAnimationManager+0x84>
            continue;
 8001d7e:	bf00      	nop
    for (uint8_t i = 0; i < manager->count; i++)
 8001d80:	7dfb      	ldrb	r3, [r7, #23]
 8001d82:	3301      	adds	r3, #1
 8001d84:	75fb      	strb	r3, [r7, #23]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f893 35f0 	ldrb.w	r3, [r3, #1520]	@ 0x5f0
 8001d8c:	7dfa      	ldrb	r2, [r7, #23]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d3be      	bcc.n	8001d10 <OLED_UpdateAnimationManager+0x14>
    }
}
 8001d92:	bf00      	nop
 8001d94:	bf00      	nop
 8001d96:	3718      	adds	r7, #24
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <OLED_DoTweenObject>:
    return 0; // 如果没有找到，返回0表示非活跃
}

// 这个函数是用来移动一个对象的，tag是对象的标签，targetX和targetY是目标坐标，duration是动画持续时间，easeType是缓动类型 bool为是可以在while循环里面使用，如果不使用就不需要函数OLED_UpdateAnimationManager就可以使用
void OLED_DoTweenObject(AnimationManager_t *manager, const char *tag, float targetX, float targetY, uint32_t duration, EaseType_t easeType, bool enablePrevMutiUseCalling)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b08a      	sub	sp, #40	@ 0x28
 8001da0:	af04      	add	r7, sp, #16
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
 8001da8:	603b      	str	r3, [r7, #0]
    TaggedAnimation_t *anim = OLED_FindTaggedAnimation(manager, tag);
 8001daa:	68b9      	ldr	r1, [r7, #8]
 8001dac:	68f8      	ldr	r0, [r7, #12]
 8001dae:	f7ff ff06 	bl	8001bbe <OLED_FindTaggedAnimation>
 8001db2:	6178      	str	r0, [r7, #20]
    if (enablePrevMutiUseCalling)
 8001db4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d01a      	beq.n	8001df2 <OLED_DoTweenObject+0x56>
    {
        if (anim && !(anim->isActive)) // 找到了动画，而且它不是正在tween的时候
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d03f      	beq.n	8001e42 <OLED_DoTweenObject+0xa6>
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d13a      	bne.n	8001e42 <OLED_DoTweenObject+0xa6>
        {
            OLED_MoveObject(manager, tag, anim->currentX, anim->currentY, targetX, targetY, duration, easeType);
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8001dd4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001dd8:	9303      	str	r3, [sp, #12]
 8001dda:	6a3b      	ldr	r3, [r7, #32]
 8001ddc:	9302      	str	r3, [sp, #8]
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	9301      	str	r3, [sp, #4]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	9300      	str	r3, [sp, #0]
 8001de6:	460b      	mov	r3, r1
 8001de8:	68b9      	ldr	r1, [r7, #8]
 8001dea:	68f8      	ldr	r0, [r7, #12]
 8001dec:	f7ff ff35 	bl	8001c5a <OLED_MoveObject>
        if (anim && (anim->currentX != targetX || anim->currentY != targetY))
        {
            OLED_MoveObject(manager, tag, anim->currentX, anim->currentY, targetX, targetY, duration, easeType);
        }
    }
}
 8001df0:	e027      	b.n	8001e42 <OLED_DoTweenObject+0xa6>
        if (anim && (anim->currentX != targetX || anim->currentY != targetY))
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d024      	beq.n	8001e42 <OLED_DoTweenObject+0xa6>
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f7fe fc50 	bl	80006a4 <__aeabi_fcmpeq>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d009      	beq.n	8001e1e <OLED_DoTweenObject+0x82>
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e0e:	4619      	mov	r1, r3
 8001e10:	6838      	ldr	r0, [r7, #0]
 8001e12:	f7fe fc47 	bl	80006a4 <__aeabi_fcmpeq>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d000      	beq.n	8001e1e <OLED_DoTweenObject+0x82>
}
 8001e1c:	e011      	b.n	8001e42 <OLED_DoTweenObject+0xa6>
            OLED_MoveObject(manager, tag, anim->currentX, anim->currentY, targetX, targetY, duration, easeType);
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8001e26:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001e2a:	9303      	str	r3, [sp, #12]
 8001e2c:	6a3b      	ldr	r3, [r7, #32]
 8001e2e:	9302      	str	r3, [sp, #8]
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	9301      	str	r3, [sp, #4]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	9300      	str	r3, [sp, #0]
 8001e38:	460b      	mov	r3, r1
 8001e3a:	68b9      	ldr	r1, [r7, #8]
 8001e3c:	68f8      	ldr	r0, [r7, #12]
 8001e3e:	f7ff ff0c 	bl	8001c5a <OLED_MoveObject>
}
 8001e42:	bf00      	nop
 8001e44:	3718      	adds	r7, #24
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <OLED_MoveObjectAxis>:

// 为X或Y轴单独创建动画的函数
void OLED_MoveObjectAxis(AnimationManager_t *manager, const char *tag,
                         float startX, float startY, float targetX, float targetY,
                         uint32_t duration, EaseType_t easeType, bool onlyX, bool onlyY)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b088      	sub	sp, #32
 8001e4e:	af02      	add	r7, sp, #8
 8001e50:	60f8      	str	r0, [r7, #12]
 8001e52:	60b9      	str	r1, [r7, #8]
 8001e54:	607a      	str	r2, [r7, #4]
 8001e56:	603b      	str	r3, [r7, #0]
    // 查找已存在的动画
    TaggedAnimation_t *anim = OLED_FindTaggedAnimation(manager, tag);
 8001e58:	68b9      	ldr	r1, [r7, #8]
 8001e5a:	68f8      	ldr	r0, [r7, #12]
 8001e5c:	f7ff feaf 	bl	8001bbe <OLED_FindTaggedAnimation>
 8001e60:	6178      	str	r0, [r7, #20]

    // 如果没找到并且还有可用槽位，创建新的动画
    if (anim == NULL)
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d122      	bne.n	8001eae <OLED_MoveObjectAxis+0x64>
    {
        if (manager->count >= MAX_ANIMATIONS)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f893 35f0 	ldrb.w	r3, [r3, #1520]	@ 0x5f0
 8001e6e:	2b13      	cmp	r3, #19
 8001e70:	d846      	bhi.n	8001f00 <OLED_MoveObjectAxis+0xb6>
            return; // 动画已满，无法添加

        anim = &manager->taggedAnimations[manager->count++];
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f893 35f0 	ldrb.w	r3, [r3, #1520]	@ 0x5f0
 8001e78:	1c5a      	adds	r2, r3, #1
 8001e7a:	b2d1      	uxtb	r1, r2
 8001e7c:	68fa      	ldr	r2, [r7, #12]
 8001e7e:	f882 15f0 	strb.w	r1, [r2, #1520]	@ 0x5f0
 8001e82:	461a      	mov	r2, r3
 8001e84:	234c      	movs	r3, #76	@ 0x4c
 8001e86:	fb02 f303 	mul.w	r3, r2, r3
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	617b      	str	r3, [r7, #20]
        strncpy(anim->tag, tag, sizeof(anim->tag) - 1);
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	220f      	movs	r2, #15
 8001e94:	68b9      	ldr	r1, [r7, #8]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f002 fc39 	bl	800470e <strncpy>
        anim->tag[sizeof(anim->tag) - 1] = '\0'; // 确保字符串结束
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	73da      	strb	r2, [r3, #15]
        anim->currentX = startX;
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	645a      	str	r2, [r3, #68]	@ 0x44
        anim->currentY = startY;
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	683a      	ldr	r2, [r7, #0]
 8001eac:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    // 只初始化需要的轴的动画
    if (!onlyY) // 如果不是只修改Y轴，就修改X轴
 8001eae:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001eb2:	f083 0301 	eor.w	r3, r3, #1
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d00a      	beq.n	8001ed2 <OLED_MoveObjectAxis+0x88>
        OLED_InitAnimation(&anim->xAnimation, startX, targetX, duration, easeType);
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	f103 0010 	add.w	r0, r3, #16
 8001ec2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001ec6:	9300      	str	r3, [sp, #0]
 8001ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001eca:	6a3a      	ldr	r2, [r7, #32]
 8001ecc:	6879      	ldr	r1, [r7, #4]
 8001ece:	f7ff fdd9 	bl	8001a84 <OLED_InitAnimation>
    if (!onlyX) // 如果不是只修改X轴，就修改Y轴
 8001ed2:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001ed6:	f083 0301 	eor.w	r3, r3, #1
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d00a      	beq.n	8001ef6 <OLED_MoveObjectAxis+0xac>
        OLED_InitAnimation(&anim->yAnimation, startY, targetY, duration, easeType);
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8001ee6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001eea:	9300      	str	r3, [sp, #0]
 8001eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001eee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ef0:	6839      	ldr	r1, [r7, #0]
 8001ef2:	f7ff fdc7 	bl	8001a84 <OLED_InitAnimation>

    anim->isActive = 1;
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001efe:	e000      	b.n	8001f02 <OLED_MoveObjectAxis+0xb8>
            return; // 动画已满，无法添加
 8001f00:	bf00      	nop
}
 8001f02:	3718      	adds	r7, #24
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <OLED_DoTweenObjectX>:

// 这个函数是用来移动一个对象的，tag是对象的标签，targetX是目标坐标，duration是动画持续时间，easeType是缓动类型
//!这里不可以在while里面调用！为一次性调用，不需要OLED_UpdateAnimationManager
void OLED_DoTweenObjectX(AnimationManager_t *manager, const char *tag, float targetX, uint32_t duration, EaseType_t easeType)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b08c      	sub	sp, #48	@ 0x30
 8001f0c:	af06      	add	r7, sp, #24
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	607a      	str	r2, [r7, #4]
 8001f14:	603b      	str	r3, [r7, #0]
    TaggedAnimation_t *anim = OLED_FindTaggedAnimation(manager, tag);
 8001f16:	68b9      	ldr	r1, [r7, #8]
 8001f18:	68f8      	ldr	r0, [r7, #12]
 8001f1a:	f7ff fe50 	bl	8001bbe <OLED_FindTaggedAnimation>
 8001f1e:	6178      	str	r0, [r7, #20]
    if (anim && anim->currentX != targetX)
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d021      	beq.n	8001f6a <OLED_DoTweenObjectX+0x62>
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f7fe fbb9 	bl	80006a4 <__aeabi_fcmpeq>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d000      	beq.n	8001f3a <OLED_DoTweenObjectX+0x32>
    {
        OLED_MoveObjectAxis(manager, tag, anim->currentX, anim->currentY, targetX, anim->currentY, duration, easeType, true, false);
    }
}
 8001f38:	e017      	b.n	8001f6a <OLED_DoTweenObjectX+0x62>
        OLED_MoveObjectAxis(manager, tag, anim->currentX, anim->currentY, targetX, anim->currentY, duration, easeType, true, false);
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f46:	2200      	movs	r2, #0
 8001f48:	9205      	str	r2, [sp, #20]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	9204      	str	r2, [sp, #16]
 8001f4e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001f52:	9203      	str	r2, [sp, #12]
 8001f54:	683a      	ldr	r2, [r7, #0]
 8001f56:	9202      	str	r2, [sp, #8]
 8001f58:	9301      	str	r3, [sp, #4]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	9300      	str	r3, [sp, #0]
 8001f5e:	4603      	mov	r3, r0
 8001f60:	460a      	mov	r2, r1
 8001f62:	68b9      	ldr	r1, [r7, #8]
 8001f64:	68f8      	ldr	r0, [r7, #12]
 8001f66:	f7ff ff70 	bl	8001e4a <OLED_MoveObjectAxis>
}
 8001f6a:	bf00      	nop
 8001f6c:	3718      	adds	r7, #24
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <OLED_DoTweenObjectY>:

// 这个函数是用来移动一个对象的，tag是对象的标签，targetY是目标坐标，duration是动画持续时间，easeType是缓动类型
//!这里不可以在while里面调用！为一次性调用，不需要OLED_UpdateAnimationManager
void OLED_DoTweenObjectY(AnimationManager_t *manager, const char *tag, float targetY, uint32_t duration, EaseType_t easeType)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b08c      	sub	sp, #48	@ 0x30
 8001f76:	af06      	add	r7, sp, #24
 8001f78:	60f8      	str	r0, [r7, #12]
 8001f7a:	60b9      	str	r1, [r7, #8]
 8001f7c:	607a      	str	r2, [r7, #4]
 8001f7e:	603b      	str	r3, [r7, #0]
    TaggedAnimation_t *anim = OLED_FindTaggedAnimation(manager, tag);
 8001f80:	68b9      	ldr	r1, [r7, #8]
 8001f82:	68f8      	ldr	r0, [r7, #12]
 8001f84:	f7ff fe1b 	bl	8001bbe <OLED_FindTaggedAnimation>
 8001f88:	6178      	str	r0, [r7, #20]
    if (anim && anim->currentY != targetY)
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d021      	beq.n	8001fd4 <OLED_DoTweenObjectY+0x62>
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f94:	4619      	mov	r1, r3
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f7fe fb84 	bl	80006a4 <__aeabi_fcmpeq>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d000      	beq.n	8001fa4 <OLED_DoTweenObjectY+0x32>
    {
        OLED_MoveObjectAxis(manager, tag, anim->currentX, anim->currentY, anim->currentX, targetY, duration, easeType, false, true);
    }
}
 8001fa2:	e017      	b.n	8001fd4 <OLED_DoTweenObjectY+0x62>
        OLED_MoveObjectAxis(manager, tag, anim->currentX, anim->currentY, anim->currentX, targetY, duration, easeType, false, true);
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	9205      	str	r2, [sp, #20]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	9204      	str	r2, [sp, #16]
 8001fb8:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001fbc:	9203      	str	r2, [sp, #12]
 8001fbe:	683a      	ldr	r2, [r7, #0]
 8001fc0:	9202      	str	r2, [sp, #8]
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	9201      	str	r2, [sp, #4]
 8001fc6:	9300      	str	r3, [sp, #0]
 8001fc8:	4603      	mov	r3, r0
 8001fca:	460a      	mov	r2, r1
 8001fcc:	68b9      	ldr	r1, [r7, #8]
 8001fce:	68f8      	ldr	r0, [r7, #12]
 8001fd0:	f7ff ff3b 	bl	8001e4a <OLED_MoveObjectAxis>
}
 8001fd4:	bf00      	nop
 8001fd6:	3718      	adds	r7, #24
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <OLED_DrawRectangle>:
    }
}

// 绘制空心矩形
void OLED_DrawRectangle(uint8_t x, uint8_t y, uint8_t width, uint8_t height) //! UPDATEDISPLAY REQUIRED
{
 8001fdc:	b590      	push	{r4, r7, lr}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4604      	mov	r4, r0
 8001fe4:	4608      	mov	r0, r1
 8001fe6:	4611      	mov	r1, r2
 8001fe8:	461a      	mov	r2, r3
 8001fea:	4623      	mov	r3, r4
 8001fec:	71fb      	strb	r3, [r7, #7]
 8001fee:	4603      	mov	r3, r0
 8001ff0:	71bb      	strb	r3, [r7, #6]
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	717b      	strb	r3, [r7, #5]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	713b      	strb	r3, [r7, #4]
    // 基础边界检查和裁剪
    if (x >= OLED_WIDTH || y >= OLED_HEIGHT || width == 0 || height == 0)
 8001ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	db57      	blt.n	80020b2 <OLED_DrawRectangle+0xd6>
 8002002:	79bb      	ldrb	r3, [r7, #6]
 8002004:	2b3f      	cmp	r3, #63	@ 0x3f
 8002006:	d854      	bhi.n	80020b2 <OLED_DrawRectangle+0xd6>
 8002008:	797b      	ldrb	r3, [r7, #5]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d051      	beq.n	80020b2 <OLED_DrawRectangle+0xd6>
 800200e:	793b      	ldrb	r3, [r7, #4]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d04e      	beq.n	80020b2 <OLED_DrawRectangle+0xd6>
        return;
    if (x + width > OLED_WIDTH)
 8002014:	79fa      	ldrb	r2, [r7, #7]
 8002016:	797b      	ldrb	r3, [r7, #5]
 8002018:	4413      	add	r3, r2
 800201a:	2b80      	cmp	r3, #128	@ 0x80
 800201c:	dd06      	ble.n	800202c <OLED_DrawRectangle+0x50>
        width = OLED_WIDTH - x;
 800201e:	79fb      	ldrb	r3, [r7, #7]
 8002020:	f1c3 23ff 	rsb	r3, r3, #4278255360	@ 0xff00ff00
 8002024:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 8002028:	3380      	adds	r3, #128	@ 0x80
 800202a:	717b      	strb	r3, [r7, #5]
    if (y + height > OLED_HEIGHT)
 800202c:	79ba      	ldrb	r2, [r7, #6]
 800202e:	793b      	ldrb	r3, [r7, #4]
 8002030:	4413      	add	r3, r2
 8002032:	2b40      	cmp	r3, #64	@ 0x40
 8002034:	dd03      	ble.n	800203e <OLED_DrawRectangle+0x62>
        height = OLED_HEIGHT - y;
 8002036:	79bb      	ldrb	r3, [r7, #6]
 8002038:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 800203c:	713b      	strb	r3, [r7, #4]

    uint8_t x2 = x + width - 1;
 800203e:	79fa      	ldrb	r2, [r7, #7]
 8002040:	797b      	ldrb	r3, [r7, #5]
 8002042:	4413      	add	r3, r2
 8002044:	b2db      	uxtb	r3, r3
 8002046:	3b01      	subs	r3, #1
 8002048:	737b      	strb	r3, [r7, #13]
    uint8_t y2 = y + height - 1;
 800204a:	79ba      	ldrb	r2, [r7, #6]
 800204c:	793b      	ldrb	r3, [r7, #4]
 800204e:	4413      	add	r3, r2
 8002050:	b2db      	uxtb	r3, r3
 8002052:	3b01      	subs	r3, #1
 8002054:	733b      	strb	r3, [r7, #12]

    // 绘制水平线
    for (uint8_t i = x; i <= x2; i++)
 8002056:	79fb      	ldrb	r3, [r7, #7]
 8002058:	73fb      	strb	r3, [r7, #15]
 800205a:	e00e      	b.n	800207a <OLED_DrawRectangle+0x9e>
    {
        OLED_WritePixel(i, y, 1);  // 顶线
 800205c:	79b9      	ldrb	r1, [r7, #6]
 800205e:	7bfb      	ldrb	r3, [r7, #15]
 8002060:	2201      	movs	r2, #1
 8002062:	4618      	mov	r0, r3
 8002064:	f7fe fde8 	bl	8000c38 <OLED_WritePixel>
        OLED_WritePixel(i, y2, 1); // 底线
 8002068:	7b39      	ldrb	r1, [r7, #12]
 800206a:	7bfb      	ldrb	r3, [r7, #15]
 800206c:	2201      	movs	r2, #1
 800206e:	4618      	mov	r0, r3
 8002070:	f7fe fde2 	bl	8000c38 <OLED_WritePixel>
    for (uint8_t i = x; i <= x2; i++)
 8002074:	7bfb      	ldrb	r3, [r7, #15]
 8002076:	3301      	adds	r3, #1
 8002078:	73fb      	strb	r3, [r7, #15]
 800207a:	7bfa      	ldrb	r2, [r7, #15]
 800207c:	7b7b      	ldrb	r3, [r7, #13]
 800207e:	429a      	cmp	r2, r3
 8002080:	d9ec      	bls.n	800205c <OLED_DrawRectangle+0x80>
    }

    // 绘制垂直线
    for (uint8_t j = y + 1; j < y2; j++)
 8002082:	79bb      	ldrb	r3, [r7, #6]
 8002084:	3301      	adds	r3, #1
 8002086:	73bb      	strb	r3, [r7, #14]
 8002088:	e00e      	b.n	80020a8 <OLED_DrawRectangle+0xcc>
    {
        OLED_WritePixel(x, j, 1);  // 左线
 800208a:	7bb9      	ldrb	r1, [r7, #14]
 800208c:	79fb      	ldrb	r3, [r7, #7]
 800208e:	2201      	movs	r2, #1
 8002090:	4618      	mov	r0, r3
 8002092:	f7fe fdd1 	bl	8000c38 <OLED_WritePixel>
        OLED_WritePixel(x2, j, 1); // 右线
 8002096:	7bb9      	ldrb	r1, [r7, #14]
 8002098:	7b7b      	ldrb	r3, [r7, #13]
 800209a:	2201      	movs	r2, #1
 800209c:	4618      	mov	r0, r3
 800209e:	f7fe fdcb 	bl	8000c38 <OLED_WritePixel>
    for (uint8_t j = y + 1; j < y2; j++)
 80020a2:	7bbb      	ldrb	r3, [r7, #14]
 80020a4:	3301      	adds	r3, #1
 80020a6:	73bb      	strb	r3, [r7, #14]
 80020a8:	7bba      	ldrb	r2, [r7, #14]
 80020aa:	7b3b      	ldrb	r3, [r7, #12]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d3ec      	bcc.n	800208a <OLED_DrawRectangle+0xae>
 80020b0:	e000      	b.n	80020b4 <OLED_DrawRectangle+0xd8>
        return;
 80020b2:	bf00      	nop
    }
}
 80020b4:	3714      	adds	r7, #20
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd90      	pop	{r4, r7, pc}
	...

080020bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80020c2:	4b15      	ldr	r3, [pc, #84]	@ (8002118 <HAL_MspInit+0x5c>)
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	4a14      	ldr	r2, [pc, #80]	@ (8002118 <HAL_MspInit+0x5c>)
 80020c8:	f043 0301 	orr.w	r3, r3, #1
 80020cc:	6193      	str	r3, [r2, #24]
 80020ce:	4b12      	ldr	r3, [pc, #72]	@ (8002118 <HAL_MspInit+0x5c>)
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	60bb      	str	r3, [r7, #8]
 80020d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020da:	4b0f      	ldr	r3, [pc, #60]	@ (8002118 <HAL_MspInit+0x5c>)
 80020dc:	69db      	ldr	r3, [r3, #28]
 80020de:	4a0e      	ldr	r2, [pc, #56]	@ (8002118 <HAL_MspInit+0x5c>)
 80020e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020e4:	61d3      	str	r3, [r2, #28]
 80020e6:	4b0c      	ldr	r3, [pc, #48]	@ (8002118 <HAL_MspInit+0x5c>)
 80020e8:	69db      	ldr	r3, [r3, #28]
 80020ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020ee:	607b      	str	r3, [r7, #4]
 80020f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80020f2:	4b0a      	ldr	r3, [pc, #40]	@ (800211c <HAL_MspInit+0x60>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	60fb      	str	r3, [r7, #12]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80020fe:	60fb      	str	r3, [r7, #12]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	4a04      	ldr	r2, [pc, #16]	@ (800211c <HAL_MspInit+0x60>)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800210e:	bf00      	nop
 8002110:	3714      	adds	r7, #20
 8002112:	46bd      	mov	sp, r7
 8002114:	bc80      	pop	{r7}
 8002116:	4770      	bx	lr
 8002118:	40021000 	.word	0x40021000
 800211c:	40010000 	.word	0x40010000

08002120 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002124:	bf00      	nop
 8002126:	e7fd      	b.n	8002124 <NMI_Handler+0x4>

08002128 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800212c:	bf00      	nop
 800212e:	e7fd      	b.n	800212c <HardFault_Handler+0x4>

08002130 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002134:	bf00      	nop
 8002136:	e7fd      	b.n	8002134 <MemManage_Handler+0x4>

08002138 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800213c:	bf00      	nop
 800213e:	e7fd      	b.n	800213c <BusFault_Handler+0x4>

08002140 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002144:	bf00      	nop
 8002146:	e7fd      	b.n	8002144 <UsageFault_Handler+0x4>

08002148 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800214c:	bf00      	nop
 800214e:	46bd      	mov	sp, r7
 8002150:	bc80      	pop	{r7}
 8002152:	4770      	bx	lr

08002154 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002158:	bf00      	nop
 800215a:	46bd      	mov	sp, r7
 800215c:	bc80      	pop	{r7}
 800215e:	4770      	bx	lr

08002160 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002164:	bf00      	nop
 8002166:	46bd      	mov	sp, r7
 8002168:	bc80      	pop	{r7}
 800216a:	4770      	bx	lr

0800216c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002170:	f000 f992 	bl	8002498 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002174:	bf00      	nop
 8002176:	bd80      	pop	{r7, pc}

08002178 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800217c:	bf00      	nop
 800217e:	46bd      	mov	sp, r7
 8002180:	bc80      	pop	{r7}
 8002182:	4770      	bx	lr

08002184 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b09a      	sub	sp, #104	@ 0x68
 8002188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800218a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800218e:	2200      	movs	r2, #0
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	605a      	str	r2, [r3, #4]
 8002194:	609a      	str	r2, [r3, #8]
 8002196:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002198:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	605a      	str	r2, [r3, #4]
 80021a2:	609a      	str	r2, [r3, #8]
 80021a4:	60da      	str	r2, [r3, #12]
 80021a6:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021a8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021b2:	f107 0320 	add.w	r3, r7, #32
 80021b6:	2200      	movs	r2, #0
 80021b8:	601a      	str	r2, [r3, #0]
 80021ba:	605a      	str	r2, [r3, #4]
 80021bc:	609a      	str	r2, [r3, #8]
 80021be:	60da      	str	r2, [r3, #12]
 80021c0:	611a      	str	r2, [r3, #16]
 80021c2:	615a      	str	r2, [r3, #20]
 80021c4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80021c6:	463b      	mov	r3, r7
 80021c8:	2220      	movs	r2, #32
 80021ca:	2100      	movs	r1, #0
 80021cc:	4618      	mov	r0, r3
 80021ce:	f002 fa96 	bl	80046fe <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80021d2:	4b46      	ldr	r3, [pc, #280]	@ (80022ec <MX_TIM1_Init+0x168>)
 80021d4:	4a46      	ldr	r2, [pc, #280]	@ (80022f0 <MX_TIM1_Init+0x16c>)
 80021d6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80021d8:	4b44      	ldr	r3, [pc, #272]	@ (80022ec <MX_TIM1_Init+0x168>)
 80021da:	2200      	movs	r2, #0
 80021dc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021de:	4b43      	ldr	r3, [pc, #268]	@ (80022ec <MX_TIM1_Init+0x168>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80021e4:	4b41      	ldr	r3, [pc, #260]	@ (80022ec <MX_TIM1_Init+0x168>)
 80021e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80021ea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021ec:	4b3f      	ldr	r3, [pc, #252]	@ (80022ec <MX_TIM1_Init+0x168>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80021f2:	4b3e      	ldr	r3, [pc, #248]	@ (80022ec <MX_TIM1_Init+0x168>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80021f8:	4b3c      	ldr	r3, [pc, #240]	@ (80022ec <MX_TIM1_Init+0x168>)
 80021fa:	2280      	movs	r2, #128	@ 0x80
 80021fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80021fe:	483b      	ldr	r0, [pc, #236]	@ (80022ec <MX_TIM1_Init+0x168>)
 8002200:	f001 fca2 	bl	8003b48 <HAL_TIM_Base_Init>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800220a:	f7fe fc74 	bl	8000af6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800220e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002212:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002214:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002218:	4619      	mov	r1, r3
 800221a:	4834      	ldr	r0, [pc, #208]	@ (80022ec <MX_TIM1_Init+0x168>)
 800221c:	f001 fd98 	bl	8003d50 <HAL_TIM_ConfigClockSource>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002226:	f7fe fc66 	bl	8000af6 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800222a:	4830      	ldr	r0, [pc, #192]	@ (80022ec <MX_TIM1_Init+0x168>)
 800222c:	f001 fcdb 	bl	8003be6 <HAL_TIM_OC_Init>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8002236:	f7fe fc5e 	bl	8000af6 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 800223a:	2300      	movs	r3, #0
 800223c:	647b      	str	r3, [r7, #68]	@ 0x44
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800223e:	2300      	movs	r3, #0
 8002240:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8002242:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002246:	4619      	mov	r1, r3
 8002248:	4828      	ldr	r0, [pc, #160]	@ (80022ec <MX_TIM1_Init+0x168>)
 800224a:	f001 fe48 	bl	8003ede <HAL_TIM_SlaveConfigSynchro>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8002254:	f7fe fc4f 	bl	8000af6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002258:	2300      	movs	r3, #0
 800225a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800225c:	2300      	movs	r3, #0
 800225e:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002260:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002264:	4619      	mov	r1, r3
 8002266:	4821      	ldr	r0, [pc, #132]	@ (80022ec <MX_TIM1_Init+0x168>)
 8002268:	f002 f99a 	bl	80045a0 <HAL_TIMEx_MasterConfigSynchronization>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8002272:	f7fe fc40 	bl	8000af6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002276:	2300      	movs	r3, #0
 8002278:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 800227a:	2300      	movs	r3, #0
 800227c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800227e:	2300      	movs	r3, #0
 8002280:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002282:	2300      	movs	r3, #0
 8002284:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002286:	2300      	movs	r3, #0
 8002288:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800228a:	2300      	movs	r3, #0
 800228c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800228e:	2300      	movs	r3, #0
 8002290:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002292:	f107 0320 	add.w	r3, r7, #32
 8002296:	2200      	movs	r2, #0
 8002298:	4619      	mov	r1, r3
 800229a:	4814      	ldr	r0, [pc, #80]	@ (80022ec <MX_TIM1_Init+0x168>)
 800229c:	f001 fcfc 	bl	8003c98 <HAL_TIM_OC_ConfigChannel>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 80022a6:	f7fe fc26 	bl	8000af6 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80022aa:	2300      	movs	r3, #0
 80022ac:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80022ae:	2300      	movs	r3, #0
 80022b0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80022b2:	2300      	movs	r3, #0
 80022b4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 2;
 80022b6:	2302      	movs	r3, #2
 80022b8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80022ba:	2300      	movs	r3, #0
 80022bc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80022be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80022c2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80022c4:	2300      	movs	r3, #0
 80022c6:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80022c8:	463b      	mov	r3, r7
 80022ca:	4619      	mov	r1, r3
 80022cc:	4807      	ldr	r0, [pc, #28]	@ (80022ec <MX_TIM1_Init+0x168>)
 80022ce:	f002 f9c5 	bl	800465c <HAL_TIMEx_ConfigBreakDeadTime>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 80022d8:	f7fe fc0d 	bl	8000af6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80022dc:	4803      	ldr	r0, [pc, #12]	@ (80022ec <MX_TIM1_Init+0x168>)
 80022de:	f000 f827 	bl	8002330 <HAL_TIM_MspPostInit>

}
 80022e2:	bf00      	nop
 80022e4:	3768      	adds	r7, #104	@ 0x68
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	20000ec8 	.word	0x20000ec8
 80022f0:	40012c00 	.word	0x40012c00

080022f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a09      	ldr	r2, [pc, #36]	@ (8002328 <HAL_TIM_Base_MspInit+0x34>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d10b      	bne.n	800231e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002306:	4b09      	ldr	r3, [pc, #36]	@ (800232c <HAL_TIM_Base_MspInit+0x38>)
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	4a08      	ldr	r2, [pc, #32]	@ (800232c <HAL_TIM_Base_MspInit+0x38>)
 800230c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002310:	6193      	str	r3, [r2, #24]
 8002312:	4b06      	ldr	r3, [pc, #24]	@ (800232c <HAL_TIM_Base_MspInit+0x38>)
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800231a:	60fb      	str	r3, [r7, #12]
 800231c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800231e:	bf00      	nop
 8002320:	3714      	adds	r7, #20
 8002322:	46bd      	mov	sp, r7
 8002324:	bc80      	pop	{r7}
 8002326:	4770      	bx	lr
 8002328:	40012c00 	.word	0x40012c00
 800232c:	40021000 	.word	0x40021000

08002330 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b088      	sub	sp, #32
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002338:	f107 030c 	add.w	r3, r7, #12
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	605a      	str	r2, [r3, #4]
 8002342:	609a      	str	r2, [r3, #8]
 8002344:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a19      	ldr	r2, [pc, #100]	@ (80023b0 <HAL_TIM_MspPostInit+0x80>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d12a      	bne.n	80023a6 <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002350:	4b18      	ldr	r3, [pc, #96]	@ (80023b4 <HAL_TIM_MspPostInit+0x84>)
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	4a17      	ldr	r2, [pc, #92]	@ (80023b4 <HAL_TIM_MspPostInit+0x84>)
 8002356:	f043 0304 	orr.w	r3, r3, #4
 800235a:	6193      	str	r3, [r2, #24]
 800235c:	4b15      	ldr	r3, [pc, #84]	@ (80023b4 <HAL_TIM_MspPostInit+0x84>)
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	f003 0304 	and.w	r3, r3, #4
 8002364:	60bb      	str	r3, [r7, #8]
 8002366:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA7     ------> TIM1_CH1N
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002368:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800236c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800236e:	2302      	movs	r3, #2
 8002370:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002372:	2302      	movs	r3, #2
 8002374:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002376:	f107 030c 	add.w	r3, r7, #12
 800237a:	4619      	mov	r1, r3
 800237c:	480e      	ldr	r0, [pc, #56]	@ (80023b8 <HAL_TIM_MspPostInit+0x88>)
 800237e:	f000 f9af 	bl	80026e0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_PARTIAL();
 8002382:	4b0e      	ldr	r3, [pc, #56]	@ (80023bc <HAL_TIM_MspPostInit+0x8c>)
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	61fb      	str	r3, [r7, #28]
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800238e:	61fb      	str	r3, [r7, #28]
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002396:	61fb      	str	r3, [r7, #28]
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800239e:	61fb      	str	r3, [r7, #28]
 80023a0:	4a06      	ldr	r2, [pc, #24]	@ (80023bc <HAL_TIM_MspPostInit+0x8c>)
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80023a6:	bf00      	nop
 80023a8:	3720      	adds	r7, #32
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	40012c00 	.word	0x40012c00
 80023b4:	40021000 	.word	0x40021000
 80023b8:	40010800 	.word	0x40010800
 80023bc:	40010000 	.word	0x40010000

080023c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80023c0:	f7ff feda 	bl	8002178 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023c4:	480b      	ldr	r0, [pc, #44]	@ (80023f4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80023c6:	490c      	ldr	r1, [pc, #48]	@ (80023f8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80023c8:	4a0c      	ldr	r2, [pc, #48]	@ (80023fc <LoopFillZerobss+0x16>)
  movs r3, #0
 80023ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023cc:	e002      	b.n	80023d4 <LoopCopyDataInit>

080023ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023d2:	3304      	adds	r3, #4

080023d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023d8:	d3f9      	bcc.n	80023ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023da:	4a09      	ldr	r2, [pc, #36]	@ (8002400 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80023dc:	4c09      	ldr	r4, [pc, #36]	@ (8002404 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023e0:	e001      	b.n	80023e6 <LoopFillZerobss>

080023e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023e4:	3204      	adds	r2, #4

080023e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023e8:	d3fb      	bcc.n	80023e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023ea:	f002 f9a9 	bl	8004740 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80023ee:	f7fe fa9f 	bl	8000930 <main>
  bx lr
 80023f2:	4770      	bx	lr
  ldr r0, =_sdata
 80023f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023f8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80023fc:	080060b0 	.word	0x080060b0
  ldr r2, =_sbss
 8002400:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8002404:	2000104c 	.word	0x2000104c

08002408 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002408:	e7fe      	b.n	8002408 <ADC1_2_IRQHandler>
	...

0800240c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002410:	4b08      	ldr	r3, [pc, #32]	@ (8002434 <HAL_Init+0x28>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a07      	ldr	r2, [pc, #28]	@ (8002434 <HAL_Init+0x28>)
 8002416:	f043 0310 	orr.w	r3, r3, #16
 800241a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800241c:	2003      	movs	r0, #3
 800241e:	f000 f92b 	bl	8002678 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002422:	200f      	movs	r0, #15
 8002424:	f000 f808 	bl	8002438 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002428:	f7ff fe48 	bl	80020bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	40022000 	.word	0x40022000

08002438 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002440:	4b12      	ldr	r3, [pc, #72]	@ (800248c <HAL_InitTick+0x54>)
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	4b12      	ldr	r3, [pc, #72]	@ (8002490 <HAL_InitTick+0x58>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	4619      	mov	r1, r3
 800244a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800244e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002452:	fbb2 f3f3 	udiv	r3, r2, r3
 8002456:	4618      	mov	r0, r3
 8002458:	f000 f935 	bl	80026c6 <HAL_SYSTICK_Config>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e00e      	b.n	8002484 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2b0f      	cmp	r3, #15
 800246a:	d80a      	bhi.n	8002482 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800246c:	2200      	movs	r2, #0
 800246e:	6879      	ldr	r1, [r7, #4]
 8002470:	f04f 30ff 	mov.w	r0, #4294967295
 8002474:	f000 f90b 	bl	800268e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002478:	4a06      	ldr	r2, [pc, #24]	@ (8002494 <HAL_InitTick+0x5c>)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800247e:	2300      	movs	r3, #0
 8002480:	e000      	b.n	8002484 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
}
 8002484:	4618      	mov	r0, r3
 8002486:	3708      	adds	r7, #8
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	20000000 	.word	0x20000000
 8002490:	20000008 	.word	0x20000008
 8002494:	20000004 	.word	0x20000004

08002498 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800249c:	4b05      	ldr	r3, [pc, #20]	@ (80024b4 <HAL_IncTick+0x1c>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	461a      	mov	r2, r3
 80024a2:	4b05      	ldr	r3, [pc, #20]	@ (80024b8 <HAL_IncTick+0x20>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4413      	add	r3, r2
 80024a8:	4a03      	ldr	r2, [pc, #12]	@ (80024b8 <HAL_IncTick+0x20>)
 80024aa:	6013      	str	r3, [r2, #0]
}
 80024ac:	bf00      	nop
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bc80      	pop	{r7}
 80024b2:	4770      	bx	lr
 80024b4:	20000008 	.word	0x20000008
 80024b8:	20000f10 	.word	0x20000f10

080024bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  return uwTick;
 80024c0:	4b02      	ldr	r3, [pc, #8]	@ (80024cc <HAL_GetTick+0x10>)
 80024c2:	681b      	ldr	r3, [r3, #0]
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bc80      	pop	{r7}
 80024ca:	4770      	bx	lr
 80024cc:	20000f10 	.word	0x20000f10

080024d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024d8:	f7ff fff0 	bl	80024bc <HAL_GetTick>
 80024dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e8:	d005      	beq.n	80024f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002514 <HAL_Delay+0x44>)
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	461a      	mov	r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	4413      	add	r3, r2
 80024f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024f6:	bf00      	nop
 80024f8:	f7ff ffe0 	bl	80024bc <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	429a      	cmp	r2, r3
 8002506:	d8f7      	bhi.n	80024f8 <HAL_Delay+0x28>
  {
  }
}
 8002508:	bf00      	nop
 800250a:	bf00      	nop
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	20000008 	.word	0x20000008

08002518 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f003 0307 	and.w	r3, r3, #7
 8002526:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002528:	4b0c      	ldr	r3, [pc, #48]	@ (800255c <__NVIC_SetPriorityGrouping+0x44>)
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800252e:	68ba      	ldr	r2, [r7, #8]
 8002530:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002534:	4013      	ands	r3, r2
 8002536:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002540:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002544:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002548:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800254a:	4a04      	ldr	r2, [pc, #16]	@ (800255c <__NVIC_SetPriorityGrouping+0x44>)
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	60d3      	str	r3, [r2, #12]
}
 8002550:	bf00      	nop
 8002552:	3714      	adds	r7, #20
 8002554:	46bd      	mov	sp, r7
 8002556:	bc80      	pop	{r7}
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	e000ed00 	.word	0xe000ed00

08002560 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002564:	4b04      	ldr	r3, [pc, #16]	@ (8002578 <__NVIC_GetPriorityGrouping+0x18>)
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	0a1b      	lsrs	r3, r3, #8
 800256a:	f003 0307 	and.w	r3, r3, #7
}
 800256e:	4618      	mov	r0, r3
 8002570:	46bd      	mov	sp, r7
 8002572:	bc80      	pop	{r7}
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	e000ed00 	.word	0xe000ed00

0800257c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	4603      	mov	r3, r0
 8002584:	6039      	str	r1, [r7, #0]
 8002586:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258c:	2b00      	cmp	r3, #0
 800258e:	db0a      	blt.n	80025a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	b2da      	uxtb	r2, r3
 8002594:	490c      	ldr	r1, [pc, #48]	@ (80025c8 <__NVIC_SetPriority+0x4c>)
 8002596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259a:	0112      	lsls	r2, r2, #4
 800259c:	b2d2      	uxtb	r2, r2
 800259e:	440b      	add	r3, r1
 80025a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025a4:	e00a      	b.n	80025bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	b2da      	uxtb	r2, r3
 80025aa:	4908      	ldr	r1, [pc, #32]	@ (80025cc <__NVIC_SetPriority+0x50>)
 80025ac:	79fb      	ldrb	r3, [r7, #7]
 80025ae:	f003 030f 	and.w	r3, r3, #15
 80025b2:	3b04      	subs	r3, #4
 80025b4:	0112      	lsls	r2, r2, #4
 80025b6:	b2d2      	uxtb	r2, r2
 80025b8:	440b      	add	r3, r1
 80025ba:	761a      	strb	r2, [r3, #24]
}
 80025bc:	bf00      	nop
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bc80      	pop	{r7}
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	e000e100 	.word	0xe000e100
 80025cc:	e000ed00 	.word	0xe000ed00

080025d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b089      	sub	sp, #36	@ 0x24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f003 0307 	and.w	r3, r3, #7
 80025e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	f1c3 0307 	rsb	r3, r3, #7
 80025ea:	2b04      	cmp	r3, #4
 80025ec:	bf28      	it	cs
 80025ee:	2304      	movcs	r3, #4
 80025f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	3304      	adds	r3, #4
 80025f6:	2b06      	cmp	r3, #6
 80025f8:	d902      	bls.n	8002600 <NVIC_EncodePriority+0x30>
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	3b03      	subs	r3, #3
 80025fe:	e000      	b.n	8002602 <NVIC_EncodePriority+0x32>
 8002600:	2300      	movs	r3, #0
 8002602:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002604:	f04f 32ff 	mov.w	r2, #4294967295
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	fa02 f303 	lsl.w	r3, r2, r3
 800260e:	43da      	mvns	r2, r3
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	401a      	ands	r2, r3
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002618:	f04f 31ff 	mov.w	r1, #4294967295
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	fa01 f303 	lsl.w	r3, r1, r3
 8002622:	43d9      	mvns	r1, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002628:	4313      	orrs	r3, r2
         );
}
 800262a:	4618      	mov	r0, r3
 800262c:	3724      	adds	r7, #36	@ 0x24
 800262e:	46bd      	mov	sp, r7
 8002630:	bc80      	pop	{r7}
 8002632:	4770      	bx	lr

08002634 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	3b01      	subs	r3, #1
 8002640:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002644:	d301      	bcc.n	800264a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002646:	2301      	movs	r3, #1
 8002648:	e00f      	b.n	800266a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800264a:	4a0a      	ldr	r2, [pc, #40]	@ (8002674 <SysTick_Config+0x40>)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	3b01      	subs	r3, #1
 8002650:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002652:	210f      	movs	r1, #15
 8002654:	f04f 30ff 	mov.w	r0, #4294967295
 8002658:	f7ff ff90 	bl	800257c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800265c:	4b05      	ldr	r3, [pc, #20]	@ (8002674 <SysTick_Config+0x40>)
 800265e:	2200      	movs	r2, #0
 8002660:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002662:	4b04      	ldr	r3, [pc, #16]	@ (8002674 <SysTick_Config+0x40>)
 8002664:	2207      	movs	r2, #7
 8002666:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	e000e010 	.word	0xe000e010

08002678 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f7ff ff49 	bl	8002518 <__NVIC_SetPriorityGrouping>
}
 8002686:	bf00      	nop
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800268e:	b580      	push	{r7, lr}
 8002690:	b086      	sub	sp, #24
 8002692:	af00      	add	r7, sp, #0
 8002694:	4603      	mov	r3, r0
 8002696:	60b9      	str	r1, [r7, #8]
 8002698:	607a      	str	r2, [r7, #4]
 800269a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800269c:	2300      	movs	r3, #0
 800269e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026a0:	f7ff ff5e 	bl	8002560 <__NVIC_GetPriorityGrouping>
 80026a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	68b9      	ldr	r1, [r7, #8]
 80026aa:	6978      	ldr	r0, [r7, #20]
 80026ac:	f7ff ff90 	bl	80025d0 <NVIC_EncodePriority>
 80026b0:	4602      	mov	r2, r0
 80026b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026b6:	4611      	mov	r1, r2
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7ff ff5f 	bl	800257c <__NVIC_SetPriority>
}
 80026be:	bf00      	nop
 80026c0:	3718      	adds	r7, #24
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b082      	sub	sp, #8
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f7ff ffb0 	bl	8002634 <SysTick_Config>
 80026d4:	4603      	mov	r3, r0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
	...

080026e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b08b      	sub	sp, #44	@ 0x2c
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026ea:	2300      	movs	r3, #0
 80026ec:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80026ee:	2300      	movs	r3, #0
 80026f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026f2:	e169      	b.n	80029c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80026f4:	2201      	movs	r2, #1
 80026f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	69fa      	ldr	r2, [r7, #28]
 8002704:	4013      	ands	r3, r2
 8002706:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	429a      	cmp	r2, r3
 800270e:	f040 8158 	bne.w	80029c2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	4a9a      	ldr	r2, [pc, #616]	@ (8002980 <HAL_GPIO_Init+0x2a0>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d05e      	beq.n	80027da <HAL_GPIO_Init+0xfa>
 800271c:	4a98      	ldr	r2, [pc, #608]	@ (8002980 <HAL_GPIO_Init+0x2a0>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d875      	bhi.n	800280e <HAL_GPIO_Init+0x12e>
 8002722:	4a98      	ldr	r2, [pc, #608]	@ (8002984 <HAL_GPIO_Init+0x2a4>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d058      	beq.n	80027da <HAL_GPIO_Init+0xfa>
 8002728:	4a96      	ldr	r2, [pc, #600]	@ (8002984 <HAL_GPIO_Init+0x2a4>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d86f      	bhi.n	800280e <HAL_GPIO_Init+0x12e>
 800272e:	4a96      	ldr	r2, [pc, #600]	@ (8002988 <HAL_GPIO_Init+0x2a8>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d052      	beq.n	80027da <HAL_GPIO_Init+0xfa>
 8002734:	4a94      	ldr	r2, [pc, #592]	@ (8002988 <HAL_GPIO_Init+0x2a8>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d869      	bhi.n	800280e <HAL_GPIO_Init+0x12e>
 800273a:	4a94      	ldr	r2, [pc, #592]	@ (800298c <HAL_GPIO_Init+0x2ac>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d04c      	beq.n	80027da <HAL_GPIO_Init+0xfa>
 8002740:	4a92      	ldr	r2, [pc, #584]	@ (800298c <HAL_GPIO_Init+0x2ac>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d863      	bhi.n	800280e <HAL_GPIO_Init+0x12e>
 8002746:	4a92      	ldr	r2, [pc, #584]	@ (8002990 <HAL_GPIO_Init+0x2b0>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d046      	beq.n	80027da <HAL_GPIO_Init+0xfa>
 800274c:	4a90      	ldr	r2, [pc, #576]	@ (8002990 <HAL_GPIO_Init+0x2b0>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d85d      	bhi.n	800280e <HAL_GPIO_Init+0x12e>
 8002752:	2b12      	cmp	r3, #18
 8002754:	d82a      	bhi.n	80027ac <HAL_GPIO_Init+0xcc>
 8002756:	2b12      	cmp	r3, #18
 8002758:	d859      	bhi.n	800280e <HAL_GPIO_Init+0x12e>
 800275a:	a201      	add	r2, pc, #4	@ (adr r2, 8002760 <HAL_GPIO_Init+0x80>)
 800275c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002760:	080027db 	.word	0x080027db
 8002764:	080027b5 	.word	0x080027b5
 8002768:	080027c7 	.word	0x080027c7
 800276c:	08002809 	.word	0x08002809
 8002770:	0800280f 	.word	0x0800280f
 8002774:	0800280f 	.word	0x0800280f
 8002778:	0800280f 	.word	0x0800280f
 800277c:	0800280f 	.word	0x0800280f
 8002780:	0800280f 	.word	0x0800280f
 8002784:	0800280f 	.word	0x0800280f
 8002788:	0800280f 	.word	0x0800280f
 800278c:	0800280f 	.word	0x0800280f
 8002790:	0800280f 	.word	0x0800280f
 8002794:	0800280f 	.word	0x0800280f
 8002798:	0800280f 	.word	0x0800280f
 800279c:	0800280f 	.word	0x0800280f
 80027a0:	0800280f 	.word	0x0800280f
 80027a4:	080027bd 	.word	0x080027bd
 80027a8:	080027d1 	.word	0x080027d1
 80027ac:	4a79      	ldr	r2, [pc, #484]	@ (8002994 <HAL_GPIO_Init+0x2b4>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d013      	beq.n	80027da <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80027b2:	e02c      	b.n	800280e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	623b      	str	r3, [r7, #32]
          break;
 80027ba:	e029      	b.n	8002810 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	3304      	adds	r3, #4
 80027c2:	623b      	str	r3, [r7, #32]
          break;
 80027c4:	e024      	b.n	8002810 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	3308      	adds	r3, #8
 80027cc:	623b      	str	r3, [r7, #32]
          break;
 80027ce:	e01f      	b.n	8002810 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	330c      	adds	r3, #12
 80027d6:	623b      	str	r3, [r7, #32]
          break;
 80027d8:	e01a      	b.n	8002810 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d102      	bne.n	80027e8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80027e2:	2304      	movs	r3, #4
 80027e4:	623b      	str	r3, [r7, #32]
          break;
 80027e6:	e013      	b.n	8002810 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d105      	bne.n	80027fc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027f0:	2308      	movs	r3, #8
 80027f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	69fa      	ldr	r2, [r7, #28]
 80027f8:	611a      	str	r2, [r3, #16]
          break;
 80027fa:	e009      	b.n	8002810 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027fc:	2308      	movs	r3, #8
 80027fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	69fa      	ldr	r2, [r7, #28]
 8002804:	615a      	str	r2, [r3, #20]
          break;
 8002806:	e003      	b.n	8002810 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002808:	2300      	movs	r3, #0
 800280a:	623b      	str	r3, [r7, #32]
          break;
 800280c:	e000      	b.n	8002810 <HAL_GPIO_Init+0x130>
          break;
 800280e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	2bff      	cmp	r3, #255	@ 0xff
 8002814:	d801      	bhi.n	800281a <HAL_GPIO_Init+0x13a>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	e001      	b.n	800281e <HAL_GPIO_Init+0x13e>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	3304      	adds	r3, #4
 800281e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	2bff      	cmp	r3, #255	@ 0xff
 8002824:	d802      	bhi.n	800282c <HAL_GPIO_Init+0x14c>
 8002826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	e002      	b.n	8002832 <HAL_GPIO_Init+0x152>
 800282c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800282e:	3b08      	subs	r3, #8
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	210f      	movs	r1, #15
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	fa01 f303 	lsl.w	r3, r1, r3
 8002840:	43db      	mvns	r3, r3
 8002842:	401a      	ands	r2, r3
 8002844:	6a39      	ldr	r1, [r7, #32]
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	fa01 f303 	lsl.w	r3, r1, r3
 800284c:	431a      	orrs	r2, r3
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800285a:	2b00      	cmp	r3, #0
 800285c:	f000 80b1 	beq.w	80029c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002860:	4b4d      	ldr	r3, [pc, #308]	@ (8002998 <HAL_GPIO_Init+0x2b8>)
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	4a4c      	ldr	r2, [pc, #304]	@ (8002998 <HAL_GPIO_Init+0x2b8>)
 8002866:	f043 0301 	orr.w	r3, r3, #1
 800286a:	6193      	str	r3, [r2, #24]
 800286c:	4b4a      	ldr	r3, [pc, #296]	@ (8002998 <HAL_GPIO_Init+0x2b8>)
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	f003 0301 	and.w	r3, r3, #1
 8002874:	60bb      	str	r3, [r7, #8]
 8002876:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002878:	4a48      	ldr	r2, [pc, #288]	@ (800299c <HAL_GPIO_Init+0x2bc>)
 800287a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800287c:	089b      	lsrs	r3, r3, #2
 800287e:	3302      	adds	r3, #2
 8002880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002884:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002888:	f003 0303 	and.w	r3, r3, #3
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	220f      	movs	r2, #15
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	43db      	mvns	r3, r3
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	4013      	ands	r3, r2
 800289a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a40      	ldr	r2, [pc, #256]	@ (80029a0 <HAL_GPIO_Init+0x2c0>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d013      	beq.n	80028cc <HAL_GPIO_Init+0x1ec>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4a3f      	ldr	r2, [pc, #252]	@ (80029a4 <HAL_GPIO_Init+0x2c4>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d00d      	beq.n	80028c8 <HAL_GPIO_Init+0x1e8>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	4a3e      	ldr	r2, [pc, #248]	@ (80029a8 <HAL_GPIO_Init+0x2c8>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d007      	beq.n	80028c4 <HAL_GPIO_Init+0x1e4>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4a3d      	ldr	r2, [pc, #244]	@ (80029ac <HAL_GPIO_Init+0x2cc>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d101      	bne.n	80028c0 <HAL_GPIO_Init+0x1e0>
 80028bc:	2303      	movs	r3, #3
 80028be:	e006      	b.n	80028ce <HAL_GPIO_Init+0x1ee>
 80028c0:	2304      	movs	r3, #4
 80028c2:	e004      	b.n	80028ce <HAL_GPIO_Init+0x1ee>
 80028c4:	2302      	movs	r3, #2
 80028c6:	e002      	b.n	80028ce <HAL_GPIO_Init+0x1ee>
 80028c8:	2301      	movs	r3, #1
 80028ca:	e000      	b.n	80028ce <HAL_GPIO_Init+0x1ee>
 80028cc:	2300      	movs	r3, #0
 80028ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028d0:	f002 0203 	and.w	r2, r2, #3
 80028d4:	0092      	lsls	r2, r2, #2
 80028d6:	4093      	lsls	r3, r2
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	4313      	orrs	r3, r2
 80028dc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80028de:	492f      	ldr	r1, [pc, #188]	@ (800299c <HAL_GPIO_Init+0x2bc>)
 80028e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e2:	089b      	lsrs	r3, r3, #2
 80028e4:	3302      	adds	r3, #2
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d006      	beq.n	8002906 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80028f8:	4b2d      	ldr	r3, [pc, #180]	@ (80029b0 <HAL_GPIO_Init+0x2d0>)
 80028fa:	689a      	ldr	r2, [r3, #8]
 80028fc:	492c      	ldr	r1, [pc, #176]	@ (80029b0 <HAL_GPIO_Init+0x2d0>)
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	4313      	orrs	r3, r2
 8002902:	608b      	str	r3, [r1, #8]
 8002904:	e006      	b.n	8002914 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002906:	4b2a      	ldr	r3, [pc, #168]	@ (80029b0 <HAL_GPIO_Init+0x2d0>)
 8002908:	689a      	ldr	r2, [r3, #8]
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	43db      	mvns	r3, r3
 800290e:	4928      	ldr	r1, [pc, #160]	@ (80029b0 <HAL_GPIO_Init+0x2d0>)
 8002910:	4013      	ands	r3, r2
 8002912:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d006      	beq.n	800292e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002920:	4b23      	ldr	r3, [pc, #140]	@ (80029b0 <HAL_GPIO_Init+0x2d0>)
 8002922:	68da      	ldr	r2, [r3, #12]
 8002924:	4922      	ldr	r1, [pc, #136]	@ (80029b0 <HAL_GPIO_Init+0x2d0>)
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	4313      	orrs	r3, r2
 800292a:	60cb      	str	r3, [r1, #12]
 800292c:	e006      	b.n	800293c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800292e:	4b20      	ldr	r3, [pc, #128]	@ (80029b0 <HAL_GPIO_Init+0x2d0>)
 8002930:	68da      	ldr	r2, [r3, #12]
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	43db      	mvns	r3, r3
 8002936:	491e      	ldr	r1, [pc, #120]	@ (80029b0 <HAL_GPIO_Init+0x2d0>)
 8002938:	4013      	ands	r3, r2
 800293a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d006      	beq.n	8002956 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002948:	4b19      	ldr	r3, [pc, #100]	@ (80029b0 <HAL_GPIO_Init+0x2d0>)
 800294a:	685a      	ldr	r2, [r3, #4]
 800294c:	4918      	ldr	r1, [pc, #96]	@ (80029b0 <HAL_GPIO_Init+0x2d0>)
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	4313      	orrs	r3, r2
 8002952:	604b      	str	r3, [r1, #4]
 8002954:	e006      	b.n	8002964 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002956:	4b16      	ldr	r3, [pc, #88]	@ (80029b0 <HAL_GPIO_Init+0x2d0>)
 8002958:	685a      	ldr	r2, [r3, #4]
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	43db      	mvns	r3, r3
 800295e:	4914      	ldr	r1, [pc, #80]	@ (80029b0 <HAL_GPIO_Init+0x2d0>)
 8002960:	4013      	ands	r3, r2
 8002962:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d021      	beq.n	80029b4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002970:	4b0f      	ldr	r3, [pc, #60]	@ (80029b0 <HAL_GPIO_Init+0x2d0>)
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	490e      	ldr	r1, [pc, #56]	@ (80029b0 <HAL_GPIO_Init+0x2d0>)
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	4313      	orrs	r3, r2
 800297a:	600b      	str	r3, [r1, #0]
 800297c:	e021      	b.n	80029c2 <HAL_GPIO_Init+0x2e2>
 800297e:	bf00      	nop
 8002980:	10320000 	.word	0x10320000
 8002984:	10310000 	.word	0x10310000
 8002988:	10220000 	.word	0x10220000
 800298c:	10210000 	.word	0x10210000
 8002990:	10120000 	.word	0x10120000
 8002994:	10110000 	.word	0x10110000
 8002998:	40021000 	.word	0x40021000
 800299c:	40010000 	.word	0x40010000
 80029a0:	40010800 	.word	0x40010800
 80029a4:	40010c00 	.word	0x40010c00
 80029a8:	40011000 	.word	0x40011000
 80029ac:	40011400 	.word	0x40011400
 80029b0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80029b4:	4b0b      	ldr	r3, [pc, #44]	@ (80029e4 <HAL_GPIO_Init+0x304>)
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	43db      	mvns	r3, r3
 80029bc:	4909      	ldr	r1, [pc, #36]	@ (80029e4 <HAL_GPIO_Init+0x304>)
 80029be:	4013      	ands	r3, r2
 80029c0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80029c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c4:	3301      	adds	r3, #1
 80029c6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ce:	fa22 f303 	lsr.w	r3, r2, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	f47f ae8e 	bne.w	80026f4 <HAL_GPIO_Init+0x14>
  }
}
 80029d8:	bf00      	nop
 80029da:	bf00      	nop
 80029dc:	372c      	adds	r7, #44	@ 0x2c
 80029de:	46bd      	mov	sp, r7
 80029e0:	bc80      	pop	{r7}
 80029e2:	4770      	bx	lr
 80029e4:	40010400 	.word	0x40010400

080029e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	460b      	mov	r3, r1
 80029f2:	807b      	strh	r3, [r7, #2]
 80029f4:	4613      	mov	r3, r2
 80029f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029f8:	787b      	ldrb	r3, [r7, #1]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d003      	beq.n	8002a06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029fe:	887a      	ldrh	r2, [r7, #2]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002a04:	e003      	b.n	8002a0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a06:	887b      	ldrh	r3, [r7, #2]
 8002a08:	041a      	lsls	r2, r3, #16
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	611a      	str	r2, [r3, #16]
}
 8002a0e:	bf00      	nop
 8002a10:	370c      	adds	r7, #12
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bc80      	pop	{r7}
 8002a16:	4770      	bx	lr

08002a18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d101      	bne.n	8002a2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e12b      	b.n	8002c82 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d106      	bne.n	8002a44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f7fd ff38 	bl	80008b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2224      	movs	r2, #36	@ 0x24
 8002a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f022 0201 	bic.w	r2, r2, #1
 8002a5a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a6a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a7a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a7c:	f001 f832 	bl	8003ae4 <HAL_RCC_GetPCLK1Freq>
 8002a80:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	4a81      	ldr	r2, [pc, #516]	@ (8002c8c <HAL_I2C_Init+0x274>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d807      	bhi.n	8002a9c <HAL_I2C_Init+0x84>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	4a80      	ldr	r2, [pc, #512]	@ (8002c90 <HAL_I2C_Init+0x278>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	bf94      	ite	ls
 8002a94:	2301      	movls	r3, #1
 8002a96:	2300      	movhi	r3, #0
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	e006      	b.n	8002aaa <HAL_I2C_Init+0x92>
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	4a7d      	ldr	r2, [pc, #500]	@ (8002c94 <HAL_I2C_Init+0x27c>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	bf94      	ite	ls
 8002aa4:	2301      	movls	r3, #1
 8002aa6:	2300      	movhi	r3, #0
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e0e7      	b.n	8002c82 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	4a78      	ldr	r2, [pc, #480]	@ (8002c98 <HAL_I2C_Init+0x280>)
 8002ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aba:	0c9b      	lsrs	r3, r3, #18
 8002abc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68ba      	ldr	r2, [r7, #8]
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	6a1b      	ldr	r3, [r3, #32]
 8002ad8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	4a6a      	ldr	r2, [pc, #424]	@ (8002c8c <HAL_I2C_Init+0x274>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d802      	bhi.n	8002aec <HAL_I2C_Init+0xd4>
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	3301      	adds	r3, #1
 8002aea:	e009      	b.n	8002b00 <HAL_I2C_Init+0xe8>
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002af2:	fb02 f303 	mul.w	r3, r2, r3
 8002af6:	4a69      	ldr	r2, [pc, #420]	@ (8002c9c <HAL_I2C_Init+0x284>)
 8002af8:	fba2 2303 	umull	r2, r3, r2, r3
 8002afc:	099b      	lsrs	r3, r3, #6
 8002afe:	3301      	adds	r3, #1
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	6812      	ldr	r2, [r2, #0]
 8002b04:	430b      	orrs	r3, r1
 8002b06:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	69db      	ldr	r3, [r3, #28]
 8002b0e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002b12:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	495c      	ldr	r1, [pc, #368]	@ (8002c8c <HAL_I2C_Init+0x274>)
 8002b1c:	428b      	cmp	r3, r1
 8002b1e:	d819      	bhi.n	8002b54 <HAL_I2C_Init+0x13c>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	1e59      	subs	r1, r3, #1
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b2e:	1c59      	adds	r1, r3, #1
 8002b30:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002b34:	400b      	ands	r3, r1
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00a      	beq.n	8002b50 <HAL_I2C_Init+0x138>
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	1e59      	subs	r1, r3, #1
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b48:	3301      	adds	r3, #1
 8002b4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b4e:	e051      	b.n	8002bf4 <HAL_I2C_Init+0x1dc>
 8002b50:	2304      	movs	r3, #4
 8002b52:	e04f      	b.n	8002bf4 <HAL_I2C_Init+0x1dc>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d111      	bne.n	8002b80 <HAL_I2C_Init+0x168>
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	1e58      	subs	r0, r3, #1
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6859      	ldr	r1, [r3, #4]
 8002b64:	460b      	mov	r3, r1
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	440b      	add	r3, r1
 8002b6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b6e:	3301      	adds	r3, #1
 8002b70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	bf0c      	ite	eq
 8002b78:	2301      	moveq	r3, #1
 8002b7a:	2300      	movne	r3, #0
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	e012      	b.n	8002ba6 <HAL_I2C_Init+0x18e>
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	1e58      	subs	r0, r3, #1
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6859      	ldr	r1, [r3, #4]
 8002b88:	460b      	mov	r3, r1
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	440b      	add	r3, r1
 8002b8e:	0099      	lsls	r1, r3, #2
 8002b90:	440b      	add	r3, r1
 8002b92:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b96:	3301      	adds	r3, #1
 8002b98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	bf0c      	ite	eq
 8002ba0:	2301      	moveq	r3, #1
 8002ba2:	2300      	movne	r3, #0
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <HAL_I2C_Init+0x196>
 8002baa:	2301      	movs	r3, #1
 8002bac:	e022      	b.n	8002bf4 <HAL_I2C_Init+0x1dc>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d10e      	bne.n	8002bd4 <HAL_I2C_Init+0x1bc>
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	1e58      	subs	r0, r3, #1
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6859      	ldr	r1, [r3, #4]
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	440b      	add	r3, r1
 8002bc4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bc8:	3301      	adds	r3, #1
 8002bca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002bd2:	e00f      	b.n	8002bf4 <HAL_I2C_Init+0x1dc>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	1e58      	subs	r0, r3, #1
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6859      	ldr	r1, [r3, #4]
 8002bdc:	460b      	mov	r3, r1
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	440b      	add	r3, r1
 8002be2:	0099      	lsls	r1, r3, #2
 8002be4:	440b      	add	r3, r1
 8002be6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bea:	3301      	adds	r3, #1
 8002bec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bf0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002bf4:	6879      	ldr	r1, [r7, #4]
 8002bf6:	6809      	ldr	r1, [r1, #0]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	69da      	ldr	r2, [r3, #28]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a1b      	ldr	r3, [r3, #32]
 8002c0e:	431a      	orrs	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	430a      	orrs	r2, r1
 8002c16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002c22:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	6911      	ldr	r1, [r2, #16]
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	68d2      	ldr	r2, [r2, #12]
 8002c2e:	4311      	orrs	r1, r2
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	6812      	ldr	r2, [r2, #0]
 8002c34:	430b      	orrs	r3, r1
 8002c36:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	695a      	ldr	r2, [r3, #20]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	431a      	orrs	r2, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	430a      	orrs	r2, r1
 8002c52:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f042 0201 	orr.w	r2, r2, #1
 8002c62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2220      	movs	r2, #32
 8002c6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3710      	adds	r7, #16
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	000186a0 	.word	0x000186a0
 8002c90:	001e847f 	.word	0x001e847f
 8002c94:	003d08ff 	.word	0x003d08ff
 8002c98:	431bde83 	.word	0x431bde83
 8002c9c:	10624dd3 	.word	0x10624dd3

08002ca0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b088      	sub	sp, #32
 8002ca4:	af02      	add	r7, sp, #8
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	607a      	str	r2, [r7, #4]
 8002caa:	461a      	mov	r2, r3
 8002cac:	460b      	mov	r3, r1
 8002cae:	817b      	strh	r3, [r7, #10]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002cb4:	f7ff fc02 	bl	80024bc <HAL_GetTick>
 8002cb8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b20      	cmp	r3, #32
 8002cc4:	f040 80e0 	bne.w	8002e88 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	9300      	str	r3, [sp, #0]
 8002ccc:	2319      	movs	r3, #25
 8002cce:	2201      	movs	r2, #1
 8002cd0:	4970      	ldr	r1, [pc, #448]	@ (8002e94 <HAL_I2C_Master_Transmit+0x1f4>)
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f000 f964 	bl	8002fa0 <I2C_WaitOnFlagUntilTimeout>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002cde:	2302      	movs	r3, #2
 8002ce0:	e0d3      	b.n	8002e8a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d101      	bne.n	8002cf0 <HAL_I2C_Master_Transmit+0x50>
 8002cec:	2302      	movs	r3, #2
 8002cee:	e0cc      	b.n	8002e8a <HAL_I2C_Master_Transmit+0x1ea>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d007      	beq.n	8002d16 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f042 0201 	orr.w	r2, r2, #1
 8002d14:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d24:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2221      	movs	r2, #33	@ 0x21
 8002d2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2210      	movs	r2, #16
 8002d32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	893a      	ldrh	r2, [r7, #8]
 8002d46:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d4c:	b29a      	uxth	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	4a50      	ldr	r2, [pc, #320]	@ (8002e98 <HAL_I2C_Master_Transmit+0x1f8>)
 8002d56:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002d58:	8979      	ldrh	r1, [r7, #10]
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	6a3a      	ldr	r2, [r7, #32]
 8002d5e:	68f8      	ldr	r0, [r7, #12]
 8002d60:	f000 f89c 	bl	8002e9c <I2C_MasterRequestWrite>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e08d      	b.n	8002e8a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d6e:	2300      	movs	r3, #0
 8002d70:	613b      	str	r3, [r7, #16]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	695b      	ldr	r3, [r3, #20]
 8002d78:	613b      	str	r3, [r7, #16]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	613b      	str	r3, [r7, #16]
 8002d82:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002d84:	e066      	b.n	8002e54 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d86:	697a      	ldr	r2, [r7, #20]
 8002d88:	6a39      	ldr	r1, [r7, #32]
 8002d8a:	68f8      	ldr	r0, [r7, #12]
 8002d8c:	f000 fa22 	bl	80031d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d00d      	beq.n	8002db2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d9a:	2b04      	cmp	r3, #4
 8002d9c:	d107      	bne.n	8002dae <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e06b      	b.n	8002e8a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db6:	781a      	ldrb	r2, [r3, #0]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc2:	1c5a      	adds	r2, r3, #1
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	b29a      	uxth	r2, r3
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	b29a      	uxth	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	695b      	ldr	r3, [r3, #20]
 8002de8:	f003 0304 	and.w	r3, r3, #4
 8002dec:	2b04      	cmp	r3, #4
 8002dee:	d11b      	bne.n	8002e28 <HAL_I2C_Master_Transmit+0x188>
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d017      	beq.n	8002e28 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dfc:	781a      	ldrb	r2, [r3, #0]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e08:	1c5a      	adds	r2, r3, #1
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	3b01      	subs	r3, #1
 8002e16:	b29a      	uxth	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e20:	3b01      	subs	r3, #1
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e28:	697a      	ldr	r2, [r7, #20]
 8002e2a:	6a39      	ldr	r1, [r7, #32]
 8002e2c:	68f8      	ldr	r0, [r7, #12]
 8002e2e:	f000 fa19 	bl	8003264 <I2C_WaitOnBTFFlagUntilTimeout>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00d      	beq.n	8002e54 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e3c:	2b04      	cmp	r3, #4
 8002e3e:	d107      	bne.n	8002e50 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e4e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e01a      	b.n	8002e8a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d194      	bne.n	8002d86 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2220      	movs	r2, #32
 8002e70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002e84:	2300      	movs	r3, #0
 8002e86:	e000      	b.n	8002e8a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002e88:	2302      	movs	r3, #2
  }
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3718      	adds	r7, #24
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	00100002 	.word	0x00100002
 8002e98:	ffff0000 	.word	0xffff0000

08002e9c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b088      	sub	sp, #32
 8002ea0:	af02      	add	r7, sp, #8
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	607a      	str	r2, [r7, #4]
 8002ea6:	603b      	str	r3, [r7, #0]
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eb0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	2b08      	cmp	r3, #8
 8002eb6:	d006      	beq.n	8002ec6 <I2C_MasterRequestWrite+0x2a>
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d003      	beq.n	8002ec6 <I2C_MasterRequestWrite+0x2a>
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002ec4:	d108      	bne.n	8002ed8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ed4:	601a      	str	r2, [r3, #0]
 8002ed6:	e00b      	b.n	8002ef0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002edc:	2b12      	cmp	r3, #18
 8002ede:	d107      	bne.n	8002ef0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002eee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	9300      	str	r3, [sp, #0]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002efc:	68f8      	ldr	r0, [r7, #12]
 8002efe:	f000 f84f 	bl	8002fa0 <I2C_WaitOnFlagUntilTimeout>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d00d      	beq.n	8002f24 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f16:	d103      	bne.n	8002f20 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f1e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e035      	b.n	8002f90 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	691b      	ldr	r3, [r3, #16]
 8002f28:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f2c:	d108      	bne.n	8002f40 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f2e:	897b      	ldrh	r3, [r7, #10]
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	461a      	mov	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002f3c:	611a      	str	r2, [r3, #16]
 8002f3e:	e01b      	b.n	8002f78 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002f40:	897b      	ldrh	r3, [r7, #10]
 8002f42:	11db      	asrs	r3, r3, #7
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	f003 0306 	and.w	r3, r3, #6
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	f063 030f 	orn	r3, r3, #15
 8002f50:	b2da      	uxtb	r2, r3
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	490e      	ldr	r1, [pc, #56]	@ (8002f98 <I2C_MasterRequestWrite+0xfc>)
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f000 f898 	bl	8003094 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d001      	beq.n	8002f6e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e010      	b.n	8002f90 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002f6e:	897b      	ldrh	r3, [r7, #10]
 8002f70:	b2da      	uxtb	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	4907      	ldr	r1, [pc, #28]	@ (8002f9c <I2C_MasterRequestWrite+0x100>)
 8002f7e:	68f8      	ldr	r0, [r7, #12]
 8002f80:	f000 f888 	bl	8003094 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e000      	b.n	8002f90 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3718      	adds	r7, #24
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	00010008 	.word	0x00010008
 8002f9c:	00010002 	.word	0x00010002

08002fa0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	603b      	str	r3, [r7, #0]
 8002fac:	4613      	mov	r3, r2
 8002fae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fb0:	e048      	b.n	8003044 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb8:	d044      	beq.n	8003044 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fba:	f7ff fa7f 	bl	80024bc <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d302      	bcc.n	8002fd0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d139      	bne.n	8003044 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	0c1b      	lsrs	r3, r3, #16
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d10d      	bne.n	8002ff6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	695b      	ldr	r3, [r3, #20]
 8002fe0:	43da      	mvns	r2, r3
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	bf0c      	ite	eq
 8002fec:	2301      	moveq	r3, #1
 8002fee:	2300      	movne	r3, #0
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	e00c      	b.n	8003010 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	43da      	mvns	r2, r3
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	4013      	ands	r3, r2
 8003002:	b29b      	uxth	r3, r3
 8003004:	2b00      	cmp	r3, #0
 8003006:	bf0c      	ite	eq
 8003008:	2301      	moveq	r3, #1
 800300a:	2300      	movne	r3, #0
 800300c:	b2db      	uxtb	r3, r3
 800300e:	461a      	mov	r2, r3
 8003010:	79fb      	ldrb	r3, [r7, #7]
 8003012:	429a      	cmp	r2, r3
 8003014:	d116      	bne.n	8003044 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2200      	movs	r2, #0
 800301a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2220      	movs	r2, #32
 8003020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2200      	movs	r2, #0
 8003028:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003030:	f043 0220 	orr.w	r2, r3, #32
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e023      	b.n	800308c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	0c1b      	lsrs	r3, r3, #16
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b01      	cmp	r3, #1
 800304c:	d10d      	bne.n	800306a <I2C_WaitOnFlagUntilTimeout+0xca>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	695b      	ldr	r3, [r3, #20]
 8003054:	43da      	mvns	r2, r3
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	4013      	ands	r3, r2
 800305a:	b29b      	uxth	r3, r3
 800305c:	2b00      	cmp	r3, #0
 800305e:	bf0c      	ite	eq
 8003060:	2301      	moveq	r3, #1
 8003062:	2300      	movne	r3, #0
 8003064:	b2db      	uxtb	r3, r3
 8003066:	461a      	mov	r2, r3
 8003068:	e00c      	b.n	8003084 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	43da      	mvns	r2, r3
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	4013      	ands	r3, r2
 8003076:	b29b      	uxth	r3, r3
 8003078:	2b00      	cmp	r3, #0
 800307a:	bf0c      	ite	eq
 800307c:	2301      	moveq	r3, #1
 800307e:	2300      	movne	r3, #0
 8003080:	b2db      	uxtb	r3, r3
 8003082:	461a      	mov	r2, r3
 8003084:	79fb      	ldrb	r3, [r7, #7]
 8003086:	429a      	cmp	r2, r3
 8003088:	d093      	beq.n	8002fb2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3710      	adds	r7, #16
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	607a      	str	r2, [r7, #4]
 80030a0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030a2:	e071      	b.n	8003188 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030b2:	d123      	bne.n	80030fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030c2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80030cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2220      	movs	r2, #32
 80030d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e8:	f043 0204 	orr.w	r2, r3, #4
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e067      	b.n	80031cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003102:	d041      	beq.n	8003188 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003104:	f7ff f9da 	bl	80024bc <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	429a      	cmp	r2, r3
 8003112:	d302      	bcc.n	800311a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d136      	bne.n	8003188 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	0c1b      	lsrs	r3, r3, #16
 800311e:	b2db      	uxtb	r3, r3
 8003120:	2b01      	cmp	r3, #1
 8003122:	d10c      	bne.n	800313e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	43da      	mvns	r2, r3
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	4013      	ands	r3, r2
 8003130:	b29b      	uxth	r3, r3
 8003132:	2b00      	cmp	r3, #0
 8003134:	bf14      	ite	ne
 8003136:	2301      	movne	r3, #1
 8003138:	2300      	moveq	r3, #0
 800313a:	b2db      	uxtb	r3, r3
 800313c:	e00b      	b.n	8003156 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	43da      	mvns	r2, r3
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	4013      	ands	r3, r2
 800314a:	b29b      	uxth	r3, r3
 800314c:	2b00      	cmp	r3, #0
 800314e:	bf14      	ite	ne
 8003150:	2301      	movne	r3, #1
 8003152:	2300      	moveq	r3, #0
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d016      	beq.n	8003188 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2220      	movs	r2, #32
 8003164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003174:	f043 0220 	orr.w	r2, r3, #32
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e021      	b.n	80031cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	0c1b      	lsrs	r3, r3, #16
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b01      	cmp	r3, #1
 8003190:	d10c      	bne.n	80031ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	695b      	ldr	r3, [r3, #20]
 8003198:	43da      	mvns	r2, r3
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	4013      	ands	r3, r2
 800319e:	b29b      	uxth	r3, r3
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	bf14      	ite	ne
 80031a4:	2301      	movne	r3, #1
 80031a6:	2300      	moveq	r3, #0
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	e00b      	b.n	80031c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	43da      	mvns	r2, r3
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	4013      	ands	r3, r2
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	bf14      	ite	ne
 80031be:	2301      	movne	r3, #1
 80031c0:	2300      	moveq	r3, #0
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	f47f af6d 	bne.w	80030a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3710      	adds	r7, #16
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031e0:	e034      	b.n	800324c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	f000 f886 	bl	80032f4 <I2C_IsAcknowledgeFailed>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e034      	b.n	800325c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f8:	d028      	beq.n	800324c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031fa:	f7ff f95f 	bl	80024bc <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	68ba      	ldr	r2, [r7, #8]
 8003206:	429a      	cmp	r2, r3
 8003208:	d302      	bcc.n	8003210 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d11d      	bne.n	800324c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800321a:	2b80      	cmp	r3, #128	@ 0x80
 800321c:	d016      	beq.n	800324c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2220      	movs	r2, #32
 8003228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003238:	f043 0220 	orr.w	r2, r3, #32
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e007      	b.n	800325c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003256:	2b80      	cmp	r3, #128	@ 0x80
 8003258:	d1c3      	bne.n	80031e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800325a:	2300      	movs	r3, #0
}
 800325c:	4618      	mov	r0, r3
 800325e:	3710      	adds	r7, #16
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003270:	e034      	b.n	80032dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003272:	68f8      	ldr	r0, [r7, #12]
 8003274:	f000 f83e 	bl	80032f4 <I2C_IsAcknowledgeFailed>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e034      	b.n	80032ec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003288:	d028      	beq.n	80032dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800328a:	f7ff f917 	bl	80024bc <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	68ba      	ldr	r2, [r7, #8]
 8003296:	429a      	cmp	r2, r3
 8003298:	d302      	bcc.n	80032a0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d11d      	bne.n	80032dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	695b      	ldr	r3, [r3, #20]
 80032a6:	f003 0304 	and.w	r3, r3, #4
 80032aa:	2b04      	cmp	r3, #4
 80032ac:	d016      	beq.n	80032dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2220      	movs	r2, #32
 80032b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c8:	f043 0220 	orr.w	r2, r3, #32
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e007      	b.n	80032ec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	f003 0304 	and.w	r3, r3, #4
 80032e6:	2b04      	cmp	r3, #4
 80032e8:	d1c3      	bne.n	8003272 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3710      	adds	r7, #16
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003306:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800330a:	d11b      	bne.n	8003344 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003314:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2220      	movs	r2, #32
 8003320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003330:	f043 0204 	orr.w	r2, r3, #4
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e000      	b.n	8003346 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	bc80      	pop	{r7}
 800334e:	4770      	bx	lr

08003350 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b086      	sub	sp, #24
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d101      	bne.n	8003362 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e272      	b.n	8003848 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b00      	cmp	r3, #0
 800336c:	f000 8087 	beq.w	800347e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003370:	4b92      	ldr	r3, [pc, #584]	@ (80035bc <HAL_RCC_OscConfig+0x26c>)
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f003 030c 	and.w	r3, r3, #12
 8003378:	2b04      	cmp	r3, #4
 800337a:	d00c      	beq.n	8003396 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800337c:	4b8f      	ldr	r3, [pc, #572]	@ (80035bc <HAL_RCC_OscConfig+0x26c>)
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f003 030c 	and.w	r3, r3, #12
 8003384:	2b08      	cmp	r3, #8
 8003386:	d112      	bne.n	80033ae <HAL_RCC_OscConfig+0x5e>
 8003388:	4b8c      	ldr	r3, [pc, #560]	@ (80035bc <HAL_RCC_OscConfig+0x26c>)
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003390:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003394:	d10b      	bne.n	80033ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003396:	4b89      	ldr	r3, [pc, #548]	@ (80035bc <HAL_RCC_OscConfig+0x26c>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d06c      	beq.n	800347c <HAL_RCC_OscConfig+0x12c>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d168      	bne.n	800347c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e24c      	b.n	8003848 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033b6:	d106      	bne.n	80033c6 <HAL_RCC_OscConfig+0x76>
 80033b8:	4b80      	ldr	r3, [pc, #512]	@ (80035bc <HAL_RCC_OscConfig+0x26c>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a7f      	ldr	r2, [pc, #508]	@ (80035bc <HAL_RCC_OscConfig+0x26c>)
 80033be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033c2:	6013      	str	r3, [r2, #0]
 80033c4:	e02e      	b.n	8003424 <HAL_RCC_OscConfig+0xd4>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10c      	bne.n	80033e8 <HAL_RCC_OscConfig+0x98>
 80033ce:	4b7b      	ldr	r3, [pc, #492]	@ (80035bc <HAL_RCC_OscConfig+0x26c>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a7a      	ldr	r2, [pc, #488]	@ (80035bc <HAL_RCC_OscConfig+0x26c>)
 80033d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033d8:	6013      	str	r3, [r2, #0]
 80033da:	4b78      	ldr	r3, [pc, #480]	@ (80035bc <HAL_RCC_OscConfig+0x26c>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a77      	ldr	r2, [pc, #476]	@ (80035bc <HAL_RCC_OscConfig+0x26c>)
 80033e0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033e4:	6013      	str	r3, [r2, #0]
 80033e6:	e01d      	b.n	8003424 <HAL_RCC_OscConfig+0xd4>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033f0:	d10c      	bne.n	800340c <HAL_RCC_OscConfig+0xbc>
 80033f2:	4b72      	ldr	r3, [pc, #456]	@ (80035bc <HAL_RCC_OscConfig+0x26c>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a71      	ldr	r2, [pc, #452]	@ (80035bc <HAL_RCC_OscConfig+0x26c>)
 80033f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033fc:	6013      	str	r3, [r2, #0]
 80033fe:	4b6f      	ldr	r3, [pc, #444]	@ (80035bc <HAL_RCC_OscConfig+0x26c>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a6e      	ldr	r2, [pc, #440]	@ (80035bc <HAL_RCC_OscConfig+0x26c>)
 8003404:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003408:	6013      	str	r3, [r2, #0]
 800340a:	e00b      	b.n	8003424 <HAL_RCC_OscConfig+0xd4>
 800340c:	4b6b      	ldr	r3, [pc, #428]	@ (80035bc <HAL_RCC_OscConfig+0x26c>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a6a      	ldr	r2, [pc, #424]	@ (80035bc <HAL_RCC_OscConfig+0x26c>)
 8003412:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003416:	6013      	str	r3, [r2, #0]
 8003418:	4b68      	ldr	r3, [pc, #416]	@ (80035bc <HAL_RCC_OscConfig+0x26c>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a67      	ldr	r2, [pc, #412]	@ (80035bc <HAL_RCC_OscConfig+0x26c>)
 800341e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003422:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d013      	beq.n	8003454 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800342c:	f7ff f846 	bl	80024bc <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003432:	e008      	b.n	8003446 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003434:	f7ff f842 	bl	80024bc <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b64      	cmp	r3, #100	@ 0x64
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e200      	b.n	8003848 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003446:	4b5d      	ldr	r3, [pc, #372]	@ (80035bc <HAL_RCC_OscConfig+0x26c>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d0f0      	beq.n	8003434 <HAL_RCC_OscConfig+0xe4>
 8003452:	e014      	b.n	800347e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003454:	f7ff f832 	bl	80024bc <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800345a:	e008      	b.n	800346e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800345c:	f7ff f82e 	bl	80024bc <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b64      	cmp	r3, #100	@ 0x64
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e1ec      	b.n	8003848 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800346e:	4b53      	ldr	r3, [pc, #332]	@ (80035bc <HAL_RCC_OscConfig+0x26c>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1f0      	bne.n	800345c <HAL_RCC_OscConfig+0x10c>
 800347a:	e000      	b.n	800347e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800347c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d063      	beq.n	8003552 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800348a:	4b4c      	ldr	r3, [pc, #304]	@ (80035bc <HAL_RCC_OscConfig+0x26c>)
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f003 030c 	and.w	r3, r3, #12
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00b      	beq.n	80034ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003496:	4b49      	ldr	r3, [pc, #292]	@ (80035bc <HAL_RCC_OscConfig+0x26c>)
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f003 030c 	and.w	r3, r3, #12
 800349e:	2b08      	cmp	r3, #8
 80034a0:	d11c      	bne.n	80034dc <HAL_RCC_OscConfig+0x18c>
 80034a2:	4b46      	ldr	r3, [pc, #280]	@ (80035bc <HAL_RCC_OscConfig+0x26c>)
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d116      	bne.n	80034dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ae:	4b43      	ldr	r3, [pc, #268]	@ (80035bc <HAL_RCC_OscConfig+0x26c>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d005      	beq.n	80034c6 <HAL_RCC_OscConfig+0x176>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d001      	beq.n	80034c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e1c0      	b.n	8003848 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034c6:	4b3d      	ldr	r3, [pc, #244]	@ (80035bc <HAL_RCC_OscConfig+0x26c>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	00db      	lsls	r3, r3, #3
 80034d4:	4939      	ldr	r1, [pc, #228]	@ (80035bc <HAL_RCC_OscConfig+0x26c>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034da:	e03a      	b.n	8003552 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d020      	beq.n	8003526 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034e4:	4b36      	ldr	r3, [pc, #216]	@ (80035c0 <HAL_RCC_OscConfig+0x270>)
 80034e6:	2201      	movs	r2, #1
 80034e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ea:	f7fe ffe7 	bl	80024bc <HAL_GetTick>
 80034ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034f0:	e008      	b.n	8003504 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034f2:	f7fe ffe3 	bl	80024bc <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d901      	bls.n	8003504 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e1a1      	b.n	8003848 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003504:	4b2d      	ldr	r3, [pc, #180]	@ (80035bc <HAL_RCC_OscConfig+0x26c>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d0f0      	beq.n	80034f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003510:	4b2a      	ldr	r3, [pc, #168]	@ (80035bc <HAL_RCC_OscConfig+0x26c>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	695b      	ldr	r3, [r3, #20]
 800351c:	00db      	lsls	r3, r3, #3
 800351e:	4927      	ldr	r1, [pc, #156]	@ (80035bc <HAL_RCC_OscConfig+0x26c>)
 8003520:	4313      	orrs	r3, r2
 8003522:	600b      	str	r3, [r1, #0]
 8003524:	e015      	b.n	8003552 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003526:	4b26      	ldr	r3, [pc, #152]	@ (80035c0 <HAL_RCC_OscConfig+0x270>)
 8003528:	2200      	movs	r2, #0
 800352a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800352c:	f7fe ffc6 	bl	80024bc <HAL_GetTick>
 8003530:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003532:	e008      	b.n	8003546 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003534:	f7fe ffc2 	bl	80024bc <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b02      	cmp	r3, #2
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e180      	b.n	8003848 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003546:	4b1d      	ldr	r3, [pc, #116]	@ (80035bc <HAL_RCC_OscConfig+0x26c>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1f0      	bne.n	8003534 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0308 	and.w	r3, r3, #8
 800355a:	2b00      	cmp	r3, #0
 800355c:	d03a      	beq.n	80035d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d019      	beq.n	800359a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003566:	4b17      	ldr	r3, [pc, #92]	@ (80035c4 <HAL_RCC_OscConfig+0x274>)
 8003568:	2201      	movs	r2, #1
 800356a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800356c:	f7fe ffa6 	bl	80024bc <HAL_GetTick>
 8003570:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003572:	e008      	b.n	8003586 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003574:	f7fe ffa2 	bl	80024bc <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b02      	cmp	r3, #2
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e160      	b.n	8003848 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003586:	4b0d      	ldr	r3, [pc, #52]	@ (80035bc <HAL_RCC_OscConfig+0x26c>)
 8003588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d0f0      	beq.n	8003574 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003592:	2001      	movs	r0, #1
 8003594:	f000 faba 	bl	8003b0c <RCC_Delay>
 8003598:	e01c      	b.n	80035d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800359a:	4b0a      	ldr	r3, [pc, #40]	@ (80035c4 <HAL_RCC_OscConfig+0x274>)
 800359c:	2200      	movs	r2, #0
 800359e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035a0:	f7fe ff8c 	bl	80024bc <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035a6:	e00f      	b.n	80035c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035a8:	f7fe ff88 	bl	80024bc <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d908      	bls.n	80035c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e146      	b.n	8003848 <HAL_RCC_OscConfig+0x4f8>
 80035ba:	bf00      	nop
 80035bc:	40021000 	.word	0x40021000
 80035c0:	42420000 	.word	0x42420000
 80035c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035c8:	4b92      	ldr	r3, [pc, #584]	@ (8003814 <HAL_RCC_OscConfig+0x4c4>)
 80035ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035cc:	f003 0302 	and.w	r3, r3, #2
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d1e9      	bne.n	80035a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0304 	and.w	r3, r3, #4
 80035dc:	2b00      	cmp	r3, #0
 80035de:	f000 80a6 	beq.w	800372e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035e2:	2300      	movs	r3, #0
 80035e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035e6:	4b8b      	ldr	r3, [pc, #556]	@ (8003814 <HAL_RCC_OscConfig+0x4c4>)
 80035e8:	69db      	ldr	r3, [r3, #28]
 80035ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d10d      	bne.n	800360e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035f2:	4b88      	ldr	r3, [pc, #544]	@ (8003814 <HAL_RCC_OscConfig+0x4c4>)
 80035f4:	69db      	ldr	r3, [r3, #28]
 80035f6:	4a87      	ldr	r2, [pc, #540]	@ (8003814 <HAL_RCC_OscConfig+0x4c4>)
 80035f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035fc:	61d3      	str	r3, [r2, #28]
 80035fe:	4b85      	ldr	r3, [pc, #532]	@ (8003814 <HAL_RCC_OscConfig+0x4c4>)
 8003600:	69db      	ldr	r3, [r3, #28]
 8003602:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003606:	60bb      	str	r3, [r7, #8]
 8003608:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800360a:	2301      	movs	r3, #1
 800360c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800360e:	4b82      	ldr	r3, [pc, #520]	@ (8003818 <HAL_RCC_OscConfig+0x4c8>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003616:	2b00      	cmp	r3, #0
 8003618:	d118      	bne.n	800364c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800361a:	4b7f      	ldr	r3, [pc, #508]	@ (8003818 <HAL_RCC_OscConfig+0x4c8>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a7e      	ldr	r2, [pc, #504]	@ (8003818 <HAL_RCC_OscConfig+0x4c8>)
 8003620:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003624:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003626:	f7fe ff49 	bl	80024bc <HAL_GetTick>
 800362a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800362c:	e008      	b.n	8003640 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800362e:	f7fe ff45 	bl	80024bc <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	2b64      	cmp	r3, #100	@ 0x64
 800363a:	d901      	bls.n	8003640 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e103      	b.n	8003848 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003640:	4b75      	ldr	r3, [pc, #468]	@ (8003818 <HAL_RCC_OscConfig+0x4c8>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003648:	2b00      	cmp	r3, #0
 800364a:	d0f0      	beq.n	800362e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	2b01      	cmp	r3, #1
 8003652:	d106      	bne.n	8003662 <HAL_RCC_OscConfig+0x312>
 8003654:	4b6f      	ldr	r3, [pc, #444]	@ (8003814 <HAL_RCC_OscConfig+0x4c4>)
 8003656:	6a1b      	ldr	r3, [r3, #32]
 8003658:	4a6e      	ldr	r2, [pc, #440]	@ (8003814 <HAL_RCC_OscConfig+0x4c4>)
 800365a:	f043 0301 	orr.w	r3, r3, #1
 800365e:	6213      	str	r3, [r2, #32]
 8003660:	e02d      	b.n	80036be <HAL_RCC_OscConfig+0x36e>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d10c      	bne.n	8003684 <HAL_RCC_OscConfig+0x334>
 800366a:	4b6a      	ldr	r3, [pc, #424]	@ (8003814 <HAL_RCC_OscConfig+0x4c4>)
 800366c:	6a1b      	ldr	r3, [r3, #32]
 800366e:	4a69      	ldr	r2, [pc, #420]	@ (8003814 <HAL_RCC_OscConfig+0x4c4>)
 8003670:	f023 0301 	bic.w	r3, r3, #1
 8003674:	6213      	str	r3, [r2, #32]
 8003676:	4b67      	ldr	r3, [pc, #412]	@ (8003814 <HAL_RCC_OscConfig+0x4c4>)
 8003678:	6a1b      	ldr	r3, [r3, #32]
 800367a:	4a66      	ldr	r2, [pc, #408]	@ (8003814 <HAL_RCC_OscConfig+0x4c4>)
 800367c:	f023 0304 	bic.w	r3, r3, #4
 8003680:	6213      	str	r3, [r2, #32]
 8003682:	e01c      	b.n	80036be <HAL_RCC_OscConfig+0x36e>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	2b05      	cmp	r3, #5
 800368a:	d10c      	bne.n	80036a6 <HAL_RCC_OscConfig+0x356>
 800368c:	4b61      	ldr	r3, [pc, #388]	@ (8003814 <HAL_RCC_OscConfig+0x4c4>)
 800368e:	6a1b      	ldr	r3, [r3, #32]
 8003690:	4a60      	ldr	r2, [pc, #384]	@ (8003814 <HAL_RCC_OscConfig+0x4c4>)
 8003692:	f043 0304 	orr.w	r3, r3, #4
 8003696:	6213      	str	r3, [r2, #32]
 8003698:	4b5e      	ldr	r3, [pc, #376]	@ (8003814 <HAL_RCC_OscConfig+0x4c4>)
 800369a:	6a1b      	ldr	r3, [r3, #32]
 800369c:	4a5d      	ldr	r2, [pc, #372]	@ (8003814 <HAL_RCC_OscConfig+0x4c4>)
 800369e:	f043 0301 	orr.w	r3, r3, #1
 80036a2:	6213      	str	r3, [r2, #32]
 80036a4:	e00b      	b.n	80036be <HAL_RCC_OscConfig+0x36e>
 80036a6:	4b5b      	ldr	r3, [pc, #364]	@ (8003814 <HAL_RCC_OscConfig+0x4c4>)
 80036a8:	6a1b      	ldr	r3, [r3, #32]
 80036aa:	4a5a      	ldr	r2, [pc, #360]	@ (8003814 <HAL_RCC_OscConfig+0x4c4>)
 80036ac:	f023 0301 	bic.w	r3, r3, #1
 80036b0:	6213      	str	r3, [r2, #32]
 80036b2:	4b58      	ldr	r3, [pc, #352]	@ (8003814 <HAL_RCC_OscConfig+0x4c4>)
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	4a57      	ldr	r2, [pc, #348]	@ (8003814 <HAL_RCC_OscConfig+0x4c4>)
 80036b8:	f023 0304 	bic.w	r3, r3, #4
 80036bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d015      	beq.n	80036f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036c6:	f7fe fef9 	bl	80024bc <HAL_GetTick>
 80036ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036cc:	e00a      	b.n	80036e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036ce:	f7fe fef5 	bl	80024bc <HAL_GetTick>
 80036d2:	4602      	mov	r2, r0
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036dc:	4293      	cmp	r3, r2
 80036de:	d901      	bls.n	80036e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e0b1      	b.n	8003848 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036e4:	4b4b      	ldr	r3, [pc, #300]	@ (8003814 <HAL_RCC_OscConfig+0x4c4>)
 80036e6:	6a1b      	ldr	r3, [r3, #32]
 80036e8:	f003 0302 	and.w	r3, r3, #2
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d0ee      	beq.n	80036ce <HAL_RCC_OscConfig+0x37e>
 80036f0:	e014      	b.n	800371c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036f2:	f7fe fee3 	bl	80024bc <HAL_GetTick>
 80036f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036f8:	e00a      	b.n	8003710 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036fa:	f7fe fedf 	bl	80024bc <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003708:	4293      	cmp	r3, r2
 800370a:	d901      	bls.n	8003710 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e09b      	b.n	8003848 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003710:	4b40      	ldr	r3, [pc, #256]	@ (8003814 <HAL_RCC_OscConfig+0x4c4>)
 8003712:	6a1b      	ldr	r3, [r3, #32]
 8003714:	f003 0302 	and.w	r3, r3, #2
 8003718:	2b00      	cmp	r3, #0
 800371a:	d1ee      	bne.n	80036fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800371c:	7dfb      	ldrb	r3, [r7, #23]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d105      	bne.n	800372e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003722:	4b3c      	ldr	r3, [pc, #240]	@ (8003814 <HAL_RCC_OscConfig+0x4c4>)
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	4a3b      	ldr	r2, [pc, #236]	@ (8003814 <HAL_RCC_OscConfig+0x4c4>)
 8003728:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800372c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	69db      	ldr	r3, [r3, #28]
 8003732:	2b00      	cmp	r3, #0
 8003734:	f000 8087 	beq.w	8003846 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003738:	4b36      	ldr	r3, [pc, #216]	@ (8003814 <HAL_RCC_OscConfig+0x4c4>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f003 030c 	and.w	r3, r3, #12
 8003740:	2b08      	cmp	r3, #8
 8003742:	d061      	beq.n	8003808 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	69db      	ldr	r3, [r3, #28]
 8003748:	2b02      	cmp	r3, #2
 800374a:	d146      	bne.n	80037da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800374c:	4b33      	ldr	r3, [pc, #204]	@ (800381c <HAL_RCC_OscConfig+0x4cc>)
 800374e:	2200      	movs	r2, #0
 8003750:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003752:	f7fe feb3 	bl	80024bc <HAL_GetTick>
 8003756:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003758:	e008      	b.n	800376c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800375a:	f7fe feaf 	bl	80024bc <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d901      	bls.n	800376c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	e06d      	b.n	8003848 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800376c:	4b29      	ldr	r3, [pc, #164]	@ (8003814 <HAL_RCC_OscConfig+0x4c4>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d1f0      	bne.n	800375a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a1b      	ldr	r3, [r3, #32]
 800377c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003780:	d108      	bne.n	8003794 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003782:	4b24      	ldr	r3, [pc, #144]	@ (8003814 <HAL_RCC_OscConfig+0x4c4>)
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	4921      	ldr	r1, [pc, #132]	@ (8003814 <HAL_RCC_OscConfig+0x4c4>)
 8003790:	4313      	orrs	r3, r2
 8003792:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003794:	4b1f      	ldr	r3, [pc, #124]	@ (8003814 <HAL_RCC_OscConfig+0x4c4>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a19      	ldr	r1, [r3, #32]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a4:	430b      	orrs	r3, r1
 80037a6:	491b      	ldr	r1, [pc, #108]	@ (8003814 <HAL_RCC_OscConfig+0x4c4>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037ac:	4b1b      	ldr	r3, [pc, #108]	@ (800381c <HAL_RCC_OscConfig+0x4cc>)
 80037ae:	2201      	movs	r2, #1
 80037b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b2:	f7fe fe83 	bl	80024bc <HAL_GetTick>
 80037b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037b8:	e008      	b.n	80037cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ba:	f7fe fe7f 	bl	80024bc <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d901      	bls.n	80037cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e03d      	b.n	8003848 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037cc:	4b11      	ldr	r3, [pc, #68]	@ (8003814 <HAL_RCC_OscConfig+0x4c4>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d0f0      	beq.n	80037ba <HAL_RCC_OscConfig+0x46a>
 80037d8:	e035      	b.n	8003846 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037da:	4b10      	ldr	r3, [pc, #64]	@ (800381c <HAL_RCC_OscConfig+0x4cc>)
 80037dc:	2200      	movs	r2, #0
 80037de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e0:	f7fe fe6c 	bl	80024bc <HAL_GetTick>
 80037e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037e6:	e008      	b.n	80037fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037e8:	f7fe fe68 	bl	80024bc <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d901      	bls.n	80037fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e026      	b.n	8003848 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037fa:	4b06      	ldr	r3, [pc, #24]	@ (8003814 <HAL_RCC_OscConfig+0x4c4>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d1f0      	bne.n	80037e8 <HAL_RCC_OscConfig+0x498>
 8003806:	e01e      	b.n	8003846 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	69db      	ldr	r3, [r3, #28]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d107      	bne.n	8003820 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e019      	b.n	8003848 <HAL_RCC_OscConfig+0x4f8>
 8003814:	40021000 	.word	0x40021000
 8003818:	40007000 	.word	0x40007000
 800381c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003820:	4b0b      	ldr	r3, [pc, #44]	@ (8003850 <HAL_RCC_OscConfig+0x500>)
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a1b      	ldr	r3, [r3, #32]
 8003830:	429a      	cmp	r2, r3
 8003832:	d106      	bne.n	8003842 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800383e:	429a      	cmp	r2, r3
 8003840:	d001      	beq.n	8003846 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e000      	b.n	8003848 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003846:	2300      	movs	r3, #0
}
 8003848:	4618      	mov	r0, r3
 800384a:	3718      	adds	r7, #24
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	40021000 	.word	0x40021000

08003854 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d101      	bne.n	8003868 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e0d0      	b.n	8003a0a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003868:	4b6a      	ldr	r3, [pc, #424]	@ (8003a14 <HAL_RCC_ClockConfig+0x1c0>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0307 	and.w	r3, r3, #7
 8003870:	683a      	ldr	r2, [r7, #0]
 8003872:	429a      	cmp	r2, r3
 8003874:	d910      	bls.n	8003898 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003876:	4b67      	ldr	r3, [pc, #412]	@ (8003a14 <HAL_RCC_ClockConfig+0x1c0>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f023 0207 	bic.w	r2, r3, #7
 800387e:	4965      	ldr	r1, [pc, #404]	@ (8003a14 <HAL_RCC_ClockConfig+0x1c0>)
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	4313      	orrs	r3, r2
 8003884:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003886:	4b63      	ldr	r3, [pc, #396]	@ (8003a14 <HAL_RCC_ClockConfig+0x1c0>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0307 	and.w	r3, r3, #7
 800388e:	683a      	ldr	r2, [r7, #0]
 8003890:	429a      	cmp	r2, r3
 8003892:	d001      	beq.n	8003898 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e0b8      	b.n	8003a0a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0302 	and.w	r3, r3, #2
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d020      	beq.n	80038e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0304 	and.w	r3, r3, #4
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d005      	beq.n	80038bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038b0:	4b59      	ldr	r3, [pc, #356]	@ (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	4a58      	ldr	r2, [pc, #352]	@ (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 80038b6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80038ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0308 	and.w	r3, r3, #8
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d005      	beq.n	80038d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038c8:	4b53      	ldr	r3, [pc, #332]	@ (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	4a52      	ldr	r2, [pc, #328]	@ (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 80038ce:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80038d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038d4:	4b50      	ldr	r3, [pc, #320]	@ (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	494d      	ldr	r1, [pc, #308]	@ (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d040      	beq.n	8003974 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d107      	bne.n	800390a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038fa:	4b47      	ldr	r3, [pc, #284]	@ (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d115      	bne.n	8003932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e07f      	b.n	8003a0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	2b02      	cmp	r3, #2
 8003910:	d107      	bne.n	8003922 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003912:	4b41      	ldr	r3, [pc, #260]	@ (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d109      	bne.n	8003932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e073      	b.n	8003a0a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003922:	4b3d      	ldr	r3, [pc, #244]	@ (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	2b00      	cmp	r3, #0
 800392c:	d101      	bne.n	8003932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e06b      	b.n	8003a0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003932:	4b39      	ldr	r3, [pc, #228]	@ (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f023 0203 	bic.w	r2, r3, #3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	4936      	ldr	r1, [pc, #216]	@ (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 8003940:	4313      	orrs	r3, r2
 8003942:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003944:	f7fe fdba 	bl	80024bc <HAL_GetTick>
 8003948:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800394a:	e00a      	b.n	8003962 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800394c:	f7fe fdb6 	bl	80024bc <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	f241 3288 	movw	r2, #5000	@ 0x1388
 800395a:	4293      	cmp	r3, r2
 800395c:	d901      	bls.n	8003962 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e053      	b.n	8003a0a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003962:	4b2d      	ldr	r3, [pc, #180]	@ (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f003 020c 	and.w	r2, r3, #12
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	429a      	cmp	r2, r3
 8003972:	d1eb      	bne.n	800394c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003974:	4b27      	ldr	r3, [pc, #156]	@ (8003a14 <HAL_RCC_ClockConfig+0x1c0>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0307 	and.w	r3, r3, #7
 800397c:	683a      	ldr	r2, [r7, #0]
 800397e:	429a      	cmp	r2, r3
 8003980:	d210      	bcs.n	80039a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003982:	4b24      	ldr	r3, [pc, #144]	@ (8003a14 <HAL_RCC_ClockConfig+0x1c0>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f023 0207 	bic.w	r2, r3, #7
 800398a:	4922      	ldr	r1, [pc, #136]	@ (8003a14 <HAL_RCC_ClockConfig+0x1c0>)
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	4313      	orrs	r3, r2
 8003990:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003992:	4b20      	ldr	r3, [pc, #128]	@ (8003a14 <HAL_RCC_ClockConfig+0x1c0>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0307 	and.w	r3, r3, #7
 800399a:	683a      	ldr	r2, [r7, #0]
 800399c:	429a      	cmp	r2, r3
 800399e:	d001      	beq.n	80039a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e032      	b.n	8003a0a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0304 	and.w	r3, r3, #4
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d008      	beq.n	80039c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039b0:	4b19      	ldr	r3, [pc, #100]	@ (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	4916      	ldr	r1, [pc, #88]	@ (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0308 	and.w	r3, r3, #8
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d009      	beq.n	80039e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039ce:	4b12      	ldr	r3, [pc, #72]	@ (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	00db      	lsls	r3, r3, #3
 80039dc:	490e      	ldr	r1, [pc, #56]	@ (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039e2:	f000 f821 	bl	8003a28 <HAL_RCC_GetSysClockFreq>
 80039e6:	4602      	mov	r2, r0
 80039e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	091b      	lsrs	r3, r3, #4
 80039ee:	f003 030f 	and.w	r3, r3, #15
 80039f2:	490a      	ldr	r1, [pc, #40]	@ (8003a1c <HAL_RCC_ClockConfig+0x1c8>)
 80039f4:	5ccb      	ldrb	r3, [r1, r3]
 80039f6:	fa22 f303 	lsr.w	r3, r2, r3
 80039fa:	4a09      	ldr	r2, [pc, #36]	@ (8003a20 <HAL_RCC_ClockConfig+0x1cc>)
 80039fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80039fe:	4b09      	ldr	r3, [pc, #36]	@ (8003a24 <HAL_RCC_ClockConfig+0x1d0>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7fe fd18 	bl	8002438 <HAL_InitTick>

  return HAL_OK;
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3710      	adds	r7, #16
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	40022000 	.word	0x40022000
 8003a18:	40021000 	.word	0x40021000
 8003a1c:	08005c84 	.word	0x08005c84
 8003a20:	20000000 	.word	0x20000000
 8003a24:	20000004 	.word	0x20000004

08003a28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b087      	sub	sp, #28
 8003a2c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	60fb      	str	r3, [r7, #12]
 8003a32:	2300      	movs	r3, #0
 8003a34:	60bb      	str	r3, [r7, #8]
 8003a36:	2300      	movs	r3, #0
 8003a38:	617b      	str	r3, [r7, #20]
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003a42:	4b1e      	ldr	r3, [pc, #120]	@ (8003abc <HAL_RCC_GetSysClockFreq+0x94>)
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f003 030c 	and.w	r3, r3, #12
 8003a4e:	2b04      	cmp	r3, #4
 8003a50:	d002      	beq.n	8003a58 <HAL_RCC_GetSysClockFreq+0x30>
 8003a52:	2b08      	cmp	r3, #8
 8003a54:	d003      	beq.n	8003a5e <HAL_RCC_GetSysClockFreq+0x36>
 8003a56:	e027      	b.n	8003aa8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a58:	4b19      	ldr	r3, [pc, #100]	@ (8003ac0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a5a:	613b      	str	r3, [r7, #16]
      break;
 8003a5c:	e027      	b.n	8003aae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	0c9b      	lsrs	r3, r3, #18
 8003a62:	f003 030f 	and.w	r3, r3, #15
 8003a66:	4a17      	ldr	r2, [pc, #92]	@ (8003ac4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003a68:	5cd3      	ldrb	r3, [r2, r3]
 8003a6a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d010      	beq.n	8003a98 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a76:	4b11      	ldr	r3, [pc, #68]	@ (8003abc <HAL_RCC_GetSysClockFreq+0x94>)
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	0c5b      	lsrs	r3, r3, #17
 8003a7c:	f003 0301 	and.w	r3, r3, #1
 8003a80:	4a11      	ldr	r2, [pc, #68]	@ (8003ac8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003a82:	5cd3      	ldrb	r3, [r2, r3]
 8003a84:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a0d      	ldr	r2, [pc, #52]	@ (8003ac0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a8a:	fb03 f202 	mul.w	r2, r3, r2
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a94:	617b      	str	r3, [r7, #20]
 8003a96:	e004      	b.n	8003aa2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a0c      	ldr	r2, [pc, #48]	@ (8003acc <HAL_RCC_GetSysClockFreq+0xa4>)
 8003a9c:	fb02 f303 	mul.w	r3, r2, r3
 8003aa0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	613b      	str	r3, [r7, #16]
      break;
 8003aa6:	e002      	b.n	8003aae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003aa8:	4b05      	ldr	r3, [pc, #20]	@ (8003ac0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003aaa:	613b      	str	r3, [r7, #16]
      break;
 8003aac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003aae:	693b      	ldr	r3, [r7, #16]
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	371c      	adds	r7, #28
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bc80      	pop	{r7}
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	40021000 	.word	0x40021000
 8003ac0:	007a1200 	.word	0x007a1200
 8003ac4:	08005c9c 	.word	0x08005c9c
 8003ac8:	08005cac 	.word	0x08005cac
 8003acc:	003d0900 	.word	0x003d0900

08003ad0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ad4:	4b02      	ldr	r3, [pc, #8]	@ (8003ae0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bc80      	pop	{r7}
 8003ade:	4770      	bx	lr
 8003ae0:	20000000 	.word	0x20000000

08003ae4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ae8:	f7ff fff2 	bl	8003ad0 <HAL_RCC_GetHCLKFreq>
 8003aec:	4602      	mov	r2, r0
 8003aee:	4b05      	ldr	r3, [pc, #20]	@ (8003b04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	0a1b      	lsrs	r3, r3, #8
 8003af4:	f003 0307 	and.w	r3, r3, #7
 8003af8:	4903      	ldr	r1, [pc, #12]	@ (8003b08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003afa:	5ccb      	ldrb	r3, [r1, r3]
 8003afc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	40021000 	.word	0x40021000
 8003b08:	08005c94 	.word	0x08005c94

08003b0c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b085      	sub	sp, #20
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003b14:	4b0a      	ldr	r3, [pc, #40]	@ (8003b40 <RCC_Delay+0x34>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a0a      	ldr	r2, [pc, #40]	@ (8003b44 <RCC_Delay+0x38>)
 8003b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b1e:	0a5b      	lsrs	r3, r3, #9
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	fb02 f303 	mul.w	r3, r2, r3
 8003b26:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003b28:	bf00      	nop
  }
  while (Delay --);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	1e5a      	subs	r2, r3, #1
 8003b2e:	60fa      	str	r2, [r7, #12]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d1f9      	bne.n	8003b28 <RCC_Delay+0x1c>
}
 8003b34:	bf00      	nop
 8003b36:	bf00      	nop
 8003b38:	3714      	adds	r7, #20
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bc80      	pop	{r7}
 8003b3e:	4770      	bx	lr
 8003b40:	20000000 	.word	0x20000000
 8003b44:	10624dd3 	.word	0x10624dd3

08003b48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d101      	bne.n	8003b5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e041      	b.n	8003bde <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d106      	bne.n	8003b74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f7fe fbc0 	bl	80022f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2202      	movs	r2, #2
 8003b78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	3304      	adds	r3, #4
 8003b84:	4619      	mov	r1, r3
 8003b86:	4610      	mov	r0, r2
 8003b88:	f000 f9ec 	bl	8003f64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3708      	adds	r7, #8
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}

08003be6 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003be6:	b580      	push	{r7, lr}
 8003be8:	b082      	sub	sp, #8
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d101      	bne.n	8003bf8 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e041      	b.n	8003c7c <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d106      	bne.n	8003c12 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f000 f839 	bl	8003c84 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2202      	movs	r2, #2
 8003c16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	3304      	adds	r3, #4
 8003c22:	4619      	mov	r1, r3
 8003c24:	4610      	mov	r0, r2
 8003c26:	f000 f99d 	bl	8003f64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2201      	movs	r2, #1
 8003c46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2201      	movs	r2, #1
 8003c66:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3708      	adds	r7, #8
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003c8c:	bf00      	nop
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bc80      	pop	{r7}
 8003c94:	4770      	bx	lr
	...

08003c98 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b086      	sub	sp, #24
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d101      	bne.n	8003cb6 <HAL_TIM_OC_ConfigChannel+0x1e>
 8003cb2:	2302      	movs	r3, #2
 8003cb4:	e048      	b.n	8003d48 <HAL_TIM_OC_ConfigChannel+0xb0>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2b0c      	cmp	r3, #12
 8003cc2:	d839      	bhi.n	8003d38 <HAL_TIM_OC_ConfigChannel+0xa0>
 8003cc4:	a201      	add	r2, pc, #4	@ (adr r2, 8003ccc <HAL_TIM_OC_ConfigChannel+0x34>)
 8003cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cca:	bf00      	nop
 8003ccc:	08003d01 	.word	0x08003d01
 8003cd0:	08003d39 	.word	0x08003d39
 8003cd4:	08003d39 	.word	0x08003d39
 8003cd8:	08003d39 	.word	0x08003d39
 8003cdc:	08003d0f 	.word	0x08003d0f
 8003ce0:	08003d39 	.word	0x08003d39
 8003ce4:	08003d39 	.word	0x08003d39
 8003ce8:	08003d39 	.word	0x08003d39
 8003cec:	08003d1d 	.word	0x08003d1d
 8003cf0:	08003d39 	.word	0x08003d39
 8003cf4:	08003d39 	.word	0x08003d39
 8003cf8:	08003d39 	.word	0x08003d39
 8003cfc:	08003d2b 	.word	0x08003d2b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68b9      	ldr	r1, [r7, #8]
 8003d06:	4618      	mov	r0, r3
 8003d08:	f000 f99a 	bl	8004040 <TIM_OC1_SetConfig>
      break;
 8003d0c:	e017      	b.n	8003d3e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68b9      	ldr	r1, [r7, #8]
 8003d14:	4618      	mov	r0, r3
 8003d16:	f000 f9f9 	bl	800410c <TIM_OC2_SetConfig>
      break;
 8003d1a:	e010      	b.n	8003d3e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68b9      	ldr	r1, [r7, #8]
 8003d22:	4618      	mov	r0, r3
 8003d24:	f000 fa5c 	bl	80041e0 <TIM_OC3_SetConfig>
      break;
 8003d28:	e009      	b.n	8003d3e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	68b9      	ldr	r1, [r7, #8]
 8003d30:	4618      	mov	r0, r3
 8003d32:	f000 fabf 	bl	80042b4 <TIM_OC4_SetConfig>
      break;
 8003d36:	e002      	b.n	8003d3e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	75fb      	strb	r3, [r7, #23]
      break;
 8003d3c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003d46:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3718      	adds	r7, #24
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d101      	bne.n	8003d6c <HAL_TIM_ConfigClockSource+0x1c>
 8003d68:	2302      	movs	r3, #2
 8003d6a:	e0b4      	b.n	8003ed6 <HAL_TIM_ConfigClockSource+0x186>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2202      	movs	r2, #2
 8003d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003d8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68ba      	ldr	r2, [r7, #8]
 8003d9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003da4:	d03e      	beq.n	8003e24 <HAL_TIM_ConfigClockSource+0xd4>
 8003da6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003daa:	f200 8087 	bhi.w	8003ebc <HAL_TIM_ConfigClockSource+0x16c>
 8003dae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003db2:	f000 8086 	beq.w	8003ec2 <HAL_TIM_ConfigClockSource+0x172>
 8003db6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dba:	d87f      	bhi.n	8003ebc <HAL_TIM_ConfigClockSource+0x16c>
 8003dbc:	2b70      	cmp	r3, #112	@ 0x70
 8003dbe:	d01a      	beq.n	8003df6 <HAL_TIM_ConfigClockSource+0xa6>
 8003dc0:	2b70      	cmp	r3, #112	@ 0x70
 8003dc2:	d87b      	bhi.n	8003ebc <HAL_TIM_ConfigClockSource+0x16c>
 8003dc4:	2b60      	cmp	r3, #96	@ 0x60
 8003dc6:	d050      	beq.n	8003e6a <HAL_TIM_ConfigClockSource+0x11a>
 8003dc8:	2b60      	cmp	r3, #96	@ 0x60
 8003dca:	d877      	bhi.n	8003ebc <HAL_TIM_ConfigClockSource+0x16c>
 8003dcc:	2b50      	cmp	r3, #80	@ 0x50
 8003dce:	d03c      	beq.n	8003e4a <HAL_TIM_ConfigClockSource+0xfa>
 8003dd0:	2b50      	cmp	r3, #80	@ 0x50
 8003dd2:	d873      	bhi.n	8003ebc <HAL_TIM_ConfigClockSource+0x16c>
 8003dd4:	2b40      	cmp	r3, #64	@ 0x40
 8003dd6:	d058      	beq.n	8003e8a <HAL_TIM_ConfigClockSource+0x13a>
 8003dd8:	2b40      	cmp	r3, #64	@ 0x40
 8003dda:	d86f      	bhi.n	8003ebc <HAL_TIM_ConfigClockSource+0x16c>
 8003ddc:	2b30      	cmp	r3, #48	@ 0x30
 8003dde:	d064      	beq.n	8003eaa <HAL_TIM_ConfigClockSource+0x15a>
 8003de0:	2b30      	cmp	r3, #48	@ 0x30
 8003de2:	d86b      	bhi.n	8003ebc <HAL_TIM_ConfigClockSource+0x16c>
 8003de4:	2b20      	cmp	r3, #32
 8003de6:	d060      	beq.n	8003eaa <HAL_TIM_ConfigClockSource+0x15a>
 8003de8:	2b20      	cmp	r3, #32
 8003dea:	d867      	bhi.n	8003ebc <HAL_TIM_ConfigClockSource+0x16c>
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d05c      	beq.n	8003eaa <HAL_TIM_ConfigClockSource+0x15a>
 8003df0:	2b10      	cmp	r3, #16
 8003df2:	d05a      	beq.n	8003eaa <HAL_TIM_ConfigClockSource+0x15a>
 8003df4:	e062      	b.n	8003ebc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e06:	f000 fbab 	bl	8004560 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003e18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	68ba      	ldr	r2, [r7, #8]
 8003e20:	609a      	str	r2, [r3, #8]
      break;
 8003e22:	e04f      	b.n	8003ec4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e34:	f000 fb94 	bl	8004560 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	689a      	ldr	r2, [r3, #8]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e46:	609a      	str	r2, [r3, #8]
      break;
 8003e48:	e03c      	b.n	8003ec4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e56:	461a      	mov	r2, r3
 8003e58:	f000 fb0b 	bl	8004472 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2150      	movs	r1, #80	@ 0x50
 8003e62:	4618      	mov	r0, r3
 8003e64:	f000 fb62 	bl	800452c <TIM_ITRx_SetConfig>
      break;
 8003e68:	e02c      	b.n	8003ec4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e76:	461a      	mov	r2, r3
 8003e78:	f000 fb29 	bl	80044ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2160      	movs	r1, #96	@ 0x60
 8003e82:	4618      	mov	r0, r3
 8003e84:	f000 fb52 	bl	800452c <TIM_ITRx_SetConfig>
      break;
 8003e88:	e01c      	b.n	8003ec4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e96:	461a      	mov	r2, r3
 8003e98:	f000 faeb 	bl	8004472 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2140      	movs	r1, #64	@ 0x40
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f000 fb42 	bl	800452c <TIM_ITRx_SetConfig>
      break;
 8003ea8:	e00c      	b.n	8003ec4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	4610      	mov	r0, r2
 8003eb6:	f000 fb39 	bl	800452c <TIM_ITRx_SetConfig>
      break;
 8003eba:	e003      	b.n	8003ec4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	73fb      	strb	r3, [r7, #15]
      break;
 8003ec0:	e000      	b.n	8003ec4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003ec2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3710      	adds	r7, #16
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}

08003ede <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	b082      	sub	sp, #8
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
 8003ee6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d101      	bne.n	8003ef6 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003ef2:	2302      	movs	r3, #2
 8003ef4:	e031      	b.n	8003f5a <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2202      	movs	r2, #2
 8003f02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003f06:	6839      	ldr	r1, [r7, #0]
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f000 fa21 	bl	8004350 <TIM_SlaveTimer_SetConfig>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d009      	beq.n	8003f28 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e018      	b.n	8003f5a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68da      	ldr	r2, [r3, #12]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f36:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	68da      	ldr	r2, [r3, #12]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003f46:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3708      	adds	r7, #8
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
	...

08003f64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b085      	sub	sp, #20
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a2f      	ldr	r2, [pc, #188]	@ (8004034 <TIM_Base_SetConfig+0xd0>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d00b      	beq.n	8003f94 <TIM_Base_SetConfig+0x30>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f82:	d007      	beq.n	8003f94 <TIM_Base_SetConfig+0x30>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a2c      	ldr	r2, [pc, #176]	@ (8004038 <TIM_Base_SetConfig+0xd4>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d003      	beq.n	8003f94 <TIM_Base_SetConfig+0x30>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4a2b      	ldr	r2, [pc, #172]	@ (800403c <TIM_Base_SetConfig+0xd8>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d108      	bne.n	8003fa6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	68fa      	ldr	r2, [r7, #12]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a22      	ldr	r2, [pc, #136]	@ (8004034 <TIM_Base_SetConfig+0xd0>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d00b      	beq.n	8003fc6 <TIM_Base_SetConfig+0x62>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fb4:	d007      	beq.n	8003fc6 <TIM_Base_SetConfig+0x62>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a1f      	ldr	r2, [pc, #124]	@ (8004038 <TIM_Base_SetConfig+0xd4>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d003      	beq.n	8003fc6 <TIM_Base_SetConfig+0x62>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a1e      	ldr	r2, [pc, #120]	@ (800403c <TIM_Base_SetConfig+0xd8>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d108      	bne.n	8003fd8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	68fa      	ldr	r2, [r7, #12]
 8003fea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	689a      	ldr	r2, [r3, #8]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a0d      	ldr	r2, [pc, #52]	@ (8004034 <TIM_Base_SetConfig+0xd0>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d103      	bne.n	800400c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	691a      	ldr	r2, [r3, #16]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b00      	cmp	r3, #0
 800401c:	d005      	beq.n	800402a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	f023 0201 	bic.w	r2, r3, #1
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	611a      	str	r2, [r3, #16]
  }
}
 800402a:	bf00      	nop
 800402c:	3714      	adds	r7, #20
 800402e:	46bd      	mov	sp, r7
 8004030:	bc80      	pop	{r7}
 8004032:	4770      	bx	lr
 8004034:	40012c00 	.word	0x40012c00
 8004038:	40000400 	.word	0x40000400
 800403c:	40000800 	.word	0x40000800

08004040 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004040:	b480      	push	{r7}
 8004042:	b087      	sub	sp, #28
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a1b      	ldr	r3, [r3, #32]
 800404e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6a1b      	ldr	r3, [r3, #32]
 8004054:	f023 0201 	bic.w	r2, r3, #1
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800406e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f023 0303 	bic.w	r3, r3, #3
 8004076:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	4313      	orrs	r3, r2
 8004080:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	f023 0302 	bic.w	r3, r3, #2
 8004088:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	697a      	ldr	r2, [r7, #20]
 8004090:	4313      	orrs	r3, r2
 8004092:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a1c      	ldr	r2, [pc, #112]	@ (8004108 <TIM_OC1_SetConfig+0xc8>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d10c      	bne.n	80040b6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	f023 0308 	bic.w	r3, r3, #8
 80040a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	697a      	ldr	r2, [r7, #20]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	f023 0304 	bic.w	r3, r3, #4
 80040b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a13      	ldr	r2, [pc, #76]	@ (8004108 <TIM_OC1_SetConfig+0xc8>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d111      	bne.n	80040e2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80040c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80040cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	695b      	ldr	r3, [r3, #20]
 80040d2:	693a      	ldr	r2, [r7, #16]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	693a      	ldr	r2, [r7, #16]
 80040de:	4313      	orrs	r3, r2
 80040e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	693a      	ldr	r2, [r7, #16]
 80040e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	685a      	ldr	r2, [r3, #4]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	697a      	ldr	r2, [r7, #20]
 80040fa:	621a      	str	r2, [r3, #32]
}
 80040fc:	bf00      	nop
 80040fe:	371c      	adds	r7, #28
 8004100:	46bd      	mov	sp, r7
 8004102:	bc80      	pop	{r7}
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop
 8004108:	40012c00 	.word	0x40012c00

0800410c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800410c:	b480      	push	{r7}
 800410e:	b087      	sub	sp, #28
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a1b      	ldr	r3, [r3, #32]
 800411a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a1b      	ldr	r3, [r3, #32]
 8004120:	f023 0210 	bic.w	r2, r3, #16
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800413a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004142:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	021b      	lsls	r3, r3, #8
 800414a:	68fa      	ldr	r2, [r7, #12]
 800414c:	4313      	orrs	r3, r2
 800414e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	f023 0320 	bic.w	r3, r3, #32
 8004156:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	011b      	lsls	r3, r3, #4
 800415e:	697a      	ldr	r2, [r7, #20]
 8004160:	4313      	orrs	r3, r2
 8004162:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4a1d      	ldr	r2, [pc, #116]	@ (80041dc <TIM_OC2_SetConfig+0xd0>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d10d      	bne.n	8004188 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004172:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	011b      	lsls	r3, r3, #4
 800417a:	697a      	ldr	r2, [r7, #20]
 800417c:	4313      	orrs	r3, r2
 800417e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004186:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	4a14      	ldr	r2, [pc, #80]	@ (80041dc <TIM_OC2_SetConfig+0xd0>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d113      	bne.n	80041b8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004196:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800419e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	695b      	ldr	r3, [r3, #20]
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	693a      	ldr	r2, [r7, #16]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	699b      	ldr	r3, [r3, #24]
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	693a      	ldr	r2, [r7, #16]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	693a      	ldr	r2, [r7, #16]
 80041bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	68fa      	ldr	r2, [r7, #12]
 80041c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	685a      	ldr	r2, [r3, #4]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	697a      	ldr	r2, [r7, #20]
 80041d0:	621a      	str	r2, [r3, #32]
}
 80041d2:	bf00      	nop
 80041d4:	371c      	adds	r7, #28
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bc80      	pop	{r7}
 80041da:	4770      	bx	lr
 80041dc:	40012c00 	.word	0x40012c00

080041e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b087      	sub	sp, #28
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a1b      	ldr	r3, [r3, #32]
 80041ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6a1b      	ldr	r3, [r3, #32]
 80041f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	69db      	ldr	r3, [r3, #28]
 8004206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800420e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f023 0303 	bic.w	r3, r3, #3
 8004216:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68fa      	ldr	r2, [r7, #12]
 800421e:	4313      	orrs	r3, r2
 8004220:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004228:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	021b      	lsls	r3, r3, #8
 8004230:	697a      	ldr	r2, [r7, #20]
 8004232:	4313      	orrs	r3, r2
 8004234:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a1d      	ldr	r2, [pc, #116]	@ (80042b0 <TIM_OC3_SetConfig+0xd0>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d10d      	bne.n	800425a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004244:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	021b      	lsls	r3, r3, #8
 800424c:	697a      	ldr	r2, [r7, #20]
 800424e:	4313      	orrs	r3, r2
 8004250:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004258:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a14      	ldr	r2, [pc, #80]	@ (80042b0 <TIM_OC3_SetConfig+0xd0>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d113      	bne.n	800428a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004268:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004270:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	695b      	ldr	r3, [r3, #20]
 8004276:	011b      	lsls	r3, r3, #4
 8004278:	693a      	ldr	r2, [r7, #16]
 800427a:	4313      	orrs	r3, r2
 800427c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	011b      	lsls	r3, r3, #4
 8004284:	693a      	ldr	r2, [r7, #16]
 8004286:	4313      	orrs	r3, r2
 8004288:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	693a      	ldr	r2, [r7, #16]
 800428e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	68fa      	ldr	r2, [r7, #12]
 8004294:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	685a      	ldr	r2, [r3, #4]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	697a      	ldr	r2, [r7, #20]
 80042a2:	621a      	str	r2, [r3, #32]
}
 80042a4:	bf00      	nop
 80042a6:	371c      	adds	r7, #28
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bc80      	pop	{r7}
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	40012c00 	.word	0x40012c00

080042b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b087      	sub	sp, #28
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a1b      	ldr	r3, [r3, #32]
 80042c2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a1b      	ldr	r3, [r3, #32]
 80042c8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	69db      	ldr	r3, [r3, #28]
 80042da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	021b      	lsls	r3, r3, #8
 80042f2:	68fa      	ldr	r2, [r7, #12]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80042fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	031b      	lsls	r3, r3, #12
 8004306:	693a      	ldr	r2, [r7, #16]
 8004308:	4313      	orrs	r3, r2
 800430a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4a0f      	ldr	r2, [pc, #60]	@ (800434c <TIM_OC4_SetConfig+0x98>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d109      	bne.n	8004328 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800431a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	695b      	ldr	r3, [r3, #20]
 8004320:	019b      	lsls	r3, r3, #6
 8004322:	697a      	ldr	r2, [r7, #20]
 8004324:	4313      	orrs	r3, r2
 8004326:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	697a      	ldr	r2, [r7, #20]
 800432c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	685a      	ldr	r2, [r3, #4]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	693a      	ldr	r2, [r7, #16]
 8004340:	621a      	str	r2, [r3, #32]
}
 8004342:	bf00      	nop
 8004344:	371c      	adds	r7, #28
 8004346:	46bd      	mov	sp, r7
 8004348:	bc80      	pop	{r7}
 800434a:	4770      	bx	lr
 800434c:	40012c00 	.word	0x40012c00

08004350 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b086      	sub	sp, #24
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800435a:	2300      	movs	r3, #0
 800435c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800436c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	693a      	ldr	r2, [r7, #16]
 8004374:	4313      	orrs	r3, r2
 8004376:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	f023 0307 	bic.w	r3, r3, #7
 800437e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	4313      	orrs	r3, r2
 8004388:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	693a      	ldr	r2, [r7, #16]
 8004390:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	2b70      	cmp	r3, #112	@ 0x70
 8004398:	d01a      	beq.n	80043d0 <TIM_SlaveTimer_SetConfig+0x80>
 800439a:	2b70      	cmp	r3, #112	@ 0x70
 800439c:	d860      	bhi.n	8004460 <TIM_SlaveTimer_SetConfig+0x110>
 800439e:	2b60      	cmp	r3, #96	@ 0x60
 80043a0:	d054      	beq.n	800444c <TIM_SlaveTimer_SetConfig+0xfc>
 80043a2:	2b60      	cmp	r3, #96	@ 0x60
 80043a4:	d85c      	bhi.n	8004460 <TIM_SlaveTimer_SetConfig+0x110>
 80043a6:	2b50      	cmp	r3, #80	@ 0x50
 80043a8:	d046      	beq.n	8004438 <TIM_SlaveTimer_SetConfig+0xe8>
 80043aa:	2b50      	cmp	r3, #80	@ 0x50
 80043ac:	d858      	bhi.n	8004460 <TIM_SlaveTimer_SetConfig+0x110>
 80043ae:	2b40      	cmp	r3, #64	@ 0x40
 80043b0:	d019      	beq.n	80043e6 <TIM_SlaveTimer_SetConfig+0x96>
 80043b2:	2b40      	cmp	r3, #64	@ 0x40
 80043b4:	d854      	bhi.n	8004460 <TIM_SlaveTimer_SetConfig+0x110>
 80043b6:	2b30      	cmp	r3, #48	@ 0x30
 80043b8:	d055      	beq.n	8004466 <TIM_SlaveTimer_SetConfig+0x116>
 80043ba:	2b30      	cmp	r3, #48	@ 0x30
 80043bc:	d850      	bhi.n	8004460 <TIM_SlaveTimer_SetConfig+0x110>
 80043be:	2b20      	cmp	r3, #32
 80043c0:	d051      	beq.n	8004466 <TIM_SlaveTimer_SetConfig+0x116>
 80043c2:	2b20      	cmp	r3, #32
 80043c4:	d84c      	bhi.n	8004460 <TIM_SlaveTimer_SetConfig+0x110>
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d04d      	beq.n	8004466 <TIM_SlaveTimer_SetConfig+0x116>
 80043ca:	2b10      	cmp	r3, #16
 80043cc:	d04b      	beq.n	8004466 <TIM_SlaveTimer_SetConfig+0x116>
 80043ce:	e047      	b.n	8004460 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80043e0:	f000 f8be 	bl	8004560 <TIM_ETR_SetConfig>
      break;
 80043e4:	e040      	b.n	8004468 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2b05      	cmp	r3, #5
 80043ec:	d101      	bne.n	80043f2 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e03b      	b.n	800446a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	6a1b      	ldr	r3, [r3, #32]
 80043f8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	6a1a      	ldr	r2, [r3, #32]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f022 0201 	bic.w	r2, r2, #1
 8004408:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	699b      	ldr	r3, [r3, #24]
 8004410:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004418:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	011b      	lsls	r3, r3, #4
 8004420:	68ba      	ldr	r2, [r7, #8]
 8004422:	4313      	orrs	r3, r2
 8004424:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68ba      	ldr	r2, [r7, #8]
 800442c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	621a      	str	r2, [r3, #32]
      break;
 8004436:	e017      	b.n	8004468 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004444:	461a      	mov	r2, r3
 8004446:	f000 f814 	bl	8004472 <TIM_TI1_ConfigInputStage>
      break;
 800444a:	e00d      	b.n	8004468 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004458:	461a      	mov	r2, r3
 800445a:	f000 f838 	bl	80044ce <TIM_TI2_ConfigInputStage>
      break;
 800445e:	e003      	b.n	8004468 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	75fb      	strb	r3, [r7, #23]
      break;
 8004464:	e000      	b.n	8004468 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8004466:	bf00      	nop
  }

  return status;
 8004468:	7dfb      	ldrb	r3, [r7, #23]
}
 800446a:	4618      	mov	r0, r3
 800446c:	3718      	adds	r7, #24
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}

08004472 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004472:	b480      	push	{r7}
 8004474:	b087      	sub	sp, #28
 8004476:	af00      	add	r7, sp, #0
 8004478:	60f8      	str	r0, [r7, #12]
 800447a:	60b9      	str	r1, [r7, #8]
 800447c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6a1b      	ldr	r3, [r3, #32]
 8004482:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6a1b      	ldr	r3, [r3, #32]
 8004488:	f023 0201 	bic.w	r2, r3, #1
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	699b      	ldr	r3, [r3, #24]
 8004494:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800449c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	011b      	lsls	r3, r3, #4
 80044a2:	693a      	ldr	r2, [r7, #16]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	f023 030a 	bic.w	r3, r3, #10
 80044ae:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044b0:	697a      	ldr	r2, [r7, #20]
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	693a      	ldr	r2, [r7, #16]
 80044bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	697a      	ldr	r2, [r7, #20]
 80044c2:	621a      	str	r2, [r3, #32]
}
 80044c4:	bf00      	nop
 80044c6:	371c      	adds	r7, #28
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bc80      	pop	{r7}
 80044cc:	4770      	bx	lr

080044ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044ce:	b480      	push	{r7}
 80044d0:	b087      	sub	sp, #28
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	60f8      	str	r0, [r7, #12]
 80044d6:	60b9      	str	r1, [r7, #8]
 80044d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6a1b      	ldr	r3, [r3, #32]
 80044de:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6a1b      	ldr	r3, [r3, #32]
 80044e4:	f023 0210 	bic.w	r2, r3, #16
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	699b      	ldr	r3, [r3, #24]
 80044f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80044f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	031b      	lsls	r3, r3, #12
 80044fe:	693a      	ldr	r2, [r7, #16]
 8004500:	4313      	orrs	r3, r2
 8004502:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800450a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	011b      	lsls	r3, r3, #4
 8004510:	697a      	ldr	r2, [r7, #20]
 8004512:	4313      	orrs	r3, r2
 8004514:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	693a      	ldr	r2, [r7, #16]
 800451a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	697a      	ldr	r2, [r7, #20]
 8004520:	621a      	str	r2, [r3, #32]
}
 8004522:	bf00      	nop
 8004524:	371c      	adds	r7, #28
 8004526:	46bd      	mov	sp, r7
 8004528:	bc80      	pop	{r7}
 800452a:	4770      	bx	lr

0800452c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004542:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004544:	683a      	ldr	r2, [r7, #0]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	4313      	orrs	r3, r2
 800454a:	f043 0307 	orr.w	r3, r3, #7
 800454e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	609a      	str	r2, [r3, #8]
}
 8004556:	bf00      	nop
 8004558:	3714      	adds	r7, #20
 800455a:	46bd      	mov	sp, r7
 800455c:	bc80      	pop	{r7}
 800455e:	4770      	bx	lr

08004560 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004560:	b480      	push	{r7}
 8004562:	b087      	sub	sp, #28
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	607a      	str	r2, [r7, #4]
 800456c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800457a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	021a      	lsls	r2, r3, #8
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	431a      	orrs	r2, r3
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	4313      	orrs	r3, r2
 8004588:	697a      	ldr	r2, [r7, #20]
 800458a:	4313      	orrs	r3, r2
 800458c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	697a      	ldr	r2, [r7, #20]
 8004592:	609a      	str	r2, [r3, #8]
}
 8004594:	bf00      	nop
 8004596:	371c      	adds	r7, #28
 8004598:	46bd      	mov	sp, r7
 800459a:	bc80      	pop	{r7}
 800459c:	4770      	bx	lr
	...

080045a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b085      	sub	sp, #20
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d101      	bne.n	80045b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045b4:	2302      	movs	r3, #2
 80045b6:	e046      	b.n	8004646 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2202      	movs	r2, #2
 80045c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	68fa      	ldr	r2, [r7, #12]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a16      	ldr	r2, [pc, #88]	@ (8004650 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d00e      	beq.n	800461a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004604:	d009      	beq.n	800461a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a12      	ldr	r2, [pc, #72]	@ (8004654 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d004      	beq.n	800461a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a10      	ldr	r2, [pc, #64]	@ (8004658 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d10c      	bne.n	8004634 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004620:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	68ba      	ldr	r2, [r7, #8]
 8004628:	4313      	orrs	r3, r2
 800462a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68ba      	ldr	r2, [r7, #8]
 8004632:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3714      	adds	r7, #20
 800464a:	46bd      	mov	sp, r7
 800464c:	bc80      	pop	{r7}
 800464e:	4770      	bx	lr
 8004650:	40012c00 	.word	0x40012c00
 8004654:	40000400 	.word	0x40000400
 8004658:	40000800 	.word	0x40000800

0800465c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800465c:	b480      	push	{r7}
 800465e:	b085      	sub	sp, #20
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004666:	2300      	movs	r3, #0
 8004668:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004670:	2b01      	cmp	r3, #1
 8004672:	d101      	bne.n	8004678 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004674:	2302      	movs	r3, #2
 8004676:	e03d      	b.n	80046f4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	4313      	orrs	r3, r2
 800468c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	4313      	orrs	r3, r2
 800469a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	695b      	ldr	r3, [r3, #20]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	69db      	ldr	r3, [r3, #28]
 80046de:	4313      	orrs	r3, r2
 80046e0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68fa      	ldr	r2, [r7, #12]
 80046e8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80046f2:	2300      	movs	r3, #0
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3714      	adds	r7, #20
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bc80      	pop	{r7}
 80046fc:	4770      	bx	lr

080046fe <memset>:
 80046fe:	4603      	mov	r3, r0
 8004700:	4402      	add	r2, r0
 8004702:	4293      	cmp	r3, r2
 8004704:	d100      	bne.n	8004708 <memset+0xa>
 8004706:	4770      	bx	lr
 8004708:	f803 1b01 	strb.w	r1, [r3], #1
 800470c:	e7f9      	b.n	8004702 <memset+0x4>

0800470e <strncpy>:
 800470e:	4603      	mov	r3, r0
 8004710:	b510      	push	{r4, lr}
 8004712:	3901      	subs	r1, #1
 8004714:	b132      	cbz	r2, 8004724 <strncpy+0x16>
 8004716:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800471a:	3a01      	subs	r2, #1
 800471c:	f803 4b01 	strb.w	r4, [r3], #1
 8004720:	2c00      	cmp	r4, #0
 8004722:	d1f7      	bne.n	8004714 <strncpy+0x6>
 8004724:	2100      	movs	r1, #0
 8004726:	441a      	add	r2, r3
 8004728:	4293      	cmp	r3, r2
 800472a:	d100      	bne.n	800472e <strncpy+0x20>
 800472c:	bd10      	pop	{r4, pc}
 800472e:	f803 1b01 	strb.w	r1, [r3], #1
 8004732:	e7f9      	b.n	8004728 <strncpy+0x1a>

08004734 <__errno>:
 8004734:	4b01      	ldr	r3, [pc, #4]	@ (800473c <__errno+0x8>)
 8004736:	6818      	ldr	r0, [r3, #0]
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	2000000c 	.word	0x2000000c

08004740 <__libc_init_array>:
 8004740:	b570      	push	{r4, r5, r6, lr}
 8004742:	2600      	movs	r6, #0
 8004744:	4d0c      	ldr	r5, [pc, #48]	@ (8004778 <__libc_init_array+0x38>)
 8004746:	4c0d      	ldr	r4, [pc, #52]	@ (800477c <__libc_init_array+0x3c>)
 8004748:	1b64      	subs	r4, r4, r5
 800474a:	10a4      	asrs	r4, r4, #2
 800474c:	42a6      	cmp	r6, r4
 800474e:	d109      	bne.n	8004764 <__libc_init_array+0x24>
 8004750:	f001 fa84 	bl	8005c5c <_init>
 8004754:	2600      	movs	r6, #0
 8004756:	4d0a      	ldr	r5, [pc, #40]	@ (8004780 <__libc_init_array+0x40>)
 8004758:	4c0a      	ldr	r4, [pc, #40]	@ (8004784 <__libc_init_array+0x44>)
 800475a:	1b64      	subs	r4, r4, r5
 800475c:	10a4      	asrs	r4, r4, #2
 800475e:	42a6      	cmp	r6, r4
 8004760:	d105      	bne.n	800476e <__libc_init_array+0x2e>
 8004762:	bd70      	pop	{r4, r5, r6, pc}
 8004764:	f855 3b04 	ldr.w	r3, [r5], #4
 8004768:	4798      	blx	r3
 800476a:	3601      	adds	r6, #1
 800476c:	e7ee      	b.n	800474c <__libc_init_array+0xc>
 800476e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004772:	4798      	blx	r3
 8004774:	3601      	adds	r6, #1
 8004776:	e7f2      	b.n	800475e <__libc_init_array+0x1e>
 8004778:	080060a8 	.word	0x080060a8
 800477c:	080060a8 	.word	0x080060a8
 8004780:	080060a8 	.word	0x080060a8
 8004784:	080060ac 	.word	0x080060ac

08004788 <memcpy>:
 8004788:	440a      	add	r2, r1
 800478a:	4291      	cmp	r1, r2
 800478c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004790:	d100      	bne.n	8004794 <memcpy+0xc>
 8004792:	4770      	bx	lr
 8004794:	b510      	push	{r4, lr}
 8004796:	f811 4b01 	ldrb.w	r4, [r1], #1
 800479a:	4291      	cmp	r1, r2
 800479c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80047a0:	d1f9      	bne.n	8004796 <memcpy+0xe>
 80047a2:	bd10      	pop	{r4, pc}

080047a4 <powf>:
 80047a4:	b570      	push	{r4, r5, r6, lr}
 80047a6:	460c      	mov	r4, r1
 80047a8:	4606      	mov	r6, r0
 80047aa:	f000 fa43 	bl	8004c34 <__ieee754_powf>
 80047ae:	4621      	mov	r1, r4
 80047b0:	4605      	mov	r5, r0
 80047b2:	4620      	mov	r0, r4
 80047b4:	f7fb ffa8 	bl	8000708 <__aeabi_fcmpun>
 80047b8:	bb68      	cbnz	r0, 8004816 <powf+0x72>
 80047ba:	2100      	movs	r1, #0
 80047bc:	4630      	mov	r0, r6
 80047be:	f7fb ff71 	bl	80006a4 <__aeabi_fcmpeq>
 80047c2:	b190      	cbz	r0, 80047ea <powf+0x46>
 80047c4:	2100      	movs	r1, #0
 80047c6:	4620      	mov	r0, r4
 80047c8:	f7fb ff6c 	bl	80006a4 <__aeabi_fcmpeq>
 80047cc:	2800      	cmp	r0, #0
 80047ce:	d133      	bne.n	8004838 <powf+0x94>
 80047d0:	4620      	mov	r0, r4
 80047d2:	f000 f8c1 	bl	8004958 <finitef>
 80047d6:	b1f0      	cbz	r0, 8004816 <powf+0x72>
 80047d8:	2100      	movs	r1, #0
 80047da:	4620      	mov	r0, r4
 80047dc:	f7fb ff6c 	bl	80006b8 <__aeabi_fcmplt>
 80047e0:	b1c8      	cbz	r0, 8004816 <powf+0x72>
 80047e2:	f7ff ffa7 	bl	8004734 <__errno>
 80047e6:	2322      	movs	r3, #34	@ 0x22
 80047e8:	e014      	b.n	8004814 <powf+0x70>
 80047ea:	4628      	mov	r0, r5
 80047ec:	f000 f8b4 	bl	8004958 <finitef>
 80047f0:	b998      	cbnz	r0, 800481a <powf+0x76>
 80047f2:	4630      	mov	r0, r6
 80047f4:	f000 f8b0 	bl	8004958 <finitef>
 80047f8:	b178      	cbz	r0, 800481a <powf+0x76>
 80047fa:	4620      	mov	r0, r4
 80047fc:	f000 f8ac 	bl	8004958 <finitef>
 8004800:	b158      	cbz	r0, 800481a <powf+0x76>
 8004802:	4629      	mov	r1, r5
 8004804:	4628      	mov	r0, r5
 8004806:	f7fb ff7f 	bl	8000708 <__aeabi_fcmpun>
 800480a:	2800      	cmp	r0, #0
 800480c:	d0e9      	beq.n	80047e2 <powf+0x3e>
 800480e:	f7ff ff91 	bl	8004734 <__errno>
 8004812:	2321      	movs	r3, #33	@ 0x21
 8004814:	6003      	str	r3, [r0, #0]
 8004816:	4628      	mov	r0, r5
 8004818:	bd70      	pop	{r4, r5, r6, pc}
 800481a:	2100      	movs	r1, #0
 800481c:	4628      	mov	r0, r5
 800481e:	f7fb ff41 	bl	80006a4 <__aeabi_fcmpeq>
 8004822:	2800      	cmp	r0, #0
 8004824:	d0f7      	beq.n	8004816 <powf+0x72>
 8004826:	4630      	mov	r0, r6
 8004828:	f000 f896 	bl	8004958 <finitef>
 800482c:	2800      	cmp	r0, #0
 800482e:	d0f2      	beq.n	8004816 <powf+0x72>
 8004830:	4620      	mov	r0, r4
 8004832:	f000 f891 	bl	8004958 <finitef>
 8004836:	e7d3      	b.n	80047e0 <powf+0x3c>
 8004838:	f04f 557e 	mov.w	r5, #1065353216	@ 0x3f800000
 800483c:	e7eb      	b.n	8004816 <powf+0x72>

0800483e <sqrtf>:
 800483e:	b538      	push	{r3, r4, r5, lr}
 8004840:	4605      	mov	r5, r0
 8004842:	f000 f891 	bl	8004968 <__ieee754_sqrtf>
 8004846:	4629      	mov	r1, r5
 8004848:	4604      	mov	r4, r0
 800484a:	4628      	mov	r0, r5
 800484c:	f7fb ff5c 	bl	8000708 <__aeabi_fcmpun>
 8004850:	b968      	cbnz	r0, 800486e <sqrtf+0x30>
 8004852:	2100      	movs	r1, #0
 8004854:	4628      	mov	r0, r5
 8004856:	f7fb ff2f 	bl	80006b8 <__aeabi_fcmplt>
 800485a:	b140      	cbz	r0, 800486e <sqrtf+0x30>
 800485c:	f7ff ff6a 	bl	8004734 <__errno>
 8004860:	2321      	movs	r3, #33	@ 0x21
 8004862:	2100      	movs	r1, #0
 8004864:	6003      	str	r3, [r0, #0]
 8004866:	4608      	mov	r0, r1
 8004868:	f7fb fe3c 	bl	80004e4 <__aeabi_fdiv>
 800486c:	4604      	mov	r4, r0
 800486e:	4620      	mov	r0, r4
 8004870:	bd38      	pop	{r3, r4, r5, pc}
	...

08004874 <cosf>:
 8004874:	b507      	push	{r0, r1, r2, lr}
 8004876:	4a1a      	ldr	r2, [pc, #104]	@ (80048e0 <cosf+0x6c>)
 8004878:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800487c:	4293      	cmp	r3, r2
 800487e:	4601      	mov	r1, r0
 8004880:	d805      	bhi.n	800488e <cosf+0x1a>
 8004882:	2100      	movs	r1, #0
 8004884:	b003      	add	sp, #12
 8004886:	f85d eb04 	ldr.w	lr, [sp], #4
 800488a:	f000 b8dd 	b.w	8004a48 <__kernel_cosf>
 800488e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8004892:	d304      	bcc.n	800489e <cosf+0x2a>
 8004894:	f7fb fc68 	bl	8000168 <__aeabi_fsub>
 8004898:	b003      	add	sp, #12
 800489a:	f85d fb04 	ldr.w	pc, [sp], #4
 800489e:	4669      	mov	r1, sp
 80048a0:	f000 fd28 	bl	80052f4 <__ieee754_rem_pio2f>
 80048a4:	f000 0203 	and.w	r2, r0, #3
 80048a8:	2a01      	cmp	r2, #1
 80048aa:	d007      	beq.n	80048bc <cosf+0x48>
 80048ac:	2a02      	cmp	r2, #2
 80048ae:	d00c      	beq.n	80048ca <cosf+0x56>
 80048b0:	b982      	cbnz	r2, 80048d4 <cosf+0x60>
 80048b2:	9901      	ldr	r1, [sp, #4]
 80048b4:	9800      	ldr	r0, [sp, #0]
 80048b6:	f000 f8c7 	bl	8004a48 <__kernel_cosf>
 80048ba:	e7ed      	b.n	8004898 <cosf+0x24>
 80048bc:	9901      	ldr	r1, [sp, #4]
 80048be:	9800      	ldr	r0, [sp, #0]
 80048c0:	f000 f942 	bl	8004b48 <__kernel_sinf>
 80048c4:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 80048c8:	e7e6      	b.n	8004898 <cosf+0x24>
 80048ca:	9901      	ldr	r1, [sp, #4]
 80048cc:	9800      	ldr	r0, [sp, #0]
 80048ce:	f000 f8bb 	bl	8004a48 <__kernel_cosf>
 80048d2:	e7f7      	b.n	80048c4 <cosf+0x50>
 80048d4:	2201      	movs	r2, #1
 80048d6:	9901      	ldr	r1, [sp, #4]
 80048d8:	9800      	ldr	r0, [sp, #0]
 80048da:	f000 f935 	bl	8004b48 <__kernel_sinf>
 80048de:	e7db      	b.n	8004898 <cosf+0x24>
 80048e0:	3f490fd8 	.word	0x3f490fd8

080048e4 <sinf>:
 80048e4:	b507      	push	{r0, r1, r2, lr}
 80048e6:	4a1b      	ldr	r2, [pc, #108]	@ (8004954 <sinf+0x70>)
 80048e8:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 80048ec:	4293      	cmp	r3, r2
 80048ee:	4601      	mov	r1, r0
 80048f0:	d806      	bhi.n	8004900 <sinf+0x1c>
 80048f2:	2200      	movs	r2, #0
 80048f4:	2100      	movs	r1, #0
 80048f6:	b003      	add	sp, #12
 80048f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80048fc:	f000 b924 	b.w	8004b48 <__kernel_sinf>
 8004900:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8004904:	d304      	bcc.n	8004910 <sinf+0x2c>
 8004906:	f7fb fc2f 	bl	8000168 <__aeabi_fsub>
 800490a:	b003      	add	sp, #12
 800490c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004910:	4669      	mov	r1, sp
 8004912:	f000 fcef 	bl	80052f4 <__ieee754_rem_pio2f>
 8004916:	f000 0003 	and.w	r0, r0, #3
 800491a:	2801      	cmp	r0, #1
 800491c:	d008      	beq.n	8004930 <sinf+0x4c>
 800491e:	2802      	cmp	r0, #2
 8004920:	d00b      	beq.n	800493a <sinf+0x56>
 8004922:	b990      	cbnz	r0, 800494a <sinf+0x66>
 8004924:	2201      	movs	r2, #1
 8004926:	9901      	ldr	r1, [sp, #4]
 8004928:	9800      	ldr	r0, [sp, #0]
 800492a:	f000 f90d 	bl	8004b48 <__kernel_sinf>
 800492e:	e7ec      	b.n	800490a <sinf+0x26>
 8004930:	9901      	ldr	r1, [sp, #4]
 8004932:	9800      	ldr	r0, [sp, #0]
 8004934:	f000 f888 	bl	8004a48 <__kernel_cosf>
 8004938:	e7e7      	b.n	800490a <sinf+0x26>
 800493a:	2201      	movs	r2, #1
 800493c:	9901      	ldr	r1, [sp, #4]
 800493e:	9800      	ldr	r0, [sp, #0]
 8004940:	f000 f902 	bl	8004b48 <__kernel_sinf>
 8004944:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8004948:	e7df      	b.n	800490a <sinf+0x26>
 800494a:	9901      	ldr	r1, [sp, #4]
 800494c:	9800      	ldr	r0, [sp, #0]
 800494e:	f000 f87b 	bl	8004a48 <__kernel_cosf>
 8004952:	e7f7      	b.n	8004944 <sinf+0x60>
 8004954:	3f490fd8 	.word	0x3f490fd8

08004958 <finitef>:
 8004958:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800495c:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8004960:	bfac      	ite	ge
 8004962:	2000      	movge	r0, #0
 8004964:	2001      	movlt	r0, #1
 8004966:	4770      	bx	lr

08004968 <__ieee754_sqrtf>:
 8004968:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 800496c:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8004970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004974:	4603      	mov	r3, r0
 8004976:	4604      	mov	r4, r0
 8004978:	d30a      	bcc.n	8004990 <__ieee754_sqrtf+0x28>
 800497a:	4601      	mov	r1, r0
 800497c:	f7fb fcfe 	bl	800037c <__aeabi_fmul>
 8004980:	4601      	mov	r1, r0
 8004982:	4620      	mov	r0, r4
 8004984:	f7fb fbf2 	bl	800016c <__addsf3>
 8004988:	4604      	mov	r4, r0
 800498a:	4620      	mov	r0, r4
 800498c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004990:	2a00      	cmp	r2, #0
 8004992:	d0fa      	beq.n	800498a <__ieee754_sqrtf+0x22>
 8004994:	2800      	cmp	r0, #0
 8004996:	da06      	bge.n	80049a6 <__ieee754_sqrtf+0x3e>
 8004998:	4601      	mov	r1, r0
 800499a:	f7fb fbe5 	bl	8000168 <__aeabi_fsub>
 800499e:	4601      	mov	r1, r0
 80049a0:	f7fb fda0 	bl	80004e4 <__aeabi_fdiv>
 80049a4:	e7f0      	b.n	8004988 <__ieee754_sqrtf+0x20>
 80049a6:	f010 41ff 	ands.w	r1, r0, #2139095040	@ 0x7f800000
 80049aa:	d03c      	beq.n	8004a26 <__ieee754_sqrtf+0xbe>
 80049ac:	15c2      	asrs	r2, r0, #23
 80049ae:	2400      	movs	r4, #0
 80049b0:	2019      	movs	r0, #25
 80049b2:	4626      	mov	r6, r4
 80049b4:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 80049b8:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80049bc:	f1a2 057f 	sub.w	r5, r2, #127	@ 0x7f
 80049c0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80049c4:	07d2      	lsls	r2, r2, #31
 80049c6:	bf58      	it	pl
 80049c8:	005b      	lslpl	r3, r3, #1
 80049ca:	106d      	asrs	r5, r5, #1
 80049cc:	005b      	lsls	r3, r3, #1
 80049ce:	1872      	adds	r2, r6, r1
 80049d0:	429a      	cmp	r2, r3
 80049d2:	bfcf      	iteee	gt
 80049d4:	461a      	movgt	r2, r3
 80049d6:	1856      	addle	r6, r2, r1
 80049d8:	1864      	addle	r4, r4, r1
 80049da:	1a9a      	suble	r2, r3, r2
 80049dc:	3801      	subs	r0, #1
 80049de:	ea4f 0342 	mov.w	r3, r2, lsl #1
 80049e2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80049e6:	d1f2      	bne.n	80049ce <__ieee754_sqrtf+0x66>
 80049e8:	b1ba      	cbz	r2, 8004a1a <__ieee754_sqrtf+0xb2>
 80049ea:	4e15      	ldr	r6, [pc, #84]	@ (8004a40 <__ieee754_sqrtf+0xd8>)
 80049ec:	4f15      	ldr	r7, [pc, #84]	@ (8004a44 <__ieee754_sqrtf+0xdc>)
 80049ee:	6830      	ldr	r0, [r6, #0]
 80049f0:	6839      	ldr	r1, [r7, #0]
 80049f2:	f7fb fbb9 	bl	8000168 <__aeabi_fsub>
 80049f6:	f8d6 8000 	ldr.w	r8, [r6]
 80049fa:	4601      	mov	r1, r0
 80049fc:	4640      	mov	r0, r8
 80049fe:	f7fb fe65 	bl	80006cc <__aeabi_fcmple>
 8004a02:	b150      	cbz	r0, 8004a1a <__ieee754_sqrtf+0xb2>
 8004a04:	6830      	ldr	r0, [r6, #0]
 8004a06:	6839      	ldr	r1, [r7, #0]
 8004a08:	f7fb fbb0 	bl	800016c <__addsf3>
 8004a0c:	6836      	ldr	r6, [r6, #0]
 8004a0e:	4601      	mov	r1, r0
 8004a10:	4630      	mov	r0, r6
 8004a12:	f7fb fe51 	bl	80006b8 <__aeabi_fcmplt>
 8004a16:	b170      	cbz	r0, 8004a36 <__ieee754_sqrtf+0xce>
 8004a18:	3402      	adds	r4, #2
 8004a1a:	1064      	asrs	r4, r4, #1
 8004a1c:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 8004a20:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 8004a24:	e7b1      	b.n	800498a <__ieee754_sqrtf+0x22>
 8004a26:	005b      	lsls	r3, r3, #1
 8004a28:	0218      	lsls	r0, r3, #8
 8004a2a:	460a      	mov	r2, r1
 8004a2c:	f101 0101 	add.w	r1, r1, #1
 8004a30:	d5f9      	bpl.n	8004a26 <__ieee754_sqrtf+0xbe>
 8004a32:	4252      	negs	r2, r2
 8004a34:	e7bb      	b.n	80049ae <__ieee754_sqrtf+0x46>
 8004a36:	3401      	adds	r4, #1
 8004a38:	f024 0401 	bic.w	r4, r4, #1
 8004a3c:	e7ed      	b.n	8004a1a <__ieee754_sqrtf+0xb2>
 8004a3e:	bf00      	nop
 8004a40:	08005cb4 	.word	0x08005cb4
 8004a44:	08005cb0 	.word	0x08005cb0

08004a48 <__kernel_cosf>:
 8004a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a4c:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 8004a50:	f1b5 5f48 	cmp.w	r5, #838860800	@ 0x32000000
 8004a54:	4606      	mov	r6, r0
 8004a56:	4688      	mov	r8, r1
 8004a58:	d203      	bcs.n	8004a62 <__kernel_cosf+0x1a>
 8004a5a:	f7fb fe6b 	bl	8000734 <__aeabi_f2iz>
 8004a5e:	2800      	cmp	r0, #0
 8004a60:	d05c      	beq.n	8004b1c <__kernel_cosf+0xd4>
 8004a62:	4631      	mov	r1, r6
 8004a64:	4630      	mov	r0, r6
 8004a66:	f7fb fc89 	bl	800037c <__aeabi_fmul>
 8004a6a:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8004a6e:	4604      	mov	r4, r0
 8004a70:	f7fb fc84 	bl	800037c <__aeabi_fmul>
 8004a74:	492b      	ldr	r1, [pc, #172]	@ (8004b24 <__kernel_cosf+0xdc>)
 8004a76:	4607      	mov	r7, r0
 8004a78:	4620      	mov	r0, r4
 8004a7a:	f7fb fc7f 	bl	800037c <__aeabi_fmul>
 8004a7e:	492a      	ldr	r1, [pc, #168]	@ (8004b28 <__kernel_cosf+0xe0>)
 8004a80:	f7fb fb74 	bl	800016c <__addsf3>
 8004a84:	4621      	mov	r1, r4
 8004a86:	f7fb fc79 	bl	800037c <__aeabi_fmul>
 8004a8a:	4928      	ldr	r1, [pc, #160]	@ (8004b2c <__kernel_cosf+0xe4>)
 8004a8c:	f7fb fb6c 	bl	8000168 <__aeabi_fsub>
 8004a90:	4621      	mov	r1, r4
 8004a92:	f7fb fc73 	bl	800037c <__aeabi_fmul>
 8004a96:	4926      	ldr	r1, [pc, #152]	@ (8004b30 <__kernel_cosf+0xe8>)
 8004a98:	f7fb fb68 	bl	800016c <__addsf3>
 8004a9c:	4621      	mov	r1, r4
 8004a9e:	f7fb fc6d 	bl	800037c <__aeabi_fmul>
 8004aa2:	4924      	ldr	r1, [pc, #144]	@ (8004b34 <__kernel_cosf+0xec>)
 8004aa4:	f7fb fb60 	bl	8000168 <__aeabi_fsub>
 8004aa8:	4621      	mov	r1, r4
 8004aaa:	f7fb fc67 	bl	800037c <__aeabi_fmul>
 8004aae:	4922      	ldr	r1, [pc, #136]	@ (8004b38 <__kernel_cosf+0xf0>)
 8004ab0:	f7fb fb5c 	bl	800016c <__addsf3>
 8004ab4:	4621      	mov	r1, r4
 8004ab6:	f7fb fc61 	bl	800037c <__aeabi_fmul>
 8004aba:	4621      	mov	r1, r4
 8004abc:	f7fb fc5e 	bl	800037c <__aeabi_fmul>
 8004ac0:	4641      	mov	r1, r8
 8004ac2:	4604      	mov	r4, r0
 8004ac4:	4630      	mov	r0, r6
 8004ac6:	f7fb fc59 	bl	800037c <__aeabi_fmul>
 8004aca:	4601      	mov	r1, r0
 8004acc:	4620      	mov	r0, r4
 8004ace:	f7fb fb4b 	bl	8000168 <__aeabi_fsub>
 8004ad2:	4b1a      	ldr	r3, [pc, #104]	@ (8004b3c <__kernel_cosf+0xf4>)
 8004ad4:	4604      	mov	r4, r0
 8004ad6:	429d      	cmp	r5, r3
 8004ad8:	d80a      	bhi.n	8004af0 <__kernel_cosf+0xa8>
 8004ada:	4601      	mov	r1, r0
 8004adc:	4638      	mov	r0, r7
 8004ade:	f7fb fb43 	bl	8000168 <__aeabi_fsub>
 8004ae2:	4601      	mov	r1, r0
 8004ae4:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8004ae8:	f7fb fb3e 	bl	8000168 <__aeabi_fsub>
 8004aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004af0:	4b13      	ldr	r3, [pc, #76]	@ (8004b40 <__kernel_cosf+0xf8>)
 8004af2:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8004af6:	429d      	cmp	r5, r3
 8004af8:	bf8c      	ite	hi
 8004afa:	4d12      	ldrhi	r5, [pc, #72]	@ (8004b44 <__kernel_cosf+0xfc>)
 8004afc:	f105 457f 	addls.w	r5, r5, #4278190080	@ 0xff000000
 8004b00:	4629      	mov	r1, r5
 8004b02:	f7fb fb31 	bl	8000168 <__aeabi_fsub>
 8004b06:	4629      	mov	r1, r5
 8004b08:	4606      	mov	r6, r0
 8004b0a:	4638      	mov	r0, r7
 8004b0c:	f7fb fb2c 	bl	8000168 <__aeabi_fsub>
 8004b10:	4621      	mov	r1, r4
 8004b12:	f7fb fb29 	bl	8000168 <__aeabi_fsub>
 8004b16:	4601      	mov	r1, r0
 8004b18:	4630      	mov	r0, r6
 8004b1a:	e7e5      	b.n	8004ae8 <__kernel_cosf+0xa0>
 8004b1c:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8004b20:	e7e4      	b.n	8004aec <__kernel_cosf+0xa4>
 8004b22:	bf00      	nop
 8004b24:	ad47d74e 	.word	0xad47d74e
 8004b28:	310f74f6 	.word	0x310f74f6
 8004b2c:	3493f27c 	.word	0x3493f27c
 8004b30:	37d00d01 	.word	0x37d00d01
 8004b34:	3ab60b61 	.word	0x3ab60b61
 8004b38:	3d2aaaab 	.word	0x3d2aaaab
 8004b3c:	3e999999 	.word	0x3e999999
 8004b40:	3f480000 	.word	0x3f480000
 8004b44:	3e900000 	.word	0x3e900000

08004b48 <__kernel_sinf>:
 8004b48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b4c:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8004b50:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8004b54:	4604      	mov	r4, r0
 8004b56:	460f      	mov	r7, r1
 8004b58:	4691      	mov	r9, r2
 8004b5a:	d203      	bcs.n	8004b64 <__kernel_sinf+0x1c>
 8004b5c:	f7fb fdea 	bl	8000734 <__aeabi_f2iz>
 8004b60:	2800      	cmp	r0, #0
 8004b62:	d035      	beq.n	8004bd0 <__kernel_sinf+0x88>
 8004b64:	4621      	mov	r1, r4
 8004b66:	4620      	mov	r0, r4
 8004b68:	f7fb fc08 	bl	800037c <__aeabi_fmul>
 8004b6c:	4605      	mov	r5, r0
 8004b6e:	4601      	mov	r1, r0
 8004b70:	4620      	mov	r0, r4
 8004b72:	f7fb fc03 	bl	800037c <__aeabi_fmul>
 8004b76:	4929      	ldr	r1, [pc, #164]	@ (8004c1c <__kernel_sinf+0xd4>)
 8004b78:	4606      	mov	r6, r0
 8004b7a:	4628      	mov	r0, r5
 8004b7c:	f7fb fbfe 	bl	800037c <__aeabi_fmul>
 8004b80:	4927      	ldr	r1, [pc, #156]	@ (8004c20 <__kernel_sinf+0xd8>)
 8004b82:	f7fb faf1 	bl	8000168 <__aeabi_fsub>
 8004b86:	4629      	mov	r1, r5
 8004b88:	f7fb fbf8 	bl	800037c <__aeabi_fmul>
 8004b8c:	4925      	ldr	r1, [pc, #148]	@ (8004c24 <__kernel_sinf+0xdc>)
 8004b8e:	f7fb faed 	bl	800016c <__addsf3>
 8004b92:	4629      	mov	r1, r5
 8004b94:	f7fb fbf2 	bl	800037c <__aeabi_fmul>
 8004b98:	4923      	ldr	r1, [pc, #140]	@ (8004c28 <__kernel_sinf+0xe0>)
 8004b9a:	f7fb fae5 	bl	8000168 <__aeabi_fsub>
 8004b9e:	4629      	mov	r1, r5
 8004ba0:	f7fb fbec 	bl	800037c <__aeabi_fmul>
 8004ba4:	4921      	ldr	r1, [pc, #132]	@ (8004c2c <__kernel_sinf+0xe4>)
 8004ba6:	f7fb fae1 	bl	800016c <__addsf3>
 8004baa:	4680      	mov	r8, r0
 8004bac:	f1b9 0f00 	cmp.w	r9, #0
 8004bb0:	d111      	bne.n	8004bd6 <__kernel_sinf+0x8e>
 8004bb2:	4601      	mov	r1, r0
 8004bb4:	4628      	mov	r0, r5
 8004bb6:	f7fb fbe1 	bl	800037c <__aeabi_fmul>
 8004bba:	491d      	ldr	r1, [pc, #116]	@ (8004c30 <__kernel_sinf+0xe8>)
 8004bbc:	f7fb fad4 	bl	8000168 <__aeabi_fsub>
 8004bc0:	4631      	mov	r1, r6
 8004bc2:	f7fb fbdb 	bl	800037c <__aeabi_fmul>
 8004bc6:	4601      	mov	r1, r0
 8004bc8:	4620      	mov	r0, r4
 8004bca:	f7fb facf 	bl	800016c <__addsf3>
 8004bce:	4604      	mov	r4, r0
 8004bd0:	4620      	mov	r0, r4
 8004bd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004bd6:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8004bda:	4638      	mov	r0, r7
 8004bdc:	f7fb fbce 	bl	800037c <__aeabi_fmul>
 8004be0:	4641      	mov	r1, r8
 8004be2:	4681      	mov	r9, r0
 8004be4:	4630      	mov	r0, r6
 8004be6:	f7fb fbc9 	bl	800037c <__aeabi_fmul>
 8004bea:	4601      	mov	r1, r0
 8004bec:	4648      	mov	r0, r9
 8004bee:	f7fb fabb 	bl	8000168 <__aeabi_fsub>
 8004bf2:	4629      	mov	r1, r5
 8004bf4:	f7fb fbc2 	bl	800037c <__aeabi_fmul>
 8004bf8:	4639      	mov	r1, r7
 8004bfa:	f7fb fab5 	bl	8000168 <__aeabi_fsub>
 8004bfe:	490c      	ldr	r1, [pc, #48]	@ (8004c30 <__kernel_sinf+0xe8>)
 8004c00:	4605      	mov	r5, r0
 8004c02:	4630      	mov	r0, r6
 8004c04:	f7fb fbba 	bl	800037c <__aeabi_fmul>
 8004c08:	4601      	mov	r1, r0
 8004c0a:	4628      	mov	r0, r5
 8004c0c:	f7fb faae 	bl	800016c <__addsf3>
 8004c10:	4601      	mov	r1, r0
 8004c12:	4620      	mov	r0, r4
 8004c14:	f7fb faa8 	bl	8000168 <__aeabi_fsub>
 8004c18:	e7d9      	b.n	8004bce <__kernel_sinf+0x86>
 8004c1a:	bf00      	nop
 8004c1c:	2f2ec9d3 	.word	0x2f2ec9d3
 8004c20:	32d72f34 	.word	0x32d72f34
 8004c24:	3638ef1b 	.word	0x3638ef1b
 8004c28:	39500d01 	.word	0x39500d01
 8004c2c:	3c088889 	.word	0x3c088889
 8004c30:	3e2aaaab 	.word	0x3e2aaaab

08004c34 <__ieee754_powf>:
 8004c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c38:	f031 4b00 	bics.w	fp, r1, #2147483648	@ 0x80000000
 8004c3c:	4681      	mov	r9, r0
 8004c3e:	460f      	mov	r7, r1
 8004c40:	4606      	mov	r6, r0
 8004c42:	460c      	mov	r4, r1
 8004c44:	b087      	sub	sp, #28
 8004c46:	d10c      	bne.n	8004c62 <__ieee754_powf+0x2e>
 8004c48:	f480 0680 	eor.w	r6, r0, #4194304	@ 0x400000
 8004c4c:	0076      	lsls	r6, r6, #1
 8004c4e:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8004c52:	f240 8310 	bls.w	8005276 <__ieee754_powf+0x642>
 8004c56:	4639      	mov	r1, r7
 8004c58:	4648      	mov	r0, r9
 8004c5a:	f7fb fa87 	bl	800016c <__addsf3>
 8004c5e:	4601      	mov	r1, r0
 8004c60:	e043      	b.n	8004cea <__ieee754_powf+0xb6>
 8004c62:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 8004c66:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8004c6a:	d802      	bhi.n	8004c72 <__ieee754_powf+0x3e>
 8004c6c:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 8004c70:	d908      	bls.n	8004c84 <__ieee754_powf+0x50>
 8004c72:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8004c76:	d1ee      	bne.n	8004c56 <__ieee754_powf+0x22>
 8004c78:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8004c7c:	0064      	lsls	r4, r4, #1
 8004c7e:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8004c82:	e7e6      	b.n	8004c52 <__ieee754_powf+0x1e>
 8004c84:	2800      	cmp	r0, #0
 8004c86:	da1f      	bge.n	8004cc8 <__ieee754_powf+0x94>
 8004c88:	f1bb 4f97 	cmp.w	fp, #1266679808	@ 0x4b800000
 8004c8c:	f080 82f8 	bcs.w	8005280 <__ieee754_powf+0x64c>
 8004c90:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 8004c94:	d32f      	bcc.n	8004cf6 <__ieee754_powf+0xc2>
 8004c96:	ea4f 53eb 	mov.w	r3, fp, asr #23
 8004c9a:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8004c9e:	fa4b f503 	asr.w	r5, fp, r3
 8004ca2:	fa05 f303 	lsl.w	r3, r5, r3
 8004ca6:	455b      	cmp	r3, fp
 8004ca8:	d123      	bne.n	8004cf2 <__ieee754_powf+0xbe>
 8004caa:	f005 0501 	and.w	r5, r5, #1
 8004cae:	f1c5 0502 	rsb	r5, r5, #2
 8004cb2:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 8004cb6:	d11f      	bne.n	8004cf8 <__ieee754_powf+0xc4>
 8004cb8:	2c00      	cmp	r4, #0
 8004cba:	4649      	mov	r1, r9
 8004cbc:	da15      	bge.n	8004cea <__ieee754_powf+0xb6>
 8004cbe:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8004cc2:	f7fb fc0f 	bl	80004e4 <__aeabi_fdiv>
 8004cc6:	e7ca      	b.n	8004c5e <__ieee754_powf+0x2a>
 8004cc8:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 8004ccc:	d111      	bne.n	8004cf2 <__ieee754_powf+0xbe>
 8004cce:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8004cd2:	f000 82d0 	beq.w	8005276 <__ieee754_powf+0x642>
 8004cd6:	d904      	bls.n	8004ce2 <__ieee754_powf+0xae>
 8004cd8:	2c00      	cmp	r4, #0
 8004cda:	f280 82cf 	bge.w	800527c <__ieee754_powf+0x648>
 8004cde:	2100      	movs	r1, #0
 8004ce0:	e003      	b.n	8004cea <__ieee754_powf+0xb6>
 8004ce2:	2c00      	cmp	r4, #0
 8004ce4:	dafb      	bge.n	8004cde <__ieee754_powf+0xaa>
 8004ce6:	f107 4100 	add.w	r1, r7, #2147483648	@ 0x80000000
 8004cea:	4608      	mov	r0, r1
 8004cec:	b007      	add	sp, #28
 8004cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cf2:	2500      	movs	r5, #0
 8004cf4:	e7dd      	b.n	8004cb2 <__ieee754_powf+0x7e>
 8004cf6:	2500      	movs	r5, #0
 8004cf8:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8004cfc:	d104      	bne.n	8004d08 <__ieee754_powf+0xd4>
 8004cfe:	4649      	mov	r1, r9
 8004d00:	4648      	mov	r0, r9
 8004d02:	f7fb fb3b 	bl	800037c <__aeabi_fmul>
 8004d06:	e7aa      	b.n	8004c5e <__ieee754_powf+0x2a>
 8004d08:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8004d0c:	f040 82bd 	bne.w	800528a <__ieee754_powf+0x656>
 8004d10:	2e00      	cmp	r6, #0
 8004d12:	f2c0 82ba 	blt.w	800528a <__ieee754_powf+0x656>
 8004d16:	4648      	mov	r0, r9
 8004d18:	b007      	add	sp, #28
 8004d1a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d1e:	f7ff be23 	b.w	8004968 <__ieee754_sqrtf>
 8004d22:	2d01      	cmp	r5, #1
 8004d24:	d1e1      	bne.n	8004cea <__ieee754_powf+0xb6>
 8004d26:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 8004d2a:	e798      	b.n	8004c5e <__ieee754_powf+0x2a>
 8004d2c:	0ff3      	lsrs	r3, r6, #31
 8004d2e:	3b01      	subs	r3, #1
 8004d30:	9303      	str	r3, [sp, #12]
 8004d32:	432b      	orrs	r3, r5
 8004d34:	d101      	bne.n	8004d3a <__ieee754_powf+0x106>
 8004d36:	4649      	mov	r1, r9
 8004d38:	e2c5      	b.n	80052c6 <__ieee754_powf+0x692>
 8004d3a:	f1bb 4f9a 	cmp.w	fp, #1291845632	@ 0x4d000000
 8004d3e:	f240 809b 	bls.w	8004e78 <__ieee754_powf+0x244>
 8004d42:	4b46      	ldr	r3, [pc, #280]	@ (8004e5c <__ieee754_powf+0x228>)
 8004d44:	4598      	cmp	r8, r3
 8004d46:	d807      	bhi.n	8004d58 <__ieee754_powf+0x124>
 8004d48:	2c00      	cmp	r4, #0
 8004d4a:	da0a      	bge.n	8004d62 <__ieee754_powf+0x12e>
 8004d4c:	2000      	movs	r0, #0
 8004d4e:	b007      	add	sp, #28
 8004d50:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d54:	f000 bc9d 	b.w	8005692 <__math_oflowf>
 8004d58:	4b41      	ldr	r3, [pc, #260]	@ (8004e60 <__ieee754_powf+0x22c>)
 8004d5a:	4598      	cmp	r8, r3
 8004d5c:	d907      	bls.n	8004d6e <__ieee754_powf+0x13a>
 8004d5e:	2c00      	cmp	r4, #0
 8004d60:	dcf4      	bgt.n	8004d4c <__ieee754_powf+0x118>
 8004d62:	2000      	movs	r0, #0
 8004d64:	b007      	add	sp, #28
 8004d66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d6a:	f000 bc8e 	b.w	800568a <__math_uflowf>
 8004d6e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8004d72:	f7fb f9f9 	bl	8000168 <__aeabi_fsub>
 8004d76:	493b      	ldr	r1, [pc, #236]	@ (8004e64 <__ieee754_powf+0x230>)
 8004d78:	4606      	mov	r6, r0
 8004d7a:	f7fb faff 	bl	800037c <__aeabi_fmul>
 8004d7e:	493a      	ldr	r1, [pc, #232]	@ (8004e68 <__ieee754_powf+0x234>)
 8004d80:	4680      	mov	r8, r0
 8004d82:	4630      	mov	r0, r6
 8004d84:	f7fb fafa 	bl	800037c <__aeabi_fmul>
 8004d88:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 8004d8c:	4681      	mov	r9, r0
 8004d8e:	4630      	mov	r0, r6
 8004d90:	f7fb faf4 	bl	800037c <__aeabi_fmul>
 8004d94:	4601      	mov	r1, r0
 8004d96:	4835      	ldr	r0, [pc, #212]	@ (8004e6c <__ieee754_powf+0x238>)
 8004d98:	f7fb f9e6 	bl	8000168 <__aeabi_fsub>
 8004d9c:	4631      	mov	r1, r6
 8004d9e:	f7fb faed 	bl	800037c <__aeabi_fmul>
 8004da2:	4601      	mov	r1, r0
 8004da4:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 8004da8:	f7fb f9de 	bl	8000168 <__aeabi_fsub>
 8004dac:	4631      	mov	r1, r6
 8004dae:	4682      	mov	sl, r0
 8004db0:	4630      	mov	r0, r6
 8004db2:	f7fb fae3 	bl	800037c <__aeabi_fmul>
 8004db6:	4601      	mov	r1, r0
 8004db8:	4650      	mov	r0, sl
 8004dba:	f7fb fadf 	bl	800037c <__aeabi_fmul>
 8004dbe:	492c      	ldr	r1, [pc, #176]	@ (8004e70 <__ieee754_powf+0x23c>)
 8004dc0:	f7fb fadc 	bl	800037c <__aeabi_fmul>
 8004dc4:	4601      	mov	r1, r0
 8004dc6:	4648      	mov	r0, r9
 8004dc8:	f7fb f9ce 	bl	8000168 <__aeabi_fsub>
 8004dcc:	4601      	mov	r1, r0
 8004dce:	4606      	mov	r6, r0
 8004dd0:	4640      	mov	r0, r8
 8004dd2:	f7fb f9cb 	bl	800016c <__addsf3>
 8004dd6:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 8004dda:	f02b 0b0f 	bic.w	fp, fp, #15
 8004dde:	4641      	mov	r1, r8
 8004de0:	4658      	mov	r0, fp
 8004de2:	f7fb f9c1 	bl	8000168 <__aeabi_fsub>
 8004de6:	4601      	mov	r1, r0
 8004de8:	4630      	mov	r0, r6
 8004dea:	f7fb f9bd 	bl	8000168 <__aeabi_fsub>
 8004dee:	9b03      	ldr	r3, [sp, #12]
 8004df0:	3d01      	subs	r5, #1
 8004df2:	f36f 040b 	bfc	r4, #0, #12
 8004df6:	431d      	orrs	r5, r3
 8004df8:	4606      	mov	r6, r0
 8004dfa:	4621      	mov	r1, r4
 8004dfc:	4638      	mov	r0, r7
 8004dfe:	bf14      	ite	ne
 8004e00:	f04f 557e 	movne.w	r5, #1065353216	@ 0x3f800000
 8004e04:	4d1b      	ldreq	r5, [pc, #108]	@ (8004e74 <__ieee754_powf+0x240>)
 8004e06:	f7fb f9af 	bl	8000168 <__aeabi_fsub>
 8004e0a:	4659      	mov	r1, fp
 8004e0c:	f7fb fab6 	bl	800037c <__aeabi_fmul>
 8004e10:	4639      	mov	r1, r7
 8004e12:	4680      	mov	r8, r0
 8004e14:	4630      	mov	r0, r6
 8004e16:	f7fb fab1 	bl	800037c <__aeabi_fmul>
 8004e1a:	4601      	mov	r1, r0
 8004e1c:	4640      	mov	r0, r8
 8004e1e:	f7fb f9a5 	bl	800016c <__addsf3>
 8004e22:	4621      	mov	r1, r4
 8004e24:	4606      	mov	r6, r0
 8004e26:	4658      	mov	r0, fp
 8004e28:	f7fb faa8 	bl	800037c <__aeabi_fmul>
 8004e2c:	4601      	mov	r1, r0
 8004e2e:	4607      	mov	r7, r0
 8004e30:	4630      	mov	r0, r6
 8004e32:	f7fb f99b 	bl	800016c <__addsf3>
 8004e36:	2800      	cmp	r0, #0
 8004e38:	4604      	mov	r4, r0
 8004e3a:	4680      	mov	r8, r0
 8004e3c:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8004e40:	f340 813f 	ble.w	80050c2 <__ieee754_powf+0x48e>
 8004e44:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8004e48:	f240 8128 	bls.w	800509c <__ieee754_powf+0x468>
 8004e4c:	2100      	movs	r1, #0
 8004e4e:	4628      	mov	r0, r5
 8004e50:	f7fb fc32 	bl	80006b8 <__aeabi_fcmplt>
 8004e54:	3800      	subs	r0, #0
 8004e56:	bf18      	it	ne
 8004e58:	2001      	movne	r0, #1
 8004e5a:	e778      	b.n	8004d4e <__ieee754_powf+0x11a>
 8004e5c:	3f7ffff3 	.word	0x3f7ffff3
 8004e60:	3f800007 	.word	0x3f800007
 8004e64:	3fb8aa00 	.word	0x3fb8aa00
 8004e68:	36eca570 	.word	0x36eca570
 8004e6c:	3eaaaaab 	.word	0x3eaaaaab
 8004e70:	3fb8aa3b 	.word	0x3fb8aa3b
 8004e74:	bf800000 	.word	0xbf800000
 8004e78:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8004e7c:	f040 810a 	bne.w	8005094 <__ieee754_powf+0x460>
 8004e80:	f04f 4197 	mov.w	r1, #1266679808	@ 0x4b800000
 8004e84:	f7fb fa7a 	bl	800037c <__aeabi_fmul>
 8004e88:	f06f 0217 	mvn.w	r2, #23
 8004e8c:	4682      	mov	sl, r0
 8004e8e:	ea4f 53ea 	mov.w	r3, sl, asr #23
 8004e92:	3b7f      	subs	r3, #127	@ 0x7f
 8004e94:	441a      	add	r2, r3
 8004e96:	4b95      	ldr	r3, [pc, #596]	@ (80050ec <__ieee754_powf+0x4b8>)
 8004e98:	f3ca 0a16 	ubfx	sl, sl, #0, #23
 8004e9c:	459a      	cmp	sl, r3
 8004e9e:	f04a 567e 	orr.w	r6, sl, #1065353216	@ 0x3f800000
 8004ea2:	dd06      	ble.n	8004eb2 <__ieee754_powf+0x27e>
 8004ea4:	4b92      	ldr	r3, [pc, #584]	@ (80050f0 <__ieee754_powf+0x4bc>)
 8004ea6:	459a      	cmp	sl, r3
 8004ea8:	f340 80f6 	ble.w	8005098 <__ieee754_powf+0x464>
 8004eac:	3201      	adds	r2, #1
 8004eae:	f5a6 0600 	sub.w	r6, r6, #8388608	@ 0x800000
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	9301      	str	r3, [sp, #4]
 8004eb6:	9205      	str	r2, [sp, #20]
 8004eb8:	4b8e      	ldr	r3, [pc, #568]	@ (80050f4 <__ieee754_powf+0x4c0>)
 8004eba:	9a01      	ldr	r2, [sp, #4]
 8004ebc:	4630      	mov	r0, r6
 8004ebe:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 8004ec2:	46b2      	mov	sl, r6
 8004ec4:	4659      	mov	r1, fp
 8004ec6:	f7fb f94f 	bl	8000168 <__aeabi_fsub>
 8004eca:	4631      	mov	r1, r6
 8004ecc:	4681      	mov	r9, r0
 8004ece:	4658      	mov	r0, fp
 8004ed0:	f7fb f94c 	bl	800016c <__addsf3>
 8004ed4:	4601      	mov	r1, r0
 8004ed6:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8004eda:	f7fb fb03 	bl	80004e4 <__aeabi_fdiv>
 8004ede:	4601      	mov	r1, r0
 8004ee0:	9004      	str	r0, [sp, #16]
 8004ee2:	4648      	mov	r0, r9
 8004ee4:	f7fb fa4a 	bl	800037c <__aeabi_fmul>
 8004ee8:	9002      	str	r0, [sp, #8]
 8004eea:	9b02      	ldr	r3, [sp, #8]
 8004eec:	1076      	asrs	r6, r6, #1
 8004eee:	f36f 030b 	bfc	r3, #0, #12
 8004ef2:	4698      	mov	r8, r3
 8004ef4:	f046 5600 	orr.w	r6, r6, #536870912	@ 0x20000000
 8004ef8:	9b01      	ldr	r3, [sp, #4]
 8004efa:	f506 2680 	add.w	r6, r6, #262144	@ 0x40000
 8004efe:	eb06 5643 	add.w	r6, r6, r3, lsl #21
 8004f02:	4631      	mov	r1, r6
 8004f04:	4640      	mov	r0, r8
 8004f06:	f7fb fa39 	bl	800037c <__aeabi_fmul>
 8004f0a:	4601      	mov	r1, r0
 8004f0c:	4648      	mov	r0, r9
 8004f0e:	f7fb f92b 	bl	8000168 <__aeabi_fsub>
 8004f12:	4659      	mov	r1, fp
 8004f14:	4681      	mov	r9, r0
 8004f16:	4630      	mov	r0, r6
 8004f18:	f7fb f926 	bl	8000168 <__aeabi_fsub>
 8004f1c:	4601      	mov	r1, r0
 8004f1e:	4650      	mov	r0, sl
 8004f20:	f7fb f922 	bl	8000168 <__aeabi_fsub>
 8004f24:	4641      	mov	r1, r8
 8004f26:	f7fb fa29 	bl	800037c <__aeabi_fmul>
 8004f2a:	4601      	mov	r1, r0
 8004f2c:	4648      	mov	r0, r9
 8004f2e:	f7fb f91b 	bl	8000168 <__aeabi_fsub>
 8004f32:	9b04      	ldr	r3, [sp, #16]
 8004f34:	4619      	mov	r1, r3
 8004f36:	f7fb fa21 	bl	800037c <__aeabi_fmul>
 8004f3a:	9902      	ldr	r1, [sp, #8]
 8004f3c:	4683      	mov	fp, r0
 8004f3e:	4608      	mov	r0, r1
 8004f40:	f7fb fa1c 	bl	800037c <__aeabi_fmul>
 8004f44:	4606      	mov	r6, r0
 8004f46:	496c      	ldr	r1, [pc, #432]	@ (80050f8 <__ieee754_powf+0x4c4>)
 8004f48:	f7fb fa18 	bl	800037c <__aeabi_fmul>
 8004f4c:	496b      	ldr	r1, [pc, #428]	@ (80050fc <__ieee754_powf+0x4c8>)
 8004f4e:	f7fb f90d 	bl	800016c <__addsf3>
 8004f52:	4631      	mov	r1, r6
 8004f54:	f7fb fa12 	bl	800037c <__aeabi_fmul>
 8004f58:	4969      	ldr	r1, [pc, #420]	@ (8005100 <__ieee754_powf+0x4cc>)
 8004f5a:	f7fb f907 	bl	800016c <__addsf3>
 8004f5e:	4631      	mov	r1, r6
 8004f60:	f7fb fa0c 	bl	800037c <__aeabi_fmul>
 8004f64:	4967      	ldr	r1, [pc, #412]	@ (8005104 <__ieee754_powf+0x4d0>)
 8004f66:	f7fb f901 	bl	800016c <__addsf3>
 8004f6a:	4631      	mov	r1, r6
 8004f6c:	f7fb fa06 	bl	800037c <__aeabi_fmul>
 8004f70:	4965      	ldr	r1, [pc, #404]	@ (8005108 <__ieee754_powf+0x4d4>)
 8004f72:	f7fb f8fb 	bl	800016c <__addsf3>
 8004f76:	4631      	mov	r1, r6
 8004f78:	f7fb fa00 	bl	800037c <__aeabi_fmul>
 8004f7c:	4963      	ldr	r1, [pc, #396]	@ (800510c <__ieee754_powf+0x4d8>)
 8004f7e:	f7fb f8f5 	bl	800016c <__addsf3>
 8004f82:	4631      	mov	r1, r6
 8004f84:	4681      	mov	r9, r0
 8004f86:	4630      	mov	r0, r6
 8004f88:	f7fb f9f8 	bl	800037c <__aeabi_fmul>
 8004f8c:	4601      	mov	r1, r0
 8004f8e:	4648      	mov	r0, r9
 8004f90:	f7fb f9f4 	bl	800037c <__aeabi_fmul>
 8004f94:	4606      	mov	r6, r0
 8004f96:	4641      	mov	r1, r8
 8004f98:	9802      	ldr	r0, [sp, #8]
 8004f9a:	f7fb f8e7 	bl	800016c <__addsf3>
 8004f9e:	4659      	mov	r1, fp
 8004fa0:	f7fb f9ec 	bl	800037c <__aeabi_fmul>
 8004fa4:	4631      	mov	r1, r6
 8004fa6:	f7fb f8e1 	bl	800016c <__addsf3>
 8004faa:	4641      	mov	r1, r8
 8004fac:	4681      	mov	r9, r0
 8004fae:	4640      	mov	r0, r8
 8004fb0:	f7fb f9e4 	bl	800037c <__aeabi_fmul>
 8004fb4:	4956      	ldr	r1, [pc, #344]	@ (8005110 <__ieee754_powf+0x4dc>)
 8004fb6:	4682      	mov	sl, r0
 8004fb8:	f7fb f8d8 	bl	800016c <__addsf3>
 8004fbc:	4649      	mov	r1, r9
 8004fbe:	f7fb f8d5 	bl	800016c <__addsf3>
 8004fc2:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 8004fc6:	f026 060f 	bic.w	r6, r6, #15
 8004fca:	4631      	mov	r1, r6
 8004fcc:	4640      	mov	r0, r8
 8004fce:	f7fb f9d5 	bl	800037c <__aeabi_fmul>
 8004fd2:	494f      	ldr	r1, [pc, #316]	@ (8005110 <__ieee754_powf+0x4dc>)
 8004fd4:	4680      	mov	r8, r0
 8004fd6:	4630      	mov	r0, r6
 8004fd8:	f7fb f8c6 	bl	8000168 <__aeabi_fsub>
 8004fdc:	4651      	mov	r1, sl
 8004fde:	f7fb f8c3 	bl	8000168 <__aeabi_fsub>
 8004fe2:	4601      	mov	r1, r0
 8004fe4:	4648      	mov	r0, r9
 8004fe6:	f7fb f8bf 	bl	8000168 <__aeabi_fsub>
 8004fea:	9902      	ldr	r1, [sp, #8]
 8004fec:	f7fb f9c6 	bl	800037c <__aeabi_fmul>
 8004ff0:	4631      	mov	r1, r6
 8004ff2:	4681      	mov	r9, r0
 8004ff4:	4658      	mov	r0, fp
 8004ff6:	f7fb f9c1 	bl	800037c <__aeabi_fmul>
 8004ffa:	4601      	mov	r1, r0
 8004ffc:	4648      	mov	r0, r9
 8004ffe:	f7fb f8b5 	bl	800016c <__addsf3>
 8005002:	4682      	mov	sl, r0
 8005004:	4601      	mov	r1, r0
 8005006:	4640      	mov	r0, r8
 8005008:	f7fb f8b0 	bl	800016c <__addsf3>
 800500c:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 8005010:	f026 060f 	bic.w	r6, r6, #15
 8005014:	4630      	mov	r0, r6
 8005016:	493f      	ldr	r1, [pc, #252]	@ (8005114 <__ieee754_powf+0x4e0>)
 8005018:	f7fb f9b0 	bl	800037c <__aeabi_fmul>
 800501c:	4641      	mov	r1, r8
 800501e:	4681      	mov	r9, r0
 8005020:	4630      	mov	r0, r6
 8005022:	f7fb f8a1 	bl	8000168 <__aeabi_fsub>
 8005026:	4601      	mov	r1, r0
 8005028:	4650      	mov	r0, sl
 800502a:	f7fb f89d 	bl	8000168 <__aeabi_fsub>
 800502e:	493a      	ldr	r1, [pc, #232]	@ (8005118 <__ieee754_powf+0x4e4>)
 8005030:	f7fb f9a4 	bl	800037c <__aeabi_fmul>
 8005034:	4939      	ldr	r1, [pc, #228]	@ (800511c <__ieee754_powf+0x4e8>)
 8005036:	4680      	mov	r8, r0
 8005038:	4630      	mov	r0, r6
 800503a:	f7fb f99f 	bl	800037c <__aeabi_fmul>
 800503e:	4601      	mov	r1, r0
 8005040:	4640      	mov	r0, r8
 8005042:	f7fb f893 	bl	800016c <__addsf3>
 8005046:	4b36      	ldr	r3, [pc, #216]	@ (8005120 <__ieee754_powf+0x4ec>)
 8005048:	9a01      	ldr	r2, [sp, #4]
 800504a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800504e:	f7fb f88d 	bl	800016c <__addsf3>
 8005052:	9a05      	ldr	r2, [sp, #20]
 8005054:	4606      	mov	r6, r0
 8005056:	4610      	mov	r0, r2
 8005058:	f7fb f93c 	bl	80002d4 <__aeabi_i2f>
 800505c:	4680      	mov	r8, r0
 800505e:	4b31      	ldr	r3, [pc, #196]	@ (8005124 <__ieee754_powf+0x4f0>)
 8005060:	9a01      	ldr	r2, [sp, #4]
 8005062:	4631      	mov	r1, r6
 8005064:	f853 a022 	ldr.w	sl, [r3, r2, lsl #2]
 8005068:	4648      	mov	r0, r9
 800506a:	f7fb f87f 	bl	800016c <__addsf3>
 800506e:	4651      	mov	r1, sl
 8005070:	f7fb f87c 	bl	800016c <__addsf3>
 8005074:	4641      	mov	r1, r8
 8005076:	f7fb f879 	bl	800016c <__addsf3>
 800507a:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 800507e:	f02b 0b0f 	bic.w	fp, fp, #15
 8005082:	4641      	mov	r1, r8
 8005084:	4658      	mov	r0, fp
 8005086:	f7fb f86f 	bl	8000168 <__aeabi_fsub>
 800508a:	4651      	mov	r1, sl
 800508c:	f7fb f86c 	bl	8000168 <__aeabi_fsub>
 8005090:	4649      	mov	r1, r9
 8005092:	e6a6      	b.n	8004de2 <__ieee754_powf+0x1ae>
 8005094:	2200      	movs	r2, #0
 8005096:	e6fa      	b.n	8004e8e <__ieee754_powf+0x25a>
 8005098:	2301      	movs	r3, #1
 800509a:	e70b      	b.n	8004eb4 <__ieee754_powf+0x280>
 800509c:	d148      	bne.n	8005130 <__ieee754_powf+0x4fc>
 800509e:	4922      	ldr	r1, [pc, #136]	@ (8005128 <__ieee754_powf+0x4f4>)
 80050a0:	4630      	mov	r0, r6
 80050a2:	f7fb f863 	bl	800016c <__addsf3>
 80050a6:	4639      	mov	r1, r7
 80050a8:	4681      	mov	r9, r0
 80050aa:	4620      	mov	r0, r4
 80050ac:	f7fb f85c 	bl	8000168 <__aeabi_fsub>
 80050b0:	4601      	mov	r1, r0
 80050b2:	4648      	mov	r0, r9
 80050b4:	f7fb fb1e 	bl	80006f4 <__aeabi_fcmpgt>
 80050b8:	2800      	cmp	r0, #0
 80050ba:	f47f aec7 	bne.w	8004e4c <__ieee754_powf+0x218>
 80050be:	2386      	movs	r3, #134	@ 0x86
 80050c0:	e03b      	b.n	800513a <__ieee754_powf+0x506>
 80050c2:	4a1a      	ldr	r2, [pc, #104]	@ (800512c <__ieee754_powf+0x4f8>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d907      	bls.n	80050d8 <__ieee754_powf+0x4a4>
 80050c8:	2100      	movs	r1, #0
 80050ca:	4628      	mov	r0, r5
 80050cc:	f7fb faf4 	bl	80006b8 <__aeabi_fcmplt>
 80050d0:	3800      	subs	r0, #0
 80050d2:	bf18      	it	ne
 80050d4:	2001      	movne	r0, #1
 80050d6:	e645      	b.n	8004d64 <__ieee754_powf+0x130>
 80050d8:	d12a      	bne.n	8005130 <__ieee754_powf+0x4fc>
 80050da:	4639      	mov	r1, r7
 80050dc:	f7fb f844 	bl	8000168 <__aeabi_fsub>
 80050e0:	4631      	mov	r1, r6
 80050e2:	f7fb fafd 	bl	80006e0 <__aeabi_fcmpge>
 80050e6:	2800      	cmp	r0, #0
 80050e8:	d0e9      	beq.n	80050be <__ieee754_powf+0x48a>
 80050ea:	e7ed      	b.n	80050c8 <__ieee754_powf+0x494>
 80050ec:	001cc471 	.word	0x001cc471
 80050f0:	005db3d6 	.word	0x005db3d6
 80050f4:	08005cc8 	.word	0x08005cc8
 80050f8:	3e53f142 	.word	0x3e53f142
 80050fc:	3e6c3255 	.word	0x3e6c3255
 8005100:	3e8ba305 	.word	0x3e8ba305
 8005104:	3eaaaaab 	.word	0x3eaaaaab
 8005108:	3edb6db7 	.word	0x3edb6db7
 800510c:	3f19999a 	.word	0x3f19999a
 8005110:	40400000 	.word	0x40400000
 8005114:	3f763800 	.word	0x3f763800
 8005118:	3f76384f 	.word	0x3f76384f
 800511c:	369dc3a0 	.word	0x369dc3a0
 8005120:	08005cb8 	.word	0x08005cb8
 8005124:	08005cc0 	.word	0x08005cc0
 8005128:	3338aa3c 	.word	0x3338aa3c
 800512c:	43160000 	.word	0x43160000
 8005130:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8005134:	f240 809b 	bls.w	800526e <__ieee754_powf+0x63a>
 8005138:	15db      	asrs	r3, r3, #23
 800513a:	f44f 0400 	mov.w	r4, #8388608	@ 0x800000
 800513e:	3b7e      	subs	r3, #126	@ 0x7e
 8005140:	411c      	asrs	r4, r3
 8005142:	4444      	add	r4, r8
 8005144:	f3c4 53c7 	ubfx	r3, r4, #23, #8
 8005148:	4961      	ldr	r1, [pc, #388]	@ (80052d0 <__ieee754_powf+0x69c>)
 800514a:	3b7f      	subs	r3, #127	@ 0x7f
 800514c:	4119      	asrs	r1, r3
 800514e:	4021      	ands	r1, r4
 8005150:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8005154:	f1c3 0317 	rsb	r3, r3, #23
 8005158:	f444 0400 	orr.w	r4, r4, #8388608	@ 0x800000
 800515c:	4638      	mov	r0, r7
 800515e:	411c      	asrs	r4, r3
 8005160:	f1b8 0f00 	cmp.w	r8, #0
 8005164:	bfb8      	it	lt
 8005166:	4264      	neglt	r4, r4
 8005168:	f7fa fffe 	bl	8000168 <__aeabi_fsub>
 800516c:	4607      	mov	r7, r0
 800516e:	4631      	mov	r1, r6
 8005170:	4638      	mov	r0, r7
 8005172:	f7fa fffb 	bl	800016c <__addsf3>
 8005176:	f420 687f 	bic.w	r8, r0, #4080	@ 0xff0
 800517a:	f028 080f 	bic.w	r8, r8, #15
 800517e:	4640      	mov	r0, r8
 8005180:	4954      	ldr	r1, [pc, #336]	@ (80052d4 <__ieee754_powf+0x6a0>)
 8005182:	f7fb f8fb 	bl	800037c <__aeabi_fmul>
 8005186:	4639      	mov	r1, r7
 8005188:	4681      	mov	r9, r0
 800518a:	4640      	mov	r0, r8
 800518c:	f7fa ffec 	bl	8000168 <__aeabi_fsub>
 8005190:	4601      	mov	r1, r0
 8005192:	4630      	mov	r0, r6
 8005194:	f7fa ffe8 	bl	8000168 <__aeabi_fsub>
 8005198:	494f      	ldr	r1, [pc, #316]	@ (80052d8 <__ieee754_powf+0x6a4>)
 800519a:	f7fb f8ef 	bl	800037c <__aeabi_fmul>
 800519e:	494f      	ldr	r1, [pc, #316]	@ (80052dc <__ieee754_powf+0x6a8>)
 80051a0:	4606      	mov	r6, r0
 80051a2:	4640      	mov	r0, r8
 80051a4:	f7fb f8ea 	bl	800037c <__aeabi_fmul>
 80051a8:	4601      	mov	r1, r0
 80051aa:	4630      	mov	r0, r6
 80051ac:	f7fa ffde 	bl	800016c <__addsf3>
 80051b0:	4607      	mov	r7, r0
 80051b2:	4601      	mov	r1, r0
 80051b4:	4648      	mov	r0, r9
 80051b6:	f7fa ffd9 	bl	800016c <__addsf3>
 80051ba:	4649      	mov	r1, r9
 80051bc:	4606      	mov	r6, r0
 80051be:	f7fa ffd3 	bl	8000168 <__aeabi_fsub>
 80051c2:	4601      	mov	r1, r0
 80051c4:	4638      	mov	r0, r7
 80051c6:	f7fa ffcf 	bl	8000168 <__aeabi_fsub>
 80051ca:	4631      	mov	r1, r6
 80051cc:	4680      	mov	r8, r0
 80051ce:	4630      	mov	r0, r6
 80051d0:	f7fb f8d4 	bl	800037c <__aeabi_fmul>
 80051d4:	4607      	mov	r7, r0
 80051d6:	4942      	ldr	r1, [pc, #264]	@ (80052e0 <__ieee754_powf+0x6ac>)
 80051d8:	f7fb f8d0 	bl	800037c <__aeabi_fmul>
 80051dc:	4941      	ldr	r1, [pc, #260]	@ (80052e4 <__ieee754_powf+0x6b0>)
 80051de:	f7fa ffc3 	bl	8000168 <__aeabi_fsub>
 80051e2:	4639      	mov	r1, r7
 80051e4:	f7fb f8ca 	bl	800037c <__aeabi_fmul>
 80051e8:	493f      	ldr	r1, [pc, #252]	@ (80052e8 <__ieee754_powf+0x6b4>)
 80051ea:	f7fa ffbf 	bl	800016c <__addsf3>
 80051ee:	4639      	mov	r1, r7
 80051f0:	f7fb f8c4 	bl	800037c <__aeabi_fmul>
 80051f4:	493d      	ldr	r1, [pc, #244]	@ (80052ec <__ieee754_powf+0x6b8>)
 80051f6:	f7fa ffb7 	bl	8000168 <__aeabi_fsub>
 80051fa:	4639      	mov	r1, r7
 80051fc:	f7fb f8be 	bl	800037c <__aeabi_fmul>
 8005200:	493b      	ldr	r1, [pc, #236]	@ (80052f0 <__ieee754_powf+0x6bc>)
 8005202:	f7fa ffb3 	bl	800016c <__addsf3>
 8005206:	4639      	mov	r1, r7
 8005208:	f7fb f8b8 	bl	800037c <__aeabi_fmul>
 800520c:	4601      	mov	r1, r0
 800520e:	4630      	mov	r0, r6
 8005210:	f7fa ffaa 	bl	8000168 <__aeabi_fsub>
 8005214:	4607      	mov	r7, r0
 8005216:	4601      	mov	r1, r0
 8005218:	4630      	mov	r0, r6
 800521a:	f7fb f8af 	bl	800037c <__aeabi_fmul>
 800521e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8005222:	4681      	mov	r9, r0
 8005224:	4638      	mov	r0, r7
 8005226:	f7fa ff9f 	bl	8000168 <__aeabi_fsub>
 800522a:	4601      	mov	r1, r0
 800522c:	4648      	mov	r0, r9
 800522e:	f7fb f959 	bl	80004e4 <__aeabi_fdiv>
 8005232:	4641      	mov	r1, r8
 8005234:	4607      	mov	r7, r0
 8005236:	4630      	mov	r0, r6
 8005238:	f7fb f8a0 	bl	800037c <__aeabi_fmul>
 800523c:	4641      	mov	r1, r8
 800523e:	f7fa ff95 	bl	800016c <__addsf3>
 8005242:	4601      	mov	r1, r0
 8005244:	4638      	mov	r0, r7
 8005246:	f7fa ff8f 	bl	8000168 <__aeabi_fsub>
 800524a:	4631      	mov	r1, r6
 800524c:	f7fa ff8c 	bl	8000168 <__aeabi_fsub>
 8005250:	4601      	mov	r1, r0
 8005252:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8005256:	f7fa ff87 	bl	8000168 <__aeabi_fsub>
 800525a:	eb00 53c4 	add.w	r3, r0, r4, lsl #23
 800525e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005262:	da06      	bge.n	8005272 <__ieee754_powf+0x63e>
 8005264:	4621      	mov	r1, r4
 8005266:	f000 f9af 	bl	80055c8 <scalbnf>
 800526a:	4629      	mov	r1, r5
 800526c:	e549      	b.n	8004d02 <__ieee754_powf+0xce>
 800526e:	2400      	movs	r4, #0
 8005270:	e77d      	b.n	800516e <__ieee754_powf+0x53a>
 8005272:	4618      	mov	r0, r3
 8005274:	e7f9      	b.n	800526a <__ieee754_powf+0x636>
 8005276:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800527a:	e536      	b.n	8004cea <__ieee754_powf+0xb6>
 800527c:	4639      	mov	r1, r7
 800527e:	e534      	b.n	8004cea <__ieee754_powf+0xb6>
 8005280:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 8005284:	f43f ad23 	beq.w	8004cce <__ieee754_powf+0x9a>
 8005288:	2502      	movs	r5, #2
 800528a:	4648      	mov	r0, r9
 800528c:	f000 f998 	bl	80055c0 <fabsf>
 8005290:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8005294:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8005298:	46c2      	mov	sl, r8
 800529a:	4601      	mov	r1, r0
 800529c:	d003      	beq.n	80052a6 <__ieee754_powf+0x672>
 800529e:	f1b8 0f00 	cmp.w	r8, #0
 80052a2:	f47f ad43 	bne.w	8004d2c <__ieee754_powf+0xf8>
 80052a6:	2c00      	cmp	r4, #0
 80052a8:	da04      	bge.n	80052b4 <__ieee754_powf+0x680>
 80052aa:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80052ae:	f7fb f919 	bl	80004e4 <__aeabi_fdiv>
 80052b2:	4601      	mov	r1, r0
 80052b4:	2e00      	cmp	r6, #0
 80052b6:	f6bf ad18 	bge.w	8004cea <__ieee754_powf+0xb6>
 80052ba:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 80052be:	ea58 0805 	orrs.w	r8, r8, r5
 80052c2:	f47f ad2e 	bne.w	8004d22 <__ieee754_powf+0xee>
 80052c6:	4608      	mov	r0, r1
 80052c8:	f7fa ff4e 	bl	8000168 <__aeabi_fsub>
 80052cc:	4601      	mov	r1, r0
 80052ce:	e4f8      	b.n	8004cc2 <__ieee754_powf+0x8e>
 80052d0:	ff800000 	.word	0xff800000
 80052d4:	3f317200 	.word	0x3f317200
 80052d8:	3f317218 	.word	0x3f317218
 80052dc:	35bfbe8c 	.word	0x35bfbe8c
 80052e0:	3331bb4c 	.word	0x3331bb4c
 80052e4:	35ddea0e 	.word	0x35ddea0e
 80052e8:	388ab355 	.word	0x388ab355
 80052ec:	3b360b61 	.word	0x3b360b61
 80052f0:	3e2aaaab 	.word	0x3e2aaaab

080052f4 <__ieee754_rem_pio2f>:
 80052f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052f8:	4aa4      	ldr	r2, [pc, #656]	@ (800558c <__ieee754_rem_pio2f+0x298>)
 80052fa:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 80052fe:	4590      	cmp	r8, r2
 8005300:	460c      	mov	r4, r1
 8005302:	4682      	mov	sl, r0
 8005304:	b087      	sub	sp, #28
 8005306:	d804      	bhi.n	8005312 <__ieee754_rem_pio2f+0x1e>
 8005308:	2300      	movs	r3, #0
 800530a:	6008      	str	r0, [r1, #0]
 800530c:	604b      	str	r3, [r1, #4]
 800530e:	2500      	movs	r5, #0
 8005310:	e01d      	b.n	800534e <__ieee754_rem_pio2f+0x5a>
 8005312:	4a9f      	ldr	r2, [pc, #636]	@ (8005590 <__ieee754_rem_pio2f+0x29c>)
 8005314:	4590      	cmp	r8, r2
 8005316:	d84f      	bhi.n	80053b8 <__ieee754_rem_pio2f+0xc4>
 8005318:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 800531c:	2800      	cmp	r0, #0
 800531e:	499d      	ldr	r1, [pc, #628]	@ (8005594 <__ieee754_rem_pio2f+0x2a0>)
 8005320:	4f9d      	ldr	r7, [pc, #628]	@ (8005598 <__ieee754_rem_pio2f+0x2a4>)
 8005322:	f025 050f 	bic.w	r5, r5, #15
 8005326:	dd24      	ble.n	8005372 <__ieee754_rem_pio2f+0x7e>
 8005328:	f7fa ff1e 	bl	8000168 <__aeabi_fsub>
 800532c:	42bd      	cmp	r5, r7
 800532e:	4606      	mov	r6, r0
 8005330:	d011      	beq.n	8005356 <__ieee754_rem_pio2f+0x62>
 8005332:	499a      	ldr	r1, [pc, #616]	@ (800559c <__ieee754_rem_pio2f+0x2a8>)
 8005334:	f7fa ff18 	bl	8000168 <__aeabi_fsub>
 8005338:	4601      	mov	r1, r0
 800533a:	4605      	mov	r5, r0
 800533c:	4630      	mov	r0, r6
 800533e:	f7fa ff13 	bl	8000168 <__aeabi_fsub>
 8005342:	4996      	ldr	r1, [pc, #600]	@ (800559c <__ieee754_rem_pio2f+0x2a8>)
 8005344:	f7fa ff10 	bl	8000168 <__aeabi_fsub>
 8005348:	6025      	str	r5, [r4, #0]
 800534a:	2501      	movs	r5, #1
 800534c:	6060      	str	r0, [r4, #4]
 800534e:	4628      	mov	r0, r5
 8005350:	b007      	add	sp, #28
 8005352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005356:	4992      	ldr	r1, [pc, #584]	@ (80055a0 <__ieee754_rem_pio2f+0x2ac>)
 8005358:	f7fa ff06 	bl	8000168 <__aeabi_fsub>
 800535c:	4991      	ldr	r1, [pc, #580]	@ (80055a4 <__ieee754_rem_pio2f+0x2b0>)
 800535e:	4606      	mov	r6, r0
 8005360:	f7fa ff02 	bl	8000168 <__aeabi_fsub>
 8005364:	4601      	mov	r1, r0
 8005366:	4605      	mov	r5, r0
 8005368:	4630      	mov	r0, r6
 800536a:	f7fa fefd 	bl	8000168 <__aeabi_fsub>
 800536e:	498d      	ldr	r1, [pc, #564]	@ (80055a4 <__ieee754_rem_pio2f+0x2b0>)
 8005370:	e7e8      	b.n	8005344 <__ieee754_rem_pio2f+0x50>
 8005372:	f7fa fefb 	bl	800016c <__addsf3>
 8005376:	42bd      	cmp	r5, r7
 8005378:	4606      	mov	r6, r0
 800537a:	d00f      	beq.n	800539c <__ieee754_rem_pio2f+0xa8>
 800537c:	4987      	ldr	r1, [pc, #540]	@ (800559c <__ieee754_rem_pio2f+0x2a8>)
 800537e:	f7fa fef5 	bl	800016c <__addsf3>
 8005382:	4601      	mov	r1, r0
 8005384:	4605      	mov	r5, r0
 8005386:	4630      	mov	r0, r6
 8005388:	f7fa feee 	bl	8000168 <__aeabi_fsub>
 800538c:	4983      	ldr	r1, [pc, #524]	@ (800559c <__ieee754_rem_pio2f+0x2a8>)
 800538e:	f7fa feed 	bl	800016c <__addsf3>
 8005392:	6025      	str	r5, [r4, #0]
 8005394:	6060      	str	r0, [r4, #4]
 8005396:	f04f 35ff 	mov.w	r5, #4294967295
 800539a:	e7d8      	b.n	800534e <__ieee754_rem_pio2f+0x5a>
 800539c:	4980      	ldr	r1, [pc, #512]	@ (80055a0 <__ieee754_rem_pio2f+0x2ac>)
 800539e:	f7fa fee5 	bl	800016c <__addsf3>
 80053a2:	4980      	ldr	r1, [pc, #512]	@ (80055a4 <__ieee754_rem_pio2f+0x2b0>)
 80053a4:	4606      	mov	r6, r0
 80053a6:	f7fa fee1 	bl	800016c <__addsf3>
 80053aa:	4601      	mov	r1, r0
 80053ac:	4605      	mov	r5, r0
 80053ae:	4630      	mov	r0, r6
 80053b0:	f7fa feda 	bl	8000168 <__aeabi_fsub>
 80053b4:	497b      	ldr	r1, [pc, #492]	@ (80055a4 <__ieee754_rem_pio2f+0x2b0>)
 80053b6:	e7ea      	b.n	800538e <__ieee754_rem_pio2f+0x9a>
 80053b8:	4a7b      	ldr	r2, [pc, #492]	@ (80055a8 <__ieee754_rem_pio2f+0x2b4>)
 80053ba:	4590      	cmp	r8, r2
 80053bc:	f200 8095 	bhi.w	80054ea <__ieee754_rem_pio2f+0x1f6>
 80053c0:	f000 f8fe 	bl	80055c0 <fabsf>
 80053c4:	4979      	ldr	r1, [pc, #484]	@ (80055ac <__ieee754_rem_pio2f+0x2b8>)
 80053c6:	4606      	mov	r6, r0
 80053c8:	f7fa ffd8 	bl	800037c <__aeabi_fmul>
 80053cc:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80053d0:	f7fa fecc 	bl	800016c <__addsf3>
 80053d4:	f7fb f9ae 	bl	8000734 <__aeabi_f2iz>
 80053d8:	4605      	mov	r5, r0
 80053da:	f7fa ff7b 	bl	80002d4 <__aeabi_i2f>
 80053de:	496d      	ldr	r1, [pc, #436]	@ (8005594 <__ieee754_rem_pio2f+0x2a0>)
 80053e0:	4681      	mov	r9, r0
 80053e2:	f7fa ffcb 	bl	800037c <__aeabi_fmul>
 80053e6:	4601      	mov	r1, r0
 80053e8:	4630      	mov	r0, r6
 80053ea:	f7fa febd 	bl	8000168 <__aeabi_fsub>
 80053ee:	496b      	ldr	r1, [pc, #428]	@ (800559c <__ieee754_rem_pio2f+0x2a8>)
 80053f0:	4607      	mov	r7, r0
 80053f2:	4648      	mov	r0, r9
 80053f4:	f7fa ffc2 	bl	800037c <__aeabi_fmul>
 80053f8:	2d1f      	cmp	r5, #31
 80053fa:	4606      	mov	r6, r0
 80053fc:	dc0e      	bgt.n	800541c <__ieee754_rem_pio2f+0x128>
 80053fe:	4a6c      	ldr	r2, [pc, #432]	@ (80055b0 <__ieee754_rem_pio2f+0x2bc>)
 8005400:	1e69      	subs	r1, r5, #1
 8005402:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8005406:	f02a 4300 	bic.w	r3, sl, #2147483648	@ 0x80000000
 800540a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800540e:	4293      	cmp	r3, r2
 8005410:	d004      	beq.n	800541c <__ieee754_rem_pio2f+0x128>
 8005412:	4631      	mov	r1, r6
 8005414:	4638      	mov	r0, r7
 8005416:	f7fa fea7 	bl	8000168 <__aeabi_fsub>
 800541a:	e00b      	b.n	8005434 <__ieee754_rem_pio2f+0x140>
 800541c:	4631      	mov	r1, r6
 800541e:	4638      	mov	r0, r7
 8005420:	f7fa fea2 	bl	8000168 <__aeabi_fsub>
 8005424:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8005428:	ebc3 53d8 	rsb	r3, r3, r8, lsr #23
 800542c:	2b08      	cmp	r3, #8
 800542e:	ea4f 5be8 	mov.w	fp, r8, asr #23
 8005432:	dc01      	bgt.n	8005438 <__ieee754_rem_pio2f+0x144>
 8005434:	6020      	str	r0, [r4, #0]
 8005436:	e026      	b.n	8005486 <__ieee754_rem_pio2f+0x192>
 8005438:	4959      	ldr	r1, [pc, #356]	@ (80055a0 <__ieee754_rem_pio2f+0x2ac>)
 800543a:	4648      	mov	r0, r9
 800543c:	f7fa ff9e 	bl	800037c <__aeabi_fmul>
 8005440:	4606      	mov	r6, r0
 8005442:	4601      	mov	r1, r0
 8005444:	4638      	mov	r0, r7
 8005446:	f7fa fe8f 	bl	8000168 <__aeabi_fsub>
 800544a:	4601      	mov	r1, r0
 800544c:	4680      	mov	r8, r0
 800544e:	4638      	mov	r0, r7
 8005450:	f7fa fe8a 	bl	8000168 <__aeabi_fsub>
 8005454:	4631      	mov	r1, r6
 8005456:	f7fa fe87 	bl	8000168 <__aeabi_fsub>
 800545a:	4606      	mov	r6, r0
 800545c:	4951      	ldr	r1, [pc, #324]	@ (80055a4 <__ieee754_rem_pio2f+0x2b0>)
 800545e:	4648      	mov	r0, r9
 8005460:	f7fa ff8c 	bl	800037c <__aeabi_fmul>
 8005464:	4631      	mov	r1, r6
 8005466:	f7fa fe7f 	bl	8000168 <__aeabi_fsub>
 800546a:	4601      	mov	r1, r0
 800546c:	4606      	mov	r6, r0
 800546e:	4640      	mov	r0, r8
 8005470:	f7fa fe7a 	bl	8000168 <__aeabi_fsub>
 8005474:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8005478:	ebab 0b03 	sub.w	fp, fp, r3
 800547c:	f1bb 0f19 	cmp.w	fp, #25
 8005480:	dc18      	bgt.n	80054b4 <__ieee754_rem_pio2f+0x1c0>
 8005482:	4647      	mov	r7, r8
 8005484:	6020      	str	r0, [r4, #0]
 8005486:	f8d4 8000 	ldr.w	r8, [r4]
 800548a:	4638      	mov	r0, r7
 800548c:	4641      	mov	r1, r8
 800548e:	f7fa fe6b 	bl	8000168 <__aeabi_fsub>
 8005492:	4631      	mov	r1, r6
 8005494:	f7fa fe68 	bl	8000168 <__aeabi_fsub>
 8005498:	f1ba 0f00 	cmp.w	sl, #0
 800549c:	6060      	str	r0, [r4, #4]
 800549e:	f6bf af56 	bge.w	800534e <__ieee754_rem_pio2f+0x5a>
 80054a2:	f108 4800 	add.w	r8, r8, #2147483648	@ 0x80000000
 80054a6:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 80054aa:	f8c4 8000 	str.w	r8, [r4]
 80054ae:	6060      	str	r0, [r4, #4]
 80054b0:	426d      	negs	r5, r5
 80054b2:	e74c      	b.n	800534e <__ieee754_rem_pio2f+0x5a>
 80054b4:	493f      	ldr	r1, [pc, #252]	@ (80055b4 <__ieee754_rem_pio2f+0x2c0>)
 80054b6:	4648      	mov	r0, r9
 80054b8:	f7fa ff60 	bl	800037c <__aeabi_fmul>
 80054bc:	4606      	mov	r6, r0
 80054be:	4601      	mov	r1, r0
 80054c0:	4640      	mov	r0, r8
 80054c2:	f7fa fe51 	bl	8000168 <__aeabi_fsub>
 80054c6:	4601      	mov	r1, r0
 80054c8:	4607      	mov	r7, r0
 80054ca:	4640      	mov	r0, r8
 80054cc:	f7fa fe4c 	bl	8000168 <__aeabi_fsub>
 80054d0:	4631      	mov	r1, r6
 80054d2:	f7fa fe49 	bl	8000168 <__aeabi_fsub>
 80054d6:	4606      	mov	r6, r0
 80054d8:	4937      	ldr	r1, [pc, #220]	@ (80055b8 <__ieee754_rem_pio2f+0x2c4>)
 80054da:	4648      	mov	r0, r9
 80054dc:	f7fa ff4e 	bl	800037c <__aeabi_fmul>
 80054e0:	4631      	mov	r1, r6
 80054e2:	f7fa fe41 	bl	8000168 <__aeabi_fsub>
 80054e6:	4606      	mov	r6, r0
 80054e8:	e793      	b.n	8005412 <__ieee754_rem_pio2f+0x11e>
 80054ea:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 80054ee:	d305      	bcc.n	80054fc <__ieee754_rem_pio2f+0x208>
 80054f0:	4601      	mov	r1, r0
 80054f2:	f7fa fe39 	bl	8000168 <__aeabi_fsub>
 80054f6:	6060      	str	r0, [r4, #4]
 80054f8:	6020      	str	r0, [r4, #0]
 80054fa:	e708      	b.n	800530e <__ieee754_rem_pio2f+0x1a>
 80054fc:	ea4f 56e8 	mov.w	r6, r8, asr #23
 8005500:	3e86      	subs	r6, #134	@ 0x86
 8005502:	eba8 58c6 	sub.w	r8, r8, r6, lsl #23
 8005506:	4640      	mov	r0, r8
 8005508:	f7fb f914 	bl	8000734 <__aeabi_f2iz>
 800550c:	f7fa fee2 	bl	80002d4 <__aeabi_i2f>
 8005510:	4601      	mov	r1, r0
 8005512:	9003      	str	r0, [sp, #12]
 8005514:	4640      	mov	r0, r8
 8005516:	f7fa fe27 	bl	8000168 <__aeabi_fsub>
 800551a:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800551e:	f7fa ff2d 	bl	800037c <__aeabi_fmul>
 8005522:	4607      	mov	r7, r0
 8005524:	f7fb f906 	bl	8000734 <__aeabi_f2iz>
 8005528:	f7fa fed4 	bl	80002d4 <__aeabi_i2f>
 800552c:	4601      	mov	r1, r0
 800552e:	9004      	str	r0, [sp, #16]
 8005530:	4605      	mov	r5, r0
 8005532:	4638      	mov	r0, r7
 8005534:	f7fa fe18 	bl	8000168 <__aeabi_fsub>
 8005538:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800553c:	f7fa ff1e 	bl	800037c <__aeabi_fmul>
 8005540:	2100      	movs	r1, #0
 8005542:	9005      	str	r0, [sp, #20]
 8005544:	f7fb f8ae 	bl	80006a4 <__aeabi_fcmpeq>
 8005548:	b1f0      	cbz	r0, 8005588 <__ieee754_rem_pio2f+0x294>
 800554a:	2100      	movs	r1, #0
 800554c:	4628      	mov	r0, r5
 800554e:	f7fb f8a9 	bl	80006a4 <__aeabi_fcmpeq>
 8005552:	2800      	cmp	r0, #0
 8005554:	bf14      	ite	ne
 8005556:	2301      	movne	r3, #1
 8005558:	2302      	moveq	r3, #2
 800555a:	4a18      	ldr	r2, [pc, #96]	@ (80055bc <__ieee754_rem_pio2f+0x2c8>)
 800555c:	4621      	mov	r1, r4
 800555e:	9201      	str	r2, [sp, #4]
 8005560:	2202      	movs	r2, #2
 8005562:	a803      	add	r0, sp, #12
 8005564:	9200      	str	r2, [sp, #0]
 8005566:	4632      	mov	r2, r6
 8005568:	f000 f898 	bl	800569c <__kernel_rem_pio2f>
 800556c:	f1ba 0f00 	cmp.w	sl, #0
 8005570:	4605      	mov	r5, r0
 8005572:	f6bf aeec 	bge.w	800534e <__ieee754_rem_pio2f+0x5a>
 8005576:	6823      	ldr	r3, [r4, #0]
 8005578:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800557c:	6023      	str	r3, [r4, #0]
 800557e:	6863      	ldr	r3, [r4, #4]
 8005580:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8005584:	6063      	str	r3, [r4, #4]
 8005586:	e793      	b.n	80054b0 <__ieee754_rem_pio2f+0x1bc>
 8005588:	2303      	movs	r3, #3
 800558a:	e7e6      	b.n	800555a <__ieee754_rem_pio2f+0x266>
 800558c:	3f490fd8 	.word	0x3f490fd8
 8005590:	4016cbe3 	.word	0x4016cbe3
 8005594:	3fc90f80 	.word	0x3fc90f80
 8005598:	3fc90fd0 	.word	0x3fc90fd0
 800559c:	37354443 	.word	0x37354443
 80055a0:	37354400 	.word	0x37354400
 80055a4:	2e85a308 	.word	0x2e85a308
 80055a8:	43490f80 	.word	0x43490f80
 80055ac:	3f22f984 	.word	0x3f22f984
 80055b0:	08005cd0 	.word	0x08005cd0
 80055b4:	2e85a300 	.word	0x2e85a300
 80055b8:	248d3132 	.word	0x248d3132
 80055bc:	08005d50 	.word	0x08005d50

080055c0 <fabsf>:
 80055c0:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80055c4:	4770      	bx	lr
	...

080055c8 <scalbnf>:
 80055c8:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80055cc:	b538      	push	{r3, r4, r5, lr}
 80055ce:	4603      	mov	r3, r0
 80055d0:	460d      	mov	r5, r1
 80055d2:	4604      	mov	r4, r0
 80055d4:	d02e      	beq.n	8005634 <scalbnf+0x6c>
 80055d6:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80055da:	d304      	bcc.n	80055e6 <scalbnf+0x1e>
 80055dc:	4601      	mov	r1, r0
 80055de:	f7fa fdc5 	bl	800016c <__addsf3>
 80055e2:	4603      	mov	r3, r0
 80055e4:	e026      	b.n	8005634 <scalbnf+0x6c>
 80055e6:	f010 4fff 	tst.w	r0, #2139095040	@ 0x7f800000
 80055ea:	d118      	bne.n	800561e <scalbnf+0x56>
 80055ec:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
 80055f0:	f7fa fec4 	bl	800037c <__aeabi_fmul>
 80055f4:	4a17      	ldr	r2, [pc, #92]	@ (8005654 <scalbnf+0x8c>)
 80055f6:	4603      	mov	r3, r0
 80055f8:	4295      	cmp	r5, r2
 80055fa:	db0c      	blt.n	8005616 <scalbnf+0x4e>
 80055fc:	4604      	mov	r4, r0
 80055fe:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8005602:	3a19      	subs	r2, #25
 8005604:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8005608:	428d      	cmp	r5, r1
 800560a:	dd0a      	ble.n	8005622 <scalbnf+0x5a>
 800560c:	4912      	ldr	r1, [pc, #72]	@ (8005658 <scalbnf+0x90>)
 800560e:	4618      	mov	r0, r3
 8005610:	f361 001e 	bfi	r0, r1, #0, #31
 8005614:	e000      	b.n	8005618 <scalbnf+0x50>
 8005616:	4911      	ldr	r1, [pc, #68]	@ (800565c <scalbnf+0x94>)
 8005618:	f7fa feb0 	bl	800037c <__aeabi_fmul>
 800561c:	e7e1      	b.n	80055e2 <scalbnf+0x1a>
 800561e:	0dd2      	lsrs	r2, r2, #23
 8005620:	e7f0      	b.n	8005604 <scalbnf+0x3c>
 8005622:	1951      	adds	r1, r2, r5
 8005624:	29fe      	cmp	r1, #254	@ 0xfe
 8005626:	dcf1      	bgt.n	800560c <scalbnf+0x44>
 8005628:	2900      	cmp	r1, #0
 800562a:	dd05      	ble.n	8005638 <scalbnf+0x70>
 800562c:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 8005630:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 8005634:	4618      	mov	r0, r3
 8005636:	bd38      	pop	{r3, r4, r5, pc}
 8005638:	f111 0f16 	cmn.w	r1, #22
 800563c:	da01      	bge.n	8005642 <scalbnf+0x7a>
 800563e:	4907      	ldr	r1, [pc, #28]	@ (800565c <scalbnf+0x94>)
 8005640:	e7e5      	b.n	800560e <scalbnf+0x46>
 8005642:	f101 0019 	add.w	r0, r1, #25
 8005646:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 800564a:	f04f 514c 	mov.w	r1, #855638016	@ 0x33000000
 800564e:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 8005652:	e7e1      	b.n	8005618 <scalbnf+0x50>
 8005654:	ffff3cb0 	.word	0xffff3cb0
 8005658:	7149f2ca 	.word	0x7149f2ca
 800565c:	0da24260 	.word	0x0da24260

08005660 <with_errnof>:
 8005660:	b538      	push	{r3, r4, r5, lr}
 8005662:	4604      	mov	r4, r0
 8005664:	460d      	mov	r5, r1
 8005666:	f7ff f865 	bl	8004734 <__errno>
 800566a:	6005      	str	r5, [r0, #0]
 800566c:	4620      	mov	r0, r4
 800566e:	bd38      	pop	{r3, r4, r5, pc}

08005670 <xflowf>:
 8005670:	b508      	push	{r3, lr}
 8005672:	b140      	cbz	r0, 8005686 <xflowf+0x16>
 8005674:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 8005678:	f7fa fe80 	bl	800037c <__aeabi_fmul>
 800567c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005680:	2122      	movs	r1, #34	@ 0x22
 8005682:	f7ff bfed 	b.w	8005660 <with_errnof>
 8005686:	4608      	mov	r0, r1
 8005688:	e7f6      	b.n	8005678 <xflowf+0x8>

0800568a <__math_uflowf>:
 800568a:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 800568e:	f7ff bfef 	b.w	8005670 <xflowf>

08005692 <__math_oflowf>:
 8005692:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 8005696:	f7ff bfeb 	b.w	8005670 <xflowf>
	...

0800569c <__kernel_rem_pio2f>:
 800569c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056a0:	b0db      	sub	sp, #364	@ 0x16c
 80056a2:	9202      	str	r2, [sp, #8]
 80056a4:	9304      	str	r3, [sp, #16]
 80056a6:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 80056a8:	4bac      	ldr	r3, [pc, #688]	@ (800595c <__kernel_rem_pio2f+0x2c0>)
 80056aa:	9005      	str	r0, [sp, #20]
 80056ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056b0:	9100      	str	r1, [sp, #0]
 80056b2:	9301      	str	r3, [sp, #4]
 80056b4:	9b04      	ldr	r3, [sp, #16]
 80056b6:	3b01      	subs	r3, #1
 80056b8:	9303      	str	r3, [sp, #12]
 80056ba:	9b02      	ldr	r3, [sp, #8]
 80056bc:	1d1a      	adds	r2, r3, #4
 80056be:	f2c0 8099 	blt.w	80057f4 <__kernel_rem_pio2f+0x158>
 80056c2:	1edc      	subs	r4, r3, #3
 80056c4:	bf48      	it	mi
 80056c6:	1d1c      	addmi	r4, r3, #4
 80056c8:	10e4      	asrs	r4, r4, #3
 80056ca:	2500      	movs	r5, #0
 80056cc:	f04f 0b00 	mov.w	fp, #0
 80056d0:	1c67      	adds	r7, r4, #1
 80056d2:	00fb      	lsls	r3, r7, #3
 80056d4:	9306      	str	r3, [sp, #24]
 80056d6:	9b02      	ldr	r3, [sp, #8]
 80056d8:	9a03      	ldr	r2, [sp, #12]
 80056da:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 80056de:	9b01      	ldr	r3, [sp, #4]
 80056e0:	eba4 0802 	sub.w	r8, r4, r2
 80056e4:	eb03 0902 	add.w	r9, r3, r2
 80056e8:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 80056ea:	ae1e      	add	r6, sp, #120	@ 0x78
 80056ec:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 80056f0:	454d      	cmp	r5, r9
 80056f2:	f340 8081 	ble.w	80057f8 <__kernel_rem_pio2f+0x15c>
 80056f6:	9a04      	ldr	r2, [sp, #16]
 80056f8:	ab1e      	add	r3, sp, #120	@ 0x78
 80056fa:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 80056fe:	f04f 0900 	mov.w	r9, #0
 8005702:	2300      	movs	r3, #0
 8005704:	f50d 7a8c 	add.w	sl, sp, #280	@ 0x118
 8005708:	9a01      	ldr	r2, [sp, #4]
 800570a:	4591      	cmp	r9, r2
 800570c:	f340 809a 	ble.w	8005844 <__kernel_rem_pio2f+0x1a8>
 8005710:	4613      	mov	r3, r2
 8005712:	aa0a      	add	r2, sp, #40	@ 0x28
 8005714:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005718:	9308      	str	r3, [sp, #32]
 800571a:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 800571c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005720:	9c01      	ldr	r4, [sp, #4]
 8005722:	9307      	str	r3, [sp, #28]
 8005724:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 8005728:	4646      	mov	r6, r8
 800572a:	4625      	mov	r5, r4
 800572c:	f04f 4987 	mov.w	r9, #1132462080	@ 0x43800000
 8005730:	ab5a      	add	r3, sp, #360	@ 0x168
 8005732:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005736:	f853 bc50 	ldr.w	fp, [r3, #-80]
 800573a:	f50d 7a8c 	add.w	sl, sp, #280	@ 0x118
 800573e:	2d00      	cmp	r5, #0
 8005740:	f300 8085 	bgt.w	800584e <__kernel_rem_pio2f+0x1b2>
 8005744:	4639      	mov	r1, r7
 8005746:	4658      	mov	r0, fp
 8005748:	f7ff ff3e 	bl	80055c8 <scalbnf>
 800574c:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 8005750:	4605      	mov	r5, r0
 8005752:	f7fa fe13 	bl	800037c <__aeabi_fmul>
 8005756:	f000 fa3f 	bl	8005bd8 <floorf>
 800575a:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 800575e:	f7fa fe0d 	bl	800037c <__aeabi_fmul>
 8005762:	4601      	mov	r1, r0
 8005764:	4628      	mov	r0, r5
 8005766:	f7fa fcff 	bl	8000168 <__aeabi_fsub>
 800576a:	4605      	mov	r5, r0
 800576c:	f7fa ffe2 	bl	8000734 <__aeabi_f2iz>
 8005770:	4606      	mov	r6, r0
 8005772:	f7fa fdaf 	bl	80002d4 <__aeabi_i2f>
 8005776:	4601      	mov	r1, r0
 8005778:	4628      	mov	r0, r5
 800577a:	f7fa fcf5 	bl	8000168 <__aeabi_fsub>
 800577e:	2f00      	cmp	r7, #0
 8005780:	4681      	mov	r9, r0
 8005782:	f340 8081 	ble.w	8005888 <__kernel_rem_pio2f+0x1ec>
 8005786:	1e62      	subs	r2, r4, #1
 8005788:	ab0a      	add	r3, sp, #40	@ 0x28
 800578a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800578e:	f1c7 0108 	rsb	r1, r7, #8
 8005792:	fa45 f301 	asr.w	r3, r5, r1
 8005796:	441e      	add	r6, r3
 8005798:	408b      	lsls	r3, r1
 800579a:	1aed      	subs	r5, r5, r3
 800579c:	ab0a      	add	r3, sp, #40	@ 0x28
 800579e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80057a2:	f1c7 0307 	rsb	r3, r7, #7
 80057a6:	411d      	asrs	r5, r3
 80057a8:	2d00      	cmp	r5, #0
 80057aa:	dd7a      	ble.n	80058a2 <__kernel_rem_pio2f+0x206>
 80057ac:	2200      	movs	r2, #0
 80057ae:	4692      	mov	sl, r2
 80057b0:	3601      	adds	r6, #1
 80057b2:	4294      	cmp	r4, r2
 80057b4:	f300 80aa 	bgt.w	800590c <__kernel_rem_pio2f+0x270>
 80057b8:	2f00      	cmp	r7, #0
 80057ba:	dd05      	ble.n	80057c8 <__kernel_rem_pio2f+0x12c>
 80057bc:	2f01      	cmp	r7, #1
 80057be:	f000 80b6 	beq.w	800592e <__kernel_rem_pio2f+0x292>
 80057c2:	2f02      	cmp	r7, #2
 80057c4:	f000 80bd 	beq.w	8005942 <__kernel_rem_pio2f+0x2a6>
 80057c8:	2d02      	cmp	r5, #2
 80057ca:	d16a      	bne.n	80058a2 <__kernel_rem_pio2f+0x206>
 80057cc:	4649      	mov	r1, r9
 80057ce:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80057d2:	f7fa fcc9 	bl	8000168 <__aeabi_fsub>
 80057d6:	4681      	mov	r9, r0
 80057d8:	f1ba 0f00 	cmp.w	sl, #0
 80057dc:	d061      	beq.n	80058a2 <__kernel_rem_pio2f+0x206>
 80057de:	4639      	mov	r1, r7
 80057e0:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80057e4:	f7ff fef0 	bl	80055c8 <scalbnf>
 80057e8:	4601      	mov	r1, r0
 80057ea:	4648      	mov	r0, r9
 80057ec:	f7fa fcbc 	bl	8000168 <__aeabi_fsub>
 80057f0:	4681      	mov	r9, r0
 80057f2:	e056      	b.n	80058a2 <__kernel_rem_pio2f+0x206>
 80057f4:	2400      	movs	r4, #0
 80057f6:	e768      	b.n	80056ca <__kernel_rem_pio2f+0x2e>
 80057f8:	eb18 0f05 	cmn.w	r8, r5
 80057fc:	d407      	bmi.n	800580e <__kernel_rem_pio2f+0x172>
 80057fe:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 8005802:	f7fa fd67 	bl	80002d4 <__aeabi_i2f>
 8005806:	f846 0b04 	str.w	r0, [r6], #4
 800580a:	3501      	adds	r5, #1
 800580c:	e770      	b.n	80056f0 <__kernel_rem_pio2f+0x54>
 800580e:	4658      	mov	r0, fp
 8005810:	e7f9      	b.n	8005806 <__kernel_rem_pio2f+0x16a>
 8005812:	9307      	str	r3, [sp, #28]
 8005814:	9b05      	ldr	r3, [sp, #20]
 8005816:	f85b 1d04 	ldr.w	r1, [fp, #-4]!
 800581a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800581e:	f7fa fdad 	bl	800037c <__aeabi_fmul>
 8005822:	4601      	mov	r1, r0
 8005824:	4630      	mov	r0, r6
 8005826:	f7fa fca1 	bl	800016c <__addsf3>
 800582a:	4606      	mov	r6, r0
 800582c:	9b07      	ldr	r3, [sp, #28]
 800582e:	f108 0801 	add.w	r8, r8, #1
 8005832:	9a03      	ldr	r2, [sp, #12]
 8005834:	4590      	cmp	r8, r2
 8005836:	ddec      	ble.n	8005812 <__kernel_rem_pio2f+0x176>
 8005838:	f84a 6b04 	str.w	r6, [sl], #4
 800583c:	f109 0901 	add.w	r9, r9, #1
 8005840:	3504      	adds	r5, #4
 8005842:	e761      	b.n	8005708 <__kernel_rem_pio2f+0x6c>
 8005844:	46ab      	mov	fp, r5
 8005846:	461e      	mov	r6, r3
 8005848:	f04f 0800 	mov.w	r8, #0
 800584c:	e7f1      	b.n	8005832 <__kernel_rem_pio2f+0x196>
 800584e:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 8005852:	4658      	mov	r0, fp
 8005854:	f7fa fd92 	bl	800037c <__aeabi_fmul>
 8005858:	f7fa ff6c 	bl	8000734 <__aeabi_f2iz>
 800585c:	f7fa fd3a 	bl	80002d4 <__aeabi_i2f>
 8005860:	4649      	mov	r1, r9
 8005862:	9009      	str	r0, [sp, #36]	@ 0x24
 8005864:	f7fa fd8a 	bl	800037c <__aeabi_fmul>
 8005868:	4601      	mov	r1, r0
 800586a:	4658      	mov	r0, fp
 800586c:	f7fa fc7c 	bl	8000168 <__aeabi_fsub>
 8005870:	f7fa ff60 	bl	8000734 <__aeabi_f2iz>
 8005874:	3d01      	subs	r5, #1
 8005876:	f846 0b04 	str.w	r0, [r6], #4
 800587a:	f85a 1025 	ldr.w	r1, [sl, r5, lsl #2]
 800587e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005880:	f7fa fc74 	bl	800016c <__addsf3>
 8005884:	4683      	mov	fp, r0
 8005886:	e75a      	b.n	800573e <__kernel_rem_pio2f+0xa2>
 8005888:	d105      	bne.n	8005896 <__kernel_rem_pio2f+0x1fa>
 800588a:	1e63      	subs	r3, r4, #1
 800588c:	aa0a      	add	r2, sp, #40	@ 0x28
 800588e:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8005892:	11ed      	asrs	r5, r5, #7
 8005894:	e788      	b.n	80057a8 <__kernel_rem_pio2f+0x10c>
 8005896:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800589a:	f7fa ff21 	bl	80006e0 <__aeabi_fcmpge>
 800589e:	4605      	mov	r5, r0
 80058a0:	bb90      	cbnz	r0, 8005908 <__kernel_rem_pio2f+0x26c>
 80058a2:	2100      	movs	r1, #0
 80058a4:	4648      	mov	r0, r9
 80058a6:	f7fa fefd 	bl	80006a4 <__aeabi_fcmpeq>
 80058aa:	2800      	cmp	r0, #0
 80058ac:	f000 8090 	beq.w	80059d0 <__kernel_rem_pio2f+0x334>
 80058b0:	2200      	movs	r2, #0
 80058b2:	1e63      	subs	r3, r4, #1
 80058b4:	9901      	ldr	r1, [sp, #4]
 80058b6:	428b      	cmp	r3, r1
 80058b8:	da4a      	bge.n	8005950 <__kernel_rem_pio2f+0x2b4>
 80058ba:	2a00      	cmp	r2, #0
 80058bc:	d076      	beq.n	80059ac <__kernel_rem_pio2f+0x310>
 80058be:	3c01      	subs	r4, #1
 80058c0:	ab0a      	add	r3, sp, #40	@ 0x28
 80058c2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80058c6:	3f08      	subs	r7, #8
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d0f8      	beq.n	80058be <__kernel_rem_pio2f+0x222>
 80058cc:	4639      	mov	r1, r7
 80058ce:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80058d2:	f7ff fe79 	bl	80055c8 <scalbnf>
 80058d6:	46a2      	mov	sl, r4
 80058d8:	4607      	mov	r7, r0
 80058da:	f04f 596e 	mov.w	r9, #998244352	@ 0x3b800000
 80058de:	f50d 788c 	add.w	r8, sp, #280	@ 0x118
 80058e2:	f1ba 0f00 	cmp.w	sl, #0
 80058e6:	f280 80a1 	bge.w	8005a2c <__kernel_rem_pio2f+0x390>
 80058ea:	4627      	mov	r7, r4
 80058ec:	2200      	movs	r2, #0
 80058ee:	2f00      	cmp	r7, #0
 80058f0:	f2c0 80cb 	blt.w	8005a8a <__kernel_rem_pio2f+0x3ee>
 80058f4:	a946      	add	r1, sp, #280	@ 0x118
 80058f6:	4690      	mov	r8, r2
 80058f8:	f04f 0a00 	mov.w	sl, #0
 80058fc:	4b18      	ldr	r3, [pc, #96]	@ (8005960 <__kernel_rem_pio2f+0x2c4>)
 80058fe:	eb01 0b87 	add.w	fp, r1, r7, lsl #2
 8005902:	eba4 0907 	sub.w	r9, r4, r7
 8005906:	e0b4      	b.n	8005a72 <__kernel_rem_pio2f+0x3d6>
 8005908:	2502      	movs	r5, #2
 800590a:	e74f      	b.n	80057ac <__kernel_rem_pio2f+0x110>
 800590c:	f858 3b04 	ldr.w	r3, [r8], #4
 8005910:	f1ba 0f00 	cmp.w	sl, #0
 8005914:	d108      	bne.n	8005928 <__kernel_rem_pio2f+0x28c>
 8005916:	b123      	cbz	r3, 8005922 <__kernel_rem_pio2f+0x286>
 8005918:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800591c:	f848 3c04 	str.w	r3, [r8, #-4]
 8005920:	2301      	movs	r3, #1
 8005922:	469a      	mov	sl, r3
 8005924:	3201      	adds	r2, #1
 8005926:	e744      	b.n	80057b2 <__kernel_rem_pio2f+0x116>
 8005928:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 800592c:	e7f6      	b.n	800591c <__kernel_rem_pio2f+0x280>
 800592e:	1e62      	subs	r2, r4, #1
 8005930:	ab0a      	add	r3, sp, #40	@ 0x28
 8005932:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005936:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800593a:	a90a      	add	r1, sp, #40	@ 0x28
 800593c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005940:	e742      	b.n	80057c8 <__kernel_rem_pio2f+0x12c>
 8005942:	1e62      	subs	r2, r4, #1
 8005944:	ab0a      	add	r3, sp, #40	@ 0x28
 8005946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800594a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800594e:	e7f4      	b.n	800593a <__kernel_rem_pio2f+0x29e>
 8005950:	a90a      	add	r1, sp, #40	@ 0x28
 8005952:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005956:	3b01      	subs	r3, #1
 8005958:	430a      	orrs	r2, r1
 800595a:	e7ab      	b.n	80058b4 <__kernel_rem_pio2f+0x218>
 800595c:	08006094 	.word	0x08006094
 8005960:	08006068 	.word	0x08006068
 8005964:	3301      	adds	r3, #1
 8005966:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800596a:	2900      	cmp	r1, #0
 800596c:	d0fa      	beq.n	8005964 <__kernel_rem_pio2f+0x2c8>
 800596e:	9a04      	ldr	r2, [sp, #16]
 8005970:	a91e      	add	r1, sp, #120	@ 0x78
 8005972:	18a2      	adds	r2, r4, r2
 8005974:	1c66      	adds	r6, r4, #1
 8005976:	eb01 0582 	add.w	r5, r1, r2, lsl #2
 800597a:	441c      	add	r4, r3
 800597c:	f50d 798c 	add.w	r9, sp, #280	@ 0x118
 8005980:	42b4      	cmp	r4, r6
 8005982:	f6ff aecf 	blt.w	8005724 <__kernel_rem_pio2f+0x88>
 8005986:	9b07      	ldr	r3, [sp, #28]
 8005988:	46ab      	mov	fp, r5
 800598a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800598e:	f7fa fca1 	bl	80002d4 <__aeabi_i2f>
 8005992:	f04f 0a00 	mov.w	sl, #0
 8005996:	f04f 0800 	mov.w	r8, #0
 800599a:	6028      	str	r0, [r5, #0]
 800599c:	9b03      	ldr	r3, [sp, #12]
 800599e:	459a      	cmp	sl, r3
 80059a0:	dd07      	ble.n	80059b2 <__kernel_rem_pio2f+0x316>
 80059a2:	f849 8026 	str.w	r8, [r9, r6, lsl #2]
 80059a6:	3504      	adds	r5, #4
 80059a8:	3601      	adds	r6, #1
 80059aa:	e7e9      	b.n	8005980 <__kernel_rem_pio2f+0x2e4>
 80059ac:	2301      	movs	r3, #1
 80059ae:	9a08      	ldr	r2, [sp, #32]
 80059b0:	e7d9      	b.n	8005966 <__kernel_rem_pio2f+0x2ca>
 80059b2:	9b05      	ldr	r3, [sp, #20]
 80059b4:	f85b 0904 	ldr.w	r0, [fp], #-4
 80059b8:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 80059bc:	f7fa fcde 	bl	800037c <__aeabi_fmul>
 80059c0:	4601      	mov	r1, r0
 80059c2:	4640      	mov	r0, r8
 80059c4:	f7fa fbd2 	bl	800016c <__addsf3>
 80059c8:	f10a 0a01 	add.w	sl, sl, #1
 80059cc:	4680      	mov	r8, r0
 80059ce:	e7e5      	b.n	800599c <__kernel_rem_pio2f+0x300>
 80059d0:	9b06      	ldr	r3, [sp, #24]
 80059d2:	9a02      	ldr	r2, [sp, #8]
 80059d4:	4648      	mov	r0, r9
 80059d6:	1a99      	subs	r1, r3, r2
 80059d8:	f7ff fdf6 	bl	80055c8 <scalbnf>
 80059dc:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 80059e0:	4680      	mov	r8, r0
 80059e2:	f7fa fe7d 	bl	80006e0 <__aeabi_fcmpge>
 80059e6:	b1f8      	cbz	r0, 8005a28 <__kernel_rem_pio2f+0x38c>
 80059e8:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 80059ec:	4640      	mov	r0, r8
 80059ee:	f7fa fcc5 	bl	800037c <__aeabi_fmul>
 80059f2:	f7fa fe9f 	bl	8000734 <__aeabi_f2iz>
 80059f6:	f7fa fc6d 	bl	80002d4 <__aeabi_i2f>
 80059fa:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 80059fe:	4681      	mov	r9, r0
 8005a00:	f7fa fcbc 	bl	800037c <__aeabi_fmul>
 8005a04:	4601      	mov	r1, r0
 8005a06:	4640      	mov	r0, r8
 8005a08:	f7fa fbae 	bl	8000168 <__aeabi_fsub>
 8005a0c:	f7fa fe92 	bl	8000734 <__aeabi_f2iz>
 8005a10:	ab0a      	add	r3, sp, #40	@ 0x28
 8005a12:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005a16:	4648      	mov	r0, r9
 8005a18:	3401      	adds	r4, #1
 8005a1a:	3708      	adds	r7, #8
 8005a1c:	f7fa fe8a 	bl	8000734 <__aeabi_f2iz>
 8005a20:	ab0a      	add	r3, sp, #40	@ 0x28
 8005a22:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005a26:	e751      	b.n	80058cc <__kernel_rem_pio2f+0x230>
 8005a28:	4640      	mov	r0, r8
 8005a2a:	e7f7      	b.n	8005a1c <__kernel_rem_pio2f+0x380>
 8005a2c:	ab0a      	add	r3, sp, #40	@ 0x28
 8005a2e:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8005a32:	f7fa fc4f 	bl	80002d4 <__aeabi_i2f>
 8005a36:	4639      	mov	r1, r7
 8005a38:	f7fa fca0 	bl	800037c <__aeabi_fmul>
 8005a3c:	4649      	mov	r1, r9
 8005a3e:	f848 002a 	str.w	r0, [r8, sl, lsl #2]
 8005a42:	4638      	mov	r0, r7
 8005a44:	f7fa fc9a 	bl	800037c <__aeabi_fmul>
 8005a48:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005a4c:	4607      	mov	r7, r0
 8005a4e:	e748      	b.n	80058e2 <__kernel_rem_pio2f+0x246>
 8005a50:	f853 0b04 	ldr.w	r0, [r3], #4
 8005a54:	f85b 1b04 	ldr.w	r1, [fp], #4
 8005a58:	9203      	str	r2, [sp, #12]
 8005a5a:	9302      	str	r3, [sp, #8]
 8005a5c:	f7fa fc8e 	bl	800037c <__aeabi_fmul>
 8005a60:	4601      	mov	r1, r0
 8005a62:	4640      	mov	r0, r8
 8005a64:	f7fa fb82 	bl	800016c <__addsf3>
 8005a68:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8005a6c:	4680      	mov	r8, r0
 8005a6e:	f10a 0a01 	add.w	sl, sl, #1
 8005a72:	9901      	ldr	r1, [sp, #4]
 8005a74:	458a      	cmp	sl, r1
 8005a76:	dc01      	bgt.n	8005a7c <__kernel_rem_pio2f+0x3e0>
 8005a78:	45ca      	cmp	sl, r9
 8005a7a:	dde9      	ble.n	8005a50 <__kernel_rem_pio2f+0x3b4>
 8005a7c:	ab5a      	add	r3, sp, #360	@ 0x168
 8005a7e:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 8005a82:	f849 8ca0 	str.w	r8, [r9, #-160]
 8005a86:	3f01      	subs	r7, #1
 8005a88:	e731      	b.n	80058ee <__kernel_rem_pio2f+0x252>
 8005a8a:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8005a8c:	2b02      	cmp	r3, #2
 8005a8e:	dc07      	bgt.n	8005aa0 <__kernel_rem_pio2f+0x404>
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	dc4e      	bgt.n	8005b32 <__kernel_rem_pio2f+0x496>
 8005a94:	d02e      	beq.n	8005af4 <__kernel_rem_pio2f+0x458>
 8005a96:	f006 0007 	and.w	r0, r6, #7
 8005a9a:	b05b      	add	sp, #364	@ 0x16c
 8005a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aa0:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8005aa2:	2b03      	cmp	r3, #3
 8005aa4:	d1f7      	bne.n	8005a96 <__kernel_rem_pio2f+0x3fa>
 8005aa6:	f10d 0bc8 	add.w	fp, sp, #200	@ 0xc8
 8005aaa:	eb0b 0784 	add.w	r7, fp, r4, lsl #2
 8005aae:	46b8      	mov	r8, r7
 8005ab0:	46a2      	mov	sl, r4
 8005ab2:	f1ba 0f00 	cmp.w	sl, #0
 8005ab6:	dc49      	bgt.n	8005b4c <__kernel_rem_pio2f+0x4b0>
 8005ab8:	46a1      	mov	r9, r4
 8005aba:	f1b9 0f01 	cmp.w	r9, #1
 8005abe:	dc60      	bgt.n	8005b82 <__kernel_rem_pio2f+0x4e6>
 8005ac0:	2000      	movs	r0, #0
 8005ac2:	2c01      	cmp	r4, #1
 8005ac4:	dc76      	bgt.n	8005bb4 <__kernel_rem_pio2f+0x518>
 8005ac6:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 8005ac8:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 8005aca:	2d00      	cmp	r5, #0
 8005acc:	d178      	bne.n	8005bc0 <__kernel_rem_pio2f+0x524>
 8005ace:	9900      	ldr	r1, [sp, #0]
 8005ad0:	600a      	str	r2, [r1, #0]
 8005ad2:	460a      	mov	r2, r1
 8005ad4:	604b      	str	r3, [r1, #4]
 8005ad6:	6090      	str	r0, [r2, #8]
 8005ad8:	e7dd      	b.n	8005a96 <__kernel_rem_pio2f+0x3fa>
 8005ada:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 8005ade:	f7fa fb45 	bl	800016c <__addsf3>
 8005ae2:	3c01      	subs	r4, #1
 8005ae4:	2c00      	cmp	r4, #0
 8005ae6:	daf8      	bge.n	8005ada <__kernel_rem_pio2f+0x43e>
 8005ae8:	b10d      	cbz	r5, 8005aee <__kernel_rem_pio2f+0x452>
 8005aea:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8005aee:	9b00      	ldr	r3, [sp, #0]
 8005af0:	6018      	str	r0, [r3, #0]
 8005af2:	e7d0      	b.n	8005a96 <__kernel_rem_pio2f+0x3fa>
 8005af4:	2000      	movs	r0, #0
 8005af6:	af32      	add	r7, sp, #200	@ 0xc8
 8005af8:	e7f4      	b.n	8005ae4 <__kernel_rem_pio2f+0x448>
 8005afa:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 8005afe:	f7fa fb35 	bl	800016c <__addsf3>
 8005b02:	f108 38ff 	add.w	r8, r8, #4294967295
 8005b06:	f1b8 0f00 	cmp.w	r8, #0
 8005b0a:	daf6      	bge.n	8005afa <__kernel_rem_pio2f+0x45e>
 8005b0c:	b1ad      	cbz	r5, 8005b3a <__kernel_rem_pio2f+0x49e>
 8005b0e:	f100 4300 	add.w	r3, r0, #2147483648	@ 0x80000000
 8005b12:	9a00      	ldr	r2, [sp, #0]
 8005b14:	4601      	mov	r1, r0
 8005b16:	6013      	str	r3, [r2, #0]
 8005b18:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 8005b1a:	f7fa fb25 	bl	8000168 <__aeabi_fsub>
 8005b1e:	f04f 0801 	mov.w	r8, #1
 8005b22:	4544      	cmp	r4, r8
 8005b24:	da0b      	bge.n	8005b3e <__kernel_rem_pio2f+0x4a2>
 8005b26:	b10d      	cbz	r5, 8005b2c <__kernel_rem_pio2f+0x490>
 8005b28:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8005b2c:	9b00      	ldr	r3, [sp, #0]
 8005b2e:	6058      	str	r0, [r3, #4]
 8005b30:	e7b1      	b.n	8005a96 <__kernel_rem_pio2f+0x3fa>
 8005b32:	46a0      	mov	r8, r4
 8005b34:	2000      	movs	r0, #0
 8005b36:	af32      	add	r7, sp, #200	@ 0xc8
 8005b38:	e7e5      	b.n	8005b06 <__kernel_rem_pio2f+0x46a>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	e7e9      	b.n	8005b12 <__kernel_rem_pio2f+0x476>
 8005b3e:	f857 1f04 	ldr.w	r1, [r7, #4]!
 8005b42:	f7fa fb13 	bl	800016c <__addsf3>
 8005b46:	f108 0801 	add.w	r8, r8, #1
 8005b4a:	e7ea      	b.n	8005b22 <__kernel_rem_pio2f+0x486>
 8005b4c:	f8d8 3000 	ldr.w	r3, [r8]
 8005b50:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8005b54:	4619      	mov	r1, r3
 8005b56:	4610      	mov	r0, r2
 8005b58:	9302      	str	r3, [sp, #8]
 8005b5a:	9201      	str	r2, [sp, #4]
 8005b5c:	f7fa fb06 	bl	800016c <__addsf3>
 8005b60:	9a01      	ldr	r2, [sp, #4]
 8005b62:	4601      	mov	r1, r0
 8005b64:	4681      	mov	r9, r0
 8005b66:	4610      	mov	r0, r2
 8005b68:	f7fa fafe 	bl	8000168 <__aeabi_fsub>
 8005b6c:	9b02      	ldr	r3, [sp, #8]
 8005b6e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005b72:	4619      	mov	r1, r3
 8005b74:	f7fa fafa 	bl	800016c <__addsf3>
 8005b78:	f848 0904 	str.w	r0, [r8], #-4
 8005b7c:	f8c8 9000 	str.w	r9, [r8]
 8005b80:	e797      	b.n	8005ab2 <__kernel_rem_pio2f+0x416>
 8005b82:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8005b86:	f8d7 a000 	ldr.w	sl, [r7]
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	4651      	mov	r1, sl
 8005b8e:	9301      	str	r3, [sp, #4]
 8005b90:	f7fa faec 	bl	800016c <__addsf3>
 8005b94:	9b01      	ldr	r3, [sp, #4]
 8005b96:	4601      	mov	r1, r0
 8005b98:	4680      	mov	r8, r0
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f7fa fae4 	bl	8000168 <__aeabi_fsub>
 8005ba0:	4651      	mov	r1, sl
 8005ba2:	f7fa fae3 	bl	800016c <__addsf3>
 8005ba6:	f847 0904 	str.w	r0, [r7], #-4
 8005baa:	f109 39ff 	add.w	r9, r9, #4294967295
 8005bae:	f8c7 8000 	str.w	r8, [r7]
 8005bb2:	e782      	b.n	8005aba <__kernel_rem_pio2f+0x41e>
 8005bb4:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 8005bb8:	f7fa fad8 	bl	800016c <__addsf3>
 8005bbc:	3c01      	subs	r4, #1
 8005bbe:	e780      	b.n	8005ac2 <__kernel_rem_pio2f+0x426>
 8005bc0:	9900      	ldr	r1, [sp, #0]
 8005bc2:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 8005bc6:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8005bca:	600a      	str	r2, [r1, #0]
 8005bcc:	604b      	str	r3, [r1, #4]
 8005bce:	460a      	mov	r2, r1
 8005bd0:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8005bd4:	e77f      	b.n	8005ad6 <__kernel_rem_pio2f+0x43a>
 8005bd6:	bf00      	nop

08005bd8 <floorf>:
 8005bd8:	b570      	push	{r4, r5, r6, lr}
 8005bda:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 8005bde:	3d7f      	subs	r5, #127	@ 0x7f
 8005be0:	2d16      	cmp	r5, #22
 8005be2:	4601      	mov	r1, r0
 8005be4:	4604      	mov	r4, r0
 8005be6:	f020 4600 	bic.w	r6, r0, #2147483648	@ 0x80000000
 8005bea:	dc26      	bgt.n	8005c3a <floorf+0x62>
 8005bec:	2d00      	cmp	r5, #0
 8005bee:	da0f      	bge.n	8005c10 <floorf+0x38>
 8005bf0:	4917      	ldr	r1, [pc, #92]	@ (8005c50 <floorf+0x78>)
 8005bf2:	f7fa fabb 	bl	800016c <__addsf3>
 8005bf6:	2100      	movs	r1, #0
 8005bf8:	f7fa fd7c 	bl	80006f4 <__aeabi_fcmpgt>
 8005bfc:	b130      	cbz	r0, 8005c0c <floorf+0x34>
 8005bfe:	2c00      	cmp	r4, #0
 8005c00:	da23      	bge.n	8005c4a <floorf+0x72>
 8005c02:	2e00      	cmp	r6, #0
 8005c04:	4c13      	ldr	r4, [pc, #76]	@ (8005c54 <floorf+0x7c>)
 8005c06:	bf08      	it	eq
 8005c08:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8005c0c:	4621      	mov	r1, r4
 8005c0e:	e01a      	b.n	8005c46 <floorf+0x6e>
 8005c10:	4e11      	ldr	r6, [pc, #68]	@ (8005c58 <floorf+0x80>)
 8005c12:	412e      	asrs	r6, r5
 8005c14:	4230      	tst	r0, r6
 8005c16:	d016      	beq.n	8005c46 <floorf+0x6e>
 8005c18:	490d      	ldr	r1, [pc, #52]	@ (8005c50 <floorf+0x78>)
 8005c1a:	f7fa faa7 	bl	800016c <__addsf3>
 8005c1e:	2100      	movs	r1, #0
 8005c20:	f7fa fd68 	bl	80006f4 <__aeabi_fcmpgt>
 8005c24:	2800      	cmp	r0, #0
 8005c26:	d0f1      	beq.n	8005c0c <floorf+0x34>
 8005c28:	2c00      	cmp	r4, #0
 8005c2a:	bfbe      	ittt	lt
 8005c2c:	f44f 0300 	movlt.w	r3, #8388608	@ 0x800000
 8005c30:	412b      	asrlt	r3, r5
 8005c32:	18e4      	addlt	r4, r4, r3
 8005c34:	ea24 0406 	bic.w	r4, r4, r6
 8005c38:	e7e8      	b.n	8005c0c <floorf+0x34>
 8005c3a:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 8005c3e:	d302      	bcc.n	8005c46 <floorf+0x6e>
 8005c40:	f7fa fa94 	bl	800016c <__addsf3>
 8005c44:	4601      	mov	r1, r0
 8005c46:	4608      	mov	r0, r1
 8005c48:	bd70      	pop	{r4, r5, r6, pc}
 8005c4a:	2400      	movs	r4, #0
 8005c4c:	e7de      	b.n	8005c0c <floorf+0x34>
 8005c4e:	bf00      	nop
 8005c50:	7149f2ca 	.word	0x7149f2ca
 8005c54:	bf800000 	.word	0xbf800000
 8005c58:	007fffff 	.word	0x007fffff

08005c5c <_init>:
 8005c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c5e:	bf00      	nop
 8005c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c62:	bc08      	pop	{r3}
 8005c64:	469e      	mov	lr, r3
 8005c66:	4770      	bx	lr

08005c68 <_fini>:
 8005c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c6a:	bf00      	nop
 8005c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c6e:	bc08      	pop	{r3}
 8005c70:	469e      	mov	lr, r3
 8005c72:	4770      	bx	lr
