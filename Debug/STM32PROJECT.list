
STM32PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e04  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008fc  08009f10  08009f10  0000af10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a80c  0800a80c  0000c084  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a80c  0800a80c  0000b80c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a814  0800a814  0000c084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a814  0800a814  0000b814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a818  0800a818  0000b818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  0800a81c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004058  20000084  0800a8a0  0000c084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200040dc  0800a8a0  0000c0dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f652  00000000  00000000  0000c0ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f3e  00000000  00000000  0001b6ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c8  00000000  00000000  0001e640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d39  00000000  00000000  0001f708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a458  00000000  00000000  00020441  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015408  00000000  00000000  0003a899  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dff3  00000000  00000000  0004fca1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ddc94  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055a8  00000000  00000000  000ddcd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000e3280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000084 	.word	0x20000084
 8000128:	00000000 	.word	0x00000000
 800012c:	08009ef8 	.word	0x08009ef8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000088 	.word	0x20000088
 8000148:	08009ef8 	.word	0x08009ef8

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <__aeabi_frsub>:
 8000170:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000174:	e002      	b.n	800017c <__addsf3>
 8000176:	bf00      	nop

08000178 <__aeabi_fsub>:
 8000178:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800017c <__addsf3>:
 800017c:	0042      	lsls	r2, r0, #1
 800017e:	bf1f      	itttt	ne
 8000180:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000184:	ea92 0f03 	teqne	r2, r3
 8000188:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800018c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000190:	d06a      	beq.n	8000268 <__addsf3+0xec>
 8000192:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000196:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800019a:	bfc1      	itttt	gt
 800019c:	18d2      	addgt	r2, r2, r3
 800019e:	4041      	eorgt	r1, r0
 80001a0:	4048      	eorgt	r0, r1
 80001a2:	4041      	eorgt	r1, r0
 80001a4:	bfb8      	it	lt
 80001a6:	425b      	neglt	r3, r3
 80001a8:	2b19      	cmp	r3, #25
 80001aa:	bf88      	it	hi
 80001ac:	4770      	bxhi	lr
 80001ae:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80001b2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001b6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4240      	negne	r0, r0
 80001be:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001c6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001ca:	bf18      	it	ne
 80001cc:	4249      	negne	r1, r1
 80001ce:	ea92 0f03 	teq	r2, r3
 80001d2:	d03f      	beq.n	8000254 <__addsf3+0xd8>
 80001d4:	f1a2 0201 	sub.w	r2, r2, #1
 80001d8:	fa41 fc03 	asr.w	ip, r1, r3
 80001dc:	eb10 000c 	adds.w	r0, r0, ip
 80001e0:	f1c3 0320 	rsb	r3, r3, #32
 80001e4:	fa01 f103 	lsl.w	r1, r1, r3
 80001e8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001ec:	d502      	bpl.n	80001f4 <__addsf3+0x78>
 80001ee:	4249      	negs	r1, r1
 80001f0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001f4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001f8:	d313      	bcc.n	8000222 <__addsf3+0xa6>
 80001fa:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001fe:	d306      	bcc.n	800020e <__addsf3+0x92>
 8000200:	0840      	lsrs	r0, r0, #1
 8000202:	ea4f 0131 	mov.w	r1, r1, rrx
 8000206:	f102 0201 	add.w	r2, r2, #1
 800020a:	2afe      	cmp	r2, #254	@ 0xfe
 800020c:	d251      	bcs.n	80002b2 <__addsf3+0x136>
 800020e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000212:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000216:	bf08      	it	eq
 8000218:	f020 0001 	biceq.w	r0, r0, #1
 800021c:	ea40 0003 	orr.w	r0, r0, r3
 8000220:	4770      	bx	lr
 8000222:	0049      	lsls	r1, r1, #1
 8000224:	eb40 0000 	adc.w	r0, r0, r0
 8000228:	3a01      	subs	r2, #1
 800022a:	bf28      	it	cs
 800022c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000230:	d2ed      	bcs.n	800020e <__addsf3+0x92>
 8000232:	fab0 fc80 	clz	ip, r0
 8000236:	f1ac 0c08 	sub.w	ip, ip, #8
 800023a:	ebb2 020c 	subs.w	r2, r2, ip
 800023e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000242:	bfaa      	itet	ge
 8000244:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000248:	4252      	neglt	r2, r2
 800024a:	4318      	orrge	r0, r3
 800024c:	bfbc      	itt	lt
 800024e:	40d0      	lsrlt	r0, r2
 8000250:	4318      	orrlt	r0, r3
 8000252:	4770      	bx	lr
 8000254:	f092 0f00 	teq	r2, #0
 8000258:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800025c:	bf06      	itte	eq
 800025e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000262:	3201      	addeq	r2, #1
 8000264:	3b01      	subne	r3, #1
 8000266:	e7b5      	b.n	80001d4 <__addsf3+0x58>
 8000268:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800026c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000270:	bf18      	it	ne
 8000272:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000276:	d021      	beq.n	80002bc <__addsf3+0x140>
 8000278:	ea92 0f03 	teq	r2, r3
 800027c:	d004      	beq.n	8000288 <__addsf3+0x10c>
 800027e:	f092 0f00 	teq	r2, #0
 8000282:	bf08      	it	eq
 8000284:	4608      	moveq	r0, r1
 8000286:	4770      	bx	lr
 8000288:	ea90 0f01 	teq	r0, r1
 800028c:	bf1c      	itt	ne
 800028e:	2000      	movne	r0, #0
 8000290:	4770      	bxne	lr
 8000292:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000296:	d104      	bne.n	80002a2 <__addsf3+0x126>
 8000298:	0040      	lsls	r0, r0, #1
 800029a:	bf28      	it	cs
 800029c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80002a0:	4770      	bx	lr
 80002a2:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80002a6:	bf3c      	itt	cc
 80002a8:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80002ac:	4770      	bxcc	lr
 80002ae:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80002b2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80002b6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002ba:	4770      	bx	lr
 80002bc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002c0:	bf16      	itet	ne
 80002c2:	4608      	movne	r0, r1
 80002c4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002c8:	4601      	movne	r1, r0
 80002ca:	0242      	lsls	r2, r0, #9
 80002cc:	bf06      	itte	eq
 80002ce:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002d2:	ea90 0f01 	teqeq	r0, r1
 80002d6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002da:	4770      	bx	lr

080002dc <__aeabi_ui2f>:
 80002dc:	f04f 0300 	mov.w	r3, #0
 80002e0:	e004      	b.n	80002ec <__aeabi_i2f+0x8>
 80002e2:	bf00      	nop

080002e4 <__aeabi_i2f>:
 80002e4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002e8:	bf48      	it	mi
 80002ea:	4240      	negmi	r0, r0
 80002ec:	ea5f 0c00 	movs.w	ip, r0
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002f8:	4601      	mov	r1, r0
 80002fa:	f04f 0000 	mov.w	r0, #0
 80002fe:	e01c      	b.n	800033a <__aeabi_l2f+0x2a>

08000300 <__aeabi_ul2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f04f 0300 	mov.w	r3, #0
 800030c:	e00a      	b.n	8000324 <__aeabi_l2f+0x14>
 800030e:	bf00      	nop

08000310 <__aeabi_l2f>:
 8000310:	ea50 0201 	orrs.w	r2, r0, r1
 8000314:	bf08      	it	eq
 8000316:	4770      	bxeq	lr
 8000318:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800031c:	d502      	bpl.n	8000324 <__aeabi_l2f+0x14>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	ea5f 0c01 	movs.w	ip, r1
 8000328:	bf02      	ittt	eq
 800032a:	4684      	moveq	ip, r0
 800032c:	4601      	moveq	r1, r0
 800032e:	2000      	moveq	r0, #0
 8000330:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000334:	bf08      	it	eq
 8000336:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800033a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800033e:	fabc f28c 	clz	r2, ip
 8000342:	3a08      	subs	r2, #8
 8000344:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000348:	db10      	blt.n	800036c <__aeabi_l2f+0x5c>
 800034a:	fa01 fc02 	lsl.w	ip, r1, r2
 800034e:	4463      	add	r3, ip
 8000350:	fa00 fc02 	lsl.w	ip, r0, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800035c:	fa20 f202 	lsr.w	r2, r0, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	f020 0001 	biceq.w	r0, r0, #1
 800036a:	4770      	bx	lr
 800036c:	f102 0220 	add.w	r2, r2, #32
 8000370:	fa01 fc02 	lsl.w	ip, r1, r2
 8000374:	f1c2 0220 	rsb	r2, r2, #32
 8000378:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800037c:	fa21 f202 	lsr.w	r2, r1, r2
 8000380:	eb43 0002 	adc.w	r0, r3, r2
 8000384:	bf08      	it	eq
 8000386:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800038a:	4770      	bx	lr

0800038c <__aeabi_fmul>:
 800038c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000390:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000394:	bf1e      	ittt	ne
 8000396:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800039a:	ea92 0f0c 	teqne	r2, ip
 800039e:	ea93 0f0c 	teqne	r3, ip
 80003a2:	d06f      	beq.n	8000484 <__aeabi_fmul+0xf8>
 80003a4:	441a      	add	r2, r3
 80003a6:	ea80 0c01 	eor.w	ip, r0, r1
 80003aa:	0240      	lsls	r0, r0, #9
 80003ac:	bf18      	it	ne
 80003ae:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003b2:	d01e      	beq.n	80003f2 <__aeabi_fmul+0x66>
 80003b4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80003b8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003bc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003c0:	fba0 3101 	umull	r3, r1, r0, r1
 80003c4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003c8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003cc:	bf3e      	ittt	cc
 80003ce:	0049      	lslcc	r1, r1, #1
 80003d0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003d4:	005b      	lslcc	r3, r3, #1
 80003d6:	ea40 0001 	orr.w	r0, r0, r1
 80003da:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003de:	2afd      	cmp	r2, #253	@ 0xfd
 80003e0:	d81d      	bhi.n	800041e <__aeabi_fmul+0x92>
 80003e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ea:	bf08      	it	eq
 80003ec:	f020 0001 	biceq.w	r0, r0, #1
 80003f0:	4770      	bx	lr
 80003f2:	f090 0f00 	teq	r0, #0
 80003f6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003fa:	bf08      	it	eq
 80003fc:	0249      	lsleq	r1, r1, #9
 80003fe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000402:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000406:	3a7f      	subs	r2, #127	@ 0x7f
 8000408:	bfc2      	ittt	gt
 800040a:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800040e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000412:	4770      	bxgt	lr
 8000414:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000418:	f04f 0300 	mov.w	r3, #0
 800041c:	3a01      	subs	r2, #1
 800041e:	dc5d      	bgt.n	80004dc <__aeabi_fmul+0x150>
 8000420:	f112 0f19 	cmn.w	r2, #25
 8000424:	bfdc      	itt	le
 8000426:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800042a:	4770      	bxle	lr
 800042c:	f1c2 0200 	rsb	r2, r2, #0
 8000430:	0041      	lsls	r1, r0, #1
 8000432:	fa21 f102 	lsr.w	r1, r1, r2
 8000436:	f1c2 0220 	rsb	r2, r2, #32
 800043a:	fa00 fc02 	lsl.w	ip, r0, r2
 800043e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000442:	f140 0000 	adc.w	r0, r0, #0
 8000446:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800044a:	bf08      	it	eq
 800044c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000450:	4770      	bx	lr
 8000452:	f092 0f00 	teq	r2, #0
 8000456:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800045a:	bf02      	ittt	eq
 800045c:	0040      	lsleq	r0, r0, #1
 800045e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000462:	3a01      	subeq	r2, #1
 8000464:	d0f9      	beq.n	800045a <__aeabi_fmul+0xce>
 8000466:	ea40 000c 	orr.w	r0, r0, ip
 800046a:	f093 0f00 	teq	r3, #0
 800046e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000472:	bf02      	ittt	eq
 8000474:	0049      	lsleq	r1, r1, #1
 8000476:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800047a:	3b01      	subeq	r3, #1
 800047c:	d0f9      	beq.n	8000472 <__aeabi_fmul+0xe6>
 800047e:	ea41 010c 	orr.w	r1, r1, ip
 8000482:	e78f      	b.n	80003a4 <__aeabi_fmul+0x18>
 8000484:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000488:	ea92 0f0c 	teq	r2, ip
 800048c:	bf18      	it	ne
 800048e:	ea93 0f0c 	teqne	r3, ip
 8000492:	d00a      	beq.n	80004aa <__aeabi_fmul+0x11e>
 8000494:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000498:	bf18      	it	ne
 800049a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800049e:	d1d8      	bne.n	8000452 <__aeabi_fmul+0xc6>
 80004a0:	ea80 0001 	eor.w	r0, r0, r1
 80004a4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004a8:	4770      	bx	lr
 80004aa:	f090 0f00 	teq	r0, #0
 80004ae:	bf17      	itett	ne
 80004b0:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80004b4:	4608      	moveq	r0, r1
 80004b6:	f091 0f00 	teqne	r1, #0
 80004ba:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80004be:	d014      	beq.n	80004ea <__aeabi_fmul+0x15e>
 80004c0:	ea92 0f0c 	teq	r2, ip
 80004c4:	d101      	bne.n	80004ca <__aeabi_fmul+0x13e>
 80004c6:	0242      	lsls	r2, r0, #9
 80004c8:	d10f      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004ca:	ea93 0f0c 	teq	r3, ip
 80004ce:	d103      	bne.n	80004d8 <__aeabi_fmul+0x14c>
 80004d0:	024b      	lsls	r3, r1, #9
 80004d2:	bf18      	it	ne
 80004d4:	4608      	movne	r0, r1
 80004d6:	d108      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004d8:	ea80 0001 	eor.w	r0, r0, r1
 80004dc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004e0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004e4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004e8:	4770      	bx	lr
 80004ea:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ee:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004f2:	4770      	bx	lr

080004f4 <__aeabi_fdiv>:
 80004f4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004fc:	bf1e      	ittt	ne
 80004fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000502:	ea92 0f0c 	teqne	r2, ip
 8000506:	ea93 0f0c 	teqne	r3, ip
 800050a:	d069      	beq.n	80005e0 <__aeabi_fdiv+0xec>
 800050c:	eba2 0203 	sub.w	r2, r2, r3
 8000510:	ea80 0c01 	eor.w	ip, r0, r1
 8000514:	0249      	lsls	r1, r1, #9
 8000516:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800051a:	d037      	beq.n	800058c <__aeabi_fdiv+0x98>
 800051c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000520:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000524:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000528:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800052c:	428b      	cmp	r3, r1
 800052e:	bf38      	it	cc
 8000530:	005b      	lslcc	r3, r3, #1
 8000532:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000536:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800053a:	428b      	cmp	r3, r1
 800053c:	bf24      	itt	cs
 800053e:	1a5b      	subcs	r3, r3, r1
 8000540:	ea40 000c 	orrcs.w	r0, r0, ip
 8000544:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000548:	bf24      	itt	cs
 800054a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800054e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000552:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000556:	bf24      	itt	cs
 8000558:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800055c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000560:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000564:	bf24      	itt	cs
 8000566:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800056a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800056e:	011b      	lsls	r3, r3, #4
 8000570:	bf18      	it	ne
 8000572:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000576:	d1e0      	bne.n	800053a <__aeabi_fdiv+0x46>
 8000578:	2afd      	cmp	r2, #253	@ 0xfd
 800057a:	f63f af50 	bhi.w	800041e <__aeabi_fmul+0x92>
 800057e:	428b      	cmp	r3, r1
 8000580:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000584:	bf08      	it	eq
 8000586:	f020 0001 	biceq.w	r0, r0, #1
 800058a:	4770      	bx	lr
 800058c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000590:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000594:	327f      	adds	r2, #127	@ 0x7f
 8000596:	bfc2      	ittt	gt
 8000598:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800059c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005a0:	4770      	bxgt	lr
 80005a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80005a6:	f04f 0300 	mov.w	r3, #0
 80005aa:	3a01      	subs	r2, #1
 80005ac:	e737      	b.n	800041e <__aeabi_fmul+0x92>
 80005ae:	f092 0f00 	teq	r2, #0
 80005b2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80005b6:	bf02      	ittt	eq
 80005b8:	0040      	lsleq	r0, r0, #1
 80005ba:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80005be:	3a01      	subeq	r2, #1
 80005c0:	d0f9      	beq.n	80005b6 <__aeabi_fdiv+0xc2>
 80005c2:	ea40 000c 	orr.w	r0, r0, ip
 80005c6:	f093 0f00 	teq	r3, #0
 80005ca:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005ce:	bf02      	ittt	eq
 80005d0:	0049      	lsleq	r1, r1, #1
 80005d2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005d6:	3b01      	subeq	r3, #1
 80005d8:	d0f9      	beq.n	80005ce <__aeabi_fdiv+0xda>
 80005da:	ea41 010c 	orr.w	r1, r1, ip
 80005de:	e795      	b.n	800050c <__aeabi_fdiv+0x18>
 80005e0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005e4:	ea92 0f0c 	teq	r2, ip
 80005e8:	d108      	bne.n	80005fc <__aeabi_fdiv+0x108>
 80005ea:	0242      	lsls	r2, r0, #9
 80005ec:	f47f af7d 	bne.w	80004ea <__aeabi_fmul+0x15e>
 80005f0:	ea93 0f0c 	teq	r3, ip
 80005f4:	f47f af70 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 80005f8:	4608      	mov	r0, r1
 80005fa:	e776      	b.n	80004ea <__aeabi_fmul+0x15e>
 80005fc:	ea93 0f0c 	teq	r3, ip
 8000600:	d104      	bne.n	800060c <__aeabi_fdiv+0x118>
 8000602:	024b      	lsls	r3, r1, #9
 8000604:	f43f af4c 	beq.w	80004a0 <__aeabi_fmul+0x114>
 8000608:	4608      	mov	r0, r1
 800060a:	e76e      	b.n	80004ea <__aeabi_fmul+0x15e>
 800060c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000610:	bf18      	it	ne
 8000612:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000616:	d1ca      	bne.n	80005ae <__aeabi_fdiv+0xba>
 8000618:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800061c:	f47f af5c 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 8000620:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000624:	f47f af3c 	bne.w	80004a0 <__aeabi_fmul+0x114>
 8000628:	e75f      	b.n	80004ea <__aeabi_fmul+0x15e>
 800062a:	bf00      	nop

0800062c <__gesf2>:
 800062c:	f04f 3cff 	mov.w	ip, #4294967295
 8000630:	e006      	b.n	8000640 <__cmpsf2+0x4>
 8000632:	bf00      	nop

08000634 <__lesf2>:
 8000634:	f04f 0c01 	mov.w	ip, #1
 8000638:	e002      	b.n	8000640 <__cmpsf2+0x4>
 800063a:	bf00      	nop

0800063c <__cmpsf2>:
 800063c:	f04f 0c01 	mov.w	ip, #1
 8000640:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000644:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000648:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800064c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000650:	bf18      	it	ne
 8000652:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000656:	d011      	beq.n	800067c <__cmpsf2+0x40>
 8000658:	b001      	add	sp, #4
 800065a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800065e:	bf18      	it	ne
 8000660:	ea90 0f01 	teqne	r0, r1
 8000664:	bf58      	it	pl
 8000666:	ebb2 0003 	subspl.w	r0, r2, r3
 800066a:	bf88      	it	hi
 800066c:	17c8      	asrhi	r0, r1, #31
 800066e:	bf38      	it	cc
 8000670:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000674:	bf18      	it	ne
 8000676:	f040 0001 	orrne.w	r0, r0, #1
 800067a:	4770      	bx	lr
 800067c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000680:	d102      	bne.n	8000688 <__cmpsf2+0x4c>
 8000682:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000686:	d105      	bne.n	8000694 <__cmpsf2+0x58>
 8000688:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800068c:	d1e4      	bne.n	8000658 <__cmpsf2+0x1c>
 800068e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000692:	d0e1      	beq.n	8000658 <__cmpsf2+0x1c>
 8000694:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop

0800069c <__aeabi_cfrcmple>:
 800069c:	4684      	mov	ip, r0
 800069e:	4608      	mov	r0, r1
 80006a0:	4661      	mov	r1, ip
 80006a2:	e7ff      	b.n	80006a4 <__aeabi_cfcmpeq>

080006a4 <__aeabi_cfcmpeq>:
 80006a4:	b50f      	push	{r0, r1, r2, r3, lr}
 80006a6:	f7ff ffc9 	bl	800063c <__cmpsf2>
 80006aa:	2800      	cmp	r0, #0
 80006ac:	bf48      	it	mi
 80006ae:	f110 0f00 	cmnmi.w	r0, #0
 80006b2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006b4 <__aeabi_fcmpeq>:
 80006b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006b8:	f7ff fff4 	bl	80006a4 <__aeabi_cfcmpeq>
 80006bc:	bf0c      	ite	eq
 80006be:	2001      	moveq	r0, #1
 80006c0:	2000      	movne	r0, #0
 80006c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006c6:	bf00      	nop

080006c8 <__aeabi_fcmplt>:
 80006c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006cc:	f7ff ffea 	bl	80006a4 <__aeabi_cfcmpeq>
 80006d0:	bf34      	ite	cc
 80006d2:	2001      	movcc	r0, #1
 80006d4:	2000      	movcs	r0, #0
 80006d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006da:	bf00      	nop

080006dc <__aeabi_fcmple>:
 80006dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e0:	f7ff ffe0 	bl	80006a4 <__aeabi_cfcmpeq>
 80006e4:	bf94      	ite	ls
 80006e6:	2001      	movls	r0, #1
 80006e8:	2000      	movhi	r0, #0
 80006ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ee:	bf00      	nop

080006f0 <__aeabi_fcmpge>:
 80006f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f4:	f7ff ffd2 	bl	800069c <__aeabi_cfrcmple>
 80006f8:	bf94      	ite	ls
 80006fa:	2001      	movls	r0, #1
 80006fc:	2000      	movhi	r0, #0
 80006fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000702:	bf00      	nop

08000704 <__aeabi_fcmpgt>:
 8000704:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000708:	f7ff ffc8 	bl	800069c <__aeabi_cfrcmple>
 800070c:	bf34      	ite	cc
 800070e:	2001      	movcc	r0, #1
 8000710:	2000      	movcs	r0, #0
 8000712:	f85d fb08 	ldr.w	pc, [sp], #8
 8000716:	bf00      	nop

08000718 <__aeabi_fcmpun>:
 8000718:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800071c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000720:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000724:	d102      	bne.n	800072c <__aeabi_fcmpun+0x14>
 8000726:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800072a:	d108      	bne.n	800073e <__aeabi_fcmpun+0x26>
 800072c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000730:	d102      	bne.n	8000738 <__aeabi_fcmpun+0x20>
 8000732:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000736:	d102      	bne.n	800073e <__aeabi_fcmpun+0x26>
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	4770      	bx	lr
 800073e:	f04f 0001 	mov.w	r0, #1
 8000742:	4770      	bx	lr

08000744 <__aeabi_f2iz>:
 8000744:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000748:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800074c:	d30f      	bcc.n	800076e <__aeabi_f2iz+0x2a>
 800074e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000752:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000756:	d90d      	bls.n	8000774 <__aeabi_f2iz+0x30>
 8000758:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800075c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000760:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000764:	fa23 f002 	lsr.w	r0, r3, r2
 8000768:	bf18      	it	ne
 800076a:	4240      	negne	r0, r0
 800076c:	4770      	bx	lr
 800076e:	f04f 0000 	mov.w	r0, #0
 8000772:	4770      	bx	lr
 8000774:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000778:	d101      	bne.n	800077e <__aeabi_f2iz+0x3a>
 800077a:	0242      	lsls	r2, r0, #9
 800077c:	d105      	bne.n	800078a <__aeabi_f2iz+0x46>
 800077e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000782:	bf08      	it	eq
 8000784:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000788:	4770      	bx	lr
 800078a:	f04f 0000 	mov.w	r0, #0
 800078e:	4770      	bx	lr

08000790 <__aeabi_f2uiz>:
 8000790:	0042      	lsls	r2, r0, #1
 8000792:	d20e      	bcs.n	80007b2 <__aeabi_f2uiz+0x22>
 8000794:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000798:	d30b      	bcc.n	80007b2 <__aeabi_f2uiz+0x22>
 800079a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800079e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80007a2:	d409      	bmi.n	80007b8 <__aeabi_f2uiz+0x28>
 80007a4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80007a8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80007ac:	fa23 f002 	lsr.w	r0, r3, r2
 80007b0:	4770      	bx	lr
 80007b2:	f04f 0000 	mov.w	r0, #0
 80007b6:	4770      	bx	lr
 80007b8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80007bc:	d101      	bne.n	80007c2 <__aeabi_f2uiz+0x32>
 80007be:	0242      	lsls	r2, r0, #9
 80007c0:	d102      	bne.n	80007c8 <__aeabi_f2uiz+0x38>
 80007c2:	f04f 30ff 	mov.w	r0, #4294967295
 80007c6:	4770      	bx	lr
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop

080007d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000808 <MX_DMA_Init+0x38>)
 80007d8:	695b      	ldr	r3, [r3, #20]
 80007da:	4a0b      	ldr	r2, [pc, #44]	@ (8000808 <MX_DMA_Init+0x38>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	6153      	str	r3, [r2, #20]
 80007e2:	4b09      	ldr	r3, [pc, #36]	@ (8000808 <MX_DMA_Init+0x38>)
 80007e4:	695b      	ldr	r3, [r3, #20]
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2100      	movs	r1, #0
 80007f2:	2010      	movs	r0, #16
 80007f4:	f004 fc0d 	bl	8005012 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80007f8:	2010      	movs	r0, #16
 80007fa:	f004 fc26 	bl	800504a <HAL_NVIC_EnableIRQ>

}
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40021000 	.word	0x40021000

0800080c <DrawBlock>:
static uint32_t gameTickLast; // For controlling game speed
#define GAME_TICK_MS 100      // Snake moves every 200ms, adjust for speed

// Helper function to draw a block on the OLED
static void DrawBlock(int16_t x, int16_t y, uint8_t color)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af02      	add	r7, sp, #8
 8000812:	4603      	mov	r3, r0
 8000814:	80fb      	strh	r3, [r7, #6]
 8000816:	460b      	mov	r3, r1
 8000818:	80bb      	strh	r3, [r7, #4]
 800081a:	4613      	mov	r3, r2
 800081c:	70fb      	strb	r3, [r7, #3]
    OLED_DrawFilledRectangle(x * SNAKE_BLOCK_SIZE, y * SNAKE_BLOCK_SIZE, SNAKE_BLOCK_SIZE, SNAKE_BLOCK_SIZE, color);
 800081e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000822:	0098      	lsls	r0, r3, #2
 8000824:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000828:	0099      	lsls	r1, r3, #2
 800082a:	78fb      	ldrb	r3, [r7, #3]
 800082c:	9300      	str	r3, [sp, #0]
 800082e:	2304      	movs	r3, #4
 8000830:	2204      	movs	r2, #4
 8000832:	f003 ff06 	bl	8004642 <OLED_DrawFilledRectangle>
}
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
	...

08000840 <Snake_GenerateFood>:

// Function to generate food at a random position
static void Snake_GenerateFood()
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
    bool food_on_snake;
    do
    {
        food_on_snake = false;
 8000846:	2300      	movs	r3, #0
 8000848:	71fb      	strb	r3, [r7, #7]
        food.pos.x = rand() % GAME_AREA_WIDTH;
 800084a:	f006 ff29 	bl	80076a0 <rand>
 800084e:	4603      	mov	r3, r0
 8000850:	425a      	negs	r2, r3
 8000852:	f003 031f 	and.w	r3, r3, #31
 8000856:	f002 021f 	and.w	r2, r2, #31
 800085a:	bf58      	it	pl
 800085c:	4253      	negpl	r3, r2
 800085e:	b21a      	sxth	r2, r3
 8000860:	4b1d      	ldr	r3, [pc, #116]	@ (80008d8 <Snake_GenerateFood+0x98>)
 8000862:	801a      	strh	r2, [r3, #0]
        food.pos.y = rand() % GAME_AREA_HEIGHT;
 8000864:	f006 ff1c 	bl	80076a0 <rand>
 8000868:	4603      	mov	r3, r0
 800086a:	425a      	negs	r2, r3
 800086c:	f003 030f 	and.w	r3, r3, #15
 8000870:	f002 020f 	and.w	r2, r2, #15
 8000874:	bf58      	it	pl
 8000876:	4253      	negpl	r3, r2
 8000878:	b21a      	sxth	r2, r3
 800087a:	4b17      	ldr	r3, [pc, #92]	@ (80008d8 <Snake_GenerateFood+0x98>)
 800087c:	805a      	strh	r2, [r3, #2]
        // Check if food is generated on the snake
        for (uint16_t i = 0; i < snake.length; i++)
 800087e:	2300      	movs	r3, #0
 8000880:	80bb      	strh	r3, [r7, #4]
 8000882:	e019      	b.n	80008b8 <Snake_GenerateFood+0x78>
        {
            if (snake.body[i].x == food.pos.x && snake.body[i].y == food.pos.y)
 8000884:	88bb      	ldrh	r3, [r7, #4]
 8000886:	4a15      	ldr	r2, [pc, #84]	@ (80008dc <Snake_GenerateFood+0x9c>)
 8000888:	f932 2023 	ldrsh.w	r2, [r2, r3, lsl #2]
 800088c:	4b12      	ldr	r3, [pc, #72]	@ (80008d8 <Snake_GenerateFood+0x98>)
 800088e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000892:	429a      	cmp	r2, r3
 8000894:	d10d      	bne.n	80008b2 <Snake_GenerateFood+0x72>
 8000896:	88bb      	ldrh	r3, [r7, #4]
 8000898:	4a10      	ldr	r2, [pc, #64]	@ (80008dc <Snake_GenerateFood+0x9c>)
 800089a:	009b      	lsls	r3, r3, #2
 800089c:	4413      	add	r3, r2
 800089e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80008a2:	4b0d      	ldr	r3, [pc, #52]	@ (80008d8 <Snake_GenerateFood+0x98>)
 80008a4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80008a8:	429a      	cmp	r2, r3
 80008aa:	d102      	bne.n	80008b2 <Snake_GenerateFood+0x72>
            {
                food_on_snake = true;
 80008ac:	2301      	movs	r3, #1
 80008ae:	71fb      	strb	r3, [r7, #7]
                break;
 80008b0:	e008      	b.n	80008c4 <Snake_GenerateFood+0x84>
        for (uint16_t i = 0; i < snake.length; i++)
 80008b2:	88bb      	ldrh	r3, [r7, #4]
 80008b4:	3301      	adds	r3, #1
 80008b6:	80bb      	strh	r3, [r7, #4]
 80008b8:	4b08      	ldr	r3, [pc, #32]	@ (80008dc <Snake_GenerateFood+0x9c>)
 80008ba:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 80008be:	88ba      	ldrh	r2, [r7, #4]
 80008c0:	429a      	cmp	r2, r3
 80008c2:	d3df      	bcc.n	8000884 <Snake_GenerateFood+0x44>
            }
        }
    } while (food_on_snake);
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d1bd      	bne.n	8000846 <Snake_GenerateFood+0x6>
    food.active = true;
 80008ca:	4b03      	ldr	r3, [pc, #12]	@ (80008d8 <Snake_GenerateFood+0x98>)
 80008cc:	2201      	movs	r2, #1
 80008ce:	711a      	strb	r2, [r3, #4]
}
 80008d0:	bf00      	nop
 80008d2:	3708      	adds	r7, #8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20000234 	.word	0x20000234
 80008dc:	200000a0 	.word	0x200000a0

080008e0 <Snake_InitGame>:

void Snake_InitGame(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
    // Seed the random number generator (optional, but good for variety)
    // srand(HAL_GetTick()); // HAL_GetTick might not be random enough for a good seed.
    // Consider a more robust seeding mechanism if available.

    gameOver = false;
 80008e6:	4b28      	ldr	r3, [pc, #160]	@ (8000988 <Snake_InitGame+0xa8>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	701a      	strb	r2, [r3, #0]
    snake.length = 3; // Initial length
 80008ec:	4b27      	ldr	r3, [pc, #156]	@ (800098c <Snake_InitGame+0xac>)
 80008ee:	2203      	movs	r2, #3
 80008f0:	f8a3 2190 	strh.w	r2, [r3, #400]	@ 0x190
    snake.dir = DIR_RIGHT;
 80008f4:	4b25      	ldr	r3, [pc, #148]	@ (800098c <Snake_InitGame+0xac>)
 80008f6:	2203      	movs	r2, #3
 80008f8:	f883 2192 	strb.w	r2, [r3, #402]	@ 0x192

    // Initial snake position (e.g., center of the game area)
    snake.body[0].x = GAME_AREA_WIDTH / 2;
 80008fc:	4b23      	ldr	r3, [pc, #140]	@ (800098c <Snake_InitGame+0xac>)
 80008fe:	2210      	movs	r2, #16
 8000900:	801a      	strh	r2, [r3, #0]
    snake.body[0].y = GAME_AREA_HEIGHT / 2;
 8000902:	4b22      	ldr	r3, [pc, #136]	@ (800098c <Snake_InitGame+0xac>)
 8000904:	2208      	movs	r2, #8
 8000906:	805a      	strh	r2, [r3, #2]
    snake.body[1].x = snake.body[0].x - 1;
 8000908:	4b20      	ldr	r3, [pc, #128]	@ (800098c <Snake_InitGame+0xac>)
 800090a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800090e:	b29b      	uxth	r3, r3
 8000910:	3b01      	subs	r3, #1
 8000912:	b29b      	uxth	r3, r3
 8000914:	b21a      	sxth	r2, r3
 8000916:	4b1d      	ldr	r3, [pc, #116]	@ (800098c <Snake_InitGame+0xac>)
 8000918:	809a      	strh	r2, [r3, #4]
    snake.body[1].y = snake.body[0].y;
 800091a:	4b1c      	ldr	r3, [pc, #112]	@ (800098c <Snake_InitGame+0xac>)
 800091c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000920:	4b1a      	ldr	r3, [pc, #104]	@ (800098c <Snake_InitGame+0xac>)
 8000922:	80da      	strh	r2, [r3, #6]
    snake.body[2].x = snake.body[0].x - 2;
 8000924:	4b19      	ldr	r3, [pc, #100]	@ (800098c <Snake_InitGame+0xac>)
 8000926:	f9b3 3000 	ldrsh.w	r3, [r3]
 800092a:	b29b      	uxth	r3, r3
 800092c:	3b02      	subs	r3, #2
 800092e:	b29b      	uxth	r3, r3
 8000930:	b21a      	sxth	r2, r3
 8000932:	4b16      	ldr	r3, [pc, #88]	@ (800098c <Snake_InitGame+0xac>)
 8000934:	811a      	strh	r2, [r3, #8]
    snake.body[2].y = snake.body[0].y;
 8000936:	4b15      	ldr	r3, [pc, #84]	@ (800098c <Snake_InitGame+0xac>)
 8000938:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800093c:	4b13      	ldr	r3, [pc, #76]	@ (800098c <Snake_InitGame+0xac>)
 800093e:	815a      	strh	r2, [r3, #10]

    for (uint16_t i = snake.length; i < SNAKE_MAX_LENGTH; ++i)
 8000940:	4b12      	ldr	r3, [pc, #72]	@ (800098c <Snake_InitGame+0xac>)
 8000942:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8000946:	80fb      	strh	r3, [r7, #6]
 8000948:	e00f      	b.n	800096a <Snake_InitGame+0x8a>
    {
        snake.body[i].x = -1; // Mark unused segments
 800094a:	88fb      	ldrh	r3, [r7, #6]
 800094c:	4a0f      	ldr	r2, [pc, #60]	@ (800098c <Snake_InitGame+0xac>)
 800094e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000952:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
        snake.body[i].y = -1;
 8000956:	88fb      	ldrh	r3, [r7, #6]
 8000958:	4a0c      	ldr	r2, [pc, #48]	@ (800098c <Snake_InitGame+0xac>)
 800095a:	009b      	lsls	r3, r3, #2
 800095c:	4413      	add	r3, r2
 800095e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000962:	805a      	strh	r2, [r3, #2]
    for (uint16_t i = snake.length; i < SNAKE_MAX_LENGTH; ++i)
 8000964:	88fb      	ldrh	r3, [r7, #6]
 8000966:	3301      	adds	r3, #1
 8000968:	80fb      	strh	r3, [r7, #6]
 800096a:	88fb      	ldrh	r3, [r7, #6]
 800096c:	2b63      	cmp	r3, #99	@ 0x63
 800096e:	d9ec      	bls.n	800094a <Snake_InitGame+0x6a>
    }

    Snake_GenerateFood();
 8000970:	f7ff ff66 	bl	8000840 <Snake_GenerateFood>
    gameTickLast = HAL_GetTick();
 8000974:	f004 fa48 	bl	8004e08 <HAL_GetTick>
 8000978:	4603      	mov	r3, r0
 800097a:	4a05      	ldr	r2, [pc, #20]	@ (8000990 <Snake_InitGame+0xb0>)
 800097c:	6013      	str	r3, [r2, #0]
}
 800097e:	bf00      	nop
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	2000023a 	.word	0x2000023a
 800098c:	200000a0 	.word	0x200000a0
 8000990:	2000023c 	.word	0x2000023c

08000994 <Snake_Draw>:

static void Snake_Draw(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
    OLED_ClearBuffer();
 800099a:	f000 fc63 	bl	8001264 <OLED_ClearBuffer>

    // Draw snake
    for (uint16_t i = 0; i < snake.length; i++)
 800099e:	2300      	movs	r3, #0
 80009a0:	80fb      	strh	r3, [r7, #6]
 80009a2:	e010      	b.n	80009c6 <Snake_Draw+0x32>
    {
        DrawBlock(snake.body[i].x, snake.body[i].y, 1); // 1 for white
 80009a4:	88fb      	ldrh	r3, [r7, #6]
 80009a6:	4a1b      	ldr	r2, [pc, #108]	@ (8000a14 <Snake_Draw+0x80>)
 80009a8:	f932 0023 	ldrsh.w	r0, [r2, r3, lsl #2]
 80009ac:	88fb      	ldrh	r3, [r7, #6]
 80009ae:	4a19      	ldr	r2, [pc, #100]	@ (8000a14 <Snake_Draw+0x80>)
 80009b0:	009b      	lsls	r3, r3, #2
 80009b2:	4413      	add	r3, r2
 80009b4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80009b8:	2201      	movs	r2, #1
 80009ba:	4619      	mov	r1, r3
 80009bc:	f7ff ff26 	bl	800080c <DrawBlock>
    for (uint16_t i = 0; i < snake.length; i++)
 80009c0:	88fb      	ldrh	r3, [r7, #6]
 80009c2:	3301      	adds	r3, #1
 80009c4:	80fb      	strh	r3, [r7, #6]
 80009c6:	4b13      	ldr	r3, [pc, #76]	@ (8000a14 <Snake_Draw+0x80>)
 80009c8:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 80009cc:	88fa      	ldrh	r2, [r7, #6]
 80009ce:	429a      	cmp	r2, r3
 80009d0:	d3e8      	bcc.n	80009a4 <Snake_Draw+0x10>
    }

    // Draw food
    if (food.active)
 80009d2:	4b11      	ldr	r3, [pc, #68]	@ (8000a18 <Snake_Draw+0x84>)
 80009d4:	791b      	ldrb	r3, [r3, #4]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d009      	beq.n	80009ee <Snake_Draw+0x5a>
    {
        DrawBlock(food.pos.x, food.pos.y, 1); // 1 for white
 80009da:	4b0f      	ldr	r3, [pc, #60]	@ (8000a18 <Snake_Draw+0x84>)
 80009dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009e0:	4a0d      	ldr	r2, [pc, #52]	@ (8000a18 <Snake_Draw+0x84>)
 80009e2:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 80009e6:	2201      	movs	r2, #1
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff ff0f 	bl	800080c <DrawBlock>
    }

    if (gameOver)
 80009ee:	4b0b      	ldr	r3, [pc, #44]	@ (8000a1c <Snake_Draw+0x88>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d009      	beq.n	8000a0a <Snake_Draw+0x76>
    {
        OLED_DisplayString(OLED_WIDTH / 2 - 3 * 6, OLED_HEIGHT / 2 - 4, "GAME");
 80009f6:	4a0a      	ldr	r2, [pc, #40]	@ (8000a20 <Snake_Draw+0x8c>)
 80009f8:	211c      	movs	r1, #28
 80009fa:	202e      	movs	r0, #46	@ 0x2e
 80009fc:	f001 f86a 	bl	8001ad4 <OLED_DisplayString>
        OLED_DisplayString(OLED_WIDTH / 2 - 3 * 6, OLED_HEIGHT / 2 + 4, "OVER");
 8000a00:	4a08      	ldr	r2, [pc, #32]	@ (8000a24 <Snake_Draw+0x90>)
 8000a02:	2124      	movs	r1, #36	@ 0x24
 8000a04:	202e      	movs	r0, #46	@ 0x2e
 8000a06:	f001 f865 	bl	8001ad4 <OLED_DisplayString>
    }

}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	200000a0 	.word	0x200000a0
 8000a18:	20000234 	.word	0x20000234
 8000a1c:	2000023a 	.word	0x2000023a
 8000a20:	08009f10 	.word	0x08009f10
 8000a24:	08009f18 	.word	0x08009f18

08000a28 <Snake_Update>:

static void Snake_Update(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
    if (gameOver)
 8000a2e:	4b5a      	ldr	r3, [pc, #360]	@ (8000b98 <Snake_Update+0x170>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	f040 80ab 	bne.w	8000b8e <Snake_Update+0x166>
    {
        return;
    }

    Point new_head = snake.body[0];
 8000a38:	4b58      	ldr	r3, [pc, #352]	@ (8000b9c <Snake_Update+0x174>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	603b      	str	r3, [r7, #0]

    // Move head based on direction
    switch (snake.dir)
 8000a3e:	4b57      	ldr	r3, [pc, #348]	@ (8000b9c <Snake_Update+0x174>)
 8000a40:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8000a44:	2b03      	cmp	r3, #3
 8000a46:	d82b      	bhi.n	8000aa0 <Snake_Update+0x78>
 8000a48:	a201      	add	r2, pc, #4	@ (adr r2, 8000a50 <Snake_Update+0x28>)
 8000a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a4e:	bf00      	nop
 8000a50:	08000a61 	.word	0x08000a61
 8000a54:	08000a71 	.word	0x08000a71
 8000a58:	08000a81 	.word	0x08000a81
 8000a5c:	08000a91 	.word	0x08000a91
    {
    case DIR_UP:
        new_head.y--;
 8000a60:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000a64:	b29b      	uxth	r3, r3
 8000a66:	3b01      	subs	r3, #1
 8000a68:	b29b      	uxth	r3, r3
 8000a6a:	b21b      	sxth	r3, r3
 8000a6c:	807b      	strh	r3, [r7, #2]
        break;
 8000a6e:	e017      	b.n	8000aa0 <Snake_Update+0x78>
    case DIR_DOWN:
        new_head.y++;
 8000a70:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000a74:	b29b      	uxth	r3, r3
 8000a76:	3301      	adds	r3, #1
 8000a78:	b29b      	uxth	r3, r3
 8000a7a:	b21b      	sxth	r3, r3
 8000a7c:	807b      	strh	r3, [r7, #2]
        break;
 8000a7e:	e00f      	b.n	8000aa0 <Snake_Update+0x78>
    case DIR_LEFT:
        new_head.x--;
 8000a80:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000a84:	b29b      	uxth	r3, r3
 8000a86:	3b01      	subs	r3, #1
 8000a88:	b29b      	uxth	r3, r3
 8000a8a:	b21b      	sxth	r3, r3
 8000a8c:	803b      	strh	r3, [r7, #0]
        break;
 8000a8e:	e007      	b.n	8000aa0 <Snake_Update+0x78>
    case DIR_RIGHT:
        new_head.x++;
 8000a90:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000a94:	b29b      	uxth	r3, r3
 8000a96:	3301      	adds	r3, #1
 8000a98:	b29b      	uxth	r3, r3
 8000a9a:	b21b      	sxth	r3, r3
 8000a9c:	803b      	strh	r3, [r7, #0]
        break;
 8000a9e:	bf00      	nop
    }

    // Wall collision and wrap-around logic
    if (new_head.x < 0) 
 8000aa0:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	da02      	bge.n	8000aae <Snake_Update+0x86>
    {
        new_head.x = GAME_AREA_WIDTH - 1;
 8000aa8:	231f      	movs	r3, #31
 8000aaa:	803b      	strh	r3, [r7, #0]
 8000aac:	e005      	b.n	8000aba <Snake_Update+0x92>
    }
    else if (new_head.x >= GAME_AREA_WIDTH)
 8000aae:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000ab2:	2b1f      	cmp	r3, #31
 8000ab4:	dd01      	ble.n	8000aba <Snake_Update+0x92>
    {
        new_head.x = 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	803b      	strh	r3, [r7, #0]
    }

    if (new_head.y < 0)
 8000aba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	da02      	bge.n	8000ac8 <Snake_Update+0xa0>
    {
        new_head.y = GAME_AREA_HEIGHT - 1;
 8000ac2:	230f      	movs	r3, #15
 8000ac4:	807b      	strh	r3, [r7, #2]
 8000ac6:	e005      	b.n	8000ad4 <Snake_Update+0xac>
    }
    else if (new_head.y >= GAME_AREA_HEIGHT)
 8000ac8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000acc:	2b0f      	cmp	r3, #15
 8000ace:	dd01      	ble.n	8000ad4 <Snake_Update+0xac>
    {
        new_head.y = 0;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	807b      	strh	r3, [r7, #2]
    }

    // Check for self-collision (excluding the tail that will move away)
    for (uint16_t i = 0; i < snake.length - 1; i++)
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	80fb      	strh	r3, [r7, #6]
 8000ad8:	e018      	b.n	8000b0c <Snake_Update+0xe4>
    { // Check up to length-1 because the actual tail will move
        if (new_head.x == snake.body[i].x && new_head.y == snake.body[i].y)
 8000ada:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000ade:	88fb      	ldrh	r3, [r7, #6]
 8000ae0:	492e      	ldr	r1, [pc, #184]	@ (8000b9c <Snake_Update+0x174>)
 8000ae2:	f931 3023 	ldrsh.w	r3, [r1, r3, lsl #2]
 8000ae6:	429a      	cmp	r2, r3
 8000ae8:	d10d      	bne.n	8000b06 <Snake_Update+0xde>
 8000aea:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000aee:	88fb      	ldrh	r3, [r7, #6]
 8000af0:	492a      	ldr	r1, [pc, #168]	@ (8000b9c <Snake_Update+0x174>)
 8000af2:	009b      	lsls	r3, r3, #2
 8000af4:	440b      	add	r3, r1
 8000af6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000afa:	429a      	cmp	r2, r3
 8000afc:	d103      	bne.n	8000b06 <Snake_Update+0xde>
        {
            gameOver = true;
 8000afe:	4b26      	ldr	r3, [pc, #152]	@ (8000b98 <Snake_Update+0x170>)
 8000b00:	2201      	movs	r2, #1
 8000b02:	701a      	strb	r2, [r3, #0]
            return;
 8000b04:	e044      	b.n	8000b90 <Snake_Update+0x168>
    for (uint16_t i = 0; i < snake.length - 1; i++)
 8000b06:	88fb      	ldrh	r3, [r7, #6]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	80fb      	strh	r3, [r7, #6]
 8000b0c:	88fa      	ldrh	r2, [r7, #6]
 8000b0e:	4b23      	ldr	r3, [pc, #140]	@ (8000b9c <Snake_Update+0x174>)
 8000b10:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8000b14:	3b01      	subs	r3, #1
 8000b16:	429a      	cmp	r2, r3
 8000b18:	dbdf      	blt.n	8000ada <Snake_Update+0xb2>
        }
    }

    // Check if food is eaten
    if (food.active && new_head.x == food.pos.x && new_head.y == food.pos.y)
 8000b1a:	4b21      	ldr	r3, [pc, #132]	@ (8000ba0 <Snake_Update+0x178>)
 8000b1c:	791b      	ldrb	r3, [r3, #4]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d01c      	beq.n	8000b5c <Snake_Update+0x134>
 8000b22:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000b26:	4b1e      	ldr	r3, [pc, #120]	@ (8000ba0 <Snake_Update+0x178>)
 8000b28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	d115      	bne.n	8000b5c <Snake_Update+0x134>
 8000b30:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000b34:	4b1a      	ldr	r3, [pc, #104]	@ (8000ba0 <Snake_Update+0x178>)
 8000b36:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000b3a:	429a      	cmp	r2, r3
 8000b3c:	d10e      	bne.n	8000b5c <Snake_Update+0x134>
    {
        if (snake.length < SNAKE_MAX_LENGTH)
 8000b3e:	4b17      	ldr	r3, [pc, #92]	@ (8000b9c <Snake_Update+0x174>)
 8000b40:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8000b44:	2b63      	cmp	r3, #99	@ 0x63
 8000b46:	d807      	bhi.n	8000b58 <Snake_Update+0x130>
        {
            snake.length++;
 8000b48:	4b14      	ldr	r3, [pc, #80]	@ (8000b9c <Snake_Update+0x174>)
 8000b4a:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8000b4e:	3301      	adds	r3, #1
 8000b50:	b29a      	uxth	r2, r3
 8000b52:	4b12      	ldr	r3, [pc, #72]	@ (8000b9c <Snake_Update+0x174>)
 8000b54:	f8a3 2190 	strh.w	r2, [r3, #400]	@ 0x190
        }
        Snake_GenerateFood();
 8000b58:	f7ff fe72 	bl	8000840 <Snake_GenerateFood>
        // No need to explicitly remove the tail, the shift below handles it.
    }

    // Move snake body
    // Shift all segments one position down, the last one is overwritten or ignored if length increased
    for (uint16_t i = snake.length - 1; i > 0; i--)
 8000b5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b9c <Snake_Update+0x174>)
 8000b5e:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8000b62:	3b01      	subs	r3, #1
 8000b64:	80bb      	strh	r3, [r7, #4]
 8000b66:	e00b      	b.n	8000b80 <Snake_Update+0x158>
    {
        snake.body[i] = snake.body[i - 1];
 8000b68:	88bb      	ldrh	r3, [r7, #4]
 8000b6a:	1e5a      	subs	r2, r3, #1
 8000b6c:	88bb      	ldrh	r3, [r7, #4]
 8000b6e:	490b      	ldr	r1, [pc, #44]	@ (8000b9c <Snake_Update+0x174>)
 8000b70:	480a      	ldr	r0, [pc, #40]	@ (8000b9c <Snake_Update+0x174>)
 8000b72:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8000b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (uint16_t i = snake.length - 1; i > 0; i--)
 8000b7a:	88bb      	ldrh	r3, [r7, #4]
 8000b7c:	3b01      	subs	r3, #1
 8000b7e:	80bb      	strh	r3, [r7, #4]
 8000b80:	88bb      	ldrh	r3, [r7, #4]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d1f0      	bne.n	8000b68 <Snake_Update+0x140>
    }
    snake.body[0] = new_head; // New head position
 8000b86:	4a05      	ldr	r2, [pc, #20]	@ (8000b9c <Snake_Update+0x174>)
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	6013      	str	r3, [r2, #0]
 8000b8c:	e000      	b.n	8000b90 <Snake_Update+0x168>
        return;
 8000b8e:	bf00      	nop
}
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	2000023a 	.word	0x2000023a
 8000b9c:	200000a0 	.word	0x200000a0
 8000ba0:	20000234 	.word	0x20000234

08000ba4 <Snake_HandleInput>:

void Snake_HandleInput(Direction input_dir)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	71fb      	strb	r3, [r7, #7]
    if ((snake.dir == DIR_UP && input_dir != DIR_DOWN) ||
 8000bae:	4b14      	ldr	r3, [pc, #80]	@ (8000c00 <Snake_HandleInput+0x5c>)
 8000bb0:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d102      	bne.n	8000bbe <Snake_HandleInput+0x1a>
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
 8000bba:	2b01      	cmp	r3, #1
 8000bbc:	d117      	bne.n	8000bee <Snake_HandleInput+0x4a>
        (snake.dir == DIR_DOWN && input_dir != DIR_UP) ||
 8000bbe:	4b10      	ldr	r3, [pc, #64]	@ (8000c00 <Snake_HandleInput+0x5c>)
 8000bc0:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
    if ((snake.dir == DIR_UP && input_dir != DIR_DOWN) ||
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d102      	bne.n	8000bce <Snake_HandleInput+0x2a>
        (snake.dir == DIR_DOWN && input_dir != DIR_UP) ||
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d10f      	bne.n	8000bee <Snake_HandleInput+0x4a>
        (snake.dir == DIR_LEFT && input_dir != DIR_RIGHT) ||
 8000bce:	4b0c      	ldr	r3, [pc, #48]	@ (8000c00 <Snake_HandleInput+0x5c>)
 8000bd0:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
        (snake.dir == DIR_DOWN && input_dir != DIR_UP) ||
 8000bd4:	2b02      	cmp	r3, #2
 8000bd6:	d102      	bne.n	8000bde <Snake_HandleInput+0x3a>
        (snake.dir == DIR_LEFT && input_dir != DIR_RIGHT) ||
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	2b03      	cmp	r3, #3
 8000bdc:	d107      	bne.n	8000bee <Snake_HandleInput+0x4a>
        (snake.dir == DIR_RIGHT && input_dir != DIR_LEFT))
 8000bde:	4b08      	ldr	r3, [pc, #32]	@ (8000c00 <Snake_HandleInput+0x5c>)
 8000be0:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
        (snake.dir == DIR_LEFT && input_dir != DIR_RIGHT) ||
 8000be4:	2b03      	cmp	r3, #3
 8000be6:	d106      	bne.n	8000bf6 <Snake_HandleInput+0x52>
        (snake.dir == DIR_RIGHT && input_dir != DIR_LEFT))
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	2b02      	cmp	r3, #2
 8000bec:	d003      	beq.n	8000bf6 <Snake_HandleInput+0x52>
    {
        snake.dir = input_dir;
 8000bee:	4a04      	ldr	r2, [pc, #16]	@ (8000c00 <Snake_HandleInput+0x5c>)
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	f882 3192 	strb.w	r3, [r2, #402]	@ 0x192
    }
}
 8000bf6:	bf00      	nop
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bc80      	pop	{r7}
 8000bfe:	4770      	bx	lr
 8000c00:	200000a0 	.word	0x200000a0

08000c04 <Snake_GameLoop>:

void Snake_GameLoop(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b088      	sub	sp, #32
 8000c08:	af00      	add	r7, sp, #0
    // extern uint8_t get_joystick_direction(); // Placeholder for your input function
    // Direction current_input = get_joystick_direction();
    // if (current_input != NO_INPUT) { // Assuming NO_INPUT if no direction change
    //     Snake_HandleInput(current_input);
    // }
    if (!preMutiTurn)
 8000c0a:	4b5d      	ldr	r3, [pc, #372]	@ (8000d80 <Snake_GameLoop+0x17c>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	f083 0301 	eor.w	r3, r3, #1
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d065      	beq.n	8000ce4 <Snake_GameLoop+0xe0>
    {
        if (count - LastCount > 1)
 8000c18:	4b5a      	ldr	r3, [pc, #360]	@ (8000d84 <Snake_GameLoop+0x180>)
 8000c1a:	881b      	ldrh	r3, [r3, #0]
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	4b5a      	ldr	r3, [pc, #360]	@ (8000d88 <Snake_GameLoop+0x184>)
 8000c20:	881b      	ldrh	r3, [r3, #0]
 8000c22:	1ad3      	subs	r3, r2, r3
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	dd2a      	ble.n	8000c7e <Snake_GameLoop+0x7a>
        {
            if (snake.dir == DIR_UP)
 8000c28:	4b58      	ldr	r3, [pc, #352]	@ (8000d8c <Snake_GameLoop+0x188>)
 8000c2a:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d103      	bne.n	8000c3a <Snake_GameLoop+0x36>
                Snake_HandleInput(DIR_RIGHT);
 8000c32:	2003      	movs	r0, #3
 8000c34:	f7ff ffb6 	bl	8000ba4 <Snake_HandleInput>
 8000c38:	e019      	b.n	8000c6e <Snake_GameLoop+0x6a>
            else if (snake.dir == DIR_DOWN)
 8000c3a:	4b54      	ldr	r3, [pc, #336]	@ (8000d8c <Snake_GameLoop+0x188>)
 8000c3c:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d103      	bne.n	8000c4c <Snake_GameLoop+0x48>

                Snake_HandleInput(DIR_LEFT);
 8000c44:	2002      	movs	r0, #2
 8000c46:	f7ff ffad 	bl	8000ba4 <Snake_HandleInput>
 8000c4a:	e010      	b.n	8000c6e <Snake_GameLoop+0x6a>
            else if (snake.dir == DIR_LEFT)
 8000c4c:	4b4f      	ldr	r3, [pc, #316]	@ (8000d8c <Snake_GameLoop+0x188>)
 8000c4e:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8000c52:	2b02      	cmp	r3, #2
 8000c54:	d103      	bne.n	8000c5e <Snake_GameLoop+0x5a>
                Snake_HandleInput(DIR_UP);
 8000c56:	2000      	movs	r0, #0
 8000c58:	f7ff ffa4 	bl	8000ba4 <Snake_HandleInput>
 8000c5c:	e007      	b.n	8000c6e <Snake_GameLoop+0x6a>
            else if (snake.dir == DIR_RIGHT)
 8000c5e:	4b4b      	ldr	r3, [pc, #300]	@ (8000d8c <Snake_GameLoop+0x188>)
 8000c60:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8000c64:	2b03      	cmp	r3, #3
 8000c66:	d102      	bne.n	8000c6e <Snake_GameLoop+0x6a>
                Snake_HandleInput(DIR_DOWN);
 8000c68:	2001      	movs	r0, #1
 8000c6a:	f7ff ff9b 	bl	8000ba4 <Snake_HandleInput>

            preMutiTurn = true;
 8000c6e:	4b44      	ldr	r3, [pc, #272]	@ (8000d80 <Snake_GameLoop+0x17c>)
 8000c70:	2201      	movs	r2, #1
 8000c72:	701a      	strb	r2, [r3, #0]
            LastCount = count;
 8000c74:	4b43      	ldr	r3, [pc, #268]	@ (8000d84 <Snake_GameLoop+0x180>)
 8000c76:	881a      	ldrh	r2, [r3, #0]
 8000c78:	4b43      	ldr	r3, [pc, #268]	@ (8000d88 <Snake_GameLoop+0x184>)
 8000c7a:	801a      	strh	r2, [r3, #0]
 8000c7c:	e032      	b.n	8000ce4 <Snake_GameLoop+0xe0>
        }
        else if (count - LastCount < -1)
 8000c7e:	4b41      	ldr	r3, [pc, #260]	@ (8000d84 <Snake_GameLoop+0x180>)
 8000c80:	881b      	ldrh	r3, [r3, #0]
 8000c82:	461a      	mov	r2, r3
 8000c84:	4b40      	ldr	r3, [pc, #256]	@ (8000d88 <Snake_GameLoop+0x184>)
 8000c86:	881b      	ldrh	r3, [r3, #0]
 8000c88:	1ad3      	subs	r3, r2, r3
 8000c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c8e:	da29      	bge.n	8000ce4 <Snake_GameLoop+0xe0>
        {
            if (snake.dir == DIR_UP)
 8000c90:	4b3e      	ldr	r3, [pc, #248]	@ (8000d8c <Snake_GameLoop+0x188>)
 8000c92:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d103      	bne.n	8000ca2 <Snake_GameLoop+0x9e>
                Snake_HandleInput(DIR_LEFT);
 8000c9a:	2002      	movs	r0, #2
 8000c9c:	f7ff ff82 	bl	8000ba4 <Snake_HandleInput>
 8000ca0:	e019      	b.n	8000cd6 <Snake_GameLoop+0xd2>
            else if (snake.dir == DIR_DOWN)
 8000ca2:	4b3a      	ldr	r3, [pc, #232]	@ (8000d8c <Snake_GameLoop+0x188>)
 8000ca4:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d103      	bne.n	8000cb4 <Snake_GameLoop+0xb0>
                Snake_HandleInput(DIR_RIGHT);
 8000cac:	2003      	movs	r0, #3
 8000cae:	f7ff ff79 	bl	8000ba4 <Snake_HandleInput>
 8000cb2:	e010      	b.n	8000cd6 <Snake_GameLoop+0xd2>
            else if (snake.dir == DIR_LEFT)
 8000cb4:	4b35      	ldr	r3, [pc, #212]	@ (8000d8c <Snake_GameLoop+0x188>)
 8000cb6:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8000cba:	2b02      	cmp	r3, #2
 8000cbc:	d103      	bne.n	8000cc6 <Snake_GameLoop+0xc2>
                Snake_HandleInput(DIR_DOWN);
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	f7ff ff70 	bl	8000ba4 <Snake_HandleInput>
 8000cc4:	e007      	b.n	8000cd6 <Snake_GameLoop+0xd2>
            else if (snake.dir == DIR_RIGHT)
 8000cc6:	4b31      	ldr	r3, [pc, #196]	@ (8000d8c <Snake_GameLoop+0x188>)
 8000cc8:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8000ccc:	2b03      	cmp	r3, #3
 8000cce:	d102      	bne.n	8000cd6 <Snake_GameLoop+0xd2>
                Snake_HandleInput(DIR_UP);
 8000cd0:	2000      	movs	r0, #0
 8000cd2:	f7ff ff67 	bl	8000ba4 <Snake_HandleInput>

            preMutiTurn = true;
 8000cd6:	4b2a      	ldr	r3, [pc, #168]	@ (8000d80 <Snake_GameLoop+0x17c>)
 8000cd8:	2201      	movs	r2, #1
 8000cda:	701a      	strb	r2, [r3, #0]
            LastCount = count;
 8000cdc:	4b29      	ldr	r3, [pc, #164]	@ (8000d84 <Snake_GameLoop+0x180>)
 8000cde:	881a      	ldrh	r2, [r3, #0]
 8000ce0:	4b29      	ldr	r3, [pc, #164]	@ (8000d88 <Snake_GameLoop+0x184>)
 8000ce2:	801a      	strh	r2, [r3, #0]
        }
    }
    

    if (HAL_GetTick() - gameTickLast >= GAME_TICK_MS)
 8000ce4:	f004 f890 	bl	8004e08 <HAL_GetTick>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	4b29      	ldr	r3, [pc, #164]	@ (8000d90 <Snake_GameLoop+0x18c>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	1ad3      	subs	r3, r2, r3
 8000cf0:	2b63      	cmp	r3, #99	@ 0x63
 8000cf2:	d909      	bls.n	8000d08 <Snake_GameLoop+0x104>
    {
        Snake_Update();
 8000cf4:	f7ff fe98 	bl	8000a28 <Snake_Update>
        gameTickLast = HAL_GetTick();
 8000cf8:	f004 f886 	bl	8004e08 <HAL_GetTick>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	4a24      	ldr	r2, [pc, #144]	@ (8000d90 <Snake_GameLoop+0x18c>)
 8000d00:	6013      	str	r3, [r2, #0]
        preMutiTurn = false;
 8000d02:	4b1f      	ldr	r3, [pc, #124]	@ (8000d80 <Snake_GameLoop+0x17c>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	701a      	strb	r2, [r3, #0]
    }
    Snake_Draw(); // Draw regardless of tick, for smoother animation if needed, or only after update.
 8000d08:	f7ff fe44 	bl	8000994 <Snake_Draw>

    // If game over, you might want to wait for an input to restart
    if (gameOver)
 8000d0c:	4b21      	ldr	r3, [pc, #132]	@ (8000d94 <Snake_GameLoop+0x190>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d022      	beq.n	8000d5a <Snake_GameLoop+0x156>
    {
        if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET)
 8000d14:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d18:	481f      	ldr	r0, [pc, #124]	@ (8000d98 <Snake_GameLoop+0x194>)
 8000d1a:	f004 fc95 	bl	8005648 <HAL_GPIO_ReadPin>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d11a      	bne.n	8000d5a <Snake_GameLoop+0x156>
        {
            HAL_Delay(50); // Debounce delay
 8000d24:	2032      	movs	r0, #50	@ 0x32
 8000d26:	f004 f879 	bl	8004e1c <HAL_Delay>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET)
 8000d2a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d2e:	481a      	ldr	r0, [pc, #104]	@ (8000d98 <Snake_GameLoop+0x194>)
 8000d30:	f004 fc8a 	bl	8005648 <HAL_GPIO_ReadPin>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d106      	bne.n	8000d48 <Snake_GameLoop+0x144>
            {
                Snake_InitGame(); // Or handle restart explicitly elsewhere
 8000d3a:	f7ff fdd1 	bl	80008e0 <Snake_InitGame>
                OLED_DisplayString(0, 0, "Score: 0"); // Display title or status
 8000d3e:	4a17      	ldr	r2, [pc, #92]	@ (8000d9c <Snake_GameLoop+0x198>)
 8000d40:	2100      	movs	r1, #0
 8000d42:	2000      	movs	r0, #0
 8000d44:	f000 fec6 	bl	8001ad4 <OLED_DisplayString>
            }
            while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET);
 8000d48:	bf00      	nop
 8000d4a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d4e:	4812      	ldr	r0, [pc, #72]	@ (8000d98 <Snake_GameLoop+0x194>)
 8000d50:	f004 fc7a 	bl	8005648 <HAL_GPIO_ReadPin>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d0f7      	beq.n	8000d4a <Snake_GameLoop+0x146>
        }
        // For now, it just stops updating and shows "GAME OVER"
    }

    char score[30];
    sprintf(score, "Score: %d", snake.length - 3); // Display score
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d8c <Snake_GameLoop+0x188>)
 8000d5c:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8000d60:	1eda      	subs	r2, r3, #3
 8000d62:	463b      	mov	r3, r7
 8000d64:	490e      	ldr	r1, [pc, #56]	@ (8000da0 <Snake_GameLoop+0x19c>)
 8000d66:	4618      	mov	r0, r3
 8000d68:	f006 fd9a 	bl	80078a0 <siprintf>
    OLED_DisplayString(0, 0, score); // Display title or status
 8000d6c:	463b      	mov	r3, r7
 8000d6e:	461a      	mov	r2, r3
 8000d70:	2100      	movs	r1, #0
 8000d72:	2000      	movs	r0, #0
 8000d74:	f000 feae 	bl	8001ad4 <OLED_DisplayString>
}
 8000d78:	bf00      	nop
 8000d7a:	3720      	adds	r7, #32
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20000240 	.word	0x20000240
 8000d84:	20000330 	.word	0x20000330
 8000d88:	20000000 	.word	0x20000000
 8000d8c:	200000a0 	.word	0x200000a0
 8000d90:	2000023c 	.word	0x2000023c
 8000d94:	2000023a 	.word	0x2000023a
 8000d98:	40010c00 	.word	0x40010c00
 8000d9c:	08009f20 	.word	0x08009f20
 8000da0:	08009f2c 	.word	0x08009f2c

08000da4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b088      	sub	sp, #32
 8000da8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000daa:	f107 0310 	add.w	r3, r7, #16
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	605a      	str	r2, [r3, #4]
 8000db4:	609a      	str	r2, [r3, #8]
 8000db6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000db8:	4b2a      	ldr	r3, [pc, #168]	@ (8000e64 <MX_GPIO_Init+0xc0>)
 8000dba:	699b      	ldr	r3, [r3, #24]
 8000dbc:	4a29      	ldr	r2, [pc, #164]	@ (8000e64 <MX_GPIO_Init+0xc0>)
 8000dbe:	f043 0310 	orr.w	r3, r3, #16
 8000dc2:	6193      	str	r3, [r2, #24]
 8000dc4:	4b27      	ldr	r3, [pc, #156]	@ (8000e64 <MX_GPIO_Init+0xc0>)
 8000dc6:	699b      	ldr	r3, [r3, #24]
 8000dc8:	f003 0310 	and.w	r3, r3, #16
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dd0:	4b24      	ldr	r3, [pc, #144]	@ (8000e64 <MX_GPIO_Init+0xc0>)
 8000dd2:	699b      	ldr	r3, [r3, #24]
 8000dd4:	4a23      	ldr	r2, [pc, #140]	@ (8000e64 <MX_GPIO_Init+0xc0>)
 8000dd6:	f043 0320 	orr.w	r3, r3, #32
 8000dda:	6193      	str	r3, [r2, #24]
 8000ddc:	4b21      	ldr	r3, [pc, #132]	@ (8000e64 <MX_GPIO_Init+0xc0>)
 8000dde:	699b      	ldr	r3, [r3, #24]
 8000de0:	f003 0320 	and.w	r3, r3, #32
 8000de4:	60bb      	str	r3, [r7, #8]
 8000de6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de8:	4b1e      	ldr	r3, [pc, #120]	@ (8000e64 <MX_GPIO_Init+0xc0>)
 8000dea:	699b      	ldr	r3, [r3, #24]
 8000dec:	4a1d      	ldr	r2, [pc, #116]	@ (8000e64 <MX_GPIO_Init+0xc0>)
 8000dee:	f043 0308 	orr.w	r3, r3, #8
 8000df2:	6193      	str	r3, [r2, #24]
 8000df4:	4b1b      	ldr	r3, [pc, #108]	@ (8000e64 <MX_GPIO_Init+0xc0>)
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	f003 0308 	and.w	r3, r3, #8
 8000dfc:	607b      	str	r3, [r7, #4]
 8000dfe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e00:	4b18      	ldr	r3, [pc, #96]	@ (8000e64 <MX_GPIO_Init+0xc0>)
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	4a17      	ldr	r2, [pc, #92]	@ (8000e64 <MX_GPIO_Init+0xc0>)
 8000e06:	f043 0304 	orr.w	r3, r3, #4
 8000e0a:	6193      	str	r3, [r2, #24]
 8000e0c:	4b15      	ldr	r3, [pc, #84]	@ (8000e64 <MX_GPIO_Init+0xc0>)
 8000e0e:	699b      	ldr	r3, [r3, #24]
 8000e10:	f003 0304 	and.w	r3, r3, #4
 8000e14:	603b      	str	r3, [r7, #0]
 8000e16:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SysWork_Light_GPIO_Port, SysWork_Light_Pin, GPIO_PIN_RESET);
 8000e18:	2200      	movs	r2, #0
 8000e1a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e1e:	4812      	ldr	r0, [pc, #72]	@ (8000e68 <MX_GPIO_Init+0xc4>)
 8000e20:	f004 fc29 	bl	8005676 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SysWork_Light_Pin */
  GPIO_InitStruct.Pin = SysWork_Light_Pin;
 8000e24:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e32:	2302      	movs	r3, #2
 8000e34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SysWork_Light_GPIO_Port, &GPIO_InitStruct);
 8000e36:	f107 0310 	add.w	r3, r7, #16
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	480a      	ldr	r0, [pc, #40]	@ (8000e68 <MX_GPIO_Init+0xc4>)
 8000e3e:	f004 fa7f 	bl	8005340 <HAL_GPIO_Init>

  /*Configure GPIO pin : Encoder_Input_Pin */
  GPIO_InitStruct.Pin = Encoder_Input_Pin;
 8000e42:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Encoder_Input_GPIO_Port, &GPIO_InitStruct);
 8000e50:	f107 0310 	add.w	r3, r7, #16
 8000e54:	4619      	mov	r1, r3
 8000e56:	4805      	ldr	r0, [pc, #20]	@ (8000e6c <MX_GPIO_Init+0xc8>)
 8000e58:	f004 fa72 	bl	8005340 <HAL_GPIO_Init>

}
 8000e5c:	bf00      	nop
 8000e5e:	3720      	adds	r7, #32
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40021000 	.word	0x40021000
 8000e68:	40011000 	.word	0x40011000
 8000e6c:	40010c00 	.word	0x40010c00

08000e70 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e74:	4b12      	ldr	r3, [pc, #72]	@ (8000ec0 <MX_I2C1_Init+0x50>)
 8000e76:	4a13      	ldr	r2, [pc, #76]	@ (8000ec4 <MX_I2C1_Init+0x54>)
 8000e78:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000e7a:	4b11      	ldr	r3, [pc, #68]	@ (8000ec0 <MX_I2C1_Init+0x50>)
 8000e7c:	4a12      	ldr	r2, [pc, #72]	@ (8000ec8 <MX_I2C1_Init+0x58>)
 8000e7e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e80:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec0 <MX_I2C1_Init+0x50>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e86:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec0 <MX_I2C1_Init+0x50>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec0 <MX_I2C1_Init+0x50>)
 8000e8e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e92:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e94:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec0 <MX_I2C1_Init+0x50>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e9a:	4b09      	ldr	r3, [pc, #36]	@ (8000ec0 <MX_I2C1_Init+0x50>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ea0:	4b07      	ldr	r3, [pc, #28]	@ (8000ec0 <MX_I2C1_Init+0x50>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ea6:	4b06      	ldr	r3, [pc, #24]	@ (8000ec0 <MX_I2C1_Init+0x50>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000eac:	4804      	ldr	r0, [pc, #16]	@ (8000ec0 <MX_I2C1_Init+0x50>)
 8000eae:	f004 fbfb 	bl	80056a8 <HAL_I2C_Init>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000eb8:	f000 f999 	bl	80011ee <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ebc:	bf00      	nop
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	20000244 	.word	0x20000244
 8000ec4:	40005400 	.word	0x40005400
 8000ec8:	00061a80 	.word	0x00061a80

08000ecc <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000ed0:	4b12      	ldr	r3, [pc, #72]	@ (8000f1c <MX_I2C2_Init+0x50>)
 8000ed2:	4a13      	ldr	r2, [pc, #76]	@ (8000f20 <MX_I2C2_Init+0x54>)
 8000ed4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000ed6:	4b11      	ldr	r3, [pc, #68]	@ (8000f1c <MX_I2C2_Init+0x50>)
 8000ed8:	4a12      	ldr	r2, [pc, #72]	@ (8000f24 <MX_I2C2_Init+0x58>)
 8000eda:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000edc:	4b0f      	ldr	r3, [pc, #60]	@ (8000f1c <MX_I2C2_Init+0x50>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000ee2:	4b0e      	ldr	r3, [pc, #56]	@ (8000f1c <MX_I2C2_Init+0x50>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f1c <MX_I2C2_Init+0x50>)
 8000eea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000eee:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ef0:	4b0a      	ldr	r3, [pc, #40]	@ (8000f1c <MX_I2C2_Init+0x50>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000ef6:	4b09      	ldr	r3, [pc, #36]	@ (8000f1c <MX_I2C2_Init+0x50>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000efc:	4b07      	ldr	r3, [pc, #28]	@ (8000f1c <MX_I2C2_Init+0x50>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f02:	4b06      	ldr	r3, [pc, #24]	@ (8000f1c <MX_I2C2_Init+0x50>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000f08:	4804      	ldr	r0, [pc, #16]	@ (8000f1c <MX_I2C2_Init+0x50>)
 8000f0a:	f004 fbcd 	bl	80056a8 <HAL_I2C_Init>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000f14:	f000 f96b 	bl	80011ee <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000f18:	bf00      	nop
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000298 	.word	0x20000298
 8000f20:	40005800 	.word	0x40005800
 8000f24:	00061a80 	.word	0x00061a80

08000f28 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08a      	sub	sp, #40	@ 0x28
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f30:	f107 0318 	add.w	r3, r7, #24
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	609a      	str	r2, [r3, #8]
 8000f3c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a3e      	ldr	r2, [pc, #248]	@ (800103c <HAL_I2C_MspInit+0x114>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d14b      	bne.n	8000fe0 <HAL_I2C_MspInit+0xb8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f48:	4b3d      	ldr	r3, [pc, #244]	@ (8001040 <HAL_I2C_MspInit+0x118>)
 8000f4a:	699b      	ldr	r3, [r3, #24]
 8000f4c:	4a3c      	ldr	r2, [pc, #240]	@ (8001040 <HAL_I2C_MspInit+0x118>)
 8000f4e:	f043 0308 	orr.w	r3, r3, #8
 8000f52:	6193      	str	r3, [r2, #24]
 8000f54:	4b3a      	ldr	r3, [pc, #232]	@ (8001040 <HAL_I2C_MspInit+0x118>)
 8000f56:	699b      	ldr	r3, [r3, #24]
 8000f58:	f003 0308 	and.w	r3, r3, #8
 8000f5c:	617b      	str	r3, [r7, #20]
 8000f5e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 8000f60:	23c0      	movs	r3, #192	@ 0xc0
 8000f62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f64:	2312      	movs	r3, #18
 8000f66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f6c:	f107 0318 	add.w	r3, r7, #24
 8000f70:	4619      	mov	r1, r3
 8000f72:	4834      	ldr	r0, [pc, #208]	@ (8001044 <HAL_I2C_MspInit+0x11c>)
 8000f74:	f004 f9e4 	bl	8005340 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f78:	4b31      	ldr	r3, [pc, #196]	@ (8001040 <HAL_I2C_MspInit+0x118>)
 8000f7a:	69db      	ldr	r3, [r3, #28]
 8000f7c:	4a30      	ldr	r2, [pc, #192]	@ (8001040 <HAL_I2C_MspInit+0x118>)
 8000f7e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f82:	61d3      	str	r3, [r2, #28]
 8000f84:	4b2e      	ldr	r3, [pc, #184]	@ (8001040 <HAL_I2C_MspInit+0x118>)
 8000f86:	69db      	ldr	r3, [r3, #28]
 8000f88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f8c:	613b      	str	r3, [r7, #16]
 8000f8e:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8000f90:	4b2d      	ldr	r3, [pc, #180]	@ (8001048 <HAL_I2C_MspInit+0x120>)
 8000f92:	4a2e      	ldr	r2, [pc, #184]	@ (800104c <HAL_I2C_MspInit+0x124>)
 8000f94:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f96:	4b2c      	ldr	r3, [pc, #176]	@ (8001048 <HAL_I2C_MspInit+0x120>)
 8000f98:	2210      	movs	r2, #16
 8000f9a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f9c:	4b2a      	ldr	r3, [pc, #168]	@ (8001048 <HAL_I2C_MspInit+0x120>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000fa2:	4b29      	ldr	r3, [pc, #164]	@ (8001048 <HAL_I2C_MspInit+0x120>)
 8000fa4:	2280      	movs	r2, #128	@ 0x80
 8000fa6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fa8:	4b27      	ldr	r3, [pc, #156]	@ (8001048 <HAL_I2C_MspInit+0x120>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fae:	4b26      	ldr	r3, [pc, #152]	@ (8001048 <HAL_I2C_MspInit+0x120>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000fb4:	4b24      	ldr	r3, [pc, #144]	@ (8001048 <HAL_I2C_MspInit+0x120>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000fba:	4b23      	ldr	r3, [pc, #140]	@ (8001048 <HAL_I2C_MspInit+0x120>)
 8000fbc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000fc0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000fc2:	4821      	ldr	r0, [pc, #132]	@ (8001048 <HAL_I2C_MspInit+0x120>)
 8000fc4:	f004 f85c 	bl	8005080 <HAL_DMA_Init>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <HAL_I2C_MspInit+0xaa>
    {
      Error_Handler();
 8000fce:	f000 f90e 	bl	80011ee <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a1c      	ldr	r2, [pc, #112]	@ (8001048 <HAL_I2C_MspInit+0x120>)
 8000fd6:	635a      	str	r2, [r3, #52]	@ 0x34
 8000fd8:	4a1b      	ldr	r2, [pc, #108]	@ (8001048 <HAL_I2C_MspInit+0x120>)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6253      	str	r3, [r2, #36]	@ 0x24
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000fde:	e029      	b.n	8001034 <HAL_I2C_MspInit+0x10c>
  else if(i2cHandle->Instance==I2C2)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a1a      	ldr	r2, [pc, #104]	@ (8001050 <HAL_I2C_MspInit+0x128>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d124      	bne.n	8001034 <HAL_I2C_MspInit+0x10c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fea:	4b15      	ldr	r3, [pc, #84]	@ (8001040 <HAL_I2C_MspInit+0x118>)
 8000fec:	699b      	ldr	r3, [r3, #24]
 8000fee:	4a14      	ldr	r2, [pc, #80]	@ (8001040 <HAL_I2C_MspInit+0x118>)
 8000ff0:	f043 0308 	orr.w	r3, r3, #8
 8000ff4:	6193      	str	r3, [r2, #24]
 8000ff6:	4b12      	ldr	r3, [pc, #72]	@ (8001040 <HAL_I2C_MspInit+0x118>)
 8000ff8:	699b      	ldr	r3, [r3, #24]
 8000ffa:	f003 0308 	and.w	r3, r3, #8
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GYRO_SCL_Pin|GYRO_SDA_Pin;
 8001002:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001006:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001008:	2312      	movs	r3, #18
 800100a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800100c:	2303      	movs	r3, #3
 800100e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001010:	f107 0318 	add.w	r3, r7, #24
 8001014:	4619      	mov	r1, r3
 8001016:	480b      	ldr	r0, [pc, #44]	@ (8001044 <HAL_I2C_MspInit+0x11c>)
 8001018:	f004 f992 	bl	8005340 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800101c:	4b08      	ldr	r3, [pc, #32]	@ (8001040 <HAL_I2C_MspInit+0x118>)
 800101e:	69db      	ldr	r3, [r3, #28]
 8001020:	4a07      	ldr	r2, [pc, #28]	@ (8001040 <HAL_I2C_MspInit+0x118>)
 8001022:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001026:	61d3      	str	r3, [r2, #28]
 8001028:	4b05      	ldr	r3, [pc, #20]	@ (8001040 <HAL_I2C_MspInit+0x118>)
 800102a:	69db      	ldr	r3, [r3, #28]
 800102c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001030:	60bb      	str	r3, [r7, #8]
 8001032:	68bb      	ldr	r3, [r7, #8]
}
 8001034:	bf00      	nop
 8001036:	3728      	adds	r7, #40	@ 0x28
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40005400 	.word	0x40005400
 8001040:	40021000 	.word	0x40021000
 8001044:	40010c00 	.word	0x40010c00
 8001048:	200002ec 	.word	0x200002ec
 800104c:	4002006c 	.word	0x4002006c
 8001050:	40005800 	.word	0x40005800

08001054 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001058:	f003 fe7e 	bl	8004d58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800105c:	f000 f882 	bl	8001164 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001060:	f7ff fea0 	bl	8000da4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001064:	f7ff fbb4 	bl	80007d0 <MX_DMA_Init>
  MX_I2C1_Init();
 8001068:	f7ff ff02 	bl	8000e70 <MX_I2C1_Init>
  MX_TIM1_Init();
 800106c:	f003 fcb4 	bl	80049d8 <MX_TIM1_Init>
  MX_I2C2_Init();
 8001070:	f7ff ff2c 	bl	8000ecc <MX_I2C2_Init>
  MX_TIM3_Init();
 8001074:	f003 fd52 	bl	8004b1c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init(); // 初始化OLED
 8001078:	f000 fa9c 	bl	80015b4 <OLED_Init>
  OLED_InitBuffer(); // 初始化双缓冲
 800107c:	f000 f8be 	bl	80011fc <OLED_InitBuffer>
  OLED_ClearBuffer(); // 清空缓冲区
 8001080:	f000 f8f0 	bl	8001264 <OLED_ClearBuffer>
  
  OLED_EnableDiffMode(1);  // 启用差分更新
 8001084:	2001      	movs	r0, #1
 8001086:	f002 f965 	bl	8003354 <OLED_EnableDiffMode>
  OLED_EnableFastUpdate(1); // 启用快速更新
 800108a:	2001      	movs	r0, #1
 800108c:	f002 f980 	bl	8003390 <OLED_EnableFastUpdate>

  
  // HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3); // 启动PWM
  // HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3); // 启动PWM
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); // 启动PWM
 8001090:	2104      	movs	r1, #4
 8001092:	4829      	ldr	r0, [pc, #164]	@ (8001138 <main+0xe4>)
 8001094:	f005 fc48 	bl	8006928 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1); // 启动编码器
 8001098:	2100      	movs	r1, #0
 800109a:	4828      	ldr	r0, [pc, #160]	@ (800113c <main+0xe8>)
 800109c:	f005 fd88 	bl	8006bb0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_2); // 启动编码器
 80010a0:	2104      	movs	r1, #4
 80010a2:	4826      	ldr	r0, [pc, #152]	@ (800113c <main+0xe8>)
 80010a4:	f005 fd84 	bl	8006bb0 <HAL_TIM_Encoder_Start>

  OLED_InitAnimationManager(&g_AnimationManager); // 初始化动画管理器
 80010a8:	4825      	ldr	r0, [pc, #148]	@ (8001140 <main+0xec>)
 80010aa:	f003 f94d 	bl	8004348 <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&Menu_AnimationManager); // 初始化菜单动画管理器
 80010ae:	4825      	ldr	r0, [pc, #148]	@ (8001144 <main+0xf0>)
 80010b0:	f003 f94a 	bl	8004348 <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&Games_AnimationManager); // 初始化游戏动画管理器
 80010b4:	4824      	ldr	r0, [pc, #144]	@ (8001148 <main+0xf4>)
 80010b6:	f003 f947 	bl	8004348 <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&Tools_AnimationManager); // 初始化工具动画管理器
 80010ba:	4824      	ldr	r0, [pc, #144]	@ (800114c <main+0xf8>)
 80010bc:	f003 f944 	bl	8004348 <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&Settings_AnimationManager); // 初始化设置动画管理器
 80010c0:	4823      	ldr	r0, [pc, #140]	@ (8001150 <main+0xfc>)
 80010c2:	f003 f941 	bl	8004348 <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&About_AnimationManager); // 初始化关于动画管理器
 80010c6:	4823      	ldr	r0, [pc, #140]	@ (8001154 <main+0x100>)
 80010c8:	f003 f93e 	bl	8004348 <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&Status_AnimationManager); // 初始化状态动画管理器
 80010cc:	4822      	ldr	r0, [pc, #136]	@ (8001158 <main+0x104>)
 80010ce:	f003 f93b 	bl	8004348 <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&g_Title_AnimationManager); // 初始化标题动画管理器
 80010d2:	4822      	ldr	r0, [pc, #136]	@ (800115c <main+0x108>)
 80010d4:	f003 f938 	bl	8004348 <OLED_InitAnimationManager>
  __HAL_TIM_SET_COUNTER(&htim3, 32767);
 80010d8:	4b18      	ldr	r3, [pc, #96]	@ (800113c <main+0xe8>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80010e0:	625a      	str	r2, [r3, #36]	@ 0x24
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {    
    #pragma region OLED_UI_SETTINGS // UI设置
    OLED_ClearBuffer();
 80010e2:	f000 f8bf 	bl	8001264 <OLED_ClearBuffer>
    
    System_UI_Loop(); // UI循环
 80010e6:	f000 fd93 	bl	8001c10 <System_UI_Loop>
    
    
    OLED_OptimizedDisplayFPS(80, 56); // 显示帧率
 80010ea:	2138      	movs	r1, #56	@ 0x38
 80010ec:	2050      	movs	r0, #80	@ 0x50
 80010ee:	f002 f9f9 	bl	80034e4 <OLED_OptimizedDisplayFPS>
    count = __HAL_TIM_GET_COUNTER(&htim3); // 获取编码器计数值 1圈40
 80010f2:	4b12      	ldr	r3, [pc, #72]	@ (800113c <main+0xe8>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010f8:	b29a      	uxth	r2, r3
 80010fa:	4b19      	ldr	r3, [pc, #100]	@ (8001160 <main+0x10c>)
 80010fc:	801a      	strh	r2, [r3, #0]
    OLED_UpdateAnimationManager(&Menu_AnimationManager); // 更新菜单动画管理器
 80010fe:	4811      	ldr	r0, [pc, #68]	@ (8001144 <main+0xf0>)
 8001100:	f003 f9d4 	bl	80044ac <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&g_AnimationManager); // 更新动画管理器
 8001104:	480e      	ldr	r0, [pc, #56]	@ (8001140 <main+0xec>)
 8001106:	f003 f9d1 	bl	80044ac <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&Games_AnimationManager); // 更新游戏动画管理器
 800110a:	480f      	ldr	r0, [pc, #60]	@ (8001148 <main+0xf4>)
 800110c:	f003 f9ce 	bl	80044ac <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&Tools_AnimationManager); // 更新工具动画管理器
 8001110:	480e      	ldr	r0, [pc, #56]	@ (800114c <main+0xf8>)
 8001112:	f003 f9cb 	bl	80044ac <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&Settings_AnimationManager); // 更新设置动画管理器
 8001116:	480e      	ldr	r0, [pc, #56]	@ (8001150 <main+0xfc>)
 8001118:	f003 f9c8 	bl	80044ac <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&About_AnimationManager); // 更新关于动画管理器
 800111c:	480d      	ldr	r0, [pc, #52]	@ (8001154 <main+0x100>)
 800111e:	f003 f9c5 	bl	80044ac <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&Status_AnimationManager); // 更新状态动画管理器
 8001122:	480d      	ldr	r0, [pc, #52]	@ (8001158 <main+0x104>)
 8001124:	f003 f9c2 	bl	80044ac <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&g_Title_AnimationManager); // 更新标题动画管理器
 8001128:	480c      	ldr	r0, [pc, #48]	@ (800115c <main+0x108>)
 800112a:	f003 f9bf 	bl	80044ac <OLED_UpdateAnimationManager>
    OLED_SmartUpdate(); // 智能更新显示
 800112e:	f002 f93f 	bl	80033b0 <OLED_SmartUpdate>
    OLED_ClearBuffer();
 8001132:	bf00      	nop
 8001134:	e7d5      	b.n	80010e2 <main+0x8e>
 8001136:	bf00      	nop
 8001138:	20003efc 	.word	0x20003efc
 800113c:	20003f44 	.word	0x20003f44
 8001140:	20003904 	.word	0x20003904
 8001144:	20000f58 	.word	0x20000f58
 8001148:	2000154c 	.word	0x2000154c
 800114c:	20001b40 	.word	0x20001b40
 8001150:	20002134 	.word	0x20002134
 8001154:	20002728 	.word	0x20002728
 8001158:	20002d1c 	.word	0x20002d1c
 800115c:	20003310 	.word	0x20003310
 8001160:	20000330 	.word	0x20000330

08001164 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b090      	sub	sp, #64	@ 0x40
 8001168:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800116a:	f107 0318 	add.w	r3, r7, #24
 800116e:	2228      	movs	r2, #40	@ 0x28
 8001170:	2100      	movs	r1, #0
 8001172:	4618      	mov	r0, r3
 8001174:	f006 fbf9 	bl	800796a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	605a      	str	r2, [r3, #4]
 8001180:	609a      	str	r2, [r3, #8]
 8001182:	60da      	str	r2, [r3, #12]
 8001184:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001186:	2301      	movs	r3, #1
 8001188:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800118a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800118e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001190:	2300      	movs	r3, #0
 8001192:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001194:	2301      	movs	r3, #1
 8001196:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001198:	2302      	movs	r3, #2
 800119a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800119c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80011a2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80011a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011a8:	f107 0318 	add.w	r3, r7, #24
 80011ac:	4618      	mov	r0, r3
 80011ae:	f004 ff17 	bl	8005fe0 <HAL_RCC_OscConfig>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80011b8:	f000 f819 	bl	80011ee <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011bc:	230f      	movs	r3, #15
 80011be:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011c0:	2302      	movs	r3, #2
 80011c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011c4:	2300      	movs	r3, #0
 80011c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011ce:	2300      	movs	r3, #0
 80011d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011d2:	1d3b      	adds	r3, r7, #4
 80011d4:	2102      	movs	r1, #2
 80011d6:	4618      	mov	r0, r3
 80011d8:	f005 f984 	bl	80064e4 <HAL_RCC_ClockConfig>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80011e2:	f000 f804 	bl	80011ee <Error_Handler>
  }
}
 80011e6:	bf00      	nop
 80011e8:	3740      	adds	r7, #64	@ 0x40
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011ee:	b480      	push	{r7}
 80011f0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011f2:	b672      	cpsid	i
}
 80011f4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011f6:	bf00      	nop
 80011f8:	e7fd      	b.n	80011f6 <Error_Handler+0x8>
	...

080011fc <OLED_InitBuffer>:
        0x22, 0x00, 0x07  // 页地址范围: 0-7
};

// 初始化缓冲区
void OLED_InitBuffer(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
    // 清空缓冲区
    memset(OLED_BackBuffer, 0, sizeof(OLED_BackBuffer));
 8001202:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001206:	2100      	movs	r1, #0
 8001208:	4811      	ldr	r0, [pc, #68]	@ (8001250 <OLED_InitBuffer+0x54>)
 800120a:	f006 fbae 	bl	800796a <memset>
    memset(OLED_FrontBuffer, 0, sizeof(OLED_FrontBuffer));
 800120e:	f240 4201 	movw	r2, #1025	@ 0x401
 8001212:	2100      	movs	r1, #0
 8001214:	480f      	ldr	r0, [pc, #60]	@ (8001254 <OLED_InitBuffer+0x58>)
 8001216:	f006 fba8 	bl	800796a <memset>

    // 初始化第一个字节为数据控制字节
    OLED_FrontBuffer[0] = 0x40; // 数据控制字节：Co=0, D/C#=1 (数据)
 800121a:	4b0e      	ldr	r3, [pc, #56]	@ (8001254 <OLED_InitBuffer+0x58>)
 800121c:	2240      	movs	r2, #64	@ 0x40
 800121e:	701a      	strb	r2, [r3, #0]

    // 初始化状态变量
    oled_update_flag = OLED_READY;
 8001220:	4b0d      	ldr	r3, [pc, #52]	@ (8001258 <OLED_InitBuffer+0x5c>)
 8001222:	2200      	movs	r2, #0
 8001224:	701a      	strb	r2, [r3, #0]
    oled_dma_busy = OLED_READY;
 8001226:	4b0d      	ldr	r3, [pc, #52]	@ (800125c <OLED_InitBuffer+0x60>)
 8001228:	2200      	movs	r2, #0
 800122a:	701a      	strb	r2, [r3, #0]

    // 将所有页面标记为脏（需要更新）
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 800122c:	2300      	movs	r3, #0
 800122e:	71fb      	strb	r3, [r7, #7]
 8001230:	e006      	b.n	8001240 <OLED_InitBuffer+0x44>
    {
        oled_dirty_pages[i] = 1;
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	4a0a      	ldr	r2, [pc, #40]	@ (8001260 <OLED_InitBuffer+0x64>)
 8001236:	2101      	movs	r1, #1
 8001238:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	3301      	adds	r3, #1
 800123e:	71fb      	strb	r3, [r7, #7]
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	2b07      	cmp	r3, #7
 8001244:	d9f5      	bls.n	8001232 <OLED_InitBuffer+0x36>
    }
}
 8001246:	bf00      	nop
 8001248:	bf00      	nop
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	20000344 	.word	0x20000344
 8001254:	20000744 	.word	0x20000744
 8001258:	20000338 	.word	0x20000338
 800125c:	20000339 	.word	0x20000339
 8001260:	2000033c 	.word	0x2000033c

08001264 <OLED_ClearBuffer>:

// 清空缓冲区
void OLED_ClearBuffer(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
    // 重置缓冲区为全0 (全黑)
    memset(OLED_BackBuffer, 0, sizeof(OLED_BackBuffer));
 800126a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800126e:	2100      	movs	r1, #0
 8001270:	480a      	ldr	r0, [pc, #40]	@ (800129c <OLED_ClearBuffer+0x38>)
 8001272:	f006 fb7a 	bl	800796a <memset>

    // 将所有页面标记为脏（需要更新）
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8001276:	2300      	movs	r3, #0
 8001278:	71fb      	strb	r3, [r7, #7]
 800127a:	e006      	b.n	800128a <OLED_ClearBuffer+0x26>
    {
        oled_dirty_pages[i] = 1;
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	4a08      	ldr	r2, [pc, #32]	@ (80012a0 <OLED_ClearBuffer+0x3c>)
 8001280:	2101      	movs	r1, #1
 8001282:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	3301      	adds	r3, #1
 8001288:	71fb      	strb	r3, [r7, #7]
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	2b07      	cmp	r3, #7
 800128e:	d9f5      	bls.n	800127c <OLED_ClearBuffer+0x18>
    }
}
 8001290:	bf00      	nop
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000344 	.word	0x20000344
 80012a0:	2000033c 	.word	0x2000033c

080012a4 <OLED_IsBusy>:

uint8_t OLED_IsBusy(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
    // 如果标记为忙，检查是否已经过了足够时间
    if (oled_update_flag)
 80012aa:	4b0f      	ldr	r3, [pc, #60]	@ (80012e8 <OLED_IsBusy+0x44>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d007      	beq.n	80012c4 <OLED_IsBusy+0x20>
    {
        // SSD1315/SSD1306 典型帧率约为60Hz，每帧约16.7ms
        // 可以根据需要调整刷新率，减小此值可以提高帧率
        uint32_t current_time = HAL_GetTick();
 80012b4:	f003 fda8 	bl	8004e08 <HAL_GetTick>
 80012b8:	6078      	str	r0, [r7, #4]
        if (current_time - oled_last_update_time >= 0)
 80012ba:	4b0c      	ldr	r3, [pc, #48]	@ (80012ec <OLED_IsBusy+0x48>)
 80012bc:	681b      	ldr	r3, [r3, #0]
        {
            oled_update_flag = OLED_READY; // 已经过了足够时间，不再忙
 80012be:	4b0a      	ldr	r3, [pc, #40]	@ (80012e8 <OLED_IsBusy+0x44>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	701a      	strb	r2, [r3, #0]
        }
    }

    // 如果DMA传输正在进行，也视为忙
    return (oled_update_flag || oled_dma_busy);
 80012c4:	4b08      	ldr	r3, [pc, #32]	@ (80012e8 <OLED_IsBusy+0x44>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d104      	bne.n	80012d8 <OLED_IsBusy+0x34>
 80012ce:	4b08      	ldr	r3, [pc, #32]	@ (80012f0 <OLED_IsBusy+0x4c>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <OLED_IsBusy+0x38>
 80012d8:	2301      	movs	r3, #1
 80012da:	e000      	b.n	80012de <OLED_IsBusy+0x3a>
 80012dc:	2300      	movs	r3, #0
 80012de:	b2db      	uxtb	r3, r3
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20000338 	.word	0x20000338
 80012ec:	20000334 	.word	0x20000334
 80012f0:	20000339 	.word	0x20000339

080012f4 <OLED_UpdateDisplayVSync>:

void OLED_UpdateDisplayVSync(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af02      	add	r7, sp, #8
    // 等待上一次更新完成
    while (OLED_IsBusy())
 80012fa:	bf00      	nop
 80012fc:	f7ff ffd2 	bl	80012a4 <OLED_IsBusy>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d1fa      	bne.n	80012fc <OLED_UpdateDisplayVSync+0x8>
    {
        // 可以加入短暂延时或者让出CPU，但通常不会停留很久
    }

    oled_update_flag = OLED_BUSY;
 8001306:	4b1f      	ldr	r3, [pc, #124]	@ (8001384 <OLED_UpdateDisplayVSync+0x90>)
 8001308:	2201      	movs	r2, #1
 800130a:	701a      	strb	r2, [r3, #0]
    oled_last_update_time = HAL_GetTick();
 800130c:	f003 fd7c 	bl	8004e08 <HAL_GetTick>
 8001310:	4603      	mov	r3, r0
 8001312:	4a1d      	ldr	r2, [pc, #116]	@ (8001388 <OLED_UpdateDisplayVSync+0x94>)
 8001314:	6013      	str	r3, [r2, #0]

    OLED_FrontBuffer[0] = 0x40;                                             // 数据控制字节：Co=0, D/C#=1 (数据)
 8001316:	4b1d      	ldr	r3, [pc, #116]	@ (800138c <OLED_UpdateDisplayVSync+0x98>)
 8001318:	2240      	movs	r2, #64	@ 0x40
 800131a:	701a      	strb	r2, [r3, #0]
    memcpy(OLED_FrontBuffer + 1, OLED_BackBuffer, OLED_WIDTH * OLED_PAGES); // 复制当前缓冲区到前缓冲区
 800131c:	4a1c      	ldr	r2, [pc, #112]	@ (8001390 <OLED_UpdateDisplayVSync+0x9c>)
 800131e:	4b1d      	ldr	r3, [pc, #116]	@ (8001394 <OLED_UpdateDisplayVSync+0xa0>)
 8001320:	4610      	mov	r0, r2
 8001322:	4619      	mov	r1, r3
 8001324:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001328:	461a      	mov	r2, r3
 800132a:	f006 fbac 	bl	8007a86 <memcpy>

    // 一次性发送所有命令
    for (uint8_t i = 0; i < sizeof(cmds); i++)
 800132e:	2300      	movs	r3, #0
 8001330:	71fb      	strb	r3, [r7, #7]
 8001332:	e008      	b.n	8001346 <OLED_UpdateDisplayVSync+0x52>
    {
        OLED_SendCommand(cmds[i]);
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	4a18      	ldr	r2, [pc, #96]	@ (8001398 <OLED_UpdateDisplayVSync+0xa4>)
 8001338:	5cd3      	ldrb	r3, [r2, r3]
 800133a:	4618      	mov	r0, r3
 800133c:	f000 f920 	bl	8001580 <OLED_SendCommand>
    for (uint8_t i = 0; i < sizeof(cmds); i++)
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	3301      	adds	r3, #1
 8001344:	71fb      	strb	r3, [r7, #7]
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	2b07      	cmp	r3, #7
 800134a:	d9f3      	bls.n	8001334 <OLED_UpdateDisplayVSync+0x40>
    }


    HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDR << 1, OLED_FrontBuffer, OLED_WIDTH * OLED_PAGES + 1, HAL_MAX_DELAY);
 800134c:	f04f 33ff 	mov.w	r3, #4294967295
 8001350:	9300      	str	r3, [sp, #0]
 8001352:	f240 4301 	movw	r3, #1025	@ 0x401
 8001356:	4a0d      	ldr	r2, [pc, #52]	@ (800138c <OLED_UpdateDisplayVSync+0x98>)
 8001358:	2178      	movs	r1, #120	@ 0x78
 800135a:	4810      	ldr	r0, [pc, #64]	@ (800139c <OLED_UpdateDisplayVSync+0xa8>)
 800135c:	f004 fae8 	bl	8005930 <HAL_I2C_Master_Transmit>

    // 重置所有脏页标记
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8001360:	2300      	movs	r3, #0
 8001362:	71bb      	strb	r3, [r7, #6]
 8001364:	e006      	b.n	8001374 <OLED_UpdateDisplayVSync+0x80>
    {
        oled_dirty_pages[i] = 0;
 8001366:	79bb      	ldrb	r3, [r7, #6]
 8001368:	4a0d      	ldr	r2, [pc, #52]	@ (80013a0 <OLED_UpdateDisplayVSync+0xac>)
 800136a:	2100      	movs	r1, #0
 800136c:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 800136e:	79bb      	ldrb	r3, [r7, #6]
 8001370:	3301      	adds	r3, #1
 8001372:	71bb      	strb	r3, [r7, #6]
 8001374:	79bb      	ldrb	r3, [r7, #6]
 8001376:	2b07      	cmp	r3, #7
 8001378:	d9f5      	bls.n	8001366 <OLED_UpdateDisplayVSync+0x72>
    }
}
 800137a:	bf00      	nop
 800137c:	bf00      	nop
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20000338 	.word	0x20000338
 8001388:	20000334 	.word	0x20000334
 800138c:	20000744 	.word	0x20000744
 8001390:	20000745 	.word	0x20000745
 8001394:	20000344 	.word	0x20000344
 8001398:	0800a30c 	.word	0x0800a30c
 800139c:	20000244 	.word	0x20000244
 80013a0:	2000033c 	.word	0x2000033c

080013a4 <OLED_UpdateDisplayPartial>:
    }
}

// 局部更新显示函数
void OLED_UpdateDisplayPartial(uint8_t startPage, uint8_t endPage)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af02      	add	r7, sp, #8
 80013aa:	4603      	mov	r3, r0
 80013ac:	460a      	mov	r2, r1
 80013ae:	71fb      	strb	r3, [r7, #7]
 80013b0:	4613      	mov	r3, r2
 80013b2:	71bb      	strb	r3, [r7, #6]
    // 边界检查
    if (startPage >= OLED_PAGES || endPage >= OLED_PAGES || startPage > endPage)
 80013b4:	79fb      	ldrb	r3, [r7, #7]
 80013b6:	2b07      	cmp	r3, #7
 80013b8:	d85c      	bhi.n	8001474 <OLED_UpdateDisplayPartial+0xd0>
 80013ba:	79bb      	ldrb	r3, [r7, #6]
 80013bc:	2b07      	cmp	r3, #7
 80013be:	d859      	bhi.n	8001474 <OLED_UpdateDisplayPartial+0xd0>
 80013c0:	79fa      	ldrb	r2, [r7, #7]
 80013c2:	79bb      	ldrb	r3, [r7, #6]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d855      	bhi.n	8001474 <OLED_UpdateDisplayPartial+0xd0>
        return;

    // 等待上一次更新完成
    while (OLED_IsBusy())
 80013c8:	bf00      	nop
 80013ca:	f7ff ff6b 	bl	80012a4 <OLED_IsBusy>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d1fa      	bne.n	80013ca <OLED_UpdateDisplayPartial+0x26>
    {
        // 可以加入短暂延时或者让出CPU
    }

    oled_update_flag = OLED_BUSY;
 80013d4:	4b29      	ldr	r3, [pc, #164]	@ (800147c <OLED_UpdateDisplayPartial+0xd8>)
 80013d6:	2201      	movs	r2, #1
 80013d8:	701a      	strb	r2, [r3, #0]
    oled_last_update_time = HAL_GetTick();
 80013da:	f003 fd15 	bl	8004e08 <HAL_GetTick>
 80013de:	4603      	mov	r3, r0
 80013e0:	4a27      	ldr	r2, [pc, #156]	@ (8001480 <OLED_UpdateDisplayPartial+0xdc>)
 80013e2:	6013      	str	r3, [r2, #0]

    // 设置页地址范围
    OLED_SendCommand(0x22);      // 页地址设置命令
 80013e4:	2022      	movs	r0, #34	@ 0x22
 80013e6:	f000 f8cb 	bl	8001580 <OLED_SendCommand>
    OLED_SendCommand(startPage); // 起始页
 80013ea:	79fb      	ldrb	r3, [r7, #7]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f000 f8c7 	bl	8001580 <OLED_SendCommand>
    OLED_SendCommand(endPage);   // 结束页
 80013f2:	79bb      	ldrb	r3, [r7, #6]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f000 f8c3 	bl	8001580 <OLED_SendCommand>

    // 设置列地址范围（总是更新整行）
    OLED_SendCommand(0x21); // 列地址设置命令
 80013fa:	2021      	movs	r0, #33	@ 0x21
 80013fc:	f000 f8c0 	bl	8001580 <OLED_SendCommand>
    OLED_SendCommand(0x00); // 起始列
 8001400:	2000      	movs	r0, #0
 8001402:	f000 f8bd 	bl	8001580 <OLED_SendCommand>
    OLED_SendCommand(0x7F); // 结束列 (127)
 8001406:	207f      	movs	r0, #127	@ 0x7f
 8001408:	f000 f8ba 	bl	8001580 <OLED_SendCommand>

    // 计算需要传输的数据长度
    uint16_t dataLen = OLED_WIDTH * (endPage - startPage + 1);
 800140c:	79ba      	ldrb	r2, [r7, #6]
 800140e:	79fb      	ldrb	r3, [r7, #7]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	3301      	adds	r3, #1
 8001414:	b29b      	uxth	r3, r3
 8001416:	01db      	lsls	r3, r3, #7
 8001418:	81bb      	strh	r3, [r7, #12]

    // 前缓冲区的第一个字节设为数据控制字节
    OLED_FrontBuffer[0] = 0x40; // 数据控制字节：Co=0, D/C#=1 (数据)
 800141a:	4b1a      	ldr	r3, [pc, #104]	@ (8001484 <OLED_UpdateDisplayPartial+0xe0>)
 800141c:	2240      	movs	r2, #64	@ 0x40
 800141e:	701a      	strb	r2, [r3, #0]

    // 只复制需要更新的页
    for (uint8_t page = startPage; page <= endPage; page++)
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	73fb      	strb	r3, [r7, #15]
 8001424:	e016      	b.n	8001454 <OLED_UpdateDisplayPartial+0xb0>
    {
        memcpy(
            OLED_FrontBuffer + 1 + (page - startPage) * OLED_WIDTH,
 8001426:	7bfa      	ldrb	r2, [r7, #15]
 8001428:	79fb      	ldrb	r3, [r7, #7]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	01db      	lsls	r3, r3, #7
 800142e:	3301      	adds	r3, #1
        memcpy(
 8001430:	4a14      	ldr	r2, [pc, #80]	@ (8001484 <OLED_UpdateDisplayPartial+0xe0>)
 8001432:	1898      	adds	r0, r3, r2
            OLED_BackBuffer + page * OLED_WIDTH,
 8001434:	7bfb      	ldrb	r3, [r7, #15]
 8001436:	01db      	lsls	r3, r3, #7
 8001438:	461a      	mov	r2, r3
        memcpy(
 800143a:	4b13      	ldr	r3, [pc, #76]	@ (8001488 <OLED_UpdateDisplayPartial+0xe4>)
 800143c:	4413      	add	r3, r2
 800143e:	2280      	movs	r2, #128	@ 0x80
 8001440:	4619      	mov	r1, r3
 8001442:	f006 fb20 	bl	8007a86 <memcpy>
            OLED_WIDTH);
        oled_dirty_pages[page] = 0; // 重置脏页标记
 8001446:	7bfb      	ldrb	r3, [r7, #15]
 8001448:	4a10      	ldr	r2, [pc, #64]	@ (800148c <OLED_UpdateDisplayPartial+0xe8>)
 800144a:	2100      	movs	r1, #0
 800144c:	54d1      	strb	r1, [r2, r3]
    for (uint8_t page = startPage; page <= endPage; page++)
 800144e:	7bfb      	ldrb	r3, [r7, #15]
 8001450:	3301      	adds	r3, #1
 8001452:	73fb      	strb	r3, [r7, #15]
 8001454:	7bfa      	ldrb	r2, [r7, #15]
 8001456:	79bb      	ldrb	r3, [r7, #6]
 8001458:	429a      	cmp	r2, r3
 800145a:	d9e4      	bls.n	8001426 <OLED_UpdateDisplayPartial+0x82>
    }

    // 发送数据
    HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDR << 1, OLED_FrontBuffer, dataLen + 1, HAL_MAX_DELAY);
 800145c:	89bb      	ldrh	r3, [r7, #12]
 800145e:	3301      	adds	r3, #1
 8001460:	b29b      	uxth	r3, r3
 8001462:	f04f 32ff 	mov.w	r2, #4294967295
 8001466:	9200      	str	r2, [sp, #0]
 8001468:	4a06      	ldr	r2, [pc, #24]	@ (8001484 <OLED_UpdateDisplayPartial+0xe0>)
 800146a:	2178      	movs	r1, #120	@ 0x78
 800146c:	4808      	ldr	r0, [pc, #32]	@ (8001490 <OLED_UpdateDisplayPartial+0xec>)
 800146e:	f004 fa5f 	bl	8005930 <HAL_I2C_Master_Transmit>
 8001472:	e000      	b.n	8001476 <OLED_UpdateDisplayPartial+0xd2>
        return;
 8001474:	bf00      	nop
}
 8001476:	3710      	adds	r7, #16
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	20000338 	.word	0x20000338
 8001480:	20000334 	.word	0x20000334
 8001484:	20000744 	.word	0x20000744
 8001488:	20000344 	.word	0x20000344
 800148c:	2000033c 	.word	0x2000033c
 8001490:	20000244 	.word	0x20000244

08001494 <OLED_WritePixel>:

void OLED_WritePixel(int16_t x, int16_t y, uint8_t color)
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	80fb      	strh	r3, [r7, #6]
 800149e:	460b      	mov	r3, r1
 80014a0:	80bb      	strh	r3, [r7, #4]
 80014a2:	4613      	mov	r3, r2
 80014a4:	70fb      	strb	r3, [r7, #3]
    // 边界检查
    if (x >= OLED_WIDTH || x < 0 || y >= OLED_HEIGHT || y < 0)
 80014a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014aa:	2b7f      	cmp	r3, #127	@ 0x7f
 80014ac:	dc5e      	bgt.n	800156c <OLED_WritePixel+0xd8>
 80014ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	db5a      	blt.n	800156c <OLED_WritePixel+0xd8>
 80014b6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80014ba:	2b3f      	cmp	r3, #63	@ 0x3f
 80014bc:	dc56      	bgt.n	800156c <OLED_WritePixel+0xd8>
 80014be:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	db52      	blt.n	800156c <OLED_WritePixel+0xd8>
        return;

    // 计算像素所在的字节位置
    uint16_t byte_index = x + (y / 8) * OLED_WIDTH;
 80014c6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	da00      	bge.n	80014d0 <OLED_WritePixel+0x3c>
 80014ce:	3307      	adds	r3, #7
 80014d0:	10db      	asrs	r3, r3, #3
 80014d2:	b21b      	sxth	r3, r3
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	01db      	lsls	r3, r3, #7
 80014d8:	b29a      	uxth	r2, r3
 80014da:	88fb      	ldrh	r3, [r7, #6]
 80014dc:	4413      	add	r3, r2
 80014de:	81fb      	strh	r3, [r7, #14]
    uint8_t bit_position = y % 8;
 80014e0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80014e4:	425a      	negs	r2, r3
 80014e6:	f003 0307 	and.w	r3, r3, #7
 80014ea:	f002 0207 	and.w	r2, r2, #7
 80014ee:	bf58      	it	pl
 80014f0:	4253      	negpl	r3, r2
 80014f2:	b21b      	sxth	r3, r3
 80014f4:	737b      	strb	r3, [r7, #13]
    uint8_t page = y / 8; // 计算所在页
 80014f6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	da00      	bge.n	8001500 <OLED_WritePixel+0x6c>
 80014fe:	3307      	adds	r3, #7
 8001500:	10db      	asrs	r3, r3, #3
 8001502:	b21b      	sxth	r3, r3
 8001504:	733b      	strb	r3, [r7, #12]

    // 记录当前像素值
    uint8_t old_value = OLED_BackBuffer[byte_index];
 8001506:	89fb      	ldrh	r3, [r7, #14]
 8001508:	4a1b      	ldr	r2, [pc, #108]	@ (8001578 <OLED_WritePixel+0xe4>)
 800150a:	5cd3      	ldrb	r3, [r2, r3]
 800150c:	72fb      	strb	r3, [r7, #11]

    if (color) // 如果需要点亮像素
 800150e:	78fb      	ldrb	r3, [r7, #3]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d00f      	beq.n	8001534 <OLED_WritePixel+0xa0>
        OLED_BackBuffer[byte_index] |= (1 << bit_position);
 8001514:	89fb      	ldrh	r3, [r7, #14]
 8001516:	4a18      	ldr	r2, [pc, #96]	@ (8001578 <OLED_WritePixel+0xe4>)
 8001518:	5cd3      	ldrb	r3, [r2, r3]
 800151a:	b25a      	sxtb	r2, r3
 800151c:	7b7b      	ldrb	r3, [r7, #13]
 800151e:	2101      	movs	r1, #1
 8001520:	fa01 f303 	lsl.w	r3, r1, r3
 8001524:	b25b      	sxtb	r3, r3
 8001526:	4313      	orrs	r3, r2
 8001528:	b25a      	sxtb	r2, r3
 800152a:	89fb      	ldrh	r3, [r7, #14]
 800152c:	b2d1      	uxtb	r1, r2
 800152e:	4a12      	ldr	r2, [pc, #72]	@ (8001578 <OLED_WritePixel+0xe4>)
 8001530:	54d1      	strb	r1, [r2, r3]
 8001532:	e010      	b.n	8001556 <OLED_WritePixel+0xc2>
    else // 如果需要熄灭像素
        OLED_BackBuffer[byte_index] &= ~(1 << bit_position);
 8001534:	89fb      	ldrh	r3, [r7, #14]
 8001536:	4a10      	ldr	r2, [pc, #64]	@ (8001578 <OLED_WritePixel+0xe4>)
 8001538:	5cd3      	ldrb	r3, [r2, r3]
 800153a:	b25a      	sxtb	r2, r3
 800153c:	7b7b      	ldrb	r3, [r7, #13]
 800153e:	2101      	movs	r1, #1
 8001540:	fa01 f303 	lsl.w	r3, r1, r3
 8001544:	b25b      	sxtb	r3, r3
 8001546:	43db      	mvns	r3, r3
 8001548:	b25b      	sxtb	r3, r3
 800154a:	4013      	ands	r3, r2
 800154c:	b25a      	sxtb	r2, r3
 800154e:	89fb      	ldrh	r3, [r7, #14]
 8001550:	b2d1      	uxtb	r1, r2
 8001552:	4a09      	ldr	r2, [pc, #36]	@ (8001578 <OLED_WritePixel+0xe4>)
 8001554:	54d1      	strb	r1, [r2, r3]

    // 如果像素值发生变化，标记该页为脏
    if (old_value != OLED_BackBuffer[byte_index])
 8001556:	89fb      	ldrh	r3, [r7, #14]
 8001558:	4a07      	ldr	r2, [pc, #28]	@ (8001578 <OLED_WritePixel+0xe4>)
 800155a:	5cd3      	ldrb	r3, [r2, r3]
 800155c:	7afa      	ldrb	r2, [r7, #11]
 800155e:	429a      	cmp	r2, r3
 8001560:	d005      	beq.n	800156e <OLED_WritePixel+0xda>
    {
        oled_dirty_pages[page] = 1;
 8001562:	7b3b      	ldrb	r3, [r7, #12]
 8001564:	4a05      	ldr	r2, [pc, #20]	@ (800157c <OLED_WritePixel+0xe8>)
 8001566:	2101      	movs	r1, #1
 8001568:	54d1      	strb	r1, [r2, r3]
 800156a:	e000      	b.n	800156e <OLED_WritePixel+0xda>
        return;
 800156c:	bf00      	nop
    }
}
 800156e:	3714      	adds	r7, #20
 8001570:	46bd      	mov	sp, r7
 8001572:	bc80      	pop	{r7}
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	20000344 	.word	0x20000344
 800157c:	2000033c 	.word	0x2000033c

08001580 <OLED_SendCommand>:

void OLED_SendCommand(uint8_t command)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b086      	sub	sp, #24
 8001584:	af02      	add	r7, sp, #8
 8001586:	4603      	mov	r3, r0
 8001588:	71fb      	strb	r3, [r7, #7]
    uint8_t data[2];
    data[0] = 0x00; // Co = 0, D/C# = 0
 800158a:	2300      	movs	r3, #0
 800158c:	733b      	strb	r3, [r7, #12]
    data[1] = command;
 800158e:	79fb      	ldrb	r3, [r7, #7]
 8001590:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDR << 1, data, 2, HAL_MAX_DELAY);
 8001592:	f107 020c 	add.w	r2, r7, #12
 8001596:	f04f 33ff 	mov.w	r3, #4294967295
 800159a:	9300      	str	r3, [sp, #0]
 800159c:	2302      	movs	r3, #2
 800159e:	2178      	movs	r1, #120	@ 0x78
 80015a0:	4803      	ldr	r0, [pc, #12]	@ (80015b0 <OLED_SendCommand+0x30>)
 80015a2:	f004 f9c5 	bl	8005930 <HAL_I2C_Master_Transmit>
}
 80015a6:	bf00      	nop
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20000244 	.word	0x20000244

080015b4 <OLED_Init>:
    OLED_UpdateDisplayVSync();
}

// 更新OLED初始化函数来使用双缓冲
void OLED_Init()
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
    HAL_Delay(100); // 等待OLED上电稳定
 80015b8:	2064      	movs	r0, #100	@ 0x64
 80015ba:	f003 fc2f 	bl	8004e1c <HAL_Delay>

    // 初始化命令序列
    OLED_SendCommand(0xAE); // 关闭显示
 80015be:	20ae      	movs	r0, #174	@ 0xae
 80015c0:	f7ff ffde 	bl	8001580 <OLED_SendCommand>
    OLED_SendCommand(0xD5); // 设置显示时钟分频比/振荡器频率
 80015c4:	20d5      	movs	r0, #213	@ 0xd5
 80015c6:	f7ff ffdb 	bl	8001580 <OLED_SendCommand>
    OLED_SendCommand(0x80); // 推荐值
 80015ca:	2080      	movs	r0, #128	@ 0x80
 80015cc:	f7ff ffd8 	bl	8001580 <OLED_SendCommand>
    OLED_SendCommand(0xA8); // 设置多路复用比
 80015d0:	20a8      	movs	r0, #168	@ 0xa8
 80015d2:	f7ff ffd5 	bl	8001580 <OLED_SendCommand>
    OLED_SendCommand(0x3F); // 默认 0x3F (1/64 duty)
 80015d6:	203f      	movs	r0, #63	@ 0x3f
 80015d8:	f7ff ffd2 	bl	8001580 <OLED_SendCommand>
    OLED_SendCommand(0xD3); // 设置显示偏移
 80015dc:	20d3      	movs	r0, #211	@ 0xd3
 80015de:	f7ff ffcf 	bl	8001580 <OLED_SendCommand>
    OLED_SendCommand(0x00); // 无偏移
 80015e2:	2000      	movs	r0, #0
 80015e4:	f7ff ffcc 	bl	8001580 <OLED_SendCommand>
    OLED_SendCommand(0x40); // 设置显示开始行 (0x40-0x7F)
 80015e8:	2040      	movs	r0, #64	@ 0x40
 80015ea:	f7ff ffc9 	bl	8001580 <OLED_SendCommand>
    OLED_SendCommand(0x8D); // 电荷泵设置
 80015ee:	208d      	movs	r0, #141	@ 0x8d
 80015f0:	f7ff ffc6 	bl	8001580 <OLED_SendCommand>
    OLED_SendCommand(0x14); // 启用电荷泵
 80015f4:	2014      	movs	r0, #20
 80015f6:	f7ff ffc3 	bl	8001580 <OLED_SendCommand>
    OLED_SendCommand(0x20); // 设置内存寻址模式
 80015fa:	2020      	movs	r0, #32
 80015fc:	f7ff ffc0 	bl	8001580 <OLED_SendCommand>
    OLED_SendCommand(0x00); // 水平寻址模式
 8001600:	2000      	movs	r0, #0
 8001602:	f7ff ffbd 	bl	8001580 <OLED_SendCommand>
    OLED_SendCommand(0xA1); // 段重映射，列地址127映射到SEG0
 8001606:	20a1      	movs	r0, #161	@ 0xa1
 8001608:	f7ff ffba 	bl	8001580 <OLED_SendCommand>
    OLED_SendCommand(0xC8); // COM输出扫描方向，从COM[N-1]到COM0
 800160c:	20c8      	movs	r0, #200	@ 0xc8
 800160e:	f7ff ffb7 	bl	8001580 <OLED_SendCommand>
    OLED_SendCommand(0xDA); // COM硬件配置
 8001612:	20da      	movs	r0, #218	@ 0xda
 8001614:	f7ff ffb4 	bl	8001580 <OLED_SendCommand>
    OLED_SendCommand(0x12); // 交替COM配置，使能COM左/右重映射
 8001618:	2012      	movs	r0, #18
 800161a:	f7ff ffb1 	bl	8001580 <OLED_SendCommand>
    OLED_SendCommand(0x81); // 设置对比度控制
 800161e:	2081      	movs	r0, #129	@ 0x81
 8001620:	f7ff ffae 	bl	8001580 <OLED_SendCommand>
    OLED_SendCommand(0xCF); // 对比度值(0-255)
 8001624:	20cf      	movs	r0, #207	@ 0xcf
 8001626:	f7ff ffab 	bl	8001580 <OLED_SendCommand>
    OLED_SendCommand(0xD9); // 设置预充电周期
 800162a:	20d9      	movs	r0, #217	@ 0xd9
 800162c:	f7ff ffa8 	bl	8001580 <OLED_SendCommand>
    OLED_SendCommand(0xF1); // 第1和第2阶段的预充电周期
 8001630:	20f1      	movs	r0, #241	@ 0xf1
 8001632:	f7ff ffa5 	bl	8001580 <OLED_SendCommand>
    OLED_SendCommand(0xDB); // 设置VCOMH解除选择电平
 8001636:	20db      	movs	r0, #219	@ 0xdb
 8001638:	f7ff ffa2 	bl	8001580 <OLED_SendCommand>
    OLED_SendCommand(0x30); // 约0.83xVcc
 800163c:	2030      	movs	r0, #48	@ 0x30
 800163e:	f7ff ff9f 	bl	8001580 <OLED_SendCommand>
    OLED_SendCommand(0xA4); // 显示RAM内容
 8001642:	20a4      	movs	r0, #164	@ 0xa4
 8001644:	f7ff ff9c 	bl	8001580 <OLED_SendCommand>
    OLED_SendCommand(0xA6); // 正常显示(非反显)
 8001648:	20a6      	movs	r0, #166	@ 0xa6
 800164a:	f7ff ff99 	bl	8001580 <OLED_SendCommand>
    OLED_SendCommand(0x2E); // 禁用滚动
 800164e:	202e      	movs	r0, #46	@ 0x2e
 8001650:	f7ff ff96 	bl	8001580 <OLED_SendCommand>

    // 初始化缓冲区
    OLED_InitBuffer();
 8001654:	f7ff fdd2 	bl	80011fc <OLED_InitBuffer>

    // 清屏
    OLED_ClearBuffer();
 8001658:	f7ff fe04 	bl	8001264 <OLED_ClearBuffer>

    // 开启显示
    OLED_SendCommand(0xAF);
 800165c:	20af      	movs	r0, #175	@ 0xaf
 800165e:	f7ff ff8f 	bl	8001580 <OLED_SendCommand>
}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
	...

08001668 <OLED_InvertArea>:

// 区域反色功能 - 将指定矩形区域内的像素颜色反转 //! UPDATEDISPLAY REQUIRED
void OLED_InvertArea(int16_t x, int16_t y, uint8_t width, uint8_t height)
{
 8001668:	b490      	push	{r4, r7}
 800166a:	b088      	sub	sp, #32
 800166c:	af00      	add	r7, sp, #0
 800166e:	4604      	mov	r4, r0
 8001670:	4608      	mov	r0, r1
 8001672:	4611      	mov	r1, r2
 8001674:	461a      	mov	r2, r3
 8001676:	4623      	mov	r3, r4
 8001678:	80fb      	strh	r3, [r7, #6]
 800167a:	4603      	mov	r3, r0
 800167c:	80bb      	strh	r3, [r7, #4]
 800167e:	460b      	mov	r3, r1
 8001680:	70fb      	strb	r3, [r7, #3]
 8001682:	4613      	mov	r3, r2
 8001684:	70bb      	strb	r3, [r7, #2]
    if (width == 0 || height == 0)
 8001686:	78fb      	ldrb	r3, [r7, #3]
 8001688:	2b00      	cmp	r3, #0
 800168a:	f000 809d 	beq.w	80017c8 <OLED_InvertArea+0x160>
 800168e:	78bb      	ldrb	r3, [r7, #2]
 8001690:	2b00      	cmp	r3, #0
 8001692:	f000 8099 	beq.w	80017c8 <OLED_InvertArea+0x160>
        return;

    int16_t x_start_on_screen = x;
 8001696:	88fb      	ldrh	r3, [r7, #6]
 8001698:	83fb      	strh	r3, [r7, #30]
    int16_t y_start_on_screen = y;
 800169a:	88bb      	ldrh	r3, [r7, #4]
 800169c:	83bb      	strh	r3, [r7, #28]
    int16_t x_end_on_screen = x + width - 1;
 800169e:	78fb      	ldrb	r3, [r7, #3]
 80016a0:	b29a      	uxth	r2, r3
 80016a2:	88fb      	ldrh	r3, [r7, #6]
 80016a4:	4413      	add	r3, r2
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	3b01      	subs	r3, #1
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	837b      	strh	r3, [r7, #26]
    int16_t y_end_on_screen = y + height - 1;
 80016ae:	78bb      	ldrb	r3, [r7, #2]
 80016b0:	b29a      	uxth	r2, r3
 80016b2:	88bb      	ldrh	r3, [r7, #4]
 80016b4:	4413      	add	r3, r2
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	3b01      	subs	r3, #1
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	833b      	strh	r3, [r7, #24]

    // Clip to screen boundaries
    if (x_start_on_screen < 0)
 80016be:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	da01      	bge.n	80016ca <OLED_InvertArea+0x62>
        x_start_on_screen = 0;
 80016c6:	2300      	movs	r3, #0
 80016c8:	83fb      	strh	r3, [r7, #30]
    if (y_start_on_screen < 0)
 80016ca:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	da01      	bge.n	80016d6 <OLED_InvertArea+0x6e>
        y_start_on_screen = 0;
 80016d2:	2300      	movs	r3, #0
 80016d4:	83bb      	strh	r3, [r7, #28]
    if (x_end_on_screen >= OLED_WIDTH)
 80016d6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80016da:	2b7f      	cmp	r3, #127	@ 0x7f
 80016dc:	dd01      	ble.n	80016e2 <OLED_InvertArea+0x7a>
        x_end_on_screen = OLED_WIDTH - 1;
 80016de:	237f      	movs	r3, #127	@ 0x7f
 80016e0:	837b      	strh	r3, [r7, #26]
    if (y_end_on_screen >= OLED_HEIGHT)
 80016e2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80016e6:	2b3f      	cmp	r3, #63	@ 0x3f
 80016e8:	dd01      	ble.n	80016ee <OLED_InvertArea+0x86>
        y_end_on_screen = OLED_HEIGHT - 1;
 80016ea:	233f      	movs	r3, #63	@ 0x3f
 80016ec:	833b      	strh	r3, [r7, #24]

    // If clipped area is invalid (e.g., entirely off-screen after clipping)
    if (x_start_on_screen > x_end_on_screen || y_start_on_screen > y_end_on_screen)
 80016ee:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80016f2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	dc68      	bgt.n	80017cc <OLED_InvertArea+0x164>
 80016fa:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80016fe:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001702:	429a      	cmp	r2, r3
 8001704:	dc62      	bgt.n	80017cc <OLED_InvertArea+0x164>
        return;

    // 计算涉及的页范围
    uint8_t start_page = y_start_on_screen / 8;
 8001706:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800170a:	2b00      	cmp	r3, #0
 800170c:	da00      	bge.n	8001710 <OLED_InvertArea+0xa8>
 800170e:	3307      	adds	r3, #7
 8001710:	10db      	asrs	r3, r3, #3
 8001712:	b21b      	sxth	r3, r3
 8001714:	747b      	strb	r3, [r7, #17]
    uint8_t end_page = y_end_on_screen / 8;
 8001716:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800171a:	2b00      	cmp	r3, #0
 800171c:	da00      	bge.n	8001720 <OLED_InvertArea+0xb8>
 800171e:	3307      	adds	r3, #7
 8001720:	10db      	asrs	r3, r3, #3
 8001722:	b21b      	sxth	r3, r3
 8001724:	743b      	strb	r3, [r7, #16]

    // 标记受影响的页为脏页
    extern volatile uint8_t oled_dirty_pages[];
    for (uint8_t page = start_page; page <= end_page; page++)
 8001726:	7c7b      	ldrb	r3, [r7, #17]
 8001728:	75fb      	strb	r3, [r7, #23]
 800172a:	e006      	b.n	800173a <OLED_InvertArea+0xd2>
    {
        oled_dirty_pages[page] = 1;
 800172c:	7dfb      	ldrb	r3, [r7, #23]
 800172e:	4a2a      	ldr	r2, [pc, #168]	@ (80017d8 <OLED_InvertArea+0x170>)
 8001730:	2101      	movs	r1, #1
 8001732:	54d1      	strb	r1, [r2, r3]
    for (uint8_t page = start_page; page <= end_page; page++)
 8001734:	7dfb      	ldrb	r3, [r7, #23]
 8001736:	3301      	adds	r3, #1
 8001738:	75fb      	strb	r3, [r7, #23]
 800173a:	7dfa      	ldrb	r2, [r7, #23]
 800173c:	7c3b      	ldrb	r3, [r7, #16]
 800173e:	429a      	cmp	r2, r3
 8001740:	d9f4      	bls.n	800172c <OLED_InvertArea+0xc4>
    }

    // 优化的像素更新逻辑 - 按行处理以提高缓存命中率
    for (int16_t j = y_start_on_screen; j <= y_end_on_screen; j++)
 8001742:	8bbb      	ldrh	r3, [r7, #28]
 8001744:	82bb      	strh	r3, [r7, #20]
 8001746:	e038      	b.n	80017ba <OLED_InvertArea+0x152>
    {
        uint8_t page = (uint8_t)j / 8;
 8001748:	8abb      	ldrh	r3, [r7, #20]
 800174a:	b2db      	uxtb	r3, r3
 800174c:	08db      	lsrs	r3, r3, #3
 800174e:	73fb      	strb	r3, [r7, #15]
        uint8_t bit_position = (uint8_t)j % 8;
 8001750:	8abb      	ldrh	r3, [r7, #20]
 8001752:	b2db      	uxtb	r3, r3
 8001754:	f003 0307 	and.w	r3, r3, #7
 8001758:	73bb      	strb	r3, [r7, #14]
        uint16_t byte_index_base = page * OLED_WIDTH;
 800175a:	7bfb      	ldrb	r3, [r7, #15]
 800175c:	b29b      	uxth	r3, r3
 800175e:	01db      	lsls	r3, r3, #7
 8001760:	81bb      	strh	r3, [r7, #12]

        // 处理当前行上的所有像素
        for (int16_t i = x_start_on_screen; i <= x_end_on_screen; i++)
 8001762:	8bfb      	ldrh	r3, [r7, #30]
 8001764:	827b      	strh	r3, [r7, #18]
 8001766:	e01c      	b.n	80017a2 <OLED_InvertArea+0x13a>
        {
            uint16_t byte_index = byte_index_base + i;
 8001768:	8a7a      	ldrh	r2, [r7, #18]
 800176a:	89bb      	ldrh	r3, [r7, #12]
 800176c:	4413      	add	r3, r2
 800176e:	817b      	strh	r3, [r7, #10]

            // 反转位
            if (byte_index < sizeof(OLED_BackBuffer))
 8001770:	897b      	ldrh	r3, [r7, #10]
 8001772:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001776:	d20e      	bcs.n	8001796 <OLED_InvertArea+0x12e>
            {
                OLED_BackBuffer[byte_index] ^= (1 << bit_position);
 8001778:	897b      	ldrh	r3, [r7, #10]
 800177a:	4a18      	ldr	r2, [pc, #96]	@ (80017dc <OLED_InvertArea+0x174>)
 800177c:	5cd3      	ldrb	r3, [r2, r3]
 800177e:	b25a      	sxtb	r2, r3
 8001780:	7bbb      	ldrb	r3, [r7, #14]
 8001782:	2101      	movs	r1, #1
 8001784:	fa01 f303 	lsl.w	r3, r1, r3
 8001788:	b25b      	sxtb	r3, r3
 800178a:	4053      	eors	r3, r2
 800178c:	b25a      	sxtb	r2, r3
 800178e:	897b      	ldrh	r3, [r7, #10]
 8001790:	b2d1      	uxtb	r1, r2
 8001792:	4a12      	ldr	r2, [pc, #72]	@ (80017dc <OLED_InvertArea+0x174>)
 8001794:	54d1      	strb	r1, [r2, r3]
        for (int16_t i = x_start_on_screen; i <= x_end_on_screen; i++)
 8001796:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800179a:	b29b      	uxth	r3, r3
 800179c:	3301      	adds	r3, #1
 800179e:	b29b      	uxth	r3, r3
 80017a0:	827b      	strh	r3, [r7, #18]
 80017a2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80017a6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	dddc      	ble.n	8001768 <OLED_InvertArea+0x100>
    for (int16_t j = y_start_on_screen; j <= y_end_on_screen; j++)
 80017ae:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	3301      	adds	r3, #1
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	82bb      	strh	r3, [r7, #20]
 80017ba:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80017be:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	ddc0      	ble.n	8001748 <OLED_InvertArea+0xe0>
 80017c6:	e002      	b.n	80017ce <OLED_InvertArea+0x166>
        return;
 80017c8:	bf00      	nop
 80017ca:	e000      	b.n	80017ce <OLED_InvertArea+0x166>
        return;
 80017cc:	bf00      	nop
            }
        }
    }
}
 80017ce:	3720      	adds	r7, #32
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bc90      	pop	{r4, r7}
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	2000033c 	.word	0x2000033c
 80017dc:	20000344 	.word	0x20000344

080017e0 <OLED_DisplayChar>:
    OLED_SendCommand(0x00 + (x & 0x0F));        // 设置低4位列地址
    OLED_SendCommand(0x10 + ((x >> 4) & 0x0F)); // 设置高4位列地址
}

void OLED_DisplayChar(int16_t x, int16_t y, char ch) //! UPDATEDISPLAY REQUIRED
{
 80017e0:	b480      	push	{r7}
 80017e2:	b089      	sub	sp, #36	@ 0x24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	80fb      	strh	r3, [r7, #6]
 80017ea:	460b      	mov	r3, r1
 80017ec:	80bb      	strh	r3, [r7, #4]
 80017ee:	4613      	mov	r3, r2
 80017f0:	70fb      	strb	r3, [r7, #3]
    const uint8_t font_width = 6;
 80017f2:	2306      	movs	r3, #6
 80017f4:	773b      	strb	r3, [r7, #28]
    const uint8_t font_height = 8;
 80017f6:	2308      	movs	r3, #8
 80017f8:	76fb      	strb	r3, [r7, #27]

    if (ch < 32)
 80017fa:	78fb      	ldrb	r3, [r7, #3]
 80017fc:	2b1f      	cmp	r3, #31
 80017fe:	f240 80aa 	bls.w	8001956 <OLED_DisplayChar+0x176>
        return;

    uint8_t c = ch - 32;
 8001802:	78fb      	ldrb	r3, [r7, #3]
 8001804:	3b20      	subs	r3, #32
 8001806:	76bb      	strb	r3, [r7, #26]

    uint8_t start_page = (y >= 0) ? (y / 8) : 0;
 8001808:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800180c:	2b00      	cmp	r3, #0
 800180e:	db08      	blt.n	8001822 <OLED_DisplayChar+0x42>
 8001810:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001814:	2b00      	cmp	r3, #0
 8001816:	da00      	bge.n	800181a <OLED_DisplayChar+0x3a>
 8001818:	3307      	adds	r3, #7
 800181a:	10db      	asrs	r3, r3, #3
 800181c:	b21b      	sxth	r3, r3
 800181e:	b2db      	uxtb	r3, r3
 8001820:	e000      	b.n	8001824 <OLED_DisplayChar+0x44>
 8001822:	2300      	movs	r3, #0
 8001824:	767b      	strb	r3, [r7, #25]
    uint8_t end_page = ((y + font_height - 1) < OLED_HEIGHT) ? ((y + font_height - 1) / 8) : (OLED_HEIGHT / 8 - 1);
 8001826:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800182a:	7efb      	ldrb	r3, [r7, #27]
 800182c:	4413      	add	r3, r2
 800182e:	2b40      	cmp	r3, #64	@ 0x40
 8001830:	dc0a      	bgt.n	8001848 <OLED_DisplayChar+0x68>
 8001832:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001836:	7efb      	ldrb	r3, [r7, #27]
 8001838:	4413      	add	r3, r2
 800183a:	3b01      	subs	r3, #1
 800183c:	2b00      	cmp	r3, #0
 800183e:	da00      	bge.n	8001842 <OLED_DisplayChar+0x62>
 8001840:	3307      	adds	r3, #7
 8001842:	10db      	asrs	r3, r3, #3
 8001844:	b2db      	uxtb	r3, r3
 8001846:	e000      	b.n	800184a <OLED_DisplayChar+0x6a>
 8001848:	2307      	movs	r3, #7
 800184a:	763b      	strb	r3, [r7, #24]

    extern volatile uint8_t oled_dirty_pages[];
    for (uint8_t page = start_page; page <= end_page && page < OLED_PAGES; page++)
 800184c:	7e7b      	ldrb	r3, [r7, #25]
 800184e:	77fb      	strb	r3, [r7, #31]
 8001850:	e006      	b.n	8001860 <OLED_DisplayChar+0x80>
    {
        oled_dirty_pages[page] = 1;
 8001852:	7ffb      	ldrb	r3, [r7, #31]
 8001854:	4a43      	ldr	r2, [pc, #268]	@ (8001964 <OLED_DisplayChar+0x184>)
 8001856:	2101      	movs	r1, #1
 8001858:	54d1      	strb	r1, [r2, r3]
    for (uint8_t page = start_page; page <= end_page && page < OLED_PAGES; page++)
 800185a:	7ffb      	ldrb	r3, [r7, #31]
 800185c:	3301      	adds	r3, #1
 800185e:	77fb      	strb	r3, [r7, #31]
 8001860:	7ffa      	ldrb	r2, [r7, #31]
 8001862:	7e3b      	ldrb	r3, [r7, #24]
 8001864:	429a      	cmp	r2, r3
 8001866:	d802      	bhi.n	800186e <OLED_DisplayChar+0x8e>
 8001868:	7ffb      	ldrb	r3, [r7, #31]
 800186a:	2b07      	cmp	r3, #7
 800186c:	d9f1      	bls.n	8001852 <OLED_DisplayChar+0x72>
    }
    // 按列渲染
    for (uint8_t char_col = 0; char_col < font_width; char_col++)
 800186e:	2300      	movs	r3, #0
 8001870:	77bb      	strb	r3, [r7, #30]
 8001872:	e06b      	b.n	800194c <OLED_DisplayChar+0x16c>
    {
        int16_t screen_x = x + char_col;
 8001874:	7fbb      	ldrb	r3, [r7, #30]
 8001876:	b29a      	uxth	r2, r3
 8001878:	88fb      	ldrh	r3, [r7, #6]
 800187a:	4413      	add	r3, r2
 800187c:	b29b      	uxth	r3, r3
 800187e:	82fb      	strh	r3, [r7, #22]
        if (screen_x < 0 || screen_x >= OLED_WIDTH)
 8001880:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001884:	2b00      	cmp	r3, #0
 8001886:	db5d      	blt.n	8001944 <OLED_DisplayChar+0x164>
 8001888:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800188c:	2b7f      	cmp	r3, #127	@ 0x7f
 800188e:	dc59      	bgt.n	8001944 <OLED_DisplayChar+0x164>
            continue;

        if ((c * font_width + char_col) >= sizeof(OLED_FONT_6x8))
 8001890:	7ebb      	ldrb	r3, [r7, #26]
 8001892:	7f3a      	ldrb	r2, [r7, #28]
 8001894:	fb03 f202 	mul.w	r2, r3, r2
 8001898:	7fbb      	ldrb	r3, [r7, #30]
 800189a:	4413      	add	r3, r2
 800189c:	461a      	mov	r2, r3
 800189e:	f240 2321 	movw	r3, #545	@ 0x221
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d859      	bhi.n	800195a <OLED_DisplayChar+0x17a>
            break;
        uint8_t font_data_col = OLED_FONT_6x8[c * font_width + char_col];
 80018a6:	7ebb      	ldrb	r3, [r7, #26]
 80018a8:	7f3a      	ldrb	r2, [r7, #28]
 80018aa:	fb03 f202 	mul.w	r2, r3, r2
 80018ae:	7fbb      	ldrb	r3, [r7, #30]
 80018b0:	4413      	add	r3, r2
 80018b2:	4a2d      	ldr	r2, [pc, #180]	@ (8001968 <OLED_DisplayChar+0x188>)
 80018b4:	5cd3      	ldrb	r3, [r2, r3]
 80018b6:	757b      	strb	r3, [r7, #21]

        for (uint8_t char_row_bit = 0; char_row_bit < font_height; char_row_bit++)
 80018b8:	2300      	movs	r3, #0
 80018ba:	777b      	strb	r3, [r7, #29]
 80018bc:	e03d      	b.n	800193a <OLED_DisplayChar+0x15a>
        {
            int16_t screen_y = y + char_row_bit;
 80018be:	7f7b      	ldrb	r3, [r7, #29]
 80018c0:	b29a      	uxth	r2, r3
 80018c2:	88bb      	ldrh	r3, [r7, #4]
 80018c4:	4413      	add	r3, r2
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	827b      	strh	r3, [r7, #18]
            if (screen_y < 0 || screen_y >= OLED_HEIGHT)
 80018ca:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	db2f      	blt.n	8001932 <OLED_DisplayChar+0x152>
 80018d2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80018d6:	2b3f      	cmp	r3, #63	@ 0x3f
 80018d8:	dc2b      	bgt.n	8001932 <OLED_DisplayChar+0x152>
                continue;

            if ((font_data_col >> char_row_bit) & 0x01)
 80018da:	7d7a      	ldrb	r2, [r7, #21]
 80018dc:	7f7b      	ldrb	r3, [r7, #29]
 80018de:	fa42 f303 	asr.w	r3, r2, r3
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d024      	beq.n	8001934 <OLED_DisplayChar+0x154>
            {
                uint8_t page = (uint8_t)screen_y / 8;
 80018ea:	8a7b      	ldrh	r3, [r7, #18]
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	08db      	lsrs	r3, r3, #3
 80018f0:	747b      	strb	r3, [r7, #17]
                uint8_t bit_offset_in_page = (uint8_t)screen_y % 8;
 80018f2:	8a7b      	ldrh	r3, [r7, #18]
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	f003 0307 	and.w	r3, r3, #7
 80018fa:	743b      	strb	r3, [r7, #16]
                uint16_t buffer_index = (uint16_t)screen_x + page * OLED_WIDTH;
 80018fc:	7c7b      	ldrb	r3, [r7, #17]
 80018fe:	b29b      	uxth	r3, r3
 8001900:	01db      	lsls	r3, r3, #7
 8001902:	b29a      	uxth	r2, r3
 8001904:	8afb      	ldrh	r3, [r7, #22]
 8001906:	4413      	add	r3, r2
 8001908:	81fb      	strh	r3, [r7, #14]

                if (buffer_index < sizeof(OLED_BackBuffer))
 800190a:	89fb      	ldrh	r3, [r7, #14]
 800190c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001910:	d210      	bcs.n	8001934 <OLED_DisplayChar+0x154>
                {
                    OLED_BackBuffer[buffer_index] |= (1 << bit_offset_in_page);
 8001912:	89fb      	ldrh	r3, [r7, #14]
 8001914:	4a15      	ldr	r2, [pc, #84]	@ (800196c <OLED_DisplayChar+0x18c>)
 8001916:	5cd3      	ldrb	r3, [r2, r3]
 8001918:	b25a      	sxtb	r2, r3
 800191a:	7c3b      	ldrb	r3, [r7, #16]
 800191c:	2101      	movs	r1, #1
 800191e:	fa01 f303 	lsl.w	r3, r1, r3
 8001922:	b25b      	sxtb	r3, r3
 8001924:	4313      	orrs	r3, r2
 8001926:	b25a      	sxtb	r2, r3
 8001928:	89fb      	ldrh	r3, [r7, #14]
 800192a:	b2d1      	uxtb	r1, r2
 800192c:	4a0f      	ldr	r2, [pc, #60]	@ (800196c <OLED_DisplayChar+0x18c>)
 800192e:	54d1      	strb	r1, [r2, r3]
 8001930:	e000      	b.n	8001934 <OLED_DisplayChar+0x154>
                continue;
 8001932:	bf00      	nop
        for (uint8_t char_row_bit = 0; char_row_bit < font_height; char_row_bit++)
 8001934:	7f7b      	ldrb	r3, [r7, #29]
 8001936:	3301      	adds	r3, #1
 8001938:	777b      	strb	r3, [r7, #29]
 800193a:	7f7a      	ldrb	r2, [r7, #29]
 800193c:	7efb      	ldrb	r3, [r7, #27]
 800193e:	429a      	cmp	r2, r3
 8001940:	d3bd      	bcc.n	80018be <OLED_DisplayChar+0xde>
 8001942:	e000      	b.n	8001946 <OLED_DisplayChar+0x166>
            continue;
 8001944:	bf00      	nop
    for (uint8_t char_col = 0; char_col < font_width; char_col++)
 8001946:	7fbb      	ldrb	r3, [r7, #30]
 8001948:	3301      	adds	r3, #1
 800194a:	77bb      	strb	r3, [r7, #30]
 800194c:	7fba      	ldrb	r2, [r7, #30]
 800194e:	7f3b      	ldrb	r3, [r7, #28]
 8001950:	429a      	cmp	r2, r3
 8001952:	d38f      	bcc.n	8001874 <OLED_DisplayChar+0x94>
 8001954:	e002      	b.n	800195c <OLED_DisplayChar+0x17c>
        return;
 8001956:	bf00      	nop
 8001958:	e000      	b.n	800195c <OLED_DisplayChar+0x17c>
            break;
 800195a:	bf00      	nop
                }
            }
        }
    }
}
 800195c:	3724      	adds	r7, #36	@ 0x24
 800195e:	46bd      	mov	sp, r7
 8001960:	bc80      	pop	{r7}
 8001962:	4770      	bx	lr
 8001964:	2000033c 	.word	0x2000033c
 8001968:	0800a0e8 	.word	0x0800a0e8
 800196c:	20000344 	.word	0x20000344

08001970 <OLED_DisplayCharInverted>:

void OLED_DisplayCharInverted(int16_t x, int16_t y, char ch, uint8_t inverted) //! UPDATEDISPLAY REQUIRED
{
 8001970:	b490      	push	{r4, r7}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	4604      	mov	r4, r0
 8001978:	4608      	mov	r0, r1
 800197a:	4611      	mov	r1, r2
 800197c:	461a      	mov	r2, r3
 800197e:	4623      	mov	r3, r4
 8001980:	80fb      	strh	r3, [r7, #6]
 8001982:	4603      	mov	r3, r0
 8001984:	80bb      	strh	r3, [r7, #4]
 8001986:	460b      	mov	r3, r1
 8001988:	70fb      	strb	r3, [r7, #3]
 800198a:	4613      	mov	r3, r2
 800198c:	70bb      	strb	r3, [r7, #2]
    const uint8_t font_width = 6;
 800198e:	2306      	movs	r3, #6
 8001990:	753b      	strb	r3, [r7, #20]
    const uint8_t font_height = 8;
 8001992:	2308      	movs	r3, #8
 8001994:	74fb      	strb	r3, [r7, #19]

    if (ch < 32)
 8001996:	78fb      	ldrb	r3, [r7, #3]
 8001998:	2b1f      	cmp	r3, #31
 800199a:	f240 8090 	bls.w	8001abe <OLED_DisplayCharInverted+0x14e>
        return;

    uint8_t c = ch - 32;
 800199e:	78fb      	ldrb	r3, [r7, #3]
 80019a0:	3b20      	subs	r3, #32
 80019a2:	74bb      	strb	r3, [r7, #18]

    for (uint8_t char_col = 0; char_col < font_width; char_col++)
 80019a4:	2300      	movs	r3, #0
 80019a6:	75fb      	strb	r3, [r7, #23]
 80019a8:	e083      	b.n	8001ab2 <OLED_DisplayCharInverted+0x142>
    {
        int16_t screen_x = x + char_col;
 80019aa:	7dfb      	ldrb	r3, [r7, #23]
 80019ac:	b29a      	uxth	r2, r3
 80019ae:	88fb      	ldrh	r3, [r7, #6]
 80019b0:	4413      	add	r3, r2
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	823b      	strh	r3, [r7, #16]
        if (screen_x < 0 || screen_x >= OLED_WIDTH)
 80019b6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	db75      	blt.n	8001aaa <OLED_DisplayCharInverted+0x13a>
 80019be:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80019c2:	2b7f      	cmp	r3, #127	@ 0x7f
 80019c4:	dc71      	bgt.n	8001aaa <OLED_DisplayCharInverted+0x13a>
            continue;

        if ((c * font_width + char_col) >= sizeof(OLED_FONT_6x8))
 80019c6:	7cbb      	ldrb	r3, [r7, #18]
 80019c8:	7d3a      	ldrb	r2, [r7, #20]
 80019ca:	fb03 f202 	mul.w	r2, r3, r2
 80019ce:	7dfb      	ldrb	r3, [r7, #23]
 80019d0:	4413      	add	r3, r2
 80019d2:	461a      	mov	r2, r3
 80019d4:	f240 2321 	movw	r3, #545	@ 0x221
 80019d8:	429a      	cmp	r2, r3
 80019da:	d872      	bhi.n	8001ac2 <OLED_DisplayCharInverted+0x152>
            break;
        uint8_t font_data_col = OLED_FONT_6x8[c * font_width + char_col];
 80019dc:	7cbb      	ldrb	r3, [r7, #18]
 80019de:	7d3a      	ldrb	r2, [r7, #20]
 80019e0:	fb03 f202 	mul.w	r2, r3, r2
 80019e4:	7dfb      	ldrb	r3, [r7, #23]
 80019e6:	4413      	add	r3, r2
 80019e8:	4a38      	ldr	r2, [pc, #224]	@ (8001acc <OLED_DisplayCharInverted+0x15c>)
 80019ea:	5cd3      	ldrb	r3, [r2, r3]
 80019ec:	75bb      	strb	r3, [r7, #22]

        if (inverted)
 80019ee:	78bb      	ldrb	r3, [r7, #2]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d002      	beq.n	80019fa <OLED_DisplayCharInverted+0x8a>
        {
            font_data_col = ~font_data_col;
 80019f4:	7dbb      	ldrb	r3, [r7, #22]
 80019f6:	43db      	mvns	r3, r3
 80019f8:	75bb      	strb	r3, [r7, #22]
        }

        for (uint8_t char_row_bit = 0; char_row_bit < font_height; char_row_bit++)
 80019fa:	2300      	movs	r3, #0
 80019fc:	757b      	strb	r3, [r7, #21]
 80019fe:	e04f      	b.n	8001aa0 <OLED_DisplayCharInverted+0x130>
        {
            int16_t screen_y = y + char_row_bit;
 8001a00:	7d7b      	ldrb	r3, [r7, #21]
 8001a02:	b29a      	uxth	r2, r3
 8001a04:	88bb      	ldrh	r3, [r7, #4]
 8001a06:	4413      	add	r3, r2
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	81fb      	strh	r3, [r7, #14]
            if (screen_y < 0 || screen_y >= OLED_HEIGHT)
 8001a0c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	db41      	blt.n	8001a98 <OLED_DisplayCharInverted+0x128>
 8001a14:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a18:	2b3f      	cmp	r3, #63	@ 0x3f
 8001a1a:	dc3d      	bgt.n	8001a98 <OLED_DisplayCharInverted+0x128>
                continue;

            uint8_t page = (uint8_t)screen_y / 8;
 8001a1c:	89fb      	ldrh	r3, [r7, #14]
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	08db      	lsrs	r3, r3, #3
 8001a22:	737b      	strb	r3, [r7, #13]
            uint8_t bit_offset_in_page = (uint8_t)screen_y % 8;
 8001a24:	89fb      	ldrh	r3, [r7, #14]
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	f003 0307 	and.w	r3, r3, #7
 8001a2c:	733b      	strb	r3, [r7, #12]
            uint16_t buffer_index = (uint16_t)screen_x + page * OLED_WIDTH;
 8001a2e:	7b7b      	ldrb	r3, [r7, #13]
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	01db      	lsls	r3, r3, #7
 8001a34:	b29a      	uxth	r2, r3
 8001a36:	8a3b      	ldrh	r3, [r7, #16]
 8001a38:	4413      	add	r3, r2
 8001a3a:	817b      	strh	r3, [r7, #10]

            if (buffer_index < sizeof(OLED_BackBuffer))
 8001a3c:	897b      	ldrh	r3, [r7, #10]
 8001a3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a42:	d22a      	bcs.n	8001a9a <OLED_DisplayCharInverted+0x12a>
            {
                if ((font_data_col >> char_row_bit) & 0x01)
 8001a44:	7dba      	ldrb	r2, [r7, #22]
 8001a46:	7d7b      	ldrb	r3, [r7, #21]
 8001a48:	fa42 f303 	asr.w	r3, r2, r3
 8001a4c:	f003 0301 	and.w	r3, r3, #1
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d00f      	beq.n	8001a74 <OLED_DisplayCharInverted+0x104>
                {
                    OLED_BackBuffer[buffer_index] |= (1 << bit_offset_in_page);
 8001a54:	897b      	ldrh	r3, [r7, #10]
 8001a56:	4a1e      	ldr	r2, [pc, #120]	@ (8001ad0 <OLED_DisplayCharInverted+0x160>)
 8001a58:	5cd3      	ldrb	r3, [r2, r3]
 8001a5a:	b25a      	sxtb	r2, r3
 8001a5c:	7b3b      	ldrb	r3, [r7, #12]
 8001a5e:	2101      	movs	r1, #1
 8001a60:	fa01 f303 	lsl.w	r3, r1, r3
 8001a64:	b25b      	sxtb	r3, r3
 8001a66:	4313      	orrs	r3, r2
 8001a68:	b25a      	sxtb	r2, r3
 8001a6a:	897b      	ldrh	r3, [r7, #10]
 8001a6c:	b2d1      	uxtb	r1, r2
 8001a6e:	4a18      	ldr	r2, [pc, #96]	@ (8001ad0 <OLED_DisplayCharInverted+0x160>)
 8001a70:	54d1      	strb	r1, [r2, r3]
 8001a72:	e012      	b.n	8001a9a <OLED_DisplayCharInverted+0x12a>
                }
                else
                {
                    OLED_BackBuffer[buffer_index] &= ~(1 << bit_offset_in_page);
 8001a74:	897b      	ldrh	r3, [r7, #10]
 8001a76:	4a16      	ldr	r2, [pc, #88]	@ (8001ad0 <OLED_DisplayCharInverted+0x160>)
 8001a78:	5cd3      	ldrb	r3, [r2, r3]
 8001a7a:	b25a      	sxtb	r2, r3
 8001a7c:	7b3b      	ldrb	r3, [r7, #12]
 8001a7e:	2101      	movs	r1, #1
 8001a80:	fa01 f303 	lsl.w	r3, r1, r3
 8001a84:	b25b      	sxtb	r3, r3
 8001a86:	43db      	mvns	r3, r3
 8001a88:	b25b      	sxtb	r3, r3
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	b25a      	sxtb	r2, r3
 8001a8e:	897b      	ldrh	r3, [r7, #10]
 8001a90:	b2d1      	uxtb	r1, r2
 8001a92:	4a0f      	ldr	r2, [pc, #60]	@ (8001ad0 <OLED_DisplayCharInverted+0x160>)
 8001a94:	54d1      	strb	r1, [r2, r3]
 8001a96:	e000      	b.n	8001a9a <OLED_DisplayCharInverted+0x12a>
                continue;
 8001a98:	bf00      	nop
        for (uint8_t char_row_bit = 0; char_row_bit < font_height; char_row_bit++)
 8001a9a:	7d7b      	ldrb	r3, [r7, #21]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	757b      	strb	r3, [r7, #21]
 8001aa0:	7d7a      	ldrb	r2, [r7, #21]
 8001aa2:	7cfb      	ldrb	r3, [r7, #19]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d3ab      	bcc.n	8001a00 <OLED_DisplayCharInverted+0x90>
 8001aa8:	e000      	b.n	8001aac <OLED_DisplayCharInverted+0x13c>
            continue;
 8001aaa:	bf00      	nop
    for (uint8_t char_col = 0; char_col < font_width; char_col++)
 8001aac:	7dfb      	ldrb	r3, [r7, #23]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	75fb      	strb	r3, [r7, #23]
 8001ab2:	7dfa      	ldrb	r2, [r7, #23]
 8001ab4:	7d3b      	ldrb	r3, [r7, #20]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	f4ff af77 	bcc.w	80019aa <OLED_DisplayCharInverted+0x3a>
 8001abc:	e002      	b.n	8001ac4 <OLED_DisplayCharInverted+0x154>
        return;
 8001abe:	bf00      	nop
 8001ac0:	e000      	b.n	8001ac4 <OLED_DisplayCharInverted+0x154>
            break;
 8001ac2:	bf00      	nop
                }
            }
        }
    }
}
 8001ac4:	3718      	adds	r7, #24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bc90      	pop	{r4, r7}
 8001aca:	4770      	bx	lr
 8001acc:	0800a0e8 	.word	0x0800a0e8
 8001ad0:	20000344 	.word	0x20000344

08001ad4 <OLED_DisplayString>:

void OLED_DisplayString(int16_t x, int16_t y, char *str) //! UPDATEDISPLAY REQUIRED
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	4603      	mov	r3, r0
 8001adc:	603a      	str	r2, [r7, #0]
 8001ade:	80fb      	strh	r3, [r7, #6]
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	80bb      	strh	r3, [r7, #4]
    uint8_t j = 0;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	73fb      	strb	r3, [r7, #15]
    const uint8_t font_width = 6;
 8001ae8:	2306      	movs	r3, #6
 8001aea:	73bb      	strb	r3, [r7, #14]
    const uint8_t font_height = 8;
 8001aec:	2308      	movs	r3, #8
 8001aee:	737b      	strb	r3, [r7, #13]

    if (y >= OLED_HEIGHT || (y + font_height - 1) < 0)
 8001af0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001af4:	2b3f      	cmp	r3, #63	@ 0x3f
 8001af6:	dc34      	bgt.n	8001b62 <OLED_DisplayString+0x8e>
 8001af8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001afc:	7b7b      	ldrb	r3, [r7, #13]
 8001afe:	4413      	add	r3, r2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	dd2e      	ble.n	8001b62 <OLED_DisplayString+0x8e>
    {
        return;
    }

    int16_t current_char_x;
    while (str[j] != '\0')
 8001b04:	e026      	b.n	8001b54 <OLED_DisplayString+0x80>
    {
        current_char_x = x + (j * font_width);
 8001b06:	7bfb      	ldrb	r3, [r7, #15]
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	7bba      	ldrb	r2, [r7, #14]
 8001b0c:	b292      	uxth	r2, r2
 8001b0e:	fb02 f303 	mul.w	r3, r2, r3
 8001b12:	b29a      	uxth	r2, r3
 8001b14:	88fb      	ldrh	r3, [r7, #6]
 8001b16:	4413      	add	r3, r2
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	817b      	strh	r3, [r7, #10]
        if (current_char_x >= OLED_WIDTH)
 8001b1c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001b20:	2b7f      	cmp	r3, #127	@ 0x7f
 8001b22:	dc20      	bgt.n	8001b66 <OLED_DisplayString+0x92>
        {
            break;
        }
        if ((current_char_x + font_width - 1) < 0)
 8001b24:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001b28:	7bbb      	ldrb	r3, [r7, #14]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	dc03      	bgt.n	8001b38 <OLED_DisplayString+0x64>
        {
            j++;
 8001b30:	7bfb      	ldrb	r3, [r7, #15]
 8001b32:	3301      	adds	r3, #1
 8001b34:	73fb      	strb	r3, [r7, #15]
            continue;
 8001b36:	e00d      	b.n	8001b54 <OLED_DisplayString+0x80>
        }
        OLED_DisplayChar(current_char_x, y, str[j]);
 8001b38:	7bfb      	ldrb	r3, [r7, #15]
 8001b3a:	683a      	ldr	r2, [r7, #0]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	781a      	ldrb	r2, [r3, #0]
 8001b40:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001b44:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff fe49 	bl	80017e0 <OLED_DisplayChar>
        j++;
 8001b4e:	7bfb      	ldrb	r3, [r7, #15]
 8001b50:	3301      	adds	r3, #1
 8001b52:	73fb      	strb	r3, [r7, #15]
    while (str[j] != '\0')
 8001b54:	7bfb      	ldrb	r3, [r7, #15]
 8001b56:	683a      	ldr	r2, [r7, #0]
 8001b58:	4413      	add	r3, r2
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d1d2      	bne.n	8001b06 <OLED_DisplayString+0x32>
 8001b60:	e002      	b.n	8001b68 <OLED_DisplayString+0x94>
        return;
 8001b62:	bf00      	nop
 8001b64:	e000      	b.n	8001b68 <OLED_DisplayString+0x94>
            break;
 8001b66:	bf00      	nop
    }
}
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <OLED_DisplayStringInverted>:

void OLED_DisplayStringInverted(int16_t x, int16_t y, char *str, uint8_t inverted) //! UPDATEDISPLAY REQUIRED
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b086      	sub	sp, #24
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	60ba      	str	r2, [r7, #8]
 8001b76:	461a      	mov	r2, r3
 8001b78:	4603      	mov	r3, r0
 8001b7a:	81fb      	strh	r3, [r7, #14]
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	81bb      	strh	r3, [r7, #12]
 8001b80:	4613      	mov	r3, r2
 8001b82:	71fb      	strb	r3, [r7, #7]
    uint8_t j = 0;
 8001b84:	2300      	movs	r3, #0
 8001b86:	75fb      	strb	r3, [r7, #23]
    const uint8_t font_width = 6;
 8001b88:	2306      	movs	r3, #6
 8001b8a:	75bb      	strb	r3, [r7, #22]
    const uint8_t font_height = 8;
 8001b8c:	2308      	movs	r3, #8
 8001b8e:	757b      	strb	r3, [r7, #21]

    if (y >= OLED_HEIGHT || (y + font_height - 1) < 0)
 8001b90:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001b94:	2b3f      	cmp	r3, #63	@ 0x3f
 8001b96:	dc34      	bgt.n	8001c02 <OLED_DisplayStringInverted+0x94>
 8001b98:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001b9c:	7d7b      	ldrb	r3, [r7, #21]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	dd2e      	ble.n	8001c02 <OLED_DisplayStringInverted+0x94>
    {
        return;
    }

    int16_t current_char_x;
    while (str[j] != '\0')
 8001ba4:	e026      	b.n	8001bf4 <OLED_DisplayStringInverted+0x86>
    {
        current_char_x = x + (j * font_width);
 8001ba6:	7dfb      	ldrb	r3, [r7, #23]
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	7dba      	ldrb	r2, [r7, #22]
 8001bac:	b292      	uxth	r2, r2
 8001bae:	fb02 f303 	mul.w	r3, r2, r3
 8001bb2:	b29a      	uxth	r2, r3
 8001bb4:	89fb      	ldrh	r3, [r7, #14]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	827b      	strh	r3, [r7, #18]
        if (current_char_x >= OLED_WIDTH)
 8001bbc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001bc0:	2b7f      	cmp	r3, #127	@ 0x7f
 8001bc2:	dc20      	bgt.n	8001c06 <OLED_DisplayStringInverted+0x98>
        {
            break;
        }
        if ((current_char_x + font_width - 1) < 0)
 8001bc4:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001bc8:	7dbb      	ldrb	r3, [r7, #22]
 8001bca:	4413      	add	r3, r2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	dc03      	bgt.n	8001bd8 <OLED_DisplayStringInverted+0x6a>
        {
            j++;
 8001bd0:	7dfb      	ldrb	r3, [r7, #23]
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	75fb      	strb	r3, [r7, #23]
            continue;
 8001bd6:	e00d      	b.n	8001bf4 <OLED_DisplayStringInverted+0x86>
        }
        OLED_DisplayCharInverted(current_char_x, y, str[j], inverted);
 8001bd8:	7dfb      	ldrb	r3, [r7, #23]
 8001bda:	68ba      	ldr	r2, [r7, #8]
 8001bdc:	4413      	add	r3, r2
 8001bde:	781a      	ldrb	r2, [r3, #0]
 8001be0:	79fb      	ldrb	r3, [r7, #7]
 8001be2:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001be6:	f9b7 0012 	ldrsh.w	r0, [r7, #18]
 8001bea:	f7ff fec1 	bl	8001970 <OLED_DisplayCharInverted>
        j++;
 8001bee:	7dfb      	ldrb	r3, [r7, #23]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	75fb      	strb	r3, [r7, #23]
    while (str[j] != '\0')
 8001bf4:	7dfb      	ldrb	r3, [r7, #23]
 8001bf6:	68ba      	ldr	r2, [r7, #8]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d1d2      	bne.n	8001ba6 <OLED_DisplayStringInverted+0x38>
 8001c00:	e002      	b.n	8001c08 <OLED_DisplayStringInverted+0x9a>
        return;
 8001c02:	bf00      	nop
 8001c04:	e000      	b.n	8001c08 <OLED_DisplayStringInverted+0x9a>
            break;
 8001c06:	bf00      	nop
    }
}
 8001c08:	3718      	adds	r7, #24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
	...

08001c10 <System_UI_Loop>:
#define OLED_TITLE_End_Y 0
#define StartTweenTime 2500
#define TweenStyle EASE_INOUT_ELASTIC

void System_UI_Loop()
{
 8001c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c12:	b089      	sub	sp, #36	@ 0x24
 8001c14:	af04      	add	r7, sp, #16
    static bool isFirstRun = true;

    float x, y, x1, y1;
    if (!isFirstRun)
 8001c16:	4ba5      	ldr	r3, [pc, #660]	@ (8001eac <System_UI_Loop+0x29c>)
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	f083 0301 	eor.w	r3, r3, #1
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <System_UI_Loop+0x18>
        SystemGetsSignal();
 8001c24:	f001 f884 	bl	8002d30 <SystemGetsSignal>

    if (isFirstRun) //第一次启动调用，初始化部分
 8001c28:	4ba0      	ldr	r3, [pc, #640]	@ (8001eac <System_UI_Loop+0x29c>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	f000 81a1 	beq.w	8001f74 <System_UI_Loop+0x364>
    {
#pragma region 标题栏
        OLED_MoveObject(&g_Title_AnimationManager, "TitleGames", (OLED_WIDTH - strlen("Epicful Games") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("Epicful Games") * 6), OLED_TITLE_End_Y, StartTweenTime, TweenStyle);
 8001c32:	230f      	movs	r3, #15
 8001c34:	9303      	str	r3, [sp, #12]
 8001c36:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8001c3a:	9302      	str	r3, [sp, #8]
 8001c3c:	f04f 0300 	mov.w	r3, #0
 8001c40:	9301      	str	r3, [sp, #4]
 8001c42:	4b9b      	ldr	r3, [pc, #620]	@ (8001eb0 <System_UI_Loop+0x2a0>)
 8001c44:	9300      	str	r3, [sp, #0]
 8001c46:	4b9b      	ldr	r3, [pc, #620]	@ (8001eb4 <System_UI_Loop+0x2a4>)
 8001c48:	4a99      	ldr	r2, [pc, #612]	@ (8001eb0 <System_UI_Loop+0x2a0>)
 8001c4a:	499b      	ldr	r1, [pc, #620]	@ (8001eb8 <System_UI_Loop+0x2a8>)
 8001c4c:	489b      	ldr	r0, [pc, #620]	@ (8001ebc <System_UI_Loop+0x2ac>)
 8001c4e:	f002 fbdc 	bl	800440a <OLED_MoveObject>
        OLED_MoveObject(&g_Title_AnimationManager, "TitleTools", (OLED_WIDTH - strlen("Tools For You") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("Tools For You") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 8001c52:	230f      	movs	r3, #15
 8001c54:	9303      	str	r3, [sp, #12]
 8001c56:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8001c5a:	9302      	str	r3, [sp, #8]
 8001c5c:	4b95      	ldr	r3, [pc, #596]	@ (8001eb4 <System_UI_Loop+0x2a4>)
 8001c5e:	9301      	str	r3, [sp, #4]
 8001c60:	4b93      	ldr	r3, [pc, #588]	@ (8001eb0 <System_UI_Loop+0x2a0>)
 8001c62:	9300      	str	r3, [sp, #0]
 8001c64:	4b93      	ldr	r3, [pc, #588]	@ (8001eb4 <System_UI_Loop+0x2a4>)
 8001c66:	4a92      	ldr	r2, [pc, #584]	@ (8001eb0 <System_UI_Loop+0x2a0>)
 8001c68:	4995      	ldr	r1, [pc, #596]	@ (8001ec0 <System_UI_Loop+0x2b0>)
 8001c6a:	4894      	ldr	r0, [pc, #592]	@ (8001ebc <System_UI_Loop+0x2ac>)
 8001c6c:	f002 fbcd 	bl	800440a <OLED_MoveObject>
        OLED_MoveObject(&g_Title_AnimationManager, "TitleStatus", (OLED_WIDTH - strlen("Machine States") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("Machine States") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 8001c70:	230f      	movs	r3, #15
 8001c72:	9303      	str	r3, [sp, #12]
 8001c74:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8001c78:	9302      	str	r3, [sp, #8]
 8001c7a:	4b8e      	ldr	r3, [pc, #568]	@ (8001eb4 <System_UI_Loop+0x2a4>)
 8001c7c:	9301      	str	r3, [sp, #4]
 8001c7e:	4b91      	ldr	r3, [pc, #580]	@ (8001ec4 <System_UI_Loop+0x2b4>)
 8001c80:	9300      	str	r3, [sp, #0]
 8001c82:	4b8c      	ldr	r3, [pc, #560]	@ (8001eb4 <System_UI_Loop+0x2a4>)
 8001c84:	4a8f      	ldr	r2, [pc, #572]	@ (8001ec4 <System_UI_Loop+0x2b4>)
 8001c86:	4990      	ldr	r1, [pc, #576]	@ (8001ec8 <System_UI_Loop+0x2b8>)
 8001c88:	488c      	ldr	r0, [pc, #560]	@ (8001ebc <System_UI_Loop+0x2ac>)
 8001c8a:	f002 fbbe 	bl	800440a <OLED_MoveObject>
        OLED_MoveObject(&g_Title_AnimationManager, "TitleSettings", (OLED_WIDTH - strlen("STM Settings") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("STM Settings") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 8001c8e:	230f      	movs	r3, #15
 8001c90:	9303      	str	r3, [sp, #12]
 8001c92:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8001c96:	9302      	str	r3, [sp, #8]
 8001c98:	4b86      	ldr	r3, [pc, #536]	@ (8001eb4 <System_UI_Loop+0x2a4>)
 8001c9a:	9301      	str	r3, [sp, #4]
 8001c9c:	4b8b      	ldr	r3, [pc, #556]	@ (8001ecc <System_UI_Loop+0x2bc>)
 8001c9e:	9300      	str	r3, [sp, #0]
 8001ca0:	4b84      	ldr	r3, [pc, #528]	@ (8001eb4 <System_UI_Loop+0x2a4>)
 8001ca2:	4a8a      	ldr	r2, [pc, #552]	@ (8001ecc <System_UI_Loop+0x2bc>)
 8001ca4:	498a      	ldr	r1, [pc, #552]	@ (8001ed0 <System_UI_Loop+0x2c0>)
 8001ca6:	4885      	ldr	r0, [pc, #532]	@ (8001ebc <System_UI_Loop+0x2ac>)
 8001ca8:	f002 fbaf 	bl	800440a <OLED_MoveObject>
        OLED_MoveObject(&g_Title_AnimationManager, "TitleAbout", (OLED_WIDTH - strlen("Developer") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("Developer") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 8001cac:	230f      	movs	r3, #15
 8001cae:	9303      	str	r3, [sp, #12]
 8001cb0:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8001cb4:	9302      	str	r3, [sp, #8]
 8001cb6:	4b7f      	ldr	r3, [pc, #508]	@ (8001eb4 <System_UI_Loop+0x2a4>)
 8001cb8:	9301      	str	r3, [sp, #4]
 8001cba:	4b86      	ldr	r3, [pc, #536]	@ (8001ed4 <System_UI_Loop+0x2c4>)
 8001cbc:	9300      	str	r3, [sp, #0]
 8001cbe:	4b7d      	ldr	r3, [pc, #500]	@ (8001eb4 <System_UI_Loop+0x2a4>)
 8001cc0:	4a84      	ldr	r2, [pc, #528]	@ (8001ed4 <System_UI_Loop+0x2c4>)
 8001cc2:	4985      	ldr	r1, [pc, #532]	@ (8001ed8 <System_UI_Loop+0x2c8>)
 8001cc4:	487d      	ldr	r0, [pc, #500]	@ (8001ebc <System_UI_Loop+0x2ac>)
 8001cc6:	f002 fba0 	bl	800440a <OLED_MoveObject>

        OLED_MoveObject(&g_Title_AnimationManager, "TitleSnake", (OLED_WIDTH - strlen("Greedy Snake") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("Greedy Snake") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 8001cca:	230f      	movs	r3, #15
 8001ccc:	9303      	str	r3, [sp, #12]
 8001cce:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8001cd2:	9302      	str	r3, [sp, #8]
 8001cd4:	4b77      	ldr	r3, [pc, #476]	@ (8001eb4 <System_UI_Loop+0x2a4>)
 8001cd6:	9301      	str	r3, [sp, #4]
 8001cd8:	4b7c      	ldr	r3, [pc, #496]	@ (8001ecc <System_UI_Loop+0x2bc>)
 8001cda:	9300      	str	r3, [sp, #0]
 8001cdc:	4b75      	ldr	r3, [pc, #468]	@ (8001eb4 <System_UI_Loop+0x2a4>)
 8001cde:	4a7b      	ldr	r2, [pc, #492]	@ (8001ecc <System_UI_Loop+0x2bc>)
 8001ce0:	497e      	ldr	r1, [pc, #504]	@ (8001edc <System_UI_Loop+0x2cc>)
 8001ce2:	4876      	ldr	r0, [pc, #472]	@ (8001ebc <System_UI_Loop+0x2ac>)
 8001ce4:	f002 fb91 	bl	800440a <OLED_MoveObject>
        OLED_MoveObject(&g_Title_AnimationManager, "Title2048", (OLED_WIDTH - strlen("Here is 2048!") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("Here is 2048!") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 8001ce8:	230f      	movs	r3, #15
 8001cea:	9303      	str	r3, [sp, #12]
 8001cec:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8001cf0:	9302      	str	r3, [sp, #8]
 8001cf2:	4b70      	ldr	r3, [pc, #448]	@ (8001eb4 <System_UI_Loop+0x2a4>)
 8001cf4:	9301      	str	r3, [sp, #4]
 8001cf6:	4b6e      	ldr	r3, [pc, #440]	@ (8001eb0 <System_UI_Loop+0x2a0>)
 8001cf8:	9300      	str	r3, [sp, #0]
 8001cfa:	4b6e      	ldr	r3, [pc, #440]	@ (8001eb4 <System_UI_Loop+0x2a4>)
 8001cfc:	4a6c      	ldr	r2, [pc, #432]	@ (8001eb0 <System_UI_Loop+0x2a0>)
 8001cfe:	4978      	ldr	r1, [pc, #480]	@ (8001ee0 <System_UI_Loop+0x2d0>)
 8001d00:	486e      	ldr	r0, [pc, #440]	@ (8001ebc <System_UI_Loop+0x2ac>)
 8001d02:	f002 fb82 	bl	800440a <OLED_MoveObject>
        OLED_MoveObject(&g_Title_AnimationManager, "TitleBack", (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 8001d06:	230f      	movs	r3, #15
 8001d08:	9303      	str	r3, [sp, #12]
 8001d0a:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8001d0e:	9302      	str	r3, [sp, #8]
 8001d10:	4b68      	ldr	r3, [pc, #416]	@ (8001eb4 <System_UI_Loop+0x2a4>)
 8001d12:	9301      	str	r3, [sp, #4]
 8001d14:	4b6d      	ldr	r3, [pc, #436]	@ (8001ecc <System_UI_Loop+0x2bc>)
 8001d16:	9300      	str	r3, [sp, #0]
 8001d18:	4b66      	ldr	r3, [pc, #408]	@ (8001eb4 <System_UI_Loop+0x2a4>)
 8001d1a:	4a6c      	ldr	r2, [pc, #432]	@ (8001ecc <System_UI_Loop+0x2bc>)
 8001d1c:	4971      	ldr	r1, [pc, #452]	@ (8001ee4 <System_UI_Loop+0x2d4>)
 8001d1e:	4867      	ldr	r0, [pc, #412]	@ (8001ebc <System_UI_Loop+0x2ac>)
 8001d20:	f002 fb73 	bl	800440a <OLED_MoveObject>
#pragma endregion 标题栏

#pragma region 游戏栏
        OLED_MoveObject(&Games_AnimationManager, "Snake", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1, TweenStyle);
 8001d24:	230f      	movs	r3, #15
 8001d26:	9303      	str	r3, [sp, #12]
 8001d28:	2301      	movs	r3, #1
 8001d2a:	9302      	str	r3, [sp, #8]
 8001d2c:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8001d30:	9301      	str	r3, [sp, #4]
 8001d32:	4b6d      	ldr	r3, [pc, #436]	@ (8001ee8 <System_UI_Loop+0x2d8>)
 8001d34:	9300      	str	r3, [sp, #0]
 8001d36:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8001d3a:	4a6b      	ldr	r2, [pc, #428]	@ (8001ee8 <System_UI_Loop+0x2d8>)
 8001d3c:	496b      	ldr	r1, [pc, #428]	@ (8001eec <System_UI_Loop+0x2dc>)
 8001d3e:	486c      	ldr	r0, [pc, #432]	@ (8001ef0 <System_UI_Loop+0x2e0>)
 8001d40:	f002 fb63 	bl	800440a <OLED_MoveObject>
        OLED_MoveObject(&Games_AnimationManager, "2048", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1, TweenStyle);
 8001d44:	230f      	movs	r3, #15
 8001d46:	9303      	str	r3, [sp, #12]
 8001d48:	2301      	movs	r3, #1
 8001d4a:	9302      	str	r3, [sp, #8]
 8001d4c:	4b69      	ldr	r3, [pc, #420]	@ (8001ef4 <System_UI_Loop+0x2e4>)
 8001d4e:	9301      	str	r3, [sp, #4]
 8001d50:	4b65      	ldr	r3, [pc, #404]	@ (8001ee8 <System_UI_Loop+0x2d8>)
 8001d52:	9300      	str	r3, [sp, #0]
 8001d54:	4b67      	ldr	r3, [pc, #412]	@ (8001ef4 <System_UI_Loop+0x2e4>)
 8001d56:	4a64      	ldr	r2, [pc, #400]	@ (8001ee8 <System_UI_Loop+0x2d8>)
 8001d58:	4967      	ldr	r1, [pc, #412]	@ (8001ef8 <System_UI_Loop+0x2e8>)
 8001d5a:	4865      	ldr	r0, [pc, #404]	@ (8001ef0 <System_UI_Loop+0x2e0>)
 8001d5c:	f002 fb55 	bl	800440a <OLED_MoveObject>
        OLED_MoveObject(&g_AnimationManager, "BackButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, 1, TweenStyle);
 8001d60:	230f      	movs	r3, #15
 8001d62:	9303      	str	r3, [sp, #12]
 8001d64:	2301      	movs	r3, #1
 8001d66:	9302      	str	r3, [sp, #8]
 8001d68:	4b64      	ldr	r3, [pc, #400]	@ (8001efc <System_UI_Loop+0x2ec>)
 8001d6a:	9301      	str	r3, [sp, #4]
 8001d6c:	4b5e      	ldr	r3, [pc, #376]	@ (8001ee8 <System_UI_Loop+0x2d8>)
 8001d6e:	9300      	str	r3, [sp, #0]
 8001d70:	4b62      	ldr	r3, [pc, #392]	@ (8001efc <System_UI_Loop+0x2ec>)
 8001d72:	4a5d      	ldr	r2, [pc, #372]	@ (8001ee8 <System_UI_Loop+0x2d8>)
 8001d74:	4962      	ldr	r1, [pc, #392]	@ (8001f00 <System_UI_Loop+0x2f0>)
 8001d76:	4863      	ldr	r0, [pc, #396]	@ (8001f04 <System_UI_Loop+0x2f4>)
 8001d78:	f002 fb47 	bl	800440a <OLED_MoveObject>
#pragma region 关于栏

#pragma endregion 关于栏

#pragma region 主菜单动画
        OLED_MoveObject(&g_AnimationManager, "TitleBGScale", 0, 8, strlen("Epicful Games") * 6 + 3, 8, StartTweenTime, EASE_INOUT_CUBIC);
 8001d7c:	2306      	movs	r3, #6
 8001d7e:	9303      	str	r3, [sp, #12]
 8001d80:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8001d84:	9302      	str	r3, [sp, #8]
 8001d86:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8001d8a:	9301      	str	r3, [sp, #4]
 8001d8c:	4b5e      	ldr	r3, [pc, #376]	@ (8001f08 <System_UI_Loop+0x2f8>)
 8001d8e:	9300      	str	r3, [sp, #0]
 8001d90:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8001d94:	f04f 0200 	mov.w	r2, #0
 8001d98:	495c      	ldr	r1, [pc, #368]	@ (8001f0c <System_UI_Loop+0x2fc>)
 8001d9a:	485a      	ldr	r0, [pc, #360]	@ (8001f04 <System_UI_Loop+0x2f4>)
 8001d9c:	f002 fb35 	bl	800440a <OLED_MoveObject>
        OLED_MoveObject(&g_AnimationManager, "Cursor", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * menuSelection, OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * menuSelection, StartTweenTime, TweenStyle);
 8001da0:	4b5b      	ldr	r3, [pc, #364]	@ (8001f10 <System_UI_Loop+0x300>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	461a      	mov	r2, r3
 8001da6:	4613      	mov	r3, r2
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	4413      	add	r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	4413      	add	r3, r2
 8001db0:	3303      	adds	r3, #3
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7fe fa96 	bl	80002e4 <__aeabi_i2f>
 8001db8:	4604      	mov	r4, r0
 8001dba:	4b55      	ldr	r3, [pc, #340]	@ (8001f10 <System_UI_Loop+0x300>)
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	4413      	add	r3, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	4413      	add	r3, r2
 8001dca:	3303      	adds	r3, #3
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7fe fa89 	bl	80002e4 <__aeabi_i2f>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	220f      	movs	r2, #15
 8001dd6:	9203      	str	r2, [sp, #12]
 8001dd8:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8001ddc:	9202      	str	r2, [sp, #8]
 8001dde:	9301      	str	r3, [sp, #4]
 8001de0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001de4:	9300      	str	r3, [sp, #0]
 8001de6:	4623      	mov	r3, r4
 8001de8:	4a3f      	ldr	r2, [pc, #252]	@ (8001ee8 <System_UI_Loop+0x2d8>)
 8001dea:	494a      	ldr	r1, [pc, #296]	@ (8001f14 <System_UI_Loop+0x304>)
 8001dec:	4845      	ldr	r0, [pc, #276]	@ (8001f04 <System_UI_Loop+0x2f4>)
 8001dee:	f002 fb0c 	bl	800440a <OLED_MoveObject>
        OLED_MoveObject(&g_AnimationManager, "CursorScale", 0, 10, strlen("Games") * 6 + 3, 10, StartTweenTime, TweenStyle);
 8001df2:	230f      	movs	r3, #15
 8001df4:	9303      	str	r3, [sp, #12]
 8001df6:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8001dfa:	9302      	str	r3, [sp, #8]
 8001dfc:	4b46      	ldr	r3, [pc, #280]	@ (8001f18 <System_UI_Loop+0x308>)
 8001dfe:	9301      	str	r3, [sp, #4]
 8001e00:	4b46      	ldr	r3, [pc, #280]	@ (8001f1c <System_UI_Loop+0x30c>)
 8001e02:	9300      	str	r3, [sp, #0]
 8001e04:	4b44      	ldr	r3, [pc, #272]	@ (8001f18 <System_UI_Loop+0x308>)
 8001e06:	f04f 0200 	mov.w	r2, #0
 8001e0a:	4945      	ldr	r1, [pc, #276]	@ (8001f20 <System_UI_Loop+0x310>)
 8001e0c:	483d      	ldr	r0, [pc, #244]	@ (8001f04 <System_UI_Loop+0x2f4>)
 8001e0e:	f002 fafc 	bl	800440a <OLED_MoveObject>
        OLED_MoveObject(&Menu_AnimationManager, "GamesButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, StartTweenTime, TweenStyle);
 8001e12:	230f      	movs	r3, #15
 8001e14:	9303      	str	r3, [sp, #12]
 8001e16:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8001e1a:	9302      	str	r3, [sp, #8]
 8001e1c:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8001e20:	9301      	str	r3, [sp, #4]
 8001e22:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001e26:	9300      	str	r3, [sp, #0]
 8001e28:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8001e2c:	4a2e      	ldr	r2, [pc, #184]	@ (8001ee8 <System_UI_Loop+0x2d8>)
 8001e2e:	493d      	ldr	r1, [pc, #244]	@ (8001f24 <System_UI_Loop+0x314>)
 8001e30:	483d      	ldr	r0, [pc, #244]	@ (8001f28 <System_UI_Loop+0x318>)
 8001e32:	f002 faea 	bl	800440a <OLED_MoveObject>
        HAL_Delay(100);
 8001e36:	2064      	movs	r0, #100	@ 0x64
 8001e38:	f002 fff0 	bl	8004e1c <HAL_Delay>
        OLED_MoveObject(&Menu_AnimationManager, "ToolsButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, StartTweenTime, TweenStyle);
 8001e3c:	230f      	movs	r3, #15
 8001e3e:	9303      	str	r3, [sp, #12]
 8001e40:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8001e44:	9302      	str	r3, [sp, #8]
 8001e46:	4b2b      	ldr	r3, [pc, #172]	@ (8001ef4 <System_UI_Loop+0x2e4>)
 8001e48:	9301      	str	r3, [sp, #4]
 8001e4a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001e4e:	9300      	str	r3, [sp, #0]
 8001e50:	4b28      	ldr	r3, [pc, #160]	@ (8001ef4 <System_UI_Loop+0x2e4>)
 8001e52:	4a25      	ldr	r2, [pc, #148]	@ (8001ee8 <System_UI_Loop+0x2d8>)
 8001e54:	4935      	ldr	r1, [pc, #212]	@ (8001f2c <System_UI_Loop+0x31c>)
 8001e56:	4834      	ldr	r0, [pc, #208]	@ (8001f28 <System_UI_Loop+0x318>)
 8001e58:	f002 fad7 	bl	800440a <OLED_MoveObject>
        HAL_Delay(100);
 8001e5c:	2064      	movs	r0, #100	@ 0x64
 8001e5e:	f002 ffdd 	bl	8004e1c <HAL_Delay>
        OLED_MoveObject(&Menu_AnimationManager, "StatusButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, StartTweenTime, TweenStyle);
 8001e62:	230f      	movs	r3, #15
 8001e64:	9303      	str	r3, [sp, #12]
 8001e66:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8001e6a:	9302      	str	r3, [sp, #8]
 8001e6c:	4b23      	ldr	r3, [pc, #140]	@ (8001efc <System_UI_Loop+0x2ec>)
 8001e6e:	9301      	str	r3, [sp, #4]
 8001e70:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001e74:	9300      	str	r3, [sp, #0]
 8001e76:	4b21      	ldr	r3, [pc, #132]	@ (8001efc <System_UI_Loop+0x2ec>)
 8001e78:	4a1b      	ldr	r2, [pc, #108]	@ (8001ee8 <System_UI_Loop+0x2d8>)
 8001e7a:	492d      	ldr	r1, [pc, #180]	@ (8001f30 <System_UI_Loop+0x320>)
 8001e7c:	482a      	ldr	r0, [pc, #168]	@ (8001f28 <System_UI_Loop+0x318>)
 8001e7e:	f002 fac4 	bl	800440a <OLED_MoveObject>
        HAL_Delay(100);
 8001e82:	2064      	movs	r0, #100	@ 0x64
 8001e84:	f002 ffca 	bl	8004e1c <HAL_Delay>
        OLED_MoveObject(&Menu_AnimationManager, "SettingsButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 4, OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 4, StartTweenTime, TweenStyle);
 8001e88:	230f      	movs	r3, #15
 8001e8a:	9303      	str	r3, [sp, #12]
 8001e8c:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8001e90:	9302      	str	r3, [sp, #8]
 8001e92:	4b28      	ldr	r3, [pc, #160]	@ (8001f34 <System_UI_Loop+0x324>)
 8001e94:	9301      	str	r3, [sp, #4]
 8001e96:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001e9a:	9300      	str	r3, [sp, #0]
 8001e9c:	4b25      	ldr	r3, [pc, #148]	@ (8001f34 <System_UI_Loop+0x324>)
 8001e9e:	4a12      	ldr	r2, [pc, #72]	@ (8001ee8 <System_UI_Loop+0x2d8>)
 8001ea0:	4925      	ldr	r1, [pc, #148]	@ (8001f38 <System_UI_Loop+0x328>)
 8001ea2:	4821      	ldr	r0, [pc, #132]	@ (8001f28 <System_UI_Loop+0x318>)
 8001ea4:	f002 fab1 	bl	800440a <OLED_MoveObject>
 8001ea8:	e048      	b.n	8001f3c <System_UI_Loop+0x32c>
 8001eaa:	bf00      	nop
 8001eac:	20000004 	.word	0x20000004
 8001eb0:	42480000 	.word	0x42480000
 8001eb4:	c1200000 	.word	0xc1200000
 8001eb8:	08009f38 	.word	0x08009f38
 8001ebc:	20003310 	.word	0x20003310
 8001ec0:	08009f44 	.word	0x08009f44
 8001ec4:	42300000 	.word	0x42300000
 8001ec8:	08009f50 	.word	0x08009f50
 8001ecc:	42600000 	.word	0x42600000
 8001ed0:	08009f5c 	.word	0x08009f5c
 8001ed4:	42940000 	.word	0x42940000
 8001ed8:	08009f6c 	.word	0x08009f6c
 8001edc:	08009f78 	.word	0x08009f78
 8001ee0:	08009f84 	.word	0x08009f84
 8001ee4:	08009f90 	.word	0x08009f90
 8001ee8:	c2b40000 	.word	0xc2b40000
 8001eec:	08009f9c 	.word	0x08009f9c
 8001ef0:	2000154c 	.word	0x2000154c
 8001ef4:	41e80000 	.word	0x41e80000
 8001ef8:	08009fa4 	.word	0x08009fa4
 8001efc:	42280000 	.word	0x42280000
 8001f00:	08009fac 	.word	0x08009fac
 8001f04:	20003904 	.word	0x20003904
 8001f08:	42a20000 	.word	0x42a20000
 8001f0c:	08009fb8 	.word	0x08009fb8
 8001f10:	20000003 	.word	0x20000003
 8001f14:	08009fc8 	.word	0x08009fc8
 8001f18:	41200000 	.word	0x41200000
 8001f1c:	42040000 	.word	0x42040000
 8001f20:	08009fd0 	.word	0x08009fd0
 8001f24:	08009fdc 	.word	0x08009fdc
 8001f28:	20000f58 	.word	0x20000f58
 8001f2c:	08009fe8 	.word	0x08009fe8
 8001f30:	08009ff4 	.word	0x08009ff4
 8001f34:	425c0000 	.word	0x425c0000
 8001f38:	0800a004 	.word	0x0800a004
        HAL_Delay(100);
 8001f3c:	2064      	movs	r0, #100	@ 0x64
 8001f3e:	f002 ff6d 	bl	8004e1c <HAL_Delay>
        OLED_MoveObject(&Menu_AnimationManager, "AboutButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 5, OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 5, StartTweenTime, TweenStyle);
 8001f42:	230f      	movs	r3, #15
 8001f44:	9303      	str	r3, [sp, #12]
 8001f46:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8001f4a:	9302      	str	r3, [sp, #8]
 8001f4c:	4b71      	ldr	r3, [pc, #452]	@ (8002114 <System_UI_Loop+0x504>)
 8001f4e:	9301      	str	r3, [sp, #4]
 8001f50:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001f54:	9300      	str	r3, [sp, #0]
 8001f56:	4b6f      	ldr	r3, [pc, #444]	@ (8002114 <System_UI_Loop+0x504>)
 8001f58:	4a6f      	ldr	r2, [pc, #444]	@ (8002118 <System_UI_Loop+0x508>)
 8001f5a:	4970      	ldr	r1, [pc, #448]	@ (800211c <System_UI_Loop+0x50c>)
 8001f5c:	4870      	ldr	r0, [pc, #448]	@ (8002120 <System_UI_Loop+0x510>)
 8001f5e:	f002 fa54 	bl	800440a <OLED_MoveObject>
#pragma endregion 主菜单动画

        preMenuSelection = menuSelection;
 8001f62:	4b70      	ldr	r3, [pc, #448]	@ (8002124 <System_UI_Loop+0x514>)
 8001f64:	781a      	ldrb	r2, [r3, #0]
 8001f66:	4b70      	ldr	r3, [pc, #448]	@ (8002128 <System_UI_Loop+0x518>)
 8001f68:	701a      	strb	r2, [r3, #0]
        isFirstRun = false;
 8001f6a:	4b70      	ldr	r3, [pc, #448]	@ (800212c <System_UI_Loop+0x51c>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	701a      	strb	r2, [r3, #0]
        OLED_UpdateDisplayVSync();
 8001f70:	f7ff f9c0 	bl	80012f4 <OLED_UpdateDisplayVSync>
    }

#pragma region pager //翻页的函数

    if (menuRank == 1)
 8001f74:	4b6e      	ldr	r3, [pc, #440]	@ (8002130 <System_UI_Loop+0x520>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d178      	bne.n	800206e <System_UI_Loop+0x45e>
    {
        OLED_DoTweenObject(&Menu_AnimationManager, "GamesButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (2 - menuSelection), 200, EASE_IN_CIRC);
 8001f7c:	4b69      	ldr	r3, [pc, #420]	@ (8002124 <System_UI_Loop+0x514>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	f1c3 0202 	rsb	r2, r3, #2
 8001f84:	4613      	mov	r3, r2
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	4413      	add	r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	4413      	add	r3, r2
 8001f8e:	3303      	adds	r3, #3
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7fe f9a7 	bl	80002e4 <__aeabi_i2f>
 8001f96:	4603      	mov	r3, r0
 8001f98:	220a      	movs	r2, #10
 8001f9a:	9201      	str	r2, [sp, #4]
 8001f9c:	22c8      	movs	r2, #200	@ 0xc8
 8001f9e:	9200      	str	r2, [sp, #0]
 8001fa0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001fa4:	4963      	ldr	r1, [pc, #396]	@ (8002134 <System_UI_Loop+0x524>)
 8001fa6:	485e      	ldr	r0, [pc, #376]	@ (8002120 <System_UI_Loop+0x510>)
 8001fa8:	f002 fae6 	bl	8004578 <OLED_DoTweenObject>
        OLED_DoTweenObject(&Menu_AnimationManager, "ToolsButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (3 - menuSelection), 200, EASE_IN_CIRC);
 8001fac:	4b5d      	ldr	r3, [pc, #372]	@ (8002124 <System_UI_Loop+0x514>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	f1c3 0203 	rsb	r2, r3, #3
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	4413      	add	r3, r2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	4413      	add	r3, r2
 8001fbe:	3303      	adds	r3, #3
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7fe f98f 	bl	80002e4 <__aeabi_i2f>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	220a      	movs	r2, #10
 8001fca:	9201      	str	r2, [sp, #4]
 8001fcc:	22c8      	movs	r2, #200	@ 0xc8
 8001fce:	9200      	str	r2, [sp, #0]
 8001fd0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001fd4:	4958      	ldr	r1, [pc, #352]	@ (8002138 <System_UI_Loop+0x528>)
 8001fd6:	4852      	ldr	r0, [pc, #328]	@ (8002120 <System_UI_Loop+0x510>)
 8001fd8:	f002 face 	bl	8004578 <OLED_DoTweenObject>
        OLED_DoTweenObject(&Menu_AnimationManager, "StatusButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (4 - menuSelection), 200, EASE_IN_CIRC);
 8001fdc:	4b51      	ldr	r3, [pc, #324]	@ (8002124 <System_UI_Loop+0x514>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	f1c3 0204 	rsb	r2, r3, #4
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	4413      	add	r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	4413      	add	r3, r2
 8001fee:	3303      	adds	r3, #3
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7fe f977 	bl	80002e4 <__aeabi_i2f>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	220a      	movs	r2, #10
 8001ffa:	9201      	str	r2, [sp, #4]
 8001ffc:	22c8      	movs	r2, #200	@ 0xc8
 8001ffe:	9200      	str	r2, [sp, #0]
 8002000:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002004:	494d      	ldr	r1, [pc, #308]	@ (800213c <System_UI_Loop+0x52c>)
 8002006:	4846      	ldr	r0, [pc, #280]	@ (8002120 <System_UI_Loop+0x510>)
 8002008:	f002 fab6 	bl	8004578 <OLED_DoTweenObject>
        OLED_DoTweenObject(&Menu_AnimationManager, "SettingsButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (5 - menuSelection), 200, EASE_IN_CIRC);
 800200c:	4b45      	ldr	r3, [pc, #276]	@ (8002124 <System_UI_Loop+0x514>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	f1c3 0205 	rsb	r2, r3, #5
 8002014:	4613      	mov	r3, r2
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	4413      	add	r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	4413      	add	r3, r2
 800201e:	3303      	adds	r3, #3
 8002020:	4618      	mov	r0, r3
 8002022:	f7fe f95f 	bl	80002e4 <__aeabi_i2f>
 8002026:	4603      	mov	r3, r0
 8002028:	220a      	movs	r2, #10
 800202a:	9201      	str	r2, [sp, #4]
 800202c:	22c8      	movs	r2, #200	@ 0xc8
 800202e:	9200      	str	r2, [sp, #0]
 8002030:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002034:	4942      	ldr	r1, [pc, #264]	@ (8002140 <System_UI_Loop+0x530>)
 8002036:	483a      	ldr	r0, [pc, #232]	@ (8002120 <System_UI_Loop+0x510>)
 8002038:	f002 fa9e 	bl	8004578 <OLED_DoTweenObject>
        OLED_DoTweenObject(&Menu_AnimationManager, "AboutButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (6 - menuSelection), 200, EASE_IN_CIRC);
 800203c:	4b39      	ldr	r3, [pc, #228]	@ (8002124 <System_UI_Loop+0x514>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	f1c3 0206 	rsb	r2, r3, #6
 8002044:	4613      	mov	r3, r2
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	4413      	add	r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	4413      	add	r3, r2
 800204e:	3303      	adds	r3, #3
 8002050:	4618      	mov	r0, r3
 8002052:	f7fe f947 	bl	80002e4 <__aeabi_i2f>
 8002056:	4603      	mov	r3, r0
 8002058:	220a      	movs	r2, #10
 800205a:	9201      	str	r2, [sp, #4]
 800205c:	22c8      	movs	r2, #200	@ 0xc8
 800205e:	9200      	str	r2, [sp, #0]
 8002060:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002064:	492d      	ldr	r1, [pc, #180]	@ (800211c <System_UI_Loop+0x50c>)
 8002066:	482e      	ldr	r0, [pc, #184]	@ (8002120 <System_UI_Loop+0x510>)
 8002068:	f002 fa86 	bl	8004578 <OLED_DoTweenObject>
 800206c:	e091      	b.n	8002192 <System_UI_Loop+0x582>
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_GAMES)
 800206e:	4b30      	ldr	r3, [pc, #192]	@ (8002130 <System_UI_Loop+0x520>)
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	2b02      	cmp	r3, #2
 8002074:	f040 808d 	bne.w	8002192 <System_UI_Loop+0x582>
 8002078:	4b32      	ldr	r3, [pc, #200]	@ (8002144 <System_UI_Loop+0x534>)
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	2b05      	cmp	r3, #5
 800207e:	d16d      	bne.n	800215c <System_UI_Loop+0x54c>
    {
        OLED_DoTweenObject(&Games_AnimationManager, "Snake", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (2 - menuSelection), 200, EASE_IN_CIRC);
 8002080:	4b28      	ldr	r3, [pc, #160]	@ (8002124 <System_UI_Loop+0x514>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	f1c3 0202 	rsb	r2, r3, #2
 8002088:	4613      	mov	r3, r2
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	4413      	add	r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	4413      	add	r3, r2
 8002092:	3303      	adds	r3, #3
 8002094:	4618      	mov	r0, r3
 8002096:	f7fe f925 	bl	80002e4 <__aeabi_i2f>
 800209a:	4603      	mov	r3, r0
 800209c:	220a      	movs	r2, #10
 800209e:	9201      	str	r2, [sp, #4]
 80020a0:	22c8      	movs	r2, #200	@ 0xc8
 80020a2:	9200      	str	r2, [sp, #0]
 80020a4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80020a8:	4927      	ldr	r1, [pc, #156]	@ (8002148 <System_UI_Loop+0x538>)
 80020aa:	4828      	ldr	r0, [pc, #160]	@ (800214c <System_UI_Loop+0x53c>)
 80020ac:	f002 fa64 	bl	8004578 <OLED_DoTweenObject>
        OLED_DoTweenObject(&Games_AnimationManager, "2048", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (3 - menuSelection), 200, EASE_IN_CIRC);
 80020b0:	4b1c      	ldr	r3, [pc, #112]	@ (8002124 <System_UI_Loop+0x514>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	f1c3 0203 	rsb	r2, r3, #3
 80020b8:	4613      	mov	r3, r2
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	4413      	add	r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	4413      	add	r3, r2
 80020c2:	3303      	adds	r3, #3
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7fe f90d 	bl	80002e4 <__aeabi_i2f>
 80020ca:	4603      	mov	r3, r0
 80020cc:	220a      	movs	r2, #10
 80020ce:	9201      	str	r2, [sp, #4]
 80020d0:	22c8      	movs	r2, #200	@ 0xc8
 80020d2:	9200      	str	r2, [sp, #0]
 80020d4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80020d8:	491d      	ldr	r1, [pc, #116]	@ (8002150 <System_UI_Loop+0x540>)
 80020da:	481c      	ldr	r0, [pc, #112]	@ (800214c <System_UI_Loop+0x53c>)
 80020dc:	f002 fa4c 	bl	8004578 <OLED_DoTweenObject>
        OLED_DoTweenObject(&g_AnimationManager, "BackButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (4 - menuSelection), 200, EASE_IN_CIRC);
 80020e0:	4b10      	ldr	r3, [pc, #64]	@ (8002124 <System_UI_Loop+0x514>)
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	f1c3 0204 	rsb	r2, r3, #4
 80020e8:	4613      	mov	r3, r2
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	4413      	add	r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	4413      	add	r3, r2
 80020f2:	3303      	adds	r3, #3
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7fe f8f5 	bl	80002e4 <__aeabi_i2f>
 80020fa:	4603      	mov	r3, r0
 80020fc:	220a      	movs	r2, #10
 80020fe:	9201      	str	r2, [sp, #4]
 8002100:	22c8      	movs	r2, #200	@ 0xc8
 8002102:	9200      	str	r2, [sp, #0]
 8002104:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002108:	4912      	ldr	r1, [pc, #72]	@ (8002154 <System_UI_Loop+0x544>)
 800210a:	4813      	ldr	r0, [pc, #76]	@ (8002158 <System_UI_Loop+0x548>)
 800210c:	f002 fa34 	bl	8004578 <OLED_DoTweenObject>
 8002110:	e03f      	b.n	8002192 <System_UI_Loop+0x582>
 8002112:	bf00      	nop
 8002114:	42880000 	.word	0x42880000
 8002118:	c2b40000 	.word	0xc2b40000
 800211c:	0800a014 	.word	0x0800a014
 8002120:	20000f58 	.word	0x20000f58
 8002124:	20000003 	.word	0x20000003
 8002128:	20000b46 	.word	0x20000b46
 800212c:	20000004 	.word	0x20000004
 8002130:	20000002 	.word	0x20000002
 8002134:	08009fdc 	.word	0x08009fdc
 8002138:	08009fe8 	.word	0x08009fe8
 800213c:	08009ff4 	.word	0x08009ff4
 8002140:	0800a004 	.word	0x0800a004
 8002144:	20000b45 	.word	0x20000b45
 8002148:	08009f9c 	.word	0x08009f9c
 800214c:	2000154c 	.word	0x2000154c
 8002150:	08009fa4 	.word	0x08009fa4
 8002154:	08009fac 	.word	0x08009fac
 8002158:	20003904 	.word	0x20003904
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_SETTINGS)
 800215c:	4bb4      	ldr	r3, [pc, #720]	@ (8002430 <System_UI_Loop+0x820>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	2b02      	cmp	r3, #2
 8002162:	d116      	bne.n	8002192 <System_UI_Loop+0x582>
 8002164:	4bb3      	ldr	r3, [pc, #716]	@ (8002434 <System_UI_Loop+0x824>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	2b01      	cmp	r3, #1
 800216a:	d012      	beq.n	8002192 <System_UI_Loop+0x582>
    {
        /* code */
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_STATUS)
 800216c:	4bb0      	ldr	r3, [pc, #704]	@ (8002430 <System_UI_Loop+0x820>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	2b02      	cmp	r3, #2
 8002172:	d10e      	bne.n	8002192 <System_UI_Loop+0x582>
 8002174:	4baf      	ldr	r3, [pc, #700]	@ (8002434 <System_UI_Loop+0x824>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	2b02      	cmp	r3, #2
 800217a:	d00a      	beq.n	8002192 <System_UI_Loop+0x582>
    {
        /* code */
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_ABOUT)
 800217c:	4bac      	ldr	r3, [pc, #688]	@ (8002430 <System_UI_Loop+0x820>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	2b02      	cmp	r3, #2
 8002182:	d106      	bne.n	8002192 <System_UI_Loop+0x582>
 8002184:	4bab      	ldr	r3, [pc, #684]	@ (8002434 <System_UI_Loop+0x824>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	2b03      	cmp	r3, #3
 800218a:	d002      	beq.n	8002192 <System_UI_Loop+0x582>
    {
        /* code */
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_TOOLS)
 800218c:	4ba8      	ldr	r3, [pc, #672]	@ (8002430 <System_UI_Loop+0x820>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	2b02      	cmp	r3, #2

#pragma endregion pager

#pragma region DRAWER //画出你的UI

    OLED_GetObjectPosition(&Menu_AnimationManager, "SettingsButton", &x, &y);
 8002192:	f107 0308 	add.w	r3, r7, #8
 8002196:	f107 020c 	add.w	r2, r7, #12
 800219a:	49a7      	ldr	r1, [pc, #668]	@ (8002438 <System_UI_Loop+0x828>)
 800219c:	48a7      	ldr	r0, [pc, #668]	@ (800243c <System_UI_Loop+0x82c>)
 800219e:	f002 f910 	bl	80043c2 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Settings");
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7fe facd 	bl	8000744 <__aeabi_f2iz>
 80021aa:	4603      	mov	r3, r0
 80021ac:	b21c      	sxth	r4, r3
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7fe fac7 	bl	8000744 <__aeabi_f2iz>
 80021b6:	4603      	mov	r3, r0
 80021b8:	b21b      	sxth	r3, r3
 80021ba:	4aa1      	ldr	r2, [pc, #644]	@ (8002440 <System_UI_Loop+0x830>)
 80021bc:	4619      	mov	r1, r3
 80021be:	4620      	mov	r0, r4
 80021c0:	f7ff fc88 	bl	8001ad4 <OLED_DisplayString>
    OLED_GetObjectPosition(&Menu_AnimationManager, "StatusButton", &x, &y);
 80021c4:	f107 0308 	add.w	r3, r7, #8
 80021c8:	f107 020c 	add.w	r2, r7, #12
 80021cc:	499d      	ldr	r1, [pc, #628]	@ (8002444 <System_UI_Loop+0x834>)
 80021ce:	489b      	ldr	r0, [pc, #620]	@ (800243c <System_UI_Loop+0x82c>)
 80021d0:	f002 f8f7 	bl	80043c2 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Status");
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7fe fab4 	bl	8000744 <__aeabi_f2iz>
 80021dc:	4603      	mov	r3, r0
 80021de:	b21c      	sxth	r4, r3
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7fe faae 	bl	8000744 <__aeabi_f2iz>
 80021e8:	4603      	mov	r3, r0
 80021ea:	b21b      	sxth	r3, r3
 80021ec:	4a96      	ldr	r2, [pc, #600]	@ (8002448 <System_UI_Loop+0x838>)
 80021ee:	4619      	mov	r1, r3
 80021f0:	4620      	mov	r0, r4
 80021f2:	f7ff fc6f 	bl	8001ad4 <OLED_DisplayString>
    OLED_GetObjectPosition(&Menu_AnimationManager, "GamesButton", &x, &y);
 80021f6:	f107 0308 	add.w	r3, r7, #8
 80021fa:	f107 020c 	add.w	r2, r7, #12
 80021fe:	4993      	ldr	r1, [pc, #588]	@ (800244c <System_UI_Loop+0x83c>)
 8002200:	488e      	ldr	r0, [pc, #568]	@ (800243c <System_UI_Loop+0x82c>)
 8002202:	f002 f8de 	bl	80043c2 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Games");
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	4618      	mov	r0, r3
 800220a:	f7fe fa9b 	bl	8000744 <__aeabi_f2iz>
 800220e:	4603      	mov	r3, r0
 8002210:	b21c      	sxth	r4, r3
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	4618      	mov	r0, r3
 8002216:	f7fe fa95 	bl	8000744 <__aeabi_f2iz>
 800221a:	4603      	mov	r3, r0
 800221c:	b21b      	sxth	r3, r3
 800221e:	4a8c      	ldr	r2, [pc, #560]	@ (8002450 <System_UI_Loop+0x840>)
 8002220:	4619      	mov	r1, r3
 8002222:	4620      	mov	r0, r4
 8002224:	f7ff fc56 	bl	8001ad4 <OLED_DisplayString>
    OLED_GetObjectPosition(&Menu_AnimationManager, "AboutButton", &x, &y);
 8002228:	f107 0308 	add.w	r3, r7, #8
 800222c:	f107 020c 	add.w	r2, r7, #12
 8002230:	4988      	ldr	r1, [pc, #544]	@ (8002454 <System_UI_Loop+0x844>)
 8002232:	4882      	ldr	r0, [pc, #520]	@ (800243c <System_UI_Loop+0x82c>)
 8002234:	f002 f8c5 	bl	80043c2 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "About");
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	4618      	mov	r0, r3
 800223c:	f7fe fa82 	bl	8000744 <__aeabi_f2iz>
 8002240:	4603      	mov	r3, r0
 8002242:	b21c      	sxth	r4, r3
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	4618      	mov	r0, r3
 8002248:	f7fe fa7c 	bl	8000744 <__aeabi_f2iz>
 800224c:	4603      	mov	r3, r0
 800224e:	b21b      	sxth	r3, r3
 8002250:	4a81      	ldr	r2, [pc, #516]	@ (8002458 <System_UI_Loop+0x848>)
 8002252:	4619      	mov	r1, r3
 8002254:	4620      	mov	r0, r4
 8002256:	f7ff fc3d 	bl	8001ad4 <OLED_DisplayString>
    OLED_GetObjectPosition(&Menu_AnimationManager, "ToolsButton", &x, &y);
 800225a:	f107 0308 	add.w	r3, r7, #8
 800225e:	f107 020c 	add.w	r2, r7, #12
 8002262:	497e      	ldr	r1, [pc, #504]	@ (800245c <System_UI_Loop+0x84c>)
 8002264:	4875      	ldr	r0, [pc, #468]	@ (800243c <System_UI_Loop+0x82c>)
 8002266:	f002 f8ac 	bl	80043c2 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Tools");
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	4618      	mov	r0, r3
 800226e:	f7fe fa69 	bl	8000744 <__aeabi_f2iz>
 8002272:	4603      	mov	r3, r0
 8002274:	b21c      	sxth	r4, r3
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	4618      	mov	r0, r3
 800227a:	f7fe fa63 	bl	8000744 <__aeabi_f2iz>
 800227e:	4603      	mov	r3, r0
 8002280:	b21b      	sxth	r3, r3
 8002282:	4a77      	ldr	r2, [pc, #476]	@ (8002460 <System_UI_Loop+0x850>)
 8002284:	4619      	mov	r1, r3
 8002286:	4620      	mov	r0, r4
 8002288:	f7ff fc24 	bl	8001ad4 <OLED_DisplayString>
    OLED_GetObjectPosition(&Games_AnimationManager, "Snake", &x, &y);
 800228c:	f107 0308 	add.w	r3, r7, #8
 8002290:	f107 020c 	add.w	r2, r7, #12
 8002294:	4973      	ldr	r1, [pc, #460]	@ (8002464 <System_UI_Loop+0x854>)
 8002296:	4874      	ldr	r0, [pc, #464]	@ (8002468 <System_UI_Loop+0x858>)
 8002298:	f002 f893 	bl	80043c2 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Snake");
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	4618      	mov	r0, r3
 80022a0:	f7fe fa50 	bl	8000744 <__aeabi_f2iz>
 80022a4:	4603      	mov	r3, r0
 80022a6:	b21c      	sxth	r4, r3
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7fe fa4a 	bl	8000744 <__aeabi_f2iz>
 80022b0:	4603      	mov	r3, r0
 80022b2:	b21b      	sxth	r3, r3
 80022b4:	4a6b      	ldr	r2, [pc, #428]	@ (8002464 <System_UI_Loop+0x854>)
 80022b6:	4619      	mov	r1, r3
 80022b8:	4620      	mov	r0, r4
 80022ba:	f7ff fc0b 	bl	8001ad4 <OLED_DisplayString>
    OLED_GetObjectPosition(&Games_AnimationManager, "2048", &x, &y);
 80022be:	f107 0308 	add.w	r3, r7, #8
 80022c2:	f107 020c 	add.w	r2, r7, #12
 80022c6:	4969      	ldr	r1, [pc, #420]	@ (800246c <System_UI_Loop+0x85c>)
 80022c8:	4867      	ldr	r0, [pc, #412]	@ (8002468 <System_UI_Loop+0x858>)
 80022ca:	f002 f87a 	bl	80043c2 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "2048");
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7fe fa37 	bl	8000744 <__aeabi_f2iz>
 80022d6:	4603      	mov	r3, r0
 80022d8:	b21c      	sxth	r4, r3
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	4618      	mov	r0, r3
 80022de:	f7fe fa31 	bl	8000744 <__aeabi_f2iz>
 80022e2:	4603      	mov	r3, r0
 80022e4:	b21b      	sxth	r3, r3
 80022e6:	4a61      	ldr	r2, [pc, #388]	@ (800246c <System_UI_Loop+0x85c>)
 80022e8:	4619      	mov	r1, r3
 80022ea:	4620      	mov	r0, r4
 80022ec:	f7ff fbf2 	bl	8001ad4 <OLED_DisplayString>
    OLED_GetObjectPosition(&g_AnimationManager, "BackButton", &x, &y);
 80022f0:	f107 0308 	add.w	r3, r7, #8
 80022f4:	f107 020c 	add.w	r2, r7, #12
 80022f8:	495d      	ldr	r1, [pc, #372]	@ (8002470 <System_UI_Loop+0x860>)
 80022fa:	485e      	ldr	r0, [pc, #376]	@ (8002474 <System_UI_Loop+0x864>)
 80022fc:	f002 f861 	bl	80043c2 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Back");
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	4618      	mov	r0, r3
 8002304:	f7fe fa1e 	bl	8000744 <__aeabi_f2iz>
 8002308:	4603      	mov	r3, r0
 800230a:	b21c      	sxth	r4, r3
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	4618      	mov	r0, r3
 8002310:	f7fe fa18 	bl	8000744 <__aeabi_f2iz>
 8002314:	4603      	mov	r3, r0
 8002316:	b21b      	sxth	r3, r3
 8002318:	4a57      	ldr	r2, [pc, #348]	@ (8002478 <System_UI_Loop+0x868>)
 800231a:	4619      	mov	r1, r3
 800231c:	4620      	mov	r0, r4
 800231e:	f7ff fbd9 	bl	8001ad4 <OLED_DisplayString>

    OLED_GetObjectPosition(&g_Title_AnimationManager, "TitleGames", &x, &y);
 8002322:	f107 0308 	add.w	r3, r7, #8
 8002326:	f107 020c 	add.w	r2, r7, #12
 800232a:	4954      	ldr	r1, [pc, #336]	@ (800247c <System_UI_Loop+0x86c>)
 800232c:	4854      	ldr	r0, [pc, #336]	@ (8002480 <System_UI_Loop+0x870>)
 800232e:	f002 f848 	bl	80043c2 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Epicful Games");
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	4618      	mov	r0, r3
 8002336:	f7fe fa05 	bl	8000744 <__aeabi_f2iz>
 800233a:	4603      	mov	r3, r0
 800233c:	b21c      	sxth	r4, r3
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	4618      	mov	r0, r3
 8002342:	f7fe f9ff 	bl	8000744 <__aeabi_f2iz>
 8002346:	4603      	mov	r3, r0
 8002348:	b21b      	sxth	r3, r3
 800234a:	4a4e      	ldr	r2, [pc, #312]	@ (8002484 <System_UI_Loop+0x874>)
 800234c:	4619      	mov	r1, r3
 800234e:	4620      	mov	r0, r4
 8002350:	f7ff fbc0 	bl	8001ad4 <OLED_DisplayString>
    OLED_GetObjectPosition(&g_Title_AnimationManager, "TitleTools", &x, &y);
 8002354:	f107 0308 	add.w	r3, r7, #8
 8002358:	f107 020c 	add.w	r2, r7, #12
 800235c:	494a      	ldr	r1, [pc, #296]	@ (8002488 <System_UI_Loop+0x878>)
 800235e:	4848      	ldr	r0, [pc, #288]	@ (8002480 <System_UI_Loop+0x870>)
 8002360:	f002 f82f 	bl	80043c2 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Tools For You");
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	4618      	mov	r0, r3
 8002368:	f7fe f9ec 	bl	8000744 <__aeabi_f2iz>
 800236c:	4603      	mov	r3, r0
 800236e:	b21c      	sxth	r4, r3
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	4618      	mov	r0, r3
 8002374:	f7fe f9e6 	bl	8000744 <__aeabi_f2iz>
 8002378:	4603      	mov	r3, r0
 800237a:	b21b      	sxth	r3, r3
 800237c:	4a43      	ldr	r2, [pc, #268]	@ (800248c <System_UI_Loop+0x87c>)
 800237e:	4619      	mov	r1, r3
 8002380:	4620      	mov	r0, r4
 8002382:	f7ff fba7 	bl	8001ad4 <OLED_DisplayString>
    OLED_GetObjectPosition(&g_Title_AnimationManager, "TitleStatus", &x, &y);
 8002386:	f107 0308 	add.w	r3, r7, #8
 800238a:	f107 020c 	add.w	r2, r7, #12
 800238e:	4940      	ldr	r1, [pc, #256]	@ (8002490 <System_UI_Loop+0x880>)
 8002390:	483b      	ldr	r0, [pc, #236]	@ (8002480 <System_UI_Loop+0x870>)
 8002392:	f002 f816 	bl	80043c2 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Machine States");
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	4618      	mov	r0, r3
 800239a:	f7fe f9d3 	bl	8000744 <__aeabi_f2iz>
 800239e:	4603      	mov	r3, r0
 80023a0:	b21c      	sxth	r4, r3
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7fe f9cd 	bl	8000744 <__aeabi_f2iz>
 80023aa:	4603      	mov	r3, r0
 80023ac:	b21b      	sxth	r3, r3
 80023ae:	4a39      	ldr	r2, [pc, #228]	@ (8002494 <System_UI_Loop+0x884>)
 80023b0:	4619      	mov	r1, r3
 80023b2:	4620      	mov	r0, r4
 80023b4:	f7ff fb8e 	bl	8001ad4 <OLED_DisplayString>
    OLED_GetObjectPosition(&g_Title_AnimationManager, "TitleSettings", &x, &y);
 80023b8:	f107 0308 	add.w	r3, r7, #8
 80023bc:	f107 020c 	add.w	r2, r7, #12
 80023c0:	4935      	ldr	r1, [pc, #212]	@ (8002498 <System_UI_Loop+0x888>)
 80023c2:	482f      	ldr	r0, [pc, #188]	@ (8002480 <System_UI_Loop+0x870>)
 80023c4:	f001 fffd 	bl	80043c2 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "STM Settings");
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7fe f9ba 	bl	8000744 <__aeabi_f2iz>
 80023d0:	4603      	mov	r3, r0
 80023d2:	b21c      	sxth	r4, r3
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7fe f9b4 	bl	8000744 <__aeabi_f2iz>
 80023dc:	4603      	mov	r3, r0
 80023de:	b21b      	sxth	r3, r3
 80023e0:	4a2e      	ldr	r2, [pc, #184]	@ (800249c <System_UI_Loop+0x88c>)
 80023e2:	4619      	mov	r1, r3
 80023e4:	4620      	mov	r0, r4
 80023e6:	f7ff fb75 	bl	8001ad4 <OLED_DisplayString>
    OLED_GetObjectPosition(&g_Title_AnimationManager, "TitleAbout", &x, &y);
 80023ea:	f107 0308 	add.w	r3, r7, #8
 80023ee:	f107 020c 	add.w	r2, r7, #12
 80023f2:	492b      	ldr	r1, [pc, #172]	@ (80024a0 <System_UI_Loop+0x890>)
 80023f4:	4822      	ldr	r0, [pc, #136]	@ (8002480 <System_UI_Loop+0x870>)
 80023f6:	f001 ffe4 	bl	80043c2 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Developer!");
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7fe f9a1 	bl	8000744 <__aeabi_f2iz>
 8002402:	4603      	mov	r3, r0
 8002404:	b21c      	sxth	r4, r3
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	4618      	mov	r0, r3
 800240a:	f7fe f99b 	bl	8000744 <__aeabi_f2iz>
 800240e:	4603      	mov	r3, r0
 8002410:	b21b      	sxth	r3, r3
 8002412:	4a24      	ldr	r2, [pc, #144]	@ (80024a4 <System_UI_Loop+0x894>)
 8002414:	4619      	mov	r1, r3
 8002416:	4620      	mov	r0, r4
 8002418:	f7ff fb5c 	bl	8001ad4 <OLED_DisplayString>
    OLED_GetObjectPosition(&g_Title_AnimationManager, "TitleSnake", &x, &y);
 800241c:	f107 0308 	add.w	r3, r7, #8
 8002420:	f107 020c 	add.w	r2, r7, #12
 8002424:	4920      	ldr	r1, [pc, #128]	@ (80024a8 <System_UI_Loop+0x898>)
 8002426:	4816      	ldr	r0, [pc, #88]	@ (8002480 <System_UI_Loop+0x870>)
 8002428:	f001 ffcb 	bl	80043c2 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Greedy Snake");
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	e03d      	b.n	80024ac <System_UI_Loop+0x89c>
 8002430:	20000002 	.word	0x20000002
 8002434:	20000b45 	.word	0x20000b45
 8002438:	0800a004 	.word	0x0800a004
 800243c:	20000f58 	.word	0x20000f58
 8002440:	0800a020 	.word	0x0800a020
 8002444:	08009ff4 	.word	0x08009ff4
 8002448:	0800a02c 	.word	0x0800a02c
 800244c:	08009fdc 	.word	0x08009fdc
 8002450:	0800a034 	.word	0x0800a034
 8002454:	0800a014 	.word	0x0800a014
 8002458:	0800a03c 	.word	0x0800a03c
 800245c:	08009fe8 	.word	0x08009fe8
 8002460:	0800a044 	.word	0x0800a044
 8002464:	08009f9c 	.word	0x08009f9c
 8002468:	2000154c 	.word	0x2000154c
 800246c:	08009fa4 	.word	0x08009fa4
 8002470:	08009fac 	.word	0x08009fac
 8002474:	20003904 	.word	0x20003904
 8002478:	0800a04c 	.word	0x0800a04c
 800247c:	08009f38 	.word	0x08009f38
 8002480:	20003310 	.word	0x20003310
 8002484:	0800a054 	.word	0x0800a054
 8002488:	08009f44 	.word	0x08009f44
 800248c:	0800a064 	.word	0x0800a064
 8002490:	08009f50 	.word	0x08009f50
 8002494:	0800a074 	.word	0x0800a074
 8002498:	08009f5c 	.word	0x08009f5c
 800249c:	0800a084 	.word	0x0800a084
 80024a0:	08009f6c 	.word	0x08009f6c
 80024a4:	0800a094 	.word	0x0800a094
 80024a8:	08009f78 	.word	0x08009f78
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7fe f949 	bl	8000744 <__aeabi_f2iz>
 80024b2:	4603      	mov	r3, r0
 80024b4:	b21c      	sxth	r4, r3
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7fe f943 	bl	8000744 <__aeabi_f2iz>
 80024be:	4603      	mov	r3, r0
 80024c0:	b21b      	sxth	r3, r3
 80024c2:	4aa8      	ldr	r2, [pc, #672]	@ (8002764 <System_UI_Loop+0xb54>)
 80024c4:	4619      	mov	r1, r3
 80024c6:	4620      	mov	r0, r4
 80024c8:	f7ff fb04 	bl	8001ad4 <OLED_DisplayString>
    OLED_GetObjectPosition(&g_Title_AnimationManager, "Title2048", &x, &y);
 80024cc:	f107 0308 	add.w	r3, r7, #8
 80024d0:	f107 020c 	add.w	r2, r7, #12
 80024d4:	49a4      	ldr	r1, [pc, #656]	@ (8002768 <System_UI_Loop+0xb58>)
 80024d6:	48a5      	ldr	r0, [pc, #660]	@ (800276c <System_UI_Loop+0xb5c>)
 80024d8:	f001 ff73 	bl	80043c2 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Here is 2048!");
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	4618      	mov	r0, r3
 80024e0:	f7fe f930 	bl	8000744 <__aeabi_f2iz>
 80024e4:	4603      	mov	r3, r0
 80024e6:	b21c      	sxth	r4, r3
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7fe f92a 	bl	8000744 <__aeabi_f2iz>
 80024f0:	4603      	mov	r3, r0
 80024f2:	b21b      	sxth	r3, r3
 80024f4:	4a9e      	ldr	r2, [pc, #632]	@ (8002770 <System_UI_Loop+0xb60>)
 80024f6:	4619      	mov	r1, r3
 80024f8:	4620      	mov	r0, r4
 80024fa:	f7ff faeb 	bl	8001ad4 <OLED_DisplayString>
    OLED_GetObjectPosition(&g_Title_AnimationManager, "TitleBack", &x, &y);
 80024fe:	f107 0308 	add.w	r3, r7, #8
 8002502:	f107 020c 	add.w	r2, r7, #12
 8002506:	499b      	ldr	r1, [pc, #620]	@ (8002774 <System_UI_Loop+0xb64>)
 8002508:	4898      	ldr	r0, [pc, #608]	@ (800276c <System_UI_Loop+0xb5c>)
 800250a:	f001 ff5a 	bl	80043c2 <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Back To Menu");
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	4618      	mov	r0, r3
 8002512:	f7fe f917 	bl	8000744 <__aeabi_f2iz>
 8002516:	4603      	mov	r3, r0
 8002518:	b21c      	sxth	r4, r3
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	4618      	mov	r0, r3
 800251e:	f7fe f911 	bl	8000744 <__aeabi_f2iz>
 8002522:	4603      	mov	r3, r0
 8002524:	b21b      	sxth	r3, r3
 8002526:	4a94      	ldr	r2, [pc, #592]	@ (8002778 <System_UI_Loop+0xb68>)
 8002528:	4619      	mov	r1, r3
 800252a:	4620      	mov	r0, r4
 800252c:	f7ff fad2 	bl	8001ad4 <OLED_DisplayString>

    OLED_GetObjectPosition(&g_AnimationManager, "TitleBGScale", &x, &y);
 8002530:	f107 0308 	add.w	r3, r7, #8
 8002534:	f107 020c 	add.w	r2, r7, #12
 8002538:	4990      	ldr	r1, [pc, #576]	@ (800277c <System_UI_Loop+0xb6c>)
 800253a:	4891      	ldr	r0, [pc, #580]	@ (8002780 <System_UI_Loop+0xb70>)
 800253c:	f001 ff41 	bl	80043c2 <OLED_GetObjectPosition>
    OLED_InvertArea(OLED_WIDTH - x, 0, x, y);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	4619      	mov	r1, r3
 8002544:	f04f 4086 	mov.w	r0, #1124073472	@ 0x43000000
 8002548:	f7fd fe16 	bl	8000178 <__aeabi_fsub>
 800254c:	4603      	mov	r3, r0
 800254e:	4618      	mov	r0, r3
 8002550:	f7fe f8f8 	bl	8000744 <__aeabi_f2iz>
 8002554:	4603      	mov	r3, r0
 8002556:	b21c      	sxth	r4, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	4618      	mov	r0, r3
 800255c:	f7fe f918 	bl	8000790 <__aeabi_f2uiz>
 8002560:	4603      	mov	r3, r0
 8002562:	b2dd      	uxtb	r5, r3
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	4618      	mov	r0, r3
 8002568:	f7fe f912 	bl	8000790 <__aeabi_f2uiz>
 800256c:	4603      	mov	r3, r0
 800256e:	b2db      	uxtb	r3, r3
 8002570:	462a      	mov	r2, r5
 8002572:	2100      	movs	r1, #0
 8002574:	4620      	mov	r0, r4
 8002576:	f7ff f877 	bl	8001668 <OLED_InvertArea>

    OLED_GetObjectPosition(&g_AnimationManager, "Cursor", &x, &y);
 800257a:	f107 0308 	add.w	r3, r7, #8
 800257e:	f107 020c 	add.w	r2, r7, #12
 8002582:	4980      	ldr	r1, [pc, #512]	@ (8002784 <System_UI_Loop+0xb74>)
 8002584:	487e      	ldr	r0, [pc, #504]	@ (8002780 <System_UI_Loop+0xb70>)
 8002586:	f001 ff1c 	bl	80043c2 <OLED_GetObjectPosition>
    OLED_GetObjectPosition(&g_AnimationManager, "CursorScale", &x1, &y1);
 800258a:	463b      	mov	r3, r7
 800258c:	1d3a      	adds	r2, r7, #4
 800258e:	497e      	ldr	r1, [pc, #504]	@ (8002788 <System_UI_Loop+0xb78>)
 8002590:	487b      	ldr	r0, [pc, #492]	@ (8002780 <System_UI_Loop+0xb70>)
 8002592:	f001 ff16 	bl	80043c2 <OLED_GetObjectPosition>
    OLED_InvertArea(x - 2, y - 2, x1, y1); // 绘制光标
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800259c:	4618      	mov	r0, r3
 800259e:	f7fd fdeb 	bl	8000178 <__aeabi_fsub>
 80025a2:	4603      	mov	r3, r0
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7fe f8cd 	bl	8000744 <__aeabi_f2iz>
 80025aa:	4603      	mov	r3, r0
 80025ac:	b21c      	sxth	r4, r3
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7fd fddf 	bl	8000178 <__aeabi_fsub>
 80025ba:	4603      	mov	r3, r0
 80025bc:	4618      	mov	r0, r3
 80025be:	f7fe f8c1 	bl	8000744 <__aeabi_f2iz>
 80025c2:	4603      	mov	r3, r0
 80025c4:	b21d      	sxth	r5, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7fe f8e1 	bl	8000790 <__aeabi_f2uiz>
 80025ce:	4603      	mov	r3, r0
 80025d0:	b2de      	uxtb	r6, r3
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7fe f8db 	bl	8000790 <__aeabi_f2uiz>
 80025da:	4603      	mov	r3, r0
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	4632      	mov	r2, r6
 80025e0:	4629      	mov	r1, r5
 80025e2:	4620      	mov	r0, r4
 80025e4:	f7ff f840 	bl	8001668 <OLED_InvertArea>
#pragma endregion DRAWER

#pragma region PlayerSelection //选择某个选项时候的详细内容
    if (menuRank == 1)
 80025e8:	4b68      	ldr	r3, [pc, #416]	@ (800278c <System_UI_Loop+0xb7c>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	f040 81d6 	bne.w	800299e <System_UI_Loop+0xd8e>
    {
        switch (menuSelection)
 80025f2:	4b67      	ldr	r3, [pc, #412]	@ (8002790 <System_UI_Loop+0xb80>)
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	3b01      	subs	r3, #1
 80025f8:	2b04      	cmp	r3, #4
 80025fa:	f200 81cc 	bhi.w	8002996 <System_UI_Loop+0xd86>
 80025fe:	a201      	add	r2, pc, #4	@ (adr r2, 8002604 <System_UI_Loop+0x9f4>)
 8002600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002604:	08002619 	.word	0x08002619
 8002608:	080026c9 	.word	0x080026c9
 800260c:	080027c9 	.word	0x080027c9
 8002610:	08002863 	.word	0x08002863
 8002614:	080028fd 	.word	0x080028fd
        {
        case 1:
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleBack", (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_Start_Y, 500, TweenStyle);
 8002618:	230f      	movs	r3, #15
 800261a:	9301      	str	r3, [sp, #4]
 800261c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002620:	9300      	str	r3, [sp, #0]
 8002622:	4b5c      	ldr	r3, [pc, #368]	@ (8002794 <System_UI_Loop+0xb84>)
 8002624:	4a5c      	ldr	r2, [pc, #368]	@ (8002798 <System_UI_Loop+0xb88>)
 8002626:	4953      	ldr	r1, [pc, #332]	@ (8002774 <System_UI_Loop+0xb64>)
 8002628:	4850      	ldr	r0, [pc, #320]	@ (800276c <System_UI_Loop+0xb5c>)
 800262a:	f001 ffa5 	bl	8004578 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleStatus", OLED_WIDTH - strlen("Machine States") * 6, OLED_TITLE_Start_Y, 1, TweenStyle);
 800262e:	230f      	movs	r3, #15
 8002630:	9301      	str	r3, [sp, #4]
 8002632:	2301      	movs	r3, #1
 8002634:	9300      	str	r3, [sp, #0]
 8002636:	4b57      	ldr	r3, [pc, #348]	@ (8002794 <System_UI_Loop+0xb84>)
 8002638:	4a58      	ldr	r2, [pc, #352]	@ (800279c <System_UI_Loop+0xb8c>)
 800263a:	4959      	ldr	r1, [pc, #356]	@ (80027a0 <System_UI_Loop+0xb90>)
 800263c:	484b      	ldr	r0, [pc, #300]	@ (800276c <System_UI_Loop+0xb5c>)
 800263e:	f001 ff9b 	bl	8004578 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSettings", OLED_WIDTH - strlen("STM Settings") * 6, OLED_TITLE_Start_Y, 1, TweenStyle);
 8002642:	230f      	movs	r3, #15
 8002644:	9301      	str	r3, [sp, #4]
 8002646:	2301      	movs	r3, #1
 8002648:	9300      	str	r3, [sp, #0]
 800264a:	4b52      	ldr	r3, [pc, #328]	@ (8002794 <System_UI_Loop+0xb84>)
 800264c:	4a52      	ldr	r2, [pc, #328]	@ (8002798 <System_UI_Loop+0xb88>)
 800264e:	4955      	ldr	r1, [pc, #340]	@ (80027a4 <System_UI_Loop+0xb94>)
 8002650:	4846      	ldr	r0, [pc, #280]	@ (800276c <System_UI_Loop+0xb5c>)
 8002652:	f001 ff91 	bl	8004578 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleAbout", (OLED_WIDTH - strlen("Developer!") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 8002656:	2304      	movs	r3, #4
 8002658:	9301      	str	r3, [sp, #4]
 800265a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800265e:	9300      	str	r3, [sp, #0]
 8002660:	4b4c      	ldr	r3, [pc, #304]	@ (8002794 <System_UI_Loop+0xb84>)
 8002662:	4a51      	ldr	r2, [pc, #324]	@ (80027a8 <System_UI_Loop+0xb98>)
 8002664:	4951      	ldr	r1, [pc, #324]	@ (80027ac <System_UI_Loop+0xb9c>)
 8002666:	4841      	ldr	r0, [pc, #260]	@ (800276c <System_UI_Loop+0xb5c>)
 8002668:	f001 ff86 	bl	8004578 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleTools", (OLED_WIDTH - strlen("Tools For You") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 800266c:	2304      	movs	r3, #4
 800266e:	9301      	str	r3, [sp, #4]
 8002670:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002674:	9300      	str	r3, [sp, #0]
 8002676:	4b47      	ldr	r3, [pc, #284]	@ (8002794 <System_UI_Loop+0xb84>)
 8002678:	4a4d      	ldr	r2, [pc, #308]	@ (80027b0 <System_UI_Loop+0xba0>)
 800267a:	494e      	ldr	r1, [pc, #312]	@ (80027b4 <System_UI_Loop+0xba4>)
 800267c:	483b      	ldr	r0, [pc, #236]	@ (800276c <System_UI_Loop+0xb5c>)
 800267e:	f001 ff7b 	bl	8004578 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleGames", (OLED_WIDTH - strlen("Epicful Games") * 6), OLED_TITLE_End_Y, 500, EASE_IN_CUBIC);
 8002682:	2304      	movs	r3, #4
 8002684:	9301      	str	r3, [sp, #4]
 8002686:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800268a:	9300      	str	r3, [sp, #0]
 800268c:	f04f 0300 	mov.w	r3, #0
 8002690:	4a47      	ldr	r2, [pc, #284]	@ (80027b0 <System_UI_Loop+0xba0>)
 8002692:	4949      	ldr	r1, [pc, #292]	@ (80027b8 <System_UI_Loop+0xba8>)
 8002694:	4835      	ldr	r0, [pc, #212]	@ (800276c <System_UI_Loop+0xb5c>)
 8002696:	f001 ff6f 	bl	8004578 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Epicful Games") * 6 + 3, 8, 500, EASE_IN_CUBIC);
 800269a:	2304      	movs	r3, #4
 800269c:	9301      	str	r3, [sp, #4]
 800269e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80026a2:	9300      	str	r3, [sp, #0]
 80026a4:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 80026a8:	4a44      	ldr	r2, [pc, #272]	@ (80027bc <System_UI_Loop+0xbac>)
 80026aa:	4934      	ldr	r1, [pc, #208]	@ (800277c <System_UI_Loop+0xb6c>)
 80026ac:	4834      	ldr	r0, [pc, #208]	@ (8002780 <System_UI_Loop+0xb70>)
 80026ae:	f001 ff63 	bl	8004578 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Games") * 6 + 3, 10, 100, EASE_INOUT_CIRC);
 80026b2:	230c      	movs	r3, #12
 80026b4:	9301      	str	r3, [sp, #4]
 80026b6:	2364      	movs	r3, #100	@ 0x64
 80026b8:	9300      	str	r3, [sp, #0]
 80026ba:	4b41      	ldr	r3, [pc, #260]	@ (80027c0 <System_UI_Loop+0xbb0>)
 80026bc:	4a41      	ldr	r2, [pc, #260]	@ (80027c4 <System_UI_Loop+0xbb4>)
 80026be:	4932      	ldr	r1, [pc, #200]	@ (8002788 <System_UI_Loop+0xb78>)
 80026c0:	482f      	ldr	r0, [pc, #188]	@ (8002780 <System_UI_Loop+0xb70>)
 80026c2:	f001 ff59 	bl	8004578 <OLED_DoTweenObject>
            break;
 80026c6:	e2c8      	b.n	8002c5a <System_UI_Loop+0x104a>
        case 2:
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSettings", (OLED_WIDTH - strlen("STM Settings") * 6), OLED_TITLE_Start_Y, 1, EASE_IN_CUBIC);
 80026c8:	2304      	movs	r3, #4
 80026ca:	9301      	str	r3, [sp, #4]
 80026cc:	2301      	movs	r3, #1
 80026ce:	9300      	str	r3, [sp, #0]
 80026d0:	4b30      	ldr	r3, [pc, #192]	@ (8002794 <System_UI_Loop+0xb84>)
 80026d2:	4a31      	ldr	r2, [pc, #196]	@ (8002798 <System_UI_Loop+0xb88>)
 80026d4:	4933      	ldr	r1, [pc, #204]	@ (80027a4 <System_UI_Loop+0xb94>)
 80026d6:	4825      	ldr	r0, [pc, #148]	@ (800276c <System_UI_Loop+0xb5c>)
 80026d8:	f001 ff4e 	bl	8004578 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleAbout", (OLED_WIDTH - strlen("Developer!") * 6), OLED_TITLE_Start_Y, 1, EASE_IN_CUBIC);
 80026dc:	2304      	movs	r3, #4
 80026de:	9301      	str	r3, [sp, #4]
 80026e0:	2301      	movs	r3, #1
 80026e2:	9300      	str	r3, [sp, #0]
 80026e4:	4b2b      	ldr	r3, [pc, #172]	@ (8002794 <System_UI_Loop+0xb84>)
 80026e6:	4a30      	ldr	r2, [pc, #192]	@ (80027a8 <System_UI_Loop+0xb98>)
 80026e8:	4930      	ldr	r1, [pc, #192]	@ (80027ac <System_UI_Loop+0xb9c>)
 80026ea:	4820      	ldr	r0, [pc, #128]	@ (800276c <System_UI_Loop+0xb5c>)
 80026ec:	f001 ff44 	bl	8004578 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleStatus", (OLED_WIDTH - strlen("Machine States") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 80026f0:	2304      	movs	r3, #4
 80026f2:	9301      	str	r3, [sp, #4]
 80026f4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80026f8:	9300      	str	r3, [sp, #0]
 80026fa:	4b26      	ldr	r3, [pc, #152]	@ (8002794 <System_UI_Loop+0xb84>)
 80026fc:	4a27      	ldr	r2, [pc, #156]	@ (800279c <System_UI_Loop+0xb8c>)
 80026fe:	4928      	ldr	r1, [pc, #160]	@ (80027a0 <System_UI_Loop+0xb90>)
 8002700:	481a      	ldr	r0, [pc, #104]	@ (800276c <System_UI_Loop+0xb5c>)
 8002702:	f001 ff39 	bl	8004578 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleGames", (OLED_WIDTH - strlen("Epicful Games") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 8002706:	2304      	movs	r3, #4
 8002708:	9301      	str	r3, [sp, #4]
 800270a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800270e:	9300      	str	r3, [sp, #0]
 8002710:	4b20      	ldr	r3, [pc, #128]	@ (8002794 <System_UI_Loop+0xb84>)
 8002712:	4a27      	ldr	r2, [pc, #156]	@ (80027b0 <System_UI_Loop+0xba0>)
 8002714:	4928      	ldr	r1, [pc, #160]	@ (80027b8 <System_UI_Loop+0xba8>)
 8002716:	4815      	ldr	r0, [pc, #84]	@ (800276c <System_UI_Loop+0xb5c>)
 8002718:	f001 ff2e 	bl	8004578 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleTools", (OLED_WIDTH - strlen("Tools For You") * 6), OLED_TITLE_End_Y, 500, EASE_IN_CUBIC);
 800271c:	2304      	movs	r3, #4
 800271e:	9301      	str	r3, [sp, #4]
 8002720:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002724:	9300      	str	r3, [sp, #0]
 8002726:	f04f 0300 	mov.w	r3, #0
 800272a:	4a21      	ldr	r2, [pc, #132]	@ (80027b0 <System_UI_Loop+0xba0>)
 800272c:	4921      	ldr	r1, [pc, #132]	@ (80027b4 <System_UI_Loop+0xba4>)
 800272e:	480f      	ldr	r0, [pc, #60]	@ (800276c <System_UI_Loop+0xb5c>)
 8002730:	f001 ff22 	bl	8004578 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Tools for you") * 6 + 3, 8, 500, EASE_IN_CUBIC);
 8002734:	2304      	movs	r3, #4
 8002736:	9301      	str	r3, [sp, #4]
 8002738:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800273c:	9300      	str	r3, [sp, #0]
 800273e:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8002742:	4a1e      	ldr	r2, [pc, #120]	@ (80027bc <System_UI_Loop+0xbac>)
 8002744:	490d      	ldr	r1, [pc, #52]	@ (800277c <System_UI_Loop+0xb6c>)
 8002746:	480e      	ldr	r0, [pc, #56]	@ (8002780 <System_UI_Loop+0xb70>)
 8002748:	f001 ff16 	bl	8004578 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Tools") * 6 + 3, 10, 100, EASE_INOUT_CIRC);
 800274c:	230c      	movs	r3, #12
 800274e:	9301      	str	r3, [sp, #4]
 8002750:	2364      	movs	r3, #100	@ 0x64
 8002752:	9300      	str	r3, [sp, #0]
 8002754:	4b1a      	ldr	r3, [pc, #104]	@ (80027c0 <System_UI_Loop+0xbb0>)
 8002756:	4a1b      	ldr	r2, [pc, #108]	@ (80027c4 <System_UI_Loop+0xbb4>)
 8002758:	490b      	ldr	r1, [pc, #44]	@ (8002788 <System_UI_Loop+0xb78>)
 800275a:	4809      	ldr	r0, [pc, #36]	@ (8002780 <System_UI_Loop+0xb70>)
 800275c:	f001 ff0c 	bl	8004578 <OLED_DoTweenObject>
            break;
 8002760:	e27b      	b.n	8002c5a <System_UI_Loop+0x104a>
 8002762:	bf00      	nop
 8002764:	0800a0a0 	.word	0x0800a0a0
 8002768:	08009f84 	.word	0x08009f84
 800276c:	20003310 	.word	0x20003310
 8002770:	0800a0b0 	.word	0x0800a0b0
 8002774:	08009f90 	.word	0x08009f90
 8002778:	0800a0c0 	.word	0x0800a0c0
 800277c:	08009fb8 	.word	0x08009fb8
 8002780:	20003904 	.word	0x20003904
 8002784:	08009fc8 	.word	0x08009fc8
 8002788:	08009fd0 	.word	0x08009fd0
 800278c:	20000002 	.word	0x20000002
 8002790:	20000003 	.word	0x20000003
 8002794:	c1200000 	.word	0xc1200000
 8002798:	42600000 	.word	0x42600000
 800279c:	42300000 	.word	0x42300000
 80027a0:	08009f50 	.word	0x08009f50
 80027a4:	08009f5c 	.word	0x08009f5c
 80027a8:	42880000 	.word	0x42880000
 80027ac:	08009f6c 	.word	0x08009f6c
 80027b0:	42480000 	.word	0x42480000
 80027b4:	08009f44 	.word	0x08009f44
 80027b8:	08009f38 	.word	0x08009f38
 80027bc:	42a20000 	.word	0x42a20000
 80027c0:	41200000 	.word	0x41200000
 80027c4:	42040000 	.word	0x42040000
        case 3:
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleGames", (OLED_WIDTH - strlen("Epicful Games") * 6), OLED_TITLE_Start_Y, 1, EASE_IN_CUBIC);
 80027c8:	2304      	movs	r3, #4
 80027ca:	9301      	str	r3, [sp, #4]
 80027cc:	2301      	movs	r3, #1
 80027ce:	9300      	str	r3, [sp, #0]
 80027d0:	4b90      	ldr	r3, [pc, #576]	@ (8002a14 <System_UI_Loop+0xe04>)
 80027d2:	4a91      	ldr	r2, [pc, #580]	@ (8002a18 <System_UI_Loop+0xe08>)
 80027d4:	4991      	ldr	r1, [pc, #580]	@ (8002a1c <System_UI_Loop+0xe0c>)
 80027d6:	4892      	ldr	r0, [pc, #584]	@ (8002a20 <System_UI_Loop+0xe10>)
 80027d8:	f001 fece 	bl	8004578 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleAbout", (OLED_WIDTH - strlen("Developer!") * 6), OLED_TITLE_Start_Y, 1, EASE_IN_CUBIC);
 80027dc:	2304      	movs	r3, #4
 80027de:	9301      	str	r3, [sp, #4]
 80027e0:	2301      	movs	r3, #1
 80027e2:	9300      	str	r3, [sp, #0]
 80027e4:	4b8b      	ldr	r3, [pc, #556]	@ (8002a14 <System_UI_Loop+0xe04>)
 80027e6:	4a8f      	ldr	r2, [pc, #572]	@ (8002a24 <System_UI_Loop+0xe14>)
 80027e8:	498f      	ldr	r1, [pc, #572]	@ (8002a28 <System_UI_Loop+0xe18>)
 80027ea:	488d      	ldr	r0, [pc, #564]	@ (8002a20 <System_UI_Loop+0xe10>)
 80027ec:	f001 fec4 	bl	8004578 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSettings", (OLED_WIDTH - strlen("STM Settings") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 80027f0:	2304      	movs	r3, #4
 80027f2:	9301      	str	r3, [sp, #4]
 80027f4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80027f8:	9300      	str	r3, [sp, #0]
 80027fa:	4b86      	ldr	r3, [pc, #536]	@ (8002a14 <System_UI_Loop+0xe04>)
 80027fc:	4a8b      	ldr	r2, [pc, #556]	@ (8002a2c <System_UI_Loop+0xe1c>)
 80027fe:	498c      	ldr	r1, [pc, #560]	@ (8002a30 <System_UI_Loop+0xe20>)
 8002800:	4887      	ldr	r0, [pc, #540]	@ (8002a20 <System_UI_Loop+0xe10>)
 8002802:	f001 feb9 	bl	8004578 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleTools", (OLED_WIDTH - strlen("Tools For You") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 8002806:	2304      	movs	r3, #4
 8002808:	9301      	str	r3, [sp, #4]
 800280a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800280e:	9300      	str	r3, [sp, #0]
 8002810:	4b80      	ldr	r3, [pc, #512]	@ (8002a14 <System_UI_Loop+0xe04>)
 8002812:	4a81      	ldr	r2, [pc, #516]	@ (8002a18 <System_UI_Loop+0xe08>)
 8002814:	4987      	ldr	r1, [pc, #540]	@ (8002a34 <System_UI_Loop+0xe24>)
 8002816:	4882      	ldr	r0, [pc, #520]	@ (8002a20 <System_UI_Loop+0xe10>)
 8002818:	f001 feae 	bl	8004578 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleStatus", (OLED_WIDTH - strlen("Machine States") * 6), OLED_TITLE_End_Y, 500, EASE_IN_CUBIC);
 800281c:	2304      	movs	r3, #4
 800281e:	9301      	str	r3, [sp, #4]
 8002820:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002824:	9300      	str	r3, [sp, #0]
 8002826:	f04f 0300 	mov.w	r3, #0
 800282a:	4a83      	ldr	r2, [pc, #524]	@ (8002a38 <System_UI_Loop+0xe28>)
 800282c:	4983      	ldr	r1, [pc, #524]	@ (8002a3c <System_UI_Loop+0xe2c>)
 800282e:	487c      	ldr	r0, [pc, #496]	@ (8002a20 <System_UI_Loop+0xe10>)
 8002830:	f001 fea2 	bl	8004578 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Machine States") * 6 + 3, 8, 500, EASE_IN_CUBIC);
 8002834:	2304      	movs	r3, #4
 8002836:	9301      	str	r3, [sp, #4]
 8002838:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800283c:	9300      	str	r3, [sp, #0]
 800283e:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8002842:	4a7f      	ldr	r2, [pc, #508]	@ (8002a40 <System_UI_Loop+0xe30>)
 8002844:	497f      	ldr	r1, [pc, #508]	@ (8002a44 <System_UI_Loop+0xe34>)
 8002846:	4880      	ldr	r0, [pc, #512]	@ (8002a48 <System_UI_Loop+0xe38>)
 8002848:	f001 fe96 	bl	8004578 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("States") * 6 + 3, 10, 100, EASE_INOUT_CIRC);
 800284c:	230c      	movs	r3, #12
 800284e:	9301      	str	r3, [sp, #4]
 8002850:	2364      	movs	r3, #100	@ 0x64
 8002852:	9300      	str	r3, [sp, #0]
 8002854:	4b7d      	ldr	r3, [pc, #500]	@ (8002a4c <System_UI_Loop+0xe3c>)
 8002856:	4a7e      	ldr	r2, [pc, #504]	@ (8002a50 <System_UI_Loop+0xe40>)
 8002858:	497e      	ldr	r1, [pc, #504]	@ (8002a54 <System_UI_Loop+0xe44>)
 800285a:	487b      	ldr	r0, [pc, #492]	@ (8002a48 <System_UI_Loop+0xe38>)
 800285c:	f001 fe8c 	bl	8004578 <OLED_DoTweenObject>
            break;
 8002860:	e1fb      	b.n	8002c5a <System_UI_Loop+0x104a>
        case 4:
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleGames", (OLED_WIDTH - strlen("Epicful Games") * 6), OLED_TITLE_Start_Y, 1, EASE_IN_CUBIC);
 8002862:	2304      	movs	r3, #4
 8002864:	9301      	str	r3, [sp, #4]
 8002866:	2301      	movs	r3, #1
 8002868:	9300      	str	r3, [sp, #0]
 800286a:	4b6a      	ldr	r3, [pc, #424]	@ (8002a14 <System_UI_Loop+0xe04>)
 800286c:	4a6a      	ldr	r2, [pc, #424]	@ (8002a18 <System_UI_Loop+0xe08>)
 800286e:	496b      	ldr	r1, [pc, #428]	@ (8002a1c <System_UI_Loop+0xe0c>)
 8002870:	486b      	ldr	r0, [pc, #428]	@ (8002a20 <System_UI_Loop+0xe10>)
 8002872:	f001 fe81 	bl	8004578 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleTools", (OLED_WIDTH - strlen("Tools For You") * 6), OLED_TITLE_Start_Y, 1, EASE_IN_CUBIC);
 8002876:	2304      	movs	r3, #4
 8002878:	9301      	str	r3, [sp, #4]
 800287a:	2301      	movs	r3, #1
 800287c:	9300      	str	r3, [sp, #0]
 800287e:	4b65      	ldr	r3, [pc, #404]	@ (8002a14 <System_UI_Loop+0xe04>)
 8002880:	4a65      	ldr	r2, [pc, #404]	@ (8002a18 <System_UI_Loop+0xe08>)
 8002882:	496c      	ldr	r1, [pc, #432]	@ (8002a34 <System_UI_Loop+0xe24>)
 8002884:	4866      	ldr	r0, [pc, #408]	@ (8002a20 <System_UI_Loop+0xe10>)
 8002886:	f001 fe77 	bl	8004578 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleStatus", (OLED_WIDTH - strlen("Machine States") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 800288a:	2304      	movs	r3, #4
 800288c:	9301      	str	r3, [sp, #4]
 800288e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002892:	9300      	str	r3, [sp, #0]
 8002894:	4b5f      	ldr	r3, [pc, #380]	@ (8002a14 <System_UI_Loop+0xe04>)
 8002896:	4a68      	ldr	r2, [pc, #416]	@ (8002a38 <System_UI_Loop+0xe28>)
 8002898:	4968      	ldr	r1, [pc, #416]	@ (8002a3c <System_UI_Loop+0xe2c>)
 800289a:	4861      	ldr	r0, [pc, #388]	@ (8002a20 <System_UI_Loop+0xe10>)
 800289c:	f001 fe6c 	bl	8004578 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleAbout", (OLED_WIDTH - strlen("Developer!") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 80028a0:	2304      	movs	r3, #4
 80028a2:	9301      	str	r3, [sp, #4]
 80028a4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80028a8:	9300      	str	r3, [sp, #0]
 80028aa:	4b5a      	ldr	r3, [pc, #360]	@ (8002a14 <System_UI_Loop+0xe04>)
 80028ac:	4a5d      	ldr	r2, [pc, #372]	@ (8002a24 <System_UI_Loop+0xe14>)
 80028ae:	495e      	ldr	r1, [pc, #376]	@ (8002a28 <System_UI_Loop+0xe18>)
 80028b0:	485b      	ldr	r0, [pc, #364]	@ (8002a20 <System_UI_Loop+0xe10>)
 80028b2:	f001 fe61 	bl	8004578 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSettings", (OLED_WIDTH - strlen("STM Settings") * 6), OLED_TITLE_End_Y, 500, EASE_IN_CUBIC);
 80028b6:	2304      	movs	r3, #4
 80028b8:	9301      	str	r3, [sp, #4]
 80028ba:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80028be:	9300      	str	r3, [sp, #0]
 80028c0:	f04f 0300 	mov.w	r3, #0
 80028c4:	4a59      	ldr	r2, [pc, #356]	@ (8002a2c <System_UI_Loop+0xe1c>)
 80028c6:	495a      	ldr	r1, [pc, #360]	@ (8002a30 <System_UI_Loop+0xe20>)
 80028c8:	4855      	ldr	r0, [pc, #340]	@ (8002a20 <System_UI_Loop+0xe10>)
 80028ca:	f001 fe55 	bl	8004578 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("STM Settings") * 6 + 3, 8, 500, EASE_IN_CUBIC);
 80028ce:	2304      	movs	r3, #4
 80028d0:	9301      	str	r3, [sp, #4]
 80028d2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80028d6:	9300      	str	r3, [sp, #0]
 80028d8:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 80028dc:	4a5e      	ldr	r2, [pc, #376]	@ (8002a58 <System_UI_Loop+0xe48>)
 80028de:	4959      	ldr	r1, [pc, #356]	@ (8002a44 <System_UI_Loop+0xe34>)
 80028e0:	4859      	ldr	r0, [pc, #356]	@ (8002a48 <System_UI_Loop+0xe38>)
 80028e2:	f001 fe49 	bl	8004578 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Settings") * 6 + 3, 10, 100, EASE_INOUT_CIRC);
 80028e6:	230c      	movs	r3, #12
 80028e8:	9301      	str	r3, [sp, #4]
 80028ea:	2364      	movs	r3, #100	@ 0x64
 80028ec:	9300      	str	r3, [sp, #0]
 80028ee:	4b57      	ldr	r3, [pc, #348]	@ (8002a4c <System_UI_Loop+0xe3c>)
 80028f0:	4a5a      	ldr	r2, [pc, #360]	@ (8002a5c <System_UI_Loop+0xe4c>)
 80028f2:	4958      	ldr	r1, [pc, #352]	@ (8002a54 <System_UI_Loop+0xe44>)
 80028f4:	4854      	ldr	r0, [pc, #336]	@ (8002a48 <System_UI_Loop+0xe38>)
 80028f6:	f001 fe3f 	bl	8004578 <OLED_DoTweenObject>
            break;
 80028fa:	e1ae      	b.n	8002c5a <System_UI_Loop+0x104a>
        case 5:
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleTools", (OLED_WIDTH - strlen("Tools For You") * 6), OLED_TITLE_Start_Y, 1, EASE_IN_CUBIC);
 80028fc:	2304      	movs	r3, #4
 80028fe:	9301      	str	r3, [sp, #4]
 8002900:	2301      	movs	r3, #1
 8002902:	9300      	str	r3, [sp, #0]
 8002904:	4b43      	ldr	r3, [pc, #268]	@ (8002a14 <System_UI_Loop+0xe04>)
 8002906:	4a44      	ldr	r2, [pc, #272]	@ (8002a18 <System_UI_Loop+0xe08>)
 8002908:	494a      	ldr	r1, [pc, #296]	@ (8002a34 <System_UI_Loop+0xe24>)
 800290a:	4845      	ldr	r0, [pc, #276]	@ (8002a20 <System_UI_Loop+0xe10>)
 800290c:	f001 fe34 	bl	8004578 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleStatus", (OLED_WIDTH - strlen("Machine States") * 6), OLED_TITLE_Start_Y, 1, EASE_IN_CUBIC);
 8002910:	2304      	movs	r3, #4
 8002912:	9301      	str	r3, [sp, #4]
 8002914:	2301      	movs	r3, #1
 8002916:	9300      	str	r3, [sp, #0]
 8002918:	4b3e      	ldr	r3, [pc, #248]	@ (8002a14 <System_UI_Loop+0xe04>)
 800291a:	4a47      	ldr	r2, [pc, #284]	@ (8002a38 <System_UI_Loop+0xe28>)
 800291c:	4947      	ldr	r1, [pc, #284]	@ (8002a3c <System_UI_Loop+0xe2c>)
 800291e:	4840      	ldr	r0, [pc, #256]	@ (8002a20 <System_UI_Loop+0xe10>)
 8002920:	f001 fe2a 	bl	8004578 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSettings", (OLED_WIDTH - strlen("STM Settings") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 8002924:	2304      	movs	r3, #4
 8002926:	9301      	str	r3, [sp, #4]
 8002928:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800292c:	9300      	str	r3, [sp, #0]
 800292e:	4b39      	ldr	r3, [pc, #228]	@ (8002a14 <System_UI_Loop+0xe04>)
 8002930:	4a3e      	ldr	r2, [pc, #248]	@ (8002a2c <System_UI_Loop+0xe1c>)
 8002932:	493f      	ldr	r1, [pc, #252]	@ (8002a30 <System_UI_Loop+0xe20>)
 8002934:	483a      	ldr	r0, [pc, #232]	@ (8002a20 <System_UI_Loop+0xe10>)
 8002936:	f001 fe1f 	bl	8004578 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleGames", (OLED_WIDTH - strlen("Epicful Games") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 800293a:	2304      	movs	r3, #4
 800293c:	9301      	str	r3, [sp, #4]
 800293e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002942:	9300      	str	r3, [sp, #0]
 8002944:	4b33      	ldr	r3, [pc, #204]	@ (8002a14 <System_UI_Loop+0xe04>)
 8002946:	4a34      	ldr	r2, [pc, #208]	@ (8002a18 <System_UI_Loop+0xe08>)
 8002948:	4934      	ldr	r1, [pc, #208]	@ (8002a1c <System_UI_Loop+0xe0c>)
 800294a:	4835      	ldr	r0, [pc, #212]	@ (8002a20 <System_UI_Loop+0xe10>)
 800294c:	f001 fe14 	bl	8004578 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleAbout", (OLED_WIDTH - strlen("Developer!") * 6), OLED_TITLE_End_Y, 500, EASE_IN_CUBIC);
 8002950:	2304      	movs	r3, #4
 8002952:	9301      	str	r3, [sp, #4]
 8002954:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002958:	9300      	str	r3, [sp, #0]
 800295a:	f04f 0300 	mov.w	r3, #0
 800295e:	4a31      	ldr	r2, [pc, #196]	@ (8002a24 <System_UI_Loop+0xe14>)
 8002960:	4931      	ldr	r1, [pc, #196]	@ (8002a28 <System_UI_Loop+0xe18>)
 8002962:	482f      	ldr	r0, [pc, #188]	@ (8002a20 <System_UI_Loop+0xe10>)
 8002964:	f001 fe08 	bl	8004578 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Developer!") * 6 + 3, 8, 500, EASE_IN_CUBIC);
 8002968:	2304      	movs	r3, #4
 800296a:	9301      	str	r3, [sp, #4]
 800296c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002970:	9300      	str	r3, [sp, #0]
 8002972:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8002976:	4a3a      	ldr	r2, [pc, #232]	@ (8002a60 <System_UI_Loop+0xe50>)
 8002978:	4932      	ldr	r1, [pc, #200]	@ (8002a44 <System_UI_Loop+0xe34>)
 800297a:	4833      	ldr	r0, [pc, #204]	@ (8002a48 <System_UI_Loop+0xe38>)
 800297c:	f001 fdfc 	bl	8004578 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("About") * 6 + 3, 10, 100, EASE_INOUT_CIRC);
 8002980:	230c      	movs	r3, #12
 8002982:	9301      	str	r3, [sp, #4]
 8002984:	2364      	movs	r3, #100	@ 0x64
 8002986:	9300      	str	r3, [sp, #0]
 8002988:	4b30      	ldr	r3, [pc, #192]	@ (8002a4c <System_UI_Loop+0xe3c>)
 800298a:	4a36      	ldr	r2, [pc, #216]	@ (8002a64 <System_UI_Loop+0xe54>)
 800298c:	4931      	ldr	r1, [pc, #196]	@ (8002a54 <System_UI_Loop+0xe44>)
 800298e:	482e      	ldr	r0, [pc, #184]	@ (8002a48 <System_UI_Loop+0xe38>)
 8002990:	f001 fdf2 	bl	8004578 <OLED_DoTweenObject>
            break;
 8002994:	e161      	b.n	8002c5a <System_UI_Loop+0x104a>
        default:
            OLED_DrawTitleBar("UnikoZera's UI");
 8002996:	4834      	ldr	r0, [pc, #208]	@ (8002a68 <System_UI_Loop+0xe58>)
 8002998:	f001 fe2d 	bl	80045f6 <OLED_DrawTitleBar>
            break;
 800299c:	e15d      	b.n	8002c5a <System_UI_Loop+0x104a>
        }
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_SETTINGS)
 800299e:	4b33      	ldr	r3, [pc, #204]	@ (8002a6c <System_UI_Loop+0xe5c>)
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d104      	bne.n	80029b0 <System_UI_Loop+0xda0>
 80029a6:	4b32      	ldr	r3, [pc, #200]	@ (8002a70 <System_UI_Loop+0xe60>)
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	f000 8155 	beq.w	8002c5a <System_UI_Loop+0x104a>
    {
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_STATUS)
 80029b0:	4b2e      	ldr	r3, [pc, #184]	@ (8002a6c <System_UI_Loop+0xe5c>)
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d104      	bne.n	80029c2 <System_UI_Loop+0xdb2>
 80029b8:	4b2d      	ldr	r3, [pc, #180]	@ (8002a70 <System_UI_Loop+0xe60>)
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	2b02      	cmp	r3, #2
 80029be:	f000 814c 	beq.w	8002c5a <System_UI_Loop+0x104a>
    {
        /* code */
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_ABOUT)
 80029c2:	4b2a      	ldr	r3, [pc, #168]	@ (8002a6c <System_UI_Loop+0xe5c>)
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d104      	bne.n	80029d4 <System_UI_Loop+0xdc4>
 80029ca:	4b29      	ldr	r3, [pc, #164]	@ (8002a70 <System_UI_Loop+0xe60>)
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	2b03      	cmp	r3, #3
 80029d0:	f000 8143 	beq.w	8002c5a <System_UI_Loop+0x104a>
    {
        /* code */
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_TOOLS)
 80029d4:	4b25      	ldr	r3, [pc, #148]	@ (8002a6c <System_UI_Loop+0xe5c>)
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d104      	bne.n	80029e6 <System_UI_Loop+0xdd6>
 80029dc:	4b24      	ldr	r3, [pc, #144]	@ (8002a70 <System_UI_Loop+0xe60>)
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	2b04      	cmp	r3, #4
 80029e2:	f000 813a 	beq.w	8002c5a <System_UI_Loop+0x104a>
    {
        /* code */
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_GAMES)
 80029e6:	4b21      	ldr	r3, [pc, #132]	@ (8002a6c <System_UI_Loop+0xe5c>)
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	f040 80fc 	bne.w	8002be8 <System_UI_Loop+0xfd8>
 80029f0:	4b1f      	ldr	r3, [pc, #124]	@ (8002a70 <System_UI_Loop+0xe60>)
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	2b05      	cmp	r3, #5
 80029f6:	f040 80f7 	bne.w	8002be8 <System_UI_Loop+0xfd8>
    {
        switch (menuSelection)
 80029fa:	4b1e      	ldr	r3, [pc, #120]	@ (8002a74 <System_UI_Loop+0xe64>)
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	2b03      	cmp	r3, #3
 8002a00:	f000 80b7 	beq.w	8002b72 <System_UI_Loop+0xf62>
 8002a04:	2b03      	cmp	r3, #3
 8002a06:	f300 80ed 	bgt.w	8002be4 <System_UI_Loop+0xfd4>
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d034      	beq.n	8002a78 <System_UI_Loop+0xe68>
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d076      	beq.n	8002b00 <System_UI_Loop+0xef0>
            OLED_DoTweenObject(&g_Title_AnimationManager, "Title2048", (OLED_WIDTH - strlen("Here is 2048!") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Back To Menu") * 6 + 3, 8, 500, EASE_IN_CUBIC);
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Back") * 6 + 3, 10, 100, EASE_INOUT_CIRC);
            break;
        default:
            break;
 8002a12:	e0e7      	b.n	8002be4 <System_UI_Loop+0xfd4>
 8002a14:	c1200000 	.word	0xc1200000
 8002a18:	42480000 	.word	0x42480000
 8002a1c:	08009f38 	.word	0x08009f38
 8002a20:	20003310 	.word	0x20003310
 8002a24:	42880000 	.word	0x42880000
 8002a28:	08009f6c 	.word	0x08009f6c
 8002a2c:	42600000 	.word	0x42600000
 8002a30:	08009f5c 	.word	0x08009f5c
 8002a34:	08009f44 	.word	0x08009f44
 8002a38:	42300000 	.word	0x42300000
 8002a3c:	08009f50 	.word	0x08009f50
 8002a40:	42ae0000 	.word	0x42ae0000
 8002a44:	08009fb8 	.word	0x08009fb8
 8002a48:	20003904 	.word	0x20003904
 8002a4c:	41200000 	.word	0x41200000
 8002a50:	421c0000 	.word	0x421c0000
 8002a54:	08009fd0 	.word	0x08009fd0
 8002a58:	42960000 	.word	0x42960000
 8002a5c:	424c0000 	.word	0x424c0000
 8002a60:	427c0000 	.word	0x427c0000
 8002a64:	42040000 	.word	0x42040000
 8002a68:	0800a0d0 	.word	0x0800a0d0
 8002a6c:	20000002 	.word	0x20000002
 8002a70:	20000b45 	.word	0x20000b45
 8002a74:	20000003 	.word	0x20000003
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleGames", (OLED_WIDTH - strlen("Epicful Games") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 8002a78:	2304      	movs	r3, #4
 8002a7a:	9301      	str	r3, [sp, #4]
 8002a7c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002a80:	9300      	str	r3, [sp, #0]
 8002a82:	4b8f      	ldr	r3, [pc, #572]	@ (8002cc0 <System_UI_Loop+0x10b0>)
 8002a84:	4a8f      	ldr	r2, [pc, #572]	@ (8002cc4 <System_UI_Loop+0x10b4>)
 8002a86:	4990      	ldr	r1, [pc, #576]	@ (8002cc8 <System_UI_Loop+0x10b8>)
 8002a88:	4890      	ldr	r0, [pc, #576]	@ (8002ccc <System_UI_Loop+0x10bc>)
 8002a8a:	f001 fd75 	bl	8004578 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSnake", (OLED_WIDTH - strlen("Greedy Snake") * 6), OLED_TITLE_End_Y, 500, EASE_IN_CUBIC);
 8002a8e:	2304      	movs	r3, #4
 8002a90:	9301      	str	r3, [sp, #4]
 8002a92:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002a96:	9300      	str	r3, [sp, #0]
 8002a98:	f04f 0300 	mov.w	r3, #0
 8002a9c:	4a8c      	ldr	r2, [pc, #560]	@ (8002cd0 <System_UI_Loop+0x10c0>)
 8002a9e:	498d      	ldr	r1, [pc, #564]	@ (8002cd4 <System_UI_Loop+0x10c4>)
 8002aa0:	488a      	ldr	r0, [pc, #552]	@ (8002ccc <System_UI_Loop+0x10bc>)
 8002aa2:	f001 fd69 	bl	8004578 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "Title2048", (OLED_WIDTH - strlen("Here is 2048!") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 8002aa6:	2304      	movs	r3, #4
 8002aa8:	9301      	str	r3, [sp, #4]
 8002aaa:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002aae:	9300      	str	r3, [sp, #0]
 8002ab0:	4b83      	ldr	r3, [pc, #524]	@ (8002cc0 <System_UI_Loop+0x10b0>)
 8002ab2:	4a84      	ldr	r2, [pc, #528]	@ (8002cc4 <System_UI_Loop+0x10b4>)
 8002ab4:	4988      	ldr	r1, [pc, #544]	@ (8002cd8 <System_UI_Loop+0x10c8>)
 8002ab6:	4885      	ldr	r0, [pc, #532]	@ (8002ccc <System_UI_Loop+0x10bc>)
 8002ab8:	f001 fd5e 	bl	8004578 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleBack", (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 8002abc:	2304      	movs	r3, #4
 8002abe:	9301      	str	r3, [sp, #4]
 8002ac0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002ac4:	9300      	str	r3, [sp, #0]
 8002ac6:	4b7e      	ldr	r3, [pc, #504]	@ (8002cc0 <System_UI_Loop+0x10b0>)
 8002ac8:	4a81      	ldr	r2, [pc, #516]	@ (8002cd0 <System_UI_Loop+0x10c0>)
 8002aca:	4984      	ldr	r1, [pc, #528]	@ (8002cdc <System_UI_Loop+0x10cc>)
 8002acc:	487f      	ldr	r0, [pc, #508]	@ (8002ccc <System_UI_Loop+0x10bc>)
 8002ace:	f001 fd53 	bl	8004578 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Greedy Snake") * 6 + 3, 8, 500, EASE_IN_CUBIC);
 8002ad2:	2304      	movs	r3, #4
 8002ad4:	9301      	str	r3, [sp, #4]
 8002ad6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002ada:	9300      	str	r3, [sp, #0]
 8002adc:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8002ae0:	4a7f      	ldr	r2, [pc, #508]	@ (8002ce0 <System_UI_Loop+0x10d0>)
 8002ae2:	4980      	ldr	r1, [pc, #512]	@ (8002ce4 <System_UI_Loop+0x10d4>)
 8002ae4:	4880      	ldr	r0, [pc, #512]	@ (8002ce8 <System_UI_Loop+0x10d8>)
 8002ae6:	f001 fd47 	bl	8004578 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Snake") * 6 + 3, 10, 100, EASE_INOUT_CIRC);
 8002aea:	230c      	movs	r3, #12
 8002aec:	9301      	str	r3, [sp, #4]
 8002aee:	2364      	movs	r3, #100	@ 0x64
 8002af0:	9300      	str	r3, [sp, #0]
 8002af2:	4b7e      	ldr	r3, [pc, #504]	@ (8002cec <System_UI_Loop+0x10dc>)
 8002af4:	4a7e      	ldr	r2, [pc, #504]	@ (8002cf0 <System_UI_Loop+0x10e0>)
 8002af6:	497f      	ldr	r1, [pc, #508]	@ (8002cf4 <System_UI_Loop+0x10e4>)
 8002af8:	487b      	ldr	r0, [pc, #492]	@ (8002ce8 <System_UI_Loop+0x10d8>)
 8002afa:	f001 fd3d 	bl	8004578 <OLED_DoTweenObject>
            break;
 8002afe:	e072      	b.n	8002be6 <System_UI_Loop+0xfd6>
            OLED_DoTweenObject(&g_Title_AnimationManager, "Title2048", (OLED_WIDTH - strlen("Here is 2048!") * 6), OLED_TITLE_End_Y, 500, EASE_IN_CUBIC);
 8002b00:	2304      	movs	r3, #4
 8002b02:	9301      	str	r3, [sp, #4]
 8002b04:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002b08:	9300      	str	r3, [sp, #0]
 8002b0a:	f04f 0300 	mov.w	r3, #0
 8002b0e:	4a6d      	ldr	r2, [pc, #436]	@ (8002cc4 <System_UI_Loop+0x10b4>)
 8002b10:	4971      	ldr	r1, [pc, #452]	@ (8002cd8 <System_UI_Loop+0x10c8>)
 8002b12:	486e      	ldr	r0, [pc, #440]	@ (8002ccc <System_UI_Loop+0x10bc>)
 8002b14:	f001 fd30 	bl	8004578 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSnake", (OLED_WIDTH - strlen("Greedy Snake") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 8002b18:	2304      	movs	r3, #4
 8002b1a:	9301      	str	r3, [sp, #4]
 8002b1c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002b20:	9300      	str	r3, [sp, #0]
 8002b22:	4b67      	ldr	r3, [pc, #412]	@ (8002cc0 <System_UI_Loop+0x10b0>)
 8002b24:	4a6a      	ldr	r2, [pc, #424]	@ (8002cd0 <System_UI_Loop+0x10c0>)
 8002b26:	496b      	ldr	r1, [pc, #428]	@ (8002cd4 <System_UI_Loop+0x10c4>)
 8002b28:	4868      	ldr	r0, [pc, #416]	@ (8002ccc <System_UI_Loop+0x10bc>)
 8002b2a:	f001 fd25 	bl	8004578 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleBack", (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 8002b2e:	2304      	movs	r3, #4
 8002b30:	9301      	str	r3, [sp, #4]
 8002b32:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002b36:	9300      	str	r3, [sp, #0]
 8002b38:	4b61      	ldr	r3, [pc, #388]	@ (8002cc0 <System_UI_Loop+0x10b0>)
 8002b3a:	4a65      	ldr	r2, [pc, #404]	@ (8002cd0 <System_UI_Loop+0x10c0>)
 8002b3c:	4967      	ldr	r1, [pc, #412]	@ (8002cdc <System_UI_Loop+0x10cc>)
 8002b3e:	4863      	ldr	r0, [pc, #396]	@ (8002ccc <System_UI_Loop+0x10bc>)
 8002b40:	f001 fd1a 	bl	8004578 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Here is 2048!") * 6 + 3, 8, 500, EASE_IN_CUBIC);
 8002b44:	2304      	movs	r3, #4
 8002b46:	9301      	str	r3, [sp, #4]
 8002b48:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002b4c:	9300      	str	r3, [sp, #0]
 8002b4e:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8002b52:	4a69      	ldr	r2, [pc, #420]	@ (8002cf8 <System_UI_Loop+0x10e8>)
 8002b54:	4963      	ldr	r1, [pc, #396]	@ (8002ce4 <System_UI_Loop+0x10d4>)
 8002b56:	4864      	ldr	r0, [pc, #400]	@ (8002ce8 <System_UI_Loop+0x10d8>)
 8002b58:	f001 fd0e 	bl	8004578 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("2048") * 6 + 3, 10, 100, EASE_INOUT_CIRC);
 8002b5c:	230c      	movs	r3, #12
 8002b5e:	9301      	str	r3, [sp, #4]
 8002b60:	2364      	movs	r3, #100	@ 0x64
 8002b62:	9300      	str	r3, [sp, #0]
 8002b64:	4b61      	ldr	r3, [pc, #388]	@ (8002cec <System_UI_Loop+0x10dc>)
 8002b66:	4a65      	ldr	r2, [pc, #404]	@ (8002cfc <System_UI_Loop+0x10ec>)
 8002b68:	4962      	ldr	r1, [pc, #392]	@ (8002cf4 <System_UI_Loop+0x10e4>)
 8002b6a:	485f      	ldr	r0, [pc, #380]	@ (8002ce8 <System_UI_Loop+0x10d8>)
 8002b6c:	f001 fd04 	bl	8004578 <OLED_DoTweenObject>
            break;
 8002b70:	e039      	b.n	8002be6 <System_UI_Loop+0xfd6>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleBack", (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_End_Y, 500, EASE_IN_CUBIC);
 8002b72:	2304      	movs	r3, #4
 8002b74:	9301      	str	r3, [sp, #4]
 8002b76:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002b7a:	9300      	str	r3, [sp, #0]
 8002b7c:	f04f 0300 	mov.w	r3, #0
 8002b80:	4a53      	ldr	r2, [pc, #332]	@ (8002cd0 <System_UI_Loop+0x10c0>)
 8002b82:	4956      	ldr	r1, [pc, #344]	@ (8002cdc <System_UI_Loop+0x10cc>)
 8002b84:	4851      	ldr	r0, [pc, #324]	@ (8002ccc <System_UI_Loop+0x10bc>)
 8002b86:	f001 fcf7 	bl	8004578 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSnake", (OLED_WIDTH - strlen("Greedy Snake") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 8002b8a:	2304      	movs	r3, #4
 8002b8c:	9301      	str	r3, [sp, #4]
 8002b8e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002b92:	9300      	str	r3, [sp, #0]
 8002b94:	4b4a      	ldr	r3, [pc, #296]	@ (8002cc0 <System_UI_Loop+0x10b0>)
 8002b96:	4a4e      	ldr	r2, [pc, #312]	@ (8002cd0 <System_UI_Loop+0x10c0>)
 8002b98:	494e      	ldr	r1, [pc, #312]	@ (8002cd4 <System_UI_Loop+0x10c4>)
 8002b9a:	484c      	ldr	r0, [pc, #304]	@ (8002ccc <System_UI_Loop+0x10bc>)
 8002b9c:	f001 fcec 	bl	8004578 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "Title2048", (OLED_WIDTH - strlen("Here is 2048!") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 8002ba0:	2304      	movs	r3, #4
 8002ba2:	9301      	str	r3, [sp, #4]
 8002ba4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002ba8:	9300      	str	r3, [sp, #0]
 8002baa:	4b45      	ldr	r3, [pc, #276]	@ (8002cc0 <System_UI_Loop+0x10b0>)
 8002bac:	4a45      	ldr	r2, [pc, #276]	@ (8002cc4 <System_UI_Loop+0x10b4>)
 8002bae:	494a      	ldr	r1, [pc, #296]	@ (8002cd8 <System_UI_Loop+0x10c8>)
 8002bb0:	4846      	ldr	r0, [pc, #280]	@ (8002ccc <System_UI_Loop+0x10bc>)
 8002bb2:	f001 fce1 	bl	8004578 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Back To Menu") * 6 + 3, 8, 500, EASE_IN_CUBIC);
 8002bb6:	2304      	movs	r3, #4
 8002bb8:	9301      	str	r3, [sp, #4]
 8002bba:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002bbe:	9300      	str	r3, [sp, #0]
 8002bc0:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8002bc4:	4a46      	ldr	r2, [pc, #280]	@ (8002ce0 <System_UI_Loop+0x10d0>)
 8002bc6:	4947      	ldr	r1, [pc, #284]	@ (8002ce4 <System_UI_Loop+0x10d4>)
 8002bc8:	4847      	ldr	r0, [pc, #284]	@ (8002ce8 <System_UI_Loop+0x10d8>)
 8002bca:	f001 fcd5 	bl	8004578 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Back") * 6 + 3, 10, 100, EASE_INOUT_CIRC);
 8002bce:	230c      	movs	r3, #12
 8002bd0:	9301      	str	r3, [sp, #4]
 8002bd2:	2364      	movs	r3, #100	@ 0x64
 8002bd4:	9300      	str	r3, [sp, #0]
 8002bd6:	4b45      	ldr	r3, [pc, #276]	@ (8002cec <System_UI_Loop+0x10dc>)
 8002bd8:	4a48      	ldr	r2, [pc, #288]	@ (8002cfc <System_UI_Loop+0x10ec>)
 8002bda:	4946      	ldr	r1, [pc, #280]	@ (8002cf4 <System_UI_Loop+0x10e4>)
 8002bdc:	4842      	ldr	r0, [pc, #264]	@ (8002ce8 <System_UI_Loop+0x10d8>)
 8002bde:	f001 fccb 	bl	8004578 <OLED_DoTweenObject>
            break;
 8002be2:	e000      	b.n	8002be6 <System_UI_Loop+0xfd6>
            break;
 8002be4:	bf00      	nop
        switch (menuSelection)
 8002be6:	e038      	b.n	8002c5a <System_UI_Loop+0x104a>
        }
    }
    else if (menuRank == 3 && currentPage == UI_PAGE_GAMES && menuSelection == 1)
 8002be8:	4b45      	ldr	r3, [pc, #276]	@ (8002d00 <System_UI_Loop+0x10f0>)
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	2b03      	cmp	r3, #3
 8002bee:	d134      	bne.n	8002c5a <System_UI_Loop+0x104a>
 8002bf0:	4b44      	ldr	r3, [pc, #272]	@ (8002d04 <System_UI_Loop+0x10f4>)
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	2b05      	cmp	r3, #5
 8002bf6:	d130      	bne.n	8002c5a <System_UI_Loop+0x104a>
 8002bf8:	4b43      	ldr	r3, [pc, #268]	@ (8002d08 <System_UI_Loop+0x10f8>)
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d105      	bne.n	8002c0c <System_UI_Loop+0xffc>
    {
        cancelSelection = true;
 8002c00:	4b42      	ldr	r3, [pc, #264]	@ (8002d0c <System_UI_Loop+0x10fc>)
 8002c02:	2201      	movs	r2, #1
 8002c04:	701a      	strb	r2, [r3, #0]
        Snake_GameLoop();
 8002c06:	f7fd fffd 	bl	8000c04 <Snake_GameLoop>
 8002c0a:	e026      	b.n	8002c5a <System_UI_Loop+0x104a>
    }
    else if (menuRank == 3 && currentPage == UI_PAGE_GAMES && menuSelection == 2)
 8002c0c:	4b3c      	ldr	r3, [pc, #240]	@ (8002d00 <System_UI_Loop+0x10f0>)
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	2b03      	cmp	r3, #3
 8002c12:	d122      	bne.n	8002c5a <System_UI_Loop+0x104a>
 8002c14:	4b3b      	ldr	r3, [pc, #236]	@ (8002d04 <System_UI_Loop+0x10f4>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	2b05      	cmp	r3, #5
 8002c1a:	d11e      	bne.n	8002c5a <System_UI_Loop+0x104a>
 8002c1c:	4b3a      	ldr	r3, [pc, #232]	@ (8002d08 <System_UI_Loop+0x10f8>)
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d01a      	beq.n	8002c5a <System_UI_Loop+0x104a>
    {
        /* code */
    }
    else if (menuRank == 3 && currentPage == UI_PAGE_SETTINGS)
 8002c24:	4b36      	ldr	r3, [pc, #216]	@ (8002d00 <System_UI_Loop+0x10f0>)
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	2b03      	cmp	r3, #3
 8002c2a:	d116      	bne.n	8002c5a <System_UI_Loop+0x104a>
 8002c2c:	4b35      	ldr	r3, [pc, #212]	@ (8002d04 <System_UI_Loop+0x10f4>)
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d012      	beq.n	8002c5a <System_UI_Loop+0x104a>
    {
        /* code */
    }
    else if (menuRank == 3 && currentPage == UI_PAGE_STATUS)
 8002c34:	4b32      	ldr	r3, [pc, #200]	@ (8002d00 <System_UI_Loop+0x10f0>)
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	2b03      	cmp	r3, #3
 8002c3a:	d10e      	bne.n	8002c5a <System_UI_Loop+0x104a>
 8002c3c:	4b31      	ldr	r3, [pc, #196]	@ (8002d04 <System_UI_Loop+0x10f4>)
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d00a      	beq.n	8002c5a <System_UI_Loop+0x104a>
    {
        /* code */
    }
    else if (menuRank == 3 && currentPage == UI_PAGE_ABOUT)
 8002c44:	4b2e      	ldr	r3, [pc, #184]	@ (8002d00 <System_UI_Loop+0x10f0>)
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	2b03      	cmp	r3, #3
 8002c4a:	d106      	bne.n	8002c5a <System_UI_Loop+0x104a>
 8002c4c:	4b2d      	ldr	r3, [pc, #180]	@ (8002d04 <System_UI_Loop+0x10f4>)
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	2b03      	cmp	r3, #3
 8002c52:	d002      	beq.n	8002c5a <System_UI_Loop+0x104a>
    {
        /* code */
    }
    else if (menuRank == 3 && currentPage == UI_PAGE_TOOLS)
 8002c54:	4b2a      	ldr	r3, [pc, #168]	@ (8002d00 <System_UI_Loop+0x10f0>)
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	2b03      	cmp	r3, #3
    }
    
#pragma endregion PlayerSelection

#pragma region ResetAnimation //完成换级时候让动画复位
    if (menuRank == 1 && OLED_GetAnimationStates(&Games_AnimationManager, "Snake") == 0)
 8002c5a:	4b29      	ldr	r3, [pc, #164]	@ (8002d00 <System_UI_Loop+0x10f0>)
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d125      	bne.n	8002cae <System_UI_Loop+0x109e>
 8002c62:	492b      	ldr	r1, [pc, #172]	@ (8002d10 <System_UI_Loop+0x1100>)
 8002c64:	482b      	ldr	r0, [pc, #172]	@ (8002d14 <System_UI_Loop+0x1104>)
 8002c66:	f001 fc71 	bl	800454c <OLED_GetAnimationStates>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d11e      	bne.n	8002cae <System_UI_Loop+0x109e>
    {
        OLED_DoTweenObject(&Games_AnimationManager, "Snake", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1, EASE_IN_CIRC);
 8002c70:	230a      	movs	r3, #10
 8002c72:	9301      	str	r3, [sp, #4]
 8002c74:	2301      	movs	r3, #1
 8002c76:	9300      	str	r3, [sp, #0]
 8002c78:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8002c7c:	4a26      	ldr	r2, [pc, #152]	@ (8002d18 <System_UI_Loop+0x1108>)
 8002c7e:	4924      	ldr	r1, [pc, #144]	@ (8002d10 <System_UI_Loop+0x1100>)
 8002c80:	4824      	ldr	r0, [pc, #144]	@ (8002d14 <System_UI_Loop+0x1104>)
 8002c82:	f001 fc79 	bl	8004578 <OLED_DoTweenObject>
        OLED_DoTweenObject(&Games_AnimationManager, "2048", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1, EASE_IN_CIRC);
 8002c86:	230a      	movs	r3, #10
 8002c88:	9301      	str	r3, [sp, #4]
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	9300      	str	r3, [sp, #0]
 8002c8e:	4b23      	ldr	r3, [pc, #140]	@ (8002d1c <System_UI_Loop+0x110c>)
 8002c90:	4a21      	ldr	r2, [pc, #132]	@ (8002d18 <System_UI_Loop+0x1108>)
 8002c92:	4923      	ldr	r1, [pc, #140]	@ (8002d20 <System_UI_Loop+0x1110>)
 8002c94:	481f      	ldr	r0, [pc, #124]	@ (8002d14 <System_UI_Loop+0x1104>)
 8002c96:	f001 fc6f 	bl	8004578 <OLED_DoTweenObject>
        OLED_DoTweenObject(&g_AnimationManager, "BackButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, 1, EASE_IN_CIRC);
 8002c9a:	230a      	movs	r3, #10
 8002c9c:	9301      	str	r3, [sp, #4]
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	9300      	str	r3, [sp, #0]
 8002ca2:	4b20      	ldr	r3, [pc, #128]	@ (8002d24 <System_UI_Loop+0x1114>)
 8002ca4:	4a1c      	ldr	r2, [pc, #112]	@ (8002d18 <System_UI_Loop+0x1108>)
 8002ca6:	4920      	ldr	r1, [pc, #128]	@ (8002d28 <System_UI_Loop+0x1118>)
 8002ca8:	480f      	ldr	r0, [pc, #60]	@ (8002ce8 <System_UI_Loop+0x10d8>)
 8002caa:	f001 fc65 	bl	8004578 <OLED_DoTweenObject>
    }

#pragma endregion ResetAnimation

    preMenuSelection = menuSelection;
 8002cae:	4b16      	ldr	r3, [pc, #88]	@ (8002d08 <System_UI_Loop+0x10f8>)
 8002cb0:	781a      	ldrb	r2, [r3, #0]
 8002cb2:	4b1e      	ldr	r3, [pc, #120]	@ (8002d2c <System_UI_Loop+0x111c>)
 8002cb4:	701a      	strb	r2, [r3, #0]
}
 8002cb6:	bf00      	nop
 8002cb8:	3714      	adds	r7, #20
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	c1200000 	.word	0xc1200000
 8002cc4:	42480000 	.word	0x42480000
 8002cc8:	08009f38 	.word	0x08009f38
 8002ccc:	20003310 	.word	0x20003310
 8002cd0:	42600000 	.word	0x42600000
 8002cd4:	08009f78 	.word	0x08009f78
 8002cd8:	08009f84 	.word	0x08009f84
 8002cdc:	08009f90 	.word	0x08009f90
 8002ce0:	42960000 	.word	0x42960000
 8002ce4:	08009fb8 	.word	0x08009fb8
 8002ce8:	20003904 	.word	0x20003904
 8002cec:	41200000 	.word	0x41200000
 8002cf0:	42040000 	.word	0x42040000
 8002cf4:	08009fd0 	.word	0x08009fd0
 8002cf8:	42a20000 	.word	0x42a20000
 8002cfc:	41d80000 	.word	0x41d80000
 8002d00:	20000002 	.word	0x20000002
 8002d04:	20000b45 	.word	0x20000b45
 8002d08:	20000003 	.word	0x20000003
 8002d0c:	20000b47 	.word	0x20000b47
 8002d10:	08009f9c 	.word	0x08009f9c
 8002d14:	2000154c 	.word	0x2000154c
 8002d18:	c2b40000 	.word	0xc2b40000
 8002d1c:	41e80000 	.word	0x41e80000
 8002d20:	08009fa4 	.word	0x08009fa4
 8002d24:	42280000 	.word	0x42280000
 8002d28:	08009fac 	.word	0x08009fac
 8002d2c:	20000b46 	.word	0x20000b46

08002d30 <SystemGetsSignal>:

void SystemGetsSignal() // 这里是旋钮数据的获取
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af02      	add	r7, sp, #8
    static uint16_t preCount = 32767;
    uint16_t pageCount;
    if (currentPage == UI_PAGE_MENU)
 8002d36:	4ba5      	ldr	r3, [pc, #660]	@ (8002fcc <SystemGetsSignal+0x29c>)
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d102      	bne.n	8002d44 <SystemGetsSignal+0x14>
    {
        pageCount = MainMenuItemCount;
 8002d3e:	2305      	movs	r3, #5
 8002d40:	80fb      	strh	r3, [r7, #6]
 8002d42:	e021      	b.n	8002d88 <SystemGetsSignal+0x58>
    }
    else if (currentPage == UI_PAGE_SETTINGS)
 8002d44:	4ba1      	ldr	r3, [pc, #644]	@ (8002fcc <SystemGetsSignal+0x29c>)
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d102      	bne.n	8002d52 <SystemGetsSignal+0x22>
    {
        pageCount = SettingsItemCount;
 8002d4c:	2305      	movs	r3, #5
 8002d4e:	80fb      	strh	r3, [r7, #6]
 8002d50:	e01a      	b.n	8002d88 <SystemGetsSignal+0x58>
    }
    else if (currentPage == UI_PAGE_STATUS)
 8002d52:	4b9e      	ldr	r3, [pc, #632]	@ (8002fcc <SystemGetsSignal+0x29c>)
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d102      	bne.n	8002d60 <SystemGetsSignal+0x30>
    {
        pageCount = StatusItemCount;
 8002d5a:	2305      	movs	r3, #5
 8002d5c:	80fb      	strh	r3, [r7, #6]
 8002d5e:	e013      	b.n	8002d88 <SystemGetsSignal+0x58>
    }
    else if (currentPage == UI_PAGE_ABOUT)
 8002d60:	4b9a      	ldr	r3, [pc, #616]	@ (8002fcc <SystemGetsSignal+0x29c>)
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	2b03      	cmp	r3, #3
 8002d66:	d102      	bne.n	8002d6e <SystemGetsSignal+0x3e>
    {
        pageCount = AboutItemCount;
 8002d68:	2305      	movs	r3, #5
 8002d6a:	80fb      	strh	r3, [r7, #6]
 8002d6c:	e00c      	b.n	8002d88 <SystemGetsSignal+0x58>
    }
    else if (currentPage == UI_PAGE_TOOLS)
 8002d6e:	4b97      	ldr	r3, [pc, #604]	@ (8002fcc <SystemGetsSignal+0x29c>)
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	2b04      	cmp	r3, #4
 8002d74:	d102      	bne.n	8002d7c <SystemGetsSignal+0x4c>
    {
        pageCount = ToolsItemCount;
 8002d76:	2305      	movs	r3, #5
 8002d78:	80fb      	strh	r3, [r7, #6]
 8002d7a:	e005      	b.n	8002d88 <SystemGetsSignal+0x58>
    }
    else if (currentPage == UI_PAGE_GAMES)
 8002d7c:	4b93      	ldr	r3, [pc, #588]	@ (8002fcc <SystemGetsSignal+0x29c>)
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	2b05      	cmp	r3, #5
 8002d82:	d101      	bne.n	8002d88 <SystemGetsSignal+0x58>
    {
        pageCount = GamesItemCount;
 8002d84:	2303      	movs	r3, #3
 8002d86:	80fb      	strh	r3, [r7, #6]
    }

    if (!cancelSelection)
 8002d88:	4b91      	ldr	r3, [pc, #580]	@ (8002fd0 <SystemGetsSignal+0x2a0>)
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	f083 0301 	eor.w	r3, r3, #1
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d039      	beq.n	8002e0a <SystemGetsSignal+0xda>
    {
        if (count - preCount > 1)
 8002d96:	4b8f      	ldr	r3, [pc, #572]	@ (8002fd4 <SystemGetsSignal+0x2a4>)
 8002d98:	881b      	ldrh	r3, [r3, #0]
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	4b8e      	ldr	r3, [pc, #568]	@ (8002fd8 <SystemGetsSignal+0x2a8>)
 8002d9e:	881b      	ldrh	r3, [r3, #0]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	dd14      	ble.n	8002dd0 <SystemGetsSignal+0xa0>
        {
            if (menuSelection < pageCount)
 8002da6:	4b8d      	ldr	r3, [pc, #564]	@ (8002fdc <SystemGetsSignal+0x2ac>)
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	461a      	mov	r2, r3
 8002dac:	88fb      	ldrh	r3, [r7, #6]
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d906      	bls.n	8002dc0 <SystemGetsSignal+0x90>
            {
                menuSelection++;
 8002db2:	4b8a      	ldr	r3, [pc, #552]	@ (8002fdc <SystemGetsSignal+0x2ac>)
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	3301      	adds	r3, #1
 8002db8:	b2da      	uxtb	r2, r3
 8002dba:	4b88      	ldr	r3, [pc, #544]	@ (8002fdc <SystemGetsSignal+0x2ac>)
 8002dbc:	701a      	strb	r2, [r3, #0]
 8002dbe:	e002      	b.n	8002dc6 <SystemGetsSignal+0x96>
            }
            else
            {
                menuSelection = 1;
 8002dc0:	4b86      	ldr	r3, [pc, #536]	@ (8002fdc <SystemGetsSignal+0x2ac>)
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	701a      	strb	r2, [r3, #0]
            }

            preCount = count;
 8002dc6:	4b83      	ldr	r3, [pc, #524]	@ (8002fd4 <SystemGetsSignal+0x2a4>)
 8002dc8:	881a      	ldrh	r2, [r3, #0]
 8002dca:	4b83      	ldr	r3, [pc, #524]	@ (8002fd8 <SystemGetsSignal+0x2a8>)
 8002dcc:	801a      	strh	r2, [r3, #0]
 8002dce:	e020      	b.n	8002e12 <SystemGetsSignal+0xe2>
        }
        else if (count - preCount < -1)
 8002dd0:	4b80      	ldr	r3, [pc, #512]	@ (8002fd4 <SystemGetsSignal+0x2a4>)
 8002dd2:	881b      	ldrh	r3, [r3, #0]
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	4b80      	ldr	r3, [pc, #512]	@ (8002fd8 <SystemGetsSignal+0x2a8>)
 8002dd8:	881b      	ldrh	r3, [r3, #0]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de0:	da17      	bge.n	8002e12 <SystemGetsSignal+0xe2>
        {

            if (menuSelection > 1)
 8002de2:	4b7e      	ldr	r3, [pc, #504]	@ (8002fdc <SystemGetsSignal+0x2ac>)
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d906      	bls.n	8002df8 <SystemGetsSignal+0xc8>
            {
                menuSelection--;
 8002dea:	4b7c      	ldr	r3, [pc, #496]	@ (8002fdc <SystemGetsSignal+0x2ac>)
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	3b01      	subs	r3, #1
 8002df0:	b2da      	uxtb	r2, r3
 8002df2:	4b7a      	ldr	r3, [pc, #488]	@ (8002fdc <SystemGetsSignal+0x2ac>)
 8002df4:	701a      	strb	r2, [r3, #0]
 8002df6:	e003      	b.n	8002e00 <SystemGetsSignal+0xd0>
            }
            else
            {
                menuSelection = pageCount;
 8002df8:	88fb      	ldrh	r3, [r7, #6]
 8002dfa:	b2da      	uxtb	r2, r3
 8002dfc:	4b77      	ldr	r3, [pc, #476]	@ (8002fdc <SystemGetsSignal+0x2ac>)
 8002dfe:	701a      	strb	r2, [r3, #0]
            }

            preCount = count;
 8002e00:	4b74      	ldr	r3, [pc, #464]	@ (8002fd4 <SystemGetsSignal+0x2a4>)
 8002e02:	881a      	ldrh	r2, [r3, #0]
 8002e04:	4b74      	ldr	r3, [pc, #464]	@ (8002fd8 <SystemGetsSignal+0x2a8>)
 8002e06:	801a      	strh	r2, [r3, #0]
 8002e08:	e003      	b.n	8002e12 <SystemGetsSignal+0xe2>
        }
    }
    else
        preCount = count;
 8002e0a:	4b72      	ldr	r3, [pc, #456]	@ (8002fd4 <SystemGetsSignal+0x2a4>)
 8002e0c:	881a      	ldrh	r2, [r3, #0]
 8002e0e:	4b72      	ldr	r3, [pc, #456]	@ (8002fd8 <SystemGetsSignal+0x2a8>)
 8002e10:	801a      	strh	r2, [r3, #0]

    if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET)
 8002e12:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002e16:	4872      	ldr	r0, [pc, #456]	@ (8002fe0 <SystemGetsSignal+0x2b0>)
 8002e18:	f002 fc16 	bl	8005648 <HAL_GPIO_ReadPin>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f040 8253 	bne.w	80032ca <SystemGetsSignal+0x59a>
    {
        HAL_Delay(50); // 防抖动延时
 8002e24:	2032      	movs	r0, #50	@ 0x32
 8002e26:	f001 fff9 	bl	8004e1c <HAL_Delay>
        if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET && !gameOver)
 8002e2a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002e2e:	486c      	ldr	r0, [pc, #432]	@ (8002fe0 <SystemGetsSignal+0x2b0>)
 8002e30:	f002 fc0a 	bl	8005648 <HAL_GPIO_ReadPin>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f040 8247 	bne.w	80032ca <SystemGetsSignal+0x59a>
 8002e3c:	4b69      	ldr	r3, [pc, #420]	@ (8002fe4 <SystemGetsSignal+0x2b4>)
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	f083 0301 	eor.w	r3, r3, #1
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	f000 823f 	beq.w	80032ca <SystemGetsSignal+0x59a>
        {
            if (menuRank == 1 && menuSelection == 1)
 8002e4c:	4b66      	ldr	r3, [pc, #408]	@ (8002fe8 <SystemGetsSignal+0x2b8>)
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	f040 80e7 	bne.w	8003024 <SystemGetsSignal+0x2f4>
 8002e56:	4b61      	ldr	r3, [pc, #388]	@ (8002fdc <SystemGetsSignal+0x2ac>)
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	f040 80e2 	bne.w	8003024 <SystemGetsSignal+0x2f4>
            {
                menuRank = 2;
 8002e60:	4b61      	ldr	r3, [pc, #388]	@ (8002fe8 <SystemGetsSignal+0x2b8>)
 8002e62:	2202      	movs	r2, #2
 8002e64:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_GAMES;
 8002e66:	4b59      	ldr	r3, [pc, #356]	@ (8002fcc <SystemGetsSignal+0x29c>)
 8002e68:	2205      	movs	r2, #5
 8002e6a:	701a      	strb	r2, [r3, #0]
                OLED_DoTweenObject(&Menu_AnimationManager, "GamesButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (2 - menuSelection), 1000, EASE_IN_CIRC);
 8002e6c:	4b5b      	ldr	r3, [pc, #364]	@ (8002fdc <SystemGetsSignal+0x2ac>)
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	f1c3 0202 	rsb	r2, r3, #2
 8002e74:	4613      	mov	r3, r2
 8002e76:	005b      	lsls	r3, r3, #1
 8002e78:	4413      	add	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4413      	add	r3, r2
 8002e7e:	3303      	adds	r3, #3
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7fd fa2f 	bl	80002e4 <__aeabi_i2f>
 8002e86:	4603      	mov	r3, r0
 8002e88:	220a      	movs	r2, #10
 8002e8a:	9201      	str	r2, [sp, #4]
 8002e8c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002e90:	9200      	str	r2, [sp, #0]
 8002e92:	4a56      	ldr	r2, [pc, #344]	@ (8002fec <SystemGetsSignal+0x2bc>)
 8002e94:	4956      	ldr	r1, [pc, #344]	@ (8002ff0 <SystemGetsSignal+0x2c0>)
 8002e96:	4857      	ldr	r0, [pc, #348]	@ (8002ff4 <SystemGetsSignal+0x2c4>)
 8002e98:	f001 fb6e 	bl	8004578 <OLED_DoTweenObject>
                HAL_Delay(100);
 8002e9c:	2064      	movs	r0, #100	@ 0x64
 8002e9e:	f001 ffbd 	bl	8004e1c <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "ToolsButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (3 - menuSelection), 1000, EASE_IN_CIRC);
 8002ea2:	4b4e      	ldr	r3, [pc, #312]	@ (8002fdc <SystemGetsSignal+0x2ac>)
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	f1c3 0203 	rsb	r2, r3, #3
 8002eaa:	4613      	mov	r3, r2
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	4413      	add	r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	4413      	add	r3, r2
 8002eb4:	3303      	adds	r3, #3
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7fd fa14 	bl	80002e4 <__aeabi_i2f>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	220a      	movs	r2, #10
 8002ec0:	9201      	str	r2, [sp, #4]
 8002ec2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002ec6:	9200      	str	r2, [sp, #0]
 8002ec8:	4a48      	ldr	r2, [pc, #288]	@ (8002fec <SystemGetsSignal+0x2bc>)
 8002eca:	494b      	ldr	r1, [pc, #300]	@ (8002ff8 <SystemGetsSignal+0x2c8>)
 8002ecc:	4849      	ldr	r0, [pc, #292]	@ (8002ff4 <SystemGetsSignal+0x2c4>)
 8002ece:	f001 fb53 	bl	8004578 <OLED_DoTweenObject>
                HAL_Delay(100);
 8002ed2:	2064      	movs	r0, #100	@ 0x64
 8002ed4:	f001 ffa2 	bl	8004e1c <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "StatusButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (4 - menuSelection), 1000, EASE_IN_CIRC);
 8002ed8:	4b40      	ldr	r3, [pc, #256]	@ (8002fdc <SystemGetsSignal+0x2ac>)
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	f1c3 0204 	rsb	r2, r3, #4
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	005b      	lsls	r3, r3, #1
 8002ee4:	4413      	add	r3, r2
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	4413      	add	r3, r2
 8002eea:	3303      	adds	r3, #3
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7fd f9f9 	bl	80002e4 <__aeabi_i2f>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	220a      	movs	r2, #10
 8002ef6:	9201      	str	r2, [sp, #4]
 8002ef8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002efc:	9200      	str	r2, [sp, #0]
 8002efe:	4a3b      	ldr	r2, [pc, #236]	@ (8002fec <SystemGetsSignal+0x2bc>)
 8002f00:	493e      	ldr	r1, [pc, #248]	@ (8002ffc <SystemGetsSignal+0x2cc>)
 8002f02:	483c      	ldr	r0, [pc, #240]	@ (8002ff4 <SystemGetsSignal+0x2c4>)
 8002f04:	f001 fb38 	bl	8004578 <OLED_DoTweenObject>
                HAL_Delay(100);
 8002f08:	2064      	movs	r0, #100	@ 0x64
 8002f0a:	f001 ff87 	bl	8004e1c <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "SettingsButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (5 - menuSelection), 1000, EASE_IN_CIRC);
 8002f0e:	4b33      	ldr	r3, [pc, #204]	@ (8002fdc <SystemGetsSignal+0x2ac>)
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	f1c3 0205 	rsb	r2, r3, #5
 8002f16:	4613      	mov	r3, r2
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	4413      	add	r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	4413      	add	r3, r2
 8002f20:	3303      	adds	r3, #3
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7fd f9de 	bl	80002e4 <__aeabi_i2f>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	220a      	movs	r2, #10
 8002f2c:	9201      	str	r2, [sp, #4]
 8002f2e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002f32:	9200      	str	r2, [sp, #0]
 8002f34:	4a2d      	ldr	r2, [pc, #180]	@ (8002fec <SystemGetsSignal+0x2bc>)
 8002f36:	4932      	ldr	r1, [pc, #200]	@ (8003000 <SystemGetsSignal+0x2d0>)
 8002f38:	482e      	ldr	r0, [pc, #184]	@ (8002ff4 <SystemGetsSignal+0x2c4>)
 8002f3a:	f001 fb1d 	bl	8004578 <OLED_DoTweenObject>
                HAL_Delay(100);
 8002f3e:	2064      	movs	r0, #100	@ 0x64
 8002f40:	f001 ff6c 	bl	8004e1c <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "AboutButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (6 - menuSelection), 1000, EASE_IN_CIRC);
 8002f44:	4b25      	ldr	r3, [pc, #148]	@ (8002fdc <SystemGetsSignal+0x2ac>)
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	f1c3 0206 	rsb	r2, r3, #6
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	4413      	add	r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	4413      	add	r3, r2
 8002f56:	3303      	adds	r3, #3
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7fd f9c3 	bl	80002e4 <__aeabi_i2f>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	220a      	movs	r2, #10
 8002f62:	9201      	str	r2, [sp, #4]
 8002f64:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002f68:	9200      	str	r2, [sp, #0]
 8002f6a:	4a20      	ldr	r2, [pc, #128]	@ (8002fec <SystemGetsSignal+0x2bc>)
 8002f6c:	4925      	ldr	r1, [pc, #148]	@ (8003004 <SystemGetsSignal+0x2d4>)
 8002f6e:	4821      	ldr	r0, [pc, #132]	@ (8002ff4 <SystemGetsSignal+0x2c4>)
 8002f70:	f001 fb02 	bl	8004578 <OLED_DoTweenObject>

                OLED_DoTweenObject(&Games_AnimationManager, "Snake", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1000, EASE_IN_CIRC);
 8002f74:	230a      	movs	r3, #10
 8002f76:	9301      	str	r3, [sp, #4]
 8002f78:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f7c:	9300      	str	r3, [sp, #0]
 8002f7e:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8002f82:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002f86:	4920      	ldr	r1, [pc, #128]	@ (8003008 <SystemGetsSignal+0x2d8>)
 8002f88:	4820      	ldr	r0, [pc, #128]	@ (800300c <SystemGetsSignal+0x2dc>)
 8002f8a:	f001 faf5 	bl	8004578 <OLED_DoTweenObject>
                HAL_Delay(100);
 8002f8e:	2064      	movs	r0, #100	@ 0x64
 8002f90:	f001 ff44 	bl	8004e1c <HAL_Delay>
                OLED_DoTweenObject(&Games_AnimationManager, "2048", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1000, EASE_IN_CIRC);
 8002f94:	230a      	movs	r3, #10
 8002f96:	9301      	str	r3, [sp, #4]
 8002f98:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f9c:	9300      	str	r3, [sp, #0]
 8002f9e:	4b1c      	ldr	r3, [pc, #112]	@ (8003010 <SystemGetsSignal+0x2e0>)
 8002fa0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002fa4:	491b      	ldr	r1, [pc, #108]	@ (8003014 <SystemGetsSignal+0x2e4>)
 8002fa6:	4819      	ldr	r0, [pc, #100]	@ (800300c <SystemGetsSignal+0x2dc>)
 8002fa8:	f001 fae6 	bl	8004578 <OLED_DoTweenObject>
                HAL_Delay(100);
 8002fac:	2064      	movs	r0, #100	@ 0x64
 8002fae:	f001 ff35 	bl	8004e1c <HAL_Delay>
                OLED_DoTweenObject(&g_AnimationManager, "BackButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, 1000, EASE_IN_CIRC);
 8002fb2:	230a      	movs	r3, #10
 8002fb4:	9301      	str	r3, [sp, #4]
 8002fb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002fba:	9300      	str	r3, [sp, #0]
 8002fbc:	4b16      	ldr	r3, [pc, #88]	@ (8003018 <SystemGetsSignal+0x2e8>)
 8002fbe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002fc2:	4916      	ldr	r1, [pc, #88]	@ (800301c <SystemGetsSignal+0x2ec>)
 8002fc4:	4816      	ldr	r0, [pc, #88]	@ (8003020 <SystemGetsSignal+0x2f0>)
 8002fc6:	f001 fad7 	bl	8004578 <OLED_DoTweenObject>
 8002fca:	e175      	b.n	80032b8 <SystemGetsSignal+0x588>
 8002fcc:	20000b45 	.word	0x20000b45
 8002fd0:	20000b47 	.word	0x20000b47
 8002fd4:	20000330 	.word	0x20000330
 8002fd8:	20000006 	.word	0x20000006
 8002fdc:	20000003 	.word	0x20000003
 8002fe0:	40010c00 	.word	0x40010c00
 8002fe4:	2000023a 	.word	0x2000023a
 8002fe8:	20000002 	.word	0x20000002
 8002fec:	c2b40000 	.word	0xc2b40000
 8002ff0:	08009fdc 	.word	0x08009fdc
 8002ff4:	20000f58 	.word	0x20000f58
 8002ff8:	08009fe8 	.word	0x08009fe8
 8002ffc:	08009ff4 	.word	0x08009ff4
 8003000:	0800a004 	.word	0x0800a004
 8003004:	0800a014 	.word	0x0800a014
 8003008:	08009f9c 	.word	0x08009f9c
 800300c:	2000154c 	.word	0x2000154c
 8003010:	41e80000 	.word	0x41e80000
 8003014:	08009fa4 	.word	0x08009fa4
 8003018:	42280000 	.word	0x42280000
 800301c:	08009fac 	.word	0x08009fac
 8003020:	20003904 	.word	0x20003904
            }
            else if (menuRank == 2 && menuSelection == 3)
 8003024:	4bab      	ldr	r3, [pc, #684]	@ (80032d4 <SystemGetsSignal+0x5a4>)
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	2b02      	cmp	r3, #2
 800302a:	d17e      	bne.n	800312a <SystemGetsSignal+0x3fa>
 800302c:	4baa      	ldr	r3, [pc, #680]	@ (80032d8 <SystemGetsSignal+0x5a8>)
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	2b03      	cmp	r3, #3
 8003032:	d17a      	bne.n	800312a <SystemGetsSignal+0x3fa>
            {
                menuRank = 1;
 8003034:	4ba7      	ldr	r3, [pc, #668]	@ (80032d4 <SystemGetsSignal+0x5a4>)
 8003036:	2201      	movs	r2, #1
 8003038:	701a      	strb	r2, [r3, #0]
                menuSelection = 1;
 800303a:	4ba7      	ldr	r3, [pc, #668]	@ (80032d8 <SystemGetsSignal+0x5a8>)
 800303c:	2201      	movs	r2, #1
 800303e:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_MENU;
 8003040:	4ba6      	ldr	r3, [pc, #664]	@ (80032dc <SystemGetsSignal+0x5ac>)
 8003042:	2200      	movs	r2, #0
 8003044:	701a      	strb	r2, [r3, #0]
                OLED_DoTweenObject(&Games_AnimationManager, "Snake", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * -1, 1000, EASE_IN_CIRC);
 8003046:	230a      	movs	r3, #10
 8003048:	9301      	str	r3, [sp, #4]
 800304a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800304e:	9300      	str	r3, [sp, #0]
 8003050:	4ba3      	ldr	r3, [pc, #652]	@ (80032e0 <SystemGetsSignal+0x5b0>)
 8003052:	4aa4      	ldr	r2, [pc, #656]	@ (80032e4 <SystemGetsSignal+0x5b4>)
 8003054:	49a4      	ldr	r1, [pc, #656]	@ (80032e8 <SystemGetsSignal+0x5b8>)
 8003056:	48a5      	ldr	r0, [pc, #660]	@ (80032ec <SystemGetsSignal+0x5bc>)
 8003058:	f001 fa8e 	bl	8004578 <OLED_DoTweenObject>
                HAL_Delay(100);
 800305c:	2064      	movs	r0, #100	@ 0x64
 800305e:	f001 fedd 	bl	8004e1c <HAL_Delay>
                OLED_DoTweenObject(&Games_AnimationManager, "2048", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 0, 1000, EASE_IN_CIRC);
 8003062:	230a      	movs	r3, #10
 8003064:	9301      	str	r3, [sp, #4]
 8003066:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800306a:	9300      	str	r3, [sp, #0]
 800306c:	4ba0      	ldr	r3, [pc, #640]	@ (80032f0 <SystemGetsSignal+0x5c0>)
 800306e:	4a9d      	ldr	r2, [pc, #628]	@ (80032e4 <SystemGetsSignal+0x5b4>)
 8003070:	49a0      	ldr	r1, [pc, #640]	@ (80032f4 <SystemGetsSignal+0x5c4>)
 8003072:	489e      	ldr	r0, [pc, #632]	@ (80032ec <SystemGetsSignal+0x5bc>)
 8003074:	f001 fa80 	bl	8004578 <OLED_DoTweenObject>
                HAL_Delay(100);
 8003078:	2064      	movs	r0, #100	@ 0x64
 800307a:	f001 fecf 	bl	8004e1c <HAL_Delay>
                OLED_DoTweenObject(&g_AnimationManager, "BackButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1000, EASE_IN_CIRC);
 800307e:	230a      	movs	r3, #10
 8003080:	9301      	str	r3, [sp, #4]
 8003082:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003086:	9300      	str	r3, [sp, #0]
 8003088:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 800308c:	4a95      	ldr	r2, [pc, #596]	@ (80032e4 <SystemGetsSignal+0x5b4>)
 800308e:	499a      	ldr	r1, [pc, #616]	@ (80032f8 <SystemGetsSignal+0x5c8>)
 8003090:	489a      	ldr	r0, [pc, #616]	@ (80032fc <SystemGetsSignal+0x5cc>)
 8003092:	f001 fa71 	bl	8004578 <OLED_DoTweenObject>

                OLED_DoTweenObject(&Menu_AnimationManager, "GamesButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1000, EASE_IN_CIRC);
 8003096:	230a      	movs	r3, #10
 8003098:	9301      	str	r3, [sp, #4]
 800309a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800309e:	9300      	str	r3, [sp, #0]
 80030a0:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 80030a4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80030a8:	4995      	ldr	r1, [pc, #596]	@ (8003300 <SystemGetsSignal+0x5d0>)
 80030aa:	4896      	ldr	r0, [pc, #600]	@ (8003304 <SystemGetsSignal+0x5d4>)
 80030ac:	f001 fa64 	bl	8004578 <OLED_DoTweenObject>
                HAL_Delay(100);
 80030b0:	2064      	movs	r0, #100	@ 0x64
 80030b2:	f001 feb3 	bl	8004e1c <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "ToolsButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1000, EASE_IN_CIRC);
 80030b6:	230a      	movs	r3, #10
 80030b8:	9301      	str	r3, [sp, #4]
 80030ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80030be:	9300      	str	r3, [sp, #0]
 80030c0:	4b91      	ldr	r3, [pc, #580]	@ (8003308 <SystemGetsSignal+0x5d8>)
 80030c2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80030c6:	4991      	ldr	r1, [pc, #580]	@ (800330c <SystemGetsSignal+0x5dc>)
 80030c8:	488e      	ldr	r0, [pc, #568]	@ (8003304 <SystemGetsSignal+0x5d4>)
 80030ca:	f001 fa55 	bl	8004578 <OLED_DoTweenObject>
                HAL_Delay(100);
 80030ce:	2064      	movs	r0, #100	@ 0x64
 80030d0:	f001 fea4 	bl	8004e1c <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "StatusButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, 1000, EASE_IN_CIRC);
 80030d4:	230a      	movs	r3, #10
 80030d6:	9301      	str	r3, [sp, #4]
 80030d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80030dc:	9300      	str	r3, [sp, #0]
 80030de:	4b8c      	ldr	r3, [pc, #560]	@ (8003310 <SystemGetsSignal+0x5e0>)
 80030e0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80030e4:	498b      	ldr	r1, [pc, #556]	@ (8003314 <SystemGetsSignal+0x5e4>)
 80030e6:	4887      	ldr	r0, [pc, #540]	@ (8003304 <SystemGetsSignal+0x5d4>)
 80030e8:	f001 fa46 	bl	8004578 <OLED_DoTweenObject>
                HAL_Delay(100);
 80030ec:	2064      	movs	r0, #100	@ 0x64
 80030ee:	f001 fe95 	bl	8004e1c <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "SettingsButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 4, 1000, EASE_IN_CIRC);
 80030f2:	230a      	movs	r3, #10
 80030f4:	9301      	str	r3, [sp, #4]
 80030f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80030fa:	9300      	str	r3, [sp, #0]
 80030fc:	4b86      	ldr	r3, [pc, #536]	@ (8003318 <SystemGetsSignal+0x5e8>)
 80030fe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003102:	4986      	ldr	r1, [pc, #536]	@ (800331c <SystemGetsSignal+0x5ec>)
 8003104:	487f      	ldr	r0, [pc, #508]	@ (8003304 <SystemGetsSignal+0x5d4>)
 8003106:	f001 fa37 	bl	8004578 <OLED_DoTweenObject>
                HAL_Delay(100);
 800310a:	2064      	movs	r0, #100	@ 0x64
 800310c:	f001 fe86 	bl	8004e1c <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "AboutButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 5, 1000, EASE_IN_CIRC);
 8003110:	230a      	movs	r3, #10
 8003112:	9301      	str	r3, [sp, #4]
 8003114:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003118:	9300      	str	r3, [sp, #0]
 800311a:	4b81      	ldr	r3, [pc, #516]	@ (8003320 <SystemGetsSignal+0x5f0>)
 800311c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003120:	4980      	ldr	r1, [pc, #512]	@ (8003324 <SystemGetsSignal+0x5f4>)
 8003122:	4878      	ldr	r0, [pc, #480]	@ (8003304 <SystemGetsSignal+0x5d4>)
 8003124:	f001 fa28 	bl	8004578 <OLED_DoTweenObject>
 8003128:	e0c6      	b.n	80032b8 <SystemGetsSignal+0x588>
            }
            else if (menuRank == 2 && menuSelection == 1)
 800312a:	4b6a      	ldr	r3, [pc, #424]	@ (80032d4 <SystemGetsSignal+0x5a4>)
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	2b02      	cmp	r3, #2
 8003130:	d158      	bne.n	80031e4 <SystemGetsSignal+0x4b4>
 8003132:	4b69      	ldr	r3, [pc, #420]	@ (80032d8 <SystemGetsSignal+0x5a8>)
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	2b01      	cmp	r3, #1
 8003138:	d154      	bne.n	80031e4 <SystemGetsSignal+0x4b4>
            {
                menuRank = 3;
 800313a:	4b66      	ldr	r3, [pc, #408]	@ (80032d4 <SystemGetsSignal+0x5a4>)
 800313c:	2203      	movs	r2, #3
 800313e:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_GAMES;
 8003140:	4b66      	ldr	r3, [pc, #408]	@ (80032dc <SystemGetsSignal+0x5ac>)
 8003142:	2205      	movs	r2, #5
 8003144:	701a      	strb	r2, [r3, #0]
                Snake_InitGame();
 8003146:	f7fd fbcb 	bl	80008e0 <Snake_InitGame>
                OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSnake", (OLED_WIDTH - strlen("Greedy Snake") * 6), OLED_TITLE_Start_Y, 1, EASE_IN_CUBIC);
 800314a:	2304      	movs	r3, #4
 800314c:	9301      	str	r3, [sp, #4]
 800314e:	2301      	movs	r3, #1
 8003150:	9300      	str	r3, [sp, #0]
 8003152:	4b63      	ldr	r3, [pc, #396]	@ (80032e0 <SystemGetsSignal+0x5b0>)
 8003154:	4a74      	ldr	r2, [pc, #464]	@ (8003328 <SystemGetsSignal+0x5f8>)
 8003156:	4975      	ldr	r1, [pc, #468]	@ (800332c <SystemGetsSignal+0x5fc>)
 8003158:	4875      	ldr	r0, [pc, #468]	@ (8003330 <SystemGetsSignal+0x600>)
 800315a:	f001 fa0d 	bl	8004578 <OLED_DoTweenObject>
                OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", 0, 8, 1000, EASE_IN_CUBIC);
 800315e:	2304      	movs	r3, #4
 8003160:	9301      	str	r3, [sp, #4]
 8003162:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003166:	9300      	str	r3, [sp, #0]
 8003168:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 800316c:	f04f 0200 	mov.w	r2, #0
 8003170:	4970      	ldr	r1, [pc, #448]	@ (8003334 <SystemGetsSignal+0x604>)
 8003172:	4862      	ldr	r0, [pc, #392]	@ (80032fc <SystemGetsSignal+0x5cc>)
 8003174:	f001 fa00 	bl	8004578 <OLED_DoTweenObject>
                OLED_DoTweenObject(&g_AnimationManager, "CursorScale", 0, 8, 1000, EASE_INOUT_CIRC);
 8003178:	230c      	movs	r3, #12
 800317a:	9301      	str	r3, [sp, #4]
 800317c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003180:	9300      	str	r3, [sp, #0]
 8003182:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8003186:	f04f 0200 	mov.w	r2, #0
 800318a:	496b      	ldr	r1, [pc, #428]	@ (8003338 <SystemGetsSignal+0x608>)
 800318c:	485b      	ldr	r0, [pc, #364]	@ (80032fc <SystemGetsSignal+0x5cc>)
 800318e:	f001 f9f3 	bl	8004578 <OLED_DoTweenObject>
                OLED_DoTweenObject(&Games_AnimationManager, "Snake", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1000, EASE_IN_CIRC);
 8003192:	230a      	movs	r3, #10
 8003194:	9301      	str	r3, [sp, #4]
 8003196:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800319a:	9300      	str	r3, [sp, #0]
 800319c:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 80031a0:	4a50      	ldr	r2, [pc, #320]	@ (80032e4 <SystemGetsSignal+0x5b4>)
 80031a2:	4951      	ldr	r1, [pc, #324]	@ (80032e8 <SystemGetsSignal+0x5b8>)
 80031a4:	4851      	ldr	r0, [pc, #324]	@ (80032ec <SystemGetsSignal+0x5bc>)
 80031a6:	f001 f9e7 	bl	8004578 <OLED_DoTweenObject>
                HAL_Delay(100);
 80031aa:	2064      	movs	r0, #100	@ 0x64
 80031ac:	f001 fe36 	bl	8004e1c <HAL_Delay>
                OLED_DoTweenObject(&Games_AnimationManager, "2048", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1000, EASE_IN_CIRC);
 80031b0:	230a      	movs	r3, #10
 80031b2:	9301      	str	r3, [sp, #4]
 80031b4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80031b8:	9300      	str	r3, [sp, #0]
 80031ba:	4b53      	ldr	r3, [pc, #332]	@ (8003308 <SystemGetsSignal+0x5d8>)
 80031bc:	4a49      	ldr	r2, [pc, #292]	@ (80032e4 <SystemGetsSignal+0x5b4>)
 80031be:	494d      	ldr	r1, [pc, #308]	@ (80032f4 <SystemGetsSignal+0x5c4>)
 80031c0:	484a      	ldr	r0, [pc, #296]	@ (80032ec <SystemGetsSignal+0x5bc>)
 80031c2:	f001 f9d9 	bl	8004578 <OLED_DoTweenObject>
                HAL_Delay(100);
 80031c6:	2064      	movs	r0, #100	@ 0x64
 80031c8:	f001 fe28 	bl	8004e1c <HAL_Delay>
                OLED_DoTweenObject(&g_AnimationManager, "BackButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, 1000, EASE_IN_CIRC);
 80031cc:	230a      	movs	r3, #10
 80031ce:	9301      	str	r3, [sp, #4]
 80031d0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80031d4:	9300      	str	r3, [sp, #0]
 80031d6:	4b4e      	ldr	r3, [pc, #312]	@ (8003310 <SystemGetsSignal+0x5e0>)
 80031d8:	4a42      	ldr	r2, [pc, #264]	@ (80032e4 <SystemGetsSignal+0x5b4>)
 80031da:	4947      	ldr	r1, [pc, #284]	@ (80032f8 <SystemGetsSignal+0x5c8>)
 80031dc:	4847      	ldr	r0, [pc, #284]	@ (80032fc <SystemGetsSignal+0x5cc>)
 80031de:	f001 f9cb 	bl	8004578 <OLED_DoTweenObject>
 80031e2:	e069      	b.n	80032b8 <SystemGetsSignal+0x588>
            }
            else if (menuRank == 3 && menuSelection == 1 && cancelSelection && UI_PAGE_GAMES && !gameOver)
 80031e4:	4b3b      	ldr	r3, [pc, #236]	@ (80032d4 <SystemGetsSignal+0x5a4>)
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	2b03      	cmp	r3, #3
 80031ea:	d165      	bne.n	80032b8 <SystemGetsSignal+0x588>
 80031ec:	4b3a      	ldr	r3, [pc, #232]	@ (80032d8 <SystemGetsSignal+0x5a8>)
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d161      	bne.n	80032b8 <SystemGetsSignal+0x588>
 80031f4:	4b51      	ldr	r3, [pc, #324]	@ (800333c <SystemGetsSignal+0x60c>)
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d05d      	beq.n	80032b8 <SystemGetsSignal+0x588>
 80031fc:	4b50      	ldr	r3, [pc, #320]	@ (8003340 <SystemGetsSignal+0x610>)
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	f083 0301 	eor.w	r3, r3, #1
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d056      	beq.n	80032b8 <SystemGetsSignal+0x588>
            {
                menuRank = 2;
 800320a:	4b32      	ldr	r3, [pc, #200]	@ (80032d4 <SystemGetsSignal+0x5a4>)
 800320c:	2202      	movs	r2, #2
 800320e:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_GAMES;
 8003210:	4b32      	ldr	r3, [pc, #200]	@ (80032dc <SystemGetsSignal+0x5ac>)
 8003212:	2205      	movs	r2, #5
 8003214:	701a      	strb	r2, [r3, #0]
                
                OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSnake", (OLED_WIDTH - strlen("Greedy Snake") * 6), OLED_TITLE_End_Y, 1000, EASE_IN_CUBIC);
 8003216:	2304      	movs	r3, #4
 8003218:	9301      	str	r3, [sp, #4]
 800321a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800321e:	9300      	str	r3, [sp, #0]
 8003220:	f04f 0300 	mov.w	r3, #0
 8003224:	4a40      	ldr	r2, [pc, #256]	@ (8003328 <SystemGetsSignal+0x5f8>)
 8003226:	4941      	ldr	r1, [pc, #260]	@ (800332c <SystemGetsSignal+0x5fc>)
 8003228:	4841      	ldr	r0, [pc, #260]	@ (8003330 <SystemGetsSignal+0x600>)
 800322a:	f001 f9a5 	bl	8004578 <OLED_DoTweenObject>
                OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Greedy Snake") * 6 + 3, 8, 1000, EASE_IN_CUBIC);
 800322e:	2304      	movs	r3, #4
 8003230:	9301      	str	r3, [sp, #4]
 8003232:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003236:	9300      	str	r3, [sp, #0]
 8003238:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 800323c:	4a41      	ldr	r2, [pc, #260]	@ (8003344 <SystemGetsSignal+0x614>)
 800323e:	493d      	ldr	r1, [pc, #244]	@ (8003334 <SystemGetsSignal+0x604>)
 8003240:	482e      	ldr	r0, [pc, #184]	@ (80032fc <SystemGetsSignal+0x5cc>)
 8003242:	f001 f999 	bl	8004578 <OLED_DoTweenObject>

                OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Snake") * 6 + 3, 10, 1000, EASE_INOUT_CIRC);
 8003246:	230c      	movs	r3, #12
 8003248:	9301      	str	r3, [sp, #4]
 800324a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800324e:	9300      	str	r3, [sp, #0]
 8003250:	4b3d      	ldr	r3, [pc, #244]	@ (8003348 <SystemGetsSignal+0x618>)
 8003252:	4a3e      	ldr	r2, [pc, #248]	@ (800334c <SystemGetsSignal+0x61c>)
 8003254:	4938      	ldr	r1, [pc, #224]	@ (8003338 <SystemGetsSignal+0x608>)
 8003256:	4829      	ldr	r0, [pc, #164]	@ (80032fc <SystemGetsSignal+0x5cc>)
 8003258:	f001 f98e 	bl	8004578 <OLED_DoTweenObject>
                OLED_DoTweenObject(&Games_AnimationManager, "Snake", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1000, EASE_IN_CIRC);
 800325c:	230a      	movs	r3, #10
 800325e:	9301      	str	r3, [sp, #4]
 8003260:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003264:	9300      	str	r3, [sp, #0]
 8003266:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 800326a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800326e:	491e      	ldr	r1, [pc, #120]	@ (80032e8 <SystemGetsSignal+0x5b8>)
 8003270:	481e      	ldr	r0, [pc, #120]	@ (80032ec <SystemGetsSignal+0x5bc>)
 8003272:	f001 f981 	bl	8004578 <OLED_DoTweenObject>
                HAL_Delay(100);
 8003276:	2064      	movs	r0, #100	@ 0x64
 8003278:	f001 fdd0 	bl	8004e1c <HAL_Delay>
                OLED_DoTweenObject(&Games_AnimationManager, "2048", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1000, EASE_IN_CIRC);
 800327c:	230a      	movs	r3, #10
 800327e:	9301      	str	r3, [sp, #4]
 8003280:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003284:	9300      	str	r3, [sp, #0]
 8003286:	4b20      	ldr	r3, [pc, #128]	@ (8003308 <SystemGetsSignal+0x5d8>)
 8003288:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800328c:	4919      	ldr	r1, [pc, #100]	@ (80032f4 <SystemGetsSignal+0x5c4>)
 800328e:	4817      	ldr	r0, [pc, #92]	@ (80032ec <SystemGetsSignal+0x5bc>)
 8003290:	f001 f972 	bl	8004578 <OLED_DoTweenObject>
                HAL_Delay(100);
 8003294:	2064      	movs	r0, #100	@ 0x64
 8003296:	f001 fdc1 	bl	8004e1c <HAL_Delay>
                OLED_DoTweenObject(&g_AnimationManager, "BackButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, 1000, EASE_IN_CIRC);
 800329a:	230a      	movs	r3, #10
 800329c:	9301      	str	r3, [sp, #4]
 800329e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80032a2:	9300      	str	r3, [sp, #0]
 80032a4:	4b1a      	ldr	r3, [pc, #104]	@ (8003310 <SystemGetsSignal+0x5e0>)
 80032a6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80032aa:	4913      	ldr	r1, [pc, #76]	@ (80032f8 <SystemGetsSignal+0x5c8>)
 80032ac:	4813      	ldr	r0, [pc, #76]	@ (80032fc <SystemGetsSignal+0x5cc>)
 80032ae:	f001 f963 	bl	8004578 <OLED_DoTweenObject>
                cancelSelection = false;
 80032b2:	4b22      	ldr	r3, [pc, #136]	@ (800333c <SystemGetsSignal+0x60c>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	701a      	strb	r2, [r3, #0]
            }

            while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET)
 80032b8:	bf00      	nop
 80032ba:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80032be:	4824      	ldr	r0, [pc, #144]	@ (8003350 <SystemGetsSignal+0x620>)
 80032c0:	f002 f9c2 	bl	8005648 <HAL_GPIO_ReadPin>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d0f7      	beq.n	80032ba <SystemGetsSignal+0x58a>
            {
                // 等待按钮释放
            }
        }
    }
}
 80032ca:	bf00      	nop
 80032cc:	3708      	adds	r7, #8
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	20000002 	.word	0x20000002
 80032d8:	20000003 	.word	0x20000003
 80032dc:	20000b45 	.word	0x20000b45
 80032e0:	c1200000 	.word	0xc1200000
 80032e4:	c2b40000 	.word	0xc2b40000
 80032e8:	08009f9c 	.word	0x08009f9c
 80032ec:	2000154c 	.word	0x2000154c
 80032f0:	40400000 	.word	0x40400000
 80032f4:	08009fa4 	.word	0x08009fa4
 80032f8:	08009fac 	.word	0x08009fac
 80032fc:	20003904 	.word	0x20003904
 8003300:	08009fdc 	.word	0x08009fdc
 8003304:	20000f58 	.word	0x20000f58
 8003308:	41e80000 	.word	0x41e80000
 800330c:	08009fe8 	.word	0x08009fe8
 8003310:	42280000 	.word	0x42280000
 8003314:	08009ff4 	.word	0x08009ff4
 8003318:	425c0000 	.word	0x425c0000
 800331c:	0800a004 	.word	0x0800a004
 8003320:	42880000 	.word	0x42880000
 8003324:	0800a014 	.word	0x0800a014
 8003328:	42600000 	.word	0x42600000
 800332c:	08009f78 	.word	0x08009f78
 8003330:	20003310 	.word	0x20003310
 8003334:	08009fb8 	.word	0x08009fb8
 8003338:	08009fd0 	.word	0x08009fd0
 800333c:	20000b47 	.word	0x20000b47
 8003340:	2000023a 	.word	0x2000023a
 8003344:	42960000 	.word	0x42960000
 8003348:	41200000 	.word	0x41200000
 800334c:	42040000 	.word	0x42040000
 8003350:	40010c00 	.word	0x40010c00

08003354 <OLED_EnableDiffMode>:
    }
}

// 启用差分更新模式
void OLED_EnableDiffMode(uint8_t enable)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	4603      	mov	r3, r0
 800335c:	71fb      	strb	r3, [r7, #7]
    diff_mode_enabled = enable;
 800335e:	4a09      	ldr	r2, [pc, #36]	@ (8003384 <OLED_EnableDiffMode+0x30>)
 8003360:	79fb      	ldrb	r3, [r7, #7]
 8003362:	7013      	strb	r3, [r2, #0]
    if (enable)
 8003364:	79fb      	ldrb	r3, [r7, #7]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d008      	beq.n	800337c <OLED_EnableDiffMode+0x28>
    {
        memcpy(OLED_PrevBuffer, OLED_BackBuffer, OLED_WIDTH * OLED_PAGES);
 800336a:	4a07      	ldr	r2, [pc, #28]	@ (8003388 <OLED_EnableDiffMode+0x34>)
 800336c:	4b07      	ldr	r3, [pc, #28]	@ (800338c <OLED_EnableDiffMode+0x38>)
 800336e:	4610      	mov	r0, r2
 8003370:	4619      	mov	r1, r3
 8003372:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003376:	461a      	mov	r2, r3
 8003378:	f004 fb85 	bl	8007a86 <memcpy>
    }
}
 800337c:	bf00      	nop
 800337e:	3708      	adds	r7, #8
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	20000f48 	.word	0x20000f48
 8003388:	20000b48 	.word	0x20000b48
 800338c:	20000344 	.word	0x20000344

08003390 <OLED_EnableFastUpdate>:

// 设置快速更新模式
void OLED_EnableFastUpdate(uint8_t enable)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	4603      	mov	r3, r0
 8003398:	71fb      	strb	r3, [r7, #7]
    fast_update_enabled = enable;
 800339a:	4a04      	ldr	r2, [pc, #16]	@ (80033ac <OLED_EnableFastUpdate+0x1c>)
 800339c:	79fb      	ldrb	r3, [r7, #7]
 800339e:	7013      	strb	r3, [r2, #0]
}
 80033a0:	bf00      	nop
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bc80      	pop	{r7}
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	20000008 	.word	0x20000008

080033b0 <OLED_SmartUpdate>:

// 智能更新显示
// 选择性更新脏页，以提高帧率
void OLED_SmartUpdate(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
    // 如果OLED/DMA忙，直接返回
    if (OLED_IsBusy())
 80033b6:	f7fd ff75 	bl	80012a4 <OLED_IsBusy>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	f040 8082 	bne.w	80034c6 <OLED_SmartUpdate+0x116>
    {
        return;
    }

    // 检查是否有脏页需要更新
    uint8_t has_dirty = 0;
 80033c2:	2300      	movs	r3, #0
 80033c4:	73fb      	strb	r3, [r7, #15]
    uint8_t first_dirty = 255;
 80033c6:	23ff      	movs	r3, #255	@ 0xff
 80033c8:	73bb      	strb	r3, [r7, #14]
    uint8_t last_dirty = 0;
 80033ca:	2300      	movs	r3, #0
 80033cc:	737b      	strb	r3, [r7, #13]

    // 如果启用了差分更新，检查哪些页已经变化
    if (diff_mode_enabled)
 80033ce:	4b40      	ldr	r3, [pc, #256]	@ (80034d0 <OLED_SmartUpdate+0x120>)
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d046      	beq.n	8003464 <OLED_SmartUpdate+0xb4>
    {
        for (uint8_t page = 0; page < OLED_PAGES; page++)
 80033d6:	2300      	movs	r3, #0
 80033d8:	733b      	strb	r3, [r7, #12]
 80033da:	e03f      	b.n	800345c <OLED_SmartUpdate+0xac>
        {
            // 检查此页中是否有任何字节发生变化
            uint8_t page_changed = 0;
 80033dc:	2300      	movs	r3, #0
 80033de:	72fb      	strb	r3, [r7, #11]
            uint16_t start_idx = page * OLED_WIDTH;
 80033e0:	7b3b      	ldrb	r3, [r7, #12]
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	01db      	lsls	r3, r3, #7
 80033e6:	80bb      	strh	r3, [r7, #4]

            for (uint16_t i = 0; i < OLED_WIDTH; i++)
 80033e8:	2300      	movs	r3, #0
 80033ea:	813b      	strh	r3, [r7, #8]
 80033ec:	e015      	b.n	800341a <OLED_SmartUpdate+0x6a>
            {
                if (OLED_BackBuffer[start_idx + i] != OLED_PrevBuffer[start_idx + i])
 80033ee:	88ba      	ldrh	r2, [r7, #4]
 80033f0:	893b      	ldrh	r3, [r7, #8]
 80033f2:	4413      	add	r3, r2
 80033f4:	4a37      	ldr	r2, [pc, #220]	@ (80034d4 <OLED_SmartUpdate+0x124>)
 80033f6:	5cd2      	ldrb	r2, [r2, r3]
 80033f8:	88b9      	ldrh	r1, [r7, #4]
 80033fa:	893b      	ldrh	r3, [r7, #8]
 80033fc:	440b      	add	r3, r1
 80033fe:	4936      	ldr	r1, [pc, #216]	@ (80034d8 <OLED_SmartUpdate+0x128>)
 8003400:	5ccb      	ldrb	r3, [r1, r3]
 8003402:	429a      	cmp	r2, r3
 8003404:	d006      	beq.n	8003414 <OLED_SmartUpdate+0x64>
                {
                    page_changed = 1;
 8003406:	2301      	movs	r3, #1
 8003408:	72fb      	strb	r3, [r7, #11]
                    oled_dirty_pages[page] = 1;
 800340a:	7b3b      	ldrb	r3, [r7, #12]
 800340c:	4a33      	ldr	r2, [pc, #204]	@ (80034dc <OLED_SmartUpdate+0x12c>)
 800340e:	2101      	movs	r1, #1
 8003410:	54d1      	strb	r1, [r2, r3]
                    break;
 8003412:	e005      	b.n	8003420 <OLED_SmartUpdate+0x70>
            for (uint16_t i = 0; i < OLED_WIDTH; i++)
 8003414:	893b      	ldrh	r3, [r7, #8]
 8003416:	3301      	adds	r3, #1
 8003418:	813b      	strh	r3, [r7, #8]
 800341a:	893b      	ldrh	r3, [r7, #8]
 800341c:	2b7f      	cmp	r3, #127	@ 0x7f
 800341e:	d9e6      	bls.n	80033ee <OLED_SmartUpdate+0x3e>
                }
            }

            if (page_changed)
 8003420:	7afb      	ldrb	r3, [r7, #11]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d017      	beq.n	8003456 <OLED_SmartUpdate+0xa6>
            {
                has_dirty = 1;
 8003426:	2301      	movs	r3, #1
 8003428:	73fb      	strb	r3, [r7, #15]
                if (page < first_dirty)
 800342a:	7b3a      	ldrb	r2, [r7, #12]
 800342c:	7bbb      	ldrb	r3, [r7, #14]
 800342e:	429a      	cmp	r2, r3
 8003430:	d201      	bcs.n	8003436 <OLED_SmartUpdate+0x86>
                    first_dirty = page;
 8003432:	7b3b      	ldrb	r3, [r7, #12]
 8003434:	73bb      	strb	r3, [r7, #14]
                if (page > last_dirty)
 8003436:	7b3a      	ldrb	r2, [r7, #12]
 8003438:	7b7b      	ldrb	r3, [r7, #13]
 800343a:	429a      	cmp	r2, r3
 800343c:	d901      	bls.n	8003442 <OLED_SmartUpdate+0x92>
                    last_dirty = page;
 800343e:	7b3b      	ldrb	r3, [r7, #12]
 8003440:	737b      	strb	r3, [r7, #13]

                // 更新上一帧缓存
                memcpy(
 8003442:	88bb      	ldrh	r3, [r7, #4]
 8003444:	4a24      	ldr	r2, [pc, #144]	@ (80034d8 <OLED_SmartUpdate+0x128>)
 8003446:	1898      	adds	r0, r3, r2
 8003448:	88bb      	ldrh	r3, [r7, #4]
 800344a:	4a22      	ldr	r2, [pc, #136]	@ (80034d4 <OLED_SmartUpdate+0x124>)
 800344c:	4413      	add	r3, r2
 800344e:	2280      	movs	r2, #128	@ 0x80
 8003450:	4619      	mov	r1, r3
 8003452:	f004 fb18 	bl	8007a86 <memcpy>
        for (uint8_t page = 0; page < OLED_PAGES; page++)
 8003456:	7b3b      	ldrb	r3, [r7, #12]
 8003458:	3301      	adds	r3, #1
 800345a:	733b      	strb	r3, [r7, #12]
 800345c:	7b3b      	ldrb	r3, [r7, #12]
 800345e:	2b07      	cmp	r3, #7
 8003460:	d9bc      	bls.n	80033dc <OLED_SmartUpdate+0x2c>
 8003462:	e01c      	b.n	800349e <OLED_SmartUpdate+0xee>
        }
    }
    else
    {
        // 如果未启用差分更新，使用脏页标记
        for (uint8_t i = 0; i < OLED_PAGES; i++)
 8003464:	2300      	movs	r3, #0
 8003466:	71fb      	strb	r3, [r7, #7]
 8003468:	e016      	b.n	8003498 <OLED_SmartUpdate+0xe8>
        {
            if (oled_dirty_pages[i])
 800346a:	79fb      	ldrb	r3, [r7, #7]
 800346c:	4a1b      	ldr	r2, [pc, #108]	@ (80034dc <OLED_SmartUpdate+0x12c>)
 800346e:	5cd3      	ldrb	r3, [r2, r3]
 8003470:	b2db      	uxtb	r3, r3
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00d      	beq.n	8003492 <OLED_SmartUpdate+0xe2>
            {
                has_dirty = 1;
 8003476:	2301      	movs	r3, #1
 8003478:	73fb      	strb	r3, [r7, #15]
                if (i < first_dirty)
 800347a:	79fa      	ldrb	r2, [r7, #7]
 800347c:	7bbb      	ldrb	r3, [r7, #14]
 800347e:	429a      	cmp	r2, r3
 8003480:	d201      	bcs.n	8003486 <OLED_SmartUpdate+0xd6>
                    first_dirty = i;
 8003482:	79fb      	ldrb	r3, [r7, #7]
 8003484:	73bb      	strb	r3, [r7, #14]
                if (i > last_dirty)
 8003486:	79fa      	ldrb	r2, [r7, #7]
 8003488:	7b7b      	ldrb	r3, [r7, #13]
 800348a:	429a      	cmp	r2, r3
 800348c:	d901      	bls.n	8003492 <OLED_SmartUpdate+0xe2>
                    last_dirty = i;
 800348e:	79fb      	ldrb	r3, [r7, #7]
 8003490:	737b      	strb	r3, [r7, #13]
        for (uint8_t i = 0; i < OLED_PAGES; i++)
 8003492:	79fb      	ldrb	r3, [r7, #7]
 8003494:	3301      	adds	r3, #1
 8003496:	71fb      	strb	r3, [r7, #7]
 8003498:	79fb      	ldrb	r3, [r7, #7]
 800349a:	2b07      	cmp	r3, #7
 800349c:	d9e5      	bls.n	800346a <OLED_SmartUpdate+0xba>
            }
        }
    }

    // 如果有脏页，只更新这些页
    if (has_dirty && fast_update_enabled)
 800349e:	7bfb      	ldrb	r3, [r7, #15]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00a      	beq.n	80034ba <OLED_SmartUpdate+0x10a>
 80034a4:	4b0e      	ldr	r3, [pc, #56]	@ (80034e0 <OLED_SmartUpdate+0x130>)
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d006      	beq.n	80034ba <OLED_SmartUpdate+0x10a>
    {
        OLED_UpdateDisplayPartial(first_dirty, last_dirty);
 80034ac:	7b7a      	ldrb	r2, [r7, #13]
 80034ae:	7bbb      	ldrb	r3, [r7, #14]
 80034b0:	4611      	mov	r1, r2
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7fd ff76 	bl	80013a4 <OLED_UpdateDisplayPartial>
 80034b8:	e006      	b.n	80034c8 <OLED_SmartUpdate+0x118>
    }
    else if (has_dirty)
 80034ba:	7bfb      	ldrb	r3, [r7, #15]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d003      	beq.n	80034c8 <OLED_SmartUpdate+0x118>
    {
        OLED_UpdateDisplayVSync();
 80034c0:	f7fd ff18 	bl	80012f4 <OLED_UpdateDisplayVSync>
 80034c4:	e000      	b.n	80034c8 <OLED_SmartUpdate+0x118>
        return;
 80034c6:	bf00      	nop
    }
}
 80034c8:	3710      	adds	r7, #16
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	20000f48 	.word	0x20000f48
 80034d4:	20000344 	.word	0x20000344
 80034d8:	20000b48 	.word	0x20000b48
 80034dc:	2000033c 	.word	0x2000033c
 80034e0:	20000008 	.word	0x20000008

080034e4 <OLED_OptimizedDisplayFPS>:


// 显示FPS
void OLED_OptimizedDisplayFPS(int16_t x, int16_t y)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	4603      	mov	r3, r0
 80034ec:	460a      	mov	r2, r1
 80034ee:	80fb      	strh	r3, [r7, #6]
 80034f0:	4613      	mov	r3, r2
 80034f2:	80bb      	strh	r3, [r7, #4]
    static uint32_t last_time = 0;
    static uint32_t frames = 0;
    static uint32_t fps = 0;
    static char fps_str[16] = "FPS:0";

    frames++;
 80034f4:	4b15      	ldr	r3, [pc, #84]	@ (800354c <OLED_OptimizedDisplayFPS+0x68>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	3301      	adds	r3, #1
 80034fa:	4a14      	ldr	r2, [pc, #80]	@ (800354c <OLED_OptimizedDisplayFPS+0x68>)
 80034fc:	6013      	str	r3, [r2, #0]

    // 每秒更新一次FPS
    uint32_t current_time = HAL_GetTick();
 80034fe:	f001 fc83 	bl	8004e08 <HAL_GetTick>
 8003502:	60f8      	str	r0, [r7, #12]
    if (current_time - last_time >= 1000)
 8003504:	4b12      	ldr	r3, [pc, #72]	@ (8003550 <OLED_OptimizedDisplayFPS+0x6c>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68fa      	ldr	r2, [r7, #12]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003510:	d310      	bcc.n	8003534 <OLED_OptimizedDisplayFPS+0x50>
    {
        fps = frames;
 8003512:	4b0e      	ldr	r3, [pc, #56]	@ (800354c <OLED_OptimizedDisplayFPS+0x68>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a0f      	ldr	r2, [pc, #60]	@ (8003554 <OLED_OptimizedDisplayFPS+0x70>)
 8003518:	6013      	str	r3, [r2, #0]
        sprintf(fps_str, "FPS:%d", fps);
 800351a:	4b0e      	ldr	r3, [pc, #56]	@ (8003554 <OLED_OptimizedDisplayFPS+0x70>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	461a      	mov	r2, r3
 8003520:	490d      	ldr	r1, [pc, #52]	@ (8003558 <OLED_OptimizedDisplayFPS+0x74>)
 8003522:	480e      	ldr	r0, [pc, #56]	@ (800355c <OLED_OptimizedDisplayFPS+0x78>)
 8003524:	f004 f9bc 	bl	80078a0 <siprintf>
        frames = 0;
 8003528:	4b08      	ldr	r3, [pc, #32]	@ (800354c <OLED_OptimizedDisplayFPS+0x68>)
 800352a:	2200      	movs	r2, #0
 800352c:	601a      	str	r2, [r3, #0]
        last_time = current_time;
 800352e:	4a08      	ldr	r2, [pc, #32]	@ (8003550 <OLED_OptimizedDisplayFPS+0x6c>)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6013      	str	r3, [r2, #0]
    }

    OLED_DisplayString(x, y, fps_str);
 8003534:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003538:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800353c:	4a07      	ldr	r2, [pc, #28]	@ (800355c <OLED_OptimizedDisplayFPS+0x78>)
 800353e:	4618      	mov	r0, r3
 8003540:	f7fe fac8 	bl	8001ad4 <OLED_DisplayString>
 8003544:	bf00      	nop
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	20000f4c 	.word	0x20000f4c
 8003550:	20000f50 	.word	0x20000f50
 8003554:	20000f54 	.word	0x20000f54
 8003558:	0800a0e0 	.word	0x0800a0e0
 800355c:	2000000c 	.word	0x2000000c

08003560 <EaseLinear>:
#include "stdint.h" // 添加 stdint.h 以支持标准整数类型
#include "oled_ui.h"
#pragma region TWEENS // 动画缓动函数全部在这里定义

static float EaseLinear(float t)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
    return t;
 8003568:	687b      	ldr	r3, [r7, #4]
}
 800356a:	4618      	mov	r0, r3
 800356c:	370c      	adds	r7, #12
 800356e:	46bd      	mov	sp, r7
 8003570:	bc80      	pop	{r7}
 8003572:	4770      	bx	lr

08003574 <EaseInQuad>:

static float EaseInQuad(float t)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
    return t * t;
 800357c:	6879      	ldr	r1, [r7, #4]
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f7fc ff04 	bl	800038c <__aeabi_fmul>
 8003584:	4603      	mov	r3, r0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3708      	adds	r7, #8
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}

0800358e <EaseOutQuad>:

static float EaseOutQuad(float t)
{
 800358e:	b580      	push	{r7, lr}
 8003590:	b082      	sub	sp, #8
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
    return t * (2 - t);
 8003596:	6879      	ldr	r1, [r7, #4]
 8003598:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800359c:	f7fc fdec 	bl	8000178 <__aeabi_fsub>
 80035a0:	4603      	mov	r3, r0
 80035a2:	6879      	ldr	r1, [r7, #4]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7fc fef1 	bl	800038c <__aeabi_fmul>
 80035aa:	4603      	mov	r3, r0
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3708      	adds	r7, #8
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <EaseInOutQuad>:

static float EaseInOutQuad(float t)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
    return t < 0.5f ? 2 * t * t : -1 + (4 - 2 * t) * t;
 80035bc:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f7fd f881 	bl	80006c8 <__aeabi_fcmplt>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00b      	beq.n	80035e4 <EaseInOutQuad+0x30>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4619      	mov	r1, r3
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7fc fdd3 	bl	800017c <__addsf3>
 80035d6:	4603      	mov	r3, r0
 80035d8:	6879      	ldr	r1, [r7, #4]
 80035da:	4618      	mov	r0, r3
 80035dc:	f7fc fed6 	bl	800038c <__aeabi_fmul>
 80035e0:	4603      	mov	r3, r0
 80035e2:	e016      	b.n	8003612 <EaseInOutQuad+0x5e>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4619      	mov	r1, r3
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7fc fdc7 	bl	800017c <__addsf3>
 80035ee:	4603      	mov	r3, r0
 80035f0:	4619      	mov	r1, r3
 80035f2:	f04f 4081 	mov.w	r0, #1082130432	@ 0x40800000
 80035f6:	f7fc fdbf 	bl	8000178 <__aeabi_fsub>
 80035fa:	4603      	mov	r3, r0
 80035fc:	6879      	ldr	r1, [r7, #4]
 80035fe:	4618      	mov	r0, r3
 8003600:	f7fc fec4 	bl	800038c <__aeabi_fmul>
 8003604:	4603      	mov	r3, r0
 8003606:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800360a:	4618      	mov	r0, r3
 800360c:	f7fc fdb4 	bl	8000178 <__aeabi_fsub>
 8003610:	4603      	mov	r3, r0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3708      	adds	r7, #8
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <EaseInCubic>:

static float EaseInCubic(float t)
{
 800361a:	b580      	push	{r7, lr}
 800361c:	b082      	sub	sp, #8
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
    return t * t * t;
 8003622:	6879      	ldr	r1, [r7, #4]
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f7fc feb1 	bl	800038c <__aeabi_fmul>
 800362a:	4603      	mov	r3, r0
 800362c:	6879      	ldr	r1, [r7, #4]
 800362e:	4618      	mov	r0, r3
 8003630:	f7fc feac 	bl	800038c <__aeabi_fmul>
 8003634:	4603      	mov	r3, r0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3708      	adds	r7, #8
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <EaseOutCubic>:

static float EaseOutCubic(float t)
{
 800363e:	b580      	push	{r7, lr}
 8003640:	b084      	sub	sp, #16
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
    float t1 = t - 1;
 8003646:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f7fc fd94 	bl	8000178 <__aeabi_fsub>
 8003650:	4603      	mov	r3, r0
 8003652:	60fb      	str	r3, [r7, #12]
    return t1 * t1 * t1 + 1;
 8003654:	68f9      	ldr	r1, [r7, #12]
 8003656:	68f8      	ldr	r0, [r7, #12]
 8003658:	f7fc fe98 	bl	800038c <__aeabi_fmul>
 800365c:	4603      	mov	r3, r0
 800365e:	68f9      	ldr	r1, [r7, #12]
 8003660:	4618      	mov	r0, r3
 8003662:	f7fc fe93 	bl	800038c <__aeabi_fmul>
 8003666:	4603      	mov	r3, r0
 8003668:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800366c:	4618      	mov	r0, r3
 800366e:	f7fc fd85 	bl	800017c <__addsf3>
 8003672:	4603      	mov	r3, r0
}
 8003674:	4618      	mov	r0, r3
 8003676:	3710      	adds	r7, #16
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <EaseInOutCubic>:

static float EaseInOutCubic(float t)
{
 800367c:	b590      	push	{r4, r7, lr}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
    return t < 0.5f ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;
 8003684:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f7fd f81d 	bl	80006c8 <__aeabi_fcmplt>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d010      	beq.n	80036b6 <EaseInOutCubic+0x3a>
 8003694:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f7fc fe77 	bl	800038c <__aeabi_fmul>
 800369e:	4603      	mov	r3, r0
 80036a0:	6879      	ldr	r1, [r7, #4]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7fc fe72 	bl	800038c <__aeabi_fmul>
 80036a8:	4603      	mov	r3, r0
 80036aa:	6879      	ldr	r1, [r7, #4]
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7fc fe6d 	bl	800038c <__aeabi_fmul>
 80036b2:	4603      	mov	r3, r0
 80036b4:	e02f      	b.n	8003716 <EaseInOutCubic+0x9a>
 80036b6:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f7fc fd5c 	bl	8000178 <__aeabi_fsub>
 80036c0:	4603      	mov	r3, r0
 80036c2:	461c      	mov	r4, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4619      	mov	r1, r3
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7fc fd57 	bl	800017c <__addsf3>
 80036ce:	4603      	mov	r3, r0
 80036d0:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7fc fd4f 	bl	8000178 <__aeabi_fsub>
 80036da:	4603      	mov	r3, r0
 80036dc:	4619      	mov	r1, r3
 80036de:	4620      	mov	r0, r4
 80036e0:	f7fc fe54 	bl	800038c <__aeabi_fmul>
 80036e4:	4603      	mov	r3, r0
 80036e6:	461c      	mov	r4, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	4619      	mov	r1, r3
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7fc fd45 	bl	800017c <__addsf3>
 80036f2:	4603      	mov	r3, r0
 80036f4:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80036f8:	4618      	mov	r0, r3
 80036fa:	f7fc fd3d 	bl	8000178 <__aeabi_fsub>
 80036fe:	4603      	mov	r3, r0
 8003700:	4619      	mov	r1, r3
 8003702:	4620      	mov	r0, r4
 8003704:	f7fc fe42 	bl	800038c <__aeabi_fmul>
 8003708:	4603      	mov	r3, r0
 800370a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800370e:	4618      	mov	r0, r3
 8003710:	f7fc fd34 	bl	800017c <__addsf3>
 8003714:	4603      	mov	r3, r0
}
 8003716:	4618      	mov	r0, r3
 8003718:	370c      	adds	r7, #12
 800371a:	46bd      	mov	sp, r7
 800371c:	bd90      	pop	{r4, r7, pc}
	...

08003720 <EaseInExpo>:

// 在现有EaseType_t枚举中添加这些新类型
// 指数缓动
static float EaseInExpo(float t)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
    return (t == 0) ? 0 : powf(2, 10 * (t - 1));
 8003728:	f04f 0100 	mov.w	r1, #0
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f7fc ffc1 	bl	80006b4 <__aeabi_fcmpeq>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d111      	bne.n	800375c <EaseInExpo+0x3c>
 8003738:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f7fc fd1b 	bl	8000178 <__aeabi_fsub>
 8003742:	4603      	mov	r3, r0
 8003744:	4908      	ldr	r1, [pc, #32]	@ (8003768 <EaseInExpo+0x48>)
 8003746:	4618      	mov	r0, r3
 8003748:	f7fc fe20 	bl	800038c <__aeabi_fmul>
 800374c:	4603      	mov	r3, r0
 800374e:	4619      	mov	r1, r3
 8003750:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8003754:	f005 f974 	bl	8008a40 <powf>
 8003758:	4603      	mov	r3, r0
 800375a:	e001      	b.n	8003760 <EaseInExpo+0x40>
 800375c:	f04f 0300 	mov.w	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	3708      	adds	r7, #8
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	41200000 	.word	0x41200000

0800376c <EaseOutExpo>:

static float EaseOutExpo(float t)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
    return (t == 1) ? 1 : (1 - powf(2, -10 * t));
 8003774:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f7fc ff9b 	bl	80006b4 <__aeabi_fcmpeq>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d111      	bne.n	80037a8 <EaseOutExpo+0x3c>
 8003784:	490b      	ldr	r1, [pc, #44]	@ (80037b4 <EaseOutExpo+0x48>)
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f7fc fe00 	bl	800038c <__aeabi_fmul>
 800378c:	4603      	mov	r3, r0
 800378e:	4619      	mov	r1, r3
 8003790:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8003794:	f005 f954 	bl	8008a40 <powf>
 8003798:	4603      	mov	r3, r0
 800379a:	4619      	mov	r1, r3
 800379c:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80037a0:	f7fc fcea 	bl	8000178 <__aeabi_fsub>
 80037a4:	4603      	mov	r3, r0
 80037a6:	e001      	b.n	80037ac <EaseOutExpo+0x40>
 80037a8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3708      	adds	r7, #8
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	c1200000 	.word	0xc1200000

080037b8 <EaseInOutExpo>:

static float EaseInOutExpo(float t)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
    if (t == 0)
 80037c0:	f04f 0100 	mov.w	r1, #0
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f7fc ff75 	bl	80006b4 <__aeabi_fcmpeq>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d002      	beq.n	80037d6 <EaseInOutExpo+0x1e>
        return 0;
 80037d0:	f04f 0300 	mov.w	r3, #0
 80037d4:	e045      	b.n	8003862 <EaseInOutExpo+0xaa>
    if (t == 1)
 80037d6:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f7fc ff6a 	bl	80006b4 <__aeabi_fcmpeq>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d002      	beq.n	80037ec <EaseInOutExpo+0x34>
        return 1;
 80037e6:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80037ea:	e03a      	b.n	8003862 <EaseInOutExpo+0xaa>
    if (t < 0.5f)
 80037ec:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f7fc ff69 	bl	80006c8 <__aeabi_fcmplt>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d016      	beq.n	800382a <EaseInOutExpo+0x72>
        return powf(2, 20 * t - 10) / 2;
 80037fc:	491b      	ldr	r1, [pc, #108]	@ (800386c <EaseInOutExpo+0xb4>)
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f7fc fdc4 	bl	800038c <__aeabi_fmul>
 8003804:	4603      	mov	r3, r0
 8003806:	491a      	ldr	r1, [pc, #104]	@ (8003870 <EaseInOutExpo+0xb8>)
 8003808:	4618      	mov	r0, r3
 800380a:	f7fc fcb5 	bl	8000178 <__aeabi_fsub>
 800380e:	4603      	mov	r3, r0
 8003810:	4619      	mov	r1, r3
 8003812:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8003816:	f005 f913 	bl	8008a40 <powf>
 800381a:	4603      	mov	r3, r0
 800381c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8003820:	4618      	mov	r0, r3
 8003822:	f7fc fe67 	bl	80004f4 <__aeabi_fdiv>
 8003826:	4603      	mov	r3, r0
 8003828:	e01b      	b.n	8003862 <EaseInOutExpo+0xaa>
    return (2 - powf(2, -20 * t + 10)) / 2;
 800382a:	4912      	ldr	r1, [pc, #72]	@ (8003874 <EaseInOutExpo+0xbc>)
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f7fc fdad 	bl	800038c <__aeabi_fmul>
 8003832:	4603      	mov	r3, r0
 8003834:	490e      	ldr	r1, [pc, #56]	@ (8003870 <EaseInOutExpo+0xb8>)
 8003836:	4618      	mov	r0, r3
 8003838:	f7fc fca0 	bl	800017c <__addsf3>
 800383c:	4603      	mov	r3, r0
 800383e:	4619      	mov	r1, r3
 8003840:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8003844:	f005 f8fc 	bl	8008a40 <powf>
 8003848:	4603      	mov	r3, r0
 800384a:	4619      	mov	r1, r3
 800384c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8003850:	f7fc fc92 	bl	8000178 <__aeabi_fsub>
 8003854:	4603      	mov	r3, r0
 8003856:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800385a:	4618      	mov	r0, r3
 800385c:	f7fc fe4a 	bl	80004f4 <__aeabi_fdiv>
 8003860:	4603      	mov	r3, r0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3708      	adds	r7, #8
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	41a00000 	.word	0x41a00000
 8003870:	41200000 	.word	0x41200000
 8003874:	c1a00000 	.word	0xc1a00000

08003878 <EaseInCirc>:

// 圆形曲线缓动
static float EaseInCirc(float t)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
    return 1 - sqrtf(1 - t * t);
 8003880:	6879      	ldr	r1, [r7, #4]
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f7fc fd82 	bl	800038c <__aeabi_fmul>
 8003888:	4603      	mov	r3, r0
 800388a:	4619      	mov	r1, r3
 800388c:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8003890:	f7fc fc72 	bl	8000178 <__aeabi_fsub>
 8003894:	4603      	mov	r3, r0
 8003896:	4618      	mov	r0, r3
 8003898:	f005 f91f 	bl	8008ada <sqrtf>
 800389c:	4603      	mov	r3, r0
 800389e:	4619      	mov	r1, r3
 80038a0:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80038a4:	f7fc fc68 	bl	8000178 <__aeabi_fsub>
 80038a8:	4603      	mov	r3, r0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3708      	adds	r7, #8
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}

080038b2 <EaseOutCirc>:

static float EaseOutCirc(float t)
{
 80038b2:	b580      	push	{r7, lr}
 80038b4:	b082      	sub	sp, #8
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
    return sqrtf(1 - powf(t - 1, 2));
 80038ba:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f7fc fc5a 	bl	8000178 <__aeabi_fsub>
 80038c4:	4603      	mov	r3, r0
 80038c6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80038ca:	4618      	mov	r0, r3
 80038cc:	f005 f8b8 	bl	8008a40 <powf>
 80038d0:	4603      	mov	r3, r0
 80038d2:	4619      	mov	r1, r3
 80038d4:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80038d8:	f7fc fc4e 	bl	8000178 <__aeabi_fsub>
 80038dc:	4603      	mov	r3, r0
 80038de:	4618      	mov	r0, r3
 80038e0:	f005 f8fb 	bl	8008ada <sqrtf>
 80038e4:	4603      	mov	r3, r0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3708      	adds	r7, #8
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}

080038ee <EaseInOutCirc>:

static float EaseInOutCirc(float t)
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b082      	sub	sp, #8
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
    if (t < 0.5f)
 80038f6:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f7fc fee4 	bl	80006c8 <__aeabi_fcmplt>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d022      	beq.n	800394c <EaseInOutCirc+0x5e>
        return (1 - sqrtf(1 - powf(2 * t, 2))) / 2;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4619      	mov	r1, r3
 800390a:	4618      	mov	r0, r3
 800390c:	f7fc fc36 	bl	800017c <__addsf3>
 8003910:	4603      	mov	r3, r0
 8003912:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8003916:	4618      	mov	r0, r3
 8003918:	f005 f892 	bl	8008a40 <powf>
 800391c:	4603      	mov	r3, r0
 800391e:	4619      	mov	r1, r3
 8003920:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8003924:	f7fc fc28 	bl	8000178 <__aeabi_fsub>
 8003928:	4603      	mov	r3, r0
 800392a:	4618      	mov	r0, r3
 800392c:	f005 f8d5 	bl	8008ada <sqrtf>
 8003930:	4603      	mov	r3, r0
 8003932:	4619      	mov	r1, r3
 8003934:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8003938:	f7fc fc1e 	bl	8000178 <__aeabi_fsub>
 800393c:	4603      	mov	r3, r0
 800393e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8003942:	4618      	mov	r0, r3
 8003944:	f7fc fdd6 	bl	80004f4 <__aeabi_fdiv>
 8003948:	4603      	mov	r3, r0
 800394a:	e027      	b.n	800399c <EaseInOutCirc+0xae>
    return (sqrtf(1 - powf(-2 * t + 2, 2)) + 1) / 2;
 800394c:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f7fc fd1b 	bl	800038c <__aeabi_fmul>
 8003956:	4603      	mov	r3, r0
 8003958:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800395c:	4618      	mov	r0, r3
 800395e:	f7fc fc0d 	bl	800017c <__addsf3>
 8003962:	4603      	mov	r3, r0
 8003964:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8003968:	4618      	mov	r0, r3
 800396a:	f005 f869 	bl	8008a40 <powf>
 800396e:	4603      	mov	r3, r0
 8003970:	4619      	mov	r1, r3
 8003972:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8003976:	f7fc fbff 	bl	8000178 <__aeabi_fsub>
 800397a:	4603      	mov	r3, r0
 800397c:	4618      	mov	r0, r3
 800397e:	f005 f8ac 	bl	8008ada <sqrtf>
 8003982:	4603      	mov	r3, r0
 8003984:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003988:	4618      	mov	r0, r3
 800398a:	f7fc fbf7 	bl	800017c <__addsf3>
 800398e:	4603      	mov	r3, r0
 8003990:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8003994:	4618      	mov	r0, r3
 8003996:	f7fc fdad 	bl	80004f4 <__aeabi_fdiv>
 800399a:	4603      	mov	r3, r0
}
 800399c:	4618      	mov	r0, r3
 800399e:	3708      	adds	r7, #8
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <EaseInElastic>:

// 弹性缓动
static float EaseInElastic(float t)
{
 80039a4:	b590      	push	{r4, r7, lr}
 80039a6:	b085      	sub	sp, #20
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
    const float c4 = (2 * 3.14159f) / 3;
 80039ac:	4b22      	ldr	r3, [pc, #136]	@ (8003a38 <EaseInElastic+0x94>)
 80039ae:	60fb      	str	r3, [r7, #12]

    if (t == 0)
 80039b0:	f04f 0100 	mov.w	r1, #0
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f7fc fe7d 	bl	80006b4 <__aeabi_fcmpeq>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d002      	beq.n	80039c6 <EaseInElastic+0x22>
        return 0;
 80039c0:	f04f 0300 	mov.w	r3, #0
 80039c4:	e034      	b.n	8003a30 <EaseInElastic+0x8c>
    if (t == 1)
 80039c6:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f7fc fe72 	bl	80006b4 <__aeabi_fcmpeq>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d002      	beq.n	80039dc <EaseInElastic+0x38>
        return 1;
 80039d6:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80039da:	e029      	b.n	8003a30 <EaseInElastic+0x8c>
    return -powf(2, 10 * t - 10) * sinf((t * 10 - 10.75f) * c4);
 80039dc:	4917      	ldr	r1, [pc, #92]	@ (8003a3c <EaseInElastic+0x98>)
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f7fc fcd4 	bl	800038c <__aeabi_fmul>
 80039e4:	4603      	mov	r3, r0
 80039e6:	4915      	ldr	r1, [pc, #84]	@ (8003a3c <EaseInElastic+0x98>)
 80039e8:	4618      	mov	r0, r3
 80039ea:	f7fc fbc5 	bl	8000178 <__aeabi_fsub>
 80039ee:	4603      	mov	r3, r0
 80039f0:	4619      	mov	r1, r3
 80039f2:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80039f6:	f005 f823 	bl	8008a40 <powf>
 80039fa:	4603      	mov	r3, r0
 80039fc:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 8003a00:	490e      	ldr	r1, [pc, #56]	@ (8003a3c <EaseInElastic+0x98>)
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f7fc fcc2 	bl	800038c <__aeabi_fmul>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	490d      	ldr	r1, [pc, #52]	@ (8003a40 <EaseInElastic+0x9c>)
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7fc fbb3 	bl	8000178 <__aeabi_fsub>
 8003a12:	4603      	mov	r3, r0
 8003a14:	68f9      	ldr	r1, [r7, #12]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7fc fcb8 	bl	800038c <__aeabi_fmul>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f005 f8ae 	bl	8008b80 <sinf>
 8003a24:	4603      	mov	r3, r0
 8003a26:	4619      	mov	r1, r3
 8003a28:	4620      	mov	r0, r4
 8003a2a:	f7fc fcaf 	bl	800038c <__aeabi_fmul>
 8003a2e:	4603      	mov	r3, r0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3714      	adds	r7, #20
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd90      	pop	{r4, r7, pc}
 8003a38:	40060a8b 	.word	0x40060a8b
 8003a3c:	41200000 	.word	0x41200000
 8003a40:	412c0000 	.word	0x412c0000

08003a44 <EaseOutElastic>:

static float EaseOutElastic(float t)
{
 8003a44:	b590      	push	{r4, r7, lr}
 8003a46:	b085      	sub	sp, #20
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
    const float c4 = (2 * 3.14159f) / 3;
 8003a4c:	4b22      	ldr	r3, [pc, #136]	@ (8003ad8 <EaseOutElastic+0x94>)
 8003a4e:	60fb      	str	r3, [r7, #12]

    if (t == 0)
 8003a50:	f04f 0100 	mov.w	r1, #0
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f7fc fe2d 	bl	80006b4 <__aeabi_fcmpeq>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d002      	beq.n	8003a66 <EaseOutElastic+0x22>
        return 0;
 8003a60:	f04f 0300 	mov.w	r3, #0
 8003a64:	e034      	b.n	8003ad0 <EaseOutElastic+0x8c>
    if (t == 1)
 8003a66:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7fc fe22 	bl	80006b4 <__aeabi_fcmpeq>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d002      	beq.n	8003a7c <EaseOutElastic+0x38>
        return 1;
 8003a76:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003a7a:	e029      	b.n	8003ad0 <EaseOutElastic+0x8c>
    return powf(2, -10 * t) * sinf((t * 10 - 0.75f) * c4) + 1;
 8003a7c:	4917      	ldr	r1, [pc, #92]	@ (8003adc <EaseOutElastic+0x98>)
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f7fc fc84 	bl	800038c <__aeabi_fmul>
 8003a84:	4603      	mov	r3, r0
 8003a86:	4619      	mov	r1, r3
 8003a88:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8003a8c:	f004 ffd8 	bl	8008a40 <powf>
 8003a90:	4604      	mov	r4, r0
 8003a92:	4913      	ldr	r1, [pc, #76]	@ (8003ae0 <EaseOutElastic+0x9c>)
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f7fc fc79 	bl	800038c <__aeabi_fmul>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	f04f 517d 	mov.w	r1, #1061158912	@ 0x3f400000
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f7fc fb69 	bl	8000178 <__aeabi_fsub>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	68f9      	ldr	r1, [r7, #12]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7fc fc6e 	bl	800038c <__aeabi_fmul>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f005 f864 	bl	8008b80 <sinf>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	4619      	mov	r1, r3
 8003abc:	4620      	mov	r0, r4
 8003abe:	f7fc fc65 	bl	800038c <__aeabi_fmul>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f7fc fb57 	bl	800017c <__addsf3>
 8003ace:	4603      	mov	r3, r0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3714      	adds	r7, #20
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd90      	pop	{r4, r7, pc}
 8003ad8:	40060a8b 	.word	0x40060a8b
 8003adc:	c1200000 	.word	0xc1200000
 8003ae0:	41200000 	.word	0x41200000

08003ae4 <EaseInOutElastic>:

static float EaseInOutElastic(float t)
{
 8003ae4:	b590      	push	{r4, r7, lr}
 8003ae6:	b085      	sub	sp, #20
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
    const float c5 = (2 * 3.14159f) / 4.5f;
 8003aec:	4b44      	ldr	r3, [pc, #272]	@ (8003c00 <EaseInOutElastic+0x11c>)
 8003aee:	60fb      	str	r3, [r7, #12]

    if (t == 0)
 8003af0:	f04f 0100 	mov.w	r1, #0
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f7fc fddd 	bl	80006b4 <__aeabi_fcmpeq>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d002      	beq.n	8003b06 <EaseInOutElastic+0x22>
        return 0;
 8003b00:	f04f 0300 	mov.w	r3, #0
 8003b04:	e077      	b.n	8003bf6 <EaseInOutElastic+0x112>
    if (t == 1)
 8003b06:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f7fc fdd2 	bl	80006b4 <__aeabi_fcmpeq>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d002      	beq.n	8003b1c <EaseInOutElastic+0x38>
        return 1;
 8003b16:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003b1a:	e06c      	b.n	8003bf6 <EaseInOutElastic+0x112>
    if (t < 0.5f)
 8003b1c:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f7fc fdd1 	bl	80006c8 <__aeabi_fcmplt>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d030      	beq.n	8003b8e <EaseInOutElastic+0xaa>
        return -(powf(2, 20 * t - 10) * sinf((20 * t - 11.125f) * c5)) / 2;
 8003b2c:	4935      	ldr	r1, [pc, #212]	@ (8003c04 <EaseInOutElastic+0x120>)
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f7fc fc2c 	bl	800038c <__aeabi_fmul>
 8003b34:	4603      	mov	r3, r0
 8003b36:	4934      	ldr	r1, [pc, #208]	@ (8003c08 <EaseInOutElastic+0x124>)
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f7fc fb1d 	bl	8000178 <__aeabi_fsub>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	4619      	mov	r1, r3
 8003b42:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8003b46:	f004 ff7b 	bl	8008a40 <powf>
 8003b4a:	4604      	mov	r4, r0
 8003b4c:	492d      	ldr	r1, [pc, #180]	@ (8003c04 <EaseInOutElastic+0x120>)
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f7fc fc1c 	bl	800038c <__aeabi_fmul>
 8003b54:	4603      	mov	r3, r0
 8003b56:	492d      	ldr	r1, [pc, #180]	@ (8003c0c <EaseInOutElastic+0x128>)
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7fc fb0d 	bl	8000178 <__aeabi_fsub>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	68f9      	ldr	r1, [r7, #12]
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7fc fc12 	bl	800038c <__aeabi_fmul>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f005 f808 	bl	8008b80 <sinf>
 8003b70:	4603      	mov	r3, r0
 8003b72:	4619      	mov	r1, r3
 8003b74:	4620      	mov	r0, r4
 8003b76:	f7fc fc09 	bl	800038c <__aeabi_fmul>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8003b80:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8003b84:	4618      	mov	r0, r3
 8003b86:	f7fc fcb5 	bl	80004f4 <__aeabi_fdiv>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	e033      	b.n	8003bf6 <EaseInOutElastic+0x112>
    return (powf(2, -20 * t + 10) * sinf((20 * t - 11.125f) * c5)) / 2 + 1;
 8003b8e:	4920      	ldr	r1, [pc, #128]	@ (8003c10 <EaseInOutElastic+0x12c>)
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f7fc fbfb 	bl	800038c <__aeabi_fmul>
 8003b96:	4603      	mov	r3, r0
 8003b98:	491b      	ldr	r1, [pc, #108]	@ (8003c08 <EaseInOutElastic+0x124>)
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7fc faee 	bl	800017c <__addsf3>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8003ba8:	f004 ff4a 	bl	8008a40 <powf>
 8003bac:	4604      	mov	r4, r0
 8003bae:	4915      	ldr	r1, [pc, #84]	@ (8003c04 <EaseInOutElastic+0x120>)
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f7fc fbeb 	bl	800038c <__aeabi_fmul>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	4914      	ldr	r1, [pc, #80]	@ (8003c0c <EaseInOutElastic+0x128>)
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f7fc fadc 	bl	8000178 <__aeabi_fsub>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	68f9      	ldr	r1, [r7, #12]
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f7fc fbe1 	bl	800038c <__aeabi_fmul>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f004 ffd7 	bl	8008b80 <sinf>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	4620      	mov	r0, r4
 8003bd8:	f7fc fbd8 	bl	800038c <__aeabi_fmul>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7fc fc86 	bl	80004f4 <__aeabi_fdiv>
 8003be8:	4603      	mov	r3, r0
 8003bea:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7fc fac4 	bl	800017c <__addsf3>
 8003bf4:	4603      	mov	r3, r0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3714      	adds	r7, #20
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd90      	pop	{r4, r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	3fb2b8b9 	.word	0x3fb2b8b9
 8003c04:	41a00000 	.word	0x41a00000
 8003c08:	41200000 	.word	0x41200000
 8003c0c:	41320000 	.word	0x41320000
 8003c10:	c1a00000 	.word	0xc1a00000

08003c14 <EaseOutBounce>:

static float EaseOutBounce(float t)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
    const float n1 = 7.5625f;
 8003c1c:	4b45      	ldr	r3, [pc, #276]	@ (8003d34 <EaseOutBounce+0x120>)
 8003c1e:	60fb      	str	r3, [r7, #12]
    const float d1 = 2.75f;
 8003c20:	4b45      	ldr	r3, [pc, #276]	@ (8003d38 <EaseOutBounce+0x124>)
 8003c22:	60bb      	str	r3, [r7, #8]

    if (t < 1 / d1)
 8003c24:	68b9      	ldr	r1, [r7, #8]
 8003c26:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8003c2a:	f7fc fc63 	bl	80004f4 <__aeabi_fdiv>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	4619      	mov	r1, r3
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f7fc fd48 	bl	80006c8 <__aeabi_fcmplt>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00a      	beq.n	8003c54 <EaseOutBounce+0x40>
    {
        return n1 * t * t;
 8003c3e:	6879      	ldr	r1, [r7, #4]
 8003c40:	68f8      	ldr	r0, [r7, #12]
 8003c42:	f7fc fba3 	bl	800038c <__aeabi_fmul>
 8003c46:	4603      	mov	r3, r0
 8003c48:	6879      	ldr	r1, [r7, #4]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f7fc fb9e 	bl	800038c <__aeabi_fmul>
 8003c50:	4603      	mov	r3, r0
 8003c52:	e06a      	b.n	8003d2a <EaseOutBounce+0x116>
    }
    else if (t < 2 / d1)
 8003c54:	68b9      	ldr	r1, [r7, #8]
 8003c56:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8003c5a:	f7fc fc4b 	bl	80004f4 <__aeabi_fdiv>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	4619      	mov	r1, r3
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f7fc fd30 	bl	80006c8 <__aeabi_fcmplt>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d01c      	beq.n	8003ca8 <EaseOutBounce+0x94>
    {
        t -= 1.5f / d1;
 8003c6e:	68b9      	ldr	r1, [r7, #8]
 8003c70:	f04f 507f 	mov.w	r0, #1069547520	@ 0x3fc00000
 8003c74:	f7fc fc3e 	bl	80004f4 <__aeabi_fdiv>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f7fc fa7b 	bl	8000178 <__aeabi_fsub>
 8003c82:	4603      	mov	r3, r0
 8003c84:	607b      	str	r3, [r7, #4]
        return n1 * t * t + 0.75f;
 8003c86:	6879      	ldr	r1, [r7, #4]
 8003c88:	68f8      	ldr	r0, [r7, #12]
 8003c8a:	f7fc fb7f 	bl	800038c <__aeabi_fmul>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	6879      	ldr	r1, [r7, #4]
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7fc fb7a 	bl	800038c <__aeabi_fmul>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	f04f 517d 	mov.w	r1, #1061158912	@ 0x3f400000
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f7fc fa6c 	bl	800017c <__addsf3>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	e040      	b.n	8003d2a <EaseOutBounce+0x116>
    }
    else if (t < 2.5f / d1)
 8003ca8:	68b9      	ldr	r1, [r7, #8]
 8003caa:	4824      	ldr	r0, [pc, #144]	@ (8003d3c <EaseOutBounce+0x128>)
 8003cac:	f7fc fc22 	bl	80004f4 <__aeabi_fdiv>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f7fc fd07 	bl	80006c8 <__aeabi_fcmplt>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d01a      	beq.n	8003cf6 <EaseOutBounce+0xe2>
    {
        t -= 2.25f / d1;
 8003cc0:	68b9      	ldr	r1, [r7, #8]
 8003cc2:	481f      	ldr	r0, [pc, #124]	@ (8003d40 <EaseOutBounce+0x12c>)
 8003cc4:	f7fc fc16 	bl	80004f4 <__aeabi_fdiv>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	4619      	mov	r1, r3
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f7fc fa53 	bl	8000178 <__aeabi_fsub>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	607b      	str	r3, [r7, #4]
        return n1 * t * t + 0.9375f;
 8003cd6:	6879      	ldr	r1, [r7, #4]
 8003cd8:	68f8      	ldr	r0, [r7, #12]
 8003cda:	f7fc fb57 	bl	800038c <__aeabi_fmul>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	6879      	ldr	r1, [r7, #4]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7fc fb52 	bl	800038c <__aeabi_fmul>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	4916      	ldr	r1, [pc, #88]	@ (8003d44 <EaseOutBounce+0x130>)
 8003cec:	4618      	mov	r0, r3
 8003cee:	f7fc fa45 	bl	800017c <__addsf3>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	e019      	b.n	8003d2a <EaseOutBounce+0x116>
    }
    else
    {
        t -= 2.625f / d1;
 8003cf6:	68b9      	ldr	r1, [r7, #8]
 8003cf8:	4813      	ldr	r0, [pc, #76]	@ (8003d48 <EaseOutBounce+0x134>)
 8003cfa:	f7fc fbfb 	bl	80004f4 <__aeabi_fdiv>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	4619      	mov	r1, r3
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f7fc fa38 	bl	8000178 <__aeabi_fsub>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	607b      	str	r3, [r7, #4]
        return n1 * t * t + 0.984375f;
 8003d0c:	6879      	ldr	r1, [r7, #4]
 8003d0e:	68f8      	ldr	r0, [r7, #12]
 8003d10:	f7fc fb3c 	bl	800038c <__aeabi_fmul>
 8003d14:	4603      	mov	r3, r0
 8003d16:	6879      	ldr	r1, [r7, #4]
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f7fc fb37 	bl	800038c <__aeabi_fmul>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	490a      	ldr	r1, [pc, #40]	@ (8003d4c <EaseOutBounce+0x138>)
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7fc fa2a 	bl	800017c <__addsf3>
 8003d28:	4603      	mov	r3, r0
    }
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3710      	adds	r7, #16
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	40f20000 	.word	0x40f20000
 8003d38:	40300000 	.word	0x40300000
 8003d3c:	40200000 	.word	0x40200000
 8003d40:	40100000 	.word	0x40100000
 8003d44:	3f700000 	.word	0x3f700000
 8003d48:	40280000 	.word	0x40280000
 8003d4c:	3f7c0000 	.word	0x3f7c0000

08003d50 <EaseInBounce>:

// 反弹缓动
static float EaseInBounce(float t)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
    return 1 - EaseOutBounce(1 - t);
 8003d58:	6879      	ldr	r1, [r7, #4]
 8003d5a:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8003d5e:	f7fc fa0b 	bl	8000178 <__aeabi_fsub>
 8003d62:	4603      	mov	r3, r0
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7ff ff55 	bl	8003c14 <EaseOutBounce>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8003d72:	f7fc fa01 	bl	8000178 <__aeabi_fsub>
 8003d76:	4603      	mov	r3, r0
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3708      	adds	r7, #8
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <EaseInOutBounce>:

static float EaseInOutBounce(float t)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
    if (t < 0.5f)
 8003d88:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f7fc fc9b 	bl	80006c8 <__aeabi_fcmplt>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d010      	beq.n	8003dba <EaseInOutBounce+0x3a>
        return EaseInBounce(t * 2) * 0.5f;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7fc f9ed 	bl	800017c <__addsf3>
 8003da2:	4603      	mov	r3, r0
 8003da4:	4618      	mov	r0, r3
 8003da6:	f7ff ffd3 	bl	8003d50 <EaseInBounce>
 8003daa:	4603      	mov	r3, r0
 8003dac:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8003db0:	4618      	mov	r0, r3
 8003db2:	f7fc faeb 	bl	800038c <__aeabi_fmul>
 8003db6:	4603      	mov	r3, r0
 8003db8:	e01b      	b.n	8003df2 <EaseInOutBounce+0x72>
    return EaseOutBounce(t * 2 - 1) * 0.5f + 0.5f;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f7fc f9dc 	bl	800017c <__addsf3>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7fc f9d4 	bl	8000178 <__aeabi_fsub>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7ff ff1e 	bl	8003c14 <EaseOutBounce>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7fc fad4 	bl	800038c <__aeabi_fmul>
 8003de4:	4603      	mov	r3, r0
 8003de6:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8003dea:	4618      	mov	r0, r3
 8003dec:	f7fc f9c6 	bl	800017c <__addsf3>
 8003df0:	4603      	mov	r3, r0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3708      	adds	r7, #8
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
	...

08003dfc <EaseInBack>:

// 背越式缓动
static float EaseInBack(float t)
{
 8003dfc:	b590      	push	{r4, r7, lr}
 8003dfe:	b085      	sub	sp, #20
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
    const float c1 = 1.70158f;
 8003e04:	4b15      	ldr	r3, [pc, #84]	@ (8003e5c <EaseInBack+0x60>)
 8003e06:	60fb      	str	r3, [r7, #12]
    const float c3 = c1 + 1;
 8003e08:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	f7fc f9b5 	bl	800017c <__addsf3>
 8003e12:	4603      	mov	r3, r0
 8003e14:	60bb      	str	r3, [r7, #8]

    return c3 * t * t * t - c1 * t * t;
 8003e16:	6879      	ldr	r1, [r7, #4]
 8003e18:	68b8      	ldr	r0, [r7, #8]
 8003e1a:	f7fc fab7 	bl	800038c <__aeabi_fmul>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	6879      	ldr	r1, [r7, #4]
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7fc fab2 	bl	800038c <__aeabi_fmul>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	6879      	ldr	r1, [r7, #4]
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f7fc faad 	bl	800038c <__aeabi_fmul>
 8003e32:	4603      	mov	r3, r0
 8003e34:	461c      	mov	r4, r3
 8003e36:	6879      	ldr	r1, [r7, #4]
 8003e38:	68f8      	ldr	r0, [r7, #12]
 8003e3a:	f7fc faa7 	bl	800038c <__aeabi_fmul>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	6879      	ldr	r1, [r7, #4]
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7fc faa2 	bl	800038c <__aeabi_fmul>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	4620      	mov	r0, r4
 8003e4e:	f7fc f993 	bl	8000178 <__aeabi_fsub>
 8003e52:	4603      	mov	r3, r0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3714      	adds	r7, #20
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd90      	pop	{r4, r7, pc}
 8003e5c:	3fd9cd60 	.word	0x3fd9cd60

08003e60 <EaseOutBack>:

static float EaseOutBack(float t)
{
 8003e60:	b590      	push	{r4, r7, lr}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
    const float c1 = 1.70158f;
 8003e68:	4b1c      	ldr	r3, [pc, #112]	@ (8003edc <EaseOutBack+0x7c>)
 8003e6a:	60fb      	str	r3, [r7, #12]
    const float c3 = c1 + 1;
 8003e6c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003e70:	68f8      	ldr	r0, [r7, #12]
 8003e72:	f7fc f983 	bl	800017c <__addsf3>
 8003e76:	4603      	mov	r3, r0
 8003e78:	60bb      	str	r3, [r7, #8]

    return 1 + c3 * powf(t - 1, 3) + c1 * powf(t - 1, 2);
 8003e7a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f7fc f97a 	bl	8000178 <__aeabi_fsub>
 8003e84:	4603      	mov	r3, r0
 8003e86:	4916      	ldr	r1, [pc, #88]	@ (8003ee0 <EaseOutBack+0x80>)
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f004 fdd9 	bl	8008a40 <powf>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	68b9      	ldr	r1, [r7, #8]
 8003e92:	4618      	mov	r0, r3
 8003e94:	f7fc fa7a 	bl	800038c <__aeabi_fmul>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7fc f96c 	bl	800017c <__addsf3>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	461c      	mov	r4, r3
 8003ea8:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f7fc f963 	bl	8000178 <__aeabi_fsub>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f004 fdc1 	bl	8008a40 <powf>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	68f9      	ldr	r1, [r7, #12]
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f7fc fa62 	bl	800038c <__aeabi_fmul>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	4619      	mov	r1, r3
 8003ecc:	4620      	mov	r0, r4
 8003ece:	f7fc f955 	bl	800017c <__addsf3>
 8003ed2:	4603      	mov	r3, r0
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3714      	adds	r7, #20
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd90      	pop	{r4, r7, pc}
 8003edc:	3fd9cd60 	.word	0x3fd9cd60
 8003ee0:	40400000 	.word	0x40400000

08003ee4 <EaseInOutBack>:

static float EaseInOutBack(float t)
{
 8003ee4:	b5b0      	push	{r4, r5, r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
    const float c1 = 1.70158f;
 8003eec:	4b40      	ldr	r3, [pc, #256]	@ (8003ff0 <EaseInOutBack+0x10c>)
 8003eee:	60fb      	str	r3, [r7, #12]
    const float c2 = c1 * 1.525f;
 8003ef0:	4940      	ldr	r1, [pc, #256]	@ (8003ff4 <EaseInOutBack+0x110>)
 8003ef2:	68f8      	ldr	r0, [r7, #12]
 8003ef4:	f7fc fa4a 	bl	800038c <__aeabi_fmul>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	60bb      	str	r3, [r7, #8]

    if (t < 0.5f)
 8003efc:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f7fc fbe1 	bl	80006c8 <__aeabi_fcmplt>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d02c      	beq.n	8003f66 <EaseInOutBack+0x82>
        return (powf(2 * t, 2) * ((c2 + 1) * 2 * t - c2)) / 2;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4619      	mov	r1, r3
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7fc f933 	bl	800017c <__addsf3>
 8003f16:	4603      	mov	r3, r0
 8003f18:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f004 fd8f 	bl	8008a40 <powf>
 8003f22:	4604      	mov	r4, r0
 8003f24:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003f28:	68b8      	ldr	r0, [r7, #8]
 8003f2a:	f7fc f927 	bl	800017c <__addsf3>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	4619      	mov	r1, r3
 8003f32:	4618      	mov	r0, r3
 8003f34:	f7fc f922 	bl	800017c <__addsf3>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	6879      	ldr	r1, [r7, #4]
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f7fc fa25 	bl	800038c <__aeabi_fmul>
 8003f42:	4603      	mov	r3, r0
 8003f44:	68b9      	ldr	r1, [r7, #8]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f7fc f916 	bl	8000178 <__aeabi_fsub>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	4619      	mov	r1, r3
 8003f50:	4620      	mov	r0, r4
 8003f52:	f7fc fa1b 	bl	800038c <__aeabi_fmul>
 8003f56:	4603      	mov	r3, r0
 8003f58:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7fc fac9 	bl	80004f4 <__aeabi_fdiv>
 8003f62:	4603      	mov	r3, r0
 8003f64:	e03f      	b.n	8003fe6 <EaseInOutBack+0x102>
    return (powf(2 * t - 2, 2) * ((c2 + 1) * (t * 2 - 2) + c2) + 2) / 2;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4619      	mov	r1, r3
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f7fc f906 	bl	800017c <__addsf3>
 8003f70:	4603      	mov	r3, r0
 8003f72:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7fc f8fe 	bl	8000178 <__aeabi_fsub>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8003f82:	4618      	mov	r0, r3
 8003f84:	f004 fd5c 	bl	8008a40 <powf>
 8003f88:	4604      	mov	r4, r0
 8003f8a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003f8e:	68b8      	ldr	r0, [r7, #8]
 8003f90:	f7fc f8f4 	bl	800017c <__addsf3>
 8003f94:	4603      	mov	r3, r0
 8003f96:	461d      	mov	r5, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f7fc f8ed 	bl	800017c <__addsf3>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f7fc f8e5 	bl	8000178 <__aeabi_fsub>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	4628      	mov	r0, r5
 8003fb4:	f7fc f9ea 	bl	800038c <__aeabi_fmul>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	68b9      	ldr	r1, [r7, #8]
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f7fc f8dd 	bl	800017c <__addsf3>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	4620      	mov	r0, r4
 8003fc8:	f7fc f9e0 	bl	800038c <__aeabi_fmul>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f7fc f8d2 	bl	800017c <__addsf3>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f7fc fa88 	bl	80004f4 <__aeabi_fdiv>
 8003fe4:	4603      	mov	r3, r0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3710      	adds	r7, #16
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bdb0      	pop	{r4, r5, r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	3fd9cd60 	.word	0x3fd9cd60
 8003ff4:	3fc33333 	.word	0x3fc33333

08003ff8 <EaseInSine>:

// 正弦缓动
static float EaseInSine(float t)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
    return 1 - cosf((t * 3.14159f) / 2);
 8004000:	490c      	ldr	r1, [pc, #48]	@ (8004034 <EaseInSine+0x3c>)
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f7fc f9c2 	bl	800038c <__aeabi_fmul>
 8004008:	4603      	mov	r3, r0
 800400a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800400e:	4618      	mov	r0, r3
 8004010:	f7fc fa70 	bl	80004f4 <__aeabi_fdiv>
 8004014:	4603      	mov	r3, r0
 8004016:	4618      	mov	r0, r3
 8004018:	f004 fd7a 	bl	8008b10 <cosf>
 800401c:	4603      	mov	r3, r0
 800401e:	4619      	mov	r1, r3
 8004020:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8004024:	f7fc f8a8 	bl	8000178 <__aeabi_fsub>
 8004028:	4603      	mov	r3, r0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3708      	adds	r7, #8
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	40490fd0 	.word	0x40490fd0

08004038 <EaseOutSine>:

static float EaseOutSine(float t)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
    return sinf((t * 3.14159f) / 2);
 8004040:	4909      	ldr	r1, [pc, #36]	@ (8004068 <EaseOutSine+0x30>)
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f7fc f9a2 	bl	800038c <__aeabi_fmul>
 8004048:	4603      	mov	r3, r0
 800404a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800404e:	4618      	mov	r0, r3
 8004050:	f7fc fa50 	bl	80004f4 <__aeabi_fdiv>
 8004054:	4603      	mov	r3, r0
 8004056:	4618      	mov	r0, r3
 8004058:	f004 fd92 	bl	8008b80 <sinf>
 800405c:	4603      	mov	r3, r0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3708      	adds	r7, #8
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	40490fd0 	.word	0x40490fd0

0800406c <EaseInOutSine>:

static float EaseInOutSine(float t)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
    return -(cosf(3.14159f * t) - 1) / 2;
 8004074:	490d      	ldr	r1, [pc, #52]	@ (80040ac <EaseInOutSine+0x40>)
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f7fc f988 	bl	800038c <__aeabi_fmul>
 800407c:	4603      	mov	r3, r0
 800407e:	4618      	mov	r0, r3
 8004080:	f004 fd46 	bl	8008b10 <cosf>
 8004084:	4603      	mov	r3, r0
 8004086:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800408a:	4618      	mov	r0, r3
 800408c:	f7fc f874 	bl	8000178 <__aeabi_fsub>
 8004090:	4603      	mov	r3, r0
 8004092:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8004096:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800409a:	4618      	mov	r0, r3
 800409c:	f7fc fa2a 	bl	80004f4 <__aeabi_fdiv>
 80040a0:	4603      	mov	r3, r0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3708      	adds	r7, #8
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	40490fd0 	.word	0x40490fd0

080040b0 <GetEaseValue>:

static float GetEaseValue(float progress, EaseType_t easeType)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	460b      	mov	r3, r1
 80040ba:	70fb      	strb	r3, [r7, #3]
    switch (easeType)
 80040bc:	78fb      	ldrb	r3, [r7, #3]
 80040be:	2b18      	cmp	r3, #24
 80040c0:	f200 80b3 	bhi.w	800422a <GetEaseValue+0x17a>
 80040c4:	a201      	add	r2, pc, #4	@ (adr r2, 80040cc <GetEaseValue+0x1c>)
 80040c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ca:	bf00      	nop
 80040cc:	08004131 	.word	0x08004131
 80040d0:	0800413b 	.word	0x0800413b
 80040d4:	08004145 	.word	0x08004145
 80040d8:	0800414f 	.word	0x0800414f
 80040dc:	08004159 	.word	0x08004159
 80040e0:	08004163 	.word	0x08004163
 80040e4:	0800416d 	.word	0x0800416d
 80040e8:	08004177 	.word	0x08004177
 80040ec:	08004181 	.word	0x08004181
 80040f0:	0800418b 	.word	0x0800418b
 80040f4:	08004195 	.word	0x08004195
 80040f8:	0800419f 	.word	0x0800419f
 80040fc:	080041a9 	.word	0x080041a9
 8004100:	080041b3 	.word	0x080041b3
 8004104:	080041bd 	.word	0x080041bd
 8004108:	080041c7 	.word	0x080041c7
 800410c:	080041d1 	.word	0x080041d1
 8004110:	080041db 	.word	0x080041db
 8004114:	080041e5 	.word	0x080041e5
 8004118:	080041ef 	.word	0x080041ef
 800411c:	080041f9 	.word	0x080041f9
 8004120:	08004203 	.word	0x08004203
 8004124:	0800420d 	.word	0x0800420d
 8004128:	08004217 	.word	0x08004217
 800412c:	08004221 	.word	0x08004221
    {
    case EASE_LINEAR:
        return EaseLinear(progress);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f7ff fa15 	bl	8003560 <EaseLinear>
 8004136:	4603      	mov	r3, r0
 8004138:	e078      	b.n	800422c <GetEaseValue+0x17c>
    case EASE_IN_QUAD:
        return EaseInQuad(progress);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f7ff fa1a 	bl	8003574 <EaseInQuad>
 8004140:	4603      	mov	r3, r0
 8004142:	e073      	b.n	800422c <GetEaseValue+0x17c>
    case EASE_OUT_QUAD:
        return EaseOutQuad(progress);
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f7ff fa22 	bl	800358e <EaseOutQuad>
 800414a:	4603      	mov	r3, r0
 800414c:	e06e      	b.n	800422c <GetEaseValue+0x17c>
    case EASE_INOUT_QUAD:
        return EaseInOutQuad(progress);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f7ff fa30 	bl	80035b4 <EaseInOutQuad>
 8004154:	4603      	mov	r3, r0
 8004156:	e069      	b.n	800422c <GetEaseValue+0x17c>
    case EASE_IN_CUBIC:
        return EaseInCubic(progress);
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f7ff fa5e 	bl	800361a <EaseInCubic>
 800415e:	4603      	mov	r3, r0
 8004160:	e064      	b.n	800422c <GetEaseValue+0x17c>
    case EASE_OUT_CUBIC:
        return EaseOutCubic(progress);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f7ff fa6b 	bl	800363e <EaseOutCubic>
 8004168:	4603      	mov	r3, r0
 800416a:	e05f      	b.n	800422c <GetEaseValue+0x17c>
    case EASE_INOUT_CUBIC:
        return EaseInOutCubic(progress);
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f7ff fa85 	bl	800367c <EaseInOutCubic>
 8004172:	4603      	mov	r3, r0
 8004174:	e05a      	b.n	800422c <GetEaseValue+0x17c>
    case EASE_IN_EXPO:
        return EaseInExpo(progress);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f7ff fad2 	bl	8003720 <EaseInExpo>
 800417c:	4603      	mov	r3, r0
 800417e:	e055      	b.n	800422c <GetEaseValue+0x17c>
    case EASE_OUT_EXPO:
        return EaseOutExpo(progress);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f7ff faf3 	bl	800376c <EaseOutExpo>
 8004186:	4603      	mov	r3, r0
 8004188:	e050      	b.n	800422c <GetEaseValue+0x17c>
    case EASE_INOUT_EXPO:
        return EaseInOutExpo(progress);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f7ff fb14 	bl	80037b8 <EaseInOutExpo>
 8004190:	4603      	mov	r3, r0
 8004192:	e04b      	b.n	800422c <GetEaseValue+0x17c>
    case EASE_IN_CIRC:
        return EaseInCirc(progress);
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f7ff fb6f 	bl	8003878 <EaseInCirc>
 800419a:	4603      	mov	r3, r0
 800419c:	e046      	b.n	800422c <GetEaseValue+0x17c>
    case EASE_OUT_CIRC:
        return EaseOutCirc(progress);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f7ff fb87 	bl	80038b2 <EaseOutCirc>
 80041a4:	4603      	mov	r3, r0
 80041a6:	e041      	b.n	800422c <GetEaseValue+0x17c>
    case EASE_INOUT_CIRC:
        return EaseInOutCirc(progress);
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f7ff fba0 	bl	80038ee <EaseInOutCirc>
 80041ae:	4603      	mov	r3, r0
 80041b0:	e03c      	b.n	800422c <GetEaseValue+0x17c>
    case EASE_IN_ELASTIC:
        return EaseInElastic(progress);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f7ff fbf6 	bl	80039a4 <EaseInElastic>
 80041b8:	4603      	mov	r3, r0
 80041ba:	e037      	b.n	800422c <GetEaseValue+0x17c>
    case EASE_OUT_ELASTIC:
        return EaseOutElastic(progress);
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f7ff fc41 	bl	8003a44 <EaseOutElastic>
 80041c2:	4603      	mov	r3, r0
 80041c4:	e032      	b.n	800422c <GetEaseValue+0x17c>
    case EASE_INOUT_ELASTIC:
        return EaseInOutElastic(progress);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f7ff fc8c 	bl	8003ae4 <EaseInOutElastic>
 80041cc:	4603      	mov	r3, r0
 80041ce:	e02d      	b.n	800422c <GetEaseValue+0x17c>
    case EASE_IN_BOUNCE:
        return EaseInBounce(progress);
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f7ff fdbd 	bl	8003d50 <EaseInBounce>
 80041d6:	4603      	mov	r3, r0
 80041d8:	e028      	b.n	800422c <GetEaseValue+0x17c>
    case EASE_OUT_BOUNCE:
        return EaseOutBounce(progress);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f7ff fd1a 	bl	8003c14 <EaseOutBounce>
 80041e0:	4603      	mov	r3, r0
 80041e2:	e023      	b.n	800422c <GetEaseValue+0x17c>
    case EASE_INOUT_BOUNCE:
        return EaseInOutBounce(progress);
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f7ff fdcb 	bl	8003d80 <EaseInOutBounce>
 80041ea:	4603      	mov	r3, r0
 80041ec:	e01e      	b.n	800422c <GetEaseValue+0x17c>
    case EASE_IN_BACK:
        return EaseInBack(progress);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f7ff fe04 	bl	8003dfc <EaseInBack>
 80041f4:	4603      	mov	r3, r0
 80041f6:	e019      	b.n	800422c <GetEaseValue+0x17c>
    case EASE_OUT_BACK:
        return EaseOutBack(progress);
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f7ff fe31 	bl	8003e60 <EaseOutBack>
 80041fe:	4603      	mov	r3, r0
 8004200:	e014      	b.n	800422c <GetEaseValue+0x17c>
    case EASE_INOUT_BACK:
        return EaseInOutBack(progress);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f7ff fe6e 	bl	8003ee4 <EaseInOutBack>
 8004208:	4603      	mov	r3, r0
 800420a:	e00f      	b.n	800422c <GetEaseValue+0x17c>
    case EASE_IN_SINE:
        return EaseInSine(progress);
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f7ff fef3 	bl	8003ff8 <EaseInSine>
 8004212:	4603      	mov	r3, r0
 8004214:	e00a      	b.n	800422c <GetEaseValue+0x17c>
    case EASE_OUT_SINE:
        return EaseOutSine(progress);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f7ff ff0e 	bl	8004038 <EaseOutSine>
 800421c:	4603      	mov	r3, r0
 800421e:	e005      	b.n	800422c <GetEaseValue+0x17c>
    case EASE_INOUT_SINE:
        return EaseInOutSine(progress);
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f7ff ff23 	bl	800406c <EaseInOutSine>
 8004226:	4603      	mov	r3, r0
 8004228:	e000      	b.n	800422c <GetEaseValue+0x17c>
    default:
        return progress;
 800422a:	687b      	ldr	r3, [r7, #4]
    }
}
 800422c:	4618      	mov	r0, r3
 800422e:	3708      	adds	r7, #8
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <OLED_InitAnimation>:

#pragma region ANIMATIONTWEENS
// 这里是底层动画实现
void OLED_InitAnimation(Animation_t *anim, float startValue, float endValue,
                        uint32_t duration, EaseType_t easeType)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]
 8004240:	603b      	str	r3, [r7, #0]
    anim->startTime = HAL_GetTick();
 8004242:	f000 fde1 	bl	8004e08 <HAL_GetTick>
 8004246:	4602      	mov	r2, r0
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	601a      	str	r2, [r3, #0]
    anim->duration = duration;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	683a      	ldr	r2, [r7, #0]
 8004250:	605a      	str	r2, [r3, #4]
    anim->startValue = startValue;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	68ba      	ldr	r2, [r7, #8]
 8004256:	609a      	str	r2, [r3, #8]
    anim->endValue = endValue;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	60da      	str	r2, [r3, #12]
    anim->currentValue = startValue;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	68ba      	ldr	r2, [r7, #8]
 8004262:	611a      	str	r2, [r3, #16]
    anim->isActive = 1;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2201      	movs	r2, #1
 8004268:	751a      	strb	r2, [r3, #20]
    anim->easeType = easeType;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	7e3a      	ldrb	r2, [r7, #24]
 800426e:	755a      	strb	r2, [r3, #21]
}
 8004270:	bf00      	nop
 8004272:	3710      	adds	r7, #16
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <OLED_UpdateAnimation>:

// 更新动画状态，返回isActive的值
uint8_t OLED_UpdateAnimation(Animation_t *anim, uint32_t currentTime)
{
 8004278:	b590      	push	{r4, r7, lr}
 800427a:	b087      	sub	sp, #28
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
    if (!anim->isActive)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	7d1b      	ldrb	r3, [r3, #20]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d101      	bne.n	800428e <OLED_UpdateAnimation+0x16>
        return 0;
 800428a:	2300      	movs	r3, #0
 800428c:	e04d      	b.n	800432a <OLED_UpdateAnimation+0xb2>

    uint32_t elapsedTime = currentTime - anim->startTime;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	683a      	ldr	r2, [r7, #0]
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	617b      	str	r3, [r7, #20]
    // 动画完成
    if (elapsedTime >= anim->duration || anim->currentValue == anim->endValue) // 如果我的目标在指定的点上，也关闭isActive
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	697a      	ldr	r2, [r7, #20]
 800429e:	429a      	cmp	r2, r3
 80042a0:	d20a      	bcs.n	80042b8 <OLED_UpdateAnimation+0x40>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	691a      	ldr	r2, [r3, #16]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	4619      	mov	r1, r3
 80042ac:	4610      	mov	r0, r2
 80042ae:	f7fc fa01 	bl	80006b4 <__aeabi_fcmpeq>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d008      	beq.n	80042ca <OLED_UpdateAnimation+0x52>
    {
        anim->currentValue = anim->endValue;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	68da      	ldr	r2, [r3, #12]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	611a      	str	r2, [r3, #16]
        anim->isActive = 0;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	751a      	strb	r2, [r3, #20]
        return 0;
 80042c6:	2300      	movs	r3, #0
 80042c8:	e02f      	b.n	800432a <OLED_UpdateAnimation+0xb2>
    }

    // 计算当前进度 (0.0 - 1.0)
    float progress = (float)elapsedTime / anim->duration;
 80042ca:	6978      	ldr	r0, [r7, #20]
 80042cc:	f7fc f806 	bl	80002dc <__aeabi_ui2f>
 80042d0:	4604      	mov	r4, r0
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7fc f800 	bl	80002dc <__aeabi_ui2f>
 80042dc:	4603      	mov	r3, r0
 80042de:	4619      	mov	r1, r3
 80042e0:	4620      	mov	r0, r4
 80042e2:	f7fc f907 	bl	80004f4 <__aeabi_fdiv>
 80042e6:	4603      	mov	r3, r0
 80042e8:	613b      	str	r3, [r7, #16]

    // 应用缓动函数
    float easedProgress = GetEaseValue(progress, anim->easeType);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	7d5b      	ldrb	r3, [r3, #21]
 80042ee:	4619      	mov	r1, r3
 80042f0:	6938      	ldr	r0, [r7, #16]
 80042f2:	f7ff fedd 	bl	80040b0 <GetEaseValue>
 80042f6:	60f8      	str	r0, [r7, #12]

    // 计算当前值
    anim->currentValue = anim->startValue + (anim->endValue - anim->startValue) * easedProgress;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	689c      	ldr	r4, [r3, #8]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	68da      	ldr	r2, [r3, #12]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	4619      	mov	r1, r3
 8004306:	4610      	mov	r0, r2
 8004308:	f7fb ff36 	bl	8000178 <__aeabi_fsub>
 800430c:	4603      	mov	r3, r0
 800430e:	68f9      	ldr	r1, [r7, #12]
 8004310:	4618      	mov	r0, r3
 8004312:	f7fc f83b 	bl	800038c <__aeabi_fmul>
 8004316:	4603      	mov	r3, r0
 8004318:	4619      	mov	r1, r3
 800431a:	4620      	mov	r0, r4
 800431c:	f7fb ff2e 	bl	800017c <__addsf3>
 8004320:	4603      	mov	r3, r0
 8004322:	461a      	mov	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	611a      	str	r2, [r3, #16]

    return 1;
 8004328:	2301      	movs	r3, #1
}
 800432a:	4618      	mov	r0, r3
 800432c:	371c      	adds	r7, #28
 800432e:	46bd      	mov	sp, r7
 8004330:	bd90      	pop	{r4, r7, pc}

08004332 <OLED_GetAnimationValue>:

// 获取当前动画值
float OLED_GetAnimationValue(Animation_t *anim)
{
 8004332:	b480      	push	{r7}
 8004334:	b083      	sub	sp, #12
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
    return anim->currentValue;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	691b      	ldr	r3, [r3, #16]
}
 800433e:	4618      	mov	r0, r3
 8004340:	370c      	adds	r7, #12
 8004342:	46bd      	mov	sp, r7
 8004344:	bc80      	pop	{r7}
 8004346:	4770      	bx	lr

08004348 <OLED_InitAnimationManager>:
AnimationManager_t Status_AnimationManager;
AnimationManager_t g_Title_AnimationManager; // 菜单动画管理器
AnimationManager_t g_AnimationManager; // 全局动画管理器

void OLED_InitAnimationManager(AnimationManager_t *manager) // 这是初始化一个动画管理器，填入你的manager名字，在系统初始化时候调用它
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
    manager->count = 0;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	f883 25f0 	strb.w	r2, [r3, #1520]	@ 0x5f0
    memset(manager->taggedAnimations, 0, sizeof(manager->taggedAnimations));
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f44f 62be 	mov.w	r2, #1520	@ 0x5f0
 800435e:	2100      	movs	r1, #0
 8004360:	4618      	mov	r0, r3
 8004362:	f003 fb02 	bl	800796a <memset>
}
 8004366:	bf00      	nop
 8004368:	3708      	adds	r7, #8
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}

0800436e <OLED_FindTaggedAnimation>:

TaggedAnimation_t *OLED_FindTaggedAnimation(AnimationManager_t *manager, const char *tag) // 查找对应manager的标签对应的动画tag
{
 800436e:	b580      	push	{r7, lr}
 8004370:	b084      	sub	sp, #16
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
 8004376:	6039      	str	r1, [r7, #0]
    for (uint8_t i = 0; i < manager->count; i++)
 8004378:	2300      	movs	r3, #0
 800437a:	73fb      	strb	r3, [r7, #15]
 800437c:	e016      	b.n	80043ac <OLED_FindTaggedAnimation+0x3e>
    {
        if (strcmp(manager->taggedAnimations[i].tag, tag) == 0)
 800437e:	7bfb      	ldrb	r3, [r7, #15]
 8004380:	224c      	movs	r2, #76	@ 0x4c
 8004382:	fb02 f303 	mul.w	r3, r2, r3
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	4413      	add	r3, r2
 800438a:	6839      	ldr	r1, [r7, #0]
 800438c:	4618      	mov	r0, r3
 800438e:	f7fb fedd 	bl	800014c <strcmp>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d106      	bne.n	80043a6 <OLED_FindTaggedAnimation+0x38>
        {
            return &manager->taggedAnimations[i];
 8004398:	7bfb      	ldrb	r3, [r7, #15]
 800439a:	224c      	movs	r2, #76	@ 0x4c
 800439c:	fb02 f303 	mul.w	r3, r2, r3
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	4413      	add	r3, r2
 80043a4:	e009      	b.n	80043ba <OLED_FindTaggedAnimation+0x4c>
    for (uint8_t i = 0; i < manager->count; i++)
 80043a6:	7bfb      	ldrb	r3, [r7, #15]
 80043a8:	3301      	adds	r3, #1
 80043aa:	73fb      	strb	r3, [r7, #15]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f893 35f0 	ldrb.w	r3, [r3, #1520]	@ 0x5f0
 80043b2:	7bfa      	ldrb	r2, [r7, #15]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d3e2      	bcc.n	800437e <OLED_FindTaggedAnimation+0x10>
        }
    }
    return NULL;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3710      	adds	r7, #16
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}

080043c2 <OLED_GetObjectPosition>:

uint8_t OLED_GetObjectPosition(AnimationManager_t *manager, const char *tag, float *x, float *y) // 获取tag当前位置
{
 80043c2:	b580      	push	{r7, lr}
 80043c4:	b086      	sub	sp, #24
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	60f8      	str	r0, [r7, #12]
 80043ca:	60b9      	str	r1, [r7, #8]
 80043cc:	607a      	str	r2, [r7, #4]
 80043ce:	603b      	str	r3, [r7, #0]
    TaggedAnimation_t *anim = OLED_FindTaggedAnimation(manager, tag);
 80043d0:	68b9      	ldr	r1, [r7, #8]
 80043d2:	68f8      	ldr	r0, [r7, #12]
 80043d4:	f7ff ffcb 	bl	800436e <OLED_FindTaggedAnimation>
 80043d8:	6178      	str	r0, [r7, #20]
    if (anim)
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d00f      	beq.n	8004400 <OLED_GetObjectPosition+0x3e>
    {
        if (x)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d003      	beq.n	80043ee <OLED_GetObjectPosition+0x2c>
            *x = anim->currentX;
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	601a      	str	r2, [r3, #0]
        if (y)
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d003      	beq.n	80043fc <OLED_GetObjectPosition+0x3a>
            *y = anim->currentY;
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	601a      	str	r2, [r3, #0]
        return 1;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e000      	b.n	8004402 <OLED_GetObjectPosition+0x40>
    }
    return 0;
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	3718      	adds	r7, #24
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}

0800440a <OLED_MoveObject>:

// 移动指定标签的对象
void OLED_MoveObject(AnimationManager_t *manager, const char *tag,
                     float startX, float startY, float targetX, float targetY,
                     uint32_t duration, EaseType_t easeType) // 这个函数是用来移动一个对象的，tag是对象的标签，startX和startY是起始坐标，targetX和targetY是目标坐标，duration是动画持续时间，easeType是缓动类型
{
 800440a:	b580      	push	{r7, lr}
 800440c:	b088      	sub	sp, #32
 800440e:	af02      	add	r7, sp, #8
 8004410:	60f8      	str	r0, [r7, #12]
 8004412:	60b9      	str	r1, [r7, #8]
 8004414:	607a      	str	r2, [r7, #4]
 8004416:	603b      	str	r3, [r7, #0]
    // 查找已存在的动画
    TaggedAnimation_t *anim = OLED_FindTaggedAnimation(manager, tag);
 8004418:	68b9      	ldr	r1, [r7, #8]
 800441a:	68f8      	ldr	r0, [r7, #12]
 800441c:	f7ff ffa7 	bl	800436e <OLED_FindTaggedAnimation>
 8004420:	6178      	str	r0, [r7, #20]

    // 如果没找到并且还有可用槽位，创建新的动画
    if (anim == NULL)
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d122      	bne.n	800446e <OLED_MoveObject+0x64>
    {
        if (manager->count >= MAX_ANIMATIONS)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f893 35f0 	ldrb.w	r3, [r3, #1520]	@ 0x5f0
 800442e:	2b13      	cmp	r3, #19
 8004430:	d838      	bhi.n	80044a4 <OLED_MoveObject+0x9a>
            return; // 动画已满，无法添加

        anim = &manager->taggedAnimations[manager->count++];
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f893 35f0 	ldrb.w	r3, [r3, #1520]	@ 0x5f0
 8004438:	1c5a      	adds	r2, r3, #1
 800443a:	b2d1      	uxtb	r1, r2
 800443c:	68fa      	ldr	r2, [r7, #12]
 800443e:	f882 15f0 	strb.w	r1, [r2, #1520]	@ 0x5f0
 8004442:	461a      	mov	r2, r3
 8004444:	234c      	movs	r3, #76	@ 0x4c
 8004446:	fb02 f303 	mul.w	r3, r2, r3
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	4413      	add	r3, r2
 800444e:	617b      	str	r3, [r7, #20]
        strncpy(anim->tag, tag, sizeof(anim->tag) - 1);
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	220f      	movs	r2, #15
 8004454:	68b9      	ldr	r1, [r7, #8]
 8004456:	4618      	mov	r0, r3
 8004458:	f003 fa8f 	bl	800797a <strncpy>
        anim->tag[sizeof(anim->tag) - 1] = '\0'; // 确保字符串结束
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	2200      	movs	r2, #0
 8004460:	73da      	strb	r2, [r3, #15]
        anim->currentX = startX;
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	645a      	str	r2, [r3, #68]	@ 0x44
        anim->currentY = startY;
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	683a      	ldr	r2, [r7, #0]
 800446c:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    // 初始化或更新X和Y坐标的动画
    OLED_InitAnimation(&anim->xAnimation, startX, targetX, duration, easeType);
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	f103 0010 	add.w	r0, r3, #16
 8004474:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004478:	9300      	str	r3, [sp, #0]
 800447a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800447c:	6a3a      	ldr	r2, [r7, #32]
 800447e:	6879      	ldr	r1, [r7, #4]
 8004480:	f7ff fed8 	bl	8004234 <OLED_InitAnimation>
    OLED_InitAnimation(&anim->yAnimation, startY, targetY, duration, easeType);
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800448a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800448e:	9300      	str	r3, [sp, #0]
 8004490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004492:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004494:	6839      	ldr	r1, [r7, #0]
 8004496:	f7ff fecd 	bl	8004234 <OLED_InitAnimation>
    anim->isActive = 1;
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	2201      	movs	r2, #1
 800449e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80044a2:	e000      	b.n	80044a6 <OLED_MoveObject+0x9c>
            return; // 动画已满，无法添加
 80044a4:	bf00      	nop
}
 80044a6:	3718      	adds	r7, #24
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <OLED_UpdateAnimationManager>:

// 更新manager里面的所有动画!
void OLED_UpdateAnimationManager(AnimationManager_t *manager) //! 这里需要使用OLED_UpdateDisplayVSync()来更新显示
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b086      	sub	sp, #24
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
    uint32_t currentTime = HAL_GetTick();
 80044b4:	f000 fca8 	bl	8004e08 <HAL_GetTick>
 80044b8:	6138      	str	r0, [r7, #16]

    for (uint8_t i = 0; i < manager->count; i++)
 80044ba:	2300      	movs	r3, #0
 80044bc:	75fb      	strb	r3, [r7, #23]
 80044be:	e03a      	b.n	8004536 <OLED_UpdateAnimationManager+0x8a>
    {
        TaggedAnimation_t *anim = &manager->taggedAnimations[i];
 80044c0:	7dfb      	ldrb	r3, [r7, #23]
 80044c2:	224c      	movs	r2, #76	@ 0x4c
 80044c4:	fb02 f303 	mul.w	r3, r2, r3
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	4413      	add	r3, r2
 80044cc:	60fb      	str	r3, [r7, #12]
        if (!anim->isActive)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d02a      	beq.n	800452e <OLED_UpdateAnimationManager+0x82>
            continue;

        uint8_t activeX = OLED_UpdateAnimation(&anim->xAnimation, currentTime);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	3310      	adds	r3, #16
 80044dc:	6939      	ldr	r1, [r7, #16]
 80044de:	4618      	mov	r0, r3
 80044e0:	f7ff feca 	bl	8004278 <OLED_UpdateAnimation>
 80044e4:	4603      	mov	r3, r0
 80044e6:	72fb      	strb	r3, [r7, #11]
        uint8_t activeY = OLED_UpdateAnimation(&anim->yAnimation, currentTime);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	3328      	adds	r3, #40	@ 0x28
 80044ec:	6939      	ldr	r1, [r7, #16]
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7ff fec2 	bl	8004278 <OLED_UpdateAnimation>
 80044f4:	4603      	mov	r3, r0
 80044f6:	72bb      	strb	r3, [r7, #10]

        anim->currentX = OLED_GetAnimationValue(&anim->xAnimation);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	3310      	adds	r3, #16
 80044fc:	4618      	mov	r0, r3
 80044fe:	f7ff ff18 	bl	8004332 <OLED_GetAnimationValue>
 8004502:	4602      	mov	r2, r0
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	645a      	str	r2, [r3, #68]	@ 0x44
        anim->currentY = OLED_GetAnimationValue(&anim->yAnimation);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	3328      	adds	r3, #40	@ 0x28
 800450c:	4618      	mov	r0, r3
 800450e:	f7ff ff10 	bl	8004332 <OLED_GetAnimationValue>
 8004512:	4602      	mov	r2, r0
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	649a      	str	r2, [r3, #72]	@ 0x48

        // 如果两个动画都结束，则标记该对象动画为非活跃
        if (!activeX && !activeY)
 8004518:	7afb      	ldrb	r3, [r7, #11]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d108      	bne.n	8004530 <OLED_UpdateAnimationManager+0x84>
 800451e:	7abb      	ldrb	r3, [r7, #10]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d105      	bne.n	8004530 <OLED_UpdateAnimationManager+0x84>
            anim->isActive = 0;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800452c:	e000      	b.n	8004530 <OLED_UpdateAnimationManager+0x84>
            continue;
 800452e:	bf00      	nop
    for (uint8_t i = 0; i < manager->count; i++)
 8004530:	7dfb      	ldrb	r3, [r7, #23]
 8004532:	3301      	adds	r3, #1
 8004534:	75fb      	strb	r3, [r7, #23]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f893 35f0 	ldrb.w	r3, [r3, #1520]	@ 0x5f0
 800453c:	7dfa      	ldrb	r2, [r7, #23]
 800453e:	429a      	cmp	r2, r3
 8004540:	d3be      	bcc.n	80044c0 <OLED_UpdateAnimationManager+0x14>
    }
}
 8004542:	bf00      	nop
 8004544:	bf00      	nop
 8004546:	3718      	adds	r7, #24
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <OLED_GetAnimationStates>:

uint8_t OLED_GetAnimationStates(AnimationManager_t *manager, const char *tag) // 返回值是1表示活跃，0表示非活跃
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
    TaggedAnimation_t *anim = OLED_FindTaggedAnimation(manager, tag);
 8004556:	6839      	ldr	r1, [r7, #0]
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f7ff ff08 	bl	800436e <OLED_FindTaggedAnimation>
 800455e:	60f8      	str	r0, [r7, #12]
    if (anim)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d003      	beq.n	800456e <OLED_GetAnimationStates+0x22>
    {
        return anim->isActive;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800456c:	e000      	b.n	8004570 <OLED_GetAnimationStates+0x24>
    }
    return 0; // 如果没有找到，返回0表示非活跃
 800456e:	2300      	movs	r3, #0
}
 8004570:	4618      	mov	r0, r3
 8004572:	3710      	adds	r7, #16
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <OLED_DoTweenObject>:

// 移动指定标签的对象到目标坐标。
// 如果对象已在向同一目标动画且动画处于活动状态，则不执行任何操作。
// 否则，它会中断当前动画（如果活动）并从当前位置开始新的动画。
void OLED_DoTweenObject(AnimationManager_t *manager, const char *tag, float targetX, float targetY, uint32_t duration, EaseType_t easeType)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b08a      	sub	sp, #40	@ 0x28
 800457c:	af04      	add	r7, sp, #16
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
 8004584:	603b      	str	r3, [r7, #0]
    TaggedAnimation_t *anim = OLED_FindTaggedAnimation(manager, tag);
 8004586:	68b9      	ldr	r1, [r7, #8]
 8004588:	68f8      	ldr	r0, [r7, #12]
 800458a:	f7ff fef0 	bl	800436e <OLED_FindTaggedAnimation>
 800458e:	6178      	str	r0, [r7, #20]

    if (anim == NULL)
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d029      	beq.n	80045ea <OLED_DoTweenObject+0x72>
        // 但这需要为新对象定义 initialX, initialY。
        return;
    }

    // 检查动画是否已处于活动状态并且已经朝向相同的目标
    if (anim->isActive &&
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800459c:	2b00      	cmp	r3, #0
 800459e:	d011      	beq.n	80045c4 <OLED_DoTweenObject+0x4c>
        anim->xAnimation.endValue == targetX &&
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	69db      	ldr	r3, [r3, #28]
    if (anim->isActive &&
 80045a4:	4619      	mov	r1, r3
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f7fc f884 	bl	80006b4 <__aeabi_fcmpeq>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d008      	beq.n	80045c4 <OLED_DoTweenObject+0x4c>
        anim->yAnimation.endValue == targetY)
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
        anim->xAnimation.endValue == targetX &&
 80045b6:	4619      	mov	r1, r3
 80045b8:	6838      	ldr	r0, [r7, #0]
 80045ba:	f7fc f87b 	bl	80006b4 <__aeabi_fcmpeq>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d114      	bne.n	80045ee <OLED_DoTweenObject+0x76>
        return;
    }

    // 否则，（重新）启动动画到新目标
    // OLED_MoveObject 将从 anim->currentX, anim->currentY 开始动画
    OLED_MoveObject(manager, tag, anim->currentX, anim->currentY, targetX, targetY, duration, easeType);
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 80045cc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80045d0:	9303      	str	r3, [sp, #12]
 80045d2:	6a3b      	ldr	r3, [r7, #32]
 80045d4:	9302      	str	r3, [sp, #8]
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	9301      	str	r3, [sp, #4]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	9300      	str	r3, [sp, #0]
 80045de:	460b      	mov	r3, r1
 80045e0:	68b9      	ldr	r1, [r7, #8]
 80045e2:	68f8      	ldr	r0, [r7, #12]
 80045e4:	f7ff ff11 	bl	800440a <OLED_MoveObject>
 80045e8:	e002      	b.n	80045f0 <OLED_DoTweenObject+0x78>
        return;
 80045ea:	bf00      	nop
 80045ec:	e000      	b.n	80045f0 <OLED_DoTweenObject+0x78>
        return;
 80045ee:	bf00      	nop
}
 80045f0:	3718      	adds	r7, #24
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}

080045f6 <OLED_DrawTitleBar>:

#pragma region OLED_EPICFUL_UI

// 绘制UI标题栏
void OLED_DrawTitleBar(char *title) // 确保标题长度不超过22个字符 //! UPDATEDISPLAY REQUIRED
{
 80045f6:	b580      	push	{r7, lr}
 80045f8:	b086      	sub	sp, #24
 80045fa:	af02      	add	r7, sp, #8
 80045fc:	6078      	str	r0, [r7, #4]
    unsigned char titleLength = strlen(title) * 6;
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f7fb fdae 	bl	8000160 <strlen>
 8004604:	4603      	mov	r3, r0
 8004606:	b2db      	uxtb	r3, r3
 8004608:	461a      	mov	r2, r3
 800460a:	0052      	lsls	r2, r2, #1
 800460c:	4413      	add	r3, r2
 800460e:	005b      	lsls	r3, r3, #1
 8004610:	73fb      	strb	r3, [r7, #15]

    // 绘制标题栏背景 (白色填充)
    OLED_DrawFilledRectangle(0, 0, OLED_WIDTH, 8, 1);
 8004612:	2301      	movs	r3, #1
 8004614:	9300      	str	r3, [sp, #0]
 8004616:	2308      	movs	r3, #8
 8004618:	2280      	movs	r2, #128	@ 0x80
 800461a:	2100      	movs	r1, #0
 800461c:	2000      	movs	r0, #0
 800461e:	f000 f810 	bl	8004642 <OLED_DrawFilledRectangle>

    // 显示标题 (黑底白字，反色效果)
    OLED_DisplayStringInverted((OLED_WIDTH - titleLength) / 2, 0, title, 1);
 8004622:	7bfb      	ldrb	r3, [r7, #15]
 8004624:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8004628:	0fda      	lsrs	r2, r3, #31
 800462a:	4413      	add	r3, r2
 800462c:	105b      	asrs	r3, r3, #1
 800462e:	b218      	sxth	r0, r3
 8004630:	2301      	movs	r3, #1
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	2100      	movs	r1, #0
 8004636:	f7fd fa9a 	bl	8001b6e <OLED_DisplayStringInverted>
}
 800463a:	bf00      	nop
 800463c:	3710      	adds	r7, #16
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}

08004642 <OLED_DrawFilledRectangle>:
    }
}

// 绘制填充矩形
void OLED_DrawFilledRectangle(int16_t x, int16_t y, uint8_t width, uint8_t height, uint8_t color) //! UPDATEDISPLAY REQUIRED
{
 8004642:	b590      	push	{r4, r7, lr}
 8004644:	b087      	sub	sp, #28
 8004646:	af00      	add	r7, sp, #0
 8004648:	4604      	mov	r4, r0
 800464a:	4608      	mov	r0, r1
 800464c:	4611      	mov	r1, r2
 800464e:	461a      	mov	r2, r3
 8004650:	4623      	mov	r3, r4
 8004652:	80fb      	strh	r3, [r7, #6]
 8004654:	4603      	mov	r3, r0
 8004656:	80bb      	strh	r3, [r7, #4]
 8004658:	460b      	mov	r3, r1
 800465a:	70fb      	strb	r3, [r7, #3]
 800465c:	4613      	mov	r3, r2
 800465e:	70bb      	strb	r3, [r7, #2]
    // Initial check for zero dimensions
    if (width == 0 || height == 0)
 8004660:	78fb      	ldrb	r3, [r7, #3]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d07e      	beq.n	8004764 <OLED_DrawFilledRectangle+0x122>
 8004666:	78bb      	ldrb	r3, [r7, #2]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d07b      	beq.n	8004764 <OLED_DrawFilledRectangle+0x122>
    {
        return;
    }

    // Use int16_t for width and height internally for clipping calculations
    int16_t current_width = width;
 800466c:	78fb      	ldrb	r3, [r7, #3]
 800466e:	82fb      	strh	r3, [r7, #22]
    int16_t current_height = height;
 8004670:	78bb      	ldrb	r3, [r7, #2]
 8004672:	82bb      	strh	r3, [r7, #20]

    // Clip left edge: if x is negative, adjust width and set x to 0
    if (x < 0)
 8004674:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004678:	2b00      	cmp	r3, #0
 800467a:	da06      	bge.n	800468a <OLED_DrawFilledRectangle+0x48>
    {
        current_width += x; // x is negative, so this reduces width
 800467c:	8afa      	ldrh	r2, [r7, #22]
 800467e:	88fb      	ldrh	r3, [r7, #6]
 8004680:	4413      	add	r3, r2
 8004682:	b29b      	uxth	r3, r3
 8004684:	82fb      	strh	r3, [r7, #22]
        x = 0;
 8004686:	2300      	movs	r3, #0
 8004688:	80fb      	strh	r3, [r7, #6]
    }

    // Clip top edge: if y is negative, adjust height and set y to 0
    if (y < 0)
 800468a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800468e:	2b00      	cmp	r3, #0
 8004690:	da06      	bge.n	80046a0 <OLED_DrawFilledRectangle+0x5e>
    {
        current_height += y; // y is negative, so this reduces height
 8004692:	8aba      	ldrh	r2, [r7, #20]
 8004694:	88bb      	ldrh	r3, [r7, #4]
 8004696:	4413      	add	r3, r2
 8004698:	b29b      	uxth	r3, r3
 800469a:	82bb      	strh	r3, [r7, #20]
        y = 0;
 800469c:	2300      	movs	r3, #0
 800469e:	80bb      	strh	r3, [r7, #4]
    }

    // If width or height became non-positive after left/top clipping, nothing to draw
    if (current_width <= 0 || current_height <= 0)
 80046a0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	dd5f      	ble.n	8004768 <OLED_DrawFilledRectangle+0x126>
 80046a8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	dd5b      	ble.n	8004768 <OLED_DrawFilledRectangle+0x126>
        return;
    }

    // Check if the adjusted rectangle is entirely off-screen to the right or bottom
    // At this point, x and y are >= 0.
    if (x >= OLED_WIDTH || y >= OLED_HEIGHT)
 80046b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80046b4:	2b7f      	cmp	r3, #127	@ 0x7f
 80046b6:	dc59      	bgt.n	800476c <OLED_DrawFilledRectangle+0x12a>
 80046b8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80046bc:	2b3f      	cmp	r3, #63	@ 0x3f
 80046be:	dc55      	bgt.n	800476c <OLED_DrawFilledRectangle+0x12a>
    {
        return;
    }

    // Clip right edge: if x + current_width extends beyond OLED_WIDTH
    if (x + current_width > OLED_WIDTH)
 80046c0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80046c4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80046c8:	4413      	add	r3, r2
 80046ca:	2b80      	cmp	r3, #128	@ 0x80
 80046cc:	dd04      	ble.n	80046d8 <OLED_DrawFilledRectangle+0x96>
    {
        current_width = OLED_WIDTH - x;
 80046ce:	88fb      	ldrh	r3, [r7, #6]
 80046d0:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	82fb      	strh	r3, [r7, #22]
    }

    // Clip bottom edge: if y + current_height extends beyond OLED_HEIGHT
    if (y + current_height > OLED_HEIGHT)
 80046d8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80046dc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80046e0:	4413      	add	r3, r2
 80046e2:	2b40      	cmp	r3, #64	@ 0x40
 80046e4:	dd04      	ble.n	80046f0 <OLED_DrawFilledRectangle+0xae>
    {
        current_height = OLED_HEIGHT - y;
 80046e6:	88bb      	ldrh	r3, [r7, #4]
 80046e8:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	82bb      	strh	r3, [r7, #20]
    }

    // If width or height became non-positive after right/bottom clipping, nothing to draw
    if (current_width <= 0 || current_height <= 0)
 80046f0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	dd3b      	ble.n	8004770 <OLED_DrawFilledRectangle+0x12e>
 80046f8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	dd37      	ble.n	8004770 <OLED_DrawFilledRectangle+0x12e>
    {
        return;
    }

    // Cast coordinates and dimensions to uint8_t for drawing
    uint8_t final_x = (uint8_t)x;
 8004700:	88fb      	ldrh	r3, [r7, #6]
 8004702:	747b      	strb	r3, [r7, #17]
    uint8_t final_y = (uint8_t)y;
 8004704:	88bb      	ldrh	r3, [r7, #4]
 8004706:	743b      	strb	r3, [r7, #16]
    uint8_t final_width = (uint8_t)current_width;
 8004708:	8afb      	ldrh	r3, [r7, #22]
 800470a:	73fb      	strb	r3, [r7, #15]
    uint8_t final_height = (uint8_t)current_height;
 800470c:	8abb      	ldrh	r3, [r7, #20]
 800470e:	73bb      	strb	r3, [r7, #14]

    uint8_t x2 = final_x + final_width - 1;
 8004710:	7c7a      	ldrb	r2, [r7, #17]
 8004712:	7bfb      	ldrb	r3, [r7, #15]
 8004714:	4413      	add	r3, r2
 8004716:	b2db      	uxtb	r3, r3
 8004718:	3b01      	subs	r3, #1
 800471a:	737b      	strb	r3, [r7, #13]
    uint8_t y2 = final_y + final_height - 1;
 800471c:	7c3a      	ldrb	r2, [r7, #16]
 800471e:	7bbb      	ldrb	r3, [r7, #14]
 8004720:	4413      	add	r3, r2
 8004722:	b2db      	uxtb	r3, r3
 8004724:	3b01      	subs	r3, #1
 8004726:	733b      	strb	r3, [r7, #12]

    // 逐像素填充
    for (uint8_t j = final_y; j <= y2; j++)
 8004728:	7c3b      	ldrb	r3, [r7, #16]
 800472a:	74fb      	strb	r3, [r7, #19]
 800472c:	e015      	b.n	800475a <OLED_DrawFilledRectangle+0x118>
    {
        for (uint8_t i = final_x; i <= x2; i++)
 800472e:	7c7b      	ldrb	r3, [r7, #17]
 8004730:	74bb      	strb	r3, [r7, #18]
 8004732:	e00b      	b.n	800474c <OLED_DrawFilledRectangle+0x10a>
        {
            OLED_WritePixel(i, j, color);
 8004734:	7cbb      	ldrb	r3, [r7, #18]
 8004736:	b21b      	sxth	r3, r3
 8004738:	7cfa      	ldrb	r2, [r7, #19]
 800473a:	b211      	sxth	r1, r2
 800473c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8004740:	4618      	mov	r0, r3
 8004742:	f7fc fea7 	bl	8001494 <OLED_WritePixel>
        for (uint8_t i = final_x; i <= x2; i++)
 8004746:	7cbb      	ldrb	r3, [r7, #18]
 8004748:	3301      	adds	r3, #1
 800474a:	74bb      	strb	r3, [r7, #18]
 800474c:	7cba      	ldrb	r2, [r7, #18]
 800474e:	7b7b      	ldrb	r3, [r7, #13]
 8004750:	429a      	cmp	r2, r3
 8004752:	d9ef      	bls.n	8004734 <OLED_DrawFilledRectangle+0xf2>
    for (uint8_t j = final_y; j <= y2; j++)
 8004754:	7cfb      	ldrb	r3, [r7, #19]
 8004756:	3301      	adds	r3, #1
 8004758:	74fb      	strb	r3, [r7, #19]
 800475a:	7cfa      	ldrb	r2, [r7, #19]
 800475c:	7b3b      	ldrb	r3, [r7, #12]
 800475e:	429a      	cmp	r2, r3
 8004760:	d9e5      	bls.n	800472e <OLED_DrawFilledRectangle+0xec>
 8004762:	e006      	b.n	8004772 <OLED_DrawFilledRectangle+0x130>
        return;
 8004764:	bf00      	nop
 8004766:	e004      	b.n	8004772 <OLED_DrawFilledRectangle+0x130>
        return;
 8004768:	bf00      	nop
 800476a:	e002      	b.n	8004772 <OLED_DrawFilledRectangle+0x130>
        return;
 800476c:	bf00      	nop
 800476e:	e000      	b.n	8004772 <OLED_DrawFilledRectangle+0x130>
        return;
 8004770:	bf00      	nop
        }
    }
}
 8004772:	371c      	adds	r7, #28
 8004774:	46bd      	mov	sp, r7
 8004776:	bd90      	pop	{r4, r7, pc}

08004778 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004778:	b480      	push	{r7}
 800477a:	b085      	sub	sp, #20
 800477c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800477e:	4b15      	ldr	r3, [pc, #84]	@ (80047d4 <HAL_MspInit+0x5c>)
 8004780:	699b      	ldr	r3, [r3, #24]
 8004782:	4a14      	ldr	r2, [pc, #80]	@ (80047d4 <HAL_MspInit+0x5c>)
 8004784:	f043 0301 	orr.w	r3, r3, #1
 8004788:	6193      	str	r3, [r2, #24]
 800478a:	4b12      	ldr	r3, [pc, #72]	@ (80047d4 <HAL_MspInit+0x5c>)
 800478c:	699b      	ldr	r3, [r3, #24]
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	60bb      	str	r3, [r7, #8]
 8004794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004796:	4b0f      	ldr	r3, [pc, #60]	@ (80047d4 <HAL_MspInit+0x5c>)
 8004798:	69db      	ldr	r3, [r3, #28]
 800479a:	4a0e      	ldr	r2, [pc, #56]	@ (80047d4 <HAL_MspInit+0x5c>)
 800479c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047a0:	61d3      	str	r3, [r2, #28]
 80047a2:	4b0c      	ldr	r3, [pc, #48]	@ (80047d4 <HAL_MspInit+0x5c>)
 80047a4:	69db      	ldr	r3, [r3, #28]
 80047a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047aa:	607b      	str	r3, [r7, #4]
 80047ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80047ae:	4b0a      	ldr	r3, [pc, #40]	@ (80047d8 <HAL_MspInit+0x60>)
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	60fb      	str	r3, [r7, #12]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80047ba:	60fb      	str	r3, [r7, #12]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80047c2:	60fb      	str	r3, [r7, #12]
 80047c4:	4a04      	ldr	r2, [pc, #16]	@ (80047d8 <HAL_MspInit+0x60>)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80047ca:	bf00      	nop
 80047cc:	3714      	adds	r7, #20
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bc80      	pop	{r7}
 80047d2:	4770      	bx	lr
 80047d4:	40021000 	.word	0x40021000
 80047d8:	40010000 	.word	0x40010000

080047dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80047dc:	b480      	push	{r7}
 80047de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80047e0:	bf00      	nop
 80047e2:	e7fd      	b.n	80047e0 <NMI_Handler+0x4>

080047e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80047e4:	b480      	push	{r7}
 80047e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80047e8:	bf00      	nop
 80047ea:	e7fd      	b.n	80047e8 <HardFault_Handler+0x4>

080047ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80047ec:	b480      	push	{r7}
 80047ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80047f0:	bf00      	nop
 80047f2:	e7fd      	b.n	80047f0 <MemManage_Handler+0x4>

080047f4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80047f4:	b480      	push	{r7}
 80047f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80047f8:	bf00      	nop
 80047fa:	e7fd      	b.n	80047f8 <BusFault_Handler+0x4>

080047fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80047fc:	b480      	push	{r7}
 80047fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004800:	bf00      	nop
 8004802:	e7fd      	b.n	8004800 <UsageFault_Handler+0x4>

08004804 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004804:	b480      	push	{r7}
 8004806:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004808:	bf00      	nop
 800480a:	46bd      	mov	sp, r7
 800480c:	bc80      	pop	{r7}
 800480e:	4770      	bx	lr

08004810 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004810:	b480      	push	{r7}
 8004812:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004814:	bf00      	nop
 8004816:	46bd      	mov	sp, r7
 8004818:	bc80      	pop	{r7}
 800481a:	4770      	bx	lr

0800481c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800481c:	b480      	push	{r7}
 800481e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004820:	bf00      	nop
 8004822:	46bd      	mov	sp, r7
 8004824:	bc80      	pop	{r7}
 8004826:	4770      	bx	lr

08004828 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800482c:	f000 fada 	bl	8004de4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004830:	bf00      	nop
 8004832:	bd80      	pop	{r7, pc}

08004834 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8004838:	4802      	ldr	r0, [pc, #8]	@ (8004844 <DMA1_Channel6_IRQHandler+0x10>)
 800483a:	f000 fc7b 	bl	8005134 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800483e:	bf00      	nop
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	200002ec 	.word	0x200002ec

08004848 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004848:	b480      	push	{r7}
 800484a:	af00      	add	r7, sp, #0
  return 1;
 800484c:	2301      	movs	r3, #1
}
 800484e:	4618      	mov	r0, r3
 8004850:	46bd      	mov	sp, r7
 8004852:	bc80      	pop	{r7}
 8004854:	4770      	bx	lr

08004856 <_kill>:

int _kill(int pid, int sig)
{
 8004856:	b580      	push	{r7, lr}
 8004858:	b082      	sub	sp, #8
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
 800485e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004860:	f003 f8e4 	bl	8007a2c <__errno>
 8004864:	4603      	mov	r3, r0
 8004866:	2216      	movs	r2, #22
 8004868:	601a      	str	r2, [r3, #0]
  return -1;
 800486a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800486e:	4618      	mov	r0, r3
 8004870:	3708      	adds	r7, #8
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}

08004876 <_exit>:

void _exit (int status)
{
 8004876:	b580      	push	{r7, lr}
 8004878:	b082      	sub	sp, #8
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800487e:	f04f 31ff 	mov.w	r1, #4294967295
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f7ff ffe7 	bl	8004856 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004888:	bf00      	nop
 800488a:	e7fd      	b.n	8004888 <_exit+0x12>

0800488c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b086      	sub	sp, #24
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004898:	2300      	movs	r3, #0
 800489a:	617b      	str	r3, [r7, #20]
 800489c:	e00a      	b.n	80048b4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800489e:	f3af 8000 	nop.w
 80048a2:	4601      	mov	r1, r0
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	1c5a      	adds	r2, r3, #1
 80048a8:	60ba      	str	r2, [r7, #8]
 80048aa:	b2ca      	uxtb	r2, r1
 80048ac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	3301      	adds	r3, #1
 80048b2:	617b      	str	r3, [r7, #20]
 80048b4:	697a      	ldr	r2, [r7, #20]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	dbf0      	blt.n	800489e <_read+0x12>
  }

  return len;
 80048bc:	687b      	ldr	r3, [r7, #4]
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3718      	adds	r7, #24
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80048c6:	b580      	push	{r7, lr}
 80048c8:	b086      	sub	sp, #24
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	60f8      	str	r0, [r7, #12]
 80048ce:	60b9      	str	r1, [r7, #8]
 80048d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80048d2:	2300      	movs	r3, #0
 80048d4:	617b      	str	r3, [r7, #20]
 80048d6:	e009      	b.n	80048ec <_write+0x26>
  {
    __io_putchar(*ptr++);
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	1c5a      	adds	r2, r3, #1
 80048dc:	60ba      	str	r2, [r7, #8]
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	4618      	mov	r0, r3
 80048e2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	3301      	adds	r3, #1
 80048ea:	617b      	str	r3, [r7, #20]
 80048ec:	697a      	ldr	r2, [r7, #20]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	dbf1      	blt.n	80048d8 <_write+0x12>
  }
  return len;
 80048f4:	687b      	ldr	r3, [r7, #4]
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3718      	adds	r7, #24
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}

080048fe <_close>:

int _close(int file)
{
 80048fe:	b480      	push	{r7}
 8004900:	b083      	sub	sp, #12
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004906:	f04f 33ff 	mov.w	r3, #4294967295
}
 800490a:	4618      	mov	r0, r3
 800490c:	370c      	adds	r7, #12
 800490e:	46bd      	mov	sp, r7
 8004910:	bc80      	pop	{r7}
 8004912:	4770      	bx	lr

08004914 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004924:	605a      	str	r2, [r3, #4]
  return 0;
 8004926:	2300      	movs	r3, #0
}
 8004928:	4618      	mov	r0, r3
 800492a:	370c      	adds	r7, #12
 800492c:	46bd      	mov	sp, r7
 800492e:	bc80      	pop	{r7}
 8004930:	4770      	bx	lr

08004932 <_isatty>:

int _isatty(int file)
{
 8004932:	b480      	push	{r7}
 8004934:	b083      	sub	sp, #12
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800493a:	2301      	movs	r3, #1
}
 800493c:	4618      	mov	r0, r3
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	bc80      	pop	{r7}
 8004944:	4770      	bx	lr

08004946 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004946:	b480      	push	{r7}
 8004948:	b085      	sub	sp, #20
 800494a:	af00      	add	r7, sp, #0
 800494c:	60f8      	str	r0, [r7, #12]
 800494e:	60b9      	str	r1, [r7, #8]
 8004950:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004952:	2300      	movs	r3, #0
}
 8004954:	4618      	mov	r0, r3
 8004956:	3714      	adds	r7, #20
 8004958:	46bd      	mov	sp, r7
 800495a:	bc80      	pop	{r7}
 800495c:	4770      	bx	lr
	...

08004960 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b086      	sub	sp, #24
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004968:	4a14      	ldr	r2, [pc, #80]	@ (80049bc <_sbrk+0x5c>)
 800496a:	4b15      	ldr	r3, [pc, #84]	@ (80049c0 <_sbrk+0x60>)
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004974:	4b13      	ldr	r3, [pc, #76]	@ (80049c4 <_sbrk+0x64>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d102      	bne.n	8004982 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800497c:	4b11      	ldr	r3, [pc, #68]	@ (80049c4 <_sbrk+0x64>)
 800497e:	4a12      	ldr	r2, [pc, #72]	@ (80049c8 <_sbrk+0x68>)
 8004980:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004982:	4b10      	ldr	r3, [pc, #64]	@ (80049c4 <_sbrk+0x64>)
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4413      	add	r3, r2
 800498a:	693a      	ldr	r2, [r7, #16]
 800498c:	429a      	cmp	r2, r3
 800498e:	d207      	bcs.n	80049a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004990:	f003 f84c 	bl	8007a2c <__errno>
 8004994:	4603      	mov	r3, r0
 8004996:	220c      	movs	r2, #12
 8004998:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800499a:	f04f 33ff 	mov.w	r3, #4294967295
 800499e:	e009      	b.n	80049b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80049a0:	4b08      	ldr	r3, [pc, #32]	@ (80049c4 <_sbrk+0x64>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80049a6:	4b07      	ldr	r3, [pc, #28]	@ (80049c4 <_sbrk+0x64>)
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4413      	add	r3, r2
 80049ae:	4a05      	ldr	r2, [pc, #20]	@ (80049c4 <_sbrk+0x64>)
 80049b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80049b2:	68fb      	ldr	r3, [r7, #12]
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3718      	adds	r7, #24
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	20005000 	.word	0x20005000
 80049c0:	00000400 	.word	0x00000400
 80049c4:	20003ef8 	.word	0x20003ef8
 80049c8:	200040e0 	.word	0x200040e0

080049cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80049cc:	b480      	push	{r7}
 80049ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80049d0:	bf00      	nop
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bc80      	pop	{r7}
 80049d6:	4770      	bx	lr

080049d8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b096      	sub	sp, #88	@ 0x58
 80049dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80049de:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80049e2:	2200      	movs	r2, #0
 80049e4:	601a      	str	r2, [r3, #0]
 80049e6:	605a      	str	r2, [r3, #4]
 80049e8:	609a      	str	r2, [r3, #8]
 80049ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80049ec:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80049f0:	2200      	movs	r2, #0
 80049f2:	601a      	str	r2, [r3, #0]
 80049f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80049f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80049fa:	2200      	movs	r2, #0
 80049fc:	601a      	str	r2, [r3, #0]
 80049fe:	605a      	str	r2, [r3, #4]
 8004a00:	609a      	str	r2, [r3, #8]
 8004a02:	60da      	str	r2, [r3, #12]
 8004a04:	611a      	str	r2, [r3, #16]
 8004a06:	615a      	str	r2, [r3, #20]
 8004a08:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004a0a:	1d3b      	adds	r3, r7, #4
 8004a0c:	2220      	movs	r2, #32
 8004a0e:	2100      	movs	r1, #0
 8004a10:	4618      	mov	r0, r3
 8004a12:	f002 ffaa 	bl	800796a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004a16:	4b3f      	ldr	r3, [pc, #252]	@ (8004b14 <MX_TIM1_Init+0x13c>)
 8004a18:	4a3f      	ldr	r2, [pc, #252]	@ (8004b18 <MX_TIM1_Init+0x140>)
 8004a1a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 720-1;
 8004a1c:	4b3d      	ldr	r3, [pc, #244]	@ (8004b14 <MX_TIM1_Init+0x13c>)
 8004a1e:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8004a22:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a24:	4b3b      	ldr	r3, [pc, #236]	@ (8004b14 <MX_TIM1_Init+0x13c>)
 8004a26:	2200      	movs	r2, #0
 8004a28:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000-1;
 8004a2a:	4b3a      	ldr	r3, [pc, #232]	@ (8004b14 <MX_TIM1_Init+0x13c>)
 8004a2c:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8004a30:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004a32:	4b38      	ldr	r3, [pc, #224]	@ (8004b14 <MX_TIM1_Init+0x13c>)
 8004a34:	2200      	movs	r2, #0
 8004a36:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004a38:	4b36      	ldr	r3, [pc, #216]	@ (8004b14 <MX_TIM1_Init+0x13c>)
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004a3e:	4b35      	ldr	r3, [pc, #212]	@ (8004b14 <MX_TIM1_Init+0x13c>)
 8004a40:	2200      	movs	r2, #0
 8004a42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004a44:	4833      	ldr	r0, [pc, #204]	@ (8004b14 <MX_TIM1_Init+0x13c>)
 8004a46:	f001 fec7 	bl	80067d8 <HAL_TIM_Base_Init>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d001      	beq.n	8004a54 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8004a50:	f7fc fbcd 	bl	80011ee <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004a54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004a58:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004a5a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8004a5e:	4619      	mov	r1, r3
 8004a60:	482c      	ldr	r0, [pc, #176]	@ (8004b14 <MX_TIM1_Init+0x13c>)
 8004a62:	f002 f9f5 	bl	8006e50 <HAL_TIM_ConfigClockSource>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d001      	beq.n	8004a70 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8004a6c:	f7fc fbbf 	bl	80011ee <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004a70:	4828      	ldr	r0, [pc, #160]	@ (8004b14 <MX_TIM1_Init+0x13c>)
 8004a72:	f001 ff00 	bl	8006876 <HAL_TIM_PWM_Init>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d001      	beq.n	8004a80 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8004a7c:	f7fc fbb7 	bl	80011ee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004a80:	2300      	movs	r3, #0
 8004a82:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a84:	2300      	movs	r3, #0
 8004a86:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004a88:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	4821      	ldr	r0, [pc, #132]	@ (8004b14 <MX_TIM1_Init+0x13c>)
 8004a90:	f002 fd56 	bl	8007540 <HAL_TIMEx_MasterConfigSynchronization>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d001      	beq.n	8004a9e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8004a9a:	f7fc fba8 	bl	80011ee <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004a9e:	2360      	movs	r3, #96	@ 0x60
 8004aa0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004aba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004abe:	2204      	movs	r2, #4
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	4814      	ldr	r0, [pc, #80]	@ (8004b14 <MX_TIM1_Init+0x13c>)
 8004ac4:	f002 f902 	bl	8006ccc <HAL_TIM_PWM_ConfigChannel>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d001      	beq.n	8004ad2 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8004ace:	f7fc fb8e 	bl	80011ee <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004ada:	2300      	movs	r3, #0
 8004adc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004ae6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004aea:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004aec:	2300      	movs	r3, #0
 8004aee:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004af0:	1d3b      	adds	r3, r7, #4
 8004af2:	4619      	mov	r1, r3
 8004af4:	4807      	ldr	r0, [pc, #28]	@ (8004b14 <MX_TIM1_Init+0x13c>)
 8004af6:	f002 fd81 	bl	80075fc <HAL_TIMEx_ConfigBreakDeadTime>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d001      	beq.n	8004b04 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8004b00:	f7fc fb75 	bl	80011ee <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004b04:	4803      	ldr	r0, [pc, #12]	@ (8004b14 <MX_TIM1_Init+0x13c>)
 8004b06:	f000 f8cd 	bl	8004ca4 <HAL_TIM_MspPostInit>

}
 8004b0a:	bf00      	nop
 8004b0c:	3758      	adds	r7, #88	@ 0x58
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	20003efc 	.word	0x20003efc
 8004b18:	40012c00 	.word	0x40012c00

08004b1c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b08c      	sub	sp, #48	@ 0x30
 8004b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004b22:	f107 030c 	add.w	r3, r7, #12
 8004b26:	2224      	movs	r2, #36	@ 0x24
 8004b28:	2100      	movs	r1, #0
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f002 ff1d 	bl	800796a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b30:	1d3b      	adds	r3, r7, #4
 8004b32:	2200      	movs	r2, #0
 8004b34:	601a      	str	r2, [r3, #0]
 8004b36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004b38:	4b20      	ldr	r3, [pc, #128]	@ (8004bbc <MX_TIM3_Init+0xa0>)
 8004b3a:	4a21      	ldr	r2, [pc, #132]	@ (8004bc0 <MX_TIM3_Init+0xa4>)
 8004b3c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004b3e:	4b1f      	ldr	r3, [pc, #124]	@ (8004bbc <MX_TIM3_Init+0xa0>)
 8004b40:	2200      	movs	r2, #0
 8004b42:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b44:	4b1d      	ldr	r3, [pc, #116]	@ (8004bbc <MX_TIM3_Init+0xa0>)
 8004b46:	2200      	movs	r2, #0
 8004b48:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004b4a:	4b1c      	ldr	r3, [pc, #112]	@ (8004bbc <MX_TIM3_Init+0xa0>)
 8004b4c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004b50:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b52:	4b1a      	ldr	r3, [pc, #104]	@ (8004bbc <MX_TIM3_Init+0xa0>)
 8004b54:	2200      	movs	r2, #0
 8004b56:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b58:	4b18      	ldr	r3, [pc, #96]	@ (8004bbc <MX_TIM3_Init+0xa0>)
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004b62:	2300      	movs	r3, #0
 8004b64:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004b66:	2301      	movs	r3, #1
 8004b68:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004b72:	2300      	movs	r3, #0
 8004b74:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004b76:	2301      	movs	r3, #1
 8004b78:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8004b82:	f107 030c 	add.w	r3, r7, #12
 8004b86:	4619      	mov	r1, r3
 8004b88:	480c      	ldr	r0, [pc, #48]	@ (8004bbc <MX_TIM3_Init+0xa0>)
 8004b8a:	f001 ff6f 	bl	8006a6c <HAL_TIM_Encoder_Init>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d001      	beq.n	8004b98 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8004b94:	f7fc fb2b 	bl	80011ee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004ba0:	1d3b      	adds	r3, r7, #4
 8004ba2:	4619      	mov	r1, r3
 8004ba4:	4805      	ldr	r0, [pc, #20]	@ (8004bbc <MX_TIM3_Init+0xa0>)
 8004ba6:	f002 fccb 	bl	8007540 <HAL_TIMEx_MasterConfigSynchronization>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d001      	beq.n	8004bb4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8004bb0:	f7fc fb1d 	bl	80011ee <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004bb4:	bf00      	nop
 8004bb6:	3730      	adds	r7, #48	@ 0x30
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	20003f44 	.word	0x20003f44
 8004bc0:	40000400 	.word	0x40000400

08004bc4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b085      	sub	sp, #20
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a09      	ldr	r2, [pc, #36]	@ (8004bf8 <HAL_TIM_Base_MspInit+0x34>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d10b      	bne.n	8004bee <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004bd6:	4b09      	ldr	r3, [pc, #36]	@ (8004bfc <HAL_TIM_Base_MspInit+0x38>)
 8004bd8:	699b      	ldr	r3, [r3, #24]
 8004bda:	4a08      	ldr	r2, [pc, #32]	@ (8004bfc <HAL_TIM_Base_MspInit+0x38>)
 8004bdc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004be0:	6193      	str	r3, [r2, #24]
 8004be2:	4b06      	ldr	r3, [pc, #24]	@ (8004bfc <HAL_TIM_Base_MspInit+0x38>)
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004bea:	60fb      	str	r3, [r7, #12]
 8004bec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8004bee:	bf00      	nop
 8004bf0:	3714      	adds	r7, #20
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bc80      	pop	{r7}
 8004bf6:	4770      	bx	lr
 8004bf8:	40012c00 	.word	0x40012c00
 8004bfc:	40021000 	.word	0x40021000

08004c00 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b08a      	sub	sp, #40	@ 0x28
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c08:	f107 0314 	add.w	r3, r7, #20
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	601a      	str	r2, [r3, #0]
 8004c10:	605a      	str	r2, [r3, #4]
 8004c12:	609a      	str	r2, [r3, #8]
 8004c14:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM3)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a1e      	ldr	r2, [pc, #120]	@ (8004c94 <HAL_TIM_Encoder_MspInit+0x94>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d135      	bne.n	8004c8c <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004c20:	4b1d      	ldr	r3, [pc, #116]	@ (8004c98 <HAL_TIM_Encoder_MspInit+0x98>)
 8004c22:	69db      	ldr	r3, [r3, #28]
 8004c24:	4a1c      	ldr	r2, [pc, #112]	@ (8004c98 <HAL_TIM_Encoder_MspInit+0x98>)
 8004c26:	f043 0302 	orr.w	r3, r3, #2
 8004c2a:	61d3      	str	r3, [r2, #28]
 8004c2c:	4b1a      	ldr	r3, [pc, #104]	@ (8004c98 <HAL_TIM_Encoder_MspInit+0x98>)
 8004c2e:	69db      	ldr	r3, [r3, #28]
 8004c30:	f003 0302 	and.w	r3, r3, #2
 8004c34:	613b      	str	r3, [r7, #16]
 8004c36:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c38:	4b17      	ldr	r3, [pc, #92]	@ (8004c98 <HAL_TIM_Encoder_MspInit+0x98>)
 8004c3a:	699b      	ldr	r3, [r3, #24]
 8004c3c:	4a16      	ldr	r2, [pc, #88]	@ (8004c98 <HAL_TIM_Encoder_MspInit+0x98>)
 8004c3e:	f043 0308 	orr.w	r3, r3, #8
 8004c42:	6193      	str	r3, [r2, #24]
 8004c44:	4b14      	ldr	r3, [pc, #80]	@ (8004c98 <HAL_TIM_Encoder_MspInit+0x98>)
 8004c46:	699b      	ldr	r3, [r3, #24]
 8004c48:	f003 0308 	and.w	r3, r3, #8
 8004c4c:	60fb      	str	r3, [r7, #12]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Encoder_CH1_Pin|Encoder_CH2_Pin;
 8004c50:	2330      	movs	r3, #48	@ 0x30
 8004c52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004c54:	2300      	movs	r3, #0
 8004c56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c5c:	f107 0314 	add.w	r3, r7, #20
 8004c60:	4619      	mov	r1, r3
 8004c62:	480e      	ldr	r0, [pc, #56]	@ (8004c9c <HAL_TIM_Encoder_MspInit+0x9c>)
 8004c64:	f000 fb6c 	bl	8005340 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8004c68:	4b0d      	ldr	r3, [pc, #52]	@ (8004ca0 <HAL_TIM_Encoder_MspInit+0xa0>)
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c70:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004c74:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c78:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8004c7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c80:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004c84:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c86:	4a06      	ldr	r2, [pc, #24]	@ (8004ca0 <HAL_TIM_Encoder_MspInit+0xa0>)
 8004c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c8a:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8004c8c:	bf00      	nop
 8004c8e:	3728      	adds	r7, #40	@ 0x28
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	40000400 	.word	0x40000400
 8004c98:	40021000 	.word	0x40021000
 8004c9c:	40010c00 	.word	0x40010c00
 8004ca0:	40010000 	.word	0x40010000

08004ca4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b088      	sub	sp, #32
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cac:	f107 0310 	add.w	r3, r7, #16
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	601a      	str	r2, [r3, #0]
 8004cb4:	605a      	str	r2, [r3, #4]
 8004cb6:	609a      	str	r2, [r3, #8]
 8004cb8:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a10      	ldr	r2, [pc, #64]	@ (8004d00 <HAL_TIM_MspPostInit+0x5c>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d118      	bne.n	8004cf6 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cc4:	4b0f      	ldr	r3, [pc, #60]	@ (8004d04 <HAL_TIM_MspPostInit+0x60>)
 8004cc6:	699b      	ldr	r3, [r3, #24]
 8004cc8:	4a0e      	ldr	r2, [pc, #56]	@ (8004d04 <HAL_TIM_MspPostInit+0x60>)
 8004cca:	f043 0304 	orr.w	r3, r3, #4
 8004cce:	6193      	str	r3, [r2, #24]
 8004cd0:	4b0c      	ldr	r3, [pc, #48]	@ (8004d04 <HAL_TIM_MspPostInit+0x60>)
 8004cd2:	699b      	ldr	r3, [r3, #24]
 8004cd4:	f003 0304 	and.w	r3, r3, #4
 8004cd8:	60fb      	str	r3, [r7, #12]
 8004cda:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004cdc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004ce0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ce2:	2302      	movs	r3, #2
 8004ce4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ce6:	2302      	movs	r3, #2
 8004ce8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cea:	f107 0310 	add.w	r3, r7, #16
 8004cee:	4619      	mov	r1, r3
 8004cf0:	4805      	ldr	r0, [pc, #20]	@ (8004d08 <HAL_TIM_MspPostInit+0x64>)
 8004cf2:	f000 fb25 	bl	8005340 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004cf6:	bf00      	nop
 8004cf8:	3720      	adds	r7, #32
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	40012c00 	.word	0x40012c00
 8004d04:	40021000 	.word	0x40021000
 8004d08:	40010800 	.word	0x40010800

08004d0c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004d0c:	f7ff fe5e 	bl	80049cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004d10:	480b      	ldr	r0, [pc, #44]	@ (8004d40 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8004d12:	490c      	ldr	r1, [pc, #48]	@ (8004d44 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004d14:	4a0c      	ldr	r2, [pc, #48]	@ (8004d48 <LoopFillZerobss+0x16>)
  movs r3, #0
 8004d16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004d18:	e002      	b.n	8004d20 <LoopCopyDataInit>

08004d1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004d1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004d1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004d1e:	3304      	adds	r3, #4

08004d20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004d20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004d22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004d24:	d3f9      	bcc.n	8004d1a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004d26:	4a09      	ldr	r2, [pc, #36]	@ (8004d4c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004d28:	4c09      	ldr	r4, [pc, #36]	@ (8004d50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004d2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004d2c:	e001      	b.n	8004d32 <LoopFillZerobss>

08004d2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004d2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004d30:	3204      	adds	r2, #4

08004d32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004d32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004d34:	d3fb      	bcc.n	8004d2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004d36:	f002 fe7f 	bl	8007a38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004d3a:	f7fc f98b 	bl	8001054 <main>
  bx lr
 8004d3e:	4770      	bx	lr
  ldr r0, =_sdata
 8004d40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004d44:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8004d48:	0800a81c 	.word	0x0800a81c
  ldr r2, =_sbss
 8004d4c:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8004d50:	200040dc 	.word	0x200040dc

08004d54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004d54:	e7fe      	b.n	8004d54 <ADC1_2_IRQHandler>
	...

08004d58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004d5c:	4b08      	ldr	r3, [pc, #32]	@ (8004d80 <HAL_Init+0x28>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a07      	ldr	r2, [pc, #28]	@ (8004d80 <HAL_Init+0x28>)
 8004d62:	f043 0310 	orr.w	r3, r3, #16
 8004d66:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004d68:	2003      	movs	r0, #3
 8004d6a:	f000 f947 	bl	8004ffc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004d6e:	200f      	movs	r0, #15
 8004d70:	f000 f808 	bl	8004d84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004d74:	f7ff fd00 	bl	8004778 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	40022000 	.word	0x40022000

08004d84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004d8c:	4b12      	ldr	r3, [pc, #72]	@ (8004dd8 <HAL_InitTick+0x54>)
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	4b12      	ldr	r3, [pc, #72]	@ (8004ddc <HAL_InitTick+0x58>)
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	4619      	mov	r1, r3
 8004d96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004d9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004da2:	4618      	mov	r0, r3
 8004da4:	f000 f95f 	bl	8005066 <HAL_SYSTICK_Config>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d001      	beq.n	8004db2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e00e      	b.n	8004dd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2b0f      	cmp	r3, #15
 8004db6:	d80a      	bhi.n	8004dce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004db8:	2200      	movs	r2, #0
 8004dba:	6879      	ldr	r1, [r7, #4]
 8004dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8004dc0:	f000 f927 	bl	8005012 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004dc4:	4a06      	ldr	r2, [pc, #24]	@ (8004de0 <HAL_InitTick+0x5c>)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	e000      	b.n	8004dd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3708      	adds	r7, #8
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	2000001c 	.word	0x2000001c
 8004ddc:	20000024 	.word	0x20000024
 8004de0:	20000020 	.word	0x20000020

08004de4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004de4:	b480      	push	{r7}
 8004de6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004de8:	4b05      	ldr	r3, [pc, #20]	@ (8004e00 <HAL_IncTick+0x1c>)
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	461a      	mov	r2, r3
 8004dee:	4b05      	ldr	r3, [pc, #20]	@ (8004e04 <HAL_IncTick+0x20>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4413      	add	r3, r2
 8004df4:	4a03      	ldr	r2, [pc, #12]	@ (8004e04 <HAL_IncTick+0x20>)
 8004df6:	6013      	str	r3, [r2, #0]
}
 8004df8:	bf00      	nop
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bc80      	pop	{r7}
 8004dfe:	4770      	bx	lr
 8004e00:	20000024 	.word	0x20000024
 8004e04:	20003f8c 	.word	0x20003f8c

08004e08 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	af00      	add	r7, sp, #0
  return uwTick;
 8004e0c:	4b02      	ldr	r3, [pc, #8]	@ (8004e18 <HAL_GetTick+0x10>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bc80      	pop	{r7}
 8004e16:	4770      	bx	lr
 8004e18:	20003f8c 	.word	0x20003f8c

08004e1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004e24:	f7ff fff0 	bl	8004e08 <HAL_GetTick>
 8004e28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e34:	d005      	beq.n	8004e42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004e36:	4b0a      	ldr	r3, [pc, #40]	@ (8004e60 <HAL_Delay+0x44>)
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	4413      	add	r3, r2
 8004e40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004e42:	bf00      	nop
 8004e44:	f7ff ffe0 	bl	8004e08 <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	68fa      	ldr	r2, [r7, #12]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d8f7      	bhi.n	8004e44 <HAL_Delay+0x28>
  {
  }
}
 8004e54:	bf00      	nop
 8004e56:	bf00      	nop
 8004e58:	3710      	adds	r7, #16
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	20000024 	.word	0x20000024

08004e64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b085      	sub	sp, #20
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f003 0307 	and.w	r3, r3, #7
 8004e72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e74:	4b0c      	ldr	r3, [pc, #48]	@ (8004ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e7a:	68ba      	ldr	r2, [r7, #8]
 8004e7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004e80:	4013      	ands	r3, r2
 8004e82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004e8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004e90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e96:	4a04      	ldr	r2, [pc, #16]	@ (8004ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	60d3      	str	r3, [r2, #12]
}
 8004e9c:	bf00      	nop
 8004e9e:	3714      	adds	r7, #20
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bc80      	pop	{r7}
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop
 8004ea8:	e000ed00 	.word	0xe000ed00

08004eac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004eac:	b480      	push	{r7}
 8004eae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004eb0:	4b04      	ldr	r3, [pc, #16]	@ (8004ec4 <__NVIC_GetPriorityGrouping+0x18>)
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	0a1b      	lsrs	r3, r3, #8
 8004eb6:	f003 0307 	and.w	r3, r3, #7
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bc80      	pop	{r7}
 8004ec0:	4770      	bx	lr
 8004ec2:	bf00      	nop
 8004ec4:	e000ed00 	.word	0xe000ed00

08004ec8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	4603      	mov	r3, r0
 8004ed0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	db0b      	blt.n	8004ef2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004eda:	79fb      	ldrb	r3, [r7, #7]
 8004edc:	f003 021f 	and.w	r2, r3, #31
 8004ee0:	4906      	ldr	r1, [pc, #24]	@ (8004efc <__NVIC_EnableIRQ+0x34>)
 8004ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ee6:	095b      	lsrs	r3, r3, #5
 8004ee8:	2001      	movs	r0, #1
 8004eea:	fa00 f202 	lsl.w	r2, r0, r2
 8004eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004ef2:	bf00      	nop
 8004ef4:	370c      	adds	r7, #12
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bc80      	pop	{r7}
 8004efa:	4770      	bx	lr
 8004efc:	e000e100 	.word	0xe000e100

08004f00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	4603      	mov	r3, r0
 8004f08:	6039      	str	r1, [r7, #0]
 8004f0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	db0a      	blt.n	8004f2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	b2da      	uxtb	r2, r3
 8004f18:	490c      	ldr	r1, [pc, #48]	@ (8004f4c <__NVIC_SetPriority+0x4c>)
 8004f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f1e:	0112      	lsls	r2, r2, #4
 8004f20:	b2d2      	uxtb	r2, r2
 8004f22:	440b      	add	r3, r1
 8004f24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f28:	e00a      	b.n	8004f40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	b2da      	uxtb	r2, r3
 8004f2e:	4908      	ldr	r1, [pc, #32]	@ (8004f50 <__NVIC_SetPriority+0x50>)
 8004f30:	79fb      	ldrb	r3, [r7, #7]
 8004f32:	f003 030f 	and.w	r3, r3, #15
 8004f36:	3b04      	subs	r3, #4
 8004f38:	0112      	lsls	r2, r2, #4
 8004f3a:	b2d2      	uxtb	r2, r2
 8004f3c:	440b      	add	r3, r1
 8004f3e:	761a      	strb	r2, [r3, #24]
}
 8004f40:	bf00      	nop
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bc80      	pop	{r7}
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop
 8004f4c:	e000e100 	.word	0xe000e100
 8004f50:	e000ed00 	.word	0xe000ed00

08004f54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b089      	sub	sp, #36	@ 0x24
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f003 0307 	and.w	r3, r3, #7
 8004f66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	f1c3 0307 	rsb	r3, r3, #7
 8004f6e:	2b04      	cmp	r3, #4
 8004f70:	bf28      	it	cs
 8004f72:	2304      	movcs	r3, #4
 8004f74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	3304      	adds	r3, #4
 8004f7a:	2b06      	cmp	r3, #6
 8004f7c:	d902      	bls.n	8004f84 <NVIC_EncodePriority+0x30>
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	3b03      	subs	r3, #3
 8004f82:	e000      	b.n	8004f86 <NVIC_EncodePriority+0x32>
 8004f84:	2300      	movs	r3, #0
 8004f86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f88:	f04f 32ff 	mov.w	r2, #4294967295
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f92:	43da      	mvns	r2, r3
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	401a      	ands	r2, r3
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f9c:	f04f 31ff 	mov.w	r1, #4294967295
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8004fa6:	43d9      	mvns	r1, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fac:	4313      	orrs	r3, r2
         );
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3724      	adds	r7, #36	@ 0x24
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bc80      	pop	{r7}
 8004fb6:	4770      	bx	lr

08004fb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004fc8:	d301      	bcc.n	8004fce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e00f      	b.n	8004fee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004fce:	4a0a      	ldr	r2, [pc, #40]	@ (8004ff8 <SysTick_Config+0x40>)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	3b01      	subs	r3, #1
 8004fd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004fd6:	210f      	movs	r1, #15
 8004fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8004fdc:	f7ff ff90 	bl	8004f00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004fe0:	4b05      	ldr	r3, [pc, #20]	@ (8004ff8 <SysTick_Config+0x40>)
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004fe6:	4b04      	ldr	r3, [pc, #16]	@ (8004ff8 <SysTick_Config+0x40>)
 8004fe8:	2207      	movs	r2, #7
 8004fea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3708      	adds	r7, #8
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	e000e010 	.word	0xe000e010

08004ffc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b082      	sub	sp, #8
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f7ff ff2d 	bl	8004e64 <__NVIC_SetPriorityGrouping>
}
 800500a:	bf00      	nop
 800500c:	3708      	adds	r7, #8
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}

08005012 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005012:	b580      	push	{r7, lr}
 8005014:	b086      	sub	sp, #24
 8005016:	af00      	add	r7, sp, #0
 8005018:	4603      	mov	r3, r0
 800501a:	60b9      	str	r1, [r7, #8]
 800501c:	607a      	str	r2, [r7, #4]
 800501e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005020:	2300      	movs	r3, #0
 8005022:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005024:	f7ff ff42 	bl	8004eac <__NVIC_GetPriorityGrouping>
 8005028:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	68b9      	ldr	r1, [r7, #8]
 800502e:	6978      	ldr	r0, [r7, #20]
 8005030:	f7ff ff90 	bl	8004f54 <NVIC_EncodePriority>
 8005034:	4602      	mov	r2, r0
 8005036:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800503a:	4611      	mov	r1, r2
 800503c:	4618      	mov	r0, r3
 800503e:	f7ff ff5f 	bl	8004f00 <__NVIC_SetPriority>
}
 8005042:	bf00      	nop
 8005044:	3718      	adds	r7, #24
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}

0800504a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800504a:	b580      	push	{r7, lr}
 800504c:	b082      	sub	sp, #8
 800504e:	af00      	add	r7, sp, #0
 8005050:	4603      	mov	r3, r0
 8005052:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005058:	4618      	mov	r0, r3
 800505a:	f7ff ff35 	bl	8004ec8 <__NVIC_EnableIRQ>
}
 800505e:	bf00      	nop
 8005060:	3708      	adds	r7, #8
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}

08005066 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005066:	b580      	push	{r7, lr}
 8005068:	b082      	sub	sp, #8
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f7ff ffa2 	bl	8004fb8 <SysTick_Config>
 8005074:	4603      	mov	r3, r0
}
 8005076:	4618      	mov	r0, r3
 8005078:	3708      	adds	r7, #8
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
	...

08005080 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005080:	b480      	push	{r7}
 8005082:	b085      	sub	sp, #20
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005088:	2300      	movs	r3, #0
 800508a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d101      	bne.n	8005096 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e043      	b.n	800511e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	461a      	mov	r2, r3
 800509c:	4b22      	ldr	r3, [pc, #136]	@ (8005128 <HAL_DMA_Init+0xa8>)
 800509e:	4413      	add	r3, r2
 80050a0:	4a22      	ldr	r2, [pc, #136]	@ (800512c <HAL_DMA_Init+0xac>)
 80050a2:	fba2 2303 	umull	r2, r3, r2, r3
 80050a6:	091b      	lsrs	r3, r3, #4
 80050a8:	009a      	lsls	r2, r3, #2
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a1f      	ldr	r2, [pc, #124]	@ (8005130 <HAL_DMA_Init+0xb0>)
 80050b2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2202      	movs	r2, #2
 80050b8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80050ca:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80050ce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80050d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	695b      	ldr	r3, [r3, #20]
 80050ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	69db      	ldr	r3, [r3, #28]
 80050f6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3714      	adds	r7, #20
 8005122:	46bd      	mov	sp, r7
 8005124:	bc80      	pop	{r7}
 8005126:	4770      	bx	lr
 8005128:	bffdfff8 	.word	0xbffdfff8
 800512c:	cccccccd 	.word	0xcccccccd
 8005130:	40020000 	.word	0x40020000

08005134 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005150:	2204      	movs	r2, #4
 8005152:	409a      	lsls	r2, r3
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	4013      	ands	r3, r2
 8005158:	2b00      	cmp	r3, #0
 800515a:	d04f      	beq.n	80051fc <HAL_DMA_IRQHandler+0xc8>
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	f003 0304 	and.w	r3, r3, #4
 8005162:	2b00      	cmp	r3, #0
 8005164:	d04a      	beq.n	80051fc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0320 	and.w	r3, r3, #32
 8005170:	2b00      	cmp	r3, #0
 8005172:	d107      	bne.n	8005184 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f022 0204 	bic.w	r2, r2, #4
 8005182:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a66      	ldr	r2, [pc, #408]	@ (8005324 <HAL_DMA_IRQHandler+0x1f0>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d029      	beq.n	80051e2 <HAL_DMA_IRQHandler+0xae>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a65      	ldr	r2, [pc, #404]	@ (8005328 <HAL_DMA_IRQHandler+0x1f4>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d022      	beq.n	80051de <HAL_DMA_IRQHandler+0xaa>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a63      	ldr	r2, [pc, #396]	@ (800532c <HAL_DMA_IRQHandler+0x1f8>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d01a      	beq.n	80051d8 <HAL_DMA_IRQHandler+0xa4>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a62      	ldr	r2, [pc, #392]	@ (8005330 <HAL_DMA_IRQHandler+0x1fc>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d012      	beq.n	80051d2 <HAL_DMA_IRQHandler+0x9e>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a60      	ldr	r2, [pc, #384]	@ (8005334 <HAL_DMA_IRQHandler+0x200>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d00a      	beq.n	80051cc <HAL_DMA_IRQHandler+0x98>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a5f      	ldr	r2, [pc, #380]	@ (8005338 <HAL_DMA_IRQHandler+0x204>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d102      	bne.n	80051c6 <HAL_DMA_IRQHandler+0x92>
 80051c0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80051c4:	e00e      	b.n	80051e4 <HAL_DMA_IRQHandler+0xb0>
 80051c6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80051ca:	e00b      	b.n	80051e4 <HAL_DMA_IRQHandler+0xb0>
 80051cc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80051d0:	e008      	b.n	80051e4 <HAL_DMA_IRQHandler+0xb0>
 80051d2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80051d6:	e005      	b.n	80051e4 <HAL_DMA_IRQHandler+0xb0>
 80051d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80051dc:	e002      	b.n	80051e4 <HAL_DMA_IRQHandler+0xb0>
 80051de:	2340      	movs	r3, #64	@ 0x40
 80051e0:	e000      	b.n	80051e4 <HAL_DMA_IRQHandler+0xb0>
 80051e2:	2304      	movs	r3, #4
 80051e4:	4a55      	ldr	r2, [pc, #340]	@ (800533c <HAL_DMA_IRQHandler+0x208>)
 80051e6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	f000 8094 	beq.w	800531a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80051fa:	e08e      	b.n	800531a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005200:	2202      	movs	r2, #2
 8005202:	409a      	lsls	r2, r3
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	4013      	ands	r3, r2
 8005208:	2b00      	cmp	r3, #0
 800520a:	d056      	beq.n	80052ba <HAL_DMA_IRQHandler+0x186>
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	f003 0302 	and.w	r3, r3, #2
 8005212:	2b00      	cmp	r3, #0
 8005214:	d051      	beq.n	80052ba <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 0320 	and.w	r3, r3, #32
 8005220:	2b00      	cmp	r3, #0
 8005222:	d10b      	bne.n	800523c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f022 020a 	bic.w	r2, r2, #10
 8005232:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a38      	ldr	r2, [pc, #224]	@ (8005324 <HAL_DMA_IRQHandler+0x1f0>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d029      	beq.n	800529a <HAL_DMA_IRQHandler+0x166>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a37      	ldr	r2, [pc, #220]	@ (8005328 <HAL_DMA_IRQHandler+0x1f4>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d022      	beq.n	8005296 <HAL_DMA_IRQHandler+0x162>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a35      	ldr	r2, [pc, #212]	@ (800532c <HAL_DMA_IRQHandler+0x1f8>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d01a      	beq.n	8005290 <HAL_DMA_IRQHandler+0x15c>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a34      	ldr	r2, [pc, #208]	@ (8005330 <HAL_DMA_IRQHandler+0x1fc>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d012      	beq.n	800528a <HAL_DMA_IRQHandler+0x156>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a32      	ldr	r2, [pc, #200]	@ (8005334 <HAL_DMA_IRQHandler+0x200>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d00a      	beq.n	8005284 <HAL_DMA_IRQHandler+0x150>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a31      	ldr	r2, [pc, #196]	@ (8005338 <HAL_DMA_IRQHandler+0x204>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d102      	bne.n	800527e <HAL_DMA_IRQHandler+0x14a>
 8005278:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800527c:	e00e      	b.n	800529c <HAL_DMA_IRQHandler+0x168>
 800527e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005282:	e00b      	b.n	800529c <HAL_DMA_IRQHandler+0x168>
 8005284:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005288:	e008      	b.n	800529c <HAL_DMA_IRQHandler+0x168>
 800528a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800528e:	e005      	b.n	800529c <HAL_DMA_IRQHandler+0x168>
 8005290:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005294:	e002      	b.n	800529c <HAL_DMA_IRQHandler+0x168>
 8005296:	2320      	movs	r3, #32
 8005298:	e000      	b.n	800529c <HAL_DMA_IRQHandler+0x168>
 800529a:	2302      	movs	r3, #2
 800529c:	4a27      	ldr	r2, [pc, #156]	@ (800533c <HAL_DMA_IRQHandler+0x208>)
 800529e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d034      	beq.n	800531a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80052b8:	e02f      	b.n	800531a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052be:	2208      	movs	r2, #8
 80052c0:	409a      	lsls	r2, r3
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	4013      	ands	r3, r2
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d028      	beq.n	800531c <HAL_DMA_IRQHandler+0x1e8>
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	f003 0308 	and.w	r3, r3, #8
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d023      	beq.n	800531c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f022 020e 	bic.w	r2, r2, #14
 80052e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052ec:	2101      	movs	r1, #1
 80052ee:	fa01 f202 	lsl.w	r2, r1, r2
 80052f2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2201      	movs	r2, #1
 80052fe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800530e:	2b00      	cmp	r3, #0
 8005310:	d004      	beq.n	800531c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	4798      	blx	r3
    }
  }
  return;
 800531a:	bf00      	nop
 800531c:	bf00      	nop
}
 800531e:	3710      	adds	r7, #16
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}
 8005324:	40020008 	.word	0x40020008
 8005328:	4002001c 	.word	0x4002001c
 800532c:	40020030 	.word	0x40020030
 8005330:	40020044 	.word	0x40020044
 8005334:	40020058 	.word	0x40020058
 8005338:	4002006c 	.word	0x4002006c
 800533c:	40020000 	.word	0x40020000

08005340 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005340:	b480      	push	{r7}
 8005342:	b08b      	sub	sp, #44	@ 0x2c
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800534a:	2300      	movs	r3, #0
 800534c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800534e:	2300      	movs	r3, #0
 8005350:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005352:	e169      	b.n	8005628 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005354:	2201      	movs	r2, #1
 8005356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005358:	fa02 f303 	lsl.w	r3, r2, r3
 800535c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	69fa      	ldr	r2, [r7, #28]
 8005364:	4013      	ands	r3, r2
 8005366:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005368:	69ba      	ldr	r2, [r7, #24]
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	429a      	cmp	r2, r3
 800536e:	f040 8158 	bne.w	8005622 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	4a9a      	ldr	r2, [pc, #616]	@ (80055e0 <HAL_GPIO_Init+0x2a0>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d05e      	beq.n	800543a <HAL_GPIO_Init+0xfa>
 800537c:	4a98      	ldr	r2, [pc, #608]	@ (80055e0 <HAL_GPIO_Init+0x2a0>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d875      	bhi.n	800546e <HAL_GPIO_Init+0x12e>
 8005382:	4a98      	ldr	r2, [pc, #608]	@ (80055e4 <HAL_GPIO_Init+0x2a4>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d058      	beq.n	800543a <HAL_GPIO_Init+0xfa>
 8005388:	4a96      	ldr	r2, [pc, #600]	@ (80055e4 <HAL_GPIO_Init+0x2a4>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d86f      	bhi.n	800546e <HAL_GPIO_Init+0x12e>
 800538e:	4a96      	ldr	r2, [pc, #600]	@ (80055e8 <HAL_GPIO_Init+0x2a8>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d052      	beq.n	800543a <HAL_GPIO_Init+0xfa>
 8005394:	4a94      	ldr	r2, [pc, #592]	@ (80055e8 <HAL_GPIO_Init+0x2a8>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d869      	bhi.n	800546e <HAL_GPIO_Init+0x12e>
 800539a:	4a94      	ldr	r2, [pc, #592]	@ (80055ec <HAL_GPIO_Init+0x2ac>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d04c      	beq.n	800543a <HAL_GPIO_Init+0xfa>
 80053a0:	4a92      	ldr	r2, [pc, #584]	@ (80055ec <HAL_GPIO_Init+0x2ac>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d863      	bhi.n	800546e <HAL_GPIO_Init+0x12e>
 80053a6:	4a92      	ldr	r2, [pc, #584]	@ (80055f0 <HAL_GPIO_Init+0x2b0>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d046      	beq.n	800543a <HAL_GPIO_Init+0xfa>
 80053ac:	4a90      	ldr	r2, [pc, #576]	@ (80055f0 <HAL_GPIO_Init+0x2b0>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d85d      	bhi.n	800546e <HAL_GPIO_Init+0x12e>
 80053b2:	2b12      	cmp	r3, #18
 80053b4:	d82a      	bhi.n	800540c <HAL_GPIO_Init+0xcc>
 80053b6:	2b12      	cmp	r3, #18
 80053b8:	d859      	bhi.n	800546e <HAL_GPIO_Init+0x12e>
 80053ba:	a201      	add	r2, pc, #4	@ (adr r2, 80053c0 <HAL_GPIO_Init+0x80>)
 80053bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053c0:	0800543b 	.word	0x0800543b
 80053c4:	08005415 	.word	0x08005415
 80053c8:	08005427 	.word	0x08005427
 80053cc:	08005469 	.word	0x08005469
 80053d0:	0800546f 	.word	0x0800546f
 80053d4:	0800546f 	.word	0x0800546f
 80053d8:	0800546f 	.word	0x0800546f
 80053dc:	0800546f 	.word	0x0800546f
 80053e0:	0800546f 	.word	0x0800546f
 80053e4:	0800546f 	.word	0x0800546f
 80053e8:	0800546f 	.word	0x0800546f
 80053ec:	0800546f 	.word	0x0800546f
 80053f0:	0800546f 	.word	0x0800546f
 80053f4:	0800546f 	.word	0x0800546f
 80053f8:	0800546f 	.word	0x0800546f
 80053fc:	0800546f 	.word	0x0800546f
 8005400:	0800546f 	.word	0x0800546f
 8005404:	0800541d 	.word	0x0800541d
 8005408:	08005431 	.word	0x08005431
 800540c:	4a79      	ldr	r2, [pc, #484]	@ (80055f4 <HAL_GPIO_Init+0x2b4>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d013      	beq.n	800543a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005412:	e02c      	b.n	800546e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	623b      	str	r3, [r7, #32]
          break;
 800541a:	e029      	b.n	8005470 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	3304      	adds	r3, #4
 8005422:	623b      	str	r3, [r7, #32]
          break;
 8005424:	e024      	b.n	8005470 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	3308      	adds	r3, #8
 800542c:	623b      	str	r3, [r7, #32]
          break;
 800542e:	e01f      	b.n	8005470 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	330c      	adds	r3, #12
 8005436:	623b      	str	r3, [r7, #32]
          break;
 8005438:	e01a      	b.n	8005470 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d102      	bne.n	8005448 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005442:	2304      	movs	r3, #4
 8005444:	623b      	str	r3, [r7, #32]
          break;
 8005446:	e013      	b.n	8005470 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	2b01      	cmp	r3, #1
 800544e:	d105      	bne.n	800545c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005450:	2308      	movs	r3, #8
 8005452:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	69fa      	ldr	r2, [r7, #28]
 8005458:	611a      	str	r2, [r3, #16]
          break;
 800545a:	e009      	b.n	8005470 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800545c:	2308      	movs	r3, #8
 800545e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	69fa      	ldr	r2, [r7, #28]
 8005464:	615a      	str	r2, [r3, #20]
          break;
 8005466:	e003      	b.n	8005470 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005468:	2300      	movs	r3, #0
 800546a:	623b      	str	r3, [r7, #32]
          break;
 800546c:	e000      	b.n	8005470 <HAL_GPIO_Init+0x130>
          break;
 800546e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	2bff      	cmp	r3, #255	@ 0xff
 8005474:	d801      	bhi.n	800547a <HAL_GPIO_Init+0x13a>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	e001      	b.n	800547e <HAL_GPIO_Init+0x13e>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	3304      	adds	r3, #4
 800547e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	2bff      	cmp	r3, #255	@ 0xff
 8005484:	d802      	bhi.n	800548c <HAL_GPIO_Init+0x14c>
 8005486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	e002      	b.n	8005492 <HAL_GPIO_Init+0x152>
 800548c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800548e:	3b08      	subs	r3, #8
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	210f      	movs	r1, #15
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	fa01 f303 	lsl.w	r3, r1, r3
 80054a0:	43db      	mvns	r3, r3
 80054a2:	401a      	ands	r2, r3
 80054a4:	6a39      	ldr	r1, [r7, #32]
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	fa01 f303 	lsl.w	r3, r1, r3
 80054ac:	431a      	orrs	r2, r3
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	f000 80b1 	beq.w	8005622 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80054c0:	4b4d      	ldr	r3, [pc, #308]	@ (80055f8 <HAL_GPIO_Init+0x2b8>)
 80054c2:	699b      	ldr	r3, [r3, #24]
 80054c4:	4a4c      	ldr	r2, [pc, #304]	@ (80055f8 <HAL_GPIO_Init+0x2b8>)
 80054c6:	f043 0301 	orr.w	r3, r3, #1
 80054ca:	6193      	str	r3, [r2, #24]
 80054cc:	4b4a      	ldr	r3, [pc, #296]	@ (80055f8 <HAL_GPIO_Init+0x2b8>)
 80054ce:	699b      	ldr	r3, [r3, #24]
 80054d0:	f003 0301 	and.w	r3, r3, #1
 80054d4:	60bb      	str	r3, [r7, #8]
 80054d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80054d8:	4a48      	ldr	r2, [pc, #288]	@ (80055fc <HAL_GPIO_Init+0x2bc>)
 80054da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054dc:	089b      	lsrs	r3, r3, #2
 80054de:	3302      	adds	r3, #2
 80054e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80054e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e8:	f003 0303 	and.w	r3, r3, #3
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	220f      	movs	r2, #15
 80054f0:	fa02 f303 	lsl.w	r3, r2, r3
 80054f4:	43db      	mvns	r3, r3
 80054f6:	68fa      	ldr	r2, [r7, #12]
 80054f8:	4013      	ands	r3, r2
 80054fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	4a40      	ldr	r2, [pc, #256]	@ (8005600 <HAL_GPIO_Init+0x2c0>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d013      	beq.n	800552c <HAL_GPIO_Init+0x1ec>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4a3f      	ldr	r2, [pc, #252]	@ (8005604 <HAL_GPIO_Init+0x2c4>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d00d      	beq.n	8005528 <HAL_GPIO_Init+0x1e8>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a3e      	ldr	r2, [pc, #248]	@ (8005608 <HAL_GPIO_Init+0x2c8>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d007      	beq.n	8005524 <HAL_GPIO_Init+0x1e4>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4a3d      	ldr	r2, [pc, #244]	@ (800560c <HAL_GPIO_Init+0x2cc>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d101      	bne.n	8005520 <HAL_GPIO_Init+0x1e0>
 800551c:	2303      	movs	r3, #3
 800551e:	e006      	b.n	800552e <HAL_GPIO_Init+0x1ee>
 8005520:	2304      	movs	r3, #4
 8005522:	e004      	b.n	800552e <HAL_GPIO_Init+0x1ee>
 8005524:	2302      	movs	r3, #2
 8005526:	e002      	b.n	800552e <HAL_GPIO_Init+0x1ee>
 8005528:	2301      	movs	r3, #1
 800552a:	e000      	b.n	800552e <HAL_GPIO_Init+0x1ee>
 800552c:	2300      	movs	r3, #0
 800552e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005530:	f002 0203 	and.w	r2, r2, #3
 8005534:	0092      	lsls	r2, r2, #2
 8005536:	4093      	lsls	r3, r2
 8005538:	68fa      	ldr	r2, [r7, #12]
 800553a:	4313      	orrs	r3, r2
 800553c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800553e:	492f      	ldr	r1, [pc, #188]	@ (80055fc <HAL_GPIO_Init+0x2bc>)
 8005540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005542:	089b      	lsrs	r3, r3, #2
 8005544:	3302      	adds	r3, #2
 8005546:	68fa      	ldr	r2, [r7, #12]
 8005548:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005554:	2b00      	cmp	r3, #0
 8005556:	d006      	beq.n	8005566 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005558:	4b2d      	ldr	r3, [pc, #180]	@ (8005610 <HAL_GPIO_Init+0x2d0>)
 800555a:	689a      	ldr	r2, [r3, #8]
 800555c:	492c      	ldr	r1, [pc, #176]	@ (8005610 <HAL_GPIO_Init+0x2d0>)
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	4313      	orrs	r3, r2
 8005562:	608b      	str	r3, [r1, #8]
 8005564:	e006      	b.n	8005574 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005566:	4b2a      	ldr	r3, [pc, #168]	@ (8005610 <HAL_GPIO_Init+0x2d0>)
 8005568:	689a      	ldr	r2, [r3, #8]
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	43db      	mvns	r3, r3
 800556e:	4928      	ldr	r1, [pc, #160]	@ (8005610 <HAL_GPIO_Init+0x2d0>)
 8005570:	4013      	ands	r3, r2
 8005572:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800557c:	2b00      	cmp	r3, #0
 800557e:	d006      	beq.n	800558e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005580:	4b23      	ldr	r3, [pc, #140]	@ (8005610 <HAL_GPIO_Init+0x2d0>)
 8005582:	68da      	ldr	r2, [r3, #12]
 8005584:	4922      	ldr	r1, [pc, #136]	@ (8005610 <HAL_GPIO_Init+0x2d0>)
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	4313      	orrs	r3, r2
 800558a:	60cb      	str	r3, [r1, #12]
 800558c:	e006      	b.n	800559c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800558e:	4b20      	ldr	r3, [pc, #128]	@ (8005610 <HAL_GPIO_Init+0x2d0>)
 8005590:	68da      	ldr	r2, [r3, #12]
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	43db      	mvns	r3, r3
 8005596:	491e      	ldr	r1, [pc, #120]	@ (8005610 <HAL_GPIO_Init+0x2d0>)
 8005598:	4013      	ands	r3, r2
 800559a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d006      	beq.n	80055b6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80055a8:	4b19      	ldr	r3, [pc, #100]	@ (8005610 <HAL_GPIO_Init+0x2d0>)
 80055aa:	685a      	ldr	r2, [r3, #4]
 80055ac:	4918      	ldr	r1, [pc, #96]	@ (8005610 <HAL_GPIO_Init+0x2d0>)
 80055ae:	69bb      	ldr	r3, [r7, #24]
 80055b0:	4313      	orrs	r3, r2
 80055b2:	604b      	str	r3, [r1, #4]
 80055b4:	e006      	b.n	80055c4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80055b6:	4b16      	ldr	r3, [pc, #88]	@ (8005610 <HAL_GPIO_Init+0x2d0>)
 80055b8:	685a      	ldr	r2, [r3, #4]
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	43db      	mvns	r3, r3
 80055be:	4914      	ldr	r1, [pc, #80]	@ (8005610 <HAL_GPIO_Init+0x2d0>)
 80055c0:	4013      	ands	r3, r2
 80055c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d021      	beq.n	8005614 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80055d0:	4b0f      	ldr	r3, [pc, #60]	@ (8005610 <HAL_GPIO_Init+0x2d0>)
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	490e      	ldr	r1, [pc, #56]	@ (8005610 <HAL_GPIO_Init+0x2d0>)
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	4313      	orrs	r3, r2
 80055da:	600b      	str	r3, [r1, #0]
 80055dc:	e021      	b.n	8005622 <HAL_GPIO_Init+0x2e2>
 80055de:	bf00      	nop
 80055e0:	10320000 	.word	0x10320000
 80055e4:	10310000 	.word	0x10310000
 80055e8:	10220000 	.word	0x10220000
 80055ec:	10210000 	.word	0x10210000
 80055f0:	10120000 	.word	0x10120000
 80055f4:	10110000 	.word	0x10110000
 80055f8:	40021000 	.word	0x40021000
 80055fc:	40010000 	.word	0x40010000
 8005600:	40010800 	.word	0x40010800
 8005604:	40010c00 	.word	0x40010c00
 8005608:	40011000 	.word	0x40011000
 800560c:	40011400 	.word	0x40011400
 8005610:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005614:	4b0b      	ldr	r3, [pc, #44]	@ (8005644 <HAL_GPIO_Init+0x304>)
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	69bb      	ldr	r3, [r7, #24]
 800561a:	43db      	mvns	r3, r3
 800561c:	4909      	ldr	r1, [pc, #36]	@ (8005644 <HAL_GPIO_Init+0x304>)
 800561e:	4013      	ands	r3, r2
 8005620:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8005622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005624:	3301      	adds	r3, #1
 8005626:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800562e:	fa22 f303 	lsr.w	r3, r2, r3
 8005632:	2b00      	cmp	r3, #0
 8005634:	f47f ae8e 	bne.w	8005354 <HAL_GPIO_Init+0x14>
  }
}
 8005638:	bf00      	nop
 800563a:	bf00      	nop
 800563c:	372c      	adds	r7, #44	@ 0x2c
 800563e:	46bd      	mov	sp, r7
 8005640:	bc80      	pop	{r7}
 8005642:	4770      	bx	lr
 8005644:	40010400 	.word	0x40010400

08005648 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005648:	b480      	push	{r7}
 800564a:	b085      	sub	sp, #20
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	460b      	mov	r3, r1
 8005652:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	689a      	ldr	r2, [r3, #8]
 8005658:	887b      	ldrh	r3, [r7, #2]
 800565a:	4013      	ands	r3, r2
 800565c:	2b00      	cmp	r3, #0
 800565e:	d002      	beq.n	8005666 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005660:	2301      	movs	r3, #1
 8005662:	73fb      	strb	r3, [r7, #15]
 8005664:	e001      	b.n	800566a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005666:	2300      	movs	r3, #0
 8005668:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800566a:	7bfb      	ldrb	r3, [r7, #15]
}
 800566c:	4618      	mov	r0, r3
 800566e:	3714      	adds	r7, #20
 8005670:	46bd      	mov	sp, r7
 8005672:	bc80      	pop	{r7}
 8005674:	4770      	bx	lr

08005676 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005676:	b480      	push	{r7}
 8005678:	b083      	sub	sp, #12
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
 800567e:	460b      	mov	r3, r1
 8005680:	807b      	strh	r3, [r7, #2]
 8005682:	4613      	mov	r3, r2
 8005684:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005686:	787b      	ldrb	r3, [r7, #1]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d003      	beq.n	8005694 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800568c:	887a      	ldrh	r2, [r7, #2]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005692:	e003      	b.n	800569c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005694:	887b      	ldrh	r3, [r7, #2]
 8005696:	041a      	lsls	r2, r3, #16
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	611a      	str	r2, [r3, #16]
}
 800569c:	bf00      	nop
 800569e:	370c      	adds	r7, #12
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bc80      	pop	{r7}
 80056a4:	4770      	bx	lr
	...

080056a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d101      	bne.n	80056ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e12b      	b.n	8005912 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d106      	bne.n	80056d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f7fb fc2a 	bl	8000f28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2224      	movs	r2, #36	@ 0x24
 80056d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f022 0201 	bic.w	r2, r2, #1
 80056ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80056fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800570a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800570c:	f001 f832 	bl	8006774 <HAL_RCC_GetPCLK1Freq>
 8005710:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	4a81      	ldr	r2, [pc, #516]	@ (800591c <HAL_I2C_Init+0x274>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d807      	bhi.n	800572c <HAL_I2C_Init+0x84>
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	4a80      	ldr	r2, [pc, #512]	@ (8005920 <HAL_I2C_Init+0x278>)
 8005720:	4293      	cmp	r3, r2
 8005722:	bf94      	ite	ls
 8005724:	2301      	movls	r3, #1
 8005726:	2300      	movhi	r3, #0
 8005728:	b2db      	uxtb	r3, r3
 800572a:	e006      	b.n	800573a <HAL_I2C_Init+0x92>
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	4a7d      	ldr	r2, [pc, #500]	@ (8005924 <HAL_I2C_Init+0x27c>)
 8005730:	4293      	cmp	r3, r2
 8005732:	bf94      	ite	ls
 8005734:	2301      	movls	r3, #1
 8005736:	2300      	movhi	r3, #0
 8005738:	b2db      	uxtb	r3, r3
 800573a:	2b00      	cmp	r3, #0
 800573c:	d001      	beq.n	8005742 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e0e7      	b.n	8005912 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	4a78      	ldr	r2, [pc, #480]	@ (8005928 <HAL_I2C_Init+0x280>)
 8005746:	fba2 2303 	umull	r2, r3, r2, r3
 800574a:	0c9b      	lsrs	r3, r3, #18
 800574c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	68ba      	ldr	r2, [r7, #8]
 800575e:	430a      	orrs	r2, r1
 8005760:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	6a1b      	ldr	r3, [r3, #32]
 8005768:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	4a6a      	ldr	r2, [pc, #424]	@ (800591c <HAL_I2C_Init+0x274>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d802      	bhi.n	800577c <HAL_I2C_Init+0xd4>
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	3301      	adds	r3, #1
 800577a:	e009      	b.n	8005790 <HAL_I2C_Init+0xe8>
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005782:	fb02 f303 	mul.w	r3, r2, r3
 8005786:	4a69      	ldr	r2, [pc, #420]	@ (800592c <HAL_I2C_Init+0x284>)
 8005788:	fba2 2303 	umull	r2, r3, r2, r3
 800578c:	099b      	lsrs	r3, r3, #6
 800578e:	3301      	adds	r3, #1
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	6812      	ldr	r2, [r2, #0]
 8005794:	430b      	orrs	r3, r1
 8005796:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	69db      	ldr	r3, [r3, #28]
 800579e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80057a2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	495c      	ldr	r1, [pc, #368]	@ (800591c <HAL_I2C_Init+0x274>)
 80057ac:	428b      	cmp	r3, r1
 80057ae:	d819      	bhi.n	80057e4 <HAL_I2C_Init+0x13c>
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	1e59      	subs	r1, r3, #1
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	005b      	lsls	r3, r3, #1
 80057ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80057be:	1c59      	adds	r1, r3, #1
 80057c0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80057c4:	400b      	ands	r3, r1
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d00a      	beq.n	80057e0 <HAL_I2C_Init+0x138>
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	1e59      	subs	r1, r3, #1
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	005b      	lsls	r3, r3, #1
 80057d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80057d8:	3301      	adds	r3, #1
 80057da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057de:	e051      	b.n	8005884 <HAL_I2C_Init+0x1dc>
 80057e0:	2304      	movs	r3, #4
 80057e2:	e04f      	b.n	8005884 <HAL_I2C_Init+0x1dc>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d111      	bne.n	8005810 <HAL_I2C_Init+0x168>
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	1e58      	subs	r0, r3, #1
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6859      	ldr	r1, [r3, #4]
 80057f4:	460b      	mov	r3, r1
 80057f6:	005b      	lsls	r3, r3, #1
 80057f8:	440b      	add	r3, r1
 80057fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80057fe:	3301      	adds	r3, #1
 8005800:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005804:	2b00      	cmp	r3, #0
 8005806:	bf0c      	ite	eq
 8005808:	2301      	moveq	r3, #1
 800580a:	2300      	movne	r3, #0
 800580c:	b2db      	uxtb	r3, r3
 800580e:	e012      	b.n	8005836 <HAL_I2C_Init+0x18e>
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	1e58      	subs	r0, r3, #1
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6859      	ldr	r1, [r3, #4]
 8005818:	460b      	mov	r3, r1
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	440b      	add	r3, r1
 800581e:	0099      	lsls	r1, r3, #2
 8005820:	440b      	add	r3, r1
 8005822:	fbb0 f3f3 	udiv	r3, r0, r3
 8005826:	3301      	adds	r3, #1
 8005828:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800582c:	2b00      	cmp	r3, #0
 800582e:	bf0c      	ite	eq
 8005830:	2301      	moveq	r3, #1
 8005832:	2300      	movne	r3, #0
 8005834:	b2db      	uxtb	r3, r3
 8005836:	2b00      	cmp	r3, #0
 8005838:	d001      	beq.n	800583e <HAL_I2C_Init+0x196>
 800583a:	2301      	movs	r3, #1
 800583c:	e022      	b.n	8005884 <HAL_I2C_Init+0x1dc>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d10e      	bne.n	8005864 <HAL_I2C_Init+0x1bc>
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	1e58      	subs	r0, r3, #1
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6859      	ldr	r1, [r3, #4]
 800584e:	460b      	mov	r3, r1
 8005850:	005b      	lsls	r3, r3, #1
 8005852:	440b      	add	r3, r1
 8005854:	fbb0 f3f3 	udiv	r3, r0, r3
 8005858:	3301      	adds	r3, #1
 800585a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800585e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005862:	e00f      	b.n	8005884 <HAL_I2C_Init+0x1dc>
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	1e58      	subs	r0, r3, #1
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6859      	ldr	r1, [r3, #4]
 800586c:	460b      	mov	r3, r1
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	440b      	add	r3, r1
 8005872:	0099      	lsls	r1, r3, #2
 8005874:	440b      	add	r3, r1
 8005876:	fbb0 f3f3 	udiv	r3, r0, r3
 800587a:	3301      	adds	r3, #1
 800587c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005880:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005884:	6879      	ldr	r1, [r7, #4]
 8005886:	6809      	ldr	r1, [r1, #0]
 8005888:	4313      	orrs	r3, r2
 800588a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	69da      	ldr	r2, [r3, #28]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a1b      	ldr	r3, [r3, #32]
 800589e:	431a      	orrs	r2, r3
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	430a      	orrs	r2, r1
 80058a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80058b2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	6911      	ldr	r1, [r2, #16]
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	68d2      	ldr	r2, [r2, #12]
 80058be:	4311      	orrs	r1, r2
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	6812      	ldr	r2, [r2, #0]
 80058c4:	430b      	orrs	r3, r1
 80058c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	695a      	ldr	r2, [r3, #20]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	699b      	ldr	r3, [r3, #24]
 80058da:	431a      	orrs	r2, r3
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	430a      	orrs	r2, r1
 80058e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f042 0201 	orr.w	r2, r2, #1
 80058f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2220      	movs	r2, #32
 80058fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005910:	2300      	movs	r3, #0
}
 8005912:	4618      	mov	r0, r3
 8005914:	3710      	adds	r7, #16
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}
 800591a:	bf00      	nop
 800591c:	000186a0 	.word	0x000186a0
 8005920:	001e847f 	.word	0x001e847f
 8005924:	003d08ff 	.word	0x003d08ff
 8005928:	431bde83 	.word	0x431bde83
 800592c:	10624dd3 	.word	0x10624dd3

08005930 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b088      	sub	sp, #32
 8005934:	af02      	add	r7, sp, #8
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	607a      	str	r2, [r7, #4]
 800593a:	461a      	mov	r2, r3
 800593c:	460b      	mov	r3, r1
 800593e:	817b      	strh	r3, [r7, #10]
 8005940:	4613      	mov	r3, r2
 8005942:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005944:	f7ff fa60 	bl	8004e08 <HAL_GetTick>
 8005948:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005950:	b2db      	uxtb	r3, r3
 8005952:	2b20      	cmp	r3, #32
 8005954:	f040 80e0 	bne.w	8005b18 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	9300      	str	r3, [sp, #0]
 800595c:	2319      	movs	r3, #25
 800595e:	2201      	movs	r2, #1
 8005960:	4970      	ldr	r1, [pc, #448]	@ (8005b24 <HAL_I2C_Master_Transmit+0x1f4>)
 8005962:	68f8      	ldr	r0, [r7, #12]
 8005964:	f000 f964 	bl	8005c30 <I2C_WaitOnFlagUntilTimeout>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d001      	beq.n	8005972 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800596e:	2302      	movs	r3, #2
 8005970:	e0d3      	b.n	8005b1a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005978:	2b01      	cmp	r3, #1
 800597a:	d101      	bne.n	8005980 <HAL_I2C_Master_Transmit+0x50>
 800597c:	2302      	movs	r3, #2
 800597e:	e0cc      	b.n	8005b1a <HAL_I2C_Master_Transmit+0x1ea>
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f003 0301 	and.w	r3, r3, #1
 8005992:	2b01      	cmp	r3, #1
 8005994:	d007      	beq.n	80059a6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f042 0201 	orr.w	r2, r2, #1
 80059a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80059b4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2221      	movs	r2, #33	@ 0x21
 80059ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2210      	movs	r2, #16
 80059c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2200      	movs	r2, #0
 80059ca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	893a      	ldrh	r2, [r7, #8]
 80059d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059dc:	b29a      	uxth	r2, r3
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	4a50      	ldr	r2, [pc, #320]	@ (8005b28 <HAL_I2C_Master_Transmit+0x1f8>)
 80059e6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80059e8:	8979      	ldrh	r1, [r7, #10]
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	6a3a      	ldr	r2, [r7, #32]
 80059ee:	68f8      	ldr	r0, [r7, #12]
 80059f0:	f000 f89c 	bl	8005b2c <I2C_MasterRequestWrite>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d001      	beq.n	80059fe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e08d      	b.n	8005b1a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059fe:	2300      	movs	r3, #0
 8005a00:	613b      	str	r3, [r7, #16]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	695b      	ldr	r3, [r3, #20]
 8005a08:	613b      	str	r3, [r7, #16]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	699b      	ldr	r3, [r3, #24]
 8005a10:	613b      	str	r3, [r7, #16]
 8005a12:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005a14:	e066      	b.n	8005ae4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a16:	697a      	ldr	r2, [r7, #20]
 8005a18:	6a39      	ldr	r1, [r7, #32]
 8005a1a:	68f8      	ldr	r0, [r7, #12]
 8005a1c:	f000 fa22 	bl	8005e64 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00d      	beq.n	8005a42 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a2a:	2b04      	cmp	r3, #4
 8005a2c:	d107      	bne.n	8005a3e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a3c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e06b      	b.n	8005b1a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a46:	781a      	ldrb	r2, [r3, #0]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a52:	1c5a      	adds	r2, r3, #1
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	3b01      	subs	r3, #1
 8005a60:	b29a      	uxth	r2, r3
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a6a:	3b01      	subs	r3, #1
 8005a6c:	b29a      	uxth	r2, r3
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	695b      	ldr	r3, [r3, #20]
 8005a78:	f003 0304 	and.w	r3, r3, #4
 8005a7c:	2b04      	cmp	r3, #4
 8005a7e:	d11b      	bne.n	8005ab8 <HAL_I2C_Master_Transmit+0x188>
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d017      	beq.n	8005ab8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a8c:	781a      	ldrb	r2, [r3, #0]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a98:	1c5a      	adds	r2, r3, #1
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	3b01      	subs	r3, #1
 8005aa6:	b29a      	uxth	r2, r3
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ab0:	3b01      	subs	r3, #1
 8005ab2:	b29a      	uxth	r2, r3
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ab8:	697a      	ldr	r2, [r7, #20]
 8005aba:	6a39      	ldr	r1, [r7, #32]
 8005abc:	68f8      	ldr	r0, [r7, #12]
 8005abe:	f000 fa19 	bl	8005ef4 <I2C_WaitOnBTFFlagUntilTimeout>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d00d      	beq.n	8005ae4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005acc:	2b04      	cmp	r3, #4
 8005ace:	d107      	bne.n	8005ae0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ade:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e01a      	b.n	8005b1a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d194      	bne.n	8005a16 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005afa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2220      	movs	r2, #32
 8005b00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005b14:	2300      	movs	r3, #0
 8005b16:	e000      	b.n	8005b1a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005b18:	2302      	movs	r3, #2
  }
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3718      	adds	r7, #24
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	00100002 	.word	0x00100002
 8005b28:	ffff0000 	.word	0xffff0000

08005b2c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b088      	sub	sp, #32
 8005b30:	af02      	add	r7, sp, #8
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	607a      	str	r2, [r7, #4]
 8005b36:	603b      	str	r3, [r7, #0]
 8005b38:	460b      	mov	r3, r1
 8005b3a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b40:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	2b08      	cmp	r3, #8
 8005b46:	d006      	beq.n	8005b56 <I2C_MasterRequestWrite+0x2a>
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d003      	beq.n	8005b56 <I2C_MasterRequestWrite+0x2a>
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005b54:	d108      	bne.n	8005b68 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005b64:	601a      	str	r2, [r3, #0]
 8005b66:	e00b      	b.n	8005b80 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b6c:	2b12      	cmp	r3, #18
 8005b6e:	d107      	bne.n	8005b80 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005b7e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	9300      	str	r3, [sp, #0]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005b8c:	68f8      	ldr	r0, [r7, #12]
 8005b8e:	f000 f84f 	bl	8005c30 <I2C_WaitOnFlagUntilTimeout>
 8005b92:	4603      	mov	r3, r0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d00d      	beq.n	8005bb4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ba2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ba6:	d103      	bne.n	8005bb0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005bae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005bb0:	2303      	movs	r3, #3
 8005bb2:	e035      	b.n	8005c20 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	691b      	ldr	r3, [r3, #16]
 8005bb8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005bbc:	d108      	bne.n	8005bd0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005bbe:	897b      	ldrh	r3, [r7, #10]
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005bcc:	611a      	str	r2, [r3, #16]
 8005bce:	e01b      	b.n	8005c08 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005bd0:	897b      	ldrh	r3, [r7, #10]
 8005bd2:	11db      	asrs	r3, r3, #7
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	f003 0306 	and.w	r3, r3, #6
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	f063 030f 	orn	r3, r3, #15
 8005be0:	b2da      	uxtb	r2, r3
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	490e      	ldr	r1, [pc, #56]	@ (8005c28 <I2C_MasterRequestWrite+0xfc>)
 8005bee:	68f8      	ldr	r0, [r7, #12]
 8005bf0:	f000 f898 	bl	8005d24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d001      	beq.n	8005bfe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e010      	b.n	8005c20 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005bfe:	897b      	ldrh	r3, [r7, #10]
 8005c00:	b2da      	uxtb	r2, r3
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	687a      	ldr	r2, [r7, #4]
 8005c0c:	4907      	ldr	r1, [pc, #28]	@ (8005c2c <I2C_MasterRequestWrite+0x100>)
 8005c0e:	68f8      	ldr	r0, [r7, #12]
 8005c10:	f000 f888 	bl	8005d24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d001      	beq.n	8005c1e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e000      	b.n	8005c20 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005c1e:	2300      	movs	r3, #0
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3718      	adds	r7, #24
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	00010008 	.word	0x00010008
 8005c2c:	00010002 	.word	0x00010002

08005c30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	60b9      	str	r1, [r7, #8]
 8005c3a:	603b      	str	r3, [r7, #0]
 8005c3c:	4613      	mov	r3, r2
 8005c3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c40:	e048      	b.n	8005cd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c48:	d044      	beq.n	8005cd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c4a:	f7ff f8dd 	bl	8004e08 <HAL_GetTick>
 8005c4e:	4602      	mov	r2, r0
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	1ad3      	subs	r3, r2, r3
 8005c54:	683a      	ldr	r2, [r7, #0]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d302      	bcc.n	8005c60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d139      	bne.n	8005cd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	0c1b      	lsrs	r3, r3, #16
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d10d      	bne.n	8005c86 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	695b      	ldr	r3, [r3, #20]
 8005c70:	43da      	mvns	r2, r3
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	4013      	ands	r3, r2
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	bf0c      	ite	eq
 8005c7c:	2301      	moveq	r3, #1
 8005c7e:	2300      	movne	r3, #0
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	461a      	mov	r2, r3
 8005c84:	e00c      	b.n	8005ca0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	699b      	ldr	r3, [r3, #24]
 8005c8c:	43da      	mvns	r2, r3
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	4013      	ands	r3, r2
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	bf0c      	ite	eq
 8005c98:	2301      	moveq	r3, #1
 8005c9a:	2300      	movne	r3, #0
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	79fb      	ldrb	r3, [r7, #7]
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d116      	bne.n	8005cd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2220      	movs	r2, #32
 8005cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cc0:	f043 0220 	orr.w	r2, r3, #32
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e023      	b.n	8005d1c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	0c1b      	lsrs	r3, r3, #16
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d10d      	bne.n	8005cfa <I2C_WaitOnFlagUntilTimeout+0xca>
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	695b      	ldr	r3, [r3, #20]
 8005ce4:	43da      	mvns	r2, r3
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	4013      	ands	r3, r2
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	bf0c      	ite	eq
 8005cf0:	2301      	moveq	r3, #1
 8005cf2:	2300      	movne	r3, #0
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	e00c      	b.n	8005d14 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	699b      	ldr	r3, [r3, #24]
 8005d00:	43da      	mvns	r2, r3
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	4013      	ands	r3, r2
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	bf0c      	ite	eq
 8005d0c:	2301      	moveq	r3, #1
 8005d0e:	2300      	movne	r3, #0
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	461a      	mov	r2, r3
 8005d14:	79fb      	ldrb	r3, [r7, #7]
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d093      	beq.n	8005c42 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d1a:	2300      	movs	r3, #0
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3710      	adds	r7, #16
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b084      	sub	sp, #16
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	60f8      	str	r0, [r7, #12]
 8005d2c:	60b9      	str	r1, [r7, #8]
 8005d2e:	607a      	str	r2, [r7, #4]
 8005d30:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005d32:	e071      	b.n	8005e18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	695b      	ldr	r3, [r3, #20]
 8005d3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d42:	d123      	bne.n	8005d8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d52:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005d5c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2200      	movs	r2, #0
 8005d62:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2220      	movs	r2, #32
 8005d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d78:	f043 0204 	orr.w	r2, r3, #4
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2200      	movs	r2, #0
 8005d84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e067      	b.n	8005e5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d92:	d041      	beq.n	8005e18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d94:	f7ff f838 	bl	8004e08 <HAL_GetTick>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	1ad3      	subs	r3, r2, r3
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d302      	bcc.n	8005daa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d136      	bne.n	8005e18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	0c1b      	lsrs	r3, r3, #16
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d10c      	bne.n	8005dce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	695b      	ldr	r3, [r3, #20]
 8005dba:	43da      	mvns	r2, r3
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	4013      	ands	r3, r2
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	bf14      	ite	ne
 8005dc6:	2301      	movne	r3, #1
 8005dc8:	2300      	moveq	r3, #0
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	e00b      	b.n	8005de6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	699b      	ldr	r3, [r3, #24]
 8005dd4:	43da      	mvns	r2, r3
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	4013      	ands	r3, r2
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	bf14      	ite	ne
 8005de0:	2301      	movne	r3, #1
 8005de2:	2300      	moveq	r3, #0
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d016      	beq.n	8005e18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2200      	movs	r2, #0
 8005dee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2220      	movs	r2, #32
 8005df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e04:	f043 0220 	orr.w	r2, r3, #32
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	e021      	b.n	8005e5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	0c1b      	lsrs	r3, r3, #16
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d10c      	bne.n	8005e3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	695b      	ldr	r3, [r3, #20]
 8005e28:	43da      	mvns	r2, r3
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	bf14      	ite	ne
 8005e34:	2301      	movne	r3, #1
 8005e36:	2300      	moveq	r3, #0
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	e00b      	b.n	8005e54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	699b      	ldr	r3, [r3, #24]
 8005e42:	43da      	mvns	r2, r3
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	4013      	ands	r3, r2
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	bf14      	ite	ne
 8005e4e:	2301      	movne	r3, #1
 8005e50:	2300      	moveq	r3, #0
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	f47f af6d 	bne.w	8005d34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005e5a:	2300      	movs	r3, #0
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3710      	adds	r7, #16
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}

08005e64 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b084      	sub	sp, #16
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	60b9      	str	r1, [r7, #8]
 8005e6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e70:	e034      	b.n	8005edc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005e72:	68f8      	ldr	r0, [r7, #12]
 8005e74:	f000 f886 	bl	8005f84 <I2C_IsAcknowledgeFailed>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d001      	beq.n	8005e82 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e034      	b.n	8005eec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e88:	d028      	beq.n	8005edc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e8a:	f7fe ffbd 	bl	8004e08 <HAL_GetTick>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	1ad3      	subs	r3, r2, r3
 8005e94:	68ba      	ldr	r2, [r7, #8]
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d302      	bcc.n	8005ea0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d11d      	bne.n	8005edc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	695b      	ldr	r3, [r3, #20]
 8005ea6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005eaa:	2b80      	cmp	r3, #128	@ 0x80
 8005eac:	d016      	beq.n	8005edc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2220      	movs	r2, #32
 8005eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ec8:	f043 0220 	orr.w	r2, r3, #32
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	e007      	b.n	8005eec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	695b      	ldr	r3, [r3, #20]
 8005ee2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ee6:	2b80      	cmp	r3, #128	@ 0x80
 8005ee8:	d1c3      	bne.n	8005e72 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005eea:	2300      	movs	r3, #0
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3710      	adds	r7, #16
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	60f8      	str	r0, [r7, #12]
 8005efc:	60b9      	str	r1, [r7, #8]
 8005efe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005f00:	e034      	b.n	8005f6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005f02:	68f8      	ldr	r0, [r7, #12]
 8005f04:	f000 f83e 	bl	8005f84 <I2C_IsAcknowledgeFailed>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d001      	beq.n	8005f12 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e034      	b.n	8005f7c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f18:	d028      	beq.n	8005f6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f1a:	f7fe ff75 	bl	8004e08 <HAL_GetTick>
 8005f1e:	4602      	mov	r2, r0
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	1ad3      	subs	r3, r2, r3
 8005f24:	68ba      	ldr	r2, [r7, #8]
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d302      	bcc.n	8005f30 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d11d      	bne.n	8005f6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	695b      	ldr	r3, [r3, #20]
 8005f36:	f003 0304 	and.w	r3, r3, #4
 8005f3a:	2b04      	cmp	r3, #4
 8005f3c:	d016      	beq.n	8005f6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2200      	movs	r2, #0
 8005f42:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2220      	movs	r2, #32
 8005f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f58:	f043 0220 	orr.w	r2, r3, #32
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2200      	movs	r2, #0
 8005f64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e007      	b.n	8005f7c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	695b      	ldr	r3, [r3, #20]
 8005f72:	f003 0304 	and.w	r3, r3, #4
 8005f76:	2b04      	cmp	r3, #4
 8005f78:	d1c3      	bne.n	8005f02 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005f7a:	2300      	movs	r3, #0
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3710      	adds	r7, #16
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	695b      	ldr	r3, [r3, #20]
 8005f92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f9a:	d11b      	bne.n	8005fd4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005fa4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2220      	movs	r2, #32
 8005fb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fc0:	f043 0204 	orr.w	r2, r3, #4
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e000      	b.n	8005fd6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005fd4:	2300      	movs	r3, #0
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	370c      	adds	r7, #12
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bc80      	pop	{r7}
 8005fde:	4770      	bx	lr

08005fe0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b086      	sub	sp, #24
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d101      	bne.n	8005ff2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e272      	b.n	80064d8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f003 0301 	and.w	r3, r3, #1
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	f000 8087 	beq.w	800610e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006000:	4b92      	ldr	r3, [pc, #584]	@ (800624c <HAL_RCC_OscConfig+0x26c>)
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	f003 030c 	and.w	r3, r3, #12
 8006008:	2b04      	cmp	r3, #4
 800600a:	d00c      	beq.n	8006026 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800600c:	4b8f      	ldr	r3, [pc, #572]	@ (800624c <HAL_RCC_OscConfig+0x26c>)
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	f003 030c 	and.w	r3, r3, #12
 8006014:	2b08      	cmp	r3, #8
 8006016:	d112      	bne.n	800603e <HAL_RCC_OscConfig+0x5e>
 8006018:	4b8c      	ldr	r3, [pc, #560]	@ (800624c <HAL_RCC_OscConfig+0x26c>)
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006020:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006024:	d10b      	bne.n	800603e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006026:	4b89      	ldr	r3, [pc, #548]	@ (800624c <HAL_RCC_OscConfig+0x26c>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800602e:	2b00      	cmp	r3, #0
 8006030:	d06c      	beq.n	800610c <HAL_RCC_OscConfig+0x12c>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d168      	bne.n	800610c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	e24c      	b.n	80064d8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006046:	d106      	bne.n	8006056 <HAL_RCC_OscConfig+0x76>
 8006048:	4b80      	ldr	r3, [pc, #512]	@ (800624c <HAL_RCC_OscConfig+0x26c>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a7f      	ldr	r2, [pc, #508]	@ (800624c <HAL_RCC_OscConfig+0x26c>)
 800604e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006052:	6013      	str	r3, [r2, #0]
 8006054:	e02e      	b.n	80060b4 <HAL_RCC_OscConfig+0xd4>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d10c      	bne.n	8006078 <HAL_RCC_OscConfig+0x98>
 800605e:	4b7b      	ldr	r3, [pc, #492]	@ (800624c <HAL_RCC_OscConfig+0x26c>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a7a      	ldr	r2, [pc, #488]	@ (800624c <HAL_RCC_OscConfig+0x26c>)
 8006064:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006068:	6013      	str	r3, [r2, #0]
 800606a:	4b78      	ldr	r3, [pc, #480]	@ (800624c <HAL_RCC_OscConfig+0x26c>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a77      	ldr	r2, [pc, #476]	@ (800624c <HAL_RCC_OscConfig+0x26c>)
 8006070:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006074:	6013      	str	r3, [r2, #0]
 8006076:	e01d      	b.n	80060b4 <HAL_RCC_OscConfig+0xd4>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006080:	d10c      	bne.n	800609c <HAL_RCC_OscConfig+0xbc>
 8006082:	4b72      	ldr	r3, [pc, #456]	@ (800624c <HAL_RCC_OscConfig+0x26c>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a71      	ldr	r2, [pc, #452]	@ (800624c <HAL_RCC_OscConfig+0x26c>)
 8006088:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800608c:	6013      	str	r3, [r2, #0]
 800608e:	4b6f      	ldr	r3, [pc, #444]	@ (800624c <HAL_RCC_OscConfig+0x26c>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a6e      	ldr	r2, [pc, #440]	@ (800624c <HAL_RCC_OscConfig+0x26c>)
 8006094:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006098:	6013      	str	r3, [r2, #0]
 800609a:	e00b      	b.n	80060b4 <HAL_RCC_OscConfig+0xd4>
 800609c:	4b6b      	ldr	r3, [pc, #428]	@ (800624c <HAL_RCC_OscConfig+0x26c>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a6a      	ldr	r2, [pc, #424]	@ (800624c <HAL_RCC_OscConfig+0x26c>)
 80060a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060a6:	6013      	str	r3, [r2, #0]
 80060a8:	4b68      	ldr	r3, [pc, #416]	@ (800624c <HAL_RCC_OscConfig+0x26c>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a67      	ldr	r2, [pc, #412]	@ (800624c <HAL_RCC_OscConfig+0x26c>)
 80060ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80060b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d013      	beq.n	80060e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060bc:	f7fe fea4 	bl	8004e08 <HAL_GetTick>
 80060c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060c2:	e008      	b.n	80060d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060c4:	f7fe fea0 	bl	8004e08 <HAL_GetTick>
 80060c8:	4602      	mov	r2, r0
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	1ad3      	subs	r3, r2, r3
 80060ce:	2b64      	cmp	r3, #100	@ 0x64
 80060d0:	d901      	bls.n	80060d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80060d2:	2303      	movs	r3, #3
 80060d4:	e200      	b.n	80064d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060d6:	4b5d      	ldr	r3, [pc, #372]	@ (800624c <HAL_RCC_OscConfig+0x26c>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d0f0      	beq.n	80060c4 <HAL_RCC_OscConfig+0xe4>
 80060e2:	e014      	b.n	800610e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060e4:	f7fe fe90 	bl	8004e08 <HAL_GetTick>
 80060e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060ea:	e008      	b.n	80060fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060ec:	f7fe fe8c 	bl	8004e08 <HAL_GetTick>
 80060f0:	4602      	mov	r2, r0
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	1ad3      	subs	r3, r2, r3
 80060f6:	2b64      	cmp	r3, #100	@ 0x64
 80060f8:	d901      	bls.n	80060fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80060fa:	2303      	movs	r3, #3
 80060fc:	e1ec      	b.n	80064d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060fe:	4b53      	ldr	r3, [pc, #332]	@ (800624c <HAL_RCC_OscConfig+0x26c>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006106:	2b00      	cmp	r3, #0
 8006108:	d1f0      	bne.n	80060ec <HAL_RCC_OscConfig+0x10c>
 800610a:	e000      	b.n	800610e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800610c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f003 0302 	and.w	r3, r3, #2
 8006116:	2b00      	cmp	r3, #0
 8006118:	d063      	beq.n	80061e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800611a:	4b4c      	ldr	r3, [pc, #304]	@ (800624c <HAL_RCC_OscConfig+0x26c>)
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	f003 030c 	and.w	r3, r3, #12
 8006122:	2b00      	cmp	r3, #0
 8006124:	d00b      	beq.n	800613e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006126:	4b49      	ldr	r3, [pc, #292]	@ (800624c <HAL_RCC_OscConfig+0x26c>)
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	f003 030c 	and.w	r3, r3, #12
 800612e:	2b08      	cmp	r3, #8
 8006130:	d11c      	bne.n	800616c <HAL_RCC_OscConfig+0x18c>
 8006132:	4b46      	ldr	r3, [pc, #280]	@ (800624c <HAL_RCC_OscConfig+0x26c>)
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800613a:	2b00      	cmp	r3, #0
 800613c:	d116      	bne.n	800616c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800613e:	4b43      	ldr	r3, [pc, #268]	@ (800624c <HAL_RCC_OscConfig+0x26c>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f003 0302 	and.w	r3, r3, #2
 8006146:	2b00      	cmp	r3, #0
 8006148:	d005      	beq.n	8006156 <HAL_RCC_OscConfig+0x176>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	691b      	ldr	r3, [r3, #16]
 800614e:	2b01      	cmp	r3, #1
 8006150:	d001      	beq.n	8006156 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	e1c0      	b.n	80064d8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006156:	4b3d      	ldr	r3, [pc, #244]	@ (800624c <HAL_RCC_OscConfig+0x26c>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	695b      	ldr	r3, [r3, #20]
 8006162:	00db      	lsls	r3, r3, #3
 8006164:	4939      	ldr	r1, [pc, #228]	@ (800624c <HAL_RCC_OscConfig+0x26c>)
 8006166:	4313      	orrs	r3, r2
 8006168:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800616a:	e03a      	b.n	80061e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	691b      	ldr	r3, [r3, #16]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d020      	beq.n	80061b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006174:	4b36      	ldr	r3, [pc, #216]	@ (8006250 <HAL_RCC_OscConfig+0x270>)
 8006176:	2201      	movs	r2, #1
 8006178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800617a:	f7fe fe45 	bl	8004e08 <HAL_GetTick>
 800617e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006180:	e008      	b.n	8006194 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006182:	f7fe fe41 	bl	8004e08 <HAL_GetTick>
 8006186:	4602      	mov	r2, r0
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	1ad3      	subs	r3, r2, r3
 800618c:	2b02      	cmp	r3, #2
 800618e:	d901      	bls.n	8006194 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006190:	2303      	movs	r3, #3
 8006192:	e1a1      	b.n	80064d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006194:	4b2d      	ldr	r3, [pc, #180]	@ (800624c <HAL_RCC_OscConfig+0x26c>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f003 0302 	and.w	r3, r3, #2
 800619c:	2b00      	cmp	r3, #0
 800619e:	d0f0      	beq.n	8006182 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061a0:	4b2a      	ldr	r3, [pc, #168]	@ (800624c <HAL_RCC_OscConfig+0x26c>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	695b      	ldr	r3, [r3, #20]
 80061ac:	00db      	lsls	r3, r3, #3
 80061ae:	4927      	ldr	r1, [pc, #156]	@ (800624c <HAL_RCC_OscConfig+0x26c>)
 80061b0:	4313      	orrs	r3, r2
 80061b2:	600b      	str	r3, [r1, #0]
 80061b4:	e015      	b.n	80061e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80061b6:	4b26      	ldr	r3, [pc, #152]	@ (8006250 <HAL_RCC_OscConfig+0x270>)
 80061b8:	2200      	movs	r2, #0
 80061ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061bc:	f7fe fe24 	bl	8004e08 <HAL_GetTick>
 80061c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061c2:	e008      	b.n	80061d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80061c4:	f7fe fe20 	bl	8004e08 <HAL_GetTick>
 80061c8:	4602      	mov	r2, r0
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	1ad3      	subs	r3, r2, r3
 80061ce:	2b02      	cmp	r3, #2
 80061d0:	d901      	bls.n	80061d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80061d2:	2303      	movs	r3, #3
 80061d4:	e180      	b.n	80064d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061d6:	4b1d      	ldr	r3, [pc, #116]	@ (800624c <HAL_RCC_OscConfig+0x26c>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f003 0302 	and.w	r3, r3, #2
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d1f0      	bne.n	80061c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f003 0308 	and.w	r3, r3, #8
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d03a      	beq.n	8006264 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	699b      	ldr	r3, [r3, #24]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d019      	beq.n	800622a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80061f6:	4b17      	ldr	r3, [pc, #92]	@ (8006254 <HAL_RCC_OscConfig+0x274>)
 80061f8:	2201      	movs	r2, #1
 80061fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061fc:	f7fe fe04 	bl	8004e08 <HAL_GetTick>
 8006200:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006202:	e008      	b.n	8006216 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006204:	f7fe fe00 	bl	8004e08 <HAL_GetTick>
 8006208:	4602      	mov	r2, r0
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	1ad3      	subs	r3, r2, r3
 800620e:	2b02      	cmp	r3, #2
 8006210:	d901      	bls.n	8006216 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006212:	2303      	movs	r3, #3
 8006214:	e160      	b.n	80064d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006216:	4b0d      	ldr	r3, [pc, #52]	@ (800624c <HAL_RCC_OscConfig+0x26c>)
 8006218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800621a:	f003 0302 	and.w	r3, r3, #2
 800621e:	2b00      	cmp	r3, #0
 8006220:	d0f0      	beq.n	8006204 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006222:	2001      	movs	r0, #1
 8006224:	f000 faba 	bl	800679c <RCC_Delay>
 8006228:	e01c      	b.n	8006264 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800622a:	4b0a      	ldr	r3, [pc, #40]	@ (8006254 <HAL_RCC_OscConfig+0x274>)
 800622c:	2200      	movs	r2, #0
 800622e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006230:	f7fe fdea 	bl	8004e08 <HAL_GetTick>
 8006234:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006236:	e00f      	b.n	8006258 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006238:	f7fe fde6 	bl	8004e08 <HAL_GetTick>
 800623c:	4602      	mov	r2, r0
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	1ad3      	subs	r3, r2, r3
 8006242:	2b02      	cmp	r3, #2
 8006244:	d908      	bls.n	8006258 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006246:	2303      	movs	r3, #3
 8006248:	e146      	b.n	80064d8 <HAL_RCC_OscConfig+0x4f8>
 800624a:	bf00      	nop
 800624c:	40021000 	.word	0x40021000
 8006250:	42420000 	.word	0x42420000
 8006254:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006258:	4b92      	ldr	r3, [pc, #584]	@ (80064a4 <HAL_RCC_OscConfig+0x4c4>)
 800625a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800625c:	f003 0302 	and.w	r3, r3, #2
 8006260:	2b00      	cmp	r3, #0
 8006262:	d1e9      	bne.n	8006238 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f003 0304 	and.w	r3, r3, #4
 800626c:	2b00      	cmp	r3, #0
 800626e:	f000 80a6 	beq.w	80063be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006272:	2300      	movs	r3, #0
 8006274:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006276:	4b8b      	ldr	r3, [pc, #556]	@ (80064a4 <HAL_RCC_OscConfig+0x4c4>)
 8006278:	69db      	ldr	r3, [r3, #28]
 800627a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800627e:	2b00      	cmp	r3, #0
 8006280:	d10d      	bne.n	800629e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006282:	4b88      	ldr	r3, [pc, #544]	@ (80064a4 <HAL_RCC_OscConfig+0x4c4>)
 8006284:	69db      	ldr	r3, [r3, #28]
 8006286:	4a87      	ldr	r2, [pc, #540]	@ (80064a4 <HAL_RCC_OscConfig+0x4c4>)
 8006288:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800628c:	61d3      	str	r3, [r2, #28]
 800628e:	4b85      	ldr	r3, [pc, #532]	@ (80064a4 <HAL_RCC_OscConfig+0x4c4>)
 8006290:	69db      	ldr	r3, [r3, #28]
 8006292:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006296:	60bb      	str	r3, [r7, #8]
 8006298:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800629a:	2301      	movs	r3, #1
 800629c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800629e:	4b82      	ldr	r3, [pc, #520]	@ (80064a8 <HAL_RCC_OscConfig+0x4c8>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d118      	bne.n	80062dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80062aa:	4b7f      	ldr	r3, [pc, #508]	@ (80064a8 <HAL_RCC_OscConfig+0x4c8>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a7e      	ldr	r2, [pc, #504]	@ (80064a8 <HAL_RCC_OscConfig+0x4c8>)
 80062b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80062b6:	f7fe fda7 	bl	8004e08 <HAL_GetTick>
 80062ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062bc:	e008      	b.n	80062d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062be:	f7fe fda3 	bl	8004e08 <HAL_GetTick>
 80062c2:	4602      	mov	r2, r0
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	1ad3      	subs	r3, r2, r3
 80062c8:	2b64      	cmp	r3, #100	@ 0x64
 80062ca:	d901      	bls.n	80062d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80062cc:	2303      	movs	r3, #3
 80062ce:	e103      	b.n	80064d8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062d0:	4b75      	ldr	r3, [pc, #468]	@ (80064a8 <HAL_RCC_OscConfig+0x4c8>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d0f0      	beq.n	80062be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d106      	bne.n	80062f2 <HAL_RCC_OscConfig+0x312>
 80062e4:	4b6f      	ldr	r3, [pc, #444]	@ (80064a4 <HAL_RCC_OscConfig+0x4c4>)
 80062e6:	6a1b      	ldr	r3, [r3, #32]
 80062e8:	4a6e      	ldr	r2, [pc, #440]	@ (80064a4 <HAL_RCC_OscConfig+0x4c4>)
 80062ea:	f043 0301 	orr.w	r3, r3, #1
 80062ee:	6213      	str	r3, [r2, #32]
 80062f0:	e02d      	b.n	800634e <HAL_RCC_OscConfig+0x36e>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d10c      	bne.n	8006314 <HAL_RCC_OscConfig+0x334>
 80062fa:	4b6a      	ldr	r3, [pc, #424]	@ (80064a4 <HAL_RCC_OscConfig+0x4c4>)
 80062fc:	6a1b      	ldr	r3, [r3, #32]
 80062fe:	4a69      	ldr	r2, [pc, #420]	@ (80064a4 <HAL_RCC_OscConfig+0x4c4>)
 8006300:	f023 0301 	bic.w	r3, r3, #1
 8006304:	6213      	str	r3, [r2, #32]
 8006306:	4b67      	ldr	r3, [pc, #412]	@ (80064a4 <HAL_RCC_OscConfig+0x4c4>)
 8006308:	6a1b      	ldr	r3, [r3, #32]
 800630a:	4a66      	ldr	r2, [pc, #408]	@ (80064a4 <HAL_RCC_OscConfig+0x4c4>)
 800630c:	f023 0304 	bic.w	r3, r3, #4
 8006310:	6213      	str	r3, [r2, #32]
 8006312:	e01c      	b.n	800634e <HAL_RCC_OscConfig+0x36e>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	2b05      	cmp	r3, #5
 800631a:	d10c      	bne.n	8006336 <HAL_RCC_OscConfig+0x356>
 800631c:	4b61      	ldr	r3, [pc, #388]	@ (80064a4 <HAL_RCC_OscConfig+0x4c4>)
 800631e:	6a1b      	ldr	r3, [r3, #32]
 8006320:	4a60      	ldr	r2, [pc, #384]	@ (80064a4 <HAL_RCC_OscConfig+0x4c4>)
 8006322:	f043 0304 	orr.w	r3, r3, #4
 8006326:	6213      	str	r3, [r2, #32]
 8006328:	4b5e      	ldr	r3, [pc, #376]	@ (80064a4 <HAL_RCC_OscConfig+0x4c4>)
 800632a:	6a1b      	ldr	r3, [r3, #32]
 800632c:	4a5d      	ldr	r2, [pc, #372]	@ (80064a4 <HAL_RCC_OscConfig+0x4c4>)
 800632e:	f043 0301 	orr.w	r3, r3, #1
 8006332:	6213      	str	r3, [r2, #32]
 8006334:	e00b      	b.n	800634e <HAL_RCC_OscConfig+0x36e>
 8006336:	4b5b      	ldr	r3, [pc, #364]	@ (80064a4 <HAL_RCC_OscConfig+0x4c4>)
 8006338:	6a1b      	ldr	r3, [r3, #32]
 800633a:	4a5a      	ldr	r2, [pc, #360]	@ (80064a4 <HAL_RCC_OscConfig+0x4c4>)
 800633c:	f023 0301 	bic.w	r3, r3, #1
 8006340:	6213      	str	r3, [r2, #32]
 8006342:	4b58      	ldr	r3, [pc, #352]	@ (80064a4 <HAL_RCC_OscConfig+0x4c4>)
 8006344:	6a1b      	ldr	r3, [r3, #32]
 8006346:	4a57      	ldr	r2, [pc, #348]	@ (80064a4 <HAL_RCC_OscConfig+0x4c4>)
 8006348:	f023 0304 	bic.w	r3, r3, #4
 800634c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d015      	beq.n	8006382 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006356:	f7fe fd57 	bl	8004e08 <HAL_GetTick>
 800635a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800635c:	e00a      	b.n	8006374 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800635e:	f7fe fd53 	bl	8004e08 <HAL_GetTick>
 8006362:	4602      	mov	r2, r0
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	1ad3      	subs	r3, r2, r3
 8006368:	f241 3288 	movw	r2, #5000	@ 0x1388
 800636c:	4293      	cmp	r3, r2
 800636e:	d901      	bls.n	8006374 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006370:	2303      	movs	r3, #3
 8006372:	e0b1      	b.n	80064d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006374:	4b4b      	ldr	r3, [pc, #300]	@ (80064a4 <HAL_RCC_OscConfig+0x4c4>)
 8006376:	6a1b      	ldr	r3, [r3, #32]
 8006378:	f003 0302 	and.w	r3, r3, #2
 800637c:	2b00      	cmp	r3, #0
 800637e:	d0ee      	beq.n	800635e <HAL_RCC_OscConfig+0x37e>
 8006380:	e014      	b.n	80063ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006382:	f7fe fd41 	bl	8004e08 <HAL_GetTick>
 8006386:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006388:	e00a      	b.n	80063a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800638a:	f7fe fd3d 	bl	8004e08 <HAL_GetTick>
 800638e:	4602      	mov	r2, r0
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	1ad3      	subs	r3, r2, r3
 8006394:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006398:	4293      	cmp	r3, r2
 800639a:	d901      	bls.n	80063a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800639c:	2303      	movs	r3, #3
 800639e:	e09b      	b.n	80064d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063a0:	4b40      	ldr	r3, [pc, #256]	@ (80064a4 <HAL_RCC_OscConfig+0x4c4>)
 80063a2:	6a1b      	ldr	r3, [r3, #32]
 80063a4:	f003 0302 	and.w	r3, r3, #2
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d1ee      	bne.n	800638a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80063ac:	7dfb      	ldrb	r3, [r7, #23]
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d105      	bne.n	80063be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063b2:	4b3c      	ldr	r3, [pc, #240]	@ (80064a4 <HAL_RCC_OscConfig+0x4c4>)
 80063b4:	69db      	ldr	r3, [r3, #28]
 80063b6:	4a3b      	ldr	r2, [pc, #236]	@ (80064a4 <HAL_RCC_OscConfig+0x4c4>)
 80063b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80063bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	69db      	ldr	r3, [r3, #28]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	f000 8087 	beq.w	80064d6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80063c8:	4b36      	ldr	r3, [pc, #216]	@ (80064a4 <HAL_RCC_OscConfig+0x4c4>)
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	f003 030c 	and.w	r3, r3, #12
 80063d0:	2b08      	cmp	r3, #8
 80063d2:	d061      	beq.n	8006498 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	69db      	ldr	r3, [r3, #28]
 80063d8:	2b02      	cmp	r3, #2
 80063da:	d146      	bne.n	800646a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063dc:	4b33      	ldr	r3, [pc, #204]	@ (80064ac <HAL_RCC_OscConfig+0x4cc>)
 80063de:	2200      	movs	r2, #0
 80063e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063e2:	f7fe fd11 	bl	8004e08 <HAL_GetTick>
 80063e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80063e8:	e008      	b.n	80063fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063ea:	f7fe fd0d 	bl	8004e08 <HAL_GetTick>
 80063ee:	4602      	mov	r2, r0
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	1ad3      	subs	r3, r2, r3
 80063f4:	2b02      	cmp	r3, #2
 80063f6:	d901      	bls.n	80063fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80063f8:	2303      	movs	r3, #3
 80063fa:	e06d      	b.n	80064d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80063fc:	4b29      	ldr	r3, [pc, #164]	@ (80064a4 <HAL_RCC_OscConfig+0x4c4>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006404:	2b00      	cmp	r3, #0
 8006406:	d1f0      	bne.n	80063ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6a1b      	ldr	r3, [r3, #32]
 800640c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006410:	d108      	bne.n	8006424 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006412:	4b24      	ldr	r3, [pc, #144]	@ (80064a4 <HAL_RCC_OscConfig+0x4c4>)
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	4921      	ldr	r1, [pc, #132]	@ (80064a4 <HAL_RCC_OscConfig+0x4c4>)
 8006420:	4313      	orrs	r3, r2
 8006422:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006424:	4b1f      	ldr	r3, [pc, #124]	@ (80064a4 <HAL_RCC_OscConfig+0x4c4>)
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6a19      	ldr	r1, [r3, #32]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006434:	430b      	orrs	r3, r1
 8006436:	491b      	ldr	r1, [pc, #108]	@ (80064a4 <HAL_RCC_OscConfig+0x4c4>)
 8006438:	4313      	orrs	r3, r2
 800643a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800643c:	4b1b      	ldr	r3, [pc, #108]	@ (80064ac <HAL_RCC_OscConfig+0x4cc>)
 800643e:	2201      	movs	r2, #1
 8006440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006442:	f7fe fce1 	bl	8004e08 <HAL_GetTick>
 8006446:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006448:	e008      	b.n	800645c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800644a:	f7fe fcdd 	bl	8004e08 <HAL_GetTick>
 800644e:	4602      	mov	r2, r0
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	1ad3      	subs	r3, r2, r3
 8006454:	2b02      	cmp	r3, #2
 8006456:	d901      	bls.n	800645c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006458:	2303      	movs	r3, #3
 800645a:	e03d      	b.n	80064d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800645c:	4b11      	ldr	r3, [pc, #68]	@ (80064a4 <HAL_RCC_OscConfig+0x4c4>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006464:	2b00      	cmp	r3, #0
 8006466:	d0f0      	beq.n	800644a <HAL_RCC_OscConfig+0x46a>
 8006468:	e035      	b.n	80064d6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800646a:	4b10      	ldr	r3, [pc, #64]	@ (80064ac <HAL_RCC_OscConfig+0x4cc>)
 800646c:	2200      	movs	r2, #0
 800646e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006470:	f7fe fcca 	bl	8004e08 <HAL_GetTick>
 8006474:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006476:	e008      	b.n	800648a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006478:	f7fe fcc6 	bl	8004e08 <HAL_GetTick>
 800647c:	4602      	mov	r2, r0
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	1ad3      	subs	r3, r2, r3
 8006482:	2b02      	cmp	r3, #2
 8006484:	d901      	bls.n	800648a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006486:	2303      	movs	r3, #3
 8006488:	e026      	b.n	80064d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800648a:	4b06      	ldr	r3, [pc, #24]	@ (80064a4 <HAL_RCC_OscConfig+0x4c4>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006492:	2b00      	cmp	r3, #0
 8006494:	d1f0      	bne.n	8006478 <HAL_RCC_OscConfig+0x498>
 8006496:	e01e      	b.n	80064d6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	69db      	ldr	r3, [r3, #28]
 800649c:	2b01      	cmp	r3, #1
 800649e:	d107      	bne.n	80064b0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	e019      	b.n	80064d8 <HAL_RCC_OscConfig+0x4f8>
 80064a4:	40021000 	.word	0x40021000
 80064a8:	40007000 	.word	0x40007000
 80064ac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80064b0:	4b0b      	ldr	r3, [pc, #44]	@ (80064e0 <HAL_RCC_OscConfig+0x500>)
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6a1b      	ldr	r3, [r3, #32]
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d106      	bne.n	80064d2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d001      	beq.n	80064d6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	e000      	b.n	80064d8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80064d6:	2300      	movs	r3, #0
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3718      	adds	r7, #24
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}
 80064e0:	40021000 	.word	0x40021000

080064e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b084      	sub	sp, #16
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d101      	bne.n	80064f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	e0d0      	b.n	800669a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80064f8:	4b6a      	ldr	r3, [pc, #424]	@ (80066a4 <HAL_RCC_ClockConfig+0x1c0>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f003 0307 	and.w	r3, r3, #7
 8006500:	683a      	ldr	r2, [r7, #0]
 8006502:	429a      	cmp	r2, r3
 8006504:	d910      	bls.n	8006528 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006506:	4b67      	ldr	r3, [pc, #412]	@ (80066a4 <HAL_RCC_ClockConfig+0x1c0>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f023 0207 	bic.w	r2, r3, #7
 800650e:	4965      	ldr	r1, [pc, #404]	@ (80066a4 <HAL_RCC_ClockConfig+0x1c0>)
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	4313      	orrs	r3, r2
 8006514:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006516:	4b63      	ldr	r3, [pc, #396]	@ (80066a4 <HAL_RCC_ClockConfig+0x1c0>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f003 0307 	and.w	r3, r3, #7
 800651e:	683a      	ldr	r2, [r7, #0]
 8006520:	429a      	cmp	r2, r3
 8006522:	d001      	beq.n	8006528 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	e0b8      	b.n	800669a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f003 0302 	and.w	r3, r3, #2
 8006530:	2b00      	cmp	r3, #0
 8006532:	d020      	beq.n	8006576 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f003 0304 	and.w	r3, r3, #4
 800653c:	2b00      	cmp	r3, #0
 800653e:	d005      	beq.n	800654c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006540:	4b59      	ldr	r3, [pc, #356]	@ (80066a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	4a58      	ldr	r2, [pc, #352]	@ (80066a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006546:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800654a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 0308 	and.w	r3, r3, #8
 8006554:	2b00      	cmp	r3, #0
 8006556:	d005      	beq.n	8006564 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006558:	4b53      	ldr	r3, [pc, #332]	@ (80066a8 <HAL_RCC_ClockConfig+0x1c4>)
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	4a52      	ldr	r2, [pc, #328]	@ (80066a8 <HAL_RCC_ClockConfig+0x1c4>)
 800655e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8006562:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006564:	4b50      	ldr	r3, [pc, #320]	@ (80066a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	494d      	ldr	r1, [pc, #308]	@ (80066a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006572:	4313      	orrs	r3, r2
 8006574:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f003 0301 	and.w	r3, r3, #1
 800657e:	2b00      	cmp	r3, #0
 8006580:	d040      	beq.n	8006604 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	2b01      	cmp	r3, #1
 8006588:	d107      	bne.n	800659a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800658a:	4b47      	ldr	r3, [pc, #284]	@ (80066a8 <HAL_RCC_ClockConfig+0x1c4>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006592:	2b00      	cmp	r3, #0
 8006594:	d115      	bne.n	80065c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	e07f      	b.n	800669a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	2b02      	cmp	r3, #2
 80065a0:	d107      	bne.n	80065b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065a2:	4b41      	ldr	r3, [pc, #260]	@ (80066a8 <HAL_RCC_ClockConfig+0x1c4>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d109      	bne.n	80065c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	e073      	b.n	800669a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065b2:	4b3d      	ldr	r3, [pc, #244]	@ (80066a8 <HAL_RCC_ClockConfig+0x1c4>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f003 0302 	and.w	r3, r3, #2
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d101      	bne.n	80065c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	e06b      	b.n	800669a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80065c2:	4b39      	ldr	r3, [pc, #228]	@ (80066a8 <HAL_RCC_ClockConfig+0x1c4>)
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	f023 0203 	bic.w	r2, r3, #3
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	4936      	ldr	r1, [pc, #216]	@ (80066a8 <HAL_RCC_ClockConfig+0x1c4>)
 80065d0:	4313      	orrs	r3, r2
 80065d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80065d4:	f7fe fc18 	bl	8004e08 <HAL_GetTick>
 80065d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065da:	e00a      	b.n	80065f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065dc:	f7fe fc14 	bl	8004e08 <HAL_GetTick>
 80065e0:	4602      	mov	r2, r0
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	1ad3      	subs	r3, r2, r3
 80065e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d901      	bls.n	80065f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80065ee:	2303      	movs	r3, #3
 80065f0:	e053      	b.n	800669a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065f2:	4b2d      	ldr	r3, [pc, #180]	@ (80066a8 <HAL_RCC_ClockConfig+0x1c4>)
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	f003 020c 	and.w	r2, r3, #12
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	009b      	lsls	r3, r3, #2
 8006600:	429a      	cmp	r2, r3
 8006602:	d1eb      	bne.n	80065dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006604:	4b27      	ldr	r3, [pc, #156]	@ (80066a4 <HAL_RCC_ClockConfig+0x1c0>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f003 0307 	and.w	r3, r3, #7
 800660c:	683a      	ldr	r2, [r7, #0]
 800660e:	429a      	cmp	r2, r3
 8006610:	d210      	bcs.n	8006634 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006612:	4b24      	ldr	r3, [pc, #144]	@ (80066a4 <HAL_RCC_ClockConfig+0x1c0>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f023 0207 	bic.w	r2, r3, #7
 800661a:	4922      	ldr	r1, [pc, #136]	@ (80066a4 <HAL_RCC_ClockConfig+0x1c0>)
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	4313      	orrs	r3, r2
 8006620:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006622:	4b20      	ldr	r3, [pc, #128]	@ (80066a4 <HAL_RCC_ClockConfig+0x1c0>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f003 0307 	and.w	r3, r3, #7
 800662a:	683a      	ldr	r2, [r7, #0]
 800662c:	429a      	cmp	r2, r3
 800662e:	d001      	beq.n	8006634 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	e032      	b.n	800669a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 0304 	and.w	r3, r3, #4
 800663c:	2b00      	cmp	r3, #0
 800663e:	d008      	beq.n	8006652 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006640:	4b19      	ldr	r3, [pc, #100]	@ (80066a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	68db      	ldr	r3, [r3, #12]
 800664c:	4916      	ldr	r1, [pc, #88]	@ (80066a8 <HAL_RCC_ClockConfig+0x1c4>)
 800664e:	4313      	orrs	r3, r2
 8006650:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f003 0308 	and.w	r3, r3, #8
 800665a:	2b00      	cmp	r3, #0
 800665c:	d009      	beq.n	8006672 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800665e:	4b12      	ldr	r3, [pc, #72]	@ (80066a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	691b      	ldr	r3, [r3, #16]
 800666a:	00db      	lsls	r3, r3, #3
 800666c:	490e      	ldr	r1, [pc, #56]	@ (80066a8 <HAL_RCC_ClockConfig+0x1c4>)
 800666e:	4313      	orrs	r3, r2
 8006670:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006672:	f000 f821 	bl	80066b8 <HAL_RCC_GetSysClockFreq>
 8006676:	4602      	mov	r2, r0
 8006678:	4b0b      	ldr	r3, [pc, #44]	@ (80066a8 <HAL_RCC_ClockConfig+0x1c4>)
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	091b      	lsrs	r3, r3, #4
 800667e:	f003 030f 	and.w	r3, r3, #15
 8006682:	490a      	ldr	r1, [pc, #40]	@ (80066ac <HAL_RCC_ClockConfig+0x1c8>)
 8006684:	5ccb      	ldrb	r3, [r1, r3]
 8006686:	fa22 f303 	lsr.w	r3, r2, r3
 800668a:	4a09      	ldr	r2, [pc, #36]	@ (80066b0 <HAL_RCC_ClockConfig+0x1cc>)
 800668c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800668e:	4b09      	ldr	r3, [pc, #36]	@ (80066b4 <HAL_RCC_ClockConfig+0x1d0>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4618      	mov	r0, r3
 8006694:	f7fe fb76 	bl	8004d84 <HAL_InitTick>

  return HAL_OK;
 8006698:	2300      	movs	r3, #0
}
 800669a:	4618      	mov	r0, r3
 800669c:	3710      	adds	r7, #16
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	bf00      	nop
 80066a4:	40022000 	.word	0x40022000
 80066a8:	40021000 	.word	0x40021000
 80066ac:	0800a314 	.word	0x0800a314
 80066b0:	2000001c 	.word	0x2000001c
 80066b4:	20000020 	.word	0x20000020

080066b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b087      	sub	sp, #28
 80066bc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80066be:	2300      	movs	r3, #0
 80066c0:	60fb      	str	r3, [r7, #12]
 80066c2:	2300      	movs	r3, #0
 80066c4:	60bb      	str	r3, [r7, #8]
 80066c6:	2300      	movs	r3, #0
 80066c8:	617b      	str	r3, [r7, #20]
 80066ca:	2300      	movs	r3, #0
 80066cc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80066ce:	2300      	movs	r3, #0
 80066d0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80066d2:	4b1e      	ldr	r3, [pc, #120]	@ (800674c <HAL_RCC_GetSysClockFreq+0x94>)
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f003 030c 	and.w	r3, r3, #12
 80066de:	2b04      	cmp	r3, #4
 80066e0:	d002      	beq.n	80066e8 <HAL_RCC_GetSysClockFreq+0x30>
 80066e2:	2b08      	cmp	r3, #8
 80066e4:	d003      	beq.n	80066ee <HAL_RCC_GetSysClockFreq+0x36>
 80066e6:	e027      	b.n	8006738 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80066e8:	4b19      	ldr	r3, [pc, #100]	@ (8006750 <HAL_RCC_GetSysClockFreq+0x98>)
 80066ea:	613b      	str	r3, [r7, #16]
      break;
 80066ec:	e027      	b.n	800673e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	0c9b      	lsrs	r3, r3, #18
 80066f2:	f003 030f 	and.w	r3, r3, #15
 80066f6:	4a17      	ldr	r2, [pc, #92]	@ (8006754 <HAL_RCC_GetSysClockFreq+0x9c>)
 80066f8:	5cd3      	ldrb	r3, [r2, r3]
 80066fa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006702:	2b00      	cmp	r3, #0
 8006704:	d010      	beq.n	8006728 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006706:	4b11      	ldr	r3, [pc, #68]	@ (800674c <HAL_RCC_GetSysClockFreq+0x94>)
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	0c5b      	lsrs	r3, r3, #17
 800670c:	f003 0301 	and.w	r3, r3, #1
 8006710:	4a11      	ldr	r2, [pc, #68]	@ (8006758 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006712:	5cd3      	ldrb	r3, [r2, r3]
 8006714:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	4a0d      	ldr	r2, [pc, #52]	@ (8006750 <HAL_RCC_GetSysClockFreq+0x98>)
 800671a:	fb03 f202 	mul.w	r2, r3, r2
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	fbb2 f3f3 	udiv	r3, r2, r3
 8006724:	617b      	str	r3, [r7, #20]
 8006726:	e004      	b.n	8006732 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	4a0c      	ldr	r2, [pc, #48]	@ (800675c <HAL_RCC_GetSysClockFreq+0xa4>)
 800672c:	fb02 f303 	mul.w	r3, r2, r3
 8006730:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	613b      	str	r3, [r7, #16]
      break;
 8006736:	e002      	b.n	800673e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006738:	4b05      	ldr	r3, [pc, #20]	@ (8006750 <HAL_RCC_GetSysClockFreq+0x98>)
 800673a:	613b      	str	r3, [r7, #16]
      break;
 800673c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800673e:	693b      	ldr	r3, [r7, #16]
}
 8006740:	4618      	mov	r0, r3
 8006742:	371c      	adds	r7, #28
 8006744:	46bd      	mov	sp, r7
 8006746:	bc80      	pop	{r7}
 8006748:	4770      	bx	lr
 800674a:	bf00      	nop
 800674c:	40021000 	.word	0x40021000
 8006750:	007a1200 	.word	0x007a1200
 8006754:	0800a32c 	.word	0x0800a32c
 8006758:	0800a33c 	.word	0x0800a33c
 800675c:	003d0900 	.word	0x003d0900

08006760 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006760:	b480      	push	{r7}
 8006762:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006764:	4b02      	ldr	r3, [pc, #8]	@ (8006770 <HAL_RCC_GetHCLKFreq+0x10>)
 8006766:	681b      	ldr	r3, [r3, #0]
}
 8006768:	4618      	mov	r0, r3
 800676a:	46bd      	mov	sp, r7
 800676c:	bc80      	pop	{r7}
 800676e:	4770      	bx	lr
 8006770:	2000001c 	.word	0x2000001c

08006774 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006778:	f7ff fff2 	bl	8006760 <HAL_RCC_GetHCLKFreq>
 800677c:	4602      	mov	r2, r0
 800677e:	4b05      	ldr	r3, [pc, #20]	@ (8006794 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	0a1b      	lsrs	r3, r3, #8
 8006784:	f003 0307 	and.w	r3, r3, #7
 8006788:	4903      	ldr	r1, [pc, #12]	@ (8006798 <HAL_RCC_GetPCLK1Freq+0x24>)
 800678a:	5ccb      	ldrb	r3, [r1, r3]
 800678c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006790:	4618      	mov	r0, r3
 8006792:	bd80      	pop	{r7, pc}
 8006794:	40021000 	.word	0x40021000
 8006798:	0800a324 	.word	0x0800a324

0800679c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800679c:	b480      	push	{r7}
 800679e:	b085      	sub	sp, #20
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80067a4:	4b0a      	ldr	r3, [pc, #40]	@ (80067d0 <RCC_Delay+0x34>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a0a      	ldr	r2, [pc, #40]	@ (80067d4 <RCC_Delay+0x38>)
 80067aa:	fba2 2303 	umull	r2, r3, r2, r3
 80067ae:	0a5b      	lsrs	r3, r3, #9
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	fb02 f303 	mul.w	r3, r2, r3
 80067b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80067b8:	bf00      	nop
  }
  while (Delay --);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	1e5a      	subs	r2, r3, #1
 80067be:	60fa      	str	r2, [r7, #12]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d1f9      	bne.n	80067b8 <RCC_Delay+0x1c>
}
 80067c4:	bf00      	nop
 80067c6:	bf00      	nop
 80067c8:	3714      	adds	r7, #20
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bc80      	pop	{r7}
 80067ce:	4770      	bx	lr
 80067d0:	2000001c 	.word	0x2000001c
 80067d4:	10624dd3 	.word	0x10624dd3

080067d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b082      	sub	sp, #8
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d101      	bne.n	80067ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	e041      	b.n	800686e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d106      	bne.n	8006804 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f7fe f9e0 	bl	8004bc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2202      	movs	r2, #2
 8006808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	3304      	adds	r3, #4
 8006814:	4619      	mov	r1, r3
 8006816:	4610      	mov	r0, r2
 8006818:	f000 fbe2 	bl	8006fe0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2201      	movs	r2, #1
 8006828:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2201      	movs	r2, #1
 8006840:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2201      	movs	r2, #1
 8006848:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2201      	movs	r2, #1
 8006858:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2201      	movs	r2, #1
 8006860:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800686c:	2300      	movs	r3, #0
}
 800686e:	4618      	mov	r0, r3
 8006870:	3708      	adds	r7, #8
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}

08006876 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006876:	b580      	push	{r7, lr}
 8006878:	b082      	sub	sp, #8
 800687a:	af00      	add	r7, sp, #0
 800687c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d101      	bne.n	8006888 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006884:	2301      	movs	r3, #1
 8006886:	e041      	b.n	800690c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800688e:	b2db      	uxtb	r3, r3
 8006890:	2b00      	cmp	r3, #0
 8006892:	d106      	bne.n	80068a2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f000 f839 	bl	8006914 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2202      	movs	r2, #2
 80068a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	3304      	adds	r3, #4
 80068b2:	4619      	mov	r1, r3
 80068b4:	4610      	mov	r0, r2
 80068b6:	f000 fb93 	bl	8006fe0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2201      	movs	r2, #1
 80068be:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2201      	movs	r2, #1
 80068c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2201      	movs	r2, #1
 80068ce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2201      	movs	r2, #1
 80068d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2201      	movs	r2, #1
 80068de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2201      	movs	r2, #1
 80068e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2201      	movs	r2, #1
 80068ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2201      	movs	r2, #1
 80068f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2201      	movs	r2, #1
 80068fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2201      	movs	r2, #1
 8006906:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800690a:	2300      	movs	r3, #0
}
 800690c:	4618      	mov	r0, r3
 800690e:	3708      	adds	r7, #8
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}

08006914 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006914:	b480      	push	{r7}
 8006916:	b083      	sub	sp, #12
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800691c:	bf00      	nop
 800691e:	370c      	adds	r7, #12
 8006920:	46bd      	mov	sp, r7
 8006922:	bc80      	pop	{r7}
 8006924:	4770      	bx	lr
	...

08006928 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b084      	sub	sp, #16
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d109      	bne.n	800694c <HAL_TIM_PWM_Start+0x24>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800693e:	b2db      	uxtb	r3, r3
 8006940:	2b01      	cmp	r3, #1
 8006942:	bf14      	ite	ne
 8006944:	2301      	movne	r3, #1
 8006946:	2300      	moveq	r3, #0
 8006948:	b2db      	uxtb	r3, r3
 800694a:	e022      	b.n	8006992 <HAL_TIM_PWM_Start+0x6a>
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	2b04      	cmp	r3, #4
 8006950:	d109      	bne.n	8006966 <HAL_TIM_PWM_Start+0x3e>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006958:	b2db      	uxtb	r3, r3
 800695a:	2b01      	cmp	r3, #1
 800695c:	bf14      	ite	ne
 800695e:	2301      	movne	r3, #1
 8006960:	2300      	moveq	r3, #0
 8006962:	b2db      	uxtb	r3, r3
 8006964:	e015      	b.n	8006992 <HAL_TIM_PWM_Start+0x6a>
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	2b08      	cmp	r3, #8
 800696a:	d109      	bne.n	8006980 <HAL_TIM_PWM_Start+0x58>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006972:	b2db      	uxtb	r3, r3
 8006974:	2b01      	cmp	r3, #1
 8006976:	bf14      	ite	ne
 8006978:	2301      	movne	r3, #1
 800697a:	2300      	moveq	r3, #0
 800697c:	b2db      	uxtb	r3, r3
 800697e:	e008      	b.n	8006992 <HAL_TIM_PWM_Start+0x6a>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006986:	b2db      	uxtb	r3, r3
 8006988:	2b01      	cmp	r3, #1
 800698a:	bf14      	ite	ne
 800698c:	2301      	movne	r3, #1
 800698e:	2300      	moveq	r3, #0
 8006990:	b2db      	uxtb	r3, r3
 8006992:	2b00      	cmp	r3, #0
 8006994:	d001      	beq.n	800699a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	e05e      	b.n	8006a58 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d104      	bne.n	80069aa <HAL_TIM_PWM_Start+0x82>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2202      	movs	r2, #2
 80069a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80069a8:	e013      	b.n	80069d2 <HAL_TIM_PWM_Start+0xaa>
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	2b04      	cmp	r3, #4
 80069ae:	d104      	bne.n	80069ba <HAL_TIM_PWM_Start+0x92>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2202      	movs	r2, #2
 80069b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80069b8:	e00b      	b.n	80069d2 <HAL_TIM_PWM_Start+0xaa>
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	2b08      	cmp	r3, #8
 80069be:	d104      	bne.n	80069ca <HAL_TIM_PWM_Start+0xa2>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2202      	movs	r2, #2
 80069c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80069c8:	e003      	b.n	80069d2 <HAL_TIM_PWM_Start+0xaa>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2202      	movs	r2, #2
 80069ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	2201      	movs	r2, #1
 80069d8:	6839      	ldr	r1, [r7, #0]
 80069da:	4618      	mov	r0, r3
 80069dc:	f000 fd8c 	bl	80074f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a1e      	ldr	r2, [pc, #120]	@ (8006a60 <HAL_TIM_PWM_Start+0x138>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d107      	bne.n	80069fa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80069f8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a18      	ldr	r2, [pc, #96]	@ (8006a60 <HAL_TIM_PWM_Start+0x138>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d00e      	beq.n	8006a22 <HAL_TIM_PWM_Start+0xfa>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a0c:	d009      	beq.n	8006a22 <HAL_TIM_PWM_Start+0xfa>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a14      	ldr	r2, [pc, #80]	@ (8006a64 <HAL_TIM_PWM_Start+0x13c>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d004      	beq.n	8006a22 <HAL_TIM_PWM_Start+0xfa>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a12      	ldr	r2, [pc, #72]	@ (8006a68 <HAL_TIM_PWM_Start+0x140>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d111      	bne.n	8006a46 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	f003 0307 	and.w	r3, r3, #7
 8006a2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2b06      	cmp	r3, #6
 8006a32:	d010      	beq.n	8006a56 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f042 0201 	orr.w	r2, r2, #1
 8006a42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a44:	e007      	b.n	8006a56 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f042 0201 	orr.w	r2, r2, #1
 8006a54:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a56:	2300      	movs	r3, #0
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3710      	adds	r7, #16
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}
 8006a60:	40012c00 	.word	0x40012c00
 8006a64:	40000400 	.word	0x40000400
 8006a68:	40000800 	.word	0x40000800

08006a6c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b086      	sub	sp, #24
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d101      	bne.n	8006a80 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	e093      	b.n	8006ba8 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a86:	b2db      	uxtb	r3, r3
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d106      	bne.n	8006a9a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f7fe f8b3 	bl	8004c00 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2202      	movs	r2, #2
 8006a9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	687a      	ldr	r2, [r7, #4]
 8006aaa:	6812      	ldr	r2, [r2, #0]
 8006aac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006ab0:	f023 0307 	bic.w	r3, r3, #7
 8006ab4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	3304      	adds	r3, #4
 8006abe:	4619      	mov	r1, r3
 8006ac0:	4610      	mov	r0, r2
 8006ac2:	f000 fa8d 	bl	8006fe0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	699b      	ldr	r3, [r3, #24]
 8006ad4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	6a1b      	ldr	r3, [r3, #32]
 8006adc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	697a      	ldr	r2, [r7, #20]
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006aee:	f023 0303 	bic.w	r3, r3, #3
 8006af2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	689a      	ldr	r2, [r3, #8]
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	699b      	ldr	r3, [r3, #24]
 8006afc:	021b      	lsls	r3, r3, #8
 8006afe:	4313      	orrs	r3, r2
 8006b00:	693a      	ldr	r2, [r7, #16]
 8006b02:	4313      	orrs	r3, r2
 8006b04:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006b0c:	f023 030c 	bic.w	r3, r3, #12
 8006b10:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006b18:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	68da      	ldr	r2, [r3, #12]
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	69db      	ldr	r3, [r3, #28]
 8006b26:	021b      	lsls	r3, r3, #8
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	693a      	ldr	r2, [r7, #16]
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	691b      	ldr	r3, [r3, #16]
 8006b34:	011a      	lsls	r2, r3, #4
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	6a1b      	ldr	r3, [r3, #32]
 8006b3a:	031b      	lsls	r3, r3, #12
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	693a      	ldr	r2, [r7, #16]
 8006b40:	4313      	orrs	r3, r2
 8006b42:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006b4a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	685a      	ldr	r2, [r3, #4]
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	695b      	ldr	r3, [r3, #20]
 8006b54:	011b      	lsls	r3, r3, #4
 8006b56:	4313      	orrs	r3, r2
 8006b58:	68fa      	ldr	r2, [r7, #12]
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	697a      	ldr	r2, [r7, #20]
 8006b64:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	693a      	ldr	r2, [r7, #16]
 8006b6c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	68fa      	ldr	r2, [r7, #12]
 8006b74:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2201      	movs	r2, #1
 8006b82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2201      	movs	r2, #1
 8006b8a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2201      	movs	r2, #1
 8006b92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2201      	movs	r2, #1
 8006b9a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006ba6:	2300      	movs	r3, #0
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3718      	adds	r7, #24
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b084      	sub	sp, #16
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006bc0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006bc8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006bd0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006bd8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d110      	bne.n	8006c02 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006be0:	7bfb      	ldrb	r3, [r7, #15]
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d102      	bne.n	8006bec <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006be6:	7b7b      	ldrb	r3, [r7, #13]
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d001      	beq.n	8006bf0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	e069      	b.n	8006cc4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2202      	movs	r2, #2
 8006bf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2202      	movs	r2, #2
 8006bfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006c00:	e031      	b.n	8006c66 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	2b04      	cmp	r3, #4
 8006c06:	d110      	bne.n	8006c2a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c08:	7bbb      	ldrb	r3, [r7, #14]
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d102      	bne.n	8006c14 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006c0e:	7b3b      	ldrb	r3, [r7, #12]
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d001      	beq.n	8006c18 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006c14:	2301      	movs	r3, #1
 8006c16:	e055      	b.n	8006cc4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2202      	movs	r2, #2
 8006c1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2202      	movs	r2, #2
 8006c24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006c28:	e01d      	b.n	8006c66 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c2a:	7bfb      	ldrb	r3, [r7, #15]
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d108      	bne.n	8006c42 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c30:	7bbb      	ldrb	r3, [r7, #14]
 8006c32:	2b01      	cmp	r3, #1
 8006c34:	d105      	bne.n	8006c42 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c36:	7b7b      	ldrb	r3, [r7, #13]
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d102      	bne.n	8006c42 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006c3c:	7b3b      	ldrb	r3, [r7, #12]
 8006c3e:	2b01      	cmp	r3, #1
 8006c40:	d001      	beq.n	8006c46 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006c42:	2301      	movs	r3, #1
 8006c44:	e03e      	b.n	8006cc4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2202      	movs	r2, #2
 8006c4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2202      	movs	r2, #2
 8006c52:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2202      	movs	r2, #2
 8006c5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2202      	movs	r2, #2
 8006c62:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d003      	beq.n	8006c74 <HAL_TIM_Encoder_Start+0xc4>
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	2b04      	cmp	r3, #4
 8006c70:	d008      	beq.n	8006c84 <HAL_TIM_Encoder_Start+0xd4>
 8006c72:	e00f      	b.n	8006c94 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	2201      	movs	r2, #1
 8006c7a:	2100      	movs	r1, #0
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f000 fc3b 	bl	80074f8 <TIM_CCxChannelCmd>
      break;
 8006c82:	e016      	b.n	8006cb2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	2201      	movs	r2, #1
 8006c8a:	2104      	movs	r1, #4
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f000 fc33 	bl	80074f8 <TIM_CCxChannelCmd>
      break;
 8006c92:	e00e      	b.n	8006cb2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	2201      	movs	r2, #1
 8006c9a:	2100      	movs	r1, #0
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f000 fc2b 	bl	80074f8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	2104      	movs	r1, #4
 8006caa:	4618      	mov	r0, r3
 8006cac:	f000 fc24 	bl	80074f8 <TIM_CCxChannelCmd>
      break;
 8006cb0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f042 0201 	orr.w	r2, r2, #1
 8006cc0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006cc2:	2300      	movs	r3, #0
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3710      	adds	r7, #16
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b086      	sub	sp, #24
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	60f8      	str	r0, [r7, #12]
 8006cd4:	60b9      	str	r1, [r7, #8]
 8006cd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d101      	bne.n	8006cea <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006ce6:	2302      	movs	r3, #2
 8006ce8:	e0ae      	b.n	8006e48 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2201      	movs	r2, #1
 8006cee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2b0c      	cmp	r3, #12
 8006cf6:	f200 809f 	bhi.w	8006e38 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006cfa:	a201      	add	r2, pc, #4	@ (adr r2, 8006d00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d00:	08006d35 	.word	0x08006d35
 8006d04:	08006e39 	.word	0x08006e39
 8006d08:	08006e39 	.word	0x08006e39
 8006d0c:	08006e39 	.word	0x08006e39
 8006d10:	08006d75 	.word	0x08006d75
 8006d14:	08006e39 	.word	0x08006e39
 8006d18:	08006e39 	.word	0x08006e39
 8006d1c:	08006e39 	.word	0x08006e39
 8006d20:	08006db7 	.word	0x08006db7
 8006d24:	08006e39 	.word	0x08006e39
 8006d28:	08006e39 	.word	0x08006e39
 8006d2c:	08006e39 	.word	0x08006e39
 8006d30:	08006df7 	.word	0x08006df7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	68b9      	ldr	r1, [r7, #8]
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f000 f9be 	bl	80070bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	699a      	ldr	r2, [r3, #24]
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f042 0208 	orr.w	r2, r2, #8
 8006d4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	699a      	ldr	r2, [r3, #24]
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f022 0204 	bic.w	r2, r2, #4
 8006d5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	6999      	ldr	r1, [r3, #24]
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	691a      	ldr	r2, [r3, #16]
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	430a      	orrs	r2, r1
 8006d70:	619a      	str	r2, [r3, #24]
      break;
 8006d72:	e064      	b.n	8006e3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	68b9      	ldr	r1, [r7, #8]
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f000 fa04 	bl	8007188 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	699a      	ldr	r2, [r3, #24]
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006d8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	699a      	ldr	r2, [r3, #24]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	6999      	ldr	r1, [r3, #24]
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	691b      	ldr	r3, [r3, #16]
 8006daa:	021a      	lsls	r2, r3, #8
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	430a      	orrs	r2, r1
 8006db2:	619a      	str	r2, [r3, #24]
      break;
 8006db4:	e043      	b.n	8006e3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	68b9      	ldr	r1, [r7, #8]
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f000 fa4d 	bl	800725c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	69da      	ldr	r2, [r3, #28]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f042 0208 	orr.w	r2, r2, #8
 8006dd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	69da      	ldr	r2, [r3, #28]
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f022 0204 	bic.w	r2, r2, #4
 8006de0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	69d9      	ldr	r1, [r3, #28]
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	691a      	ldr	r2, [r3, #16]
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	430a      	orrs	r2, r1
 8006df2:	61da      	str	r2, [r3, #28]
      break;
 8006df4:	e023      	b.n	8006e3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	68b9      	ldr	r1, [r7, #8]
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f000 fa97 	bl	8007330 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	69da      	ldr	r2, [r3, #28]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006e10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	69da      	ldr	r2, [r3, #28]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	69d9      	ldr	r1, [r3, #28]
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	691b      	ldr	r3, [r3, #16]
 8006e2c:	021a      	lsls	r2, r3, #8
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	430a      	orrs	r2, r1
 8006e34:	61da      	str	r2, [r3, #28]
      break;
 8006e36:	e002      	b.n	8006e3e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	75fb      	strb	r3, [r7, #23]
      break;
 8006e3c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2200      	movs	r2, #0
 8006e42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006e46:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3718      	adds	r7, #24
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d101      	bne.n	8006e6c <HAL_TIM_ConfigClockSource+0x1c>
 8006e68:	2302      	movs	r3, #2
 8006e6a:	e0b4      	b.n	8006fd6 <HAL_TIM_ConfigClockSource+0x186>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2202      	movs	r2, #2
 8006e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006e8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006e92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	68ba      	ldr	r2, [r7, #8]
 8006e9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ea4:	d03e      	beq.n	8006f24 <HAL_TIM_ConfigClockSource+0xd4>
 8006ea6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006eaa:	f200 8087 	bhi.w	8006fbc <HAL_TIM_ConfigClockSource+0x16c>
 8006eae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006eb2:	f000 8086 	beq.w	8006fc2 <HAL_TIM_ConfigClockSource+0x172>
 8006eb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006eba:	d87f      	bhi.n	8006fbc <HAL_TIM_ConfigClockSource+0x16c>
 8006ebc:	2b70      	cmp	r3, #112	@ 0x70
 8006ebe:	d01a      	beq.n	8006ef6 <HAL_TIM_ConfigClockSource+0xa6>
 8006ec0:	2b70      	cmp	r3, #112	@ 0x70
 8006ec2:	d87b      	bhi.n	8006fbc <HAL_TIM_ConfigClockSource+0x16c>
 8006ec4:	2b60      	cmp	r3, #96	@ 0x60
 8006ec6:	d050      	beq.n	8006f6a <HAL_TIM_ConfigClockSource+0x11a>
 8006ec8:	2b60      	cmp	r3, #96	@ 0x60
 8006eca:	d877      	bhi.n	8006fbc <HAL_TIM_ConfigClockSource+0x16c>
 8006ecc:	2b50      	cmp	r3, #80	@ 0x50
 8006ece:	d03c      	beq.n	8006f4a <HAL_TIM_ConfigClockSource+0xfa>
 8006ed0:	2b50      	cmp	r3, #80	@ 0x50
 8006ed2:	d873      	bhi.n	8006fbc <HAL_TIM_ConfigClockSource+0x16c>
 8006ed4:	2b40      	cmp	r3, #64	@ 0x40
 8006ed6:	d058      	beq.n	8006f8a <HAL_TIM_ConfigClockSource+0x13a>
 8006ed8:	2b40      	cmp	r3, #64	@ 0x40
 8006eda:	d86f      	bhi.n	8006fbc <HAL_TIM_ConfigClockSource+0x16c>
 8006edc:	2b30      	cmp	r3, #48	@ 0x30
 8006ede:	d064      	beq.n	8006faa <HAL_TIM_ConfigClockSource+0x15a>
 8006ee0:	2b30      	cmp	r3, #48	@ 0x30
 8006ee2:	d86b      	bhi.n	8006fbc <HAL_TIM_ConfigClockSource+0x16c>
 8006ee4:	2b20      	cmp	r3, #32
 8006ee6:	d060      	beq.n	8006faa <HAL_TIM_ConfigClockSource+0x15a>
 8006ee8:	2b20      	cmp	r3, #32
 8006eea:	d867      	bhi.n	8006fbc <HAL_TIM_ConfigClockSource+0x16c>
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d05c      	beq.n	8006faa <HAL_TIM_ConfigClockSource+0x15a>
 8006ef0:	2b10      	cmp	r3, #16
 8006ef2:	d05a      	beq.n	8006faa <HAL_TIM_ConfigClockSource+0x15a>
 8006ef4:	e062      	b.n	8006fbc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006f06:	f000 fad8 	bl	80074ba <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006f18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	68ba      	ldr	r2, [r7, #8]
 8006f20:	609a      	str	r2, [r3, #8]
      break;
 8006f22:	e04f      	b.n	8006fc4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006f34:	f000 fac1 	bl	80074ba <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	689a      	ldr	r2, [r3, #8]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006f46:	609a      	str	r2, [r3, #8]
      break;
 8006f48:	e03c      	b.n	8006fc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f56:	461a      	mov	r2, r3
 8006f58:	f000 fa38 	bl	80073cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	2150      	movs	r1, #80	@ 0x50
 8006f62:	4618      	mov	r0, r3
 8006f64:	f000 fa8f 	bl	8007486 <TIM_ITRx_SetConfig>
      break;
 8006f68:	e02c      	b.n	8006fc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f76:	461a      	mov	r2, r3
 8006f78:	f000 fa56 	bl	8007428 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	2160      	movs	r1, #96	@ 0x60
 8006f82:	4618      	mov	r0, r3
 8006f84:	f000 fa7f 	bl	8007486 <TIM_ITRx_SetConfig>
      break;
 8006f88:	e01c      	b.n	8006fc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f96:	461a      	mov	r2, r3
 8006f98:	f000 fa18 	bl	80073cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	2140      	movs	r1, #64	@ 0x40
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f000 fa6f 	bl	8007486 <TIM_ITRx_SetConfig>
      break;
 8006fa8:	e00c      	b.n	8006fc4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4619      	mov	r1, r3
 8006fb4:	4610      	mov	r0, r2
 8006fb6:	f000 fa66 	bl	8007486 <TIM_ITRx_SetConfig>
      break;
 8006fba:	e003      	b.n	8006fc4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	73fb      	strb	r3, [r7, #15]
      break;
 8006fc0:	e000      	b.n	8006fc4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006fc2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3710      	adds	r7, #16
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}
	...

08006fe0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b085      	sub	sp, #20
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	4a2f      	ldr	r2, [pc, #188]	@ (80070b0 <TIM_Base_SetConfig+0xd0>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d00b      	beq.n	8007010 <TIM_Base_SetConfig+0x30>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ffe:	d007      	beq.n	8007010 <TIM_Base_SetConfig+0x30>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	4a2c      	ldr	r2, [pc, #176]	@ (80070b4 <TIM_Base_SetConfig+0xd4>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d003      	beq.n	8007010 <TIM_Base_SetConfig+0x30>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	4a2b      	ldr	r2, [pc, #172]	@ (80070b8 <TIM_Base_SetConfig+0xd8>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d108      	bne.n	8007022 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007016:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	68fa      	ldr	r2, [r7, #12]
 800701e:	4313      	orrs	r3, r2
 8007020:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	4a22      	ldr	r2, [pc, #136]	@ (80070b0 <TIM_Base_SetConfig+0xd0>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d00b      	beq.n	8007042 <TIM_Base_SetConfig+0x62>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007030:	d007      	beq.n	8007042 <TIM_Base_SetConfig+0x62>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	4a1f      	ldr	r2, [pc, #124]	@ (80070b4 <TIM_Base_SetConfig+0xd4>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d003      	beq.n	8007042 <TIM_Base_SetConfig+0x62>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	4a1e      	ldr	r2, [pc, #120]	@ (80070b8 <TIM_Base_SetConfig+0xd8>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d108      	bne.n	8007054 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007048:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	68db      	ldr	r3, [r3, #12]
 800704e:	68fa      	ldr	r2, [r7, #12]
 8007050:	4313      	orrs	r3, r2
 8007052:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	695b      	ldr	r3, [r3, #20]
 800705e:	4313      	orrs	r3, r2
 8007060:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	68fa      	ldr	r2, [r7, #12]
 8007066:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	689a      	ldr	r2, [r3, #8]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	681a      	ldr	r2, [r3, #0]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	4a0d      	ldr	r2, [pc, #52]	@ (80070b0 <TIM_Base_SetConfig+0xd0>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d103      	bne.n	8007088 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	691a      	ldr	r2, [r3, #16]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2201      	movs	r2, #1
 800708c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	691b      	ldr	r3, [r3, #16]
 8007092:	f003 0301 	and.w	r3, r3, #1
 8007096:	2b00      	cmp	r3, #0
 8007098:	d005      	beq.n	80070a6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	691b      	ldr	r3, [r3, #16]
 800709e:	f023 0201 	bic.w	r2, r3, #1
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	611a      	str	r2, [r3, #16]
  }
}
 80070a6:	bf00      	nop
 80070a8:	3714      	adds	r7, #20
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bc80      	pop	{r7}
 80070ae:	4770      	bx	lr
 80070b0:	40012c00 	.word	0x40012c00
 80070b4:	40000400 	.word	0x40000400
 80070b8:	40000800 	.word	0x40000800

080070bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80070bc:	b480      	push	{r7}
 80070be:	b087      	sub	sp, #28
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6a1b      	ldr	r3, [r3, #32]
 80070ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6a1b      	ldr	r3, [r3, #32]
 80070d0:	f023 0201 	bic.w	r2, r3, #1
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	699b      	ldr	r3, [r3, #24]
 80070e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f023 0303 	bic.w	r3, r3, #3
 80070f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	68fa      	ldr	r2, [r7, #12]
 80070fa:	4313      	orrs	r3, r2
 80070fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	f023 0302 	bic.w	r3, r3, #2
 8007104:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	697a      	ldr	r2, [r7, #20]
 800710c:	4313      	orrs	r3, r2
 800710e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	4a1c      	ldr	r2, [pc, #112]	@ (8007184 <TIM_OC1_SetConfig+0xc8>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d10c      	bne.n	8007132 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	f023 0308 	bic.w	r3, r3, #8
 800711e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	68db      	ldr	r3, [r3, #12]
 8007124:	697a      	ldr	r2, [r7, #20]
 8007126:	4313      	orrs	r3, r2
 8007128:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	f023 0304 	bic.w	r3, r3, #4
 8007130:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	4a13      	ldr	r2, [pc, #76]	@ (8007184 <TIM_OC1_SetConfig+0xc8>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d111      	bne.n	800715e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007140:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007148:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	695b      	ldr	r3, [r3, #20]
 800714e:	693a      	ldr	r2, [r7, #16]
 8007150:	4313      	orrs	r3, r2
 8007152:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	699b      	ldr	r3, [r3, #24]
 8007158:	693a      	ldr	r2, [r7, #16]
 800715a:	4313      	orrs	r3, r2
 800715c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	693a      	ldr	r2, [r7, #16]
 8007162:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	68fa      	ldr	r2, [r7, #12]
 8007168:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	685a      	ldr	r2, [r3, #4]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	697a      	ldr	r2, [r7, #20]
 8007176:	621a      	str	r2, [r3, #32]
}
 8007178:	bf00      	nop
 800717a:	371c      	adds	r7, #28
 800717c:	46bd      	mov	sp, r7
 800717e:	bc80      	pop	{r7}
 8007180:	4770      	bx	lr
 8007182:	bf00      	nop
 8007184:	40012c00 	.word	0x40012c00

08007188 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007188:	b480      	push	{r7}
 800718a:	b087      	sub	sp, #28
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6a1b      	ldr	r3, [r3, #32]
 8007196:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6a1b      	ldr	r3, [r3, #32]
 800719c:	f023 0210 	bic.w	r2, r3, #16
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	699b      	ldr	r3, [r3, #24]
 80071ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	021b      	lsls	r3, r3, #8
 80071c6:	68fa      	ldr	r2, [r7, #12]
 80071c8:	4313      	orrs	r3, r2
 80071ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	f023 0320 	bic.w	r3, r3, #32
 80071d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	011b      	lsls	r3, r3, #4
 80071da:	697a      	ldr	r2, [r7, #20]
 80071dc:	4313      	orrs	r3, r2
 80071de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	4a1d      	ldr	r2, [pc, #116]	@ (8007258 <TIM_OC2_SetConfig+0xd0>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d10d      	bne.n	8007204 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80071ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	68db      	ldr	r3, [r3, #12]
 80071f4:	011b      	lsls	r3, r3, #4
 80071f6:	697a      	ldr	r2, [r7, #20]
 80071f8:	4313      	orrs	r3, r2
 80071fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007202:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	4a14      	ldr	r2, [pc, #80]	@ (8007258 <TIM_OC2_SetConfig+0xd0>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d113      	bne.n	8007234 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007212:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800721a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	695b      	ldr	r3, [r3, #20]
 8007220:	009b      	lsls	r3, r3, #2
 8007222:	693a      	ldr	r2, [r7, #16]
 8007224:	4313      	orrs	r3, r2
 8007226:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	699b      	ldr	r3, [r3, #24]
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	693a      	ldr	r2, [r7, #16]
 8007230:	4313      	orrs	r3, r2
 8007232:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	693a      	ldr	r2, [r7, #16]
 8007238:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	68fa      	ldr	r2, [r7, #12]
 800723e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	685a      	ldr	r2, [r3, #4]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	697a      	ldr	r2, [r7, #20]
 800724c:	621a      	str	r2, [r3, #32]
}
 800724e:	bf00      	nop
 8007250:	371c      	adds	r7, #28
 8007252:	46bd      	mov	sp, r7
 8007254:	bc80      	pop	{r7}
 8007256:	4770      	bx	lr
 8007258:	40012c00 	.word	0x40012c00

0800725c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800725c:	b480      	push	{r7}
 800725e:	b087      	sub	sp, #28
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6a1b      	ldr	r3, [r3, #32]
 800726a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6a1b      	ldr	r3, [r3, #32]
 8007270:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	69db      	ldr	r3, [r3, #28]
 8007282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800728a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f023 0303 	bic.w	r3, r3, #3
 8007292:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	68fa      	ldr	r2, [r7, #12]
 800729a:	4313      	orrs	r3, r2
 800729c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80072a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	021b      	lsls	r3, r3, #8
 80072ac:	697a      	ldr	r2, [r7, #20]
 80072ae:	4313      	orrs	r3, r2
 80072b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	4a1d      	ldr	r2, [pc, #116]	@ (800732c <TIM_OC3_SetConfig+0xd0>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d10d      	bne.n	80072d6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80072c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	68db      	ldr	r3, [r3, #12]
 80072c6:	021b      	lsls	r3, r3, #8
 80072c8:	697a      	ldr	r2, [r7, #20]
 80072ca:	4313      	orrs	r3, r2
 80072cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80072d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	4a14      	ldr	r2, [pc, #80]	@ (800732c <TIM_OC3_SetConfig+0xd0>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d113      	bne.n	8007306 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80072e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80072ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	695b      	ldr	r3, [r3, #20]
 80072f2:	011b      	lsls	r3, r3, #4
 80072f4:	693a      	ldr	r2, [r7, #16]
 80072f6:	4313      	orrs	r3, r2
 80072f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	699b      	ldr	r3, [r3, #24]
 80072fe:	011b      	lsls	r3, r3, #4
 8007300:	693a      	ldr	r2, [r7, #16]
 8007302:	4313      	orrs	r3, r2
 8007304:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	693a      	ldr	r2, [r7, #16]
 800730a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	68fa      	ldr	r2, [r7, #12]
 8007310:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	685a      	ldr	r2, [r3, #4]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	697a      	ldr	r2, [r7, #20]
 800731e:	621a      	str	r2, [r3, #32]
}
 8007320:	bf00      	nop
 8007322:	371c      	adds	r7, #28
 8007324:	46bd      	mov	sp, r7
 8007326:	bc80      	pop	{r7}
 8007328:	4770      	bx	lr
 800732a:	bf00      	nop
 800732c:	40012c00 	.word	0x40012c00

08007330 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007330:	b480      	push	{r7}
 8007332:	b087      	sub	sp, #28
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6a1b      	ldr	r3, [r3, #32]
 800733e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6a1b      	ldr	r3, [r3, #32]
 8007344:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	69db      	ldr	r3, [r3, #28]
 8007356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800735e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007366:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	021b      	lsls	r3, r3, #8
 800736e:	68fa      	ldr	r2, [r7, #12]
 8007370:	4313      	orrs	r3, r2
 8007372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800737a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	689b      	ldr	r3, [r3, #8]
 8007380:	031b      	lsls	r3, r3, #12
 8007382:	693a      	ldr	r2, [r7, #16]
 8007384:	4313      	orrs	r3, r2
 8007386:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	4a0f      	ldr	r2, [pc, #60]	@ (80073c8 <TIM_OC4_SetConfig+0x98>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d109      	bne.n	80073a4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007396:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	695b      	ldr	r3, [r3, #20]
 800739c:	019b      	lsls	r3, r3, #6
 800739e:	697a      	ldr	r2, [r7, #20]
 80073a0:	4313      	orrs	r3, r2
 80073a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	697a      	ldr	r2, [r7, #20]
 80073a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	68fa      	ldr	r2, [r7, #12]
 80073ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	685a      	ldr	r2, [r3, #4]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	693a      	ldr	r2, [r7, #16]
 80073bc:	621a      	str	r2, [r3, #32]
}
 80073be:	bf00      	nop
 80073c0:	371c      	adds	r7, #28
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bc80      	pop	{r7}
 80073c6:	4770      	bx	lr
 80073c8:	40012c00 	.word	0x40012c00

080073cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b087      	sub	sp, #28
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	60f8      	str	r0, [r7, #12]
 80073d4:	60b9      	str	r1, [r7, #8]
 80073d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	6a1b      	ldr	r3, [r3, #32]
 80073dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	6a1b      	ldr	r3, [r3, #32]
 80073e2:	f023 0201 	bic.w	r2, r3, #1
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	699b      	ldr	r3, [r3, #24]
 80073ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80073f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	011b      	lsls	r3, r3, #4
 80073fc:	693a      	ldr	r2, [r7, #16]
 80073fe:	4313      	orrs	r3, r2
 8007400:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	f023 030a 	bic.w	r3, r3, #10
 8007408:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800740a:	697a      	ldr	r2, [r7, #20]
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	4313      	orrs	r3, r2
 8007410:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	693a      	ldr	r2, [r7, #16]
 8007416:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	697a      	ldr	r2, [r7, #20]
 800741c:	621a      	str	r2, [r3, #32]
}
 800741e:	bf00      	nop
 8007420:	371c      	adds	r7, #28
 8007422:	46bd      	mov	sp, r7
 8007424:	bc80      	pop	{r7}
 8007426:	4770      	bx	lr

08007428 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007428:	b480      	push	{r7}
 800742a:	b087      	sub	sp, #28
 800742c:	af00      	add	r7, sp, #0
 800742e:	60f8      	str	r0, [r7, #12]
 8007430:	60b9      	str	r1, [r7, #8]
 8007432:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	6a1b      	ldr	r3, [r3, #32]
 8007438:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	6a1b      	ldr	r3, [r3, #32]
 800743e:	f023 0210 	bic.w	r2, r3, #16
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	699b      	ldr	r3, [r3, #24]
 800744a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007452:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	031b      	lsls	r3, r3, #12
 8007458:	693a      	ldr	r2, [r7, #16]
 800745a:	4313      	orrs	r3, r2
 800745c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007464:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	011b      	lsls	r3, r3, #4
 800746a:	697a      	ldr	r2, [r7, #20]
 800746c:	4313      	orrs	r3, r2
 800746e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	693a      	ldr	r2, [r7, #16]
 8007474:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	697a      	ldr	r2, [r7, #20]
 800747a:	621a      	str	r2, [r3, #32]
}
 800747c:	bf00      	nop
 800747e:	371c      	adds	r7, #28
 8007480:	46bd      	mov	sp, r7
 8007482:	bc80      	pop	{r7}
 8007484:	4770      	bx	lr

08007486 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007486:	b480      	push	{r7}
 8007488:	b085      	sub	sp, #20
 800748a:	af00      	add	r7, sp, #0
 800748c:	6078      	str	r0, [r7, #4]
 800748e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	689b      	ldr	r3, [r3, #8]
 8007494:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800749c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800749e:	683a      	ldr	r2, [r7, #0]
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	4313      	orrs	r3, r2
 80074a4:	f043 0307 	orr.w	r3, r3, #7
 80074a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	68fa      	ldr	r2, [r7, #12]
 80074ae:	609a      	str	r2, [r3, #8]
}
 80074b0:	bf00      	nop
 80074b2:	3714      	adds	r7, #20
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bc80      	pop	{r7}
 80074b8:	4770      	bx	lr

080074ba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80074ba:	b480      	push	{r7}
 80074bc:	b087      	sub	sp, #28
 80074be:	af00      	add	r7, sp, #0
 80074c0:	60f8      	str	r0, [r7, #12]
 80074c2:	60b9      	str	r1, [r7, #8]
 80074c4:	607a      	str	r2, [r7, #4]
 80074c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80074d4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	021a      	lsls	r2, r3, #8
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	431a      	orrs	r2, r3
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	4313      	orrs	r3, r2
 80074e2:	697a      	ldr	r2, [r7, #20]
 80074e4:	4313      	orrs	r3, r2
 80074e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	697a      	ldr	r2, [r7, #20]
 80074ec:	609a      	str	r2, [r3, #8]
}
 80074ee:	bf00      	nop
 80074f0:	371c      	adds	r7, #28
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bc80      	pop	{r7}
 80074f6:	4770      	bx	lr

080074f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b087      	sub	sp, #28
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	60f8      	str	r0, [r7, #12]
 8007500:	60b9      	str	r1, [r7, #8]
 8007502:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	f003 031f 	and.w	r3, r3, #31
 800750a:	2201      	movs	r2, #1
 800750c:	fa02 f303 	lsl.w	r3, r2, r3
 8007510:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	6a1a      	ldr	r2, [r3, #32]
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	43db      	mvns	r3, r3
 800751a:	401a      	ands	r2, r3
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	6a1a      	ldr	r2, [r3, #32]
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	f003 031f 	and.w	r3, r3, #31
 800752a:	6879      	ldr	r1, [r7, #4]
 800752c:	fa01 f303 	lsl.w	r3, r1, r3
 8007530:	431a      	orrs	r2, r3
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	621a      	str	r2, [r3, #32]
}
 8007536:	bf00      	nop
 8007538:	371c      	adds	r7, #28
 800753a:	46bd      	mov	sp, r7
 800753c:	bc80      	pop	{r7}
 800753e:	4770      	bx	lr

08007540 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007540:	b480      	push	{r7}
 8007542:	b085      	sub	sp, #20
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
 8007548:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007550:	2b01      	cmp	r3, #1
 8007552:	d101      	bne.n	8007558 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007554:	2302      	movs	r3, #2
 8007556:	e046      	b.n	80075e6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2201      	movs	r2, #1
 800755c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2202      	movs	r2, #2
 8007564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	689b      	ldr	r3, [r3, #8]
 8007576:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800757e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	68fa      	ldr	r2, [r7, #12]
 8007586:	4313      	orrs	r3, r2
 8007588:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	68fa      	ldr	r2, [r7, #12]
 8007590:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a16      	ldr	r2, [pc, #88]	@ (80075f0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d00e      	beq.n	80075ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075a4:	d009      	beq.n	80075ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a12      	ldr	r2, [pc, #72]	@ (80075f4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d004      	beq.n	80075ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a10      	ldr	r2, [pc, #64]	@ (80075f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d10c      	bne.n	80075d4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80075c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	68ba      	ldr	r2, [r7, #8]
 80075c8:	4313      	orrs	r3, r2
 80075ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	68ba      	ldr	r2, [r7, #8]
 80075d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2201      	movs	r2, #1
 80075d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80075e4:	2300      	movs	r3, #0
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3714      	adds	r7, #20
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bc80      	pop	{r7}
 80075ee:	4770      	bx	lr
 80075f0:	40012c00 	.word	0x40012c00
 80075f4:	40000400 	.word	0x40000400
 80075f8:	40000800 	.word	0x40000800

080075fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b085      	sub	sp, #20
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007606:	2300      	movs	r3, #0
 8007608:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007610:	2b01      	cmp	r3, #1
 8007612:	d101      	bne.n	8007618 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007614:	2302      	movs	r3, #2
 8007616:	e03d      	b.n	8007694 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2201      	movs	r2, #1
 800761c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	68db      	ldr	r3, [r3, #12]
 800762a:	4313      	orrs	r3, r2
 800762c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	4313      	orrs	r3, r2
 800763a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	4313      	orrs	r3, r2
 8007648:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4313      	orrs	r3, r2
 8007656:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	691b      	ldr	r3, [r3, #16]
 8007662:	4313      	orrs	r3, r2
 8007664:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	695b      	ldr	r3, [r3, #20]
 8007670:	4313      	orrs	r3, r2
 8007672:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	69db      	ldr	r3, [r3, #28]
 800767e:	4313      	orrs	r3, r2
 8007680:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	68fa      	ldr	r2, [r7, #12]
 8007688:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2200      	movs	r2, #0
 800768e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007692:	2300      	movs	r3, #0
}
 8007694:	4618      	mov	r0, r3
 8007696:	3714      	adds	r7, #20
 8007698:	46bd      	mov	sp, r7
 800769a:	bc80      	pop	{r7}
 800769c:	4770      	bx	lr
	...

080076a0 <rand>:
 80076a0:	4b16      	ldr	r3, [pc, #88]	@ (80076fc <rand+0x5c>)
 80076a2:	b510      	push	{r4, lr}
 80076a4:	681c      	ldr	r4, [r3, #0]
 80076a6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80076a8:	b9b3      	cbnz	r3, 80076d8 <rand+0x38>
 80076aa:	2018      	movs	r0, #24
 80076ac:	f000 fa60 	bl	8007b70 <malloc>
 80076b0:	4602      	mov	r2, r0
 80076b2:	6320      	str	r0, [r4, #48]	@ 0x30
 80076b4:	b920      	cbnz	r0, 80076c0 <rand+0x20>
 80076b6:	2152      	movs	r1, #82	@ 0x52
 80076b8:	4b11      	ldr	r3, [pc, #68]	@ (8007700 <rand+0x60>)
 80076ba:	4812      	ldr	r0, [pc, #72]	@ (8007704 <rand+0x64>)
 80076bc:	f000 f9f2 	bl	8007aa4 <__assert_func>
 80076c0:	4911      	ldr	r1, [pc, #68]	@ (8007708 <rand+0x68>)
 80076c2:	4b12      	ldr	r3, [pc, #72]	@ (800770c <rand+0x6c>)
 80076c4:	e9c0 1300 	strd	r1, r3, [r0]
 80076c8:	4b11      	ldr	r3, [pc, #68]	@ (8007710 <rand+0x70>)
 80076ca:	2100      	movs	r1, #0
 80076cc:	6083      	str	r3, [r0, #8]
 80076ce:	230b      	movs	r3, #11
 80076d0:	8183      	strh	r3, [r0, #12]
 80076d2:	2001      	movs	r0, #1
 80076d4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80076d8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80076da:	480e      	ldr	r0, [pc, #56]	@ (8007714 <rand+0x74>)
 80076dc:	690b      	ldr	r3, [r1, #16]
 80076de:	694c      	ldr	r4, [r1, #20]
 80076e0:	4358      	muls	r0, r3
 80076e2:	4a0d      	ldr	r2, [pc, #52]	@ (8007718 <rand+0x78>)
 80076e4:	fb02 0004 	mla	r0, r2, r4, r0
 80076e8:	fba3 3202 	umull	r3, r2, r3, r2
 80076ec:	3301      	adds	r3, #1
 80076ee:	eb40 0002 	adc.w	r0, r0, r2
 80076f2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80076f6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80076fa:	bd10      	pop	{r4, pc}
 80076fc:	20000034 	.word	0x20000034
 8007700:	0800a33e 	.word	0x0800a33e
 8007704:	0800a355 	.word	0x0800a355
 8007708:	abcd330e 	.word	0xabcd330e
 800770c:	e66d1234 	.word	0xe66d1234
 8007710:	0005deec 	.word	0x0005deec
 8007714:	5851f42d 	.word	0x5851f42d
 8007718:	4c957f2d 	.word	0x4c957f2d

0800771c <std>:
 800771c:	2300      	movs	r3, #0
 800771e:	b510      	push	{r4, lr}
 8007720:	4604      	mov	r4, r0
 8007722:	e9c0 3300 	strd	r3, r3, [r0]
 8007726:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800772a:	6083      	str	r3, [r0, #8]
 800772c:	8181      	strh	r1, [r0, #12]
 800772e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007730:	81c2      	strh	r2, [r0, #14]
 8007732:	6183      	str	r3, [r0, #24]
 8007734:	4619      	mov	r1, r3
 8007736:	2208      	movs	r2, #8
 8007738:	305c      	adds	r0, #92	@ 0x5c
 800773a:	f000 f916 	bl	800796a <memset>
 800773e:	4b0d      	ldr	r3, [pc, #52]	@ (8007774 <std+0x58>)
 8007740:	6224      	str	r4, [r4, #32]
 8007742:	6263      	str	r3, [r4, #36]	@ 0x24
 8007744:	4b0c      	ldr	r3, [pc, #48]	@ (8007778 <std+0x5c>)
 8007746:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007748:	4b0c      	ldr	r3, [pc, #48]	@ (800777c <std+0x60>)
 800774a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800774c:	4b0c      	ldr	r3, [pc, #48]	@ (8007780 <std+0x64>)
 800774e:	6323      	str	r3, [r4, #48]	@ 0x30
 8007750:	4b0c      	ldr	r3, [pc, #48]	@ (8007784 <std+0x68>)
 8007752:	429c      	cmp	r4, r3
 8007754:	d006      	beq.n	8007764 <std+0x48>
 8007756:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800775a:	4294      	cmp	r4, r2
 800775c:	d002      	beq.n	8007764 <std+0x48>
 800775e:	33d0      	adds	r3, #208	@ 0xd0
 8007760:	429c      	cmp	r4, r3
 8007762:	d105      	bne.n	8007770 <std+0x54>
 8007764:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007768:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800776c:	f000 b988 	b.w	8007a80 <__retarget_lock_init_recursive>
 8007770:	bd10      	pop	{r4, pc}
 8007772:	bf00      	nop
 8007774:	080078e5 	.word	0x080078e5
 8007778:	08007907 	.word	0x08007907
 800777c:	0800793f 	.word	0x0800793f
 8007780:	08007963 	.word	0x08007963
 8007784:	20003f90 	.word	0x20003f90

08007788 <stdio_exit_handler>:
 8007788:	4a02      	ldr	r2, [pc, #8]	@ (8007794 <stdio_exit_handler+0xc>)
 800778a:	4903      	ldr	r1, [pc, #12]	@ (8007798 <stdio_exit_handler+0x10>)
 800778c:	4803      	ldr	r0, [pc, #12]	@ (800779c <stdio_exit_handler+0x14>)
 800778e:	f000 b869 	b.w	8007864 <_fwalk_sglue>
 8007792:	bf00      	nop
 8007794:	20000028 	.word	0x20000028
 8007798:	080083ad 	.word	0x080083ad
 800779c:	20000038 	.word	0x20000038

080077a0 <cleanup_stdio>:
 80077a0:	6841      	ldr	r1, [r0, #4]
 80077a2:	4b0c      	ldr	r3, [pc, #48]	@ (80077d4 <cleanup_stdio+0x34>)
 80077a4:	b510      	push	{r4, lr}
 80077a6:	4299      	cmp	r1, r3
 80077a8:	4604      	mov	r4, r0
 80077aa:	d001      	beq.n	80077b0 <cleanup_stdio+0x10>
 80077ac:	f000 fdfe 	bl	80083ac <_fflush_r>
 80077b0:	68a1      	ldr	r1, [r4, #8]
 80077b2:	4b09      	ldr	r3, [pc, #36]	@ (80077d8 <cleanup_stdio+0x38>)
 80077b4:	4299      	cmp	r1, r3
 80077b6:	d002      	beq.n	80077be <cleanup_stdio+0x1e>
 80077b8:	4620      	mov	r0, r4
 80077ba:	f000 fdf7 	bl	80083ac <_fflush_r>
 80077be:	68e1      	ldr	r1, [r4, #12]
 80077c0:	4b06      	ldr	r3, [pc, #24]	@ (80077dc <cleanup_stdio+0x3c>)
 80077c2:	4299      	cmp	r1, r3
 80077c4:	d004      	beq.n	80077d0 <cleanup_stdio+0x30>
 80077c6:	4620      	mov	r0, r4
 80077c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077cc:	f000 bdee 	b.w	80083ac <_fflush_r>
 80077d0:	bd10      	pop	{r4, pc}
 80077d2:	bf00      	nop
 80077d4:	20003f90 	.word	0x20003f90
 80077d8:	20003ff8 	.word	0x20003ff8
 80077dc:	20004060 	.word	0x20004060

080077e0 <global_stdio_init.part.0>:
 80077e0:	b510      	push	{r4, lr}
 80077e2:	4b0b      	ldr	r3, [pc, #44]	@ (8007810 <global_stdio_init.part.0+0x30>)
 80077e4:	4c0b      	ldr	r4, [pc, #44]	@ (8007814 <global_stdio_init.part.0+0x34>)
 80077e6:	4a0c      	ldr	r2, [pc, #48]	@ (8007818 <global_stdio_init.part.0+0x38>)
 80077e8:	4620      	mov	r0, r4
 80077ea:	601a      	str	r2, [r3, #0]
 80077ec:	2104      	movs	r1, #4
 80077ee:	2200      	movs	r2, #0
 80077f0:	f7ff ff94 	bl	800771c <std>
 80077f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80077f8:	2201      	movs	r2, #1
 80077fa:	2109      	movs	r1, #9
 80077fc:	f7ff ff8e 	bl	800771c <std>
 8007800:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007804:	2202      	movs	r2, #2
 8007806:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800780a:	2112      	movs	r1, #18
 800780c:	f7ff bf86 	b.w	800771c <std>
 8007810:	200040c8 	.word	0x200040c8
 8007814:	20003f90 	.word	0x20003f90
 8007818:	08007789 	.word	0x08007789

0800781c <__sfp_lock_acquire>:
 800781c:	4801      	ldr	r0, [pc, #4]	@ (8007824 <__sfp_lock_acquire+0x8>)
 800781e:	f000 b930 	b.w	8007a82 <__retarget_lock_acquire_recursive>
 8007822:	bf00      	nop
 8007824:	200040d1 	.word	0x200040d1

08007828 <__sfp_lock_release>:
 8007828:	4801      	ldr	r0, [pc, #4]	@ (8007830 <__sfp_lock_release+0x8>)
 800782a:	f000 b92b 	b.w	8007a84 <__retarget_lock_release_recursive>
 800782e:	bf00      	nop
 8007830:	200040d1 	.word	0x200040d1

08007834 <__sinit>:
 8007834:	b510      	push	{r4, lr}
 8007836:	4604      	mov	r4, r0
 8007838:	f7ff fff0 	bl	800781c <__sfp_lock_acquire>
 800783c:	6a23      	ldr	r3, [r4, #32]
 800783e:	b11b      	cbz	r3, 8007848 <__sinit+0x14>
 8007840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007844:	f7ff bff0 	b.w	8007828 <__sfp_lock_release>
 8007848:	4b04      	ldr	r3, [pc, #16]	@ (800785c <__sinit+0x28>)
 800784a:	6223      	str	r3, [r4, #32]
 800784c:	4b04      	ldr	r3, [pc, #16]	@ (8007860 <__sinit+0x2c>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d1f5      	bne.n	8007840 <__sinit+0xc>
 8007854:	f7ff ffc4 	bl	80077e0 <global_stdio_init.part.0>
 8007858:	e7f2      	b.n	8007840 <__sinit+0xc>
 800785a:	bf00      	nop
 800785c:	080077a1 	.word	0x080077a1
 8007860:	200040c8 	.word	0x200040c8

08007864 <_fwalk_sglue>:
 8007864:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007868:	4607      	mov	r7, r0
 800786a:	4688      	mov	r8, r1
 800786c:	4614      	mov	r4, r2
 800786e:	2600      	movs	r6, #0
 8007870:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007874:	f1b9 0901 	subs.w	r9, r9, #1
 8007878:	d505      	bpl.n	8007886 <_fwalk_sglue+0x22>
 800787a:	6824      	ldr	r4, [r4, #0]
 800787c:	2c00      	cmp	r4, #0
 800787e:	d1f7      	bne.n	8007870 <_fwalk_sglue+0xc>
 8007880:	4630      	mov	r0, r6
 8007882:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007886:	89ab      	ldrh	r3, [r5, #12]
 8007888:	2b01      	cmp	r3, #1
 800788a:	d907      	bls.n	800789c <_fwalk_sglue+0x38>
 800788c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007890:	3301      	adds	r3, #1
 8007892:	d003      	beq.n	800789c <_fwalk_sglue+0x38>
 8007894:	4629      	mov	r1, r5
 8007896:	4638      	mov	r0, r7
 8007898:	47c0      	blx	r8
 800789a:	4306      	orrs	r6, r0
 800789c:	3568      	adds	r5, #104	@ 0x68
 800789e:	e7e9      	b.n	8007874 <_fwalk_sglue+0x10>

080078a0 <siprintf>:
 80078a0:	b40e      	push	{r1, r2, r3}
 80078a2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80078a6:	b510      	push	{r4, lr}
 80078a8:	2400      	movs	r4, #0
 80078aa:	b09d      	sub	sp, #116	@ 0x74
 80078ac:	ab1f      	add	r3, sp, #124	@ 0x7c
 80078ae:	9002      	str	r0, [sp, #8]
 80078b0:	9006      	str	r0, [sp, #24]
 80078b2:	9107      	str	r1, [sp, #28]
 80078b4:	9104      	str	r1, [sp, #16]
 80078b6:	4809      	ldr	r0, [pc, #36]	@ (80078dc <siprintf+0x3c>)
 80078b8:	4909      	ldr	r1, [pc, #36]	@ (80078e0 <siprintf+0x40>)
 80078ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80078be:	9105      	str	r1, [sp, #20]
 80078c0:	6800      	ldr	r0, [r0, #0]
 80078c2:	a902      	add	r1, sp, #8
 80078c4:	9301      	str	r3, [sp, #4]
 80078c6:	941b      	str	r4, [sp, #108]	@ 0x6c
 80078c8:	f000 fa64 	bl	8007d94 <_svfiprintf_r>
 80078cc:	9b02      	ldr	r3, [sp, #8]
 80078ce:	701c      	strb	r4, [r3, #0]
 80078d0:	b01d      	add	sp, #116	@ 0x74
 80078d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078d6:	b003      	add	sp, #12
 80078d8:	4770      	bx	lr
 80078da:	bf00      	nop
 80078dc:	20000034 	.word	0x20000034
 80078e0:	ffff0208 	.word	0xffff0208

080078e4 <__sread>:
 80078e4:	b510      	push	{r4, lr}
 80078e6:	460c      	mov	r4, r1
 80078e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078ec:	f000 f87a 	bl	80079e4 <_read_r>
 80078f0:	2800      	cmp	r0, #0
 80078f2:	bfab      	itete	ge
 80078f4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80078f6:	89a3      	ldrhlt	r3, [r4, #12]
 80078f8:	181b      	addge	r3, r3, r0
 80078fa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80078fe:	bfac      	ite	ge
 8007900:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007902:	81a3      	strhlt	r3, [r4, #12]
 8007904:	bd10      	pop	{r4, pc}

08007906 <__swrite>:
 8007906:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800790a:	461f      	mov	r7, r3
 800790c:	898b      	ldrh	r3, [r1, #12]
 800790e:	4605      	mov	r5, r0
 8007910:	05db      	lsls	r3, r3, #23
 8007912:	460c      	mov	r4, r1
 8007914:	4616      	mov	r6, r2
 8007916:	d505      	bpl.n	8007924 <__swrite+0x1e>
 8007918:	2302      	movs	r3, #2
 800791a:	2200      	movs	r2, #0
 800791c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007920:	f000 f84e 	bl	80079c0 <_lseek_r>
 8007924:	89a3      	ldrh	r3, [r4, #12]
 8007926:	4632      	mov	r2, r6
 8007928:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800792c:	81a3      	strh	r3, [r4, #12]
 800792e:	4628      	mov	r0, r5
 8007930:	463b      	mov	r3, r7
 8007932:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007936:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800793a:	f000 b865 	b.w	8007a08 <_write_r>

0800793e <__sseek>:
 800793e:	b510      	push	{r4, lr}
 8007940:	460c      	mov	r4, r1
 8007942:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007946:	f000 f83b 	bl	80079c0 <_lseek_r>
 800794a:	1c43      	adds	r3, r0, #1
 800794c:	89a3      	ldrh	r3, [r4, #12]
 800794e:	bf15      	itete	ne
 8007950:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007952:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007956:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800795a:	81a3      	strheq	r3, [r4, #12]
 800795c:	bf18      	it	ne
 800795e:	81a3      	strhne	r3, [r4, #12]
 8007960:	bd10      	pop	{r4, pc}

08007962 <__sclose>:
 8007962:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007966:	f000 b81b 	b.w	80079a0 <_close_r>

0800796a <memset>:
 800796a:	4603      	mov	r3, r0
 800796c:	4402      	add	r2, r0
 800796e:	4293      	cmp	r3, r2
 8007970:	d100      	bne.n	8007974 <memset+0xa>
 8007972:	4770      	bx	lr
 8007974:	f803 1b01 	strb.w	r1, [r3], #1
 8007978:	e7f9      	b.n	800796e <memset+0x4>

0800797a <strncpy>:
 800797a:	4603      	mov	r3, r0
 800797c:	b510      	push	{r4, lr}
 800797e:	3901      	subs	r1, #1
 8007980:	b132      	cbz	r2, 8007990 <strncpy+0x16>
 8007982:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007986:	3a01      	subs	r2, #1
 8007988:	f803 4b01 	strb.w	r4, [r3], #1
 800798c:	2c00      	cmp	r4, #0
 800798e:	d1f7      	bne.n	8007980 <strncpy+0x6>
 8007990:	2100      	movs	r1, #0
 8007992:	441a      	add	r2, r3
 8007994:	4293      	cmp	r3, r2
 8007996:	d100      	bne.n	800799a <strncpy+0x20>
 8007998:	bd10      	pop	{r4, pc}
 800799a:	f803 1b01 	strb.w	r1, [r3], #1
 800799e:	e7f9      	b.n	8007994 <strncpy+0x1a>

080079a0 <_close_r>:
 80079a0:	b538      	push	{r3, r4, r5, lr}
 80079a2:	2300      	movs	r3, #0
 80079a4:	4d05      	ldr	r5, [pc, #20]	@ (80079bc <_close_r+0x1c>)
 80079a6:	4604      	mov	r4, r0
 80079a8:	4608      	mov	r0, r1
 80079aa:	602b      	str	r3, [r5, #0]
 80079ac:	f7fc ffa7 	bl	80048fe <_close>
 80079b0:	1c43      	adds	r3, r0, #1
 80079b2:	d102      	bne.n	80079ba <_close_r+0x1a>
 80079b4:	682b      	ldr	r3, [r5, #0]
 80079b6:	b103      	cbz	r3, 80079ba <_close_r+0x1a>
 80079b8:	6023      	str	r3, [r4, #0]
 80079ba:	bd38      	pop	{r3, r4, r5, pc}
 80079bc:	200040cc 	.word	0x200040cc

080079c0 <_lseek_r>:
 80079c0:	b538      	push	{r3, r4, r5, lr}
 80079c2:	4604      	mov	r4, r0
 80079c4:	4608      	mov	r0, r1
 80079c6:	4611      	mov	r1, r2
 80079c8:	2200      	movs	r2, #0
 80079ca:	4d05      	ldr	r5, [pc, #20]	@ (80079e0 <_lseek_r+0x20>)
 80079cc:	602a      	str	r2, [r5, #0]
 80079ce:	461a      	mov	r2, r3
 80079d0:	f7fc ffb9 	bl	8004946 <_lseek>
 80079d4:	1c43      	adds	r3, r0, #1
 80079d6:	d102      	bne.n	80079de <_lseek_r+0x1e>
 80079d8:	682b      	ldr	r3, [r5, #0]
 80079da:	b103      	cbz	r3, 80079de <_lseek_r+0x1e>
 80079dc:	6023      	str	r3, [r4, #0]
 80079de:	bd38      	pop	{r3, r4, r5, pc}
 80079e0:	200040cc 	.word	0x200040cc

080079e4 <_read_r>:
 80079e4:	b538      	push	{r3, r4, r5, lr}
 80079e6:	4604      	mov	r4, r0
 80079e8:	4608      	mov	r0, r1
 80079ea:	4611      	mov	r1, r2
 80079ec:	2200      	movs	r2, #0
 80079ee:	4d05      	ldr	r5, [pc, #20]	@ (8007a04 <_read_r+0x20>)
 80079f0:	602a      	str	r2, [r5, #0]
 80079f2:	461a      	mov	r2, r3
 80079f4:	f7fc ff4a 	bl	800488c <_read>
 80079f8:	1c43      	adds	r3, r0, #1
 80079fa:	d102      	bne.n	8007a02 <_read_r+0x1e>
 80079fc:	682b      	ldr	r3, [r5, #0]
 80079fe:	b103      	cbz	r3, 8007a02 <_read_r+0x1e>
 8007a00:	6023      	str	r3, [r4, #0]
 8007a02:	bd38      	pop	{r3, r4, r5, pc}
 8007a04:	200040cc 	.word	0x200040cc

08007a08 <_write_r>:
 8007a08:	b538      	push	{r3, r4, r5, lr}
 8007a0a:	4604      	mov	r4, r0
 8007a0c:	4608      	mov	r0, r1
 8007a0e:	4611      	mov	r1, r2
 8007a10:	2200      	movs	r2, #0
 8007a12:	4d05      	ldr	r5, [pc, #20]	@ (8007a28 <_write_r+0x20>)
 8007a14:	602a      	str	r2, [r5, #0]
 8007a16:	461a      	mov	r2, r3
 8007a18:	f7fc ff55 	bl	80048c6 <_write>
 8007a1c:	1c43      	adds	r3, r0, #1
 8007a1e:	d102      	bne.n	8007a26 <_write_r+0x1e>
 8007a20:	682b      	ldr	r3, [r5, #0]
 8007a22:	b103      	cbz	r3, 8007a26 <_write_r+0x1e>
 8007a24:	6023      	str	r3, [r4, #0]
 8007a26:	bd38      	pop	{r3, r4, r5, pc}
 8007a28:	200040cc 	.word	0x200040cc

08007a2c <__errno>:
 8007a2c:	4b01      	ldr	r3, [pc, #4]	@ (8007a34 <__errno+0x8>)
 8007a2e:	6818      	ldr	r0, [r3, #0]
 8007a30:	4770      	bx	lr
 8007a32:	bf00      	nop
 8007a34:	20000034 	.word	0x20000034

08007a38 <__libc_init_array>:
 8007a38:	b570      	push	{r4, r5, r6, lr}
 8007a3a:	2600      	movs	r6, #0
 8007a3c:	4d0c      	ldr	r5, [pc, #48]	@ (8007a70 <__libc_init_array+0x38>)
 8007a3e:	4c0d      	ldr	r4, [pc, #52]	@ (8007a74 <__libc_init_array+0x3c>)
 8007a40:	1b64      	subs	r4, r4, r5
 8007a42:	10a4      	asrs	r4, r4, #2
 8007a44:	42a6      	cmp	r6, r4
 8007a46:	d109      	bne.n	8007a5c <__libc_init_array+0x24>
 8007a48:	f002 fa56 	bl	8009ef8 <_init>
 8007a4c:	2600      	movs	r6, #0
 8007a4e:	4d0a      	ldr	r5, [pc, #40]	@ (8007a78 <__libc_init_array+0x40>)
 8007a50:	4c0a      	ldr	r4, [pc, #40]	@ (8007a7c <__libc_init_array+0x44>)
 8007a52:	1b64      	subs	r4, r4, r5
 8007a54:	10a4      	asrs	r4, r4, #2
 8007a56:	42a6      	cmp	r6, r4
 8007a58:	d105      	bne.n	8007a66 <__libc_init_array+0x2e>
 8007a5a:	bd70      	pop	{r4, r5, r6, pc}
 8007a5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a60:	4798      	blx	r3
 8007a62:	3601      	adds	r6, #1
 8007a64:	e7ee      	b.n	8007a44 <__libc_init_array+0xc>
 8007a66:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a6a:	4798      	blx	r3
 8007a6c:	3601      	adds	r6, #1
 8007a6e:	e7f2      	b.n	8007a56 <__libc_init_array+0x1e>
 8007a70:	0800a814 	.word	0x0800a814
 8007a74:	0800a814 	.word	0x0800a814
 8007a78:	0800a814 	.word	0x0800a814
 8007a7c:	0800a818 	.word	0x0800a818

08007a80 <__retarget_lock_init_recursive>:
 8007a80:	4770      	bx	lr

08007a82 <__retarget_lock_acquire_recursive>:
 8007a82:	4770      	bx	lr

08007a84 <__retarget_lock_release_recursive>:
 8007a84:	4770      	bx	lr

08007a86 <memcpy>:
 8007a86:	440a      	add	r2, r1
 8007a88:	4291      	cmp	r1, r2
 8007a8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a8e:	d100      	bne.n	8007a92 <memcpy+0xc>
 8007a90:	4770      	bx	lr
 8007a92:	b510      	push	{r4, lr}
 8007a94:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a98:	4291      	cmp	r1, r2
 8007a9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a9e:	d1f9      	bne.n	8007a94 <memcpy+0xe>
 8007aa0:	bd10      	pop	{r4, pc}
	...

08007aa4 <__assert_func>:
 8007aa4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007aa6:	4614      	mov	r4, r2
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	4b09      	ldr	r3, [pc, #36]	@ (8007ad0 <__assert_func+0x2c>)
 8007aac:	4605      	mov	r5, r0
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	68d8      	ldr	r0, [r3, #12]
 8007ab2:	b14c      	cbz	r4, 8007ac8 <__assert_func+0x24>
 8007ab4:	4b07      	ldr	r3, [pc, #28]	@ (8007ad4 <__assert_func+0x30>)
 8007ab6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007aba:	9100      	str	r1, [sp, #0]
 8007abc:	462b      	mov	r3, r5
 8007abe:	4906      	ldr	r1, [pc, #24]	@ (8007ad8 <__assert_func+0x34>)
 8007ac0:	f000 fc9c 	bl	80083fc <fiprintf>
 8007ac4:	f000 fce4 	bl	8008490 <abort>
 8007ac8:	4b04      	ldr	r3, [pc, #16]	@ (8007adc <__assert_func+0x38>)
 8007aca:	461c      	mov	r4, r3
 8007acc:	e7f3      	b.n	8007ab6 <__assert_func+0x12>
 8007ace:	bf00      	nop
 8007ad0:	20000034 	.word	0x20000034
 8007ad4:	0800a3ad 	.word	0x0800a3ad
 8007ad8:	0800a3ba 	.word	0x0800a3ba
 8007adc:	0800a3e8 	.word	0x0800a3e8

08007ae0 <_free_r>:
 8007ae0:	b538      	push	{r3, r4, r5, lr}
 8007ae2:	4605      	mov	r5, r0
 8007ae4:	2900      	cmp	r1, #0
 8007ae6:	d040      	beq.n	8007b6a <_free_r+0x8a>
 8007ae8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007aec:	1f0c      	subs	r4, r1, #4
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	bfb8      	it	lt
 8007af2:	18e4      	addlt	r4, r4, r3
 8007af4:	f000 f8e6 	bl	8007cc4 <__malloc_lock>
 8007af8:	4a1c      	ldr	r2, [pc, #112]	@ (8007b6c <_free_r+0x8c>)
 8007afa:	6813      	ldr	r3, [r2, #0]
 8007afc:	b933      	cbnz	r3, 8007b0c <_free_r+0x2c>
 8007afe:	6063      	str	r3, [r4, #4]
 8007b00:	6014      	str	r4, [r2, #0]
 8007b02:	4628      	mov	r0, r5
 8007b04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b08:	f000 b8e2 	b.w	8007cd0 <__malloc_unlock>
 8007b0c:	42a3      	cmp	r3, r4
 8007b0e:	d908      	bls.n	8007b22 <_free_r+0x42>
 8007b10:	6820      	ldr	r0, [r4, #0]
 8007b12:	1821      	adds	r1, r4, r0
 8007b14:	428b      	cmp	r3, r1
 8007b16:	bf01      	itttt	eq
 8007b18:	6819      	ldreq	r1, [r3, #0]
 8007b1a:	685b      	ldreq	r3, [r3, #4]
 8007b1c:	1809      	addeq	r1, r1, r0
 8007b1e:	6021      	streq	r1, [r4, #0]
 8007b20:	e7ed      	b.n	8007afe <_free_r+0x1e>
 8007b22:	461a      	mov	r2, r3
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	b10b      	cbz	r3, 8007b2c <_free_r+0x4c>
 8007b28:	42a3      	cmp	r3, r4
 8007b2a:	d9fa      	bls.n	8007b22 <_free_r+0x42>
 8007b2c:	6811      	ldr	r1, [r2, #0]
 8007b2e:	1850      	adds	r0, r2, r1
 8007b30:	42a0      	cmp	r0, r4
 8007b32:	d10b      	bne.n	8007b4c <_free_r+0x6c>
 8007b34:	6820      	ldr	r0, [r4, #0]
 8007b36:	4401      	add	r1, r0
 8007b38:	1850      	adds	r0, r2, r1
 8007b3a:	4283      	cmp	r3, r0
 8007b3c:	6011      	str	r1, [r2, #0]
 8007b3e:	d1e0      	bne.n	8007b02 <_free_r+0x22>
 8007b40:	6818      	ldr	r0, [r3, #0]
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	4408      	add	r0, r1
 8007b46:	6010      	str	r0, [r2, #0]
 8007b48:	6053      	str	r3, [r2, #4]
 8007b4a:	e7da      	b.n	8007b02 <_free_r+0x22>
 8007b4c:	d902      	bls.n	8007b54 <_free_r+0x74>
 8007b4e:	230c      	movs	r3, #12
 8007b50:	602b      	str	r3, [r5, #0]
 8007b52:	e7d6      	b.n	8007b02 <_free_r+0x22>
 8007b54:	6820      	ldr	r0, [r4, #0]
 8007b56:	1821      	adds	r1, r4, r0
 8007b58:	428b      	cmp	r3, r1
 8007b5a:	bf01      	itttt	eq
 8007b5c:	6819      	ldreq	r1, [r3, #0]
 8007b5e:	685b      	ldreq	r3, [r3, #4]
 8007b60:	1809      	addeq	r1, r1, r0
 8007b62:	6021      	streq	r1, [r4, #0]
 8007b64:	6063      	str	r3, [r4, #4]
 8007b66:	6054      	str	r4, [r2, #4]
 8007b68:	e7cb      	b.n	8007b02 <_free_r+0x22>
 8007b6a:	bd38      	pop	{r3, r4, r5, pc}
 8007b6c:	200040d8 	.word	0x200040d8

08007b70 <malloc>:
 8007b70:	4b02      	ldr	r3, [pc, #8]	@ (8007b7c <malloc+0xc>)
 8007b72:	4601      	mov	r1, r0
 8007b74:	6818      	ldr	r0, [r3, #0]
 8007b76:	f000 b825 	b.w	8007bc4 <_malloc_r>
 8007b7a:	bf00      	nop
 8007b7c:	20000034 	.word	0x20000034

08007b80 <sbrk_aligned>:
 8007b80:	b570      	push	{r4, r5, r6, lr}
 8007b82:	4e0f      	ldr	r6, [pc, #60]	@ (8007bc0 <sbrk_aligned+0x40>)
 8007b84:	460c      	mov	r4, r1
 8007b86:	6831      	ldr	r1, [r6, #0]
 8007b88:	4605      	mov	r5, r0
 8007b8a:	b911      	cbnz	r1, 8007b92 <sbrk_aligned+0x12>
 8007b8c:	f000 fc62 	bl	8008454 <_sbrk_r>
 8007b90:	6030      	str	r0, [r6, #0]
 8007b92:	4621      	mov	r1, r4
 8007b94:	4628      	mov	r0, r5
 8007b96:	f000 fc5d 	bl	8008454 <_sbrk_r>
 8007b9a:	1c43      	adds	r3, r0, #1
 8007b9c:	d103      	bne.n	8007ba6 <sbrk_aligned+0x26>
 8007b9e:	f04f 34ff 	mov.w	r4, #4294967295
 8007ba2:	4620      	mov	r0, r4
 8007ba4:	bd70      	pop	{r4, r5, r6, pc}
 8007ba6:	1cc4      	adds	r4, r0, #3
 8007ba8:	f024 0403 	bic.w	r4, r4, #3
 8007bac:	42a0      	cmp	r0, r4
 8007bae:	d0f8      	beq.n	8007ba2 <sbrk_aligned+0x22>
 8007bb0:	1a21      	subs	r1, r4, r0
 8007bb2:	4628      	mov	r0, r5
 8007bb4:	f000 fc4e 	bl	8008454 <_sbrk_r>
 8007bb8:	3001      	adds	r0, #1
 8007bba:	d1f2      	bne.n	8007ba2 <sbrk_aligned+0x22>
 8007bbc:	e7ef      	b.n	8007b9e <sbrk_aligned+0x1e>
 8007bbe:	bf00      	nop
 8007bc0:	200040d4 	.word	0x200040d4

08007bc4 <_malloc_r>:
 8007bc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bc8:	1ccd      	adds	r5, r1, #3
 8007bca:	f025 0503 	bic.w	r5, r5, #3
 8007bce:	3508      	adds	r5, #8
 8007bd0:	2d0c      	cmp	r5, #12
 8007bd2:	bf38      	it	cc
 8007bd4:	250c      	movcc	r5, #12
 8007bd6:	2d00      	cmp	r5, #0
 8007bd8:	4606      	mov	r6, r0
 8007bda:	db01      	blt.n	8007be0 <_malloc_r+0x1c>
 8007bdc:	42a9      	cmp	r1, r5
 8007bde:	d904      	bls.n	8007bea <_malloc_r+0x26>
 8007be0:	230c      	movs	r3, #12
 8007be2:	6033      	str	r3, [r6, #0]
 8007be4:	2000      	movs	r0, #0
 8007be6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007cc0 <_malloc_r+0xfc>
 8007bee:	f000 f869 	bl	8007cc4 <__malloc_lock>
 8007bf2:	f8d8 3000 	ldr.w	r3, [r8]
 8007bf6:	461c      	mov	r4, r3
 8007bf8:	bb44      	cbnz	r4, 8007c4c <_malloc_r+0x88>
 8007bfa:	4629      	mov	r1, r5
 8007bfc:	4630      	mov	r0, r6
 8007bfe:	f7ff ffbf 	bl	8007b80 <sbrk_aligned>
 8007c02:	1c43      	adds	r3, r0, #1
 8007c04:	4604      	mov	r4, r0
 8007c06:	d158      	bne.n	8007cba <_malloc_r+0xf6>
 8007c08:	f8d8 4000 	ldr.w	r4, [r8]
 8007c0c:	4627      	mov	r7, r4
 8007c0e:	2f00      	cmp	r7, #0
 8007c10:	d143      	bne.n	8007c9a <_malloc_r+0xd6>
 8007c12:	2c00      	cmp	r4, #0
 8007c14:	d04b      	beq.n	8007cae <_malloc_r+0xea>
 8007c16:	6823      	ldr	r3, [r4, #0]
 8007c18:	4639      	mov	r1, r7
 8007c1a:	4630      	mov	r0, r6
 8007c1c:	eb04 0903 	add.w	r9, r4, r3
 8007c20:	f000 fc18 	bl	8008454 <_sbrk_r>
 8007c24:	4581      	cmp	r9, r0
 8007c26:	d142      	bne.n	8007cae <_malloc_r+0xea>
 8007c28:	6821      	ldr	r1, [r4, #0]
 8007c2a:	4630      	mov	r0, r6
 8007c2c:	1a6d      	subs	r5, r5, r1
 8007c2e:	4629      	mov	r1, r5
 8007c30:	f7ff ffa6 	bl	8007b80 <sbrk_aligned>
 8007c34:	3001      	adds	r0, #1
 8007c36:	d03a      	beq.n	8007cae <_malloc_r+0xea>
 8007c38:	6823      	ldr	r3, [r4, #0]
 8007c3a:	442b      	add	r3, r5
 8007c3c:	6023      	str	r3, [r4, #0]
 8007c3e:	f8d8 3000 	ldr.w	r3, [r8]
 8007c42:	685a      	ldr	r2, [r3, #4]
 8007c44:	bb62      	cbnz	r2, 8007ca0 <_malloc_r+0xdc>
 8007c46:	f8c8 7000 	str.w	r7, [r8]
 8007c4a:	e00f      	b.n	8007c6c <_malloc_r+0xa8>
 8007c4c:	6822      	ldr	r2, [r4, #0]
 8007c4e:	1b52      	subs	r2, r2, r5
 8007c50:	d420      	bmi.n	8007c94 <_malloc_r+0xd0>
 8007c52:	2a0b      	cmp	r2, #11
 8007c54:	d917      	bls.n	8007c86 <_malloc_r+0xc2>
 8007c56:	1961      	adds	r1, r4, r5
 8007c58:	42a3      	cmp	r3, r4
 8007c5a:	6025      	str	r5, [r4, #0]
 8007c5c:	bf18      	it	ne
 8007c5e:	6059      	strne	r1, [r3, #4]
 8007c60:	6863      	ldr	r3, [r4, #4]
 8007c62:	bf08      	it	eq
 8007c64:	f8c8 1000 	streq.w	r1, [r8]
 8007c68:	5162      	str	r2, [r4, r5]
 8007c6a:	604b      	str	r3, [r1, #4]
 8007c6c:	4630      	mov	r0, r6
 8007c6e:	f000 f82f 	bl	8007cd0 <__malloc_unlock>
 8007c72:	f104 000b 	add.w	r0, r4, #11
 8007c76:	1d23      	adds	r3, r4, #4
 8007c78:	f020 0007 	bic.w	r0, r0, #7
 8007c7c:	1ac2      	subs	r2, r0, r3
 8007c7e:	bf1c      	itt	ne
 8007c80:	1a1b      	subne	r3, r3, r0
 8007c82:	50a3      	strne	r3, [r4, r2]
 8007c84:	e7af      	b.n	8007be6 <_malloc_r+0x22>
 8007c86:	6862      	ldr	r2, [r4, #4]
 8007c88:	42a3      	cmp	r3, r4
 8007c8a:	bf0c      	ite	eq
 8007c8c:	f8c8 2000 	streq.w	r2, [r8]
 8007c90:	605a      	strne	r2, [r3, #4]
 8007c92:	e7eb      	b.n	8007c6c <_malloc_r+0xa8>
 8007c94:	4623      	mov	r3, r4
 8007c96:	6864      	ldr	r4, [r4, #4]
 8007c98:	e7ae      	b.n	8007bf8 <_malloc_r+0x34>
 8007c9a:	463c      	mov	r4, r7
 8007c9c:	687f      	ldr	r7, [r7, #4]
 8007c9e:	e7b6      	b.n	8007c0e <_malloc_r+0x4a>
 8007ca0:	461a      	mov	r2, r3
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	42a3      	cmp	r3, r4
 8007ca6:	d1fb      	bne.n	8007ca0 <_malloc_r+0xdc>
 8007ca8:	2300      	movs	r3, #0
 8007caa:	6053      	str	r3, [r2, #4]
 8007cac:	e7de      	b.n	8007c6c <_malloc_r+0xa8>
 8007cae:	230c      	movs	r3, #12
 8007cb0:	4630      	mov	r0, r6
 8007cb2:	6033      	str	r3, [r6, #0]
 8007cb4:	f000 f80c 	bl	8007cd0 <__malloc_unlock>
 8007cb8:	e794      	b.n	8007be4 <_malloc_r+0x20>
 8007cba:	6005      	str	r5, [r0, #0]
 8007cbc:	e7d6      	b.n	8007c6c <_malloc_r+0xa8>
 8007cbe:	bf00      	nop
 8007cc0:	200040d8 	.word	0x200040d8

08007cc4 <__malloc_lock>:
 8007cc4:	4801      	ldr	r0, [pc, #4]	@ (8007ccc <__malloc_lock+0x8>)
 8007cc6:	f7ff bedc 	b.w	8007a82 <__retarget_lock_acquire_recursive>
 8007cca:	bf00      	nop
 8007ccc:	200040d0 	.word	0x200040d0

08007cd0 <__malloc_unlock>:
 8007cd0:	4801      	ldr	r0, [pc, #4]	@ (8007cd8 <__malloc_unlock+0x8>)
 8007cd2:	f7ff bed7 	b.w	8007a84 <__retarget_lock_release_recursive>
 8007cd6:	bf00      	nop
 8007cd8:	200040d0 	.word	0x200040d0

08007cdc <__ssputs_r>:
 8007cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ce0:	461f      	mov	r7, r3
 8007ce2:	688e      	ldr	r6, [r1, #8]
 8007ce4:	4682      	mov	sl, r0
 8007ce6:	42be      	cmp	r6, r7
 8007ce8:	460c      	mov	r4, r1
 8007cea:	4690      	mov	r8, r2
 8007cec:	680b      	ldr	r3, [r1, #0]
 8007cee:	d82d      	bhi.n	8007d4c <__ssputs_r+0x70>
 8007cf0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007cf4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007cf8:	d026      	beq.n	8007d48 <__ssputs_r+0x6c>
 8007cfa:	6965      	ldr	r5, [r4, #20]
 8007cfc:	6909      	ldr	r1, [r1, #16]
 8007cfe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007d02:	eba3 0901 	sub.w	r9, r3, r1
 8007d06:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007d0a:	1c7b      	adds	r3, r7, #1
 8007d0c:	444b      	add	r3, r9
 8007d0e:	106d      	asrs	r5, r5, #1
 8007d10:	429d      	cmp	r5, r3
 8007d12:	bf38      	it	cc
 8007d14:	461d      	movcc	r5, r3
 8007d16:	0553      	lsls	r3, r2, #21
 8007d18:	d527      	bpl.n	8007d6a <__ssputs_r+0x8e>
 8007d1a:	4629      	mov	r1, r5
 8007d1c:	f7ff ff52 	bl	8007bc4 <_malloc_r>
 8007d20:	4606      	mov	r6, r0
 8007d22:	b360      	cbz	r0, 8007d7e <__ssputs_r+0xa2>
 8007d24:	464a      	mov	r2, r9
 8007d26:	6921      	ldr	r1, [r4, #16]
 8007d28:	f7ff fead 	bl	8007a86 <memcpy>
 8007d2c:	89a3      	ldrh	r3, [r4, #12]
 8007d2e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007d32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d36:	81a3      	strh	r3, [r4, #12]
 8007d38:	6126      	str	r6, [r4, #16]
 8007d3a:	444e      	add	r6, r9
 8007d3c:	6026      	str	r6, [r4, #0]
 8007d3e:	463e      	mov	r6, r7
 8007d40:	6165      	str	r5, [r4, #20]
 8007d42:	eba5 0509 	sub.w	r5, r5, r9
 8007d46:	60a5      	str	r5, [r4, #8]
 8007d48:	42be      	cmp	r6, r7
 8007d4a:	d900      	bls.n	8007d4e <__ssputs_r+0x72>
 8007d4c:	463e      	mov	r6, r7
 8007d4e:	4632      	mov	r2, r6
 8007d50:	4641      	mov	r1, r8
 8007d52:	6820      	ldr	r0, [r4, #0]
 8007d54:	f000 fb64 	bl	8008420 <memmove>
 8007d58:	2000      	movs	r0, #0
 8007d5a:	68a3      	ldr	r3, [r4, #8]
 8007d5c:	1b9b      	subs	r3, r3, r6
 8007d5e:	60a3      	str	r3, [r4, #8]
 8007d60:	6823      	ldr	r3, [r4, #0]
 8007d62:	4433      	add	r3, r6
 8007d64:	6023      	str	r3, [r4, #0]
 8007d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d6a:	462a      	mov	r2, r5
 8007d6c:	f000 fb97 	bl	800849e <_realloc_r>
 8007d70:	4606      	mov	r6, r0
 8007d72:	2800      	cmp	r0, #0
 8007d74:	d1e0      	bne.n	8007d38 <__ssputs_r+0x5c>
 8007d76:	4650      	mov	r0, sl
 8007d78:	6921      	ldr	r1, [r4, #16]
 8007d7a:	f7ff feb1 	bl	8007ae0 <_free_r>
 8007d7e:	230c      	movs	r3, #12
 8007d80:	f8ca 3000 	str.w	r3, [sl]
 8007d84:	89a3      	ldrh	r3, [r4, #12]
 8007d86:	f04f 30ff 	mov.w	r0, #4294967295
 8007d8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d8e:	81a3      	strh	r3, [r4, #12]
 8007d90:	e7e9      	b.n	8007d66 <__ssputs_r+0x8a>
	...

08007d94 <_svfiprintf_r>:
 8007d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d98:	4698      	mov	r8, r3
 8007d9a:	898b      	ldrh	r3, [r1, #12]
 8007d9c:	4607      	mov	r7, r0
 8007d9e:	061b      	lsls	r3, r3, #24
 8007da0:	460d      	mov	r5, r1
 8007da2:	4614      	mov	r4, r2
 8007da4:	b09d      	sub	sp, #116	@ 0x74
 8007da6:	d510      	bpl.n	8007dca <_svfiprintf_r+0x36>
 8007da8:	690b      	ldr	r3, [r1, #16]
 8007daa:	b973      	cbnz	r3, 8007dca <_svfiprintf_r+0x36>
 8007dac:	2140      	movs	r1, #64	@ 0x40
 8007dae:	f7ff ff09 	bl	8007bc4 <_malloc_r>
 8007db2:	6028      	str	r0, [r5, #0]
 8007db4:	6128      	str	r0, [r5, #16]
 8007db6:	b930      	cbnz	r0, 8007dc6 <_svfiprintf_r+0x32>
 8007db8:	230c      	movs	r3, #12
 8007dba:	603b      	str	r3, [r7, #0]
 8007dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8007dc0:	b01d      	add	sp, #116	@ 0x74
 8007dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dc6:	2340      	movs	r3, #64	@ 0x40
 8007dc8:	616b      	str	r3, [r5, #20]
 8007dca:	2300      	movs	r3, #0
 8007dcc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007dce:	2320      	movs	r3, #32
 8007dd0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007dd4:	2330      	movs	r3, #48	@ 0x30
 8007dd6:	f04f 0901 	mov.w	r9, #1
 8007dda:	f8cd 800c 	str.w	r8, [sp, #12]
 8007dde:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007f78 <_svfiprintf_r+0x1e4>
 8007de2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007de6:	4623      	mov	r3, r4
 8007de8:	469a      	mov	sl, r3
 8007dea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007dee:	b10a      	cbz	r2, 8007df4 <_svfiprintf_r+0x60>
 8007df0:	2a25      	cmp	r2, #37	@ 0x25
 8007df2:	d1f9      	bne.n	8007de8 <_svfiprintf_r+0x54>
 8007df4:	ebba 0b04 	subs.w	fp, sl, r4
 8007df8:	d00b      	beq.n	8007e12 <_svfiprintf_r+0x7e>
 8007dfa:	465b      	mov	r3, fp
 8007dfc:	4622      	mov	r2, r4
 8007dfe:	4629      	mov	r1, r5
 8007e00:	4638      	mov	r0, r7
 8007e02:	f7ff ff6b 	bl	8007cdc <__ssputs_r>
 8007e06:	3001      	adds	r0, #1
 8007e08:	f000 80a7 	beq.w	8007f5a <_svfiprintf_r+0x1c6>
 8007e0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e0e:	445a      	add	r2, fp
 8007e10:	9209      	str	r2, [sp, #36]	@ 0x24
 8007e12:	f89a 3000 	ldrb.w	r3, [sl]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	f000 809f 	beq.w	8007f5a <_svfiprintf_r+0x1c6>
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	f04f 32ff 	mov.w	r2, #4294967295
 8007e22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e26:	f10a 0a01 	add.w	sl, sl, #1
 8007e2a:	9304      	str	r3, [sp, #16]
 8007e2c:	9307      	str	r3, [sp, #28]
 8007e2e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007e32:	931a      	str	r3, [sp, #104]	@ 0x68
 8007e34:	4654      	mov	r4, sl
 8007e36:	2205      	movs	r2, #5
 8007e38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e3c:	484e      	ldr	r0, [pc, #312]	@ (8007f78 <_svfiprintf_r+0x1e4>)
 8007e3e:	f000 fb19 	bl	8008474 <memchr>
 8007e42:	9a04      	ldr	r2, [sp, #16]
 8007e44:	b9d8      	cbnz	r0, 8007e7e <_svfiprintf_r+0xea>
 8007e46:	06d0      	lsls	r0, r2, #27
 8007e48:	bf44      	itt	mi
 8007e4a:	2320      	movmi	r3, #32
 8007e4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e50:	0711      	lsls	r1, r2, #28
 8007e52:	bf44      	itt	mi
 8007e54:	232b      	movmi	r3, #43	@ 0x2b
 8007e56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e5a:	f89a 3000 	ldrb.w	r3, [sl]
 8007e5e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e60:	d015      	beq.n	8007e8e <_svfiprintf_r+0xfa>
 8007e62:	4654      	mov	r4, sl
 8007e64:	2000      	movs	r0, #0
 8007e66:	f04f 0c0a 	mov.w	ip, #10
 8007e6a:	9a07      	ldr	r2, [sp, #28]
 8007e6c:	4621      	mov	r1, r4
 8007e6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e72:	3b30      	subs	r3, #48	@ 0x30
 8007e74:	2b09      	cmp	r3, #9
 8007e76:	d94b      	bls.n	8007f10 <_svfiprintf_r+0x17c>
 8007e78:	b1b0      	cbz	r0, 8007ea8 <_svfiprintf_r+0x114>
 8007e7a:	9207      	str	r2, [sp, #28]
 8007e7c:	e014      	b.n	8007ea8 <_svfiprintf_r+0x114>
 8007e7e:	eba0 0308 	sub.w	r3, r0, r8
 8007e82:	fa09 f303 	lsl.w	r3, r9, r3
 8007e86:	4313      	orrs	r3, r2
 8007e88:	46a2      	mov	sl, r4
 8007e8a:	9304      	str	r3, [sp, #16]
 8007e8c:	e7d2      	b.n	8007e34 <_svfiprintf_r+0xa0>
 8007e8e:	9b03      	ldr	r3, [sp, #12]
 8007e90:	1d19      	adds	r1, r3, #4
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	9103      	str	r1, [sp, #12]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	bfbb      	ittet	lt
 8007e9a:	425b      	neglt	r3, r3
 8007e9c:	f042 0202 	orrlt.w	r2, r2, #2
 8007ea0:	9307      	strge	r3, [sp, #28]
 8007ea2:	9307      	strlt	r3, [sp, #28]
 8007ea4:	bfb8      	it	lt
 8007ea6:	9204      	strlt	r2, [sp, #16]
 8007ea8:	7823      	ldrb	r3, [r4, #0]
 8007eaa:	2b2e      	cmp	r3, #46	@ 0x2e
 8007eac:	d10a      	bne.n	8007ec4 <_svfiprintf_r+0x130>
 8007eae:	7863      	ldrb	r3, [r4, #1]
 8007eb0:	2b2a      	cmp	r3, #42	@ 0x2a
 8007eb2:	d132      	bne.n	8007f1a <_svfiprintf_r+0x186>
 8007eb4:	9b03      	ldr	r3, [sp, #12]
 8007eb6:	3402      	adds	r4, #2
 8007eb8:	1d1a      	adds	r2, r3, #4
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	9203      	str	r2, [sp, #12]
 8007ebe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007ec2:	9305      	str	r3, [sp, #20]
 8007ec4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8007f7c <_svfiprintf_r+0x1e8>
 8007ec8:	2203      	movs	r2, #3
 8007eca:	4650      	mov	r0, sl
 8007ecc:	7821      	ldrb	r1, [r4, #0]
 8007ece:	f000 fad1 	bl	8008474 <memchr>
 8007ed2:	b138      	cbz	r0, 8007ee4 <_svfiprintf_r+0x150>
 8007ed4:	2240      	movs	r2, #64	@ 0x40
 8007ed6:	9b04      	ldr	r3, [sp, #16]
 8007ed8:	eba0 000a 	sub.w	r0, r0, sl
 8007edc:	4082      	lsls	r2, r0
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	3401      	adds	r4, #1
 8007ee2:	9304      	str	r3, [sp, #16]
 8007ee4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ee8:	2206      	movs	r2, #6
 8007eea:	4825      	ldr	r0, [pc, #148]	@ (8007f80 <_svfiprintf_r+0x1ec>)
 8007eec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007ef0:	f000 fac0 	bl	8008474 <memchr>
 8007ef4:	2800      	cmp	r0, #0
 8007ef6:	d036      	beq.n	8007f66 <_svfiprintf_r+0x1d2>
 8007ef8:	4b22      	ldr	r3, [pc, #136]	@ (8007f84 <_svfiprintf_r+0x1f0>)
 8007efa:	bb1b      	cbnz	r3, 8007f44 <_svfiprintf_r+0x1b0>
 8007efc:	9b03      	ldr	r3, [sp, #12]
 8007efe:	3307      	adds	r3, #7
 8007f00:	f023 0307 	bic.w	r3, r3, #7
 8007f04:	3308      	adds	r3, #8
 8007f06:	9303      	str	r3, [sp, #12]
 8007f08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f0a:	4433      	add	r3, r6
 8007f0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f0e:	e76a      	b.n	8007de6 <_svfiprintf_r+0x52>
 8007f10:	460c      	mov	r4, r1
 8007f12:	2001      	movs	r0, #1
 8007f14:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f18:	e7a8      	b.n	8007e6c <_svfiprintf_r+0xd8>
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	f04f 0c0a 	mov.w	ip, #10
 8007f20:	4619      	mov	r1, r3
 8007f22:	3401      	adds	r4, #1
 8007f24:	9305      	str	r3, [sp, #20]
 8007f26:	4620      	mov	r0, r4
 8007f28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f2c:	3a30      	subs	r2, #48	@ 0x30
 8007f2e:	2a09      	cmp	r2, #9
 8007f30:	d903      	bls.n	8007f3a <_svfiprintf_r+0x1a6>
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d0c6      	beq.n	8007ec4 <_svfiprintf_r+0x130>
 8007f36:	9105      	str	r1, [sp, #20]
 8007f38:	e7c4      	b.n	8007ec4 <_svfiprintf_r+0x130>
 8007f3a:	4604      	mov	r4, r0
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f42:	e7f0      	b.n	8007f26 <_svfiprintf_r+0x192>
 8007f44:	ab03      	add	r3, sp, #12
 8007f46:	9300      	str	r3, [sp, #0]
 8007f48:	462a      	mov	r2, r5
 8007f4a:	4638      	mov	r0, r7
 8007f4c:	4b0e      	ldr	r3, [pc, #56]	@ (8007f88 <_svfiprintf_r+0x1f4>)
 8007f4e:	a904      	add	r1, sp, #16
 8007f50:	f3af 8000 	nop.w
 8007f54:	1c42      	adds	r2, r0, #1
 8007f56:	4606      	mov	r6, r0
 8007f58:	d1d6      	bne.n	8007f08 <_svfiprintf_r+0x174>
 8007f5a:	89ab      	ldrh	r3, [r5, #12]
 8007f5c:	065b      	lsls	r3, r3, #25
 8007f5e:	f53f af2d 	bmi.w	8007dbc <_svfiprintf_r+0x28>
 8007f62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007f64:	e72c      	b.n	8007dc0 <_svfiprintf_r+0x2c>
 8007f66:	ab03      	add	r3, sp, #12
 8007f68:	9300      	str	r3, [sp, #0]
 8007f6a:	462a      	mov	r2, r5
 8007f6c:	4638      	mov	r0, r7
 8007f6e:	4b06      	ldr	r3, [pc, #24]	@ (8007f88 <_svfiprintf_r+0x1f4>)
 8007f70:	a904      	add	r1, sp, #16
 8007f72:	f000 f87d 	bl	8008070 <_printf_i>
 8007f76:	e7ed      	b.n	8007f54 <_svfiprintf_r+0x1c0>
 8007f78:	0800a3e9 	.word	0x0800a3e9
 8007f7c:	0800a3ef 	.word	0x0800a3ef
 8007f80:	0800a3f3 	.word	0x0800a3f3
 8007f84:	00000000 	.word	0x00000000
 8007f88:	08007cdd 	.word	0x08007cdd

08007f8c <_printf_common>:
 8007f8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f90:	4616      	mov	r6, r2
 8007f92:	4698      	mov	r8, r3
 8007f94:	688a      	ldr	r2, [r1, #8]
 8007f96:	690b      	ldr	r3, [r1, #16]
 8007f98:	4607      	mov	r7, r0
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	bfb8      	it	lt
 8007f9e:	4613      	movlt	r3, r2
 8007fa0:	6033      	str	r3, [r6, #0]
 8007fa2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007fa6:	460c      	mov	r4, r1
 8007fa8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007fac:	b10a      	cbz	r2, 8007fb2 <_printf_common+0x26>
 8007fae:	3301      	adds	r3, #1
 8007fb0:	6033      	str	r3, [r6, #0]
 8007fb2:	6823      	ldr	r3, [r4, #0]
 8007fb4:	0699      	lsls	r1, r3, #26
 8007fb6:	bf42      	ittt	mi
 8007fb8:	6833      	ldrmi	r3, [r6, #0]
 8007fba:	3302      	addmi	r3, #2
 8007fbc:	6033      	strmi	r3, [r6, #0]
 8007fbe:	6825      	ldr	r5, [r4, #0]
 8007fc0:	f015 0506 	ands.w	r5, r5, #6
 8007fc4:	d106      	bne.n	8007fd4 <_printf_common+0x48>
 8007fc6:	f104 0a19 	add.w	sl, r4, #25
 8007fca:	68e3      	ldr	r3, [r4, #12]
 8007fcc:	6832      	ldr	r2, [r6, #0]
 8007fce:	1a9b      	subs	r3, r3, r2
 8007fd0:	42ab      	cmp	r3, r5
 8007fd2:	dc2b      	bgt.n	800802c <_printf_common+0xa0>
 8007fd4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007fd8:	6822      	ldr	r2, [r4, #0]
 8007fda:	3b00      	subs	r3, #0
 8007fdc:	bf18      	it	ne
 8007fde:	2301      	movne	r3, #1
 8007fe0:	0692      	lsls	r2, r2, #26
 8007fe2:	d430      	bmi.n	8008046 <_printf_common+0xba>
 8007fe4:	4641      	mov	r1, r8
 8007fe6:	4638      	mov	r0, r7
 8007fe8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007fec:	47c8      	blx	r9
 8007fee:	3001      	adds	r0, #1
 8007ff0:	d023      	beq.n	800803a <_printf_common+0xae>
 8007ff2:	6823      	ldr	r3, [r4, #0]
 8007ff4:	6922      	ldr	r2, [r4, #16]
 8007ff6:	f003 0306 	and.w	r3, r3, #6
 8007ffa:	2b04      	cmp	r3, #4
 8007ffc:	bf14      	ite	ne
 8007ffe:	2500      	movne	r5, #0
 8008000:	6833      	ldreq	r3, [r6, #0]
 8008002:	f04f 0600 	mov.w	r6, #0
 8008006:	bf08      	it	eq
 8008008:	68e5      	ldreq	r5, [r4, #12]
 800800a:	f104 041a 	add.w	r4, r4, #26
 800800e:	bf08      	it	eq
 8008010:	1aed      	subeq	r5, r5, r3
 8008012:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008016:	bf08      	it	eq
 8008018:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800801c:	4293      	cmp	r3, r2
 800801e:	bfc4      	itt	gt
 8008020:	1a9b      	subgt	r3, r3, r2
 8008022:	18ed      	addgt	r5, r5, r3
 8008024:	42b5      	cmp	r5, r6
 8008026:	d11a      	bne.n	800805e <_printf_common+0xd2>
 8008028:	2000      	movs	r0, #0
 800802a:	e008      	b.n	800803e <_printf_common+0xb2>
 800802c:	2301      	movs	r3, #1
 800802e:	4652      	mov	r2, sl
 8008030:	4641      	mov	r1, r8
 8008032:	4638      	mov	r0, r7
 8008034:	47c8      	blx	r9
 8008036:	3001      	adds	r0, #1
 8008038:	d103      	bne.n	8008042 <_printf_common+0xb6>
 800803a:	f04f 30ff 	mov.w	r0, #4294967295
 800803e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008042:	3501      	adds	r5, #1
 8008044:	e7c1      	b.n	8007fca <_printf_common+0x3e>
 8008046:	2030      	movs	r0, #48	@ 0x30
 8008048:	18e1      	adds	r1, r4, r3
 800804a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800804e:	1c5a      	adds	r2, r3, #1
 8008050:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008054:	4422      	add	r2, r4
 8008056:	3302      	adds	r3, #2
 8008058:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800805c:	e7c2      	b.n	8007fe4 <_printf_common+0x58>
 800805e:	2301      	movs	r3, #1
 8008060:	4622      	mov	r2, r4
 8008062:	4641      	mov	r1, r8
 8008064:	4638      	mov	r0, r7
 8008066:	47c8      	blx	r9
 8008068:	3001      	adds	r0, #1
 800806a:	d0e6      	beq.n	800803a <_printf_common+0xae>
 800806c:	3601      	adds	r6, #1
 800806e:	e7d9      	b.n	8008024 <_printf_common+0x98>

08008070 <_printf_i>:
 8008070:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008074:	7e0f      	ldrb	r7, [r1, #24]
 8008076:	4691      	mov	r9, r2
 8008078:	2f78      	cmp	r7, #120	@ 0x78
 800807a:	4680      	mov	r8, r0
 800807c:	460c      	mov	r4, r1
 800807e:	469a      	mov	sl, r3
 8008080:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008082:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008086:	d807      	bhi.n	8008098 <_printf_i+0x28>
 8008088:	2f62      	cmp	r7, #98	@ 0x62
 800808a:	d80a      	bhi.n	80080a2 <_printf_i+0x32>
 800808c:	2f00      	cmp	r7, #0
 800808e:	f000 80d1 	beq.w	8008234 <_printf_i+0x1c4>
 8008092:	2f58      	cmp	r7, #88	@ 0x58
 8008094:	f000 80b8 	beq.w	8008208 <_printf_i+0x198>
 8008098:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800809c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80080a0:	e03a      	b.n	8008118 <_printf_i+0xa8>
 80080a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80080a6:	2b15      	cmp	r3, #21
 80080a8:	d8f6      	bhi.n	8008098 <_printf_i+0x28>
 80080aa:	a101      	add	r1, pc, #4	@ (adr r1, 80080b0 <_printf_i+0x40>)
 80080ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80080b0:	08008109 	.word	0x08008109
 80080b4:	0800811d 	.word	0x0800811d
 80080b8:	08008099 	.word	0x08008099
 80080bc:	08008099 	.word	0x08008099
 80080c0:	08008099 	.word	0x08008099
 80080c4:	08008099 	.word	0x08008099
 80080c8:	0800811d 	.word	0x0800811d
 80080cc:	08008099 	.word	0x08008099
 80080d0:	08008099 	.word	0x08008099
 80080d4:	08008099 	.word	0x08008099
 80080d8:	08008099 	.word	0x08008099
 80080dc:	0800821b 	.word	0x0800821b
 80080e0:	08008147 	.word	0x08008147
 80080e4:	080081d5 	.word	0x080081d5
 80080e8:	08008099 	.word	0x08008099
 80080ec:	08008099 	.word	0x08008099
 80080f0:	0800823d 	.word	0x0800823d
 80080f4:	08008099 	.word	0x08008099
 80080f8:	08008147 	.word	0x08008147
 80080fc:	08008099 	.word	0x08008099
 8008100:	08008099 	.word	0x08008099
 8008104:	080081dd 	.word	0x080081dd
 8008108:	6833      	ldr	r3, [r6, #0]
 800810a:	1d1a      	adds	r2, r3, #4
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	6032      	str	r2, [r6, #0]
 8008110:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008114:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008118:	2301      	movs	r3, #1
 800811a:	e09c      	b.n	8008256 <_printf_i+0x1e6>
 800811c:	6833      	ldr	r3, [r6, #0]
 800811e:	6820      	ldr	r0, [r4, #0]
 8008120:	1d19      	adds	r1, r3, #4
 8008122:	6031      	str	r1, [r6, #0]
 8008124:	0606      	lsls	r6, r0, #24
 8008126:	d501      	bpl.n	800812c <_printf_i+0xbc>
 8008128:	681d      	ldr	r5, [r3, #0]
 800812a:	e003      	b.n	8008134 <_printf_i+0xc4>
 800812c:	0645      	lsls	r5, r0, #25
 800812e:	d5fb      	bpl.n	8008128 <_printf_i+0xb8>
 8008130:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008134:	2d00      	cmp	r5, #0
 8008136:	da03      	bge.n	8008140 <_printf_i+0xd0>
 8008138:	232d      	movs	r3, #45	@ 0x2d
 800813a:	426d      	negs	r5, r5
 800813c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008140:	230a      	movs	r3, #10
 8008142:	4858      	ldr	r0, [pc, #352]	@ (80082a4 <_printf_i+0x234>)
 8008144:	e011      	b.n	800816a <_printf_i+0xfa>
 8008146:	6821      	ldr	r1, [r4, #0]
 8008148:	6833      	ldr	r3, [r6, #0]
 800814a:	0608      	lsls	r0, r1, #24
 800814c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008150:	d402      	bmi.n	8008158 <_printf_i+0xe8>
 8008152:	0649      	lsls	r1, r1, #25
 8008154:	bf48      	it	mi
 8008156:	b2ad      	uxthmi	r5, r5
 8008158:	2f6f      	cmp	r7, #111	@ 0x6f
 800815a:	6033      	str	r3, [r6, #0]
 800815c:	bf14      	ite	ne
 800815e:	230a      	movne	r3, #10
 8008160:	2308      	moveq	r3, #8
 8008162:	4850      	ldr	r0, [pc, #320]	@ (80082a4 <_printf_i+0x234>)
 8008164:	2100      	movs	r1, #0
 8008166:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800816a:	6866      	ldr	r6, [r4, #4]
 800816c:	2e00      	cmp	r6, #0
 800816e:	60a6      	str	r6, [r4, #8]
 8008170:	db05      	blt.n	800817e <_printf_i+0x10e>
 8008172:	6821      	ldr	r1, [r4, #0]
 8008174:	432e      	orrs	r6, r5
 8008176:	f021 0104 	bic.w	r1, r1, #4
 800817a:	6021      	str	r1, [r4, #0]
 800817c:	d04b      	beq.n	8008216 <_printf_i+0x1a6>
 800817e:	4616      	mov	r6, r2
 8008180:	fbb5 f1f3 	udiv	r1, r5, r3
 8008184:	fb03 5711 	mls	r7, r3, r1, r5
 8008188:	5dc7      	ldrb	r7, [r0, r7]
 800818a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800818e:	462f      	mov	r7, r5
 8008190:	42bb      	cmp	r3, r7
 8008192:	460d      	mov	r5, r1
 8008194:	d9f4      	bls.n	8008180 <_printf_i+0x110>
 8008196:	2b08      	cmp	r3, #8
 8008198:	d10b      	bne.n	80081b2 <_printf_i+0x142>
 800819a:	6823      	ldr	r3, [r4, #0]
 800819c:	07df      	lsls	r7, r3, #31
 800819e:	d508      	bpl.n	80081b2 <_printf_i+0x142>
 80081a0:	6923      	ldr	r3, [r4, #16]
 80081a2:	6861      	ldr	r1, [r4, #4]
 80081a4:	4299      	cmp	r1, r3
 80081a6:	bfde      	ittt	le
 80081a8:	2330      	movle	r3, #48	@ 0x30
 80081aa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80081ae:	f106 36ff 	addle.w	r6, r6, #4294967295
 80081b2:	1b92      	subs	r2, r2, r6
 80081b4:	6122      	str	r2, [r4, #16]
 80081b6:	464b      	mov	r3, r9
 80081b8:	4621      	mov	r1, r4
 80081ba:	4640      	mov	r0, r8
 80081bc:	f8cd a000 	str.w	sl, [sp]
 80081c0:	aa03      	add	r2, sp, #12
 80081c2:	f7ff fee3 	bl	8007f8c <_printf_common>
 80081c6:	3001      	adds	r0, #1
 80081c8:	d14a      	bne.n	8008260 <_printf_i+0x1f0>
 80081ca:	f04f 30ff 	mov.w	r0, #4294967295
 80081ce:	b004      	add	sp, #16
 80081d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081d4:	6823      	ldr	r3, [r4, #0]
 80081d6:	f043 0320 	orr.w	r3, r3, #32
 80081da:	6023      	str	r3, [r4, #0]
 80081dc:	2778      	movs	r7, #120	@ 0x78
 80081de:	4832      	ldr	r0, [pc, #200]	@ (80082a8 <_printf_i+0x238>)
 80081e0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80081e4:	6823      	ldr	r3, [r4, #0]
 80081e6:	6831      	ldr	r1, [r6, #0]
 80081e8:	061f      	lsls	r7, r3, #24
 80081ea:	f851 5b04 	ldr.w	r5, [r1], #4
 80081ee:	d402      	bmi.n	80081f6 <_printf_i+0x186>
 80081f0:	065f      	lsls	r7, r3, #25
 80081f2:	bf48      	it	mi
 80081f4:	b2ad      	uxthmi	r5, r5
 80081f6:	6031      	str	r1, [r6, #0]
 80081f8:	07d9      	lsls	r1, r3, #31
 80081fa:	bf44      	itt	mi
 80081fc:	f043 0320 	orrmi.w	r3, r3, #32
 8008200:	6023      	strmi	r3, [r4, #0]
 8008202:	b11d      	cbz	r5, 800820c <_printf_i+0x19c>
 8008204:	2310      	movs	r3, #16
 8008206:	e7ad      	b.n	8008164 <_printf_i+0xf4>
 8008208:	4826      	ldr	r0, [pc, #152]	@ (80082a4 <_printf_i+0x234>)
 800820a:	e7e9      	b.n	80081e0 <_printf_i+0x170>
 800820c:	6823      	ldr	r3, [r4, #0]
 800820e:	f023 0320 	bic.w	r3, r3, #32
 8008212:	6023      	str	r3, [r4, #0]
 8008214:	e7f6      	b.n	8008204 <_printf_i+0x194>
 8008216:	4616      	mov	r6, r2
 8008218:	e7bd      	b.n	8008196 <_printf_i+0x126>
 800821a:	6833      	ldr	r3, [r6, #0]
 800821c:	6825      	ldr	r5, [r4, #0]
 800821e:	1d18      	adds	r0, r3, #4
 8008220:	6961      	ldr	r1, [r4, #20]
 8008222:	6030      	str	r0, [r6, #0]
 8008224:	062e      	lsls	r6, r5, #24
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	d501      	bpl.n	800822e <_printf_i+0x1be>
 800822a:	6019      	str	r1, [r3, #0]
 800822c:	e002      	b.n	8008234 <_printf_i+0x1c4>
 800822e:	0668      	lsls	r0, r5, #25
 8008230:	d5fb      	bpl.n	800822a <_printf_i+0x1ba>
 8008232:	8019      	strh	r1, [r3, #0]
 8008234:	2300      	movs	r3, #0
 8008236:	4616      	mov	r6, r2
 8008238:	6123      	str	r3, [r4, #16]
 800823a:	e7bc      	b.n	80081b6 <_printf_i+0x146>
 800823c:	6833      	ldr	r3, [r6, #0]
 800823e:	2100      	movs	r1, #0
 8008240:	1d1a      	adds	r2, r3, #4
 8008242:	6032      	str	r2, [r6, #0]
 8008244:	681e      	ldr	r6, [r3, #0]
 8008246:	6862      	ldr	r2, [r4, #4]
 8008248:	4630      	mov	r0, r6
 800824a:	f000 f913 	bl	8008474 <memchr>
 800824e:	b108      	cbz	r0, 8008254 <_printf_i+0x1e4>
 8008250:	1b80      	subs	r0, r0, r6
 8008252:	6060      	str	r0, [r4, #4]
 8008254:	6863      	ldr	r3, [r4, #4]
 8008256:	6123      	str	r3, [r4, #16]
 8008258:	2300      	movs	r3, #0
 800825a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800825e:	e7aa      	b.n	80081b6 <_printf_i+0x146>
 8008260:	4632      	mov	r2, r6
 8008262:	4649      	mov	r1, r9
 8008264:	4640      	mov	r0, r8
 8008266:	6923      	ldr	r3, [r4, #16]
 8008268:	47d0      	blx	sl
 800826a:	3001      	adds	r0, #1
 800826c:	d0ad      	beq.n	80081ca <_printf_i+0x15a>
 800826e:	6823      	ldr	r3, [r4, #0]
 8008270:	079b      	lsls	r3, r3, #30
 8008272:	d413      	bmi.n	800829c <_printf_i+0x22c>
 8008274:	68e0      	ldr	r0, [r4, #12]
 8008276:	9b03      	ldr	r3, [sp, #12]
 8008278:	4298      	cmp	r0, r3
 800827a:	bfb8      	it	lt
 800827c:	4618      	movlt	r0, r3
 800827e:	e7a6      	b.n	80081ce <_printf_i+0x15e>
 8008280:	2301      	movs	r3, #1
 8008282:	4632      	mov	r2, r6
 8008284:	4649      	mov	r1, r9
 8008286:	4640      	mov	r0, r8
 8008288:	47d0      	blx	sl
 800828a:	3001      	adds	r0, #1
 800828c:	d09d      	beq.n	80081ca <_printf_i+0x15a>
 800828e:	3501      	adds	r5, #1
 8008290:	68e3      	ldr	r3, [r4, #12]
 8008292:	9903      	ldr	r1, [sp, #12]
 8008294:	1a5b      	subs	r3, r3, r1
 8008296:	42ab      	cmp	r3, r5
 8008298:	dcf2      	bgt.n	8008280 <_printf_i+0x210>
 800829a:	e7eb      	b.n	8008274 <_printf_i+0x204>
 800829c:	2500      	movs	r5, #0
 800829e:	f104 0619 	add.w	r6, r4, #25
 80082a2:	e7f5      	b.n	8008290 <_printf_i+0x220>
 80082a4:	0800a3fa 	.word	0x0800a3fa
 80082a8:	0800a40b 	.word	0x0800a40b

080082ac <__sflush_r>:
 80082ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80082b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082b2:	0716      	lsls	r6, r2, #28
 80082b4:	4605      	mov	r5, r0
 80082b6:	460c      	mov	r4, r1
 80082b8:	d454      	bmi.n	8008364 <__sflush_r+0xb8>
 80082ba:	684b      	ldr	r3, [r1, #4]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	dc02      	bgt.n	80082c6 <__sflush_r+0x1a>
 80082c0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	dd48      	ble.n	8008358 <__sflush_r+0xac>
 80082c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80082c8:	2e00      	cmp	r6, #0
 80082ca:	d045      	beq.n	8008358 <__sflush_r+0xac>
 80082cc:	2300      	movs	r3, #0
 80082ce:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80082d2:	682f      	ldr	r7, [r5, #0]
 80082d4:	6a21      	ldr	r1, [r4, #32]
 80082d6:	602b      	str	r3, [r5, #0]
 80082d8:	d030      	beq.n	800833c <__sflush_r+0x90>
 80082da:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80082dc:	89a3      	ldrh	r3, [r4, #12]
 80082de:	0759      	lsls	r1, r3, #29
 80082e0:	d505      	bpl.n	80082ee <__sflush_r+0x42>
 80082e2:	6863      	ldr	r3, [r4, #4]
 80082e4:	1ad2      	subs	r2, r2, r3
 80082e6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80082e8:	b10b      	cbz	r3, 80082ee <__sflush_r+0x42>
 80082ea:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80082ec:	1ad2      	subs	r2, r2, r3
 80082ee:	2300      	movs	r3, #0
 80082f0:	4628      	mov	r0, r5
 80082f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80082f4:	6a21      	ldr	r1, [r4, #32]
 80082f6:	47b0      	blx	r6
 80082f8:	1c43      	adds	r3, r0, #1
 80082fa:	89a3      	ldrh	r3, [r4, #12]
 80082fc:	d106      	bne.n	800830c <__sflush_r+0x60>
 80082fe:	6829      	ldr	r1, [r5, #0]
 8008300:	291d      	cmp	r1, #29
 8008302:	d82b      	bhi.n	800835c <__sflush_r+0xb0>
 8008304:	4a28      	ldr	r2, [pc, #160]	@ (80083a8 <__sflush_r+0xfc>)
 8008306:	40ca      	lsrs	r2, r1
 8008308:	07d6      	lsls	r6, r2, #31
 800830a:	d527      	bpl.n	800835c <__sflush_r+0xb0>
 800830c:	2200      	movs	r2, #0
 800830e:	6062      	str	r2, [r4, #4]
 8008310:	6922      	ldr	r2, [r4, #16]
 8008312:	04d9      	lsls	r1, r3, #19
 8008314:	6022      	str	r2, [r4, #0]
 8008316:	d504      	bpl.n	8008322 <__sflush_r+0x76>
 8008318:	1c42      	adds	r2, r0, #1
 800831a:	d101      	bne.n	8008320 <__sflush_r+0x74>
 800831c:	682b      	ldr	r3, [r5, #0]
 800831e:	b903      	cbnz	r3, 8008322 <__sflush_r+0x76>
 8008320:	6560      	str	r0, [r4, #84]	@ 0x54
 8008322:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008324:	602f      	str	r7, [r5, #0]
 8008326:	b1b9      	cbz	r1, 8008358 <__sflush_r+0xac>
 8008328:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800832c:	4299      	cmp	r1, r3
 800832e:	d002      	beq.n	8008336 <__sflush_r+0x8a>
 8008330:	4628      	mov	r0, r5
 8008332:	f7ff fbd5 	bl	8007ae0 <_free_r>
 8008336:	2300      	movs	r3, #0
 8008338:	6363      	str	r3, [r4, #52]	@ 0x34
 800833a:	e00d      	b.n	8008358 <__sflush_r+0xac>
 800833c:	2301      	movs	r3, #1
 800833e:	4628      	mov	r0, r5
 8008340:	47b0      	blx	r6
 8008342:	4602      	mov	r2, r0
 8008344:	1c50      	adds	r0, r2, #1
 8008346:	d1c9      	bne.n	80082dc <__sflush_r+0x30>
 8008348:	682b      	ldr	r3, [r5, #0]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d0c6      	beq.n	80082dc <__sflush_r+0x30>
 800834e:	2b1d      	cmp	r3, #29
 8008350:	d001      	beq.n	8008356 <__sflush_r+0xaa>
 8008352:	2b16      	cmp	r3, #22
 8008354:	d11d      	bne.n	8008392 <__sflush_r+0xe6>
 8008356:	602f      	str	r7, [r5, #0]
 8008358:	2000      	movs	r0, #0
 800835a:	e021      	b.n	80083a0 <__sflush_r+0xf4>
 800835c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008360:	b21b      	sxth	r3, r3
 8008362:	e01a      	b.n	800839a <__sflush_r+0xee>
 8008364:	690f      	ldr	r7, [r1, #16]
 8008366:	2f00      	cmp	r7, #0
 8008368:	d0f6      	beq.n	8008358 <__sflush_r+0xac>
 800836a:	0793      	lsls	r3, r2, #30
 800836c:	bf18      	it	ne
 800836e:	2300      	movne	r3, #0
 8008370:	680e      	ldr	r6, [r1, #0]
 8008372:	bf08      	it	eq
 8008374:	694b      	ldreq	r3, [r1, #20]
 8008376:	1bf6      	subs	r6, r6, r7
 8008378:	600f      	str	r7, [r1, #0]
 800837a:	608b      	str	r3, [r1, #8]
 800837c:	2e00      	cmp	r6, #0
 800837e:	ddeb      	ble.n	8008358 <__sflush_r+0xac>
 8008380:	4633      	mov	r3, r6
 8008382:	463a      	mov	r2, r7
 8008384:	4628      	mov	r0, r5
 8008386:	6a21      	ldr	r1, [r4, #32]
 8008388:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800838c:	47e0      	blx	ip
 800838e:	2800      	cmp	r0, #0
 8008390:	dc07      	bgt.n	80083a2 <__sflush_r+0xf6>
 8008392:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008396:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800839a:	f04f 30ff 	mov.w	r0, #4294967295
 800839e:	81a3      	strh	r3, [r4, #12]
 80083a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083a2:	4407      	add	r7, r0
 80083a4:	1a36      	subs	r6, r6, r0
 80083a6:	e7e9      	b.n	800837c <__sflush_r+0xd0>
 80083a8:	20400001 	.word	0x20400001

080083ac <_fflush_r>:
 80083ac:	b538      	push	{r3, r4, r5, lr}
 80083ae:	690b      	ldr	r3, [r1, #16]
 80083b0:	4605      	mov	r5, r0
 80083b2:	460c      	mov	r4, r1
 80083b4:	b913      	cbnz	r3, 80083bc <_fflush_r+0x10>
 80083b6:	2500      	movs	r5, #0
 80083b8:	4628      	mov	r0, r5
 80083ba:	bd38      	pop	{r3, r4, r5, pc}
 80083bc:	b118      	cbz	r0, 80083c6 <_fflush_r+0x1a>
 80083be:	6a03      	ldr	r3, [r0, #32]
 80083c0:	b90b      	cbnz	r3, 80083c6 <_fflush_r+0x1a>
 80083c2:	f7ff fa37 	bl	8007834 <__sinit>
 80083c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d0f3      	beq.n	80083b6 <_fflush_r+0xa>
 80083ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80083d0:	07d0      	lsls	r0, r2, #31
 80083d2:	d404      	bmi.n	80083de <_fflush_r+0x32>
 80083d4:	0599      	lsls	r1, r3, #22
 80083d6:	d402      	bmi.n	80083de <_fflush_r+0x32>
 80083d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80083da:	f7ff fb52 	bl	8007a82 <__retarget_lock_acquire_recursive>
 80083de:	4628      	mov	r0, r5
 80083e0:	4621      	mov	r1, r4
 80083e2:	f7ff ff63 	bl	80082ac <__sflush_r>
 80083e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80083e8:	4605      	mov	r5, r0
 80083ea:	07da      	lsls	r2, r3, #31
 80083ec:	d4e4      	bmi.n	80083b8 <_fflush_r+0xc>
 80083ee:	89a3      	ldrh	r3, [r4, #12]
 80083f0:	059b      	lsls	r3, r3, #22
 80083f2:	d4e1      	bmi.n	80083b8 <_fflush_r+0xc>
 80083f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80083f6:	f7ff fb45 	bl	8007a84 <__retarget_lock_release_recursive>
 80083fa:	e7dd      	b.n	80083b8 <_fflush_r+0xc>

080083fc <fiprintf>:
 80083fc:	b40e      	push	{r1, r2, r3}
 80083fe:	b503      	push	{r0, r1, lr}
 8008400:	4601      	mov	r1, r0
 8008402:	ab03      	add	r3, sp, #12
 8008404:	4805      	ldr	r0, [pc, #20]	@ (800841c <fiprintf+0x20>)
 8008406:	f853 2b04 	ldr.w	r2, [r3], #4
 800840a:	6800      	ldr	r0, [r0, #0]
 800840c:	9301      	str	r3, [sp, #4]
 800840e:	f000 f89b 	bl	8008548 <_vfiprintf_r>
 8008412:	b002      	add	sp, #8
 8008414:	f85d eb04 	ldr.w	lr, [sp], #4
 8008418:	b003      	add	sp, #12
 800841a:	4770      	bx	lr
 800841c:	20000034 	.word	0x20000034

08008420 <memmove>:
 8008420:	4288      	cmp	r0, r1
 8008422:	b510      	push	{r4, lr}
 8008424:	eb01 0402 	add.w	r4, r1, r2
 8008428:	d902      	bls.n	8008430 <memmove+0x10>
 800842a:	4284      	cmp	r4, r0
 800842c:	4623      	mov	r3, r4
 800842e:	d807      	bhi.n	8008440 <memmove+0x20>
 8008430:	1e43      	subs	r3, r0, #1
 8008432:	42a1      	cmp	r1, r4
 8008434:	d008      	beq.n	8008448 <memmove+0x28>
 8008436:	f811 2b01 	ldrb.w	r2, [r1], #1
 800843a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800843e:	e7f8      	b.n	8008432 <memmove+0x12>
 8008440:	4601      	mov	r1, r0
 8008442:	4402      	add	r2, r0
 8008444:	428a      	cmp	r2, r1
 8008446:	d100      	bne.n	800844a <memmove+0x2a>
 8008448:	bd10      	pop	{r4, pc}
 800844a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800844e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008452:	e7f7      	b.n	8008444 <memmove+0x24>

08008454 <_sbrk_r>:
 8008454:	b538      	push	{r3, r4, r5, lr}
 8008456:	2300      	movs	r3, #0
 8008458:	4d05      	ldr	r5, [pc, #20]	@ (8008470 <_sbrk_r+0x1c>)
 800845a:	4604      	mov	r4, r0
 800845c:	4608      	mov	r0, r1
 800845e:	602b      	str	r3, [r5, #0]
 8008460:	f7fc fa7e 	bl	8004960 <_sbrk>
 8008464:	1c43      	adds	r3, r0, #1
 8008466:	d102      	bne.n	800846e <_sbrk_r+0x1a>
 8008468:	682b      	ldr	r3, [r5, #0]
 800846a:	b103      	cbz	r3, 800846e <_sbrk_r+0x1a>
 800846c:	6023      	str	r3, [r4, #0]
 800846e:	bd38      	pop	{r3, r4, r5, pc}
 8008470:	200040cc 	.word	0x200040cc

08008474 <memchr>:
 8008474:	4603      	mov	r3, r0
 8008476:	b510      	push	{r4, lr}
 8008478:	b2c9      	uxtb	r1, r1
 800847a:	4402      	add	r2, r0
 800847c:	4293      	cmp	r3, r2
 800847e:	4618      	mov	r0, r3
 8008480:	d101      	bne.n	8008486 <memchr+0x12>
 8008482:	2000      	movs	r0, #0
 8008484:	e003      	b.n	800848e <memchr+0x1a>
 8008486:	7804      	ldrb	r4, [r0, #0]
 8008488:	3301      	adds	r3, #1
 800848a:	428c      	cmp	r4, r1
 800848c:	d1f6      	bne.n	800847c <memchr+0x8>
 800848e:	bd10      	pop	{r4, pc}

08008490 <abort>:
 8008490:	2006      	movs	r0, #6
 8008492:	b508      	push	{r3, lr}
 8008494:	f000 fa2c 	bl	80088f0 <raise>
 8008498:	2001      	movs	r0, #1
 800849a:	f7fc f9ec 	bl	8004876 <_exit>

0800849e <_realloc_r>:
 800849e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084a2:	4607      	mov	r7, r0
 80084a4:	4614      	mov	r4, r2
 80084a6:	460d      	mov	r5, r1
 80084a8:	b921      	cbnz	r1, 80084b4 <_realloc_r+0x16>
 80084aa:	4611      	mov	r1, r2
 80084ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80084b0:	f7ff bb88 	b.w	8007bc4 <_malloc_r>
 80084b4:	b92a      	cbnz	r2, 80084c2 <_realloc_r+0x24>
 80084b6:	f7ff fb13 	bl	8007ae0 <_free_r>
 80084ba:	4625      	mov	r5, r4
 80084bc:	4628      	mov	r0, r5
 80084be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084c2:	f000 fa31 	bl	8008928 <_malloc_usable_size_r>
 80084c6:	4284      	cmp	r4, r0
 80084c8:	4606      	mov	r6, r0
 80084ca:	d802      	bhi.n	80084d2 <_realloc_r+0x34>
 80084cc:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80084d0:	d8f4      	bhi.n	80084bc <_realloc_r+0x1e>
 80084d2:	4621      	mov	r1, r4
 80084d4:	4638      	mov	r0, r7
 80084d6:	f7ff fb75 	bl	8007bc4 <_malloc_r>
 80084da:	4680      	mov	r8, r0
 80084dc:	b908      	cbnz	r0, 80084e2 <_realloc_r+0x44>
 80084de:	4645      	mov	r5, r8
 80084e0:	e7ec      	b.n	80084bc <_realloc_r+0x1e>
 80084e2:	42b4      	cmp	r4, r6
 80084e4:	4622      	mov	r2, r4
 80084e6:	4629      	mov	r1, r5
 80084e8:	bf28      	it	cs
 80084ea:	4632      	movcs	r2, r6
 80084ec:	f7ff facb 	bl	8007a86 <memcpy>
 80084f0:	4629      	mov	r1, r5
 80084f2:	4638      	mov	r0, r7
 80084f4:	f7ff faf4 	bl	8007ae0 <_free_r>
 80084f8:	e7f1      	b.n	80084de <_realloc_r+0x40>

080084fa <__sfputc_r>:
 80084fa:	6893      	ldr	r3, [r2, #8]
 80084fc:	b410      	push	{r4}
 80084fe:	3b01      	subs	r3, #1
 8008500:	2b00      	cmp	r3, #0
 8008502:	6093      	str	r3, [r2, #8]
 8008504:	da07      	bge.n	8008516 <__sfputc_r+0x1c>
 8008506:	6994      	ldr	r4, [r2, #24]
 8008508:	42a3      	cmp	r3, r4
 800850a:	db01      	blt.n	8008510 <__sfputc_r+0x16>
 800850c:	290a      	cmp	r1, #10
 800850e:	d102      	bne.n	8008516 <__sfputc_r+0x1c>
 8008510:	bc10      	pop	{r4}
 8008512:	f000 b931 	b.w	8008778 <__swbuf_r>
 8008516:	6813      	ldr	r3, [r2, #0]
 8008518:	1c58      	adds	r0, r3, #1
 800851a:	6010      	str	r0, [r2, #0]
 800851c:	7019      	strb	r1, [r3, #0]
 800851e:	4608      	mov	r0, r1
 8008520:	bc10      	pop	{r4}
 8008522:	4770      	bx	lr

08008524 <__sfputs_r>:
 8008524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008526:	4606      	mov	r6, r0
 8008528:	460f      	mov	r7, r1
 800852a:	4614      	mov	r4, r2
 800852c:	18d5      	adds	r5, r2, r3
 800852e:	42ac      	cmp	r4, r5
 8008530:	d101      	bne.n	8008536 <__sfputs_r+0x12>
 8008532:	2000      	movs	r0, #0
 8008534:	e007      	b.n	8008546 <__sfputs_r+0x22>
 8008536:	463a      	mov	r2, r7
 8008538:	4630      	mov	r0, r6
 800853a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800853e:	f7ff ffdc 	bl	80084fa <__sfputc_r>
 8008542:	1c43      	adds	r3, r0, #1
 8008544:	d1f3      	bne.n	800852e <__sfputs_r+0xa>
 8008546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008548 <_vfiprintf_r>:
 8008548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800854c:	460d      	mov	r5, r1
 800854e:	4614      	mov	r4, r2
 8008550:	4698      	mov	r8, r3
 8008552:	4606      	mov	r6, r0
 8008554:	b09d      	sub	sp, #116	@ 0x74
 8008556:	b118      	cbz	r0, 8008560 <_vfiprintf_r+0x18>
 8008558:	6a03      	ldr	r3, [r0, #32]
 800855a:	b90b      	cbnz	r3, 8008560 <_vfiprintf_r+0x18>
 800855c:	f7ff f96a 	bl	8007834 <__sinit>
 8008560:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008562:	07d9      	lsls	r1, r3, #31
 8008564:	d405      	bmi.n	8008572 <_vfiprintf_r+0x2a>
 8008566:	89ab      	ldrh	r3, [r5, #12]
 8008568:	059a      	lsls	r2, r3, #22
 800856a:	d402      	bmi.n	8008572 <_vfiprintf_r+0x2a>
 800856c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800856e:	f7ff fa88 	bl	8007a82 <__retarget_lock_acquire_recursive>
 8008572:	89ab      	ldrh	r3, [r5, #12]
 8008574:	071b      	lsls	r3, r3, #28
 8008576:	d501      	bpl.n	800857c <_vfiprintf_r+0x34>
 8008578:	692b      	ldr	r3, [r5, #16]
 800857a:	b99b      	cbnz	r3, 80085a4 <_vfiprintf_r+0x5c>
 800857c:	4629      	mov	r1, r5
 800857e:	4630      	mov	r0, r6
 8008580:	f000 f938 	bl	80087f4 <__swsetup_r>
 8008584:	b170      	cbz	r0, 80085a4 <_vfiprintf_r+0x5c>
 8008586:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008588:	07dc      	lsls	r4, r3, #31
 800858a:	d504      	bpl.n	8008596 <_vfiprintf_r+0x4e>
 800858c:	f04f 30ff 	mov.w	r0, #4294967295
 8008590:	b01d      	add	sp, #116	@ 0x74
 8008592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008596:	89ab      	ldrh	r3, [r5, #12]
 8008598:	0598      	lsls	r0, r3, #22
 800859a:	d4f7      	bmi.n	800858c <_vfiprintf_r+0x44>
 800859c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800859e:	f7ff fa71 	bl	8007a84 <__retarget_lock_release_recursive>
 80085a2:	e7f3      	b.n	800858c <_vfiprintf_r+0x44>
 80085a4:	2300      	movs	r3, #0
 80085a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80085a8:	2320      	movs	r3, #32
 80085aa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80085ae:	2330      	movs	r3, #48	@ 0x30
 80085b0:	f04f 0901 	mov.w	r9, #1
 80085b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80085b8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008764 <_vfiprintf_r+0x21c>
 80085bc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80085c0:	4623      	mov	r3, r4
 80085c2:	469a      	mov	sl, r3
 80085c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085c8:	b10a      	cbz	r2, 80085ce <_vfiprintf_r+0x86>
 80085ca:	2a25      	cmp	r2, #37	@ 0x25
 80085cc:	d1f9      	bne.n	80085c2 <_vfiprintf_r+0x7a>
 80085ce:	ebba 0b04 	subs.w	fp, sl, r4
 80085d2:	d00b      	beq.n	80085ec <_vfiprintf_r+0xa4>
 80085d4:	465b      	mov	r3, fp
 80085d6:	4622      	mov	r2, r4
 80085d8:	4629      	mov	r1, r5
 80085da:	4630      	mov	r0, r6
 80085dc:	f7ff ffa2 	bl	8008524 <__sfputs_r>
 80085e0:	3001      	adds	r0, #1
 80085e2:	f000 80a7 	beq.w	8008734 <_vfiprintf_r+0x1ec>
 80085e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80085e8:	445a      	add	r2, fp
 80085ea:	9209      	str	r2, [sp, #36]	@ 0x24
 80085ec:	f89a 3000 	ldrb.w	r3, [sl]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	f000 809f 	beq.w	8008734 <_vfiprintf_r+0x1ec>
 80085f6:	2300      	movs	r3, #0
 80085f8:	f04f 32ff 	mov.w	r2, #4294967295
 80085fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008600:	f10a 0a01 	add.w	sl, sl, #1
 8008604:	9304      	str	r3, [sp, #16]
 8008606:	9307      	str	r3, [sp, #28]
 8008608:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800860c:	931a      	str	r3, [sp, #104]	@ 0x68
 800860e:	4654      	mov	r4, sl
 8008610:	2205      	movs	r2, #5
 8008612:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008616:	4853      	ldr	r0, [pc, #332]	@ (8008764 <_vfiprintf_r+0x21c>)
 8008618:	f7ff ff2c 	bl	8008474 <memchr>
 800861c:	9a04      	ldr	r2, [sp, #16]
 800861e:	b9d8      	cbnz	r0, 8008658 <_vfiprintf_r+0x110>
 8008620:	06d1      	lsls	r1, r2, #27
 8008622:	bf44      	itt	mi
 8008624:	2320      	movmi	r3, #32
 8008626:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800862a:	0713      	lsls	r3, r2, #28
 800862c:	bf44      	itt	mi
 800862e:	232b      	movmi	r3, #43	@ 0x2b
 8008630:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008634:	f89a 3000 	ldrb.w	r3, [sl]
 8008638:	2b2a      	cmp	r3, #42	@ 0x2a
 800863a:	d015      	beq.n	8008668 <_vfiprintf_r+0x120>
 800863c:	4654      	mov	r4, sl
 800863e:	2000      	movs	r0, #0
 8008640:	f04f 0c0a 	mov.w	ip, #10
 8008644:	9a07      	ldr	r2, [sp, #28]
 8008646:	4621      	mov	r1, r4
 8008648:	f811 3b01 	ldrb.w	r3, [r1], #1
 800864c:	3b30      	subs	r3, #48	@ 0x30
 800864e:	2b09      	cmp	r3, #9
 8008650:	d94b      	bls.n	80086ea <_vfiprintf_r+0x1a2>
 8008652:	b1b0      	cbz	r0, 8008682 <_vfiprintf_r+0x13a>
 8008654:	9207      	str	r2, [sp, #28]
 8008656:	e014      	b.n	8008682 <_vfiprintf_r+0x13a>
 8008658:	eba0 0308 	sub.w	r3, r0, r8
 800865c:	fa09 f303 	lsl.w	r3, r9, r3
 8008660:	4313      	orrs	r3, r2
 8008662:	46a2      	mov	sl, r4
 8008664:	9304      	str	r3, [sp, #16]
 8008666:	e7d2      	b.n	800860e <_vfiprintf_r+0xc6>
 8008668:	9b03      	ldr	r3, [sp, #12]
 800866a:	1d19      	adds	r1, r3, #4
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	9103      	str	r1, [sp, #12]
 8008670:	2b00      	cmp	r3, #0
 8008672:	bfbb      	ittet	lt
 8008674:	425b      	neglt	r3, r3
 8008676:	f042 0202 	orrlt.w	r2, r2, #2
 800867a:	9307      	strge	r3, [sp, #28]
 800867c:	9307      	strlt	r3, [sp, #28]
 800867e:	bfb8      	it	lt
 8008680:	9204      	strlt	r2, [sp, #16]
 8008682:	7823      	ldrb	r3, [r4, #0]
 8008684:	2b2e      	cmp	r3, #46	@ 0x2e
 8008686:	d10a      	bne.n	800869e <_vfiprintf_r+0x156>
 8008688:	7863      	ldrb	r3, [r4, #1]
 800868a:	2b2a      	cmp	r3, #42	@ 0x2a
 800868c:	d132      	bne.n	80086f4 <_vfiprintf_r+0x1ac>
 800868e:	9b03      	ldr	r3, [sp, #12]
 8008690:	3402      	adds	r4, #2
 8008692:	1d1a      	adds	r2, r3, #4
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	9203      	str	r2, [sp, #12]
 8008698:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800869c:	9305      	str	r3, [sp, #20]
 800869e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008768 <_vfiprintf_r+0x220>
 80086a2:	2203      	movs	r2, #3
 80086a4:	4650      	mov	r0, sl
 80086a6:	7821      	ldrb	r1, [r4, #0]
 80086a8:	f7ff fee4 	bl	8008474 <memchr>
 80086ac:	b138      	cbz	r0, 80086be <_vfiprintf_r+0x176>
 80086ae:	2240      	movs	r2, #64	@ 0x40
 80086b0:	9b04      	ldr	r3, [sp, #16]
 80086b2:	eba0 000a 	sub.w	r0, r0, sl
 80086b6:	4082      	lsls	r2, r0
 80086b8:	4313      	orrs	r3, r2
 80086ba:	3401      	adds	r4, #1
 80086bc:	9304      	str	r3, [sp, #16]
 80086be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086c2:	2206      	movs	r2, #6
 80086c4:	4829      	ldr	r0, [pc, #164]	@ (800876c <_vfiprintf_r+0x224>)
 80086c6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80086ca:	f7ff fed3 	bl	8008474 <memchr>
 80086ce:	2800      	cmp	r0, #0
 80086d0:	d03f      	beq.n	8008752 <_vfiprintf_r+0x20a>
 80086d2:	4b27      	ldr	r3, [pc, #156]	@ (8008770 <_vfiprintf_r+0x228>)
 80086d4:	bb1b      	cbnz	r3, 800871e <_vfiprintf_r+0x1d6>
 80086d6:	9b03      	ldr	r3, [sp, #12]
 80086d8:	3307      	adds	r3, #7
 80086da:	f023 0307 	bic.w	r3, r3, #7
 80086de:	3308      	adds	r3, #8
 80086e0:	9303      	str	r3, [sp, #12]
 80086e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086e4:	443b      	add	r3, r7
 80086e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80086e8:	e76a      	b.n	80085c0 <_vfiprintf_r+0x78>
 80086ea:	460c      	mov	r4, r1
 80086ec:	2001      	movs	r0, #1
 80086ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80086f2:	e7a8      	b.n	8008646 <_vfiprintf_r+0xfe>
 80086f4:	2300      	movs	r3, #0
 80086f6:	f04f 0c0a 	mov.w	ip, #10
 80086fa:	4619      	mov	r1, r3
 80086fc:	3401      	adds	r4, #1
 80086fe:	9305      	str	r3, [sp, #20]
 8008700:	4620      	mov	r0, r4
 8008702:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008706:	3a30      	subs	r2, #48	@ 0x30
 8008708:	2a09      	cmp	r2, #9
 800870a:	d903      	bls.n	8008714 <_vfiprintf_r+0x1cc>
 800870c:	2b00      	cmp	r3, #0
 800870e:	d0c6      	beq.n	800869e <_vfiprintf_r+0x156>
 8008710:	9105      	str	r1, [sp, #20]
 8008712:	e7c4      	b.n	800869e <_vfiprintf_r+0x156>
 8008714:	4604      	mov	r4, r0
 8008716:	2301      	movs	r3, #1
 8008718:	fb0c 2101 	mla	r1, ip, r1, r2
 800871c:	e7f0      	b.n	8008700 <_vfiprintf_r+0x1b8>
 800871e:	ab03      	add	r3, sp, #12
 8008720:	9300      	str	r3, [sp, #0]
 8008722:	462a      	mov	r2, r5
 8008724:	4630      	mov	r0, r6
 8008726:	4b13      	ldr	r3, [pc, #76]	@ (8008774 <_vfiprintf_r+0x22c>)
 8008728:	a904      	add	r1, sp, #16
 800872a:	f3af 8000 	nop.w
 800872e:	4607      	mov	r7, r0
 8008730:	1c78      	adds	r0, r7, #1
 8008732:	d1d6      	bne.n	80086e2 <_vfiprintf_r+0x19a>
 8008734:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008736:	07d9      	lsls	r1, r3, #31
 8008738:	d405      	bmi.n	8008746 <_vfiprintf_r+0x1fe>
 800873a:	89ab      	ldrh	r3, [r5, #12]
 800873c:	059a      	lsls	r2, r3, #22
 800873e:	d402      	bmi.n	8008746 <_vfiprintf_r+0x1fe>
 8008740:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008742:	f7ff f99f 	bl	8007a84 <__retarget_lock_release_recursive>
 8008746:	89ab      	ldrh	r3, [r5, #12]
 8008748:	065b      	lsls	r3, r3, #25
 800874a:	f53f af1f 	bmi.w	800858c <_vfiprintf_r+0x44>
 800874e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008750:	e71e      	b.n	8008590 <_vfiprintf_r+0x48>
 8008752:	ab03      	add	r3, sp, #12
 8008754:	9300      	str	r3, [sp, #0]
 8008756:	462a      	mov	r2, r5
 8008758:	4630      	mov	r0, r6
 800875a:	4b06      	ldr	r3, [pc, #24]	@ (8008774 <_vfiprintf_r+0x22c>)
 800875c:	a904      	add	r1, sp, #16
 800875e:	f7ff fc87 	bl	8008070 <_printf_i>
 8008762:	e7e4      	b.n	800872e <_vfiprintf_r+0x1e6>
 8008764:	0800a3e9 	.word	0x0800a3e9
 8008768:	0800a3ef 	.word	0x0800a3ef
 800876c:	0800a3f3 	.word	0x0800a3f3
 8008770:	00000000 	.word	0x00000000
 8008774:	08008525 	.word	0x08008525

08008778 <__swbuf_r>:
 8008778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800877a:	460e      	mov	r6, r1
 800877c:	4614      	mov	r4, r2
 800877e:	4605      	mov	r5, r0
 8008780:	b118      	cbz	r0, 800878a <__swbuf_r+0x12>
 8008782:	6a03      	ldr	r3, [r0, #32]
 8008784:	b90b      	cbnz	r3, 800878a <__swbuf_r+0x12>
 8008786:	f7ff f855 	bl	8007834 <__sinit>
 800878a:	69a3      	ldr	r3, [r4, #24]
 800878c:	60a3      	str	r3, [r4, #8]
 800878e:	89a3      	ldrh	r3, [r4, #12]
 8008790:	071a      	lsls	r2, r3, #28
 8008792:	d501      	bpl.n	8008798 <__swbuf_r+0x20>
 8008794:	6923      	ldr	r3, [r4, #16]
 8008796:	b943      	cbnz	r3, 80087aa <__swbuf_r+0x32>
 8008798:	4621      	mov	r1, r4
 800879a:	4628      	mov	r0, r5
 800879c:	f000 f82a 	bl	80087f4 <__swsetup_r>
 80087a0:	b118      	cbz	r0, 80087aa <__swbuf_r+0x32>
 80087a2:	f04f 37ff 	mov.w	r7, #4294967295
 80087a6:	4638      	mov	r0, r7
 80087a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087aa:	6823      	ldr	r3, [r4, #0]
 80087ac:	6922      	ldr	r2, [r4, #16]
 80087ae:	b2f6      	uxtb	r6, r6
 80087b0:	1a98      	subs	r0, r3, r2
 80087b2:	6963      	ldr	r3, [r4, #20]
 80087b4:	4637      	mov	r7, r6
 80087b6:	4283      	cmp	r3, r0
 80087b8:	dc05      	bgt.n	80087c6 <__swbuf_r+0x4e>
 80087ba:	4621      	mov	r1, r4
 80087bc:	4628      	mov	r0, r5
 80087be:	f7ff fdf5 	bl	80083ac <_fflush_r>
 80087c2:	2800      	cmp	r0, #0
 80087c4:	d1ed      	bne.n	80087a2 <__swbuf_r+0x2a>
 80087c6:	68a3      	ldr	r3, [r4, #8]
 80087c8:	3b01      	subs	r3, #1
 80087ca:	60a3      	str	r3, [r4, #8]
 80087cc:	6823      	ldr	r3, [r4, #0]
 80087ce:	1c5a      	adds	r2, r3, #1
 80087d0:	6022      	str	r2, [r4, #0]
 80087d2:	701e      	strb	r6, [r3, #0]
 80087d4:	6962      	ldr	r2, [r4, #20]
 80087d6:	1c43      	adds	r3, r0, #1
 80087d8:	429a      	cmp	r2, r3
 80087da:	d004      	beq.n	80087e6 <__swbuf_r+0x6e>
 80087dc:	89a3      	ldrh	r3, [r4, #12]
 80087de:	07db      	lsls	r3, r3, #31
 80087e0:	d5e1      	bpl.n	80087a6 <__swbuf_r+0x2e>
 80087e2:	2e0a      	cmp	r6, #10
 80087e4:	d1df      	bne.n	80087a6 <__swbuf_r+0x2e>
 80087e6:	4621      	mov	r1, r4
 80087e8:	4628      	mov	r0, r5
 80087ea:	f7ff fddf 	bl	80083ac <_fflush_r>
 80087ee:	2800      	cmp	r0, #0
 80087f0:	d0d9      	beq.n	80087a6 <__swbuf_r+0x2e>
 80087f2:	e7d6      	b.n	80087a2 <__swbuf_r+0x2a>

080087f4 <__swsetup_r>:
 80087f4:	b538      	push	{r3, r4, r5, lr}
 80087f6:	4b29      	ldr	r3, [pc, #164]	@ (800889c <__swsetup_r+0xa8>)
 80087f8:	4605      	mov	r5, r0
 80087fa:	6818      	ldr	r0, [r3, #0]
 80087fc:	460c      	mov	r4, r1
 80087fe:	b118      	cbz	r0, 8008808 <__swsetup_r+0x14>
 8008800:	6a03      	ldr	r3, [r0, #32]
 8008802:	b90b      	cbnz	r3, 8008808 <__swsetup_r+0x14>
 8008804:	f7ff f816 	bl	8007834 <__sinit>
 8008808:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800880c:	0719      	lsls	r1, r3, #28
 800880e:	d422      	bmi.n	8008856 <__swsetup_r+0x62>
 8008810:	06da      	lsls	r2, r3, #27
 8008812:	d407      	bmi.n	8008824 <__swsetup_r+0x30>
 8008814:	2209      	movs	r2, #9
 8008816:	602a      	str	r2, [r5, #0]
 8008818:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800881c:	f04f 30ff 	mov.w	r0, #4294967295
 8008820:	81a3      	strh	r3, [r4, #12]
 8008822:	e033      	b.n	800888c <__swsetup_r+0x98>
 8008824:	0758      	lsls	r0, r3, #29
 8008826:	d512      	bpl.n	800884e <__swsetup_r+0x5a>
 8008828:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800882a:	b141      	cbz	r1, 800883e <__swsetup_r+0x4a>
 800882c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008830:	4299      	cmp	r1, r3
 8008832:	d002      	beq.n	800883a <__swsetup_r+0x46>
 8008834:	4628      	mov	r0, r5
 8008836:	f7ff f953 	bl	8007ae0 <_free_r>
 800883a:	2300      	movs	r3, #0
 800883c:	6363      	str	r3, [r4, #52]	@ 0x34
 800883e:	89a3      	ldrh	r3, [r4, #12]
 8008840:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008844:	81a3      	strh	r3, [r4, #12]
 8008846:	2300      	movs	r3, #0
 8008848:	6063      	str	r3, [r4, #4]
 800884a:	6923      	ldr	r3, [r4, #16]
 800884c:	6023      	str	r3, [r4, #0]
 800884e:	89a3      	ldrh	r3, [r4, #12]
 8008850:	f043 0308 	orr.w	r3, r3, #8
 8008854:	81a3      	strh	r3, [r4, #12]
 8008856:	6923      	ldr	r3, [r4, #16]
 8008858:	b94b      	cbnz	r3, 800886e <__swsetup_r+0x7a>
 800885a:	89a3      	ldrh	r3, [r4, #12]
 800885c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008860:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008864:	d003      	beq.n	800886e <__swsetup_r+0x7a>
 8008866:	4621      	mov	r1, r4
 8008868:	4628      	mov	r0, r5
 800886a:	f000 f88a 	bl	8008982 <__smakebuf_r>
 800886e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008872:	f013 0201 	ands.w	r2, r3, #1
 8008876:	d00a      	beq.n	800888e <__swsetup_r+0x9a>
 8008878:	2200      	movs	r2, #0
 800887a:	60a2      	str	r2, [r4, #8]
 800887c:	6962      	ldr	r2, [r4, #20]
 800887e:	4252      	negs	r2, r2
 8008880:	61a2      	str	r2, [r4, #24]
 8008882:	6922      	ldr	r2, [r4, #16]
 8008884:	b942      	cbnz	r2, 8008898 <__swsetup_r+0xa4>
 8008886:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800888a:	d1c5      	bne.n	8008818 <__swsetup_r+0x24>
 800888c:	bd38      	pop	{r3, r4, r5, pc}
 800888e:	0799      	lsls	r1, r3, #30
 8008890:	bf58      	it	pl
 8008892:	6962      	ldrpl	r2, [r4, #20]
 8008894:	60a2      	str	r2, [r4, #8]
 8008896:	e7f4      	b.n	8008882 <__swsetup_r+0x8e>
 8008898:	2000      	movs	r0, #0
 800889a:	e7f7      	b.n	800888c <__swsetup_r+0x98>
 800889c:	20000034 	.word	0x20000034

080088a0 <_raise_r>:
 80088a0:	291f      	cmp	r1, #31
 80088a2:	b538      	push	{r3, r4, r5, lr}
 80088a4:	4605      	mov	r5, r0
 80088a6:	460c      	mov	r4, r1
 80088a8:	d904      	bls.n	80088b4 <_raise_r+0x14>
 80088aa:	2316      	movs	r3, #22
 80088ac:	6003      	str	r3, [r0, #0]
 80088ae:	f04f 30ff 	mov.w	r0, #4294967295
 80088b2:	bd38      	pop	{r3, r4, r5, pc}
 80088b4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80088b6:	b112      	cbz	r2, 80088be <_raise_r+0x1e>
 80088b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80088bc:	b94b      	cbnz	r3, 80088d2 <_raise_r+0x32>
 80088be:	4628      	mov	r0, r5
 80088c0:	f000 f830 	bl	8008924 <_getpid_r>
 80088c4:	4622      	mov	r2, r4
 80088c6:	4601      	mov	r1, r0
 80088c8:	4628      	mov	r0, r5
 80088ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088ce:	f000 b817 	b.w	8008900 <_kill_r>
 80088d2:	2b01      	cmp	r3, #1
 80088d4:	d00a      	beq.n	80088ec <_raise_r+0x4c>
 80088d6:	1c59      	adds	r1, r3, #1
 80088d8:	d103      	bne.n	80088e2 <_raise_r+0x42>
 80088da:	2316      	movs	r3, #22
 80088dc:	6003      	str	r3, [r0, #0]
 80088de:	2001      	movs	r0, #1
 80088e0:	e7e7      	b.n	80088b2 <_raise_r+0x12>
 80088e2:	2100      	movs	r1, #0
 80088e4:	4620      	mov	r0, r4
 80088e6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80088ea:	4798      	blx	r3
 80088ec:	2000      	movs	r0, #0
 80088ee:	e7e0      	b.n	80088b2 <_raise_r+0x12>

080088f0 <raise>:
 80088f0:	4b02      	ldr	r3, [pc, #8]	@ (80088fc <raise+0xc>)
 80088f2:	4601      	mov	r1, r0
 80088f4:	6818      	ldr	r0, [r3, #0]
 80088f6:	f7ff bfd3 	b.w	80088a0 <_raise_r>
 80088fa:	bf00      	nop
 80088fc:	20000034 	.word	0x20000034

08008900 <_kill_r>:
 8008900:	b538      	push	{r3, r4, r5, lr}
 8008902:	2300      	movs	r3, #0
 8008904:	4d06      	ldr	r5, [pc, #24]	@ (8008920 <_kill_r+0x20>)
 8008906:	4604      	mov	r4, r0
 8008908:	4608      	mov	r0, r1
 800890a:	4611      	mov	r1, r2
 800890c:	602b      	str	r3, [r5, #0]
 800890e:	f7fb ffa2 	bl	8004856 <_kill>
 8008912:	1c43      	adds	r3, r0, #1
 8008914:	d102      	bne.n	800891c <_kill_r+0x1c>
 8008916:	682b      	ldr	r3, [r5, #0]
 8008918:	b103      	cbz	r3, 800891c <_kill_r+0x1c>
 800891a:	6023      	str	r3, [r4, #0]
 800891c:	bd38      	pop	{r3, r4, r5, pc}
 800891e:	bf00      	nop
 8008920:	200040cc 	.word	0x200040cc

08008924 <_getpid_r>:
 8008924:	f7fb bf90 	b.w	8004848 <_getpid>

08008928 <_malloc_usable_size_r>:
 8008928:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800892c:	1f18      	subs	r0, r3, #4
 800892e:	2b00      	cmp	r3, #0
 8008930:	bfbc      	itt	lt
 8008932:	580b      	ldrlt	r3, [r1, r0]
 8008934:	18c0      	addlt	r0, r0, r3
 8008936:	4770      	bx	lr

08008938 <__swhatbuf_r>:
 8008938:	b570      	push	{r4, r5, r6, lr}
 800893a:	460c      	mov	r4, r1
 800893c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008940:	4615      	mov	r5, r2
 8008942:	2900      	cmp	r1, #0
 8008944:	461e      	mov	r6, r3
 8008946:	b096      	sub	sp, #88	@ 0x58
 8008948:	da0c      	bge.n	8008964 <__swhatbuf_r+0x2c>
 800894a:	89a3      	ldrh	r3, [r4, #12]
 800894c:	2100      	movs	r1, #0
 800894e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008952:	bf14      	ite	ne
 8008954:	2340      	movne	r3, #64	@ 0x40
 8008956:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800895a:	2000      	movs	r0, #0
 800895c:	6031      	str	r1, [r6, #0]
 800895e:	602b      	str	r3, [r5, #0]
 8008960:	b016      	add	sp, #88	@ 0x58
 8008962:	bd70      	pop	{r4, r5, r6, pc}
 8008964:	466a      	mov	r2, sp
 8008966:	f000 f849 	bl	80089fc <_fstat_r>
 800896a:	2800      	cmp	r0, #0
 800896c:	dbed      	blt.n	800894a <__swhatbuf_r+0x12>
 800896e:	9901      	ldr	r1, [sp, #4]
 8008970:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008974:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008978:	4259      	negs	r1, r3
 800897a:	4159      	adcs	r1, r3
 800897c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008980:	e7eb      	b.n	800895a <__swhatbuf_r+0x22>

08008982 <__smakebuf_r>:
 8008982:	898b      	ldrh	r3, [r1, #12]
 8008984:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008986:	079d      	lsls	r5, r3, #30
 8008988:	4606      	mov	r6, r0
 800898a:	460c      	mov	r4, r1
 800898c:	d507      	bpl.n	800899e <__smakebuf_r+0x1c>
 800898e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008992:	6023      	str	r3, [r4, #0]
 8008994:	6123      	str	r3, [r4, #16]
 8008996:	2301      	movs	r3, #1
 8008998:	6163      	str	r3, [r4, #20]
 800899a:	b003      	add	sp, #12
 800899c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800899e:	466a      	mov	r2, sp
 80089a0:	ab01      	add	r3, sp, #4
 80089a2:	f7ff ffc9 	bl	8008938 <__swhatbuf_r>
 80089a6:	9f00      	ldr	r7, [sp, #0]
 80089a8:	4605      	mov	r5, r0
 80089aa:	4639      	mov	r1, r7
 80089ac:	4630      	mov	r0, r6
 80089ae:	f7ff f909 	bl	8007bc4 <_malloc_r>
 80089b2:	b948      	cbnz	r0, 80089c8 <__smakebuf_r+0x46>
 80089b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089b8:	059a      	lsls	r2, r3, #22
 80089ba:	d4ee      	bmi.n	800899a <__smakebuf_r+0x18>
 80089bc:	f023 0303 	bic.w	r3, r3, #3
 80089c0:	f043 0302 	orr.w	r3, r3, #2
 80089c4:	81a3      	strh	r3, [r4, #12]
 80089c6:	e7e2      	b.n	800898e <__smakebuf_r+0xc>
 80089c8:	89a3      	ldrh	r3, [r4, #12]
 80089ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80089ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089d2:	81a3      	strh	r3, [r4, #12]
 80089d4:	9b01      	ldr	r3, [sp, #4]
 80089d6:	6020      	str	r0, [r4, #0]
 80089d8:	b15b      	cbz	r3, 80089f2 <__smakebuf_r+0x70>
 80089da:	4630      	mov	r0, r6
 80089dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089e0:	f000 f81e 	bl	8008a20 <_isatty_r>
 80089e4:	b128      	cbz	r0, 80089f2 <__smakebuf_r+0x70>
 80089e6:	89a3      	ldrh	r3, [r4, #12]
 80089e8:	f023 0303 	bic.w	r3, r3, #3
 80089ec:	f043 0301 	orr.w	r3, r3, #1
 80089f0:	81a3      	strh	r3, [r4, #12]
 80089f2:	89a3      	ldrh	r3, [r4, #12]
 80089f4:	431d      	orrs	r5, r3
 80089f6:	81a5      	strh	r5, [r4, #12]
 80089f8:	e7cf      	b.n	800899a <__smakebuf_r+0x18>
	...

080089fc <_fstat_r>:
 80089fc:	b538      	push	{r3, r4, r5, lr}
 80089fe:	2300      	movs	r3, #0
 8008a00:	4d06      	ldr	r5, [pc, #24]	@ (8008a1c <_fstat_r+0x20>)
 8008a02:	4604      	mov	r4, r0
 8008a04:	4608      	mov	r0, r1
 8008a06:	4611      	mov	r1, r2
 8008a08:	602b      	str	r3, [r5, #0]
 8008a0a:	f7fb ff83 	bl	8004914 <_fstat>
 8008a0e:	1c43      	adds	r3, r0, #1
 8008a10:	d102      	bne.n	8008a18 <_fstat_r+0x1c>
 8008a12:	682b      	ldr	r3, [r5, #0]
 8008a14:	b103      	cbz	r3, 8008a18 <_fstat_r+0x1c>
 8008a16:	6023      	str	r3, [r4, #0]
 8008a18:	bd38      	pop	{r3, r4, r5, pc}
 8008a1a:	bf00      	nop
 8008a1c:	200040cc 	.word	0x200040cc

08008a20 <_isatty_r>:
 8008a20:	b538      	push	{r3, r4, r5, lr}
 8008a22:	2300      	movs	r3, #0
 8008a24:	4d05      	ldr	r5, [pc, #20]	@ (8008a3c <_isatty_r+0x1c>)
 8008a26:	4604      	mov	r4, r0
 8008a28:	4608      	mov	r0, r1
 8008a2a:	602b      	str	r3, [r5, #0]
 8008a2c:	f7fb ff81 	bl	8004932 <_isatty>
 8008a30:	1c43      	adds	r3, r0, #1
 8008a32:	d102      	bne.n	8008a3a <_isatty_r+0x1a>
 8008a34:	682b      	ldr	r3, [r5, #0]
 8008a36:	b103      	cbz	r3, 8008a3a <_isatty_r+0x1a>
 8008a38:	6023      	str	r3, [r4, #0]
 8008a3a:	bd38      	pop	{r3, r4, r5, pc}
 8008a3c:	200040cc 	.word	0x200040cc

08008a40 <powf>:
 8008a40:	b570      	push	{r4, r5, r6, lr}
 8008a42:	460c      	mov	r4, r1
 8008a44:	4606      	mov	r6, r0
 8008a46:	f000 fa43 	bl	8008ed0 <__ieee754_powf>
 8008a4a:	4621      	mov	r1, r4
 8008a4c:	4605      	mov	r5, r0
 8008a4e:	4620      	mov	r0, r4
 8008a50:	f7f7 fe62 	bl	8000718 <__aeabi_fcmpun>
 8008a54:	bb68      	cbnz	r0, 8008ab2 <powf+0x72>
 8008a56:	2100      	movs	r1, #0
 8008a58:	4630      	mov	r0, r6
 8008a5a:	f7f7 fe2b 	bl	80006b4 <__aeabi_fcmpeq>
 8008a5e:	b190      	cbz	r0, 8008a86 <powf+0x46>
 8008a60:	2100      	movs	r1, #0
 8008a62:	4620      	mov	r0, r4
 8008a64:	f7f7 fe26 	bl	80006b4 <__aeabi_fcmpeq>
 8008a68:	2800      	cmp	r0, #0
 8008a6a:	d133      	bne.n	8008ad4 <powf+0x94>
 8008a6c:	4620      	mov	r0, r4
 8008a6e:	f000 f8c1 	bl	8008bf4 <finitef>
 8008a72:	b1f0      	cbz	r0, 8008ab2 <powf+0x72>
 8008a74:	2100      	movs	r1, #0
 8008a76:	4620      	mov	r0, r4
 8008a78:	f7f7 fe26 	bl	80006c8 <__aeabi_fcmplt>
 8008a7c:	b1c8      	cbz	r0, 8008ab2 <powf+0x72>
 8008a7e:	f7fe ffd5 	bl	8007a2c <__errno>
 8008a82:	2322      	movs	r3, #34	@ 0x22
 8008a84:	e014      	b.n	8008ab0 <powf+0x70>
 8008a86:	4628      	mov	r0, r5
 8008a88:	f000 f8b4 	bl	8008bf4 <finitef>
 8008a8c:	b998      	cbnz	r0, 8008ab6 <powf+0x76>
 8008a8e:	4630      	mov	r0, r6
 8008a90:	f000 f8b0 	bl	8008bf4 <finitef>
 8008a94:	b178      	cbz	r0, 8008ab6 <powf+0x76>
 8008a96:	4620      	mov	r0, r4
 8008a98:	f000 f8ac 	bl	8008bf4 <finitef>
 8008a9c:	b158      	cbz	r0, 8008ab6 <powf+0x76>
 8008a9e:	4629      	mov	r1, r5
 8008aa0:	4628      	mov	r0, r5
 8008aa2:	f7f7 fe39 	bl	8000718 <__aeabi_fcmpun>
 8008aa6:	2800      	cmp	r0, #0
 8008aa8:	d0e9      	beq.n	8008a7e <powf+0x3e>
 8008aaa:	f7fe ffbf 	bl	8007a2c <__errno>
 8008aae:	2321      	movs	r3, #33	@ 0x21
 8008ab0:	6003      	str	r3, [r0, #0]
 8008ab2:	4628      	mov	r0, r5
 8008ab4:	bd70      	pop	{r4, r5, r6, pc}
 8008ab6:	2100      	movs	r1, #0
 8008ab8:	4628      	mov	r0, r5
 8008aba:	f7f7 fdfb 	bl	80006b4 <__aeabi_fcmpeq>
 8008abe:	2800      	cmp	r0, #0
 8008ac0:	d0f7      	beq.n	8008ab2 <powf+0x72>
 8008ac2:	4630      	mov	r0, r6
 8008ac4:	f000 f896 	bl	8008bf4 <finitef>
 8008ac8:	2800      	cmp	r0, #0
 8008aca:	d0f2      	beq.n	8008ab2 <powf+0x72>
 8008acc:	4620      	mov	r0, r4
 8008ace:	f000 f891 	bl	8008bf4 <finitef>
 8008ad2:	e7d3      	b.n	8008a7c <powf+0x3c>
 8008ad4:	f04f 557e 	mov.w	r5, #1065353216	@ 0x3f800000
 8008ad8:	e7eb      	b.n	8008ab2 <powf+0x72>

08008ada <sqrtf>:
 8008ada:	b538      	push	{r3, r4, r5, lr}
 8008adc:	4605      	mov	r5, r0
 8008ade:	f000 f891 	bl	8008c04 <__ieee754_sqrtf>
 8008ae2:	4629      	mov	r1, r5
 8008ae4:	4604      	mov	r4, r0
 8008ae6:	4628      	mov	r0, r5
 8008ae8:	f7f7 fe16 	bl	8000718 <__aeabi_fcmpun>
 8008aec:	b968      	cbnz	r0, 8008b0a <sqrtf+0x30>
 8008aee:	2100      	movs	r1, #0
 8008af0:	4628      	mov	r0, r5
 8008af2:	f7f7 fde9 	bl	80006c8 <__aeabi_fcmplt>
 8008af6:	b140      	cbz	r0, 8008b0a <sqrtf+0x30>
 8008af8:	f7fe ff98 	bl	8007a2c <__errno>
 8008afc:	2321      	movs	r3, #33	@ 0x21
 8008afe:	2100      	movs	r1, #0
 8008b00:	6003      	str	r3, [r0, #0]
 8008b02:	4608      	mov	r0, r1
 8008b04:	f7f7 fcf6 	bl	80004f4 <__aeabi_fdiv>
 8008b08:	4604      	mov	r4, r0
 8008b0a:	4620      	mov	r0, r4
 8008b0c:	bd38      	pop	{r3, r4, r5, pc}
	...

08008b10 <cosf>:
 8008b10:	b507      	push	{r0, r1, r2, lr}
 8008b12:	4a1a      	ldr	r2, [pc, #104]	@ (8008b7c <cosf+0x6c>)
 8008b14:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	4601      	mov	r1, r0
 8008b1c:	d805      	bhi.n	8008b2a <cosf+0x1a>
 8008b1e:	2100      	movs	r1, #0
 8008b20:	b003      	add	sp, #12
 8008b22:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b26:	f000 b8dd 	b.w	8008ce4 <__kernel_cosf>
 8008b2a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8008b2e:	d304      	bcc.n	8008b3a <cosf+0x2a>
 8008b30:	f7f7 fb22 	bl	8000178 <__aeabi_fsub>
 8008b34:	b003      	add	sp, #12
 8008b36:	f85d fb04 	ldr.w	pc, [sp], #4
 8008b3a:	4669      	mov	r1, sp
 8008b3c:	f000 fd28 	bl	8009590 <__ieee754_rem_pio2f>
 8008b40:	f000 0203 	and.w	r2, r0, #3
 8008b44:	2a01      	cmp	r2, #1
 8008b46:	d007      	beq.n	8008b58 <cosf+0x48>
 8008b48:	2a02      	cmp	r2, #2
 8008b4a:	d00c      	beq.n	8008b66 <cosf+0x56>
 8008b4c:	b982      	cbnz	r2, 8008b70 <cosf+0x60>
 8008b4e:	9901      	ldr	r1, [sp, #4]
 8008b50:	9800      	ldr	r0, [sp, #0]
 8008b52:	f000 f8c7 	bl	8008ce4 <__kernel_cosf>
 8008b56:	e7ed      	b.n	8008b34 <cosf+0x24>
 8008b58:	9901      	ldr	r1, [sp, #4]
 8008b5a:	9800      	ldr	r0, [sp, #0]
 8008b5c:	f000 f942 	bl	8008de4 <__kernel_sinf>
 8008b60:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8008b64:	e7e6      	b.n	8008b34 <cosf+0x24>
 8008b66:	9901      	ldr	r1, [sp, #4]
 8008b68:	9800      	ldr	r0, [sp, #0]
 8008b6a:	f000 f8bb 	bl	8008ce4 <__kernel_cosf>
 8008b6e:	e7f7      	b.n	8008b60 <cosf+0x50>
 8008b70:	2201      	movs	r2, #1
 8008b72:	9901      	ldr	r1, [sp, #4]
 8008b74:	9800      	ldr	r0, [sp, #0]
 8008b76:	f000 f935 	bl	8008de4 <__kernel_sinf>
 8008b7a:	e7db      	b.n	8008b34 <cosf+0x24>
 8008b7c:	3f490fd8 	.word	0x3f490fd8

08008b80 <sinf>:
 8008b80:	b507      	push	{r0, r1, r2, lr}
 8008b82:	4a1b      	ldr	r2, [pc, #108]	@ (8008bf0 <sinf+0x70>)
 8008b84:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	4601      	mov	r1, r0
 8008b8c:	d806      	bhi.n	8008b9c <sinf+0x1c>
 8008b8e:	2200      	movs	r2, #0
 8008b90:	2100      	movs	r1, #0
 8008b92:	b003      	add	sp, #12
 8008b94:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b98:	f000 b924 	b.w	8008de4 <__kernel_sinf>
 8008b9c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8008ba0:	d304      	bcc.n	8008bac <sinf+0x2c>
 8008ba2:	f7f7 fae9 	bl	8000178 <__aeabi_fsub>
 8008ba6:	b003      	add	sp, #12
 8008ba8:	f85d fb04 	ldr.w	pc, [sp], #4
 8008bac:	4669      	mov	r1, sp
 8008bae:	f000 fcef 	bl	8009590 <__ieee754_rem_pio2f>
 8008bb2:	f000 0003 	and.w	r0, r0, #3
 8008bb6:	2801      	cmp	r0, #1
 8008bb8:	d008      	beq.n	8008bcc <sinf+0x4c>
 8008bba:	2802      	cmp	r0, #2
 8008bbc:	d00b      	beq.n	8008bd6 <sinf+0x56>
 8008bbe:	b990      	cbnz	r0, 8008be6 <sinf+0x66>
 8008bc0:	2201      	movs	r2, #1
 8008bc2:	9901      	ldr	r1, [sp, #4]
 8008bc4:	9800      	ldr	r0, [sp, #0]
 8008bc6:	f000 f90d 	bl	8008de4 <__kernel_sinf>
 8008bca:	e7ec      	b.n	8008ba6 <sinf+0x26>
 8008bcc:	9901      	ldr	r1, [sp, #4]
 8008bce:	9800      	ldr	r0, [sp, #0]
 8008bd0:	f000 f888 	bl	8008ce4 <__kernel_cosf>
 8008bd4:	e7e7      	b.n	8008ba6 <sinf+0x26>
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	9901      	ldr	r1, [sp, #4]
 8008bda:	9800      	ldr	r0, [sp, #0]
 8008bdc:	f000 f902 	bl	8008de4 <__kernel_sinf>
 8008be0:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8008be4:	e7df      	b.n	8008ba6 <sinf+0x26>
 8008be6:	9901      	ldr	r1, [sp, #4]
 8008be8:	9800      	ldr	r0, [sp, #0]
 8008bea:	f000 f87b 	bl	8008ce4 <__kernel_cosf>
 8008bee:	e7f7      	b.n	8008be0 <sinf+0x60>
 8008bf0:	3f490fd8 	.word	0x3f490fd8

08008bf4 <finitef>:
 8008bf4:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8008bf8:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8008bfc:	bfac      	ite	ge
 8008bfe:	2000      	movge	r0, #0
 8008c00:	2001      	movlt	r0, #1
 8008c02:	4770      	bx	lr

08008c04 <__ieee754_sqrtf>:
 8008c04:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 8008c08:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8008c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c10:	4603      	mov	r3, r0
 8008c12:	4604      	mov	r4, r0
 8008c14:	d30a      	bcc.n	8008c2c <__ieee754_sqrtf+0x28>
 8008c16:	4601      	mov	r1, r0
 8008c18:	f7f7 fbb8 	bl	800038c <__aeabi_fmul>
 8008c1c:	4601      	mov	r1, r0
 8008c1e:	4620      	mov	r0, r4
 8008c20:	f7f7 faac 	bl	800017c <__addsf3>
 8008c24:	4604      	mov	r4, r0
 8008c26:	4620      	mov	r0, r4
 8008c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c2c:	2a00      	cmp	r2, #0
 8008c2e:	d0fa      	beq.n	8008c26 <__ieee754_sqrtf+0x22>
 8008c30:	2800      	cmp	r0, #0
 8008c32:	da06      	bge.n	8008c42 <__ieee754_sqrtf+0x3e>
 8008c34:	4601      	mov	r1, r0
 8008c36:	f7f7 fa9f 	bl	8000178 <__aeabi_fsub>
 8008c3a:	4601      	mov	r1, r0
 8008c3c:	f7f7 fc5a 	bl	80004f4 <__aeabi_fdiv>
 8008c40:	e7f0      	b.n	8008c24 <__ieee754_sqrtf+0x20>
 8008c42:	f010 41ff 	ands.w	r1, r0, #2139095040	@ 0x7f800000
 8008c46:	d03c      	beq.n	8008cc2 <__ieee754_sqrtf+0xbe>
 8008c48:	15c2      	asrs	r2, r0, #23
 8008c4a:	2400      	movs	r4, #0
 8008c4c:	2019      	movs	r0, #25
 8008c4e:	4626      	mov	r6, r4
 8008c50:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8008c54:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008c58:	f1a2 057f 	sub.w	r5, r2, #127	@ 0x7f
 8008c5c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008c60:	07d2      	lsls	r2, r2, #31
 8008c62:	bf58      	it	pl
 8008c64:	005b      	lslpl	r3, r3, #1
 8008c66:	106d      	asrs	r5, r5, #1
 8008c68:	005b      	lsls	r3, r3, #1
 8008c6a:	1872      	adds	r2, r6, r1
 8008c6c:	429a      	cmp	r2, r3
 8008c6e:	bfcf      	iteee	gt
 8008c70:	461a      	movgt	r2, r3
 8008c72:	1856      	addle	r6, r2, r1
 8008c74:	1864      	addle	r4, r4, r1
 8008c76:	1a9a      	suble	r2, r3, r2
 8008c78:	3801      	subs	r0, #1
 8008c7a:	ea4f 0342 	mov.w	r3, r2, lsl #1
 8008c7e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008c82:	d1f2      	bne.n	8008c6a <__ieee754_sqrtf+0x66>
 8008c84:	b1ba      	cbz	r2, 8008cb6 <__ieee754_sqrtf+0xb2>
 8008c86:	4e15      	ldr	r6, [pc, #84]	@ (8008cdc <__ieee754_sqrtf+0xd8>)
 8008c88:	4f15      	ldr	r7, [pc, #84]	@ (8008ce0 <__ieee754_sqrtf+0xdc>)
 8008c8a:	6830      	ldr	r0, [r6, #0]
 8008c8c:	6839      	ldr	r1, [r7, #0]
 8008c8e:	f7f7 fa73 	bl	8000178 <__aeabi_fsub>
 8008c92:	f8d6 8000 	ldr.w	r8, [r6]
 8008c96:	4601      	mov	r1, r0
 8008c98:	4640      	mov	r0, r8
 8008c9a:	f7f7 fd1f 	bl	80006dc <__aeabi_fcmple>
 8008c9e:	b150      	cbz	r0, 8008cb6 <__ieee754_sqrtf+0xb2>
 8008ca0:	6830      	ldr	r0, [r6, #0]
 8008ca2:	6839      	ldr	r1, [r7, #0]
 8008ca4:	f7f7 fa6a 	bl	800017c <__addsf3>
 8008ca8:	6836      	ldr	r6, [r6, #0]
 8008caa:	4601      	mov	r1, r0
 8008cac:	4630      	mov	r0, r6
 8008cae:	f7f7 fd0b 	bl	80006c8 <__aeabi_fcmplt>
 8008cb2:	b170      	cbz	r0, 8008cd2 <__ieee754_sqrtf+0xce>
 8008cb4:	3402      	adds	r4, #2
 8008cb6:	1064      	asrs	r4, r4, #1
 8008cb8:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 8008cbc:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 8008cc0:	e7b1      	b.n	8008c26 <__ieee754_sqrtf+0x22>
 8008cc2:	005b      	lsls	r3, r3, #1
 8008cc4:	0218      	lsls	r0, r3, #8
 8008cc6:	460a      	mov	r2, r1
 8008cc8:	f101 0101 	add.w	r1, r1, #1
 8008ccc:	d5f9      	bpl.n	8008cc2 <__ieee754_sqrtf+0xbe>
 8008cce:	4252      	negs	r2, r2
 8008cd0:	e7bb      	b.n	8008c4a <__ieee754_sqrtf+0x46>
 8008cd2:	3401      	adds	r4, #1
 8008cd4:	f024 0401 	bic.w	r4, r4, #1
 8008cd8:	e7ed      	b.n	8008cb6 <__ieee754_sqrtf+0xb2>
 8008cda:	bf00      	nop
 8008cdc:	0800a420 	.word	0x0800a420
 8008ce0:	0800a41c 	.word	0x0800a41c

08008ce4 <__kernel_cosf>:
 8008ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ce8:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 8008cec:	f1b5 5f48 	cmp.w	r5, #838860800	@ 0x32000000
 8008cf0:	4606      	mov	r6, r0
 8008cf2:	4688      	mov	r8, r1
 8008cf4:	d203      	bcs.n	8008cfe <__kernel_cosf+0x1a>
 8008cf6:	f7f7 fd25 	bl	8000744 <__aeabi_f2iz>
 8008cfa:	2800      	cmp	r0, #0
 8008cfc:	d05c      	beq.n	8008db8 <__kernel_cosf+0xd4>
 8008cfe:	4631      	mov	r1, r6
 8008d00:	4630      	mov	r0, r6
 8008d02:	f7f7 fb43 	bl	800038c <__aeabi_fmul>
 8008d06:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8008d0a:	4604      	mov	r4, r0
 8008d0c:	f7f7 fb3e 	bl	800038c <__aeabi_fmul>
 8008d10:	492b      	ldr	r1, [pc, #172]	@ (8008dc0 <__kernel_cosf+0xdc>)
 8008d12:	4607      	mov	r7, r0
 8008d14:	4620      	mov	r0, r4
 8008d16:	f7f7 fb39 	bl	800038c <__aeabi_fmul>
 8008d1a:	492a      	ldr	r1, [pc, #168]	@ (8008dc4 <__kernel_cosf+0xe0>)
 8008d1c:	f7f7 fa2e 	bl	800017c <__addsf3>
 8008d20:	4621      	mov	r1, r4
 8008d22:	f7f7 fb33 	bl	800038c <__aeabi_fmul>
 8008d26:	4928      	ldr	r1, [pc, #160]	@ (8008dc8 <__kernel_cosf+0xe4>)
 8008d28:	f7f7 fa26 	bl	8000178 <__aeabi_fsub>
 8008d2c:	4621      	mov	r1, r4
 8008d2e:	f7f7 fb2d 	bl	800038c <__aeabi_fmul>
 8008d32:	4926      	ldr	r1, [pc, #152]	@ (8008dcc <__kernel_cosf+0xe8>)
 8008d34:	f7f7 fa22 	bl	800017c <__addsf3>
 8008d38:	4621      	mov	r1, r4
 8008d3a:	f7f7 fb27 	bl	800038c <__aeabi_fmul>
 8008d3e:	4924      	ldr	r1, [pc, #144]	@ (8008dd0 <__kernel_cosf+0xec>)
 8008d40:	f7f7 fa1a 	bl	8000178 <__aeabi_fsub>
 8008d44:	4621      	mov	r1, r4
 8008d46:	f7f7 fb21 	bl	800038c <__aeabi_fmul>
 8008d4a:	4922      	ldr	r1, [pc, #136]	@ (8008dd4 <__kernel_cosf+0xf0>)
 8008d4c:	f7f7 fa16 	bl	800017c <__addsf3>
 8008d50:	4621      	mov	r1, r4
 8008d52:	f7f7 fb1b 	bl	800038c <__aeabi_fmul>
 8008d56:	4621      	mov	r1, r4
 8008d58:	f7f7 fb18 	bl	800038c <__aeabi_fmul>
 8008d5c:	4641      	mov	r1, r8
 8008d5e:	4604      	mov	r4, r0
 8008d60:	4630      	mov	r0, r6
 8008d62:	f7f7 fb13 	bl	800038c <__aeabi_fmul>
 8008d66:	4601      	mov	r1, r0
 8008d68:	4620      	mov	r0, r4
 8008d6a:	f7f7 fa05 	bl	8000178 <__aeabi_fsub>
 8008d6e:	4b1a      	ldr	r3, [pc, #104]	@ (8008dd8 <__kernel_cosf+0xf4>)
 8008d70:	4604      	mov	r4, r0
 8008d72:	429d      	cmp	r5, r3
 8008d74:	d80a      	bhi.n	8008d8c <__kernel_cosf+0xa8>
 8008d76:	4601      	mov	r1, r0
 8008d78:	4638      	mov	r0, r7
 8008d7a:	f7f7 f9fd 	bl	8000178 <__aeabi_fsub>
 8008d7e:	4601      	mov	r1, r0
 8008d80:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8008d84:	f7f7 f9f8 	bl	8000178 <__aeabi_fsub>
 8008d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d8c:	4b13      	ldr	r3, [pc, #76]	@ (8008ddc <__kernel_cosf+0xf8>)
 8008d8e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8008d92:	429d      	cmp	r5, r3
 8008d94:	bf8c      	ite	hi
 8008d96:	4d12      	ldrhi	r5, [pc, #72]	@ (8008de0 <__kernel_cosf+0xfc>)
 8008d98:	f105 457f 	addls.w	r5, r5, #4278190080	@ 0xff000000
 8008d9c:	4629      	mov	r1, r5
 8008d9e:	f7f7 f9eb 	bl	8000178 <__aeabi_fsub>
 8008da2:	4629      	mov	r1, r5
 8008da4:	4606      	mov	r6, r0
 8008da6:	4638      	mov	r0, r7
 8008da8:	f7f7 f9e6 	bl	8000178 <__aeabi_fsub>
 8008dac:	4621      	mov	r1, r4
 8008dae:	f7f7 f9e3 	bl	8000178 <__aeabi_fsub>
 8008db2:	4601      	mov	r1, r0
 8008db4:	4630      	mov	r0, r6
 8008db6:	e7e5      	b.n	8008d84 <__kernel_cosf+0xa0>
 8008db8:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8008dbc:	e7e4      	b.n	8008d88 <__kernel_cosf+0xa4>
 8008dbe:	bf00      	nop
 8008dc0:	ad47d74e 	.word	0xad47d74e
 8008dc4:	310f74f6 	.word	0x310f74f6
 8008dc8:	3493f27c 	.word	0x3493f27c
 8008dcc:	37d00d01 	.word	0x37d00d01
 8008dd0:	3ab60b61 	.word	0x3ab60b61
 8008dd4:	3d2aaaab 	.word	0x3d2aaaab
 8008dd8:	3e999999 	.word	0x3e999999
 8008ddc:	3f480000 	.word	0x3f480000
 8008de0:	3e900000 	.word	0x3e900000

08008de4 <__kernel_sinf>:
 8008de4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008de8:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8008dec:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8008df0:	4604      	mov	r4, r0
 8008df2:	460f      	mov	r7, r1
 8008df4:	4691      	mov	r9, r2
 8008df6:	d203      	bcs.n	8008e00 <__kernel_sinf+0x1c>
 8008df8:	f7f7 fca4 	bl	8000744 <__aeabi_f2iz>
 8008dfc:	2800      	cmp	r0, #0
 8008dfe:	d035      	beq.n	8008e6c <__kernel_sinf+0x88>
 8008e00:	4621      	mov	r1, r4
 8008e02:	4620      	mov	r0, r4
 8008e04:	f7f7 fac2 	bl	800038c <__aeabi_fmul>
 8008e08:	4605      	mov	r5, r0
 8008e0a:	4601      	mov	r1, r0
 8008e0c:	4620      	mov	r0, r4
 8008e0e:	f7f7 fabd 	bl	800038c <__aeabi_fmul>
 8008e12:	4929      	ldr	r1, [pc, #164]	@ (8008eb8 <__kernel_sinf+0xd4>)
 8008e14:	4606      	mov	r6, r0
 8008e16:	4628      	mov	r0, r5
 8008e18:	f7f7 fab8 	bl	800038c <__aeabi_fmul>
 8008e1c:	4927      	ldr	r1, [pc, #156]	@ (8008ebc <__kernel_sinf+0xd8>)
 8008e1e:	f7f7 f9ab 	bl	8000178 <__aeabi_fsub>
 8008e22:	4629      	mov	r1, r5
 8008e24:	f7f7 fab2 	bl	800038c <__aeabi_fmul>
 8008e28:	4925      	ldr	r1, [pc, #148]	@ (8008ec0 <__kernel_sinf+0xdc>)
 8008e2a:	f7f7 f9a7 	bl	800017c <__addsf3>
 8008e2e:	4629      	mov	r1, r5
 8008e30:	f7f7 faac 	bl	800038c <__aeabi_fmul>
 8008e34:	4923      	ldr	r1, [pc, #140]	@ (8008ec4 <__kernel_sinf+0xe0>)
 8008e36:	f7f7 f99f 	bl	8000178 <__aeabi_fsub>
 8008e3a:	4629      	mov	r1, r5
 8008e3c:	f7f7 faa6 	bl	800038c <__aeabi_fmul>
 8008e40:	4921      	ldr	r1, [pc, #132]	@ (8008ec8 <__kernel_sinf+0xe4>)
 8008e42:	f7f7 f99b 	bl	800017c <__addsf3>
 8008e46:	4680      	mov	r8, r0
 8008e48:	f1b9 0f00 	cmp.w	r9, #0
 8008e4c:	d111      	bne.n	8008e72 <__kernel_sinf+0x8e>
 8008e4e:	4601      	mov	r1, r0
 8008e50:	4628      	mov	r0, r5
 8008e52:	f7f7 fa9b 	bl	800038c <__aeabi_fmul>
 8008e56:	491d      	ldr	r1, [pc, #116]	@ (8008ecc <__kernel_sinf+0xe8>)
 8008e58:	f7f7 f98e 	bl	8000178 <__aeabi_fsub>
 8008e5c:	4631      	mov	r1, r6
 8008e5e:	f7f7 fa95 	bl	800038c <__aeabi_fmul>
 8008e62:	4601      	mov	r1, r0
 8008e64:	4620      	mov	r0, r4
 8008e66:	f7f7 f989 	bl	800017c <__addsf3>
 8008e6a:	4604      	mov	r4, r0
 8008e6c:	4620      	mov	r0, r4
 8008e6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e72:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8008e76:	4638      	mov	r0, r7
 8008e78:	f7f7 fa88 	bl	800038c <__aeabi_fmul>
 8008e7c:	4641      	mov	r1, r8
 8008e7e:	4681      	mov	r9, r0
 8008e80:	4630      	mov	r0, r6
 8008e82:	f7f7 fa83 	bl	800038c <__aeabi_fmul>
 8008e86:	4601      	mov	r1, r0
 8008e88:	4648      	mov	r0, r9
 8008e8a:	f7f7 f975 	bl	8000178 <__aeabi_fsub>
 8008e8e:	4629      	mov	r1, r5
 8008e90:	f7f7 fa7c 	bl	800038c <__aeabi_fmul>
 8008e94:	4639      	mov	r1, r7
 8008e96:	f7f7 f96f 	bl	8000178 <__aeabi_fsub>
 8008e9a:	490c      	ldr	r1, [pc, #48]	@ (8008ecc <__kernel_sinf+0xe8>)
 8008e9c:	4605      	mov	r5, r0
 8008e9e:	4630      	mov	r0, r6
 8008ea0:	f7f7 fa74 	bl	800038c <__aeabi_fmul>
 8008ea4:	4601      	mov	r1, r0
 8008ea6:	4628      	mov	r0, r5
 8008ea8:	f7f7 f968 	bl	800017c <__addsf3>
 8008eac:	4601      	mov	r1, r0
 8008eae:	4620      	mov	r0, r4
 8008eb0:	f7f7 f962 	bl	8000178 <__aeabi_fsub>
 8008eb4:	e7d9      	b.n	8008e6a <__kernel_sinf+0x86>
 8008eb6:	bf00      	nop
 8008eb8:	2f2ec9d3 	.word	0x2f2ec9d3
 8008ebc:	32d72f34 	.word	0x32d72f34
 8008ec0:	3638ef1b 	.word	0x3638ef1b
 8008ec4:	39500d01 	.word	0x39500d01
 8008ec8:	3c088889 	.word	0x3c088889
 8008ecc:	3e2aaaab 	.word	0x3e2aaaab

08008ed0 <__ieee754_powf>:
 8008ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ed4:	f031 4b00 	bics.w	fp, r1, #2147483648	@ 0x80000000
 8008ed8:	4681      	mov	r9, r0
 8008eda:	460f      	mov	r7, r1
 8008edc:	4606      	mov	r6, r0
 8008ede:	460c      	mov	r4, r1
 8008ee0:	b087      	sub	sp, #28
 8008ee2:	d10c      	bne.n	8008efe <__ieee754_powf+0x2e>
 8008ee4:	f480 0680 	eor.w	r6, r0, #4194304	@ 0x400000
 8008ee8:	0076      	lsls	r6, r6, #1
 8008eea:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8008eee:	f240 8310 	bls.w	8009512 <__ieee754_powf+0x642>
 8008ef2:	4639      	mov	r1, r7
 8008ef4:	4648      	mov	r0, r9
 8008ef6:	f7f7 f941 	bl	800017c <__addsf3>
 8008efa:	4601      	mov	r1, r0
 8008efc:	e043      	b.n	8008f86 <__ieee754_powf+0xb6>
 8008efe:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 8008f02:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8008f06:	d802      	bhi.n	8008f0e <__ieee754_powf+0x3e>
 8008f08:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 8008f0c:	d908      	bls.n	8008f20 <__ieee754_powf+0x50>
 8008f0e:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8008f12:	d1ee      	bne.n	8008ef2 <__ieee754_powf+0x22>
 8008f14:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8008f18:	0064      	lsls	r4, r4, #1
 8008f1a:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8008f1e:	e7e6      	b.n	8008eee <__ieee754_powf+0x1e>
 8008f20:	2800      	cmp	r0, #0
 8008f22:	da1f      	bge.n	8008f64 <__ieee754_powf+0x94>
 8008f24:	f1bb 4f97 	cmp.w	fp, #1266679808	@ 0x4b800000
 8008f28:	f080 82f8 	bcs.w	800951c <__ieee754_powf+0x64c>
 8008f2c:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 8008f30:	d32f      	bcc.n	8008f92 <__ieee754_powf+0xc2>
 8008f32:	ea4f 53eb 	mov.w	r3, fp, asr #23
 8008f36:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8008f3a:	fa4b f503 	asr.w	r5, fp, r3
 8008f3e:	fa05 f303 	lsl.w	r3, r5, r3
 8008f42:	455b      	cmp	r3, fp
 8008f44:	d123      	bne.n	8008f8e <__ieee754_powf+0xbe>
 8008f46:	f005 0501 	and.w	r5, r5, #1
 8008f4a:	f1c5 0502 	rsb	r5, r5, #2
 8008f4e:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 8008f52:	d11f      	bne.n	8008f94 <__ieee754_powf+0xc4>
 8008f54:	2c00      	cmp	r4, #0
 8008f56:	4649      	mov	r1, r9
 8008f58:	da15      	bge.n	8008f86 <__ieee754_powf+0xb6>
 8008f5a:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8008f5e:	f7f7 fac9 	bl	80004f4 <__aeabi_fdiv>
 8008f62:	e7ca      	b.n	8008efa <__ieee754_powf+0x2a>
 8008f64:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 8008f68:	d111      	bne.n	8008f8e <__ieee754_powf+0xbe>
 8008f6a:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8008f6e:	f000 82d0 	beq.w	8009512 <__ieee754_powf+0x642>
 8008f72:	d904      	bls.n	8008f7e <__ieee754_powf+0xae>
 8008f74:	2c00      	cmp	r4, #0
 8008f76:	f280 82cf 	bge.w	8009518 <__ieee754_powf+0x648>
 8008f7a:	2100      	movs	r1, #0
 8008f7c:	e003      	b.n	8008f86 <__ieee754_powf+0xb6>
 8008f7e:	2c00      	cmp	r4, #0
 8008f80:	dafb      	bge.n	8008f7a <__ieee754_powf+0xaa>
 8008f82:	f107 4100 	add.w	r1, r7, #2147483648	@ 0x80000000
 8008f86:	4608      	mov	r0, r1
 8008f88:	b007      	add	sp, #28
 8008f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f8e:	2500      	movs	r5, #0
 8008f90:	e7dd      	b.n	8008f4e <__ieee754_powf+0x7e>
 8008f92:	2500      	movs	r5, #0
 8008f94:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8008f98:	d104      	bne.n	8008fa4 <__ieee754_powf+0xd4>
 8008f9a:	4649      	mov	r1, r9
 8008f9c:	4648      	mov	r0, r9
 8008f9e:	f7f7 f9f5 	bl	800038c <__aeabi_fmul>
 8008fa2:	e7aa      	b.n	8008efa <__ieee754_powf+0x2a>
 8008fa4:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8008fa8:	f040 82bd 	bne.w	8009526 <__ieee754_powf+0x656>
 8008fac:	2e00      	cmp	r6, #0
 8008fae:	f2c0 82ba 	blt.w	8009526 <__ieee754_powf+0x656>
 8008fb2:	4648      	mov	r0, r9
 8008fb4:	b007      	add	sp, #28
 8008fb6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fba:	f7ff be23 	b.w	8008c04 <__ieee754_sqrtf>
 8008fbe:	2d01      	cmp	r5, #1
 8008fc0:	d1e1      	bne.n	8008f86 <__ieee754_powf+0xb6>
 8008fc2:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 8008fc6:	e798      	b.n	8008efa <__ieee754_powf+0x2a>
 8008fc8:	0ff3      	lsrs	r3, r6, #31
 8008fca:	3b01      	subs	r3, #1
 8008fcc:	9303      	str	r3, [sp, #12]
 8008fce:	432b      	orrs	r3, r5
 8008fd0:	d101      	bne.n	8008fd6 <__ieee754_powf+0x106>
 8008fd2:	4649      	mov	r1, r9
 8008fd4:	e2c5      	b.n	8009562 <__ieee754_powf+0x692>
 8008fd6:	f1bb 4f9a 	cmp.w	fp, #1291845632	@ 0x4d000000
 8008fda:	f240 809b 	bls.w	8009114 <__ieee754_powf+0x244>
 8008fde:	4b46      	ldr	r3, [pc, #280]	@ (80090f8 <__ieee754_powf+0x228>)
 8008fe0:	4598      	cmp	r8, r3
 8008fe2:	d807      	bhi.n	8008ff4 <__ieee754_powf+0x124>
 8008fe4:	2c00      	cmp	r4, #0
 8008fe6:	da0a      	bge.n	8008ffe <__ieee754_powf+0x12e>
 8008fe8:	2000      	movs	r0, #0
 8008fea:	b007      	add	sp, #28
 8008fec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ff0:	f000 bc9d 	b.w	800992e <__math_oflowf>
 8008ff4:	4b41      	ldr	r3, [pc, #260]	@ (80090fc <__ieee754_powf+0x22c>)
 8008ff6:	4598      	cmp	r8, r3
 8008ff8:	d907      	bls.n	800900a <__ieee754_powf+0x13a>
 8008ffa:	2c00      	cmp	r4, #0
 8008ffc:	dcf4      	bgt.n	8008fe8 <__ieee754_powf+0x118>
 8008ffe:	2000      	movs	r0, #0
 8009000:	b007      	add	sp, #28
 8009002:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009006:	f000 bc8e 	b.w	8009926 <__math_uflowf>
 800900a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800900e:	f7f7 f8b3 	bl	8000178 <__aeabi_fsub>
 8009012:	493b      	ldr	r1, [pc, #236]	@ (8009100 <__ieee754_powf+0x230>)
 8009014:	4606      	mov	r6, r0
 8009016:	f7f7 f9b9 	bl	800038c <__aeabi_fmul>
 800901a:	493a      	ldr	r1, [pc, #232]	@ (8009104 <__ieee754_powf+0x234>)
 800901c:	4680      	mov	r8, r0
 800901e:	4630      	mov	r0, r6
 8009020:	f7f7 f9b4 	bl	800038c <__aeabi_fmul>
 8009024:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 8009028:	4681      	mov	r9, r0
 800902a:	4630      	mov	r0, r6
 800902c:	f7f7 f9ae 	bl	800038c <__aeabi_fmul>
 8009030:	4601      	mov	r1, r0
 8009032:	4835      	ldr	r0, [pc, #212]	@ (8009108 <__ieee754_powf+0x238>)
 8009034:	f7f7 f8a0 	bl	8000178 <__aeabi_fsub>
 8009038:	4631      	mov	r1, r6
 800903a:	f7f7 f9a7 	bl	800038c <__aeabi_fmul>
 800903e:	4601      	mov	r1, r0
 8009040:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 8009044:	f7f7 f898 	bl	8000178 <__aeabi_fsub>
 8009048:	4631      	mov	r1, r6
 800904a:	4682      	mov	sl, r0
 800904c:	4630      	mov	r0, r6
 800904e:	f7f7 f99d 	bl	800038c <__aeabi_fmul>
 8009052:	4601      	mov	r1, r0
 8009054:	4650      	mov	r0, sl
 8009056:	f7f7 f999 	bl	800038c <__aeabi_fmul>
 800905a:	492c      	ldr	r1, [pc, #176]	@ (800910c <__ieee754_powf+0x23c>)
 800905c:	f7f7 f996 	bl	800038c <__aeabi_fmul>
 8009060:	4601      	mov	r1, r0
 8009062:	4648      	mov	r0, r9
 8009064:	f7f7 f888 	bl	8000178 <__aeabi_fsub>
 8009068:	4601      	mov	r1, r0
 800906a:	4606      	mov	r6, r0
 800906c:	4640      	mov	r0, r8
 800906e:	f7f7 f885 	bl	800017c <__addsf3>
 8009072:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 8009076:	f02b 0b0f 	bic.w	fp, fp, #15
 800907a:	4641      	mov	r1, r8
 800907c:	4658      	mov	r0, fp
 800907e:	f7f7 f87b 	bl	8000178 <__aeabi_fsub>
 8009082:	4601      	mov	r1, r0
 8009084:	4630      	mov	r0, r6
 8009086:	f7f7 f877 	bl	8000178 <__aeabi_fsub>
 800908a:	9b03      	ldr	r3, [sp, #12]
 800908c:	3d01      	subs	r5, #1
 800908e:	f36f 040b 	bfc	r4, #0, #12
 8009092:	431d      	orrs	r5, r3
 8009094:	4606      	mov	r6, r0
 8009096:	4621      	mov	r1, r4
 8009098:	4638      	mov	r0, r7
 800909a:	bf14      	ite	ne
 800909c:	f04f 557e 	movne.w	r5, #1065353216	@ 0x3f800000
 80090a0:	4d1b      	ldreq	r5, [pc, #108]	@ (8009110 <__ieee754_powf+0x240>)
 80090a2:	f7f7 f869 	bl	8000178 <__aeabi_fsub>
 80090a6:	4659      	mov	r1, fp
 80090a8:	f7f7 f970 	bl	800038c <__aeabi_fmul>
 80090ac:	4639      	mov	r1, r7
 80090ae:	4680      	mov	r8, r0
 80090b0:	4630      	mov	r0, r6
 80090b2:	f7f7 f96b 	bl	800038c <__aeabi_fmul>
 80090b6:	4601      	mov	r1, r0
 80090b8:	4640      	mov	r0, r8
 80090ba:	f7f7 f85f 	bl	800017c <__addsf3>
 80090be:	4621      	mov	r1, r4
 80090c0:	4606      	mov	r6, r0
 80090c2:	4658      	mov	r0, fp
 80090c4:	f7f7 f962 	bl	800038c <__aeabi_fmul>
 80090c8:	4601      	mov	r1, r0
 80090ca:	4607      	mov	r7, r0
 80090cc:	4630      	mov	r0, r6
 80090ce:	f7f7 f855 	bl	800017c <__addsf3>
 80090d2:	2800      	cmp	r0, #0
 80090d4:	4604      	mov	r4, r0
 80090d6:	4680      	mov	r8, r0
 80090d8:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 80090dc:	f340 813f 	ble.w	800935e <__ieee754_powf+0x48e>
 80090e0:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 80090e4:	f240 8128 	bls.w	8009338 <__ieee754_powf+0x468>
 80090e8:	2100      	movs	r1, #0
 80090ea:	4628      	mov	r0, r5
 80090ec:	f7f7 faec 	bl	80006c8 <__aeabi_fcmplt>
 80090f0:	3800      	subs	r0, #0
 80090f2:	bf18      	it	ne
 80090f4:	2001      	movne	r0, #1
 80090f6:	e778      	b.n	8008fea <__ieee754_powf+0x11a>
 80090f8:	3f7ffff3 	.word	0x3f7ffff3
 80090fc:	3f800007 	.word	0x3f800007
 8009100:	3fb8aa00 	.word	0x3fb8aa00
 8009104:	36eca570 	.word	0x36eca570
 8009108:	3eaaaaab 	.word	0x3eaaaaab
 800910c:	3fb8aa3b 	.word	0x3fb8aa3b
 8009110:	bf800000 	.word	0xbf800000
 8009114:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8009118:	f040 810a 	bne.w	8009330 <__ieee754_powf+0x460>
 800911c:	f04f 4197 	mov.w	r1, #1266679808	@ 0x4b800000
 8009120:	f7f7 f934 	bl	800038c <__aeabi_fmul>
 8009124:	f06f 0217 	mvn.w	r2, #23
 8009128:	4682      	mov	sl, r0
 800912a:	ea4f 53ea 	mov.w	r3, sl, asr #23
 800912e:	3b7f      	subs	r3, #127	@ 0x7f
 8009130:	441a      	add	r2, r3
 8009132:	4b95      	ldr	r3, [pc, #596]	@ (8009388 <__ieee754_powf+0x4b8>)
 8009134:	f3ca 0a16 	ubfx	sl, sl, #0, #23
 8009138:	459a      	cmp	sl, r3
 800913a:	f04a 567e 	orr.w	r6, sl, #1065353216	@ 0x3f800000
 800913e:	dd06      	ble.n	800914e <__ieee754_powf+0x27e>
 8009140:	4b92      	ldr	r3, [pc, #584]	@ (800938c <__ieee754_powf+0x4bc>)
 8009142:	459a      	cmp	sl, r3
 8009144:	f340 80f6 	ble.w	8009334 <__ieee754_powf+0x464>
 8009148:	3201      	adds	r2, #1
 800914a:	f5a6 0600 	sub.w	r6, r6, #8388608	@ 0x800000
 800914e:	2300      	movs	r3, #0
 8009150:	9301      	str	r3, [sp, #4]
 8009152:	9205      	str	r2, [sp, #20]
 8009154:	4b8e      	ldr	r3, [pc, #568]	@ (8009390 <__ieee754_powf+0x4c0>)
 8009156:	9a01      	ldr	r2, [sp, #4]
 8009158:	4630      	mov	r0, r6
 800915a:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 800915e:	46b2      	mov	sl, r6
 8009160:	4659      	mov	r1, fp
 8009162:	f7f7 f809 	bl	8000178 <__aeabi_fsub>
 8009166:	4631      	mov	r1, r6
 8009168:	4681      	mov	r9, r0
 800916a:	4658      	mov	r0, fp
 800916c:	f7f7 f806 	bl	800017c <__addsf3>
 8009170:	4601      	mov	r1, r0
 8009172:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8009176:	f7f7 f9bd 	bl	80004f4 <__aeabi_fdiv>
 800917a:	4601      	mov	r1, r0
 800917c:	9004      	str	r0, [sp, #16]
 800917e:	4648      	mov	r0, r9
 8009180:	f7f7 f904 	bl	800038c <__aeabi_fmul>
 8009184:	9002      	str	r0, [sp, #8]
 8009186:	9b02      	ldr	r3, [sp, #8]
 8009188:	1076      	asrs	r6, r6, #1
 800918a:	f36f 030b 	bfc	r3, #0, #12
 800918e:	4698      	mov	r8, r3
 8009190:	f046 5600 	orr.w	r6, r6, #536870912	@ 0x20000000
 8009194:	9b01      	ldr	r3, [sp, #4]
 8009196:	f506 2680 	add.w	r6, r6, #262144	@ 0x40000
 800919a:	eb06 5643 	add.w	r6, r6, r3, lsl #21
 800919e:	4631      	mov	r1, r6
 80091a0:	4640      	mov	r0, r8
 80091a2:	f7f7 f8f3 	bl	800038c <__aeabi_fmul>
 80091a6:	4601      	mov	r1, r0
 80091a8:	4648      	mov	r0, r9
 80091aa:	f7f6 ffe5 	bl	8000178 <__aeabi_fsub>
 80091ae:	4659      	mov	r1, fp
 80091b0:	4681      	mov	r9, r0
 80091b2:	4630      	mov	r0, r6
 80091b4:	f7f6 ffe0 	bl	8000178 <__aeabi_fsub>
 80091b8:	4601      	mov	r1, r0
 80091ba:	4650      	mov	r0, sl
 80091bc:	f7f6 ffdc 	bl	8000178 <__aeabi_fsub>
 80091c0:	4641      	mov	r1, r8
 80091c2:	f7f7 f8e3 	bl	800038c <__aeabi_fmul>
 80091c6:	4601      	mov	r1, r0
 80091c8:	4648      	mov	r0, r9
 80091ca:	f7f6 ffd5 	bl	8000178 <__aeabi_fsub>
 80091ce:	9b04      	ldr	r3, [sp, #16]
 80091d0:	4619      	mov	r1, r3
 80091d2:	f7f7 f8db 	bl	800038c <__aeabi_fmul>
 80091d6:	9902      	ldr	r1, [sp, #8]
 80091d8:	4683      	mov	fp, r0
 80091da:	4608      	mov	r0, r1
 80091dc:	f7f7 f8d6 	bl	800038c <__aeabi_fmul>
 80091e0:	4606      	mov	r6, r0
 80091e2:	496c      	ldr	r1, [pc, #432]	@ (8009394 <__ieee754_powf+0x4c4>)
 80091e4:	f7f7 f8d2 	bl	800038c <__aeabi_fmul>
 80091e8:	496b      	ldr	r1, [pc, #428]	@ (8009398 <__ieee754_powf+0x4c8>)
 80091ea:	f7f6 ffc7 	bl	800017c <__addsf3>
 80091ee:	4631      	mov	r1, r6
 80091f0:	f7f7 f8cc 	bl	800038c <__aeabi_fmul>
 80091f4:	4969      	ldr	r1, [pc, #420]	@ (800939c <__ieee754_powf+0x4cc>)
 80091f6:	f7f6 ffc1 	bl	800017c <__addsf3>
 80091fa:	4631      	mov	r1, r6
 80091fc:	f7f7 f8c6 	bl	800038c <__aeabi_fmul>
 8009200:	4967      	ldr	r1, [pc, #412]	@ (80093a0 <__ieee754_powf+0x4d0>)
 8009202:	f7f6 ffbb 	bl	800017c <__addsf3>
 8009206:	4631      	mov	r1, r6
 8009208:	f7f7 f8c0 	bl	800038c <__aeabi_fmul>
 800920c:	4965      	ldr	r1, [pc, #404]	@ (80093a4 <__ieee754_powf+0x4d4>)
 800920e:	f7f6 ffb5 	bl	800017c <__addsf3>
 8009212:	4631      	mov	r1, r6
 8009214:	f7f7 f8ba 	bl	800038c <__aeabi_fmul>
 8009218:	4963      	ldr	r1, [pc, #396]	@ (80093a8 <__ieee754_powf+0x4d8>)
 800921a:	f7f6 ffaf 	bl	800017c <__addsf3>
 800921e:	4631      	mov	r1, r6
 8009220:	4681      	mov	r9, r0
 8009222:	4630      	mov	r0, r6
 8009224:	f7f7 f8b2 	bl	800038c <__aeabi_fmul>
 8009228:	4601      	mov	r1, r0
 800922a:	4648      	mov	r0, r9
 800922c:	f7f7 f8ae 	bl	800038c <__aeabi_fmul>
 8009230:	4606      	mov	r6, r0
 8009232:	4641      	mov	r1, r8
 8009234:	9802      	ldr	r0, [sp, #8]
 8009236:	f7f6 ffa1 	bl	800017c <__addsf3>
 800923a:	4659      	mov	r1, fp
 800923c:	f7f7 f8a6 	bl	800038c <__aeabi_fmul>
 8009240:	4631      	mov	r1, r6
 8009242:	f7f6 ff9b 	bl	800017c <__addsf3>
 8009246:	4641      	mov	r1, r8
 8009248:	4681      	mov	r9, r0
 800924a:	4640      	mov	r0, r8
 800924c:	f7f7 f89e 	bl	800038c <__aeabi_fmul>
 8009250:	4956      	ldr	r1, [pc, #344]	@ (80093ac <__ieee754_powf+0x4dc>)
 8009252:	4682      	mov	sl, r0
 8009254:	f7f6 ff92 	bl	800017c <__addsf3>
 8009258:	4649      	mov	r1, r9
 800925a:	f7f6 ff8f 	bl	800017c <__addsf3>
 800925e:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 8009262:	f026 060f 	bic.w	r6, r6, #15
 8009266:	4631      	mov	r1, r6
 8009268:	4640      	mov	r0, r8
 800926a:	f7f7 f88f 	bl	800038c <__aeabi_fmul>
 800926e:	494f      	ldr	r1, [pc, #316]	@ (80093ac <__ieee754_powf+0x4dc>)
 8009270:	4680      	mov	r8, r0
 8009272:	4630      	mov	r0, r6
 8009274:	f7f6 ff80 	bl	8000178 <__aeabi_fsub>
 8009278:	4651      	mov	r1, sl
 800927a:	f7f6 ff7d 	bl	8000178 <__aeabi_fsub>
 800927e:	4601      	mov	r1, r0
 8009280:	4648      	mov	r0, r9
 8009282:	f7f6 ff79 	bl	8000178 <__aeabi_fsub>
 8009286:	9902      	ldr	r1, [sp, #8]
 8009288:	f7f7 f880 	bl	800038c <__aeabi_fmul>
 800928c:	4631      	mov	r1, r6
 800928e:	4681      	mov	r9, r0
 8009290:	4658      	mov	r0, fp
 8009292:	f7f7 f87b 	bl	800038c <__aeabi_fmul>
 8009296:	4601      	mov	r1, r0
 8009298:	4648      	mov	r0, r9
 800929a:	f7f6 ff6f 	bl	800017c <__addsf3>
 800929e:	4682      	mov	sl, r0
 80092a0:	4601      	mov	r1, r0
 80092a2:	4640      	mov	r0, r8
 80092a4:	f7f6 ff6a 	bl	800017c <__addsf3>
 80092a8:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 80092ac:	f026 060f 	bic.w	r6, r6, #15
 80092b0:	4630      	mov	r0, r6
 80092b2:	493f      	ldr	r1, [pc, #252]	@ (80093b0 <__ieee754_powf+0x4e0>)
 80092b4:	f7f7 f86a 	bl	800038c <__aeabi_fmul>
 80092b8:	4641      	mov	r1, r8
 80092ba:	4681      	mov	r9, r0
 80092bc:	4630      	mov	r0, r6
 80092be:	f7f6 ff5b 	bl	8000178 <__aeabi_fsub>
 80092c2:	4601      	mov	r1, r0
 80092c4:	4650      	mov	r0, sl
 80092c6:	f7f6 ff57 	bl	8000178 <__aeabi_fsub>
 80092ca:	493a      	ldr	r1, [pc, #232]	@ (80093b4 <__ieee754_powf+0x4e4>)
 80092cc:	f7f7 f85e 	bl	800038c <__aeabi_fmul>
 80092d0:	4939      	ldr	r1, [pc, #228]	@ (80093b8 <__ieee754_powf+0x4e8>)
 80092d2:	4680      	mov	r8, r0
 80092d4:	4630      	mov	r0, r6
 80092d6:	f7f7 f859 	bl	800038c <__aeabi_fmul>
 80092da:	4601      	mov	r1, r0
 80092dc:	4640      	mov	r0, r8
 80092de:	f7f6 ff4d 	bl	800017c <__addsf3>
 80092e2:	4b36      	ldr	r3, [pc, #216]	@ (80093bc <__ieee754_powf+0x4ec>)
 80092e4:	9a01      	ldr	r2, [sp, #4]
 80092e6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80092ea:	f7f6 ff47 	bl	800017c <__addsf3>
 80092ee:	9a05      	ldr	r2, [sp, #20]
 80092f0:	4606      	mov	r6, r0
 80092f2:	4610      	mov	r0, r2
 80092f4:	f7f6 fff6 	bl	80002e4 <__aeabi_i2f>
 80092f8:	4680      	mov	r8, r0
 80092fa:	4b31      	ldr	r3, [pc, #196]	@ (80093c0 <__ieee754_powf+0x4f0>)
 80092fc:	9a01      	ldr	r2, [sp, #4]
 80092fe:	4631      	mov	r1, r6
 8009300:	f853 a022 	ldr.w	sl, [r3, r2, lsl #2]
 8009304:	4648      	mov	r0, r9
 8009306:	f7f6 ff39 	bl	800017c <__addsf3>
 800930a:	4651      	mov	r1, sl
 800930c:	f7f6 ff36 	bl	800017c <__addsf3>
 8009310:	4641      	mov	r1, r8
 8009312:	f7f6 ff33 	bl	800017c <__addsf3>
 8009316:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 800931a:	f02b 0b0f 	bic.w	fp, fp, #15
 800931e:	4641      	mov	r1, r8
 8009320:	4658      	mov	r0, fp
 8009322:	f7f6 ff29 	bl	8000178 <__aeabi_fsub>
 8009326:	4651      	mov	r1, sl
 8009328:	f7f6 ff26 	bl	8000178 <__aeabi_fsub>
 800932c:	4649      	mov	r1, r9
 800932e:	e6a6      	b.n	800907e <__ieee754_powf+0x1ae>
 8009330:	2200      	movs	r2, #0
 8009332:	e6fa      	b.n	800912a <__ieee754_powf+0x25a>
 8009334:	2301      	movs	r3, #1
 8009336:	e70b      	b.n	8009150 <__ieee754_powf+0x280>
 8009338:	d148      	bne.n	80093cc <__ieee754_powf+0x4fc>
 800933a:	4922      	ldr	r1, [pc, #136]	@ (80093c4 <__ieee754_powf+0x4f4>)
 800933c:	4630      	mov	r0, r6
 800933e:	f7f6 ff1d 	bl	800017c <__addsf3>
 8009342:	4639      	mov	r1, r7
 8009344:	4681      	mov	r9, r0
 8009346:	4620      	mov	r0, r4
 8009348:	f7f6 ff16 	bl	8000178 <__aeabi_fsub>
 800934c:	4601      	mov	r1, r0
 800934e:	4648      	mov	r0, r9
 8009350:	f7f7 f9d8 	bl	8000704 <__aeabi_fcmpgt>
 8009354:	2800      	cmp	r0, #0
 8009356:	f47f aec7 	bne.w	80090e8 <__ieee754_powf+0x218>
 800935a:	2386      	movs	r3, #134	@ 0x86
 800935c:	e03b      	b.n	80093d6 <__ieee754_powf+0x506>
 800935e:	4a1a      	ldr	r2, [pc, #104]	@ (80093c8 <__ieee754_powf+0x4f8>)
 8009360:	4293      	cmp	r3, r2
 8009362:	d907      	bls.n	8009374 <__ieee754_powf+0x4a4>
 8009364:	2100      	movs	r1, #0
 8009366:	4628      	mov	r0, r5
 8009368:	f7f7 f9ae 	bl	80006c8 <__aeabi_fcmplt>
 800936c:	3800      	subs	r0, #0
 800936e:	bf18      	it	ne
 8009370:	2001      	movne	r0, #1
 8009372:	e645      	b.n	8009000 <__ieee754_powf+0x130>
 8009374:	d12a      	bne.n	80093cc <__ieee754_powf+0x4fc>
 8009376:	4639      	mov	r1, r7
 8009378:	f7f6 fefe 	bl	8000178 <__aeabi_fsub>
 800937c:	4631      	mov	r1, r6
 800937e:	f7f7 f9b7 	bl	80006f0 <__aeabi_fcmpge>
 8009382:	2800      	cmp	r0, #0
 8009384:	d0e9      	beq.n	800935a <__ieee754_powf+0x48a>
 8009386:	e7ed      	b.n	8009364 <__ieee754_powf+0x494>
 8009388:	001cc471 	.word	0x001cc471
 800938c:	005db3d6 	.word	0x005db3d6
 8009390:	0800a434 	.word	0x0800a434
 8009394:	3e53f142 	.word	0x3e53f142
 8009398:	3e6c3255 	.word	0x3e6c3255
 800939c:	3e8ba305 	.word	0x3e8ba305
 80093a0:	3eaaaaab 	.word	0x3eaaaaab
 80093a4:	3edb6db7 	.word	0x3edb6db7
 80093a8:	3f19999a 	.word	0x3f19999a
 80093ac:	40400000 	.word	0x40400000
 80093b0:	3f763800 	.word	0x3f763800
 80093b4:	3f76384f 	.word	0x3f76384f
 80093b8:	369dc3a0 	.word	0x369dc3a0
 80093bc:	0800a424 	.word	0x0800a424
 80093c0:	0800a42c 	.word	0x0800a42c
 80093c4:	3338aa3c 	.word	0x3338aa3c
 80093c8:	43160000 	.word	0x43160000
 80093cc:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 80093d0:	f240 809b 	bls.w	800950a <__ieee754_powf+0x63a>
 80093d4:	15db      	asrs	r3, r3, #23
 80093d6:	f44f 0400 	mov.w	r4, #8388608	@ 0x800000
 80093da:	3b7e      	subs	r3, #126	@ 0x7e
 80093dc:	411c      	asrs	r4, r3
 80093de:	4444      	add	r4, r8
 80093e0:	f3c4 53c7 	ubfx	r3, r4, #23, #8
 80093e4:	4961      	ldr	r1, [pc, #388]	@ (800956c <__ieee754_powf+0x69c>)
 80093e6:	3b7f      	subs	r3, #127	@ 0x7f
 80093e8:	4119      	asrs	r1, r3
 80093ea:	4021      	ands	r1, r4
 80093ec:	f3c4 0416 	ubfx	r4, r4, #0, #23
 80093f0:	f1c3 0317 	rsb	r3, r3, #23
 80093f4:	f444 0400 	orr.w	r4, r4, #8388608	@ 0x800000
 80093f8:	4638      	mov	r0, r7
 80093fa:	411c      	asrs	r4, r3
 80093fc:	f1b8 0f00 	cmp.w	r8, #0
 8009400:	bfb8      	it	lt
 8009402:	4264      	neglt	r4, r4
 8009404:	f7f6 feb8 	bl	8000178 <__aeabi_fsub>
 8009408:	4607      	mov	r7, r0
 800940a:	4631      	mov	r1, r6
 800940c:	4638      	mov	r0, r7
 800940e:	f7f6 feb5 	bl	800017c <__addsf3>
 8009412:	f420 687f 	bic.w	r8, r0, #4080	@ 0xff0
 8009416:	f028 080f 	bic.w	r8, r8, #15
 800941a:	4640      	mov	r0, r8
 800941c:	4954      	ldr	r1, [pc, #336]	@ (8009570 <__ieee754_powf+0x6a0>)
 800941e:	f7f6 ffb5 	bl	800038c <__aeabi_fmul>
 8009422:	4639      	mov	r1, r7
 8009424:	4681      	mov	r9, r0
 8009426:	4640      	mov	r0, r8
 8009428:	f7f6 fea6 	bl	8000178 <__aeabi_fsub>
 800942c:	4601      	mov	r1, r0
 800942e:	4630      	mov	r0, r6
 8009430:	f7f6 fea2 	bl	8000178 <__aeabi_fsub>
 8009434:	494f      	ldr	r1, [pc, #316]	@ (8009574 <__ieee754_powf+0x6a4>)
 8009436:	f7f6 ffa9 	bl	800038c <__aeabi_fmul>
 800943a:	494f      	ldr	r1, [pc, #316]	@ (8009578 <__ieee754_powf+0x6a8>)
 800943c:	4606      	mov	r6, r0
 800943e:	4640      	mov	r0, r8
 8009440:	f7f6 ffa4 	bl	800038c <__aeabi_fmul>
 8009444:	4601      	mov	r1, r0
 8009446:	4630      	mov	r0, r6
 8009448:	f7f6 fe98 	bl	800017c <__addsf3>
 800944c:	4607      	mov	r7, r0
 800944e:	4601      	mov	r1, r0
 8009450:	4648      	mov	r0, r9
 8009452:	f7f6 fe93 	bl	800017c <__addsf3>
 8009456:	4649      	mov	r1, r9
 8009458:	4606      	mov	r6, r0
 800945a:	f7f6 fe8d 	bl	8000178 <__aeabi_fsub>
 800945e:	4601      	mov	r1, r0
 8009460:	4638      	mov	r0, r7
 8009462:	f7f6 fe89 	bl	8000178 <__aeabi_fsub>
 8009466:	4631      	mov	r1, r6
 8009468:	4680      	mov	r8, r0
 800946a:	4630      	mov	r0, r6
 800946c:	f7f6 ff8e 	bl	800038c <__aeabi_fmul>
 8009470:	4607      	mov	r7, r0
 8009472:	4942      	ldr	r1, [pc, #264]	@ (800957c <__ieee754_powf+0x6ac>)
 8009474:	f7f6 ff8a 	bl	800038c <__aeabi_fmul>
 8009478:	4941      	ldr	r1, [pc, #260]	@ (8009580 <__ieee754_powf+0x6b0>)
 800947a:	f7f6 fe7d 	bl	8000178 <__aeabi_fsub>
 800947e:	4639      	mov	r1, r7
 8009480:	f7f6 ff84 	bl	800038c <__aeabi_fmul>
 8009484:	493f      	ldr	r1, [pc, #252]	@ (8009584 <__ieee754_powf+0x6b4>)
 8009486:	f7f6 fe79 	bl	800017c <__addsf3>
 800948a:	4639      	mov	r1, r7
 800948c:	f7f6 ff7e 	bl	800038c <__aeabi_fmul>
 8009490:	493d      	ldr	r1, [pc, #244]	@ (8009588 <__ieee754_powf+0x6b8>)
 8009492:	f7f6 fe71 	bl	8000178 <__aeabi_fsub>
 8009496:	4639      	mov	r1, r7
 8009498:	f7f6 ff78 	bl	800038c <__aeabi_fmul>
 800949c:	493b      	ldr	r1, [pc, #236]	@ (800958c <__ieee754_powf+0x6bc>)
 800949e:	f7f6 fe6d 	bl	800017c <__addsf3>
 80094a2:	4639      	mov	r1, r7
 80094a4:	f7f6 ff72 	bl	800038c <__aeabi_fmul>
 80094a8:	4601      	mov	r1, r0
 80094aa:	4630      	mov	r0, r6
 80094ac:	f7f6 fe64 	bl	8000178 <__aeabi_fsub>
 80094b0:	4607      	mov	r7, r0
 80094b2:	4601      	mov	r1, r0
 80094b4:	4630      	mov	r0, r6
 80094b6:	f7f6 ff69 	bl	800038c <__aeabi_fmul>
 80094ba:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80094be:	4681      	mov	r9, r0
 80094c0:	4638      	mov	r0, r7
 80094c2:	f7f6 fe59 	bl	8000178 <__aeabi_fsub>
 80094c6:	4601      	mov	r1, r0
 80094c8:	4648      	mov	r0, r9
 80094ca:	f7f7 f813 	bl	80004f4 <__aeabi_fdiv>
 80094ce:	4641      	mov	r1, r8
 80094d0:	4607      	mov	r7, r0
 80094d2:	4630      	mov	r0, r6
 80094d4:	f7f6 ff5a 	bl	800038c <__aeabi_fmul>
 80094d8:	4641      	mov	r1, r8
 80094da:	f7f6 fe4f 	bl	800017c <__addsf3>
 80094de:	4601      	mov	r1, r0
 80094e0:	4638      	mov	r0, r7
 80094e2:	f7f6 fe49 	bl	8000178 <__aeabi_fsub>
 80094e6:	4631      	mov	r1, r6
 80094e8:	f7f6 fe46 	bl	8000178 <__aeabi_fsub>
 80094ec:	4601      	mov	r1, r0
 80094ee:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80094f2:	f7f6 fe41 	bl	8000178 <__aeabi_fsub>
 80094f6:	eb00 53c4 	add.w	r3, r0, r4, lsl #23
 80094fa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80094fe:	da06      	bge.n	800950e <__ieee754_powf+0x63e>
 8009500:	4621      	mov	r1, r4
 8009502:	f000 f9af 	bl	8009864 <scalbnf>
 8009506:	4629      	mov	r1, r5
 8009508:	e549      	b.n	8008f9e <__ieee754_powf+0xce>
 800950a:	2400      	movs	r4, #0
 800950c:	e77d      	b.n	800940a <__ieee754_powf+0x53a>
 800950e:	4618      	mov	r0, r3
 8009510:	e7f9      	b.n	8009506 <__ieee754_powf+0x636>
 8009512:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8009516:	e536      	b.n	8008f86 <__ieee754_powf+0xb6>
 8009518:	4639      	mov	r1, r7
 800951a:	e534      	b.n	8008f86 <__ieee754_powf+0xb6>
 800951c:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 8009520:	f43f ad23 	beq.w	8008f6a <__ieee754_powf+0x9a>
 8009524:	2502      	movs	r5, #2
 8009526:	4648      	mov	r0, r9
 8009528:	f000 f998 	bl	800985c <fabsf>
 800952c:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8009530:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8009534:	46c2      	mov	sl, r8
 8009536:	4601      	mov	r1, r0
 8009538:	d003      	beq.n	8009542 <__ieee754_powf+0x672>
 800953a:	f1b8 0f00 	cmp.w	r8, #0
 800953e:	f47f ad43 	bne.w	8008fc8 <__ieee754_powf+0xf8>
 8009542:	2c00      	cmp	r4, #0
 8009544:	da04      	bge.n	8009550 <__ieee754_powf+0x680>
 8009546:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800954a:	f7f6 ffd3 	bl	80004f4 <__aeabi_fdiv>
 800954e:	4601      	mov	r1, r0
 8009550:	2e00      	cmp	r6, #0
 8009552:	f6bf ad18 	bge.w	8008f86 <__ieee754_powf+0xb6>
 8009556:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800955a:	ea58 0805 	orrs.w	r8, r8, r5
 800955e:	f47f ad2e 	bne.w	8008fbe <__ieee754_powf+0xee>
 8009562:	4608      	mov	r0, r1
 8009564:	f7f6 fe08 	bl	8000178 <__aeabi_fsub>
 8009568:	4601      	mov	r1, r0
 800956a:	e4f8      	b.n	8008f5e <__ieee754_powf+0x8e>
 800956c:	ff800000 	.word	0xff800000
 8009570:	3f317200 	.word	0x3f317200
 8009574:	3f317218 	.word	0x3f317218
 8009578:	35bfbe8c 	.word	0x35bfbe8c
 800957c:	3331bb4c 	.word	0x3331bb4c
 8009580:	35ddea0e 	.word	0x35ddea0e
 8009584:	388ab355 	.word	0x388ab355
 8009588:	3b360b61 	.word	0x3b360b61
 800958c:	3e2aaaab 	.word	0x3e2aaaab

08009590 <__ieee754_rem_pio2f>:
 8009590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009594:	4aa4      	ldr	r2, [pc, #656]	@ (8009828 <__ieee754_rem_pio2f+0x298>)
 8009596:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 800959a:	4590      	cmp	r8, r2
 800959c:	460c      	mov	r4, r1
 800959e:	4682      	mov	sl, r0
 80095a0:	b087      	sub	sp, #28
 80095a2:	d804      	bhi.n	80095ae <__ieee754_rem_pio2f+0x1e>
 80095a4:	2300      	movs	r3, #0
 80095a6:	6008      	str	r0, [r1, #0]
 80095a8:	604b      	str	r3, [r1, #4]
 80095aa:	2500      	movs	r5, #0
 80095ac:	e01d      	b.n	80095ea <__ieee754_rem_pio2f+0x5a>
 80095ae:	4a9f      	ldr	r2, [pc, #636]	@ (800982c <__ieee754_rem_pio2f+0x29c>)
 80095b0:	4590      	cmp	r8, r2
 80095b2:	d84f      	bhi.n	8009654 <__ieee754_rem_pio2f+0xc4>
 80095b4:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 80095b8:	2800      	cmp	r0, #0
 80095ba:	499d      	ldr	r1, [pc, #628]	@ (8009830 <__ieee754_rem_pio2f+0x2a0>)
 80095bc:	4f9d      	ldr	r7, [pc, #628]	@ (8009834 <__ieee754_rem_pio2f+0x2a4>)
 80095be:	f025 050f 	bic.w	r5, r5, #15
 80095c2:	dd24      	ble.n	800960e <__ieee754_rem_pio2f+0x7e>
 80095c4:	f7f6 fdd8 	bl	8000178 <__aeabi_fsub>
 80095c8:	42bd      	cmp	r5, r7
 80095ca:	4606      	mov	r6, r0
 80095cc:	d011      	beq.n	80095f2 <__ieee754_rem_pio2f+0x62>
 80095ce:	499a      	ldr	r1, [pc, #616]	@ (8009838 <__ieee754_rem_pio2f+0x2a8>)
 80095d0:	f7f6 fdd2 	bl	8000178 <__aeabi_fsub>
 80095d4:	4601      	mov	r1, r0
 80095d6:	4605      	mov	r5, r0
 80095d8:	4630      	mov	r0, r6
 80095da:	f7f6 fdcd 	bl	8000178 <__aeabi_fsub>
 80095de:	4996      	ldr	r1, [pc, #600]	@ (8009838 <__ieee754_rem_pio2f+0x2a8>)
 80095e0:	f7f6 fdca 	bl	8000178 <__aeabi_fsub>
 80095e4:	6025      	str	r5, [r4, #0]
 80095e6:	2501      	movs	r5, #1
 80095e8:	6060      	str	r0, [r4, #4]
 80095ea:	4628      	mov	r0, r5
 80095ec:	b007      	add	sp, #28
 80095ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095f2:	4992      	ldr	r1, [pc, #584]	@ (800983c <__ieee754_rem_pio2f+0x2ac>)
 80095f4:	f7f6 fdc0 	bl	8000178 <__aeabi_fsub>
 80095f8:	4991      	ldr	r1, [pc, #580]	@ (8009840 <__ieee754_rem_pio2f+0x2b0>)
 80095fa:	4606      	mov	r6, r0
 80095fc:	f7f6 fdbc 	bl	8000178 <__aeabi_fsub>
 8009600:	4601      	mov	r1, r0
 8009602:	4605      	mov	r5, r0
 8009604:	4630      	mov	r0, r6
 8009606:	f7f6 fdb7 	bl	8000178 <__aeabi_fsub>
 800960a:	498d      	ldr	r1, [pc, #564]	@ (8009840 <__ieee754_rem_pio2f+0x2b0>)
 800960c:	e7e8      	b.n	80095e0 <__ieee754_rem_pio2f+0x50>
 800960e:	f7f6 fdb5 	bl	800017c <__addsf3>
 8009612:	42bd      	cmp	r5, r7
 8009614:	4606      	mov	r6, r0
 8009616:	d00f      	beq.n	8009638 <__ieee754_rem_pio2f+0xa8>
 8009618:	4987      	ldr	r1, [pc, #540]	@ (8009838 <__ieee754_rem_pio2f+0x2a8>)
 800961a:	f7f6 fdaf 	bl	800017c <__addsf3>
 800961e:	4601      	mov	r1, r0
 8009620:	4605      	mov	r5, r0
 8009622:	4630      	mov	r0, r6
 8009624:	f7f6 fda8 	bl	8000178 <__aeabi_fsub>
 8009628:	4983      	ldr	r1, [pc, #524]	@ (8009838 <__ieee754_rem_pio2f+0x2a8>)
 800962a:	f7f6 fda7 	bl	800017c <__addsf3>
 800962e:	6025      	str	r5, [r4, #0]
 8009630:	6060      	str	r0, [r4, #4]
 8009632:	f04f 35ff 	mov.w	r5, #4294967295
 8009636:	e7d8      	b.n	80095ea <__ieee754_rem_pio2f+0x5a>
 8009638:	4980      	ldr	r1, [pc, #512]	@ (800983c <__ieee754_rem_pio2f+0x2ac>)
 800963a:	f7f6 fd9f 	bl	800017c <__addsf3>
 800963e:	4980      	ldr	r1, [pc, #512]	@ (8009840 <__ieee754_rem_pio2f+0x2b0>)
 8009640:	4606      	mov	r6, r0
 8009642:	f7f6 fd9b 	bl	800017c <__addsf3>
 8009646:	4601      	mov	r1, r0
 8009648:	4605      	mov	r5, r0
 800964a:	4630      	mov	r0, r6
 800964c:	f7f6 fd94 	bl	8000178 <__aeabi_fsub>
 8009650:	497b      	ldr	r1, [pc, #492]	@ (8009840 <__ieee754_rem_pio2f+0x2b0>)
 8009652:	e7ea      	b.n	800962a <__ieee754_rem_pio2f+0x9a>
 8009654:	4a7b      	ldr	r2, [pc, #492]	@ (8009844 <__ieee754_rem_pio2f+0x2b4>)
 8009656:	4590      	cmp	r8, r2
 8009658:	f200 8095 	bhi.w	8009786 <__ieee754_rem_pio2f+0x1f6>
 800965c:	f000 f8fe 	bl	800985c <fabsf>
 8009660:	4979      	ldr	r1, [pc, #484]	@ (8009848 <__ieee754_rem_pio2f+0x2b8>)
 8009662:	4606      	mov	r6, r0
 8009664:	f7f6 fe92 	bl	800038c <__aeabi_fmul>
 8009668:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800966c:	f7f6 fd86 	bl	800017c <__addsf3>
 8009670:	f7f7 f868 	bl	8000744 <__aeabi_f2iz>
 8009674:	4605      	mov	r5, r0
 8009676:	f7f6 fe35 	bl	80002e4 <__aeabi_i2f>
 800967a:	496d      	ldr	r1, [pc, #436]	@ (8009830 <__ieee754_rem_pio2f+0x2a0>)
 800967c:	4681      	mov	r9, r0
 800967e:	f7f6 fe85 	bl	800038c <__aeabi_fmul>
 8009682:	4601      	mov	r1, r0
 8009684:	4630      	mov	r0, r6
 8009686:	f7f6 fd77 	bl	8000178 <__aeabi_fsub>
 800968a:	496b      	ldr	r1, [pc, #428]	@ (8009838 <__ieee754_rem_pio2f+0x2a8>)
 800968c:	4607      	mov	r7, r0
 800968e:	4648      	mov	r0, r9
 8009690:	f7f6 fe7c 	bl	800038c <__aeabi_fmul>
 8009694:	2d1f      	cmp	r5, #31
 8009696:	4606      	mov	r6, r0
 8009698:	dc0e      	bgt.n	80096b8 <__ieee754_rem_pio2f+0x128>
 800969a:	4a6c      	ldr	r2, [pc, #432]	@ (800984c <__ieee754_rem_pio2f+0x2bc>)
 800969c:	1e69      	subs	r1, r5, #1
 800969e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80096a2:	f02a 4300 	bic.w	r3, sl, #2147483648	@ 0x80000000
 80096a6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d004      	beq.n	80096b8 <__ieee754_rem_pio2f+0x128>
 80096ae:	4631      	mov	r1, r6
 80096b0:	4638      	mov	r0, r7
 80096b2:	f7f6 fd61 	bl	8000178 <__aeabi_fsub>
 80096b6:	e00b      	b.n	80096d0 <__ieee754_rem_pio2f+0x140>
 80096b8:	4631      	mov	r1, r6
 80096ba:	4638      	mov	r0, r7
 80096bc:	f7f6 fd5c 	bl	8000178 <__aeabi_fsub>
 80096c0:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80096c4:	ebc3 53d8 	rsb	r3, r3, r8, lsr #23
 80096c8:	2b08      	cmp	r3, #8
 80096ca:	ea4f 5be8 	mov.w	fp, r8, asr #23
 80096ce:	dc01      	bgt.n	80096d4 <__ieee754_rem_pio2f+0x144>
 80096d0:	6020      	str	r0, [r4, #0]
 80096d2:	e026      	b.n	8009722 <__ieee754_rem_pio2f+0x192>
 80096d4:	4959      	ldr	r1, [pc, #356]	@ (800983c <__ieee754_rem_pio2f+0x2ac>)
 80096d6:	4648      	mov	r0, r9
 80096d8:	f7f6 fe58 	bl	800038c <__aeabi_fmul>
 80096dc:	4606      	mov	r6, r0
 80096de:	4601      	mov	r1, r0
 80096e0:	4638      	mov	r0, r7
 80096e2:	f7f6 fd49 	bl	8000178 <__aeabi_fsub>
 80096e6:	4601      	mov	r1, r0
 80096e8:	4680      	mov	r8, r0
 80096ea:	4638      	mov	r0, r7
 80096ec:	f7f6 fd44 	bl	8000178 <__aeabi_fsub>
 80096f0:	4631      	mov	r1, r6
 80096f2:	f7f6 fd41 	bl	8000178 <__aeabi_fsub>
 80096f6:	4606      	mov	r6, r0
 80096f8:	4951      	ldr	r1, [pc, #324]	@ (8009840 <__ieee754_rem_pio2f+0x2b0>)
 80096fa:	4648      	mov	r0, r9
 80096fc:	f7f6 fe46 	bl	800038c <__aeabi_fmul>
 8009700:	4631      	mov	r1, r6
 8009702:	f7f6 fd39 	bl	8000178 <__aeabi_fsub>
 8009706:	4601      	mov	r1, r0
 8009708:	4606      	mov	r6, r0
 800970a:	4640      	mov	r0, r8
 800970c:	f7f6 fd34 	bl	8000178 <__aeabi_fsub>
 8009710:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8009714:	ebab 0b03 	sub.w	fp, fp, r3
 8009718:	f1bb 0f19 	cmp.w	fp, #25
 800971c:	dc18      	bgt.n	8009750 <__ieee754_rem_pio2f+0x1c0>
 800971e:	4647      	mov	r7, r8
 8009720:	6020      	str	r0, [r4, #0]
 8009722:	f8d4 8000 	ldr.w	r8, [r4]
 8009726:	4638      	mov	r0, r7
 8009728:	4641      	mov	r1, r8
 800972a:	f7f6 fd25 	bl	8000178 <__aeabi_fsub>
 800972e:	4631      	mov	r1, r6
 8009730:	f7f6 fd22 	bl	8000178 <__aeabi_fsub>
 8009734:	f1ba 0f00 	cmp.w	sl, #0
 8009738:	6060      	str	r0, [r4, #4]
 800973a:	f6bf af56 	bge.w	80095ea <__ieee754_rem_pio2f+0x5a>
 800973e:	f108 4800 	add.w	r8, r8, #2147483648	@ 0x80000000
 8009742:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8009746:	f8c4 8000 	str.w	r8, [r4]
 800974a:	6060      	str	r0, [r4, #4]
 800974c:	426d      	negs	r5, r5
 800974e:	e74c      	b.n	80095ea <__ieee754_rem_pio2f+0x5a>
 8009750:	493f      	ldr	r1, [pc, #252]	@ (8009850 <__ieee754_rem_pio2f+0x2c0>)
 8009752:	4648      	mov	r0, r9
 8009754:	f7f6 fe1a 	bl	800038c <__aeabi_fmul>
 8009758:	4606      	mov	r6, r0
 800975a:	4601      	mov	r1, r0
 800975c:	4640      	mov	r0, r8
 800975e:	f7f6 fd0b 	bl	8000178 <__aeabi_fsub>
 8009762:	4601      	mov	r1, r0
 8009764:	4607      	mov	r7, r0
 8009766:	4640      	mov	r0, r8
 8009768:	f7f6 fd06 	bl	8000178 <__aeabi_fsub>
 800976c:	4631      	mov	r1, r6
 800976e:	f7f6 fd03 	bl	8000178 <__aeabi_fsub>
 8009772:	4606      	mov	r6, r0
 8009774:	4937      	ldr	r1, [pc, #220]	@ (8009854 <__ieee754_rem_pio2f+0x2c4>)
 8009776:	4648      	mov	r0, r9
 8009778:	f7f6 fe08 	bl	800038c <__aeabi_fmul>
 800977c:	4631      	mov	r1, r6
 800977e:	f7f6 fcfb 	bl	8000178 <__aeabi_fsub>
 8009782:	4606      	mov	r6, r0
 8009784:	e793      	b.n	80096ae <__ieee754_rem_pio2f+0x11e>
 8009786:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800978a:	d305      	bcc.n	8009798 <__ieee754_rem_pio2f+0x208>
 800978c:	4601      	mov	r1, r0
 800978e:	f7f6 fcf3 	bl	8000178 <__aeabi_fsub>
 8009792:	6060      	str	r0, [r4, #4]
 8009794:	6020      	str	r0, [r4, #0]
 8009796:	e708      	b.n	80095aa <__ieee754_rem_pio2f+0x1a>
 8009798:	ea4f 56e8 	mov.w	r6, r8, asr #23
 800979c:	3e86      	subs	r6, #134	@ 0x86
 800979e:	eba8 58c6 	sub.w	r8, r8, r6, lsl #23
 80097a2:	4640      	mov	r0, r8
 80097a4:	f7f6 ffce 	bl	8000744 <__aeabi_f2iz>
 80097a8:	f7f6 fd9c 	bl	80002e4 <__aeabi_i2f>
 80097ac:	4601      	mov	r1, r0
 80097ae:	9003      	str	r0, [sp, #12]
 80097b0:	4640      	mov	r0, r8
 80097b2:	f7f6 fce1 	bl	8000178 <__aeabi_fsub>
 80097b6:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 80097ba:	f7f6 fde7 	bl	800038c <__aeabi_fmul>
 80097be:	4607      	mov	r7, r0
 80097c0:	f7f6 ffc0 	bl	8000744 <__aeabi_f2iz>
 80097c4:	f7f6 fd8e 	bl	80002e4 <__aeabi_i2f>
 80097c8:	4601      	mov	r1, r0
 80097ca:	9004      	str	r0, [sp, #16]
 80097cc:	4605      	mov	r5, r0
 80097ce:	4638      	mov	r0, r7
 80097d0:	f7f6 fcd2 	bl	8000178 <__aeabi_fsub>
 80097d4:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 80097d8:	f7f6 fdd8 	bl	800038c <__aeabi_fmul>
 80097dc:	2100      	movs	r1, #0
 80097de:	9005      	str	r0, [sp, #20]
 80097e0:	f7f6 ff68 	bl	80006b4 <__aeabi_fcmpeq>
 80097e4:	b1f0      	cbz	r0, 8009824 <__ieee754_rem_pio2f+0x294>
 80097e6:	2100      	movs	r1, #0
 80097e8:	4628      	mov	r0, r5
 80097ea:	f7f6 ff63 	bl	80006b4 <__aeabi_fcmpeq>
 80097ee:	2800      	cmp	r0, #0
 80097f0:	bf14      	ite	ne
 80097f2:	2301      	movne	r3, #1
 80097f4:	2302      	moveq	r3, #2
 80097f6:	4a18      	ldr	r2, [pc, #96]	@ (8009858 <__ieee754_rem_pio2f+0x2c8>)
 80097f8:	4621      	mov	r1, r4
 80097fa:	9201      	str	r2, [sp, #4]
 80097fc:	2202      	movs	r2, #2
 80097fe:	a803      	add	r0, sp, #12
 8009800:	9200      	str	r2, [sp, #0]
 8009802:	4632      	mov	r2, r6
 8009804:	f000 f898 	bl	8009938 <__kernel_rem_pio2f>
 8009808:	f1ba 0f00 	cmp.w	sl, #0
 800980c:	4605      	mov	r5, r0
 800980e:	f6bf aeec 	bge.w	80095ea <__ieee754_rem_pio2f+0x5a>
 8009812:	6823      	ldr	r3, [r4, #0]
 8009814:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8009818:	6023      	str	r3, [r4, #0]
 800981a:	6863      	ldr	r3, [r4, #4]
 800981c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8009820:	6063      	str	r3, [r4, #4]
 8009822:	e793      	b.n	800974c <__ieee754_rem_pio2f+0x1bc>
 8009824:	2303      	movs	r3, #3
 8009826:	e7e6      	b.n	80097f6 <__ieee754_rem_pio2f+0x266>
 8009828:	3f490fd8 	.word	0x3f490fd8
 800982c:	4016cbe3 	.word	0x4016cbe3
 8009830:	3fc90f80 	.word	0x3fc90f80
 8009834:	3fc90fd0 	.word	0x3fc90fd0
 8009838:	37354443 	.word	0x37354443
 800983c:	37354400 	.word	0x37354400
 8009840:	2e85a308 	.word	0x2e85a308
 8009844:	43490f80 	.word	0x43490f80
 8009848:	3f22f984 	.word	0x3f22f984
 800984c:	0800a43c 	.word	0x0800a43c
 8009850:	2e85a300 	.word	0x2e85a300
 8009854:	248d3132 	.word	0x248d3132
 8009858:	0800a4bc 	.word	0x0800a4bc

0800985c <fabsf>:
 800985c:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8009860:	4770      	bx	lr
	...

08009864 <scalbnf>:
 8009864:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8009868:	b538      	push	{r3, r4, r5, lr}
 800986a:	4603      	mov	r3, r0
 800986c:	460d      	mov	r5, r1
 800986e:	4604      	mov	r4, r0
 8009870:	d02e      	beq.n	80098d0 <scalbnf+0x6c>
 8009872:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8009876:	d304      	bcc.n	8009882 <scalbnf+0x1e>
 8009878:	4601      	mov	r1, r0
 800987a:	f7f6 fc7f 	bl	800017c <__addsf3>
 800987e:	4603      	mov	r3, r0
 8009880:	e026      	b.n	80098d0 <scalbnf+0x6c>
 8009882:	f010 4fff 	tst.w	r0, #2139095040	@ 0x7f800000
 8009886:	d118      	bne.n	80098ba <scalbnf+0x56>
 8009888:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
 800988c:	f7f6 fd7e 	bl	800038c <__aeabi_fmul>
 8009890:	4a17      	ldr	r2, [pc, #92]	@ (80098f0 <scalbnf+0x8c>)
 8009892:	4603      	mov	r3, r0
 8009894:	4295      	cmp	r5, r2
 8009896:	db0c      	blt.n	80098b2 <scalbnf+0x4e>
 8009898:	4604      	mov	r4, r0
 800989a:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800989e:	3a19      	subs	r2, #25
 80098a0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80098a4:	428d      	cmp	r5, r1
 80098a6:	dd0a      	ble.n	80098be <scalbnf+0x5a>
 80098a8:	4912      	ldr	r1, [pc, #72]	@ (80098f4 <scalbnf+0x90>)
 80098aa:	4618      	mov	r0, r3
 80098ac:	f361 001e 	bfi	r0, r1, #0, #31
 80098b0:	e000      	b.n	80098b4 <scalbnf+0x50>
 80098b2:	4911      	ldr	r1, [pc, #68]	@ (80098f8 <scalbnf+0x94>)
 80098b4:	f7f6 fd6a 	bl	800038c <__aeabi_fmul>
 80098b8:	e7e1      	b.n	800987e <scalbnf+0x1a>
 80098ba:	0dd2      	lsrs	r2, r2, #23
 80098bc:	e7f0      	b.n	80098a0 <scalbnf+0x3c>
 80098be:	1951      	adds	r1, r2, r5
 80098c0:	29fe      	cmp	r1, #254	@ 0xfe
 80098c2:	dcf1      	bgt.n	80098a8 <scalbnf+0x44>
 80098c4:	2900      	cmp	r1, #0
 80098c6:	dd05      	ble.n	80098d4 <scalbnf+0x70>
 80098c8:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 80098cc:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 80098d0:	4618      	mov	r0, r3
 80098d2:	bd38      	pop	{r3, r4, r5, pc}
 80098d4:	f111 0f16 	cmn.w	r1, #22
 80098d8:	da01      	bge.n	80098de <scalbnf+0x7a>
 80098da:	4907      	ldr	r1, [pc, #28]	@ (80098f8 <scalbnf+0x94>)
 80098dc:	e7e5      	b.n	80098aa <scalbnf+0x46>
 80098de:	f101 0019 	add.w	r0, r1, #25
 80098e2:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 80098e6:	f04f 514c 	mov.w	r1, #855638016	@ 0x33000000
 80098ea:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 80098ee:	e7e1      	b.n	80098b4 <scalbnf+0x50>
 80098f0:	ffff3cb0 	.word	0xffff3cb0
 80098f4:	7149f2ca 	.word	0x7149f2ca
 80098f8:	0da24260 	.word	0x0da24260

080098fc <with_errnof>:
 80098fc:	b538      	push	{r3, r4, r5, lr}
 80098fe:	4604      	mov	r4, r0
 8009900:	460d      	mov	r5, r1
 8009902:	f7fe f893 	bl	8007a2c <__errno>
 8009906:	6005      	str	r5, [r0, #0]
 8009908:	4620      	mov	r0, r4
 800990a:	bd38      	pop	{r3, r4, r5, pc}

0800990c <xflowf>:
 800990c:	b508      	push	{r3, lr}
 800990e:	b140      	cbz	r0, 8009922 <xflowf+0x16>
 8009910:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 8009914:	f7f6 fd3a 	bl	800038c <__aeabi_fmul>
 8009918:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800991c:	2122      	movs	r1, #34	@ 0x22
 800991e:	f7ff bfed 	b.w	80098fc <with_errnof>
 8009922:	4608      	mov	r0, r1
 8009924:	e7f6      	b.n	8009914 <xflowf+0x8>

08009926 <__math_uflowf>:
 8009926:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 800992a:	f7ff bfef 	b.w	800990c <xflowf>

0800992e <__math_oflowf>:
 800992e:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 8009932:	f7ff bfeb 	b.w	800990c <xflowf>
	...

08009938 <__kernel_rem_pio2f>:
 8009938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800993c:	b0db      	sub	sp, #364	@ 0x16c
 800993e:	9202      	str	r2, [sp, #8]
 8009940:	9304      	str	r3, [sp, #16]
 8009942:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8009944:	4bac      	ldr	r3, [pc, #688]	@ (8009bf8 <__kernel_rem_pio2f+0x2c0>)
 8009946:	9005      	str	r0, [sp, #20]
 8009948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800994c:	9100      	str	r1, [sp, #0]
 800994e:	9301      	str	r3, [sp, #4]
 8009950:	9b04      	ldr	r3, [sp, #16]
 8009952:	3b01      	subs	r3, #1
 8009954:	9303      	str	r3, [sp, #12]
 8009956:	9b02      	ldr	r3, [sp, #8]
 8009958:	1d1a      	adds	r2, r3, #4
 800995a:	f2c0 8099 	blt.w	8009a90 <__kernel_rem_pio2f+0x158>
 800995e:	1edc      	subs	r4, r3, #3
 8009960:	bf48      	it	mi
 8009962:	1d1c      	addmi	r4, r3, #4
 8009964:	10e4      	asrs	r4, r4, #3
 8009966:	2500      	movs	r5, #0
 8009968:	f04f 0b00 	mov.w	fp, #0
 800996c:	1c67      	adds	r7, r4, #1
 800996e:	00fb      	lsls	r3, r7, #3
 8009970:	9306      	str	r3, [sp, #24]
 8009972:	9b02      	ldr	r3, [sp, #8]
 8009974:	9a03      	ldr	r2, [sp, #12]
 8009976:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 800997a:	9b01      	ldr	r3, [sp, #4]
 800997c:	eba4 0802 	sub.w	r8, r4, r2
 8009980:	eb03 0902 	add.w	r9, r3, r2
 8009984:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 8009986:	ae1e      	add	r6, sp, #120	@ 0x78
 8009988:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 800998c:	454d      	cmp	r5, r9
 800998e:	f340 8081 	ble.w	8009a94 <__kernel_rem_pio2f+0x15c>
 8009992:	9a04      	ldr	r2, [sp, #16]
 8009994:	ab1e      	add	r3, sp, #120	@ 0x78
 8009996:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 800999a:	f04f 0900 	mov.w	r9, #0
 800999e:	2300      	movs	r3, #0
 80099a0:	f50d 7a8c 	add.w	sl, sp, #280	@ 0x118
 80099a4:	9a01      	ldr	r2, [sp, #4]
 80099a6:	4591      	cmp	r9, r2
 80099a8:	f340 809a 	ble.w	8009ae0 <__kernel_rem_pio2f+0x1a8>
 80099ac:	4613      	mov	r3, r2
 80099ae:	aa0a      	add	r2, sp, #40	@ 0x28
 80099b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80099b4:	9308      	str	r3, [sp, #32]
 80099b6:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 80099b8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80099bc:	9c01      	ldr	r4, [sp, #4]
 80099be:	9307      	str	r3, [sp, #28]
 80099c0:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 80099c4:	4646      	mov	r6, r8
 80099c6:	4625      	mov	r5, r4
 80099c8:	f04f 4987 	mov.w	r9, #1132462080	@ 0x43800000
 80099cc:	ab5a      	add	r3, sp, #360	@ 0x168
 80099ce:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80099d2:	f853 bc50 	ldr.w	fp, [r3, #-80]
 80099d6:	f50d 7a8c 	add.w	sl, sp, #280	@ 0x118
 80099da:	2d00      	cmp	r5, #0
 80099dc:	f300 8085 	bgt.w	8009aea <__kernel_rem_pio2f+0x1b2>
 80099e0:	4639      	mov	r1, r7
 80099e2:	4658      	mov	r0, fp
 80099e4:	f7ff ff3e 	bl	8009864 <scalbnf>
 80099e8:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 80099ec:	4605      	mov	r5, r0
 80099ee:	f7f6 fccd 	bl	800038c <__aeabi_fmul>
 80099f2:	f000 fa3f 	bl	8009e74 <floorf>
 80099f6:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 80099fa:	f7f6 fcc7 	bl	800038c <__aeabi_fmul>
 80099fe:	4601      	mov	r1, r0
 8009a00:	4628      	mov	r0, r5
 8009a02:	f7f6 fbb9 	bl	8000178 <__aeabi_fsub>
 8009a06:	4605      	mov	r5, r0
 8009a08:	f7f6 fe9c 	bl	8000744 <__aeabi_f2iz>
 8009a0c:	4606      	mov	r6, r0
 8009a0e:	f7f6 fc69 	bl	80002e4 <__aeabi_i2f>
 8009a12:	4601      	mov	r1, r0
 8009a14:	4628      	mov	r0, r5
 8009a16:	f7f6 fbaf 	bl	8000178 <__aeabi_fsub>
 8009a1a:	2f00      	cmp	r7, #0
 8009a1c:	4681      	mov	r9, r0
 8009a1e:	f340 8081 	ble.w	8009b24 <__kernel_rem_pio2f+0x1ec>
 8009a22:	1e62      	subs	r2, r4, #1
 8009a24:	ab0a      	add	r3, sp, #40	@ 0x28
 8009a26:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8009a2a:	f1c7 0108 	rsb	r1, r7, #8
 8009a2e:	fa45 f301 	asr.w	r3, r5, r1
 8009a32:	441e      	add	r6, r3
 8009a34:	408b      	lsls	r3, r1
 8009a36:	1aed      	subs	r5, r5, r3
 8009a38:	ab0a      	add	r3, sp, #40	@ 0x28
 8009a3a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009a3e:	f1c7 0307 	rsb	r3, r7, #7
 8009a42:	411d      	asrs	r5, r3
 8009a44:	2d00      	cmp	r5, #0
 8009a46:	dd7a      	ble.n	8009b3e <__kernel_rem_pio2f+0x206>
 8009a48:	2200      	movs	r2, #0
 8009a4a:	4692      	mov	sl, r2
 8009a4c:	3601      	adds	r6, #1
 8009a4e:	4294      	cmp	r4, r2
 8009a50:	f300 80aa 	bgt.w	8009ba8 <__kernel_rem_pio2f+0x270>
 8009a54:	2f00      	cmp	r7, #0
 8009a56:	dd05      	ble.n	8009a64 <__kernel_rem_pio2f+0x12c>
 8009a58:	2f01      	cmp	r7, #1
 8009a5a:	f000 80b6 	beq.w	8009bca <__kernel_rem_pio2f+0x292>
 8009a5e:	2f02      	cmp	r7, #2
 8009a60:	f000 80bd 	beq.w	8009bde <__kernel_rem_pio2f+0x2a6>
 8009a64:	2d02      	cmp	r5, #2
 8009a66:	d16a      	bne.n	8009b3e <__kernel_rem_pio2f+0x206>
 8009a68:	4649      	mov	r1, r9
 8009a6a:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8009a6e:	f7f6 fb83 	bl	8000178 <__aeabi_fsub>
 8009a72:	4681      	mov	r9, r0
 8009a74:	f1ba 0f00 	cmp.w	sl, #0
 8009a78:	d061      	beq.n	8009b3e <__kernel_rem_pio2f+0x206>
 8009a7a:	4639      	mov	r1, r7
 8009a7c:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8009a80:	f7ff fef0 	bl	8009864 <scalbnf>
 8009a84:	4601      	mov	r1, r0
 8009a86:	4648      	mov	r0, r9
 8009a88:	f7f6 fb76 	bl	8000178 <__aeabi_fsub>
 8009a8c:	4681      	mov	r9, r0
 8009a8e:	e056      	b.n	8009b3e <__kernel_rem_pio2f+0x206>
 8009a90:	2400      	movs	r4, #0
 8009a92:	e768      	b.n	8009966 <__kernel_rem_pio2f+0x2e>
 8009a94:	eb18 0f05 	cmn.w	r8, r5
 8009a98:	d407      	bmi.n	8009aaa <__kernel_rem_pio2f+0x172>
 8009a9a:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 8009a9e:	f7f6 fc21 	bl	80002e4 <__aeabi_i2f>
 8009aa2:	f846 0b04 	str.w	r0, [r6], #4
 8009aa6:	3501      	adds	r5, #1
 8009aa8:	e770      	b.n	800998c <__kernel_rem_pio2f+0x54>
 8009aaa:	4658      	mov	r0, fp
 8009aac:	e7f9      	b.n	8009aa2 <__kernel_rem_pio2f+0x16a>
 8009aae:	9307      	str	r3, [sp, #28]
 8009ab0:	9b05      	ldr	r3, [sp, #20]
 8009ab2:	f85b 1d04 	ldr.w	r1, [fp, #-4]!
 8009ab6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8009aba:	f7f6 fc67 	bl	800038c <__aeabi_fmul>
 8009abe:	4601      	mov	r1, r0
 8009ac0:	4630      	mov	r0, r6
 8009ac2:	f7f6 fb5b 	bl	800017c <__addsf3>
 8009ac6:	4606      	mov	r6, r0
 8009ac8:	9b07      	ldr	r3, [sp, #28]
 8009aca:	f108 0801 	add.w	r8, r8, #1
 8009ace:	9a03      	ldr	r2, [sp, #12]
 8009ad0:	4590      	cmp	r8, r2
 8009ad2:	ddec      	ble.n	8009aae <__kernel_rem_pio2f+0x176>
 8009ad4:	f84a 6b04 	str.w	r6, [sl], #4
 8009ad8:	f109 0901 	add.w	r9, r9, #1
 8009adc:	3504      	adds	r5, #4
 8009ade:	e761      	b.n	80099a4 <__kernel_rem_pio2f+0x6c>
 8009ae0:	46ab      	mov	fp, r5
 8009ae2:	461e      	mov	r6, r3
 8009ae4:	f04f 0800 	mov.w	r8, #0
 8009ae8:	e7f1      	b.n	8009ace <__kernel_rem_pio2f+0x196>
 8009aea:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 8009aee:	4658      	mov	r0, fp
 8009af0:	f7f6 fc4c 	bl	800038c <__aeabi_fmul>
 8009af4:	f7f6 fe26 	bl	8000744 <__aeabi_f2iz>
 8009af8:	f7f6 fbf4 	bl	80002e4 <__aeabi_i2f>
 8009afc:	4649      	mov	r1, r9
 8009afe:	9009      	str	r0, [sp, #36]	@ 0x24
 8009b00:	f7f6 fc44 	bl	800038c <__aeabi_fmul>
 8009b04:	4601      	mov	r1, r0
 8009b06:	4658      	mov	r0, fp
 8009b08:	f7f6 fb36 	bl	8000178 <__aeabi_fsub>
 8009b0c:	f7f6 fe1a 	bl	8000744 <__aeabi_f2iz>
 8009b10:	3d01      	subs	r5, #1
 8009b12:	f846 0b04 	str.w	r0, [r6], #4
 8009b16:	f85a 1025 	ldr.w	r1, [sl, r5, lsl #2]
 8009b1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009b1c:	f7f6 fb2e 	bl	800017c <__addsf3>
 8009b20:	4683      	mov	fp, r0
 8009b22:	e75a      	b.n	80099da <__kernel_rem_pio2f+0xa2>
 8009b24:	d105      	bne.n	8009b32 <__kernel_rem_pio2f+0x1fa>
 8009b26:	1e63      	subs	r3, r4, #1
 8009b28:	aa0a      	add	r2, sp, #40	@ 0x28
 8009b2a:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8009b2e:	11ed      	asrs	r5, r5, #7
 8009b30:	e788      	b.n	8009a44 <__kernel_rem_pio2f+0x10c>
 8009b32:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8009b36:	f7f6 fddb 	bl	80006f0 <__aeabi_fcmpge>
 8009b3a:	4605      	mov	r5, r0
 8009b3c:	bb90      	cbnz	r0, 8009ba4 <__kernel_rem_pio2f+0x26c>
 8009b3e:	2100      	movs	r1, #0
 8009b40:	4648      	mov	r0, r9
 8009b42:	f7f6 fdb7 	bl	80006b4 <__aeabi_fcmpeq>
 8009b46:	2800      	cmp	r0, #0
 8009b48:	f000 8090 	beq.w	8009c6c <__kernel_rem_pio2f+0x334>
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	1e63      	subs	r3, r4, #1
 8009b50:	9901      	ldr	r1, [sp, #4]
 8009b52:	428b      	cmp	r3, r1
 8009b54:	da4a      	bge.n	8009bec <__kernel_rem_pio2f+0x2b4>
 8009b56:	2a00      	cmp	r2, #0
 8009b58:	d076      	beq.n	8009c48 <__kernel_rem_pio2f+0x310>
 8009b5a:	3c01      	subs	r4, #1
 8009b5c:	ab0a      	add	r3, sp, #40	@ 0x28
 8009b5e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8009b62:	3f08      	subs	r7, #8
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d0f8      	beq.n	8009b5a <__kernel_rem_pio2f+0x222>
 8009b68:	4639      	mov	r1, r7
 8009b6a:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8009b6e:	f7ff fe79 	bl	8009864 <scalbnf>
 8009b72:	46a2      	mov	sl, r4
 8009b74:	4607      	mov	r7, r0
 8009b76:	f04f 596e 	mov.w	r9, #998244352	@ 0x3b800000
 8009b7a:	f50d 788c 	add.w	r8, sp, #280	@ 0x118
 8009b7e:	f1ba 0f00 	cmp.w	sl, #0
 8009b82:	f280 80a1 	bge.w	8009cc8 <__kernel_rem_pio2f+0x390>
 8009b86:	4627      	mov	r7, r4
 8009b88:	2200      	movs	r2, #0
 8009b8a:	2f00      	cmp	r7, #0
 8009b8c:	f2c0 80cb 	blt.w	8009d26 <__kernel_rem_pio2f+0x3ee>
 8009b90:	a946      	add	r1, sp, #280	@ 0x118
 8009b92:	4690      	mov	r8, r2
 8009b94:	f04f 0a00 	mov.w	sl, #0
 8009b98:	4b18      	ldr	r3, [pc, #96]	@ (8009bfc <__kernel_rem_pio2f+0x2c4>)
 8009b9a:	eb01 0b87 	add.w	fp, r1, r7, lsl #2
 8009b9e:	eba4 0907 	sub.w	r9, r4, r7
 8009ba2:	e0b4      	b.n	8009d0e <__kernel_rem_pio2f+0x3d6>
 8009ba4:	2502      	movs	r5, #2
 8009ba6:	e74f      	b.n	8009a48 <__kernel_rem_pio2f+0x110>
 8009ba8:	f858 3b04 	ldr.w	r3, [r8], #4
 8009bac:	f1ba 0f00 	cmp.w	sl, #0
 8009bb0:	d108      	bne.n	8009bc4 <__kernel_rem_pio2f+0x28c>
 8009bb2:	b123      	cbz	r3, 8009bbe <__kernel_rem_pio2f+0x286>
 8009bb4:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8009bb8:	f848 3c04 	str.w	r3, [r8, #-4]
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	469a      	mov	sl, r3
 8009bc0:	3201      	adds	r2, #1
 8009bc2:	e744      	b.n	8009a4e <__kernel_rem_pio2f+0x116>
 8009bc4:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8009bc8:	e7f6      	b.n	8009bb8 <__kernel_rem_pio2f+0x280>
 8009bca:	1e62      	subs	r2, r4, #1
 8009bcc:	ab0a      	add	r3, sp, #40	@ 0x28
 8009bce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009bd6:	a90a      	add	r1, sp, #40	@ 0x28
 8009bd8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009bdc:	e742      	b.n	8009a64 <__kernel_rem_pio2f+0x12c>
 8009bde:	1e62      	subs	r2, r4, #1
 8009be0:	ab0a      	add	r3, sp, #40	@ 0x28
 8009be2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009be6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009bea:	e7f4      	b.n	8009bd6 <__kernel_rem_pio2f+0x29e>
 8009bec:	a90a      	add	r1, sp, #40	@ 0x28
 8009bee:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009bf2:	3b01      	subs	r3, #1
 8009bf4:	430a      	orrs	r2, r1
 8009bf6:	e7ab      	b.n	8009b50 <__kernel_rem_pio2f+0x218>
 8009bf8:	0800a800 	.word	0x0800a800
 8009bfc:	0800a7d4 	.word	0x0800a7d4
 8009c00:	3301      	adds	r3, #1
 8009c02:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8009c06:	2900      	cmp	r1, #0
 8009c08:	d0fa      	beq.n	8009c00 <__kernel_rem_pio2f+0x2c8>
 8009c0a:	9a04      	ldr	r2, [sp, #16]
 8009c0c:	a91e      	add	r1, sp, #120	@ 0x78
 8009c0e:	18a2      	adds	r2, r4, r2
 8009c10:	1c66      	adds	r6, r4, #1
 8009c12:	eb01 0582 	add.w	r5, r1, r2, lsl #2
 8009c16:	441c      	add	r4, r3
 8009c18:	f50d 798c 	add.w	r9, sp, #280	@ 0x118
 8009c1c:	42b4      	cmp	r4, r6
 8009c1e:	f6ff aecf 	blt.w	80099c0 <__kernel_rem_pio2f+0x88>
 8009c22:	9b07      	ldr	r3, [sp, #28]
 8009c24:	46ab      	mov	fp, r5
 8009c26:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009c2a:	f7f6 fb5b 	bl	80002e4 <__aeabi_i2f>
 8009c2e:	f04f 0a00 	mov.w	sl, #0
 8009c32:	f04f 0800 	mov.w	r8, #0
 8009c36:	6028      	str	r0, [r5, #0]
 8009c38:	9b03      	ldr	r3, [sp, #12]
 8009c3a:	459a      	cmp	sl, r3
 8009c3c:	dd07      	ble.n	8009c4e <__kernel_rem_pio2f+0x316>
 8009c3e:	f849 8026 	str.w	r8, [r9, r6, lsl #2]
 8009c42:	3504      	adds	r5, #4
 8009c44:	3601      	adds	r6, #1
 8009c46:	e7e9      	b.n	8009c1c <__kernel_rem_pio2f+0x2e4>
 8009c48:	2301      	movs	r3, #1
 8009c4a:	9a08      	ldr	r2, [sp, #32]
 8009c4c:	e7d9      	b.n	8009c02 <__kernel_rem_pio2f+0x2ca>
 8009c4e:	9b05      	ldr	r3, [sp, #20]
 8009c50:	f85b 0904 	ldr.w	r0, [fp], #-4
 8009c54:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 8009c58:	f7f6 fb98 	bl	800038c <__aeabi_fmul>
 8009c5c:	4601      	mov	r1, r0
 8009c5e:	4640      	mov	r0, r8
 8009c60:	f7f6 fa8c 	bl	800017c <__addsf3>
 8009c64:	f10a 0a01 	add.w	sl, sl, #1
 8009c68:	4680      	mov	r8, r0
 8009c6a:	e7e5      	b.n	8009c38 <__kernel_rem_pio2f+0x300>
 8009c6c:	9b06      	ldr	r3, [sp, #24]
 8009c6e:	9a02      	ldr	r2, [sp, #8]
 8009c70:	4648      	mov	r0, r9
 8009c72:	1a99      	subs	r1, r3, r2
 8009c74:	f7ff fdf6 	bl	8009864 <scalbnf>
 8009c78:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8009c7c:	4680      	mov	r8, r0
 8009c7e:	f7f6 fd37 	bl	80006f0 <__aeabi_fcmpge>
 8009c82:	b1f8      	cbz	r0, 8009cc4 <__kernel_rem_pio2f+0x38c>
 8009c84:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 8009c88:	4640      	mov	r0, r8
 8009c8a:	f7f6 fb7f 	bl	800038c <__aeabi_fmul>
 8009c8e:	f7f6 fd59 	bl	8000744 <__aeabi_f2iz>
 8009c92:	f7f6 fb27 	bl	80002e4 <__aeabi_i2f>
 8009c96:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8009c9a:	4681      	mov	r9, r0
 8009c9c:	f7f6 fb76 	bl	800038c <__aeabi_fmul>
 8009ca0:	4601      	mov	r1, r0
 8009ca2:	4640      	mov	r0, r8
 8009ca4:	f7f6 fa68 	bl	8000178 <__aeabi_fsub>
 8009ca8:	f7f6 fd4c 	bl	8000744 <__aeabi_f2iz>
 8009cac:	ab0a      	add	r3, sp, #40	@ 0x28
 8009cae:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009cb2:	4648      	mov	r0, r9
 8009cb4:	3401      	adds	r4, #1
 8009cb6:	3708      	adds	r7, #8
 8009cb8:	f7f6 fd44 	bl	8000744 <__aeabi_f2iz>
 8009cbc:	ab0a      	add	r3, sp, #40	@ 0x28
 8009cbe:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009cc2:	e751      	b.n	8009b68 <__kernel_rem_pio2f+0x230>
 8009cc4:	4640      	mov	r0, r8
 8009cc6:	e7f7      	b.n	8009cb8 <__kernel_rem_pio2f+0x380>
 8009cc8:	ab0a      	add	r3, sp, #40	@ 0x28
 8009cca:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8009cce:	f7f6 fb09 	bl	80002e4 <__aeabi_i2f>
 8009cd2:	4639      	mov	r1, r7
 8009cd4:	f7f6 fb5a 	bl	800038c <__aeabi_fmul>
 8009cd8:	4649      	mov	r1, r9
 8009cda:	f848 002a 	str.w	r0, [r8, sl, lsl #2]
 8009cde:	4638      	mov	r0, r7
 8009ce0:	f7f6 fb54 	bl	800038c <__aeabi_fmul>
 8009ce4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009ce8:	4607      	mov	r7, r0
 8009cea:	e748      	b.n	8009b7e <__kernel_rem_pio2f+0x246>
 8009cec:	f853 0b04 	ldr.w	r0, [r3], #4
 8009cf0:	f85b 1b04 	ldr.w	r1, [fp], #4
 8009cf4:	9203      	str	r2, [sp, #12]
 8009cf6:	9302      	str	r3, [sp, #8]
 8009cf8:	f7f6 fb48 	bl	800038c <__aeabi_fmul>
 8009cfc:	4601      	mov	r1, r0
 8009cfe:	4640      	mov	r0, r8
 8009d00:	f7f6 fa3c 	bl	800017c <__addsf3>
 8009d04:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009d08:	4680      	mov	r8, r0
 8009d0a:	f10a 0a01 	add.w	sl, sl, #1
 8009d0e:	9901      	ldr	r1, [sp, #4]
 8009d10:	458a      	cmp	sl, r1
 8009d12:	dc01      	bgt.n	8009d18 <__kernel_rem_pio2f+0x3e0>
 8009d14:	45ca      	cmp	sl, r9
 8009d16:	dde9      	ble.n	8009cec <__kernel_rem_pio2f+0x3b4>
 8009d18:	ab5a      	add	r3, sp, #360	@ 0x168
 8009d1a:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 8009d1e:	f849 8ca0 	str.w	r8, [r9, #-160]
 8009d22:	3f01      	subs	r7, #1
 8009d24:	e731      	b.n	8009b8a <__kernel_rem_pio2f+0x252>
 8009d26:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8009d28:	2b02      	cmp	r3, #2
 8009d2a:	dc07      	bgt.n	8009d3c <__kernel_rem_pio2f+0x404>
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	dc4e      	bgt.n	8009dce <__kernel_rem_pio2f+0x496>
 8009d30:	d02e      	beq.n	8009d90 <__kernel_rem_pio2f+0x458>
 8009d32:	f006 0007 	and.w	r0, r6, #7
 8009d36:	b05b      	add	sp, #364	@ 0x16c
 8009d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d3c:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8009d3e:	2b03      	cmp	r3, #3
 8009d40:	d1f7      	bne.n	8009d32 <__kernel_rem_pio2f+0x3fa>
 8009d42:	f10d 0bc8 	add.w	fp, sp, #200	@ 0xc8
 8009d46:	eb0b 0784 	add.w	r7, fp, r4, lsl #2
 8009d4a:	46b8      	mov	r8, r7
 8009d4c:	46a2      	mov	sl, r4
 8009d4e:	f1ba 0f00 	cmp.w	sl, #0
 8009d52:	dc49      	bgt.n	8009de8 <__kernel_rem_pio2f+0x4b0>
 8009d54:	46a1      	mov	r9, r4
 8009d56:	f1b9 0f01 	cmp.w	r9, #1
 8009d5a:	dc60      	bgt.n	8009e1e <__kernel_rem_pio2f+0x4e6>
 8009d5c:	2000      	movs	r0, #0
 8009d5e:	2c01      	cmp	r4, #1
 8009d60:	dc76      	bgt.n	8009e50 <__kernel_rem_pio2f+0x518>
 8009d62:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 8009d64:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 8009d66:	2d00      	cmp	r5, #0
 8009d68:	d178      	bne.n	8009e5c <__kernel_rem_pio2f+0x524>
 8009d6a:	9900      	ldr	r1, [sp, #0]
 8009d6c:	600a      	str	r2, [r1, #0]
 8009d6e:	460a      	mov	r2, r1
 8009d70:	604b      	str	r3, [r1, #4]
 8009d72:	6090      	str	r0, [r2, #8]
 8009d74:	e7dd      	b.n	8009d32 <__kernel_rem_pio2f+0x3fa>
 8009d76:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 8009d7a:	f7f6 f9ff 	bl	800017c <__addsf3>
 8009d7e:	3c01      	subs	r4, #1
 8009d80:	2c00      	cmp	r4, #0
 8009d82:	daf8      	bge.n	8009d76 <__kernel_rem_pio2f+0x43e>
 8009d84:	b10d      	cbz	r5, 8009d8a <__kernel_rem_pio2f+0x452>
 8009d86:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8009d8a:	9b00      	ldr	r3, [sp, #0]
 8009d8c:	6018      	str	r0, [r3, #0]
 8009d8e:	e7d0      	b.n	8009d32 <__kernel_rem_pio2f+0x3fa>
 8009d90:	2000      	movs	r0, #0
 8009d92:	af32      	add	r7, sp, #200	@ 0xc8
 8009d94:	e7f4      	b.n	8009d80 <__kernel_rem_pio2f+0x448>
 8009d96:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 8009d9a:	f7f6 f9ef 	bl	800017c <__addsf3>
 8009d9e:	f108 38ff 	add.w	r8, r8, #4294967295
 8009da2:	f1b8 0f00 	cmp.w	r8, #0
 8009da6:	daf6      	bge.n	8009d96 <__kernel_rem_pio2f+0x45e>
 8009da8:	b1ad      	cbz	r5, 8009dd6 <__kernel_rem_pio2f+0x49e>
 8009daa:	f100 4300 	add.w	r3, r0, #2147483648	@ 0x80000000
 8009dae:	9a00      	ldr	r2, [sp, #0]
 8009db0:	4601      	mov	r1, r0
 8009db2:	6013      	str	r3, [r2, #0]
 8009db4:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 8009db6:	f7f6 f9df 	bl	8000178 <__aeabi_fsub>
 8009dba:	f04f 0801 	mov.w	r8, #1
 8009dbe:	4544      	cmp	r4, r8
 8009dc0:	da0b      	bge.n	8009dda <__kernel_rem_pio2f+0x4a2>
 8009dc2:	b10d      	cbz	r5, 8009dc8 <__kernel_rem_pio2f+0x490>
 8009dc4:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8009dc8:	9b00      	ldr	r3, [sp, #0]
 8009dca:	6058      	str	r0, [r3, #4]
 8009dcc:	e7b1      	b.n	8009d32 <__kernel_rem_pio2f+0x3fa>
 8009dce:	46a0      	mov	r8, r4
 8009dd0:	2000      	movs	r0, #0
 8009dd2:	af32      	add	r7, sp, #200	@ 0xc8
 8009dd4:	e7e5      	b.n	8009da2 <__kernel_rem_pio2f+0x46a>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	e7e9      	b.n	8009dae <__kernel_rem_pio2f+0x476>
 8009dda:	f857 1f04 	ldr.w	r1, [r7, #4]!
 8009dde:	f7f6 f9cd 	bl	800017c <__addsf3>
 8009de2:	f108 0801 	add.w	r8, r8, #1
 8009de6:	e7ea      	b.n	8009dbe <__kernel_rem_pio2f+0x486>
 8009de8:	f8d8 3000 	ldr.w	r3, [r8]
 8009dec:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8009df0:	4619      	mov	r1, r3
 8009df2:	4610      	mov	r0, r2
 8009df4:	9302      	str	r3, [sp, #8]
 8009df6:	9201      	str	r2, [sp, #4]
 8009df8:	f7f6 f9c0 	bl	800017c <__addsf3>
 8009dfc:	9a01      	ldr	r2, [sp, #4]
 8009dfe:	4601      	mov	r1, r0
 8009e00:	4681      	mov	r9, r0
 8009e02:	4610      	mov	r0, r2
 8009e04:	f7f6 f9b8 	bl	8000178 <__aeabi_fsub>
 8009e08:	9b02      	ldr	r3, [sp, #8]
 8009e0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009e0e:	4619      	mov	r1, r3
 8009e10:	f7f6 f9b4 	bl	800017c <__addsf3>
 8009e14:	f848 0904 	str.w	r0, [r8], #-4
 8009e18:	f8c8 9000 	str.w	r9, [r8]
 8009e1c:	e797      	b.n	8009d4e <__kernel_rem_pio2f+0x416>
 8009e1e:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8009e22:	f8d7 a000 	ldr.w	sl, [r7]
 8009e26:	4618      	mov	r0, r3
 8009e28:	4651      	mov	r1, sl
 8009e2a:	9301      	str	r3, [sp, #4]
 8009e2c:	f7f6 f9a6 	bl	800017c <__addsf3>
 8009e30:	9b01      	ldr	r3, [sp, #4]
 8009e32:	4601      	mov	r1, r0
 8009e34:	4680      	mov	r8, r0
 8009e36:	4618      	mov	r0, r3
 8009e38:	f7f6 f99e 	bl	8000178 <__aeabi_fsub>
 8009e3c:	4651      	mov	r1, sl
 8009e3e:	f7f6 f99d 	bl	800017c <__addsf3>
 8009e42:	f847 0904 	str.w	r0, [r7], #-4
 8009e46:	f109 39ff 	add.w	r9, r9, #4294967295
 8009e4a:	f8c7 8000 	str.w	r8, [r7]
 8009e4e:	e782      	b.n	8009d56 <__kernel_rem_pio2f+0x41e>
 8009e50:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 8009e54:	f7f6 f992 	bl	800017c <__addsf3>
 8009e58:	3c01      	subs	r4, #1
 8009e5a:	e780      	b.n	8009d5e <__kernel_rem_pio2f+0x426>
 8009e5c:	9900      	ldr	r1, [sp, #0]
 8009e5e:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 8009e62:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8009e66:	600a      	str	r2, [r1, #0]
 8009e68:	604b      	str	r3, [r1, #4]
 8009e6a:	460a      	mov	r2, r1
 8009e6c:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8009e70:	e77f      	b.n	8009d72 <__kernel_rem_pio2f+0x43a>
 8009e72:	bf00      	nop

08009e74 <floorf>:
 8009e74:	b570      	push	{r4, r5, r6, lr}
 8009e76:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 8009e7a:	3d7f      	subs	r5, #127	@ 0x7f
 8009e7c:	2d16      	cmp	r5, #22
 8009e7e:	4601      	mov	r1, r0
 8009e80:	4604      	mov	r4, r0
 8009e82:	f020 4600 	bic.w	r6, r0, #2147483648	@ 0x80000000
 8009e86:	dc26      	bgt.n	8009ed6 <floorf+0x62>
 8009e88:	2d00      	cmp	r5, #0
 8009e8a:	da0f      	bge.n	8009eac <floorf+0x38>
 8009e8c:	4917      	ldr	r1, [pc, #92]	@ (8009eec <floorf+0x78>)
 8009e8e:	f7f6 f975 	bl	800017c <__addsf3>
 8009e92:	2100      	movs	r1, #0
 8009e94:	f7f6 fc36 	bl	8000704 <__aeabi_fcmpgt>
 8009e98:	b130      	cbz	r0, 8009ea8 <floorf+0x34>
 8009e9a:	2c00      	cmp	r4, #0
 8009e9c:	da23      	bge.n	8009ee6 <floorf+0x72>
 8009e9e:	2e00      	cmp	r6, #0
 8009ea0:	4c13      	ldr	r4, [pc, #76]	@ (8009ef0 <floorf+0x7c>)
 8009ea2:	bf08      	it	eq
 8009ea4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8009ea8:	4621      	mov	r1, r4
 8009eaa:	e01a      	b.n	8009ee2 <floorf+0x6e>
 8009eac:	4e11      	ldr	r6, [pc, #68]	@ (8009ef4 <floorf+0x80>)
 8009eae:	412e      	asrs	r6, r5
 8009eb0:	4230      	tst	r0, r6
 8009eb2:	d016      	beq.n	8009ee2 <floorf+0x6e>
 8009eb4:	490d      	ldr	r1, [pc, #52]	@ (8009eec <floorf+0x78>)
 8009eb6:	f7f6 f961 	bl	800017c <__addsf3>
 8009eba:	2100      	movs	r1, #0
 8009ebc:	f7f6 fc22 	bl	8000704 <__aeabi_fcmpgt>
 8009ec0:	2800      	cmp	r0, #0
 8009ec2:	d0f1      	beq.n	8009ea8 <floorf+0x34>
 8009ec4:	2c00      	cmp	r4, #0
 8009ec6:	bfbe      	ittt	lt
 8009ec8:	f44f 0300 	movlt.w	r3, #8388608	@ 0x800000
 8009ecc:	412b      	asrlt	r3, r5
 8009ece:	18e4      	addlt	r4, r4, r3
 8009ed0:	ea24 0406 	bic.w	r4, r4, r6
 8009ed4:	e7e8      	b.n	8009ea8 <floorf+0x34>
 8009ed6:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 8009eda:	d302      	bcc.n	8009ee2 <floorf+0x6e>
 8009edc:	f7f6 f94e 	bl	800017c <__addsf3>
 8009ee0:	4601      	mov	r1, r0
 8009ee2:	4608      	mov	r0, r1
 8009ee4:	bd70      	pop	{r4, r5, r6, pc}
 8009ee6:	2400      	movs	r4, #0
 8009ee8:	e7de      	b.n	8009ea8 <floorf+0x34>
 8009eea:	bf00      	nop
 8009eec:	7149f2ca 	.word	0x7149f2ca
 8009ef0:	bf800000 	.word	0xbf800000
 8009ef4:	007fffff 	.word	0x007fffff

08009ef8 <_init>:
 8009ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009efa:	bf00      	nop
 8009efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009efe:	bc08      	pop	{r3}
 8009f00:	469e      	mov	lr, r3
 8009f02:	4770      	bx	lr

08009f04 <_fini>:
 8009f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f06:	bf00      	nop
 8009f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f0a:	bc08      	pop	{r3}
 8009f0c:	469e      	mov	lr, r3
 8009f0e:	4770      	bx	lr
