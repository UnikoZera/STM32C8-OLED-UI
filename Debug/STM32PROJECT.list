
STM32PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c6c4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a98  0800c7d0  0800c7d0  0000d7d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d268  0800d268  0000f070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d268  0800d268  0000e268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d270  0800d270  0000f070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d270  0800d270  0000e270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d274  0800d274  0000e274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  0800d278  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004048  20000070  0800d2e8  0000f070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200040b8  0800d2e8  0000f0b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000f070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012622  00000000  00000000  0000f099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038ca  00000000  00000000  000216bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001410  00000000  00000000  00024f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fbe  00000000  00000000  00026398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019cf6  00000000  00000000  00027356  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001980e  00000000  00000000  0004104c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009060d  00000000  00000000  0005a85a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000eae67  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006344  00000000  00000000  000eaeac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000f11f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	0800c7b8 	.word	0x0800c7b8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	0800c7b8 	.word	0x0800c7b8

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <__aeabi_frsub>:
 8000170:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000174:	e002      	b.n	800017c <__addsf3>
 8000176:	bf00      	nop

08000178 <__aeabi_fsub>:
 8000178:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800017c <__addsf3>:
 800017c:	0042      	lsls	r2, r0, #1
 800017e:	bf1f      	itttt	ne
 8000180:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000184:	ea92 0f03 	teqne	r2, r3
 8000188:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800018c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000190:	d06a      	beq.n	8000268 <__addsf3+0xec>
 8000192:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000196:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800019a:	bfc1      	itttt	gt
 800019c:	18d2      	addgt	r2, r2, r3
 800019e:	4041      	eorgt	r1, r0
 80001a0:	4048      	eorgt	r0, r1
 80001a2:	4041      	eorgt	r1, r0
 80001a4:	bfb8      	it	lt
 80001a6:	425b      	neglt	r3, r3
 80001a8:	2b19      	cmp	r3, #25
 80001aa:	bf88      	it	hi
 80001ac:	4770      	bxhi	lr
 80001ae:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80001b2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001b6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4240      	negne	r0, r0
 80001be:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001c6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001ca:	bf18      	it	ne
 80001cc:	4249      	negne	r1, r1
 80001ce:	ea92 0f03 	teq	r2, r3
 80001d2:	d03f      	beq.n	8000254 <__addsf3+0xd8>
 80001d4:	f1a2 0201 	sub.w	r2, r2, #1
 80001d8:	fa41 fc03 	asr.w	ip, r1, r3
 80001dc:	eb10 000c 	adds.w	r0, r0, ip
 80001e0:	f1c3 0320 	rsb	r3, r3, #32
 80001e4:	fa01 f103 	lsl.w	r1, r1, r3
 80001e8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001ec:	d502      	bpl.n	80001f4 <__addsf3+0x78>
 80001ee:	4249      	negs	r1, r1
 80001f0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001f4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001f8:	d313      	bcc.n	8000222 <__addsf3+0xa6>
 80001fa:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001fe:	d306      	bcc.n	800020e <__addsf3+0x92>
 8000200:	0840      	lsrs	r0, r0, #1
 8000202:	ea4f 0131 	mov.w	r1, r1, rrx
 8000206:	f102 0201 	add.w	r2, r2, #1
 800020a:	2afe      	cmp	r2, #254	@ 0xfe
 800020c:	d251      	bcs.n	80002b2 <__addsf3+0x136>
 800020e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000212:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000216:	bf08      	it	eq
 8000218:	f020 0001 	biceq.w	r0, r0, #1
 800021c:	ea40 0003 	orr.w	r0, r0, r3
 8000220:	4770      	bx	lr
 8000222:	0049      	lsls	r1, r1, #1
 8000224:	eb40 0000 	adc.w	r0, r0, r0
 8000228:	3a01      	subs	r2, #1
 800022a:	bf28      	it	cs
 800022c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000230:	d2ed      	bcs.n	800020e <__addsf3+0x92>
 8000232:	fab0 fc80 	clz	ip, r0
 8000236:	f1ac 0c08 	sub.w	ip, ip, #8
 800023a:	ebb2 020c 	subs.w	r2, r2, ip
 800023e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000242:	bfaa      	itet	ge
 8000244:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000248:	4252      	neglt	r2, r2
 800024a:	4318      	orrge	r0, r3
 800024c:	bfbc      	itt	lt
 800024e:	40d0      	lsrlt	r0, r2
 8000250:	4318      	orrlt	r0, r3
 8000252:	4770      	bx	lr
 8000254:	f092 0f00 	teq	r2, #0
 8000258:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800025c:	bf06      	itte	eq
 800025e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000262:	3201      	addeq	r2, #1
 8000264:	3b01      	subne	r3, #1
 8000266:	e7b5      	b.n	80001d4 <__addsf3+0x58>
 8000268:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800026c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000270:	bf18      	it	ne
 8000272:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000276:	d021      	beq.n	80002bc <__addsf3+0x140>
 8000278:	ea92 0f03 	teq	r2, r3
 800027c:	d004      	beq.n	8000288 <__addsf3+0x10c>
 800027e:	f092 0f00 	teq	r2, #0
 8000282:	bf08      	it	eq
 8000284:	4608      	moveq	r0, r1
 8000286:	4770      	bx	lr
 8000288:	ea90 0f01 	teq	r0, r1
 800028c:	bf1c      	itt	ne
 800028e:	2000      	movne	r0, #0
 8000290:	4770      	bxne	lr
 8000292:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000296:	d104      	bne.n	80002a2 <__addsf3+0x126>
 8000298:	0040      	lsls	r0, r0, #1
 800029a:	bf28      	it	cs
 800029c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80002a0:	4770      	bx	lr
 80002a2:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80002a6:	bf3c      	itt	cc
 80002a8:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80002ac:	4770      	bxcc	lr
 80002ae:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80002b2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80002b6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002ba:	4770      	bx	lr
 80002bc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002c0:	bf16      	itet	ne
 80002c2:	4608      	movne	r0, r1
 80002c4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002c8:	4601      	movne	r1, r0
 80002ca:	0242      	lsls	r2, r0, #9
 80002cc:	bf06      	itte	eq
 80002ce:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002d2:	ea90 0f01 	teqeq	r0, r1
 80002d6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002da:	4770      	bx	lr

080002dc <__aeabi_ui2f>:
 80002dc:	f04f 0300 	mov.w	r3, #0
 80002e0:	e004      	b.n	80002ec <__aeabi_i2f+0x8>
 80002e2:	bf00      	nop

080002e4 <__aeabi_i2f>:
 80002e4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002e8:	bf48      	it	mi
 80002ea:	4240      	negmi	r0, r0
 80002ec:	ea5f 0c00 	movs.w	ip, r0
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002f8:	4601      	mov	r1, r0
 80002fa:	f04f 0000 	mov.w	r0, #0
 80002fe:	e01c      	b.n	800033a <__aeabi_l2f+0x2a>

08000300 <__aeabi_ul2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f04f 0300 	mov.w	r3, #0
 800030c:	e00a      	b.n	8000324 <__aeabi_l2f+0x14>
 800030e:	bf00      	nop

08000310 <__aeabi_l2f>:
 8000310:	ea50 0201 	orrs.w	r2, r0, r1
 8000314:	bf08      	it	eq
 8000316:	4770      	bxeq	lr
 8000318:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800031c:	d502      	bpl.n	8000324 <__aeabi_l2f+0x14>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	ea5f 0c01 	movs.w	ip, r1
 8000328:	bf02      	ittt	eq
 800032a:	4684      	moveq	ip, r0
 800032c:	4601      	moveq	r1, r0
 800032e:	2000      	moveq	r0, #0
 8000330:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000334:	bf08      	it	eq
 8000336:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800033a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800033e:	fabc f28c 	clz	r2, ip
 8000342:	3a08      	subs	r2, #8
 8000344:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000348:	db10      	blt.n	800036c <__aeabi_l2f+0x5c>
 800034a:	fa01 fc02 	lsl.w	ip, r1, r2
 800034e:	4463      	add	r3, ip
 8000350:	fa00 fc02 	lsl.w	ip, r0, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800035c:	fa20 f202 	lsr.w	r2, r0, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	f020 0001 	biceq.w	r0, r0, #1
 800036a:	4770      	bx	lr
 800036c:	f102 0220 	add.w	r2, r2, #32
 8000370:	fa01 fc02 	lsl.w	ip, r1, r2
 8000374:	f1c2 0220 	rsb	r2, r2, #32
 8000378:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800037c:	fa21 f202 	lsr.w	r2, r1, r2
 8000380:	eb43 0002 	adc.w	r0, r3, r2
 8000384:	bf08      	it	eq
 8000386:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800038a:	4770      	bx	lr

0800038c <__aeabi_fmul>:
 800038c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000390:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000394:	bf1e      	ittt	ne
 8000396:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800039a:	ea92 0f0c 	teqne	r2, ip
 800039e:	ea93 0f0c 	teqne	r3, ip
 80003a2:	d06f      	beq.n	8000484 <__aeabi_fmul+0xf8>
 80003a4:	441a      	add	r2, r3
 80003a6:	ea80 0c01 	eor.w	ip, r0, r1
 80003aa:	0240      	lsls	r0, r0, #9
 80003ac:	bf18      	it	ne
 80003ae:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003b2:	d01e      	beq.n	80003f2 <__aeabi_fmul+0x66>
 80003b4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80003b8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003bc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003c0:	fba0 3101 	umull	r3, r1, r0, r1
 80003c4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003c8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003cc:	bf3e      	ittt	cc
 80003ce:	0049      	lslcc	r1, r1, #1
 80003d0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003d4:	005b      	lslcc	r3, r3, #1
 80003d6:	ea40 0001 	orr.w	r0, r0, r1
 80003da:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003de:	2afd      	cmp	r2, #253	@ 0xfd
 80003e0:	d81d      	bhi.n	800041e <__aeabi_fmul+0x92>
 80003e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ea:	bf08      	it	eq
 80003ec:	f020 0001 	biceq.w	r0, r0, #1
 80003f0:	4770      	bx	lr
 80003f2:	f090 0f00 	teq	r0, #0
 80003f6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003fa:	bf08      	it	eq
 80003fc:	0249      	lsleq	r1, r1, #9
 80003fe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000402:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000406:	3a7f      	subs	r2, #127	@ 0x7f
 8000408:	bfc2      	ittt	gt
 800040a:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800040e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000412:	4770      	bxgt	lr
 8000414:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000418:	f04f 0300 	mov.w	r3, #0
 800041c:	3a01      	subs	r2, #1
 800041e:	dc5d      	bgt.n	80004dc <__aeabi_fmul+0x150>
 8000420:	f112 0f19 	cmn.w	r2, #25
 8000424:	bfdc      	itt	le
 8000426:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800042a:	4770      	bxle	lr
 800042c:	f1c2 0200 	rsb	r2, r2, #0
 8000430:	0041      	lsls	r1, r0, #1
 8000432:	fa21 f102 	lsr.w	r1, r1, r2
 8000436:	f1c2 0220 	rsb	r2, r2, #32
 800043a:	fa00 fc02 	lsl.w	ip, r0, r2
 800043e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000442:	f140 0000 	adc.w	r0, r0, #0
 8000446:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800044a:	bf08      	it	eq
 800044c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000450:	4770      	bx	lr
 8000452:	f092 0f00 	teq	r2, #0
 8000456:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800045a:	bf02      	ittt	eq
 800045c:	0040      	lsleq	r0, r0, #1
 800045e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000462:	3a01      	subeq	r2, #1
 8000464:	d0f9      	beq.n	800045a <__aeabi_fmul+0xce>
 8000466:	ea40 000c 	orr.w	r0, r0, ip
 800046a:	f093 0f00 	teq	r3, #0
 800046e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000472:	bf02      	ittt	eq
 8000474:	0049      	lsleq	r1, r1, #1
 8000476:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800047a:	3b01      	subeq	r3, #1
 800047c:	d0f9      	beq.n	8000472 <__aeabi_fmul+0xe6>
 800047e:	ea41 010c 	orr.w	r1, r1, ip
 8000482:	e78f      	b.n	80003a4 <__aeabi_fmul+0x18>
 8000484:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000488:	ea92 0f0c 	teq	r2, ip
 800048c:	bf18      	it	ne
 800048e:	ea93 0f0c 	teqne	r3, ip
 8000492:	d00a      	beq.n	80004aa <__aeabi_fmul+0x11e>
 8000494:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000498:	bf18      	it	ne
 800049a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800049e:	d1d8      	bne.n	8000452 <__aeabi_fmul+0xc6>
 80004a0:	ea80 0001 	eor.w	r0, r0, r1
 80004a4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004a8:	4770      	bx	lr
 80004aa:	f090 0f00 	teq	r0, #0
 80004ae:	bf17      	itett	ne
 80004b0:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80004b4:	4608      	moveq	r0, r1
 80004b6:	f091 0f00 	teqne	r1, #0
 80004ba:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80004be:	d014      	beq.n	80004ea <__aeabi_fmul+0x15e>
 80004c0:	ea92 0f0c 	teq	r2, ip
 80004c4:	d101      	bne.n	80004ca <__aeabi_fmul+0x13e>
 80004c6:	0242      	lsls	r2, r0, #9
 80004c8:	d10f      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004ca:	ea93 0f0c 	teq	r3, ip
 80004ce:	d103      	bne.n	80004d8 <__aeabi_fmul+0x14c>
 80004d0:	024b      	lsls	r3, r1, #9
 80004d2:	bf18      	it	ne
 80004d4:	4608      	movne	r0, r1
 80004d6:	d108      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004d8:	ea80 0001 	eor.w	r0, r0, r1
 80004dc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004e0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004e4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004e8:	4770      	bx	lr
 80004ea:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ee:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004f2:	4770      	bx	lr

080004f4 <__aeabi_fdiv>:
 80004f4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004fc:	bf1e      	ittt	ne
 80004fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000502:	ea92 0f0c 	teqne	r2, ip
 8000506:	ea93 0f0c 	teqne	r3, ip
 800050a:	d069      	beq.n	80005e0 <__aeabi_fdiv+0xec>
 800050c:	eba2 0203 	sub.w	r2, r2, r3
 8000510:	ea80 0c01 	eor.w	ip, r0, r1
 8000514:	0249      	lsls	r1, r1, #9
 8000516:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800051a:	d037      	beq.n	800058c <__aeabi_fdiv+0x98>
 800051c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000520:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000524:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000528:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800052c:	428b      	cmp	r3, r1
 800052e:	bf38      	it	cc
 8000530:	005b      	lslcc	r3, r3, #1
 8000532:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000536:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800053a:	428b      	cmp	r3, r1
 800053c:	bf24      	itt	cs
 800053e:	1a5b      	subcs	r3, r3, r1
 8000540:	ea40 000c 	orrcs.w	r0, r0, ip
 8000544:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000548:	bf24      	itt	cs
 800054a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800054e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000552:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000556:	bf24      	itt	cs
 8000558:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800055c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000560:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000564:	bf24      	itt	cs
 8000566:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800056a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800056e:	011b      	lsls	r3, r3, #4
 8000570:	bf18      	it	ne
 8000572:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000576:	d1e0      	bne.n	800053a <__aeabi_fdiv+0x46>
 8000578:	2afd      	cmp	r2, #253	@ 0xfd
 800057a:	f63f af50 	bhi.w	800041e <__aeabi_fmul+0x92>
 800057e:	428b      	cmp	r3, r1
 8000580:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000584:	bf08      	it	eq
 8000586:	f020 0001 	biceq.w	r0, r0, #1
 800058a:	4770      	bx	lr
 800058c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000590:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000594:	327f      	adds	r2, #127	@ 0x7f
 8000596:	bfc2      	ittt	gt
 8000598:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800059c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005a0:	4770      	bxgt	lr
 80005a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80005a6:	f04f 0300 	mov.w	r3, #0
 80005aa:	3a01      	subs	r2, #1
 80005ac:	e737      	b.n	800041e <__aeabi_fmul+0x92>
 80005ae:	f092 0f00 	teq	r2, #0
 80005b2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80005b6:	bf02      	ittt	eq
 80005b8:	0040      	lsleq	r0, r0, #1
 80005ba:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80005be:	3a01      	subeq	r2, #1
 80005c0:	d0f9      	beq.n	80005b6 <__aeabi_fdiv+0xc2>
 80005c2:	ea40 000c 	orr.w	r0, r0, ip
 80005c6:	f093 0f00 	teq	r3, #0
 80005ca:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005ce:	bf02      	ittt	eq
 80005d0:	0049      	lsleq	r1, r1, #1
 80005d2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005d6:	3b01      	subeq	r3, #1
 80005d8:	d0f9      	beq.n	80005ce <__aeabi_fdiv+0xda>
 80005da:	ea41 010c 	orr.w	r1, r1, ip
 80005de:	e795      	b.n	800050c <__aeabi_fdiv+0x18>
 80005e0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005e4:	ea92 0f0c 	teq	r2, ip
 80005e8:	d108      	bne.n	80005fc <__aeabi_fdiv+0x108>
 80005ea:	0242      	lsls	r2, r0, #9
 80005ec:	f47f af7d 	bne.w	80004ea <__aeabi_fmul+0x15e>
 80005f0:	ea93 0f0c 	teq	r3, ip
 80005f4:	f47f af70 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 80005f8:	4608      	mov	r0, r1
 80005fa:	e776      	b.n	80004ea <__aeabi_fmul+0x15e>
 80005fc:	ea93 0f0c 	teq	r3, ip
 8000600:	d104      	bne.n	800060c <__aeabi_fdiv+0x118>
 8000602:	024b      	lsls	r3, r1, #9
 8000604:	f43f af4c 	beq.w	80004a0 <__aeabi_fmul+0x114>
 8000608:	4608      	mov	r0, r1
 800060a:	e76e      	b.n	80004ea <__aeabi_fmul+0x15e>
 800060c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000610:	bf18      	it	ne
 8000612:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000616:	d1ca      	bne.n	80005ae <__aeabi_fdiv+0xba>
 8000618:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800061c:	f47f af5c 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 8000620:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000624:	f47f af3c 	bne.w	80004a0 <__aeabi_fmul+0x114>
 8000628:	e75f      	b.n	80004ea <__aeabi_fmul+0x15e>
 800062a:	bf00      	nop

0800062c <__gesf2>:
 800062c:	f04f 3cff 	mov.w	ip, #4294967295
 8000630:	e006      	b.n	8000640 <__cmpsf2+0x4>
 8000632:	bf00      	nop

08000634 <__lesf2>:
 8000634:	f04f 0c01 	mov.w	ip, #1
 8000638:	e002      	b.n	8000640 <__cmpsf2+0x4>
 800063a:	bf00      	nop

0800063c <__cmpsf2>:
 800063c:	f04f 0c01 	mov.w	ip, #1
 8000640:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000644:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000648:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800064c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000650:	bf18      	it	ne
 8000652:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000656:	d011      	beq.n	800067c <__cmpsf2+0x40>
 8000658:	b001      	add	sp, #4
 800065a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800065e:	bf18      	it	ne
 8000660:	ea90 0f01 	teqne	r0, r1
 8000664:	bf58      	it	pl
 8000666:	ebb2 0003 	subspl.w	r0, r2, r3
 800066a:	bf88      	it	hi
 800066c:	17c8      	asrhi	r0, r1, #31
 800066e:	bf38      	it	cc
 8000670:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000674:	bf18      	it	ne
 8000676:	f040 0001 	orrne.w	r0, r0, #1
 800067a:	4770      	bx	lr
 800067c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000680:	d102      	bne.n	8000688 <__cmpsf2+0x4c>
 8000682:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000686:	d105      	bne.n	8000694 <__cmpsf2+0x58>
 8000688:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800068c:	d1e4      	bne.n	8000658 <__cmpsf2+0x1c>
 800068e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000692:	d0e1      	beq.n	8000658 <__cmpsf2+0x1c>
 8000694:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop

0800069c <__aeabi_cfrcmple>:
 800069c:	4684      	mov	ip, r0
 800069e:	4608      	mov	r0, r1
 80006a0:	4661      	mov	r1, ip
 80006a2:	e7ff      	b.n	80006a4 <__aeabi_cfcmpeq>

080006a4 <__aeabi_cfcmpeq>:
 80006a4:	b50f      	push	{r0, r1, r2, r3, lr}
 80006a6:	f7ff ffc9 	bl	800063c <__cmpsf2>
 80006aa:	2800      	cmp	r0, #0
 80006ac:	bf48      	it	mi
 80006ae:	f110 0f00 	cmnmi.w	r0, #0
 80006b2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006b4 <__aeabi_fcmpeq>:
 80006b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006b8:	f7ff fff4 	bl	80006a4 <__aeabi_cfcmpeq>
 80006bc:	bf0c      	ite	eq
 80006be:	2001      	moveq	r0, #1
 80006c0:	2000      	movne	r0, #0
 80006c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006c6:	bf00      	nop

080006c8 <__aeabi_fcmplt>:
 80006c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006cc:	f7ff ffea 	bl	80006a4 <__aeabi_cfcmpeq>
 80006d0:	bf34      	ite	cc
 80006d2:	2001      	movcc	r0, #1
 80006d4:	2000      	movcs	r0, #0
 80006d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006da:	bf00      	nop

080006dc <__aeabi_fcmple>:
 80006dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e0:	f7ff ffe0 	bl	80006a4 <__aeabi_cfcmpeq>
 80006e4:	bf94      	ite	ls
 80006e6:	2001      	movls	r0, #1
 80006e8:	2000      	movhi	r0, #0
 80006ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ee:	bf00      	nop

080006f0 <__aeabi_fcmpge>:
 80006f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f4:	f7ff ffd2 	bl	800069c <__aeabi_cfrcmple>
 80006f8:	bf94      	ite	ls
 80006fa:	2001      	movls	r0, #1
 80006fc:	2000      	movhi	r0, #0
 80006fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000702:	bf00      	nop

08000704 <__aeabi_fcmpgt>:
 8000704:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000708:	f7ff ffc8 	bl	800069c <__aeabi_cfrcmple>
 800070c:	bf34      	ite	cc
 800070e:	2001      	movcc	r0, #1
 8000710:	2000      	movcs	r0, #0
 8000712:	f85d fb08 	ldr.w	pc, [sp], #8
 8000716:	bf00      	nop

08000718 <__aeabi_fcmpun>:
 8000718:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800071c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000720:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000724:	d102      	bne.n	800072c <__aeabi_fcmpun+0x14>
 8000726:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800072a:	d108      	bne.n	800073e <__aeabi_fcmpun+0x26>
 800072c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000730:	d102      	bne.n	8000738 <__aeabi_fcmpun+0x20>
 8000732:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000736:	d102      	bne.n	800073e <__aeabi_fcmpun+0x26>
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	4770      	bx	lr
 800073e:	f04f 0001 	mov.w	r0, #1
 8000742:	4770      	bx	lr

08000744 <__aeabi_f2iz>:
 8000744:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000748:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800074c:	d30f      	bcc.n	800076e <__aeabi_f2iz+0x2a>
 800074e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000752:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000756:	d90d      	bls.n	8000774 <__aeabi_f2iz+0x30>
 8000758:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800075c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000760:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000764:	fa23 f002 	lsr.w	r0, r3, r2
 8000768:	bf18      	it	ne
 800076a:	4240      	negne	r0, r0
 800076c:	4770      	bx	lr
 800076e:	f04f 0000 	mov.w	r0, #0
 8000772:	4770      	bx	lr
 8000774:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000778:	d101      	bne.n	800077e <__aeabi_f2iz+0x3a>
 800077a:	0242      	lsls	r2, r0, #9
 800077c:	d105      	bne.n	800078a <__aeabi_f2iz+0x46>
 800077e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000782:	bf08      	it	eq
 8000784:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000788:	4770      	bx	lr
 800078a:	f04f 0000 	mov.w	r0, #0
 800078e:	4770      	bx	lr

08000790 <__aeabi_f2uiz>:
 8000790:	0042      	lsls	r2, r0, #1
 8000792:	d20e      	bcs.n	80007b2 <__aeabi_f2uiz+0x22>
 8000794:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000798:	d30b      	bcc.n	80007b2 <__aeabi_f2uiz+0x22>
 800079a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800079e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80007a2:	d409      	bmi.n	80007b8 <__aeabi_f2uiz+0x28>
 80007a4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80007a8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80007ac:	fa23 f002 	lsr.w	r0, r3, r2
 80007b0:	4770      	bx	lr
 80007b2:	f04f 0000 	mov.w	r0, #0
 80007b6:	4770      	bx	lr
 80007b8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80007bc:	d101      	bne.n	80007c2 <__aeabi_f2uiz+0x32>
 80007be:	0242      	lsls	r2, r0, #9
 80007c0:	d102      	bne.n	80007c8 <__aeabi_f2uiz+0x38>
 80007c2:	f04f 30ff 	mov.w	r0, #4294967295
 80007c6:	4770      	bx	lr
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop

080007d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000808 <MX_DMA_Init+0x38>)
 80007d8:	695b      	ldr	r3, [r3, #20]
 80007da:	4a0b      	ldr	r2, [pc, #44]	@ (8000808 <MX_DMA_Init+0x38>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	6153      	str	r3, [r2, #20]
 80007e2:	4b09      	ldr	r3, [pc, #36]	@ (8000808 <MX_DMA_Init+0x38>)
 80007e4:	695b      	ldr	r3, [r3, #20]
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2100      	movs	r1, #0
 80007f2:	2010      	movs	r0, #16
 80007f4:	f007 f81b 	bl	800782e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80007f8:	2010      	movs	r0, #16
 80007fa:	f007 f834 	bl	8007866 <HAL_NVIC_EnableIRQ>

}
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40021000 	.word	0x40021000

0800080c <W25Q64_Spi_Transmit>:
    HAL_SPI_TransmitReceive(&hspi2, &data, &rx_data, 1, W25Q64_TIMEOUT);
    return rx_data;
}

static void W25Q64_Spi_Transmit(uint8_t *pData, uint16_t Size)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
 8000814:	460b      	mov	r3, r1
 8000816:	807b      	strh	r3, [r7, #2]
    HAL_SPI_Transmit(&hspi2, pData, Size, W25Q64_TIMEOUT);
 8000818:	887a      	ldrh	r2, [r7, #2]
 800081a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800081e:	6879      	ldr	r1, [r7, #4]
 8000820:	4803      	ldr	r0, [pc, #12]	@ (8000830 <W25Q64_Spi_Transmit+0x24>)
 8000822:	f008 fc6b 	bl	80090fc <HAL_SPI_Transmit>
}
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20003eb4 	.word	0x20003eb4

08000834 <W25Q64_Spi_Receive>:

static void W25Q64_Spi_Receive(uint8_t *pData, uint16_t Size)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
 800083c:	460b      	mov	r3, r1
 800083e:	807b      	strh	r3, [r7, #2]
    HAL_SPI_Receive(&hspi2, pData, Size, W25Q64_TIMEOUT);
 8000840:	887a      	ldrh	r2, [r7, #2]
 8000842:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000846:	6879      	ldr	r1, [r7, #4]
 8000848:	4803      	ldr	r0, [pc, #12]	@ (8000858 <W25Q64_Spi_Receive+0x24>)
 800084a:	f008 fd9b 	bl	8009384 <HAL_SPI_Receive>
}
 800084e:	bf00      	nop
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20003eb4 	.word	0x20003eb4

0800085c <W25Q64_Read>:
// 读取数据
// ReadAddr: 读取地址
// pBuffer: 数据接收缓冲区
// NumByteToRead: 读取字节数
void W25Q64_Read(uint32_t ReadAddr, uint8_t *pBuffer, uint32_t NumByteToRead)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b086      	sub	sp, #24
 8000860:	af00      	add	r7, sp, #0
 8000862:	60f8      	str	r0, [r7, #12]
 8000864:	60b9      	str	r1, [r7, #8]
 8000866:	607a      	str	r2, [r7, #4]
    W25Q64_CS_LOW();
 8000868:	2200      	movs	r2, #0
 800086a:	2180      	movs	r1, #128	@ 0x80
 800086c:	4812      	ldr	r0, [pc, #72]	@ (80008b8 <W25Q64_Read+0x5c>)
 800086e:	f007 fb10 	bl	8007e92 <HAL_GPIO_WritePin>
    uint8_t cmd[4];
    cmd[0] = W25X_ReadData;
 8000872:	2303      	movs	r3, #3
 8000874:	753b      	strb	r3, [r7, #20]
    cmd[1] = (ReadAddr & 0xFF0000) >> 16;
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	0c1b      	lsrs	r3, r3, #16
 800087a:	b2db      	uxtb	r3, r3
 800087c:	757b      	strb	r3, [r7, #21]
    cmd[2] = (ReadAddr & 0x00FF00) >> 8;
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	0a1b      	lsrs	r3, r3, #8
 8000882:	b2db      	uxtb	r3, r3
 8000884:	75bb      	strb	r3, [r7, #22]
    cmd[3] = (ReadAddr & 0x0000FF);
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	b2db      	uxtb	r3, r3
 800088a:	75fb      	strb	r3, [r7, #23]
    W25Q64_Spi_Transmit(cmd, 4);
 800088c:	f107 0314 	add.w	r3, r7, #20
 8000890:	2104      	movs	r1, #4
 8000892:	4618      	mov	r0, r3
 8000894:	f7ff ffba 	bl	800080c <W25Q64_Spi_Transmit>
    W25Q64_Spi_Receive(pBuffer, NumByteToRead);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	b29b      	uxth	r3, r3
 800089c:	4619      	mov	r1, r3
 800089e:	68b8      	ldr	r0, [r7, #8]
 80008a0:	f7ff ffc8 	bl	8000834 <W25Q64_Spi_Receive>
    W25Q64_CS_HIGH();
 80008a4:	2201      	movs	r2, #1
 80008a6:	2180      	movs	r1, #128	@ 0x80
 80008a8:	4803      	ldr	r0, [pc, #12]	@ (80008b8 <W25Q64_Read+0x5c>)
 80008aa:	f007 faf2 	bl	8007e92 <HAL_GPIO_WritePin>
}
 80008ae:	bf00      	nop
 80008b0:	3718      	adds	r7, #24
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40010800 	.word	0x40010800

080008bc <DrawBlock>:
#define INPUT_DEBOUNCE_MS 50             // Milliseconds for switch debounce
#define INPUT_PROCESSING_COOLDOWN_MS 200 // Minimum time between processing inputs

// Helper function to draw a block on the OLED (used by Snake)
static void DrawBlock(int16_t x, int16_t y, uint8_t color)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af02      	add	r7, sp, #8
 80008c2:	4603      	mov	r3, r0
 80008c4:	80fb      	strh	r3, [r7, #6]
 80008c6:	460b      	mov	r3, r1
 80008c8:	80bb      	strh	r3, [r7, #4]
 80008ca:	4613      	mov	r3, r2
 80008cc:	70fb      	strb	r3, [r7, #3]
    OLED_DrawFilledRectangle(x * SNAKE_BLOCK_SIZE, y * SNAKE_BLOCK_SIZE, SNAKE_BLOCK_SIZE, SNAKE_BLOCK_SIZE, color);
 80008ce:	88fb      	ldrh	r3, [r7, #6]
 80008d0:	009b      	lsls	r3, r3, #2
 80008d2:	b29b      	uxth	r3, r3
 80008d4:	b218      	sxth	r0, r3
 80008d6:	88bb      	ldrh	r3, [r7, #4]
 80008d8:	009b      	lsls	r3, r3, #2
 80008da:	b29b      	uxth	r3, r3
 80008dc:	b219      	sxth	r1, r3
 80008de:	78fb      	ldrb	r3, [r7, #3]
 80008e0:	9300      	str	r3, [sp, #0]
 80008e2:	2304      	movs	r3, #4
 80008e4:	2204      	movs	r2, #4
 80008e6:	f006 f905 	bl	8006af4 <OLED_DrawFilledRectangle>
}
 80008ea:	bf00      	nop
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
	...

080008f4 <Snake_GenerateFood>:

// Function to generate food at a random position (used by Snake)
static void Snake_GenerateFood()
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
    bool food_on_snake;
    do
    {
        food_on_snake = false;
 80008fa:	2300      	movs	r3, #0
 80008fc:	71fb      	strb	r3, [r7, #7]
        food.pos.x = rand() % GAME_AREA_WIDTH;
 80008fe:	f009 fb2f 	bl	8009f60 <rand>
 8000902:	4603      	mov	r3, r0
 8000904:	425a      	negs	r2, r3
 8000906:	f003 031f 	and.w	r3, r3, #31
 800090a:	f002 021f 	and.w	r2, r2, #31
 800090e:	bf58      	it	pl
 8000910:	4253      	negpl	r3, r2
 8000912:	b21a      	sxth	r2, r3
 8000914:	4b20      	ldr	r3, [pc, #128]	@ (8000998 <Snake_GenerateFood+0xa4>)
 8000916:	801a      	strh	r2, [r3, #0]
        food.pos.y = rand() % GAME_AREA_HEIGHT;
 8000918:	f009 fb22 	bl	8009f60 <rand>
 800091c:	4602      	mov	r2, r0
 800091e:	4b1f      	ldr	r3, [pc, #124]	@ (800099c <Snake_GenerateFood+0xa8>)
 8000920:	fb83 1302 	smull	r1, r3, r3, r2
 8000924:	4413      	add	r3, r2
 8000926:	10d9      	asrs	r1, r3, #3
 8000928:	17d3      	asrs	r3, r2, #31
 800092a:	1ac9      	subs	r1, r1, r3
 800092c:	460b      	mov	r3, r1
 800092e:	00db      	lsls	r3, r3, #3
 8000930:	1a5b      	subs	r3, r3, r1
 8000932:	005b      	lsls	r3, r3, #1
 8000934:	1ad1      	subs	r1, r2, r3
 8000936:	b20a      	sxth	r2, r1
 8000938:	4b17      	ldr	r3, [pc, #92]	@ (8000998 <Snake_GenerateFood+0xa4>)
 800093a:	805a      	strh	r2, [r3, #2]
        for (uint16_t i = 0; i < snake.length; i++)
 800093c:	2300      	movs	r3, #0
 800093e:	80bb      	strh	r3, [r7, #4]
 8000940:	e019      	b.n	8000976 <Snake_GenerateFood+0x82>
        {
            if (snake.body[i].x == food.pos.x && snake.body[i].y == food.pos.y)
 8000942:	88bb      	ldrh	r3, [r7, #4]
 8000944:	4a16      	ldr	r2, [pc, #88]	@ (80009a0 <Snake_GenerateFood+0xac>)
 8000946:	f932 2023 	ldrsh.w	r2, [r2, r3, lsl #2]
 800094a:	4b13      	ldr	r3, [pc, #76]	@ (8000998 <Snake_GenerateFood+0xa4>)
 800094c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000950:	429a      	cmp	r2, r3
 8000952:	d10d      	bne.n	8000970 <Snake_GenerateFood+0x7c>
 8000954:	88bb      	ldrh	r3, [r7, #4]
 8000956:	4a12      	ldr	r2, [pc, #72]	@ (80009a0 <Snake_GenerateFood+0xac>)
 8000958:	009b      	lsls	r3, r3, #2
 800095a:	4413      	add	r3, r2
 800095c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000960:	4b0d      	ldr	r3, [pc, #52]	@ (8000998 <Snake_GenerateFood+0xa4>)
 8000962:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000966:	429a      	cmp	r2, r3
 8000968:	d102      	bne.n	8000970 <Snake_GenerateFood+0x7c>
            {
                food_on_snake = true;
 800096a:	2301      	movs	r3, #1
 800096c:	71fb      	strb	r3, [r7, #7]
                break;
 800096e:	e008      	b.n	8000982 <Snake_GenerateFood+0x8e>
        for (uint16_t i = 0; i < snake.length; i++)
 8000970:	88bb      	ldrh	r3, [r7, #4]
 8000972:	3301      	adds	r3, #1
 8000974:	80bb      	strh	r3, [r7, #4]
 8000976:	4b0a      	ldr	r3, [pc, #40]	@ (80009a0 <Snake_GenerateFood+0xac>)
 8000978:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 800097c:	88ba      	ldrh	r2, [r7, #4]
 800097e:	429a      	cmp	r2, r3
 8000980:	d3df      	bcc.n	8000942 <Snake_GenerateFood+0x4e>
            }
        }
    } while (food_on_snake);
 8000982:	79fb      	ldrb	r3, [r7, #7]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d1b8      	bne.n	80008fa <Snake_GenerateFood+0x6>
    food.active = true;
 8000988:	4b03      	ldr	r3, [pc, #12]	@ (8000998 <Snake_GenerateFood+0xa4>)
 800098a:	2201      	movs	r2, #1
 800098c:	711a      	strb	r2, [r3, #4]
}
 800098e:	bf00      	nop
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20000220 	.word	0x20000220
 800099c:	92492493 	.word	0x92492493
 80009a0:	2000008c 	.word	0x2000008c

080009a4 <Snake_InitGame>:

void Snake_InitGame(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
    // srand(HAL_GetTick()); // Seed RNG if not done elsewhere
    gameOver = false;
 80009aa:	4b28      	ldr	r3, [pc, #160]	@ (8000a4c <Snake_InitGame+0xa8>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	701a      	strb	r2, [r3, #0]
    snake.length = 3;
 80009b0:	4b27      	ldr	r3, [pc, #156]	@ (8000a50 <Snake_InitGame+0xac>)
 80009b2:	2203      	movs	r2, #3
 80009b4:	f8a3 2190 	strh.w	r2, [r3, #400]	@ 0x190
    snake.dir = DIR_RIGHT;
 80009b8:	4b25      	ldr	r3, [pc, #148]	@ (8000a50 <Snake_InitGame+0xac>)
 80009ba:	2203      	movs	r2, #3
 80009bc:	f883 2192 	strb.w	r2, [r3, #402]	@ 0x192
    snake.body[0].x = GAME_AREA_WIDTH / 2;
 80009c0:	4b23      	ldr	r3, [pc, #140]	@ (8000a50 <Snake_InitGame+0xac>)
 80009c2:	2210      	movs	r2, #16
 80009c4:	801a      	strh	r2, [r3, #0]
    snake.body[0].y = GAME_AREA_HEIGHT / 2;
 80009c6:	4b22      	ldr	r3, [pc, #136]	@ (8000a50 <Snake_InitGame+0xac>)
 80009c8:	2207      	movs	r2, #7
 80009ca:	805a      	strh	r2, [r3, #2]
    snake.body[1].x = snake.body[0].x - 1;
 80009cc:	4b20      	ldr	r3, [pc, #128]	@ (8000a50 <Snake_InitGame+0xac>)
 80009ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009d2:	b29b      	uxth	r3, r3
 80009d4:	3b01      	subs	r3, #1
 80009d6:	b29b      	uxth	r3, r3
 80009d8:	b21a      	sxth	r2, r3
 80009da:	4b1d      	ldr	r3, [pc, #116]	@ (8000a50 <Snake_InitGame+0xac>)
 80009dc:	809a      	strh	r2, [r3, #4]
    snake.body[1].y = snake.body[0].y;
 80009de:	4b1c      	ldr	r3, [pc, #112]	@ (8000a50 <Snake_InitGame+0xac>)
 80009e0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80009e4:	4b1a      	ldr	r3, [pc, #104]	@ (8000a50 <Snake_InitGame+0xac>)
 80009e6:	80da      	strh	r2, [r3, #6]
    snake.body[2].x = snake.body[0].x - 2;
 80009e8:	4b19      	ldr	r3, [pc, #100]	@ (8000a50 <Snake_InitGame+0xac>)
 80009ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	3b02      	subs	r3, #2
 80009f2:	b29b      	uxth	r3, r3
 80009f4:	b21a      	sxth	r2, r3
 80009f6:	4b16      	ldr	r3, [pc, #88]	@ (8000a50 <Snake_InitGame+0xac>)
 80009f8:	811a      	strh	r2, [r3, #8]
    snake.body[2].y = snake.body[0].y;
 80009fa:	4b15      	ldr	r3, [pc, #84]	@ (8000a50 <Snake_InitGame+0xac>)
 80009fc:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000a00:	4b13      	ldr	r3, [pc, #76]	@ (8000a50 <Snake_InitGame+0xac>)
 8000a02:	815a      	strh	r2, [r3, #10]
    for (uint16_t i = snake.length; i < SNAKE_MAX_LENGTH; ++i)
 8000a04:	4b12      	ldr	r3, [pc, #72]	@ (8000a50 <Snake_InitGame+0xac>)
 8000a06:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8000a0a:	80fb      	strh	r3, [r7, #6]
 8000a0c:	e00f      	b.n	8000a2e <Snake_InitGame+0x8a>
    {
        snake.body[i].x = -1;
 8000a0e:	88fb      	ldrh	r3, [r7, #6]
 8000a10:	4a0f      	ldr	r2, [pc, #60]	@ (8000a50 <Snake_InitGame+0xac>)
 8000a12:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000a16:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
        snake.body[i].y = -1;
 8000a1a:	88fb      	ldrh	r3, [r7, #6]
 8000a1c:	4a0c      	ldr	r2, [pc, #48]	@ (8000a50 <Snake_InitGame+0xac>)
 8000a1e:	009b      	lsls	r3, r3, #2
 8000a20:	4413      	add	r3, r2
 8000a22:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a26:	805a      	strh	r2, [r3, #2]
    for (uint16_t i = snake.length; i < SNAKE_MAX_LENGTH; ++i)
 8000a28:	88fb      	ldrh	r3, [r7, #6]
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	80fb      	strh	r3, [r7, #6]
 8000a2e:	88fb      	ldrh	r3, [r7, #6]
 8000a30:	2b63      	cmp	r3, #99	@ 0x63
 8000a32:	d9ec      	bls.n	8000a0e <Snake_InitGame+0x6a>
    }
    Snake_GenerateFood();
 8000a34:	f7ff ff5e 	bl	80008f4 <Snake_GenerateFood>
    gameTickLast = HAL_GetTick();
 8000a38:	f006 fdf4 	bl	8007624 <HAL_GetTick>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	4a05      	ldr	r2, [pc, #20]	@ (8000a54 <Snake_InitGame+0xb0>)
 8000a40:	6013      	str	r3, [r2, #0]
}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20000226 	.word	0x20000226
 8000a50:	2000008c 	.word	0x2000008c
 8000a54:	20000228 	.word	0x20000228

08000a58 <Snake_Draw>:

static void Snake_Draw(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
    for (uint16_t i = 0; i < snake.length; i++)
 8000a5e:	2300      	movs	r3, #0
 8000a60:	80fb      	strh	r3, [r7, #6]
 8000a62:	e010      	b.n	8000a86 <Snake_Draw+0x2e>
    {
        DrawBlock(snake.body[i].x, snake.body[i].y, 1);
 8000a64:	88fb      	ldrh	r3, [r7, #6]
 8000a66:	4a1d      	ldr	r2, [pc, #116]	@ (8000adc <Snake_Draw+0x84>)
 8000a68:	f932 0023 	ldrsh.w	r0, [r2, r3, lsl #2]
 8000a6c:	88fb      	ldrh	r3, [r7, #6]
 8000a6e:	4a1b      	ldr	r2, [pc, #108]	@ (8000adc <Snake_Draw+0x84>)
 8000a70:	009b      	lsls	r3, r3, #2
 8000a72:	4413      	add	r3, r2
 8000a74:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000a78:	2201      	movs	r2, #1
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	f7ff ff1e 	bl	80008bc <DrawBlock>
    for (uint16_t i = 0; i < snake.length; i++)
 8000a80:	88fb      	ldrh	r3, [r7, #6]
 8000a82:	3301      	adds	r3, #1
 8000a84:	80fb      	strh	r3, [r7, #6]
 8000a86:	4b15      	ldr	r3, [pc, #84]	@ (8000adc <Snake_Draw+0x84>)
 8000a88:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8000a8c:	88fa      	ldrh	r2, [r7, #6]
 8000a8e:	429a      	cmp	r2, r3
 8000a90:	d3e8      	bcc.n	8000a64 <Snake_Draw+0xc>
    }
    if (food.active)
 8000a92:	4b13      	ldr	r3, [pc, #76]	@ (8000ae0 <Snake_Draw+0x88>)
 8000a94:	791b      	ldrb	r3, [r3, #4]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d009      	beq.n	8000aae <Snake_Draw+0x56>
    {
        DrawBlock(food.pos.x, food.pos.y, 1);
 8000a9a:	4b11      	ldr	r3, [pc, #68]	@ (8000ae0 <Snake_Draw+0x88>)
 8000a9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000aa0:	4a0f      	ldr	r2, [pc, #60]	@ (8000ae0 <Snake_Draw+0x88>)
 8000aa2:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff ff07 	bl	80008bc <DrawBlock>
    }
    if (gameOver)
 8000aae:	4b0d      	ldr	r3, [pc, #52]	@ (8000ae4 <Snake_Draw+0x8c>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d00e      	beq.n	8000ad4 <Snake_Draw+0x7c>
    {
        OLED_DisplayString(OLED_WIDTH / 2 - 3 * 6, OLED_HEIGHT / 2 - 4, "GAME");
 8000ab6:	4a0c      	ldr	r2, [pc, #48]	@ (8000ae8 <Snake_Draw+0x90>)
 8000ab8:	211c      	movs	r1, #28
 8000aba:	202e      	movs	r0, #46	@ 0x2e
 8000abc:	f001 fcfc 	bl	80024b8 <OLED_DisplayString>
        OLED_DisplayString(OLED_WIDTH / 2 - 3 * 6, OLED_HEIGHT / 2 + 4, "OVER");
 8000ac0:	4a0a      	ldr	r2, [pc, #40]	@ (8000aec <Snake_Draw+0x94>)
 8000ac2:	2124      	movs	r1, #36	@ 0x24
 8000ac4:	202e      	movs	r0, #46	@ 0x2e
 8000ac6:	f001 fcf7 	bl	80024b8 <OLED_DisplayString>
        OLED_DisplayString(OLED_WIDTH / 2 - 5 * 6, OLED_HEIGHT / 2 + 12, "RST BTN=RS");
 8000aca:	4a09      	ldr	r2, [pc, #36]	@ (8000af0 <Snake_Draw+0x98>)
 8000acc:	212c      	movs	r1, #44	@ 0x2c
 8000ace:	2022      	movs	r0, #34	@ 0x22
 8000ad0:	f001 fcf2 	bl	80024b8 <OLED_DisplayString>
    }
}
 8000ad4:	bf00      	nop
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	2000008c 	.word	0x2000008c
 8000ae0:	20000220 	.word	0x20000220
 8000ae4:	20000226 	.word	0x20000226
 8000ae8:	0800c7d0 	.word	0x0800c7d0
 8000aec:	0800c7d8 	.word	0x0800c7d8
 8000af0:	0800c7e0 	.word	0x0800c7e0

08000af4 <Snake_Update>:

static void Snake_Update(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
    if (gameOver)
 8000afa:	4b5a      	ldr	r3, [pc, #360]	@ (8000c64 <Snake_Update+0x170>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	f040 80ab 	bne.w	8000c5a <Snake_Update+0x166>
        return;

    Point new_head = snake.body[0];
 8000b04:	4b58      	ldr	r3, [pc, #352]	@ (8000c68 <Snake_Update+0x174>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	603b      	str	r3, [r7, #0]
    switch (snake.dir)
 8000b0a:	4b57      	ldr	r3, [pc, #348]	@ (8000c68 <Snake_Update+0x174>)
 8000b0c:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8000b10:	2b03      	cmp	r3, #3
 8000b12:	d82b      	bhi.n	8000b6c <Snake_Update+0x78>
 8000b14:	a201      	add	r2, pc, #4	@ (adr r2, 8000b1c <Snake_Update+0x28>)
 8000b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b1a:	bf00      	nop
 8000b1c:	08000b2d 	.word	0x08000b2d
 8000b20:	08000b3d 	.word	0x08000b3d
 8000b24:	08000b4d 	.word	0x08000b4d
 8000b28:	08000b5d 	.word	0x08000b5d
    {
    case DIR_UP:
        new_head.y--;
 8000b2c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b30:	b29b      	uxth	r3, r3
 8000b32:	3b01      	subs	r3, #1
 8000b34:	b29b      	uxth	r3, r3
 8000b36:	b21b      	sxth	r3, r3
 8000b38:	807b      	strh	r3, [r7, #2]
        break;
 8000b3a:	e017      	b.n	8000b6c <Snake_Update+0x78>
    case DIR_DOWN:
        new_head.y++;
 8000b3c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b40:	b29b      	uxth	r3, r3
 8000b42:	3301      	adds	r3, #1
 8000b44:	b29b      	uxth	r3, r3
 8000b46:	b21b      	sxth	r3, r3
 8000b48:	807b      	strh	r3, [r7, #2]
        break;
 8000b4a:	e00f      	b.n	8000b6c <Snake_Update+0x78>
    case DIR_LEFT:
        new_head.x--;
 8000b4c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000b50:	b29b      	uxth	r3, r3
 8000b52:	3b01      	subs	r3, #1
 8000b54:	b29b      	uxth	r3, r3
 8000b56:	b21b      	sxth	r3, r3
 8000b58:	803b      	strh	r3, [r7, #0]
        break;
 8000b5a:	e007      	b.n	8000b6c <Snake_Update+0x78>
    case DIR_RIGHT:
        new_head.x++;
 8000b5c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000b60:	b29b      	uxth	r3, r3
 8000b62:	3301      	adds	r3, #1
 8000b64:	b29b      	uxth	r3, r3
 8000b66:	b21b      	sxth	r3, r3
 8000b68:	803b      	strh	r3, [r7, #0]
        break;
 8000b6a:	bf00      	nop
    }

    if (new_head.x < 0)
 8000b6c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	da02      	bge.n	8000b7a <Snake_Update+0x86>
        new_head.x = GAME_AREA_WIDTH - 1;
 8000b74:	231f      	movs	r3, #31
 8000b76:	803b      	strh	r3, [r7, #0]
 8000b78:	e005      	b.n	8000b86 <Snake_Update+0x92>
    else if (new_head.x >= GAME_AREA_WIDTH)
 8000b7a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000b7e:	2b1f      	cmp	r3, #31
 8000b80:	dd01      	ble.n	8000b86 <Snake_Update+0x92>
        new_head.x = 0;
 8000b82:	2300      	movs	r3, #0
 8000b84:	803b      	strh	r3, [r7, #0]
    if (new_head.y < 0)
 8000b86:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	da02      	bge.n	8000b94 <Snake_Update+0xa0>
        new_head.y = GAME_AREA_HEIGHT - 1;
 8000b8e:	230d      	movs	r3, #13
 8000b90:	807b      	strh	r3, [r7, #2]
 8000b92:	e005      	b.n	8000ba0 <Snake_Update+0xac>
    else if (new_head.y >= GAME_AREA_HEIGHT)
 8000b94:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b98:	2b0d      	cmp	r3, #13
 8000b9a:	dd01      	ble.n	8000ba0 <Snake_Update+0xac>
        new_head.y = 0;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	807b      	strh	r3, [r7, #2]

    for (uint16_t i = 0; i < snake.length - 1; i++) // Check up to length-1
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	80fb      	strh	r3, [r7, #6]
 8000ba4:	e018      	b.n	8000bd8 <Snake_Update+0xe4>
    {
        if (new_head.x == snake.body[i].x && new_head.y == snake.body[i].y)
 8000ba6:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000baa:	88fb      	ldrh	r3, [r7, #6]
 8000bac:	492e      	ldr	r1, [pc, #184]	@ (8000c68 <Snake_Update+0x174>)
 8000bae:	f931 3023 	ldrsh.w	r3, [r1, r3, lsl #2]
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	d10d      	bne.n	8000bd2 <Snake_Update+0xde>
 8000bb6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000bba:	88fb      	ldrh	r3, [r7, #6]
 8000bbc:	492a      	ldr	r1, [pc, #168]	@ (8000c68 <Snake_Update+0x174>)
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	440b      	add	r3, r1
 8000bc2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000bc6:	429a      	cmp	r2, r3
 8000bc8:	d103      	bne.n	8000bd2 <Snake_Update+0xde>
        {
            gameOver = true;
 8000bca:	4b26      	ldr	r3, [pc, #152]	@ (8000c64 <Snake_Update+0x170>)
 8000bcc:	2201      	movs	r2, #1
 8000bce:	701a      	strb	r2, [r3, #0]
            return;
 8000bd0:	e044      	b.n	8000c5c <Snake_Update+0x168>
    for (uint16_t i = 0; i < snake.length - 1; i++) // Check up to length-1
 8000bd2:	88fb      	ldrh	r3, [r7, #6]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	80fb      	strh	r3, [r7, #6]
 8000bd8:	88fa      	ldrh	r2, [r7, #6]
 8000bda:	4b23      	ldr	r3, [pc, #140]	@ (8000c68 <Snake_Update+0x174>)
 8000bdc:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8000be0:	3b01      	subs	r3, #1
 8000be2:	429a      	cmp	r2, r3
 8000be4:	dbdf      	blt.n	8000ba6 <Snake_Update+0xb2>
        }
    }

    if (food.active && new_head.x == food.pos.x && new_head.y == food.pos.y)
 8000be6:	4b21      	ldr	r3, [pc, #132]	@ (8000c6c <Snake_Update+0x178>)
 8000be8:	791b      	ldrb	r3, [r3, #4]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d01c      	beq.n	8000c28 <Snake_Update+0x134>
 8000bee:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000bf2:	4b1e      	ldr	r3, [pc, #120]	@ (8000c6c <Snake_Update+0x178>)
 8000bf4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	d115      	bne.n	8000c28 <Snake_Update+0x134>
 8000bfc:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000c00:	4b1a      	ldr	r3, [pc, #104]	@ (8000c6c <Snake_Update+0x178>)
 8000c02:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000c06:	429a      	cmp	r2, r3
 8000c08:	d10e      	bne.n	8000c28 <Snake_Update+0x134>
    {
        if (snake.length < SNAKE_MAX_LENGTH)
 8000c0a:	4b17      	ldr	r3, [pc, #92]	@ (8000c68 <Snake_Update+0x174>)
 8000c0c:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8000c10:	2b63      	cmp	r3, #99	@ 0x63
 8000c12:	d807      	bhi.n	8000c24 <Snake_Update+0x130>
            snake.length++;
 8000c14:	4b14      	ldr	r3, [pc, #80]	@ (8000c68 <Snake_Update+0x174>)
 8000c16:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	b29a      	uxth	r2, r3
 8000c1e:	4b12      	ldr	r3, [pc, #72]	@ (8000c68 <Snake_Update+0x174>)
 8000c20:	f8a3 2190 	strh.w	r2, [r3, #400]	@ 0x190
        Snake_GenerateFood();
 8000c24:	f7ff fe66 	bl	80008f4 <Snake_GenerateFood>
    }
    // No else needed for tail movement; body shift handles it.

    for (uint16_t i = snake.length - 1; i > 0; i--)
 8000c28:	4b0f      	ldr	r3, [pc, #60]	@ (8000c68 <Snake_Update+0x174>)
 8000c2a:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8000c2e:	3b01      	subs	r3, #1
 8000c30:	80bb      	strh	r3, [r7, #4]
 8000c32:	e00b      	b.n	8000c4c <Snake_Update+0x158>
    {
        snake.body[i] = snake.body[i - 1];
 8000c34:	88bb      	ldrh	r3, [r7, #4]
 8000c36:	1e5a      	subs	r2, r3, #1
 8000c38:	88bb      	ldrh	r3, [r7, #4]
 8000c3a:	490b      	ldr	r1, [pc, #44]	@ (8000c68 <Snake_Update+0x174>)
 8000c3c:	480a      	ldr	r0, [pc, #40]	@ (8000c68 <Snake_Update+0x174>)
 8000c3e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8000c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (uint16_t i = snake.length - 1; i > 0; i--)
 8000c46:	88bb      	ldrh	r3, [r7, #4]
 8000c48:	3b01      	subs	r3, #1
 8000c4a:	80bb      	strh	r3, [r7, #4]
 8000c4c:	88bb      	ldrh	r3, [r7, #4]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d1f0      	bne.n	8000c34 <Snake_Update+0x140>
    }
    snake.body[0] = new_head;
 8000c52:	4a05      	ldr	r2, [pc, #20]	@ (8000c68 <Snake_Update+0x174>)
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	6013      	str	r3, [r2, #0]
 8000c58:	e000      	b.n	8000c5c <Snake_Update+0x168>
        return;
 8000c5a:	bf00      	nop
}
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20000226 	.word	0x20000226
 8000c68:	2000008c 	.word	0x2000008c
 8000c6c:	20000220 	.word	0x20000220

08000c70 <Snake_HandleInput>:

void Snake_HandleInput(Direction input_dir)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	71fb      	strb	r3, [r7, #7]
    if ((snake.dir == DIR_UP && input_dir != DIR_DOWN) ||
 8000c7a:	4b14      	ldr	r3, [pc, #80]	@ (8000ccc <Snake_HandleInput+0x5c>)
 8000c7c:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d102      	bne.n	8000c8a <Snake_HandleInput+0x1a>
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d117      	bne.n	8000cba <Snake_HandleInput+0x4a>
        (snake.dir == DIR_DOWN && input_dir != DIR_UP) ||
 8000c8a:	4b10      	ldr	r3, [pc, #64]	@ (8000ccc <Snake_HandleInput+0x5c>)
 8000c8c:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
    if ((snake.dir == DIR_UP && input_dir != DIR_DOWN) ||
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d102      	bne.n	8000c9a <Snake_HandleInput+0x2a>
        (snake.dir == DIR_DOWN && input_dir != DIR_UP) ||
 8000c94:	79fb      	ldrb	r3, [r7, #7]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d10f      	bne.n	8000cba <Snake_HandleInput+0x4a>
        (snake.dir == DIR_LEFT && input_dir != DIR_RIGHT) ||
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000ccc <Snake_HandleInput+0x5c>)
 8000c9c:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
        (snake.dir == DIR_DOWN && input_dir != DIR_UP) ||
 8000ca0:	2b02      	cmp	r3, #2
 8000ca2:	d102      	bne.n	8000caa <Snake_HandleInput+0x3a>
        (snake.dir == DIR_LEFT && input_dir != DIR_RIGHT) ||
 8000ca4:	79fb      	ldrb	r3, [r7, #7]
 8000ca6:	2b03      	cmp	r3, #3
 8000ca8:	d107      	bne.n	8000cba <Snake_HandleInput+0x4a>
        (snake.dir == DIR_RIGHT && input_dir != DIR_LEFT))
 8000caa:	4b08      	ldr	r3, [pc, #32]	@ (8000ccc <Snake_HandleInput+0x5c>)
 8000cac:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
        (snake.dir == DIR_LEFT && input_dir != DIR_RIGHT) ||
 8000cb0:	2b03      	cmp	r3, #3
 8000cb2:	d106      	bne.n	8000cc2 <Snake_HandleInput+0x52>
        (snake.dir == DIR_RIGHT && input_dir != DIR_LEFT))
 8000cb4:	79fb      	ldrb	r3, [r7, #7]
 8000cb6:	2b02      	cmp	r3, #2
 8000cb8:	d003      	beq.n	8000cc2 <Snake_HandleInput+0x52>
    {
        snake.dir = input_dir;
 8000cba:	4a04      	ldr	r2, [pc, #16]	@ (8000ccc <Snake_HandleInput+0x5c>)
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
 8000cbe:	f882 3192 	strb.w	r3, [r2, #402]	@ 0x192
    }
}
 8000cc2:	bf00      	nop
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bc80      	pop	{r7}
 8000cca:	4770      	bx	lr
 8000ccc:	2000008c 	.word	0x2000008c

08000cd0 <Snake_GameLoop>:

void Snake_GameLoop(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0
    static uint16_t LastCount;
    static bool preMutiTurn = false;

    if (FirstRun)
 8000cd6:	4b60      	ldr	r3, [pc, #384]	@ (8000e58 <Snake_GameLoop+0x188>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d006      	beq.n	8000cec <Snake_GameLoop+0x1c>
    {
        FirstRun = false;
 8000cde:	4b5e      	ldr	r3, [pc, #376]	@ (8000e58 <Snake_GameLoop+0x188>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	701a      	strb	r2, [r3, #0]
        LastCount = count;
 8000ce4:	4b5d      	ldr	r3, [pc, #372]	@ (8000e5c <Snake_GameLoop+0x18c>)
 8000ce6:	881a      	ldrh	r2, [r3, #0]
 8000ce8:	4b5d      	ldr	r3, [pc, #372]	@ (8000e60 <Snake_GameLoop+0x190>)
 8000cea:	801a      	strh	r2, [r3, #0]
    }

    if (!preMutiTurn)
 8000cec:	4b5d      	ldr	r3, [pc, #372]	@ (8000e64 <Snake_GameLoop+0x194>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	f083 0301 	eor.w	r3, r3, #1
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d065      	beq.n	8000dc6 <Snake_GameLoop+0xf6>
    {
        if (count - LastCount > 1)
 8000cfa:	4b58      	ldr	r3, [pc, #352]	@ (8000e5c <Snake_GameLoop+0x18c>)
 8000cfc:	881b      	ldrh	r3, [r3, #0]
 8000cfe:	461a      	mov	r2, r3
 8000d00:	4b57      	ldr	r3, [pc, #348]	@ (8000e60 <Snake_GameLoop+0x190>)
 8000d02:	881b      	ldrh	r3, [r3, #0]
 8000d04:	1ad3      	subs	r3, r2, r3
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	dd2a      	ble.n	8000d60 <Snake_GameLoop+0x90>
        {
            if (snake.dir == DIR_UP)
 8000d0a:	4b57      	ldr	r3, [pc, #348]	@ (8000e68 <Snake_GameLoop+0x198>)
 8000d0c:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d103      	bne.n	8000d1c <Snake_GameLoop+0x4c>
                Snake_HandleInput(DIR_RIGHT);
 8000d14:	2003      	movs	r0, #3
 8000d16:	f7ff ffab 	bl	8000c70 <Snake_HandleInput>
 8000d1a:	e019      	b.n	8000d50 <Snake_GameLoop+0x80>
            else if (snake.dir == DIR_DOWN)
 8000d1c:	4b52      	ldr	r3, [pc, #328]	@ (8000e68 <Snake_GameLoop+0x198>)
 8000d1e:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d103      	bne.n	8000d2e <Snake_GameLoop+0x5e>
                Snake_HandleInput(DIR_LEFT);
 8000d26:	2002      	movs	r0, #2
 8000d28:	f7ff ffa2 	bl	8000c70 <Snake_HandleInput>
 8000d2c:	e010      	b.n	8000d50 <Snake_GameLoop+0x80>
            else if (snake.dir == DIR_LEFT)
 8000d2e:	4b4e      	ldr	r3, [pc, #312]	@ (8000e68 <Snake_GameLoop+0x198>)
 8000d30:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8000d34:	2b02      	cmp	r3, #2
 8000d36:	d103      	bne.n	8000d40 <Snake_GameLoop+0x70>
                Snake_HandleInput(DIR_UP);
 8000d38:	2000      	movs	r0, #0
 8000d3a:	f7ff ff99 	bl	8000c70 <Snake_HandleInput>
 8000d3e:	e007      	b.n	8000d50 <Snake_GameLoop+0x80>
            else if (snake.dir == DIR_RIGHT)
 8000d40:	4b49      	ldr	r3, [pc, #292]	@ (8000e68 <Snake_GameLoop+0x198>)
 8000d42:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8000d46:	2b03      	cmp	r3, #3
 8000d48:	d102      	bne.n	8000d50 <Snake_GameLoop+0x80>
                Snake_HandleInput(DIR_DOWN);
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	f7ff ff90 	bl	8000c70 <Snake_HandleInput>

            preMutiTurn = true;
 8000d50:	4b44      	ldr	r3, [pc, #272]	@ (8000e64 <Snake_GameLoop+0x194>)
 8000d52:	2201      	movs	r2, #1
 8000d54:	701a      	strb	r2, [r3, #0]
            LastCount = count;
 8000d56:	4b41      	ldr	r3, [pc, #260]	@ (8000e5c <Snake_GameLoop+0x18c>)
 8000d58:	881a      	ldrh	r2, [r3, #0]
 8000d5a:	4b41      	ldr	r3, [pc, #260]	@ (8000e60 <Snake_GameLoop+0x190>)
 8000d5c:	801a      	strh	r2, [r3, #0]
 8000d5e:	e032      	b.n	8000dc6 <Snake_GameLoop+0xf6>
        }
        else if (count - LastCount < -1)
 8000d60:	4b3e      	ldr	r3, [pc, #248]	@ (8000e5c <Snake_GameLoop+0x18c>)
 8000d62:	881b      	ldrh	r3, [r3, #0]
 8000d64:	461a      	mov	r2, r3
 8000d66:	4b3e      	ldr	r3, [pc, #248]	@ (8000e60 <Snake_GameLoop+0x190>)
 8000d68:	881b      	ldrh	r3, [r3, #0]
 8000d6a:	1ad3      	subs	r3, r2, r3
 8000d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d70:	da29      	bge.n	8000dc6 <Snake_GameLoop+0xf6>
        {
            if (snake.dir == DIR_UP)
 8000d72:	4b3d      	ldr	r3, [pc, #244]	@ (8000e68 <Snake_GameLoop+0x198>)
 8000d74:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d103      	bne.n	8000d84 <Snake_GameLoop+0xb4>
                Snake_HandleInput(DIR_LEFT);
 8000d7c:	2002      	movs	r0, #2
 8000d7e:	f7ff ff77 	bl	8000c70 <Snake_HandleInput>
 8000d82:	e019      	b.n	8000db8 <Snake_GameLoop+0xe8>
            else if (snake.dir == DIR_DOWN)
 8000d84:	4b38      	ldr	r3, [pc, #224]	@ (8000e68 <Snake_GameLoop+0x198>)
 8000d86:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d103      	bne.n	8000d96 <Snake_GameLoop+0xc6>
                Snake_HandleInput(DIR_RIGHT);
 8000d8e:	2003      	movs	r0, #3
 8000d90:	f7ff ff6e 	bl	8000c70 <Snake_HandleInput>
 8000d94:	e010      	b.n	8000db8 <Snake_GameLoop+0xe8>
            else if (snake.dir == DIR_LEFT)
 8000d96:	4b34      	ldr	r3, [pc, #208]	@ (8000e68 <Snake_GameLoop+0x198>)
 8000d98:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8000d9c:	2b02      	cmp	r3, #2
 8000d9e:	d103      	bne.n	8000da8 <Snake_GameLoop+0xd8>
                Snake_HandleInput(DIR_DOWN);
 8000da0:	2001      	movs	r0, #1
 8000da2:	f7ff ff65 	bl	8000c70 <Snake_HandleInput>
 8000da6:	e007      	b.n	8000db8 <Snake_GameLoop+0xe8>
            else if (snake.dir == DIR_RIGHT)
 8000da8:	4b2f      	ldr	r3, [pc, #188]	@ (8000e68 <Snake_GameLoop+0x198>)
 8000daa:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8000dae:	2b03      	cmp	r3, #3
 8000db0:	d102      	bne.n	8000db8 <Snake_GameLoop+0xe8>
                Snake_HandleInput(DIR_UP);
 8000db2:	2000      	movs	r0, #0
 8000db4:	f7ff ff5c 	bl	8000c70 <Snake_HandleInput>

            preMutiTurn = true;
 8000db8:	4b2a      	ldr	r3, [pc, #168]	@ (8000e64 <Snake_GameLoop+0x194>)
 8000dba:	2201      	movs	r2, #1
 8000dbc:	701a      	strb	r2, [r3, #0]
            LastCount = count;
 8000dbe:	4b27      	ldr	r3, [pc, #156]	@ (8000e5c <Snake_GameLoop+0x18c>)
 8000dc0:	881a      	ldrh	r2, [r3, #0]
 8000dc2:	4b27      	ldr	r3, [pc, #156]	@ (8000e60 <Snake_GameLoop+0x190>)
 8000dc4:	801a      	strh	r2, [r3, #0]
        }
    }

    if (HAL_GetTick() - gameTickLast >= GAME_TICK_MS)
 8000dc6:	f006 fc2d 	bl	8007624 <HAL_GetTick>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	4b27      	ldr	r3, [pc, #156]	@ (8000e6c <Snake_GameLoop+0x19c>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	2b63      	cmp	r3, #99	@ 0x63
 8000dd4:	d909      	bls.n	8000dea <Snake_GameLoop+0x11a>
    {
        Snake_Update();
 8000dd6:	f7ff fe8d 	bl	8000af4 <Snake_Update>
        gameTickLast = HAL_GetTick();
 8000dda:	f006 fc23 	bl	8007624 <HAL_GetTick>
 8000dde:	4603      	mov	r3, r0
 8000de0:	4a22      	ldr	r2, [pc, #136]	@ (8000e6c <Snake_GameLoop+0x19c>)
 8000de2:	6013      	str	r3, [r2, #0]
        preMutiTurn = false;
 8000de4:	4b1f      	ldr	r3, [pc, #124]	@ (8000e64 <Snake_GameLoop+0x194>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	701a      	strb	r2, [r3, #0]
    }
    Snake_Draw();
 8000dea:	f7ff fe35 	bl	8000a58 <Snake_Draw>

    if (gameOver)
 8000dee:	4b20      	ldr	r3, [pc, #128]	@ (8000e70 <Snake_GameLoop+0x1a0>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d01d      	beq.n	8000e32 <Snake_GameLoop+0x162>
    {
        if (HAL_GPIO_ReadPin(GAME_INPUT_RESTART_PORT, GAME_INPUT_RESTART_PIN) == GPIO_PIN_RESET)
 8000df6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000dfa:	481e      	ldr	r0, [pc, #120]	@ (8000e74 <Snake_GameLoop+0x1a4>)
 8000dfc:	f007 f832 	bl	8007e64 <HAL_GPIO_ReadPin>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d115      	bne.n	8000e32 <Snake_GameLoop+0x162>
        {
            HAL_Delay(INPUT_DEBOUNCE_MS);
 8000e06:	2032      	movs	r0, #50	@ 0x32
 8000e08:	f006 fc16 	bl	8007638 <HAL_Delay>
            if (HAL_GPIO_ReadPin(GAME_INPUT_RESTART_PORT, GAME_INPUT_RESTART_PIN) == GPIO_PIN_RESET)
 8000e0c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e10:	4818      	ldr	r0, [pc, #96]	@ (8000e74 <Snake_GameLoop+0x1a4>)
 8000e12:	f007 f827 	bl	8007e64 <HAL_GPIO_ReadPin>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d10a      	bne.n	8000e32 <Snake_GameLoop+0x162>
            {
                Snake_InitGame();
 8000e1c:	f7ff fdc2 	bl	80009a4 <Snake_InitGame>
                while (HAL_GPIO_ReadPin(GAME_INPUT_RESTART_PORT, GAME_INPUT_RESTART_PIN) == GPIO_PIN_RESET)
 8000e20:	bf00      	nop
 8000e22:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e26:	4813      	ldr	r0, [pc, #76]	@ (8000e74 <Snake_GameLoop+0x1a4>)
 8000e28:	f007 f81c 	bl	8007e64 <HAL_GPIO_ReadPin>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d0f7      	beq.n	8000e22 <Snake_GameLoop+0x152>
                    ;
            }
        }
    }
    char score_str[20];
    sprintf(score_str, "Score: %d", snake.length - 3);
 8000e32:	4b0d      	ldr	r3, [pc, #52]	@ (8000e68 <Snake_GameLoop+0x198>)
 8000e34:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8000e38:	1eda      	subs	r2, r3, #3
 8000e3a:	1d3b      	adds	r3, r7, #4
 8000e3c:	490e      	ldr	r1, [pc, #56]	@ (8000e78 <Snake_GameLoop+0x1a8>)
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f009 f98e 	bl	800a160 <siprintf>
    OLED_DisplayString(0, OLED_HEIGHT-8, score_str);
 8000e44:	1d3b      	adds	r3, r7, #4
 8000e46:	461a      	mov	r2, r3
 8000e48:	2138      	movs	r1, #56	@ 0x38
 8000e4a:	2000      	movs	r0, #0
 8000e4c:	f001 fb34 	bl	80024b8 <OLED_DisplayString>
}
 8000e50:	bf00      	nop
 8000e52:	3718      	adds	r7, #24
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	20000000 	.word	0x20000000
 8000e5c:	200002f4 	.word	0x200002f4
 8000e60:	20000254 	.word	0x20000254
 8000e64:	20000256 	.word	0x20000256
 8000e68:	2000008c 	.word	0x2000008c
 8000e6c:	20000228 	.word	0x20000228
 8000e70:	20000226 	.word	0x20000226
 8000e74:	40010c00 	.word	0x40010c00
 8000e78:	0800c7ec 	.word	0x0800c7ec

08000e7c <Game2048_AddRandomTile>:

#pragma region 2048 Game Definitions
// --- 2048 Game Implementation ---

static void Game2048_AddRandomTile()
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b092      	sub	sp, #72	@ 0x48
 8000e80:	af00      	add	r7, sp, #0
    Point empty_tiles[GAME2048_BOARD_SIZE * GAME2048_BOARD_SIZE]; // Use GAME2048_BOARD_SIZE
    uint8_t num_empty_tiles = 0;
 8000e82:	2300      	movs	r3, #0
 8000e84:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 8000e88:	2300      	movs	r3, #0
 8000e8a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8000e8e:	e035      	b.n	8000efc <Game2048_AddRandomTile+0x80>
    {
        for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 8000e90:	2300      	movs	r3, #0
 8000e92:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8000e96:	e028      	b.n	8000eea <Game2048_AddRandomTile+0x6e>
        {
            if (game2048_board[r][c].value == 0)
 8000e98:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8000e9c:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8000ea0:	493a      	ldr	r1, [pc, #232]	@ (8000f8c <Game2048_AddRandomTile+0x110>)
 8000ea2:	0092      	lsls	r2, r2, #2
 8000ea4:	4413      	add	r3, r2
 8000ea6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d118      	bne.n	8000ee0 <Game2048_AddRandomTile+0x64>
            {
                empty_tiles[num_empty_tiles].x = c;
 8000eae:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000eb2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8000eb6:	b212      	sxth	r2, r2
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	3348      	adds	r3, #72	@ 0x48
 8000ebc:	443b      	add	r3, r7
 8000ebe:	f823 2c48 	strh.w	r2, [r3, #-72]
                empty_tiles[num_empty_tiles].y = r;
 8000ec2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000ec6:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8000eca:	b212      	sxth	r2, r2
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	3348      	adds	r3, #72	@ 0x48
 8000ed0:	443b      	add	r3, r7
 8000ed2:	f823 2c46 	strh.w	r2, [r3, #-70]
                num_empty_tiles++;
 8000ed6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000eda:	3301      	adds	r3, #1
 8000edc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 8000ee0:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8000eea:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8000eee:	2b03      	cmp	r3, #3
 8000ef0:	d9d2      	bls.n	8000e98 <Game2048_AddRandomTile+0x1c>
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 8000ef2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8000efc:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8000f00:	2b03      	cmp	r3, #3
 8000f02:	d9c5      	bls.n	8000e90 <Game2048_AddRandomTile+0x14>
            }
        }
    }
    if (num_empty_tiles > 0)
 8000f04:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d03a      	beq.n	8000f82 <Game2048_AddRandomTile+0x106>
    {
        uint16_t rand_index = rand() % num_empty_tiles;
 8000f0c:	f009 f828 	bl	8009f60 <rand>
 8000f10:	4602      	mov	r2, r0
 8000f12:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000f16:	fb92 f1f3 	sdiv	r1, r2, r3
 8000f1a:	fb01 f303 	mul.w	r3, r1, r3
 8000f1e:	1ad3      	subs	r3, r2, r3
 8000f20:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        uint8_t r_pos = empty_tiles[rand_index].y;
 8000f24:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	3348      	adds	r3, #72	@ 0x48
 8000f2c:	443b      	add	r3, r7
 8000f2e:	f933 3c46 	ldrsh.w	r3, [r3, #-70]
 8000f32:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
        uint8_t c_pos = empty_tiles[rand_index].x;
 8000f36:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	3348      	adds	r3, #72	@ 0x48
 8000f3e:	443b      	add	r3, r7
 8000f40:	f933 3c48 	ldrsh.w	r3, [r3, #-72]
 8000f44:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
        game2048_board[r_pos][c_pos].value = (rand() % 10 == 0) ? 4 : 2;
 8000f48:	f009 f80a 	bl	8009f60 <rand>
 8000f4c:	4601      	mov	r1, r0
 8000f4e:	4b10      	ldr	r3, [pc, #64]	@ (8000f90 <Game2048_AddRandomTile+0x114>)
 8000f50:	fb83 2301 	smull	r2, r3, r3, r1
 8000f54:	109a      	asrs	r2, r3, #2
 8000f56:	17cb      	asrs	r3, r1, #31
 8000f58:	1ad2      	subs	r2, r2, r3
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	4413      	add	r3, r2
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	1aca      	subs	r2, r1, r3
 8000f64:	2a00      	cmp	r2, #0
 8000f66:	d101      	bne.n	8000f6c <Game2048_AddRandomTile+0xf0>
 8000f68:	2004      	movs	r0, #4
 8000f6a:	e000      	b.n	8000f6e <Game2048_AddRandomTile+0xf2>
 8000f6c:	2002      	movs	r0, #2
 8000f6e:	f897 2041 	ldrb.w	r2, [r7, #65]	@ 0x41
 8000f72:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000f76:	4905      	ldr	r1, [pc, #20]	@ (8000f8c <Game2048_AddRandomTile+0x110>)
 8000f78:	0092      	lsls	r2, r2, #2
 8000f7a:	4413      	add	r3, r2
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    }
}
 8000f82:	bf00      	nop
 8000f84:	3748      	adds	r7, #72	@ 0x48
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	2000022c 	.word	0x2000022c
 8000f90:	66666667 	.word	0x66666667

08000f94 <Game2048_Init>:

void Game2048_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	71fb      	strb	r3, [r7, #7]
 8000f9e:	e013      	b.n	8000fc8 <Game2048_Init+0x34>
    {
        for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	71bb      	strb	r3, [r7, #6]
 8000fa4:	e00a      	b.n	8000fbc <Game2048_Init+0x28>
        {
            game2048_board[r][c].value = 0;
 8000fa6:	79fa      	ldrb	r2, [r7, #7]
 8000fa8:	79bb      	ldrb	r3, [r7, #6]
 8000faa:	4914      	ldr	r1, [pc, #80]	@ (8000ffc <Game2048_Init+0x68>)
 8000fac:	0092      	lsls	r2, r2, #2
 8000fae:	4413      	add	r3, r2
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 8000fb6:	79bb      	ldrb	r3, [r7, #6]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	71bb      	strb	r3, [r7, #6]
 8000fbc:	79bb      	ldrb	r3, [r7, #6]
 8000fbe:	2b03      	cmp	r3, #3
 8000fc0:	d9f1      	bls.n	8000fa6 <Game2048_Init+0x12>
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	71fb      	strb	r3, [r7, #7]
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	2b03      	cmp	r3, #3
 8000fcc:	d9e8      	bls.n	8000fa0 <Game2048_Init+0xc>
        }
    }
    game2048_score = 0;
 8000fce:	4b0c      	ldr	r3, [pc, #48]	@ (8001000 <Game2048_Init+0x6c>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
    game2048_game_over = false;
 8000fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001004 <Game2048_Init+0x70>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	701a      	strb	r2, [r3, #0]
    game2048_game_won = false;
 8000fda:	4b0b      	ldr	r3, [pc, #44]	@ (8001008 <Game2048_Init+0x74>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	701a      	strb	r2, [r3, #0]
    game2048_move_made_this_turn = false;
 8000fe0:	4b0a      	ldr	r3, [pc, #40]	@ (800100c <Game2048_Init+0x78>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	701a      	strb	r2, [r3, #0]
    FirstRun = true; // Reset the first run flag
 8000fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8001010 <Game2048_Init+0x7c>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	701a      	strb	r2, [r3, #0]
    Game2048_AddRandomTile();
 8000fec:	f7ff ff46 	bl	8000e7c <Game2048_AddRandomTile>

    OLED_UpdateDisplayVSync(); // Update display to show the initial state
 8000ff0:	f000 fe76 	bl	8001ce0 <OLED_UpdateDisplayVSync>
}
 8000ff4:	bf00      	nop
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	2000022c 	.word	0x2000022c
 8001000:	2000024c 	.word	0x2000024c
 8001004:	20000250 	.word	0x20000250
 8001008:	20000251 	.word	0x20000251
 800100c:	20000252 	.word	0x20000252
 8001010:	20000000 	.word	0x20000000

08001014 <Game2048_Restart>:

void Game2048_Restart(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
    Game2048_Init();
 8001018:	f7ff ffbc 	bl	8000f94 <Game2048_Init>
}
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}

08001020 <Game2048_DrawBoard>:

void Game2048_DrawBoard(void)
{
 8001020:	b590      	push	{r4, r7, lr}
 8001022:	b089      	sub	sp, #36	@ 0x24
 8001024:	af02      	add	r7, sp, #8
    OLED_ClearBuffer();
 8001026:	f000 fe13 	bl	8001c50 <OLED_ClearBuffer>
    char str_buffer[10];
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 800102a:	2300      	movs	r3, #0
 800102c:	75fb      	strb	r3, [r7, #23]
 800102e:	e068      	b.n	8001102 <Game2048_DrawBoard+0xe2>
    {
        for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 8001030:	2300      	movs	r3, #0
 8001032:	75bb      	strb	r3, [r7, #22]
 8001034:	e05f      	b.n	80010f6 <Game2048_DrawBoard+0xd6>
        {
            uint16_t val = game2048_board[r][c].value;
 8001036:	7dfa      	ldrb	r2, [r7, #23]
 8001038:	7dbb      	ldrb	r3, [r7, #22]
 800103a:	494d      	ldr	r1, [pc, #308]	@ (8001170 <Game2048_DrawBoard+0x150>)
 800103c:	0092      	lsls	r2, r2, #2
 800103e:	4413      	add	r3, r2
 8001040:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001044:	82bb      	strh	r3, [r7, #20]
            uint8_t tile_x = c * GAME2048_TILE_WIDTH;
 8001046:	7dbb      	ldrb	r3, [r7, #22]
 8001048:	015b      	lsls	r3, r3, #5
 800104a:	74fb      	strb	r3, [r7, #19]
            uint8_t tile_y = r * GAME2048_TILE_HEIGHT;
 800104c:	7dfb      	ldrb	r3, [r7, #23]
 800104e:	461a      	mov	r2, r3
 8001050:	00d2      	lsls	r2, r2, #3
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	74bb      	strb	r3, [r7, #18]
            uint8_t tile_inner_width = GAME2048_TILE_WIDTH - 2 * GAME2048_TILE_PADDING;
 8001058:	231e      	movs	r3, #30
 800105a:	747b      	strb	r3, [r7, #17]
            uint8_t tile_inner_height = GAME2048_TILE_HEIGHT - 2 * GAME2048_TILE_PADDING;
 800105c:	230c      	movs	r3, #12
 800105e:	743b      	strb	r3, [r7, #16]

            OLED_DrawFilledRectangle(tile_x + GAME2048_TILE_PADDING,
 8001060:	7cfb      	ldrb	r3, [r7, #19]
 8001062:	b29b      	uxth	r3, r3
 8001064:	3301      	adds	r3, #1
 8001066:	b29b      	uxth	r3, r3
 8001068:	b218      	sxth	r0, r3
                                     tile_y + GAME2048_TILE_PADDING,
 800106a:	7cbb      	ldrb	r3, [r7, #18]
 800106c:	b29b      	uxth	r3, r3
 800106e:	3301      	adds	r3, #1
 8001070:	b29b      	uxth	r3, r3
            OLED_DrawFilledRectangle(tile_x + GAME2048_TILE_PADDING,
 8001072:	b219      	sxth	r1, r3
 8001074:	8abb      	ldrh	r3, [r7, #20]
 8001076:	2b00      	cmp	r3, #0
 8001078:	bf14      	ite	ne
 800107a:	2301      	movne	r3, #1
 800107c:	2300      	moveq	r3, #0
 800107e:	b2db      	uxtb	r3, r3
 8001080:	461c      	mov	r4, r3
 8001082:	7c3b      	ldrb	r3, [r7, #16]
 8001084:	7c7a      	ldrb	r2, [r7, #17]
 8001086:	9400      	str	r4, [sp, #0]
 8001088:	f005 fd34 	bl	8006af4 <OLED_DrawFilledRectangle>
                                     tile_inner_width, tile_inner_height,
                                     (val == 0) ? 0 : 1);
            if (val > 0)
 800108c:	8abb      	ldrh	r3, [r7, #20]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d02e      	beq.n	80010f0 <Game2048_DrawBoard+0xd0>
            {
                sprintf(str_buffer, "%d", val);
 8001092:	8aba      	ldrh	r2, [r7, #20]
 8001094:	463b      	mov	r3, r7
 8001096:	4937      	ldr	r1, [pc, #220]	@ (8001174 <Game2048_DrawBoard+0x154>)
 8001098:	4618      	mov	r0, r3
 800109a:	f009 f861 	bl	800a160 <siprintf>
                uint8_t text_width = strlen(str_buffer) * 6;
 800109e:	463b      	mov	r3, r7
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff f85d 	bl	8000160 <strlen>
 80010a6:	4603      	mov	r3, r0
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	461a      	mov	r2, r3
 80010ac:	0052      	lsls	r2, r2, #1
 80010ae:	4413      	add	r3, r2
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	73fb      	strb	r3, [r7, #15]
                uint8_t text_height = 8;
 80010b4:	2308      	movs	r3, #8
 80010b6:	73bb      	strb	r3, [r7, #14]
                uint8_t text_x = tile_x + (GAME2048_TILE_WIDTH - text_width) / 2;
 80010b8:	7bfb      	ldrb	r3, [r7, #15]
 80010ba:	f1c3 0320 	rsb	r3, r3, #32
 80010be:	0fda      	lsrs	r2, r3, #31
 80010c0:	4413      	add	r3, r2
 80010c2:	105b      	asrs	r3, r3, #1
 80010c4:	b2da      	uxtb	r2, r3
 80010c6:	7cfb      	ldrb	r3, [r7, #19]
 80010c8:	4413      	add	r3, r2
 80010ca:	737b      	strb	r3, [r7, #13]
                uint8_t text_y = tile_y + (GAME2048_TILE_HEIGHT - text_height) / 2;
 80010cc:	7bbb      	ldrb	r3, [r7, #14]
 80010ce:	f1c3 030e 	rsb	r3, r3, #14
 80010d2:	0fda      	lsrs	r2, r3, #31
 80010d4:	4413      	add	r3, r2
 80010d6:	105b      	asrs	r3, r3, #1
 80010d8:	b2da      	uxtb	r2, r3
 80010da:	7cbb      	ldrb	r3, [r7, #18]
 80010dc:	4413      	add	r3, r2
 80010de:	733b      	strb	r3, [r7, #12]
                OLED_DisplayStringInverted(text_x, text_y, str_buffer, 1);
 80010e0:	7b7b      	ldrb	r3, [r7, #13]
 80010e2:	b218      	sxth	r0, r3
 80010e4:	7b3b      	ldrb	r3, [r7, #12]
 80010e6:	b219      	sxth	r1, r3
 80010e8:	463a      	mov	r2, r7
 80010ea:	2301      	movs	r3, #1
 80010ec:	f001 fa31 	bl	8002552 <OLED_DisplayStringInverted>
        for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 80010f0:	7dbb      	ldrb	r3, [r7, #22]
 80010f2:	3301      	adds	r3, #1
 80010f4:	75bb      	strb	r3, [r7, #22]
 80010f6:	7dbb      	ldrb	r3, [r7, #22]
 80010f8:	2b03      	cmp	r3, #3
 80010fa:	d99c      	bls.n	8001036 <Game2048_DrawBoard+0x16>
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 80010fc:	7dfb      	ldrb	r3, [r7, #23]
 80010fe:	3301      	adds	r3, #1
 8001100:	75fb      	strb	r3, [r7, #23]
 8001102:	7dfb      	ldrb	r3, [r7, #23]
 8001104:	2b03      	cmp	r3, #3
 8001106:	d993      	bls.n	8001030 <Game2048_DrawBoard+0x10>
            }
        }
    }
    sprintf(str_buffer, "Scores:%lu", game2048_score);
 8001108:	4b1b      	ldr	r3, [pc, #108]	@ (8001178 <Game2048_DrawBoard+0x158>)
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	463b      	mov	r3, r7
 800110e:	491b      	ldr	r1, [pc, #108]	@ (800117c <Game2048_DrawBoard+0x15c>)
 8001110:	4618      	mov	r0, r3
 8001112:	f009 f825 	bl	800a160 <siprintf>
    OLED_DisplayString(0, OLED_HEIGHT - 8, str_buffer);
 8001116:	463b      	mov	r3, r7
 8001118:	461a      	mov	r2, r3
 800111a:	2138      	movs	r1, #56	@ 0x38
 800111c:	2000      	movs	r0, #0
 800111e:	f001 f9cb 	bl	80024b8 <OLED_DisplayString>

    if (game2048_game_over)
 8001122:	4b17      	ldr	r3, [pc, #92]	@ (8001180 <Game2048_DrawBoard+0x160>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d014      	beq.n	8001154 <Game2048_DrawBoard+0x134>
    {
        OLED_DrawFilledRectangle(0, 0, OLED_WIDTH, OLED_HEIGHT-8, 1);
 800112a:	2301      	movs	r3, #1
 800112c:	9300      	str	r3, [sp, #0]
 800112e:	2338      	movs	r3, #56	@ 0x38
 8001130:	2280      	movs	r2, #128	@ 0x80
 8001132:	2100      	movs	r1, #0
 8001134:	2000      	movs	r0, #0
 8001136:	f005 fcdd 	bl	8006af4 <OLED_DrawFilledRectangle>
        OLED_DisplayStringInverted((OLED_WIDTH - 8 * 6) / 2, GAME_BOARD_DISPLAY_HEIGHT / 2 - 8, "GAME OVER", 1);
 800113a:	2301      	movs	r3, #1
 800113c:	4a11      	ldr	r2, [pc, #68]	@ (8001184 <Game2048_DrawBoard+0x164>)
 800113e:	2114      	movs	r1, #20
 8001140:	2028      	movs	r0, #40	@ 0x28
 8001142:	f001 fa06 	bl	8002552 <OLED_DisplayStringInverted>
        OLED_DisplayStringInverted((OLED_WIDTH - 10 * 6) / 2, GAME_BOARD_DISPLAY_HEIGHT / 2, "RST BTN=RS", 1);
 8001146:	2301      	movs	r3, #1
 8001148:	4a0f      	ldr	r2, [pc, #60]	@ (8001188 <Game2048_DrawBoard+0x168>)
 800114a:	211c      	movs	r1, #28
 800114c:	2022      	movs	r0, #34	@ 0x22
 800114e:	f001 fa00 	bl	8002552 <OLED_DisplayStringInverted>
    }
    else if (game2048_game_won)
    {
        OLED_DisplayString((OLED_WIDTH - 7 * 6) / 2, GAME_BOARD_DISPLAY_HEIGHT / 2 - 4, "YOU WIN!");
    }
}
 8001152:	e008      	b.n	8001166 <Game2048_DrawBoard+0x146>
    else if (game2048_game_won)
 8001154:	4b0d      	ldr	r3, [pc, #52]	@ (800118c <Game2048_DrawBoard+0x16c>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d004      	beq.n	8001166 <Game2048_DrawBoard+0x146>
        OLED_DisplayString((OLED_WIDTH - 7 * 6) / 2, GAME_BOARD_DISPLAY_HEIGHT / 2 - 4, "YOU WIN!");
 800115c:	4a0c      	ldr	r2, [pc, #48]	@ (8001190 <Game2048_DrawBoard+0x170>)
 800115e:	2118      	movs	r1, #24
 8001160:	202b      	movs	r0, #43	@ 0x2b
 8001162:	f001 f9a9 	bl	80024b8 <OLED_DisplayString>
}
 8001166:	bf00      	nop
 8001168:	371c      	adds	r7, #28
 800116a:	46bd      	mov	sp, r7
 800116c:	bd90      	pop	{r4, r7, pc}
 800116e:	bf00      	nop
 8001170:	2000022c 	.word	0x2000022c
 8001174:	0800c7f8 	.word	0x0800c7f8
 8001178:	2000024c 	.word	0x2000024c
 800117c:	0800c7fc 	.word	0x0800c7fc
 8001180:	20000250 	.word	0x20000250
 8001184:	0800c808 	.word	0x0800c808
 8001188:	0800c7e0 	.word	0x0800c7e0
 800118c:	20000251 	.word	0x20000251
 8001190:	0800c814 	.word	0x0800c814

08001194 <Game2048_CompactAndMerge>:

static void Game2048_CompactAndMerge(uint8_t line_idx, Direction dir, bool is_row)
{
 8001194:	b490      	push	{r4, r7}
 8001196:	b08c      	sub	sp, #48	@ 0x30
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	71fb      	strb	r3, [r7, #7]
 800119e:	460b      	mov	r3, r1
 80011a0:	71bb      	strb	r3, [r7, #6]
 80011a2:	4613      	mov	r3, r2
 80011a4:	717b      	strb	r3, [r7, #5]
    uint8_t line_size = GAME2048_BOARD_SIZE;          // Use GAME2048_BOARD_SIZE
 80011a6:	2304      	movs	r3, #4
 80011a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    uint16_t temp_line[GAME2048_BOARD_SIZE] = {0};    // Use GAME2048_BOARD_SIZE
 80011ac:	f107 0314 	add.w	r3, r7, #20
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
    uint16_t original_line_copy[GAME2048_BOARD_SIZE]; // To check if anything changed

    for (uint8_t i = 0; i < line_size; ++i)
 80011b6:	2300      	movs	r3, #0
 80011b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80011bc:	e01f      	b.n	80011fe <Game2048_CompactAndMerge+0x6a>
    {
        original_line_copy[i] = is_row ? game2048_board[line_idx][i].value : game2048_board[i][line_idx].value;
 80011be:	797b      	ldrb	r3, [r7, #5]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d008      	beq.n	80011d6 <Game2048_CompactAndMerge+0x42>
 80011c4:	79fa      	ldrb	r2, [r7, #7]
 80011c6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011ca:	49c2      	ldr	r1, [pc, #776]	@ (80014d4 <Game2048_CompactAndMerge+0x340>)
 80011cc:	0092      	lsls	r2, r2, #2
 80011ce:	4413      	add	r3, r2
 80011d0:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80011d4:	e007      	b.n	80011e6 <Game2048_CompactAndMerge+0x52>
 80011d6:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	49bd      	ldr	r1, [pc, #756]	@ (80014d4 <Game2048_CompactAndMerge+0x340>)
 80011de:	0092      	lsls	r2, r2, #2
 80011e0:	4413      	add	r3, r2
 80011e2:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80011e6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	3330      	adds	r3, #48	@ 0x30
 80011ee:	443b      	add	r3, r7
 80011f0:	f823 2c24 	strh.w	r2, [r3, #-36]
    for (uint8_t i = 0; i < line_size; ++i)
 80011f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011f8:	3301      	adds	r3, #1
 80011fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80011fe:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001202:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001206:	429a      	cmp	r2, r3
 8001208:	d3d9      	bcc.n	80011be <Game2048_CompactAndMerge+0x2a>
    }

    int8_t write_pos = 0;
 800120a:	2300      	movs	r3, #0
 800120c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t increment = 1;
 8001210:	2301      	movs	r3, #1
 8001212:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

    if (dir == DIR_DOWN || dir == DIR_RIGHT)
 8001216:	79bb      	ldrb	r3, [r7, #6]
 8001218:	2b01      	cmp	r3, #1
 800121a:	d002      	beq.n	8001222 <Game2048_CompactAndMerge+0x8e>
 800121c:	79bb      	ldrb	r3, [r7, #6]
 800121e:	2b03      	cmp	r3, #3
 8001220:	d108      	bne.n	8001234 <Game2048_CompactAndMerge+0xa0>
    {
        write_pos = line_size - 1;
 8001222:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001226:	3b01      	subs	r3, #1
 8001228:	b2db      	uxtb	r3, r3
 800122a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
        increment = -1;
 800122e:	23ff      	movs	r3, #255	@ 0xff
 8001230:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    }

    int8_t compact_pos = write_pos;
 8001234:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001238:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    for (int8_t i = 0; i < line_size; ++i)
 800123c:	2300      	movs	r3, #0
 800123e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001242:	e041      	b.n	80012c8 <Game2048_CompactAndMerge+0x134>
    {
        int8_t read_pos_actual = (dir == DIR_DOWN || dir == DIR_RIGHT) ? (line_size - 1 - i) : i;
 8001244:	79bb      	ldrb	r3, [r7, #6]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d002      	beq.n	8001250 <Game2048_CompactAndMerge+0xbc>
 800124a:	79bb      	ldrb	r3, [r7, #6]
 800124c:	2b03      	cmp	r3, #3
 800124e:	d109      	bne.n	8001264 <Game2048_CompactAndMerge+0xd0>
 8001250:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001254:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	b2db      	uxtb	r3, r3
 800125c:	3b01      	subs	r3, #1
 800125e:	b2db      	uxtb	r3, r3
 8001260:	b25b      	sxtb	r3, r3
 8001262:	e001      	b.n	8001268 <Game2048_CompactAndMerge+0xd4>
 8001264:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8001268:	f887 3020 	strb.w	r3, [r7, #32]
        uint16_t current_tile_value = is_row ? game2048_board[line_idx][read_pos_actual].value
 800126c:	797b      	ldrb	r3, [r7, #5]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d008      	beq.n	8001284 <Game2048_CompactAndMerge+0xf0>
 8001272:	79fa      	ldrb	r2, [r7, #7]
 8001274:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8001278:	4996      	ldr	r1, [pc, #600]	@ (80014d4 <Game2048_CompactAndMerge+0x340>)
 800127a:	0092      	lsls	r2, r2, #2
 800127c:	4413      	add	r3, r2
 800127e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001282:	e007      	b.n	8001294 <Game2048_CompactAndMerge+0x100>
                                             : game2048_board[read_pos_actual][line_idx].value;
 8001284:	f997 2020 	ldrsb.w	r2, [r7, #32]
 8001288:	79fb      	ldrb	r3, [r7, #7]
        uint16_t current_tile_value = is_row ? game2048_board[line_idx][read_pos_actual].value
 800128a:	4992      	ldr	r1, [pc, #584]	@ (80014d4 <Game2048_CompactAndMerge+0x340>)
 800128c:	0092      	lsls	r2, r2, #2
 800128e:	4413      	add	r3, r2
 8001290:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001294:	83fb      	strh	r3, [r7, #30]
        if (current_tile_value != 0)
 8001296:	8bfb      	ldrh	r3, [r7, #30]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d00f      	beq.n	80012bc <Game2048_CompactAndMerge+0x128>
        {
            temp_line[compact_pos] = current_tile_value;
 800129c:	f997 302c 	ldrsb.w	r3, [r7, #44]	@ 0x2c
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	3330      	adds	r3, #48	@ 0x30
 80012a4:	443b      	add	r3, r7
 80012a6:	8bfa      	ldrh	r2, [r7, #30]
 80012a8:	f823 2c1c 	strh.w	r2, [r3, #-28]
            compact_pos += increment;
 80012ac:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80012b0:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80012b4:	4413      	add	r3, r2
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    for (int8_t i = 0; i < line_size; ++i)
 80012bc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80012c0:	3301      	adds	r3, #1
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80012c8:	f997 202b 	ldrsb.w	r2, [r7, #43]	@ 0x2b
 80012cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80012d0:	429a      	cmp	r2, r3
 80012d2:	dbb7      	blt.n	8001244 <Game2048_CompactAndMerge+0xb0>
        }
    }

    for (int8_t i = 0; i < line_size - 1; ++i)
 80012d4:	2300      	movs	r3, #0
 80012d6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80012da:	e078      	b.n	80013ce <Game2048_CompactAndMerge+0x23a>
    {
        int8_t current_idx = (dir == DIR_DOWN || dir == DIR_RIGHT) ? (line_size - 1 - i) : i;
 80012dc:	79bb      	ldrb	r3, [r7, #6]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d002      	beq.n	80012e8 <Game2048_CompactAndMerge+0x154>
 80012e2:	79bb      	ldrb	r3, [r7, #6]
 80012e4:	2b03      	cmp	r3, #3
 80012e6:	d109      	bne.n	80012fc <Game2048_CompactAndMerge+0x168>
 80012e8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80012ec:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	3b01      	subs	r3, #1
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	b25b      	sxtb	r3, r3
 80012fa:	e001      	b.n	8001300 <Game2048_CompactAndMerge+0x16c>
 80012fc:	f997 302a 	ldrsb.w	r3, [r7, #42]	@ 0x2a
 8001300:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        int8_t next_idx = current_idx + increment;
 8001304:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8001308:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800130c:	4413      	add	r3, r2
 800130e:	b2db      	uxtb	r3, r3
 8001310:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        if (next_idx < 0 || next_idx >= line_size)
 8001314:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8001318:	2b00      	cmp	r3, #0
 800131a:	db51      	blt.n	80013c0 <Game2048_CompactAndMerge+0x22c>
 800131c:	f997 2021 	ldrsb.w	r2, [r7, #33]	@ 0x21
 8001320:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001324:	429a      	cmp	r2, r3
 8001326:	da4b      	bge.n	80013c0 <Game2048_CompactAndMerge+0x22c>
            continue;

        if (temp_line[current_idx] != 0 && temp_line[current_idx] == temp_line[next_idx])
 8001328:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	3330      	adds	r3, #48	@ 0x30
 8001330:	443b      	add	r3, r7
 8001332:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d043      	beq.n	80013c2 <Game2048_CompactAndMerge+0x22e>
 800133a:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	3330      	adds	r3, #48	@ 0x30
 8001342:	443b      	add	r3, r7
 8001344:	f833 2c1c 	ldrh.w	r2, [r3, #-28]
 8001348:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	3330      	adds	r3, #48	@ 0x30
 8001350:	443b      	add	r3, r7
 8001352:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 8001356:	429a      	cmp	r2, r3
 8001358:	d133      	bne.n	80013c2 <Game2048_CompactAndMerge+0x22e>
        {
            temp_line[current_idx] *= 2;
 800135a:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	3330      	adds	r3, #48	@ 0x30
 8001362:	443b      	add	r3, r7
 8001364:	f833 2c1c 	ldrh.w	r2, [r3, #-28]
 8001368:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 800136c:	0052      	lsls	r2, r2, #1
 800136e:	b292      	uxth	r2, r2
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	3330      	adds	r3, #48	@ 0x30
 8001374:	443b      	add	r3, r7
 8001376:	f823 2c1c 	strh.w	r2, [r3, #-28]
            game2048_score += temp_line[current_idx];
 800137a:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	3330      	adds	r3, #48	@ 0x30
 8001382:	443b      	add	r3, r7
 8001384:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 8001388:	461a      	mov	r2, r3
 800138a:	4b53      	ldr	r3, [pc, #332]	@ (80014d8 <Game2048_CompactAndMerge+0x344>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4413      	add	r3, r2
 8001390:	4a51      	ldr	r2, [pc, #324]	@ (80014d8 <Game2048_CompactAndMerge+0x344>)
 8001392:	6013      	str	r3, [r2, #0]
            temp_line[next_idx] = 0;
 8001394:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	3330      	adds	r3, #48	@ 0x30
 800139c:	443b      	add	r3, r7
 800139e:	2200      	movs	r2, #0
 80013a0:	f823 2c1c 	strh.w	r2, [r3, #-28]
            if (temp_line[current_idx] == 2048)
 80013a4:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	3330      	adds	r3, #48	@ 0x30
 80013ac:	443b      	add	r3, r7
 80013ae:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 80013b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80013b6:	d104      	bne.n	80013c2 <Game2048_CompactAndMerge+0x22e>
                game2048_game_won = true;
 80013b8:	4b48      	ldr	r3, [pc, #288]	@ (80014dc <Game2048_CompactAndMerge+0x348>)
 80013ba:	2201      	movs	r2, #1
 80013bc:	701a      	strb	r2, [r3, #0]
 80013be:	e000      	b.n	80013c2 <Game2048_CompactAndMerge+0x22e>
            continue;
 80013c0:	bf00      	nop
    for (int8_t i = 0; i < line_size - 1; ++i)
 80013c2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80013c6:	3301      	adds	r3, #1
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80013ce:	f997 202a 	ldrsb.w	r2, [r7, #42]	@ 0x2a
 80013d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80013d6:	3b01      	subs	r3, #1
 80013d8:	429a      	cmp	r2, r3
 80013da:	f6ff af7f 	blt.w	80012dc <Game2048_CompactAndMerge+0x148>
        }
    }

    compact_pos = write_pos;
 80013de:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80013e2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    for (int8_t i = 0; i < line_size; ++i)
 80013e6:	2300      	movs	r3, #0
 80013e8:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 80013ec:	e045      	b.n	800147a <Game2048_CompactAndMerge+0x2e6>
    {
        int8_t read_pos_temp = (dir == DIR_DOWN || dir == DIR_RIGHT) ? (line_size - 1 - i) : i;
 80013ee:	79bb      	ldrb	r3, [r7, #6]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d002      	beq.n	80013fa <Game2048_CompactAndMerge+0x266>
 80013f4:	79bb      	ldrb	r3, [r7, #6]
 80013f6:	2b03      	cmp	r3, #3
 80013f8:	d109      	bne.n	800140e <Game2048_CompactAndMerge+0x27a>
 80013fa:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80013fe:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	b2db      	uxtb	r3, r3
 8001406:	3b01      	subs	r3, #1
 8001408:	b2db      	uxtb	r3, r3
 800140a:	b25b      	sxtb	r3, r3
 800140c:	e001      	b.n	8001412 <Game2048_CompactAndMerge+0x27e>
 800140e:	f997 3029 	ldrsb.w	r3, [r7, #41]	@ 0x29
 8001412:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        // The condition "if (temp_line[read_pos_temp] != 0)" was problematic.
        // temp_line already contains the correct values, including zeros, after compaction and merging.
        // We should always write the value from temp_line to the board and advance compact_pos.
        if (is_row)
 8001416:	797b      	ldrb	r3, [r7, #5]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d010      	beq.n	800143e <Game2048_CompactAndMerge+0x2aa>
        {
            game2048_board[line_idx][compact_pos].value = temp_line[read_pos_temp];
 800141c:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8001420:	79f9      	ldrb	r1, [r7, #7]
 8001422:	f997 202c 	ldrsb.w	r2, [r7, #44]	@ 0x2c
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	3330      	adds	r3, #48	@ 0x30
 800142a:	443b      	add	r3, r7
 800142c:	f833 4c1c 	ldrh.w	r4, [r3, #-28]
 8001430:	4828      	ldr	r0, [pc, #160]	@ (80014d4 <Game2048_CompactAndMerge+0x340>)
 8001432:	008b      	lsls	r3, r1, #2
 8001434:	4413      	add	r3, r2
 8001436:	4622      	mov	r2, r4
 8001438:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
 800143c:	e00f      	b.n	800145e <Game2048_CompactAndMerge+0x2ca>
        }
        else
        {
            game2048_board[compact_pos][line_idx].value = temp_line[read_pos_temp];
 800143e:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8001442:	f997 102c 	ldrsb.w	r1, [r7, #44]	@ 0x2c
 8001446:	79fa      	ldrb	r2, [r7, #7]
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	3330      	adds	r3, #48	@ 0x30
 800144c:	443b      	add	r3, r7
 800144e:	f833 4c1c 	ldrh.w	r4, [r3, #-28]
 8001452:	4820      	ldr	r0, [pc, #128]	@ (80014d4 <Game2048_CompactAndMerge+0x340>)
 8001454:	008b      	lsls	r3, r1, #2
 8001456:	4413      	add	r3, r2
 8001458:	4622      	mov	r2, r4
 800145a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
        }
        compact_pos += increment; // compact_pos should always be updated.
 800145e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001462:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001466:	4413      	add	r3, r2
 8001468:	b2db      	uxtb	r3, r3
 800146a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    for (int8_t i = 0; i < line_size; ++i)
 800146e:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8001472:	3301      	adds	r3, #1
 8001474:	b2db      	uxtb	r3, r3
 8001476:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 800147a:	f997 2029 	ldrsb.w	r2, [r7, #41]	@ 0x29
 800147e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001482:	429a      	cmp	r2, r3
 8001484:	dbb3      	blt.n	80013ee <Game2048_CompactAndMerge+0x25a>
    }

    for (uint8_t i = 0; i < line_size; ++i)
 8001486:	2300      	movs	r3, #0
 8001488:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 800148c:	e02f      	b.n	80014ee <Game2048_CompactAndMerge+0x35a>
    {
        uint16_t current_val = is_row ? game2048_board[line_idx][i].value : game2048_board[i][line_idx].value;
 800148e:	797b      	ldrb	r3, [r7, #5]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d008      	beq.n	80014a6 <Game2048_CompactAndMerge+0x312>
 8001494:	79fa      	ldrb	r2, [r7, #7]
 8001496:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800149a:	490e      	ldr	r1, [pc, #56]	@ (80014d4 <Game2048_CompactAndMerge+0x340>)
 800149c:	0092      	lsls	r2, r2, #2
 800149e:	4413      	add	r3, r2
 80014a0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80014a4:	e007      	b.n	80014b6 <Game2048_CompactAndMerge+0x322>
 80014a6:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	4909      	ldr	r1, [pc, #36]	@ (80014d4 <Game2048_CompactAndMerge+0x340>)
 80014ae:	0092      	lsls	r2, r2, #2
 80014b0:	4413      	add	r3, r2
 80014b2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80014b6:	84bb      	strh	r3, [r7, #36]	@ 0x24
        if (original_line_copy[i] != current_val)
 80014b8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	3330      	adds	r3, #48	@ 0x30
 80014c0:	443b      	add	r3, r7
 80014c2:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80014c6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d00b      	beq.n	80014e4 <Game2048_CompactAndMerge+0x350>
        {
            game2048_move_made_this_turn = true;
 80014cc:	4b04      	ldr	r3, [pc, #16]	@ (80014e0 <Game2048_CompactAndMerge+0x34c>)
 80014ce:	2201      	movs	r2, #1
 80014d0:	701a      	strb	r2, [r3, #0]
            break;
 80014d2:	e013      	b.n	80014fc <Game2048_CompactAndMerge+0x368>
 80014d4:	2000022c 	.word	0x2000022c
 80014d8:	2000024c 	.word	0x2000024c
 80014dc:	20000251 	.word	0x20000251
 80014e0:	20000252 	.word	0x20000252
    for (uint8_t i = 0; i < line_size; ++i)
 80014e4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80014e8:	3301      	adds	r3, #1
 80014ea:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 80014ee:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80014f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d3c9      	bcc.n	800148e <Game2048_CompactAndMerge+0x2fa>
        }
    }
}
 80014fa:	bf00      	nop
 80014fc:	bf00      	nop
 80014fe:	3730      	adds	r7, #48	@ 0x30
 8001500:	46bd      	mov	sp, r7
 8001502:	bc90      	pop	{r4, r7}
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop

08001508 <Game2048_MoveUp>:

static void Game2048_MoveUp()
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
    for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 800150e:	2300      	movs	r3, #0
 8001510:	71fb      	strb	r3, [r7, #7]
 8001512:	e008      	b.n	8001526 <Game2048_MoveUp+0x1e>
    {
        Game2048_CompactAndMerge(c, DIR_UP, false);
 8001514:	79fb      	ldrb	r3, [r7, #7]
 8001516:	2200      	movs	r2, #0
 8001518:	2100      	movs	r1, #0
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff fe3a 	bl	8001194 <Game2048_CompactAndMerge>
    for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 8001520:	79fb      	ldrb	r3, [r7, #7]
 8001522:	3301      	adds	r3, #1
 8001524:	71fb      	strb	r3, [r7, #7]
 8001526:	79fb      	ldrb	r3, [r7, #7]
 8001528:	2b03      	cmp	r3, #3
 800152a:	d9f3      	bls.n	8001514 <Game2048_MoveUp+0xc>
    }
}
 800152c:	bf00      	nop
 800152e:	bf00      	nop
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <Game2048_MoveDown>:

static void Game2048_MoveDown()
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b082      	sub	sp, #8
 800153a:	af00      	add	r7, sp, #0
    for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 800153c:	2300      	movs	r3, #0
 800153e:	71fb      	strb	r3, [r7, #7]
 8001540:	e008      	b.n	8001554 <Game2048_MoveDown+0x1e>
    {
        Game2048_CompactAndMerge(c, DIR_DOWN, false);
 8001542:	79fb      	ldrb	r3, [r7, #7]
 8001544:	2200      	movs	r2, #0
 8001546:	2101      	movs	r1, #1
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff fe23 	bl	8001194 <Game2048_CompactAndMerge>
    for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	3301      	adds	r3, #1
 8001552:	71fb      	strb	r3, [r7, #7]
 8001554:	79fb      	ldrb	r3, [r7, #7]
 8001556:	2b03      	cmp	r3, #3
 8001558:	d9f3      	bls.n	8001542 <Game2048_MoveDown+0xc>
    }
}
 800155a:	bf00      	nop
 800155c:	bf00      	nop
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <Game2048_MoveLeft>:

static void Game2048_MoveLeft()
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 800156a:	2300      	movs	r3, #0
 800156c:	71fb      	strb	r3, [r7, #7]
 800156e:	e008      	b.n	8001582 <Game2048_MoveLeft+0x1e>
    {
        Game2048_CompactAndMerge(r, DIR_LEFT, true);
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	2201      	movs	r2, #1
 8001574:	2102      	movs	r1, #2
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff fe0c 	bl	8001194 <Game2048_CompactAndMerge>
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 800157c:	79fb      	ldrb	r3, [r7, #7]
 800157e:	3301      	adds	r3, #1
 8001580:	71fb      	strb	r3, [r7, #7]
 8001582:	79fb      	ldrb	r3, [r7, #7]
 8001584:	2b03      	cmp	r3, #3
 8001586:	d9f3      	bls.n	8001570 <Game2048_MoveLeft+0xc>
    }
}
 8001588:	bf00      	nop
 800158a:	bf00      	nop
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <Game2048_MoveRight>:

static void Game2048_MoveRight()
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b082      	sub	sp, #8
 8001596:	af00      	add	r7, sp, #0
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 8001598:	2300      	movs	r3, #0
 800159a:	71fb      	strb	r3, [r7, #7]
 800159c:	e008      	b.n	80015b0 <Game2048_MoveRight+0x1e>
    {
        Game2048_CompactAndMerge(r, DIR_RIGHT, true);
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	2201      	movs	r2, #1
 80015a2:	2103      	movs	r1, #3
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff fdf5 	bl	8001194 <Game2048_CompactAndMerge>
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 80015aa:	79fb      	ldrb	r3, [r7, #7]
 80015ac:	3301      	adds	r3, #1
 80015ae:	71fb      	strb	r3, [r7, #7]
 80015b0:	79fb      	ldrb	r3, [r7, #7]
 80015b2:	2b03      	cmp	r3, #3
 80015b4:	d9f3      	bls.n	800159e <Game2048_MoveRight+0xc>
    }
}
 80015b6:	bf00      	nop
 80015b8:	bf00      	nop
 80015ba:	3708      	adds	r7, #8
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}

080015c0 <Game2048_CanMove>:

static bool Game2048_CanMove()
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 80015c6:	2300      	movs	r3, #0
 80015c8:	71fb      	strb	r3, [r7, #7]
 80015ca:	e03e      	b.n	800164a <Game2048_CanMove+0x8a>
    {
        for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 80015cc:	2300      	movs	r3, #0
 80015ce:	71bb      	strb	r3, [r7, #6]
 80015d0:	e035      	b.n	800163e <Game2048_CanMove+0x7e>
        {
            if (game2048_board[r][c].value == 0)
 80015d2:	79fa      	ldrb	r2, [r7, #7]
 80015d4:	79bb      	ldrb	r3, [r7, #6]
 80015d6:	4921      	ldr	r1, [pc, #132]	@ (800165c <Game2048_CanMove+0x9c>)
 80015d8:	0092      	lsls	r2, r2, #2
 80015da:	4413      	add	r3, r2
 80015dc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d101      	bne.n	80015e8 <Game2048_CanMove+0x28>
                return true;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e034      	b.n	8001652 <Game2048_CanMove+0x92>
            uint16_t val = game2048_board[r][c].value;
 80015e8:	79fa      	ldrb	r2, [r7, #7]
 80015ea:	79bb      	ldrb	r3, [r7, #6]
 80015ec:	491b      	ldr	r1, [pc, #108]	@ (800165c <Game2048_CanMove+0x9c>)
 80015ee:	0092      	lsls	r2, r2, #2
 80015f0:	4413      	add	r3, r2
 80015f2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80015f6:	80bb      	strh	r3, [r7, #4]
            if (c < GAME2048_BOARD_SIZE - 1 && game2048_board[r][c + 1].value == val) // Use GAME2048_BOARD_SIZE
 80015f8:	79bb      	ldrb	r3, [r7, #6]
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d80c      	bhi.n	8001618 <Game2048_CanMove+0x58>
 80015fe:	79fa      	ldrb	r2, [r7, #7]
 8001600:	79bb      	ldrb	r3, [r7, #6]
 8001602:	3301      	adds	r3, #1
 8001604:	4915      	ldr	r1, [pc, #84]	@ (800165c <Game2048_CanMove+0x9c>)
 8001606:	0092      	lsls	r2, r2, #2
 8001608:	4413      	add	r3, r2
 800160a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800160e:	88ba      	ldrh	r2, [r7, #4]
 8001610:	429a      	cmp	r2, r3
 8001612:	d101      	bne.n	8001618 <Game2048_CanMove+0x58>
                return true;
 8001614:	2301      	movs	r3, #1
 8001616:	e01c      	b.n	8001652 <Game2048_CanMove+0x92>
            if (r < GAME2048_BOARD_SIZE - 1 && game2048_board[r + 1][c].value == val) // Use GAME2048_BOARD_SIZE
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	2b02      	cmp	r3, #2
 800161c:	d80c      	bhi.n	8001638 <Game2048_CanMove+0x78>
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	1c5a      	adds	r2, r3, #1
 8001622:	79bb      	ldrb	r3, [r7, #6]
 8001624:	490d      	ldr	r1, [pc, #52]	@ (800165c <Game2048_CanMove+0x9c>)
 8001626:	0092      	lsls	r2, r2, #2
 8001628:	4413      	add	r3, r2
 800162a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800162e:	88ba      	ldrh	r2, [r7, #4]
 8001630:	429a      	cmp	r2, r3
 8001632:	d101      	bne.n	8001638 <Game2048_CanMove+0x78>
                return true;
 8001634:	2301      	movs	r3, #1
 8001636:	e00c      	b.n	8001652 <Game2048_CanMove+0x92>
        for (uint8_t c = 0; c < GAME2048_BOARD_SIZE; c++) // Use GAME2048_BOARD_SIZE
 8001638:	79bb      	ldrb	r3, [r7, #6]
 800163a:	3301      	adds	r3, #1
 800163c:	71bb      	strb	r3, [r7, #6]
 800163e:	79bb      	ldrb	r3, [r7, #6]
 8001640:	2b03      	cmp	r3, #3
 8001642:	d9c6      	bls.n	80015d2 <Game2048_CanMove+0x12>
    for (uint8_t r = 0; r < GAME2048_BOARD_SIZE; r++) // Use GAME2048_BOARD_SIZE
 8001644:	79fb      	ldrb	r3, [r7, #7]
 8001646:	3301      	adds	r3, #1
 8001648:	71fb      	strb	r3, [r7, #7]
 800164a:	79fb      	ldrb	r3, [r7, #7]
 800164c:	2b03      	cmp	r3, #3
 800164e:	d9bd      	bls.n	80015cc <Game2048_CanMove+0xc>
        }
    }
    return false;
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	bc80      	pop	{r7}
 800165a:	4770      	bx	lr
 800165c:	2000022c 	.word	0x2000022c

08001660 <Game2048_HandleInput>:

bool Game2048_HandleInput(Direction input_dir)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	71fb      	strb	r3, [r7, #7]
    if (game2048_game_over || game2048_game_won)
 800166a:	4b1f      	ldr	r3, [pc, #124]	@ (80016e8 <Game2048_HandleInput+0x88>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d103      	bne.n	800167a <Game2048_HandleInput+0x1a>
 8001672:	4b1e      	ldr	r3, [pc, #120]	@ (80016ec <Game2048_HandleInput+0x8c>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <Game2048_HandleInput+0x1e>
        return false;
 800167a:	2300      	movs	r3, #0
 800167c:	e02f      	b.n	80016de <Game2048_HandleInput+0x7e>

    game2048_move_made_this_turn = false;
 800167e:	4b1c      	ldr	r3, [pc, #112]	@ (80016f0 <Game2048_HandleInput+0x90>)
 8001680:	2200      	movs	r2, #0
 8001682:	701a      	strb	r2, [r3, #0]

    switch (input_dir)
 8001684:	79fb      	ldrb	r3, [r7, #7]
 8001686:	2b03      	cmp	r3, #3
 8001688:	d816      	bhi.n	80016b8 <Game2048_HandleInput+0x58>
 800168a:	a201      	add	r2, pc, #4	@ (adr r2, 8001690 <Game2048_HandleInput+0x30>)
 800168c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001690:	080016a1 	.word	0x080016a1
 8001694:	080016a7 	.word	0x080016a7
 8001698:	080016ad 	.word	0x080016ad
 800169c:	080016b3 	.word	0x080016b3
    {
    case DIR_UP:
        Game2048_MoveUp();
 80016a0:	f7ff ff32 	bl	8001508 <Game2048_MoveUp>
        break;
 80016a4:	e008      	b.n	80016b8 <Game2048_HandleInput+0x58>
    case DIR_DOWN:
        Game2048_MoveDown();
 80016a6:	f7ff ff46 	bl	8001536 <Game2048_MoveDown>
        break;
 80016aa:	e005      	b.n	80016b8 <Game2048_HandleInput+0x58>
    case DIR_LEFT:
        Game2048_MoveLeft();
 80016ac:	f7ff ff5a 	bl	8001564 <Game2048_MoveLeft>
        break;
 80016b0:	e002      	b.n	80016b8 <Game2048_HandleInput+0x58>
    case DIR_RIGHT:
        Game2048_MoveRight();
 80016b2:	f7ff ff6e 	bl	8001592 <Game2048_MoveRight>
        break;
 80016b6:	bf00      	nop
    }

    if (game2048_move_made_this_turn)
 80016b8:	4b0d      	ldr	r3, [pc, #52]	@ (80016f0 <Game2048_HandleInput+0x90>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d00c      	beq.n	80016da <Game2048_HandleInput+0x7a>
    {
        Game2048_AddRandomTile();
 80016c0:	f7ff fbdc 	bl	8000e7c <Game2048_AddRandomTile>
        if (!Game2048_CanMove())
 80016c4:	f7ff ff7c 	bl	80015c0 <Game2048_CanMove>
 80016c8:	4603      	mov	r3, r0
 80016ca:	f083 0301 	eor.w	r3, r3, #1
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d002      	beq.n	80016da <Game2048_HandleInput+0x7a>
        {
            game2048_game_over = true;
 80016d4:	4b04      	ldr	r3, [pc, #16]	@ (80016e8 <Game2048_HandleInput+0x88>)
 80016d6:	2201      	movs	r2, #1
 80016d8:	701a      	strb	r2, [r3, #0]
        }
    }
    return game2048_move_made_this_turn;
 80016da:	4b05      	ldr	r3, [pc, #20]	@ (80016f0 <Game2048_HandleInput+0x90>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20000250 	.word	0x20000250
 80016ec:	20000251 	.word	0x20000251
 80016f0:	20000252 	.word	0x20000252

080016f4 <Game2048_GameLoop>:

void Game2048_GameLoop(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
    static uint16_t LastCount;

    if (FirstRun)
 80016f8:	4b48      	ldr	r3, [pc, #288]	@ (800181c <Game2048_GameLoop+0x128>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d006      	beq.n	800170e <Game2048_GameLoop+0x1a>
    {
        LastCount = count;
 8001700:	4b47      	ldr	r3, [pc, #284]	@ (8001820 <Game2048_GameLoop+0x12c>)
 8001702:	881a      	ldrh	r2, [r3, #0]
 8001704:	4b47      	ldr	r3, [pc, #284]	@ (8001824 <Game2048_GameLoop+0x130>)
 8001706:	801a      	strh	r2, [r3, #0]
        FirstRun = false;
 8001708:	4b44      	ldr	r3, [pc, #272]	@ (800181c <Game2048_GameLoop+0x128>)
 800170a:	2200      	movs	r2, #0
 800170c:	701a      	strb	r2, [r3, #0]
    }

    if (count - LastCount > 1 && HAL_GPIO_ReadPin(GAME_BUTTON_PORT, GAME_BUTTON_PIN) == GPIO_PIN_SET)
 800170e:	4b44      	ldr	r3, [pc, #272]	@ (8001820 <Game2048_GameLoop+0x12c>)
 8001710:	881b      	ldrh	r3, [r3, #0]
 8001712:	461a      	mov	r2, r3
 8001714:	4b43      	ldr	r3, [pc, #268]	@ (8001824 <Game2048_GameLoop+0x130>)
 8001716:	881b      	ldrh	r3, [r3, #0]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	2b01      	cmp	r3, #1
 800171c:	dd0f      	ble.n	800173e <Game2048_GameLoop+0x4a>
 800171e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001722:	4841      	ldr	r0, [pc, #260]	@ (8001828 <Game2048_GameLoop+0x134>)
 8001724:	f006 fb9e 	bl	8007e64 <HAL_GPIO_ReadPin>
 8001728:	4603      	mov	r3, r0
 800172a:	2b01      	cmp	r3, #1
 800172c:	d107      	bne.n	800173e <Game2048_GameLoop+0x4a>
    {
        Game2048_HandleInput(DIR_RIGHT);
 800172e:	2003      	movs	r0, #3
 8001730:	f7ff ff96 	bl	8001660 <Game2048_HandleInput>
        LastCount = count;
 8001734:	4b3a      	ldr	r3, [pc, #232]	@ (8001820 <Game2048_GameLoop+0x12c>)
 8001736:	881a      	ldrh	r2, [r3, #0]
 8001738:	4b3a      	ldr	r3, [pc, #232]	@ (8001824 <Game2048_GameLoop+0x130>)
 800173a:	801a      	strh	r2, [r3, #0]
 800173c:	e048      	b.n	80017d0 <Game2048_GameLoop+0xdc>
    }
    else if (count - LastCount < -1 && HAL_GPIO_ReadPin(GAME_BUTTON_PORT, GAME_BUTTON_PIN) == GPIO_PIN_SET)
 800173e:	4b38      	ldr	r3, [pc, #224]	@ (8001820 <Game2048_GameLoop+0x12c>)
 8001740:	881b      	ldrh	r3, [r3, #0]
 8001742:	461a      	mov	r2, r3
 8001744:	4b37      	ldr	r3, [pc, #220]	@ (8001824 <Game2048_GameLoop+0x130>)
 8001746:	881b      	ldrh	r3, [r3, #0]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800174e:	da0f      	bge.n	8001770 <Game2048_GameLoop+0x7c>
 8001750:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001754:	4834      	ldr	r0, [pc, #208]	@ (8001828 <Game2048_GameLoop+0x134>)
 8001756:	f006 fb85 	bl	8007e64 <HAL_GPIO_ReadPin>
 800175a:	4603      	mov	r3, r0
 800175c:	2b01      	cmp	r3, #1
 800175e:	d107      	bne.n	8001770 <Game2048_GameLoop+0x7c>
    {
        Game2048_HandleInput(DIR_LEFT);
 8001760:	2002      	movs	r0, #2
 8001762:	f7ff ff7d 	bl	8001660 <Game2048_HandleInput>
        LastCount = count;
 8001766:	4b2e      	ldr	r3, [pc, #184]	@ (8001820 <Game2048_GameLoop+0x12c>)
 8001768:	881a      	ldrh	r2, [r3, #0]
 800176a:	4b2e      	ldr	r3, [pc, #184]	@ (8001824 <Game2048_GameLoop+0x130>)
 800176c:	801a      	strh	r2, [r3, #0]
 800176e:	e02f      	b.n	80017d0 <Game2048_GameLoop+0xdc>
    }
    else if (count - LastCount > 1 && HAL_GPIO_ReadPin(GAME_BUTTON_PORT, GAME_BUTTON_PIN) == GPIO_PIN_RESET)
 8001770:	4b2b      	ldr	r3, [pc, #172]	@ (8001820 <Game2048_GameLoop+0x12c>)
 8001772:	881b      	ldrh	r3, [r3, #0]
 8001774:	461a      	mov	r2, r3
 8001776:	4b2b      	ldr	r3, [pc, #172]	@ (8001824 <Game2048_GameLoop+0x130>)
 8001778:	881b      	ldrh	r3, [r3, #0]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	2b01      	cmp	r3, #1
 800177e:	dd0f      	ble.n	80017a0 <Game2048_GameLoop+0xac>
 8001780:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001784:	4828      	ldr	r0, [pc, #160]	@ (8001828 <Game2048_GameLoop+0x134>)
 8001786:	f006 fb6d 	bl	8007e64 <HAL_GPIO_ReadPin>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d107      	bne.n	80017a0 <Game2048_GameLoop+0xac>
    {
        Game2048_HandleInput(DIR_UP);
 8001790:	2000      	movs	r0, #0
 8001792:	f7ff ff65 	bl	8001660 <Game2048_HandleInput>
        LastCount = count;
 8001796:	4b22      	ldr	r3, [pc, #136]	@ (8001820 <Game2048_GameLoop+0x12c>)
 8001798:	881a      	ldrh	r2, [r3, #0]
 800179a:	4b22      	ldr	r3, [pc, #136]	@ (8001824 <Game2048_GameLoop+0x130>)
 800179c:	801a      	strh	r2, [r3, #0]
 800179e:	e017      	b.n	80017d0 <Game2048_GameLoop+0xdc>
    }
    else if (count - LastCount < -1 && HAL_GPIO_ReadPin(GAME_BUTTON_PORT, GAME_BUTTON_PIN) == GPIO_PIN_RESET)
 80017a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001820 <Game2048_GameLoop+0x12c>)
 80017a2:	881b      	ldrh	r3, [r3, #0]
 80017a4:	461a      	mov	r2, r3
 80017a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001824 <Game2048_GameLoop+0x130>)
 80017a8:	881b      	ldrh	r3, [r3, #0]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017b0:	da0e      	bge.n	80017d0 <Game2048_GameLoop+0xdc>
 80017b2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80017b6:	481c      	ldr	r0, [pc, #112]	@ (8001828 <Game2048_GameLoop+0x134>)
 80017b8:	f006 fb54 	bl	8007e64 <HAL_GPIO_ReadPin>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d106      	bne.n	80017d0 <Game2048_GameLoop+0xdc>
    {
        Game2048_HandleInput(DIR_DOWN);
 80017c2:	2001      	movs	r0, #1
 80017c4:	f7ff ff4c 	bl	8001660 <Game2048_HandleInput>
        LastCount = count;
 80017c8:	4b15      	ldr	r3, [pc, #84]	@ (8001820 <Game2048_GameLoop+0x12c>)
 80017ca:	881a      	ldrh	r2, [r3, #0]
 80017cc:	4b15      	ldr	r3, [pc, #84]	@ (8001824 <Game2048_GameLoop+0x130>)
 80017ce:	801a      	strh	r2, [r3, #0]
    }

    if (game2048_game_over)
 80017d0:	4b16      	ldr	r3, [pc, #88]	@ (800182c <Game2048_GameLoop+0x138>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d01d      	beq.n	8001814 <Game2048_GameLoop+0x120>
    {
        if (HAL_GPIO_ReadPin(GAME_INPUT_RESTART_PORT, GAME_INPUT_RESTART_PIN) == GPIO_PIN_RESET)
 80017d8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80017dc:	4812      	ldr	r0, [pc, #72]	@ (8001828 <Game2048_GameLoop+0x134>)
 80017de:	f006 fb41 	bl	8007e64 <HAL_GPIO_ReadPin>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d115      	bne.n	8001814 <Game2048_GameLoop+0x120>
        {
            HAL_Delay(INPUT_DEBOUNCE_MS);
 80017e8:	2032      	movs	r0, #50	@ 0x32
 80017ea:	f005 ff25 	bl	8007638 <HAL_Delay>
            if (HAL_GPIO_ReadPin(GAME_INPUT_RESTART_PORT, GAME_INPUT_RESTART_PIN) == GPIO_PIN_RESET)
 80017ee:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80017f2:	480d      	ldr	r0, [pc, #52]	@ (8001828 <Game2048_GameLoop+0x134>)
 80017f4:	f006 fb36 	bl	8007e64 <HAL_GPIO_ReadPin>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d10a      	bne.n	8001814 <Game2048_GameLoop+0x120>
            {
                Game2048_Restart();
 80017fe:	f7ff fc09 	bl	8001014 <Game2048_Restart>
                while (HAL_GPIO_ReadPin(GAME_INPUT_RESTART_PORT, GAME_INPUT_RESTART_PIN) == GPIO_PIN_RESET)
 8001802:	bf00      	nop
 8001804:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001808:	4807      	ldr	r0, [pc, #28]	@ (8001828 <Game2048_GameLoop+0x134>)
 800180a:	f006 fb2b 	bl	8007e64 <HAL_GPIO_ReadPin>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d0f7      	beq.n	8001804 <Game2048_GameLoop+0x110>
            }
        }
    }


    Game2048_DrawBoard();
 8001814:	f7ff fc04 	bl	8001020 <Game2048_DrawBoard>
}
 8001818:	bf00      	nop
 800181a:	bd80      	pop	{r7, pc}
 800181c:	20000000 	.word	0x20000000
 8001820:	200002f4 	.word	0x200002f4
 8001824:	20000258 	.word	0x20000258
 8001828:	40010c00 	.word	0x40010c00
 800182c:	20000250 	.word	0x20000250

08001830 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b088      	sub	sp, #32
 8001834:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001836:	f107 0310 	add.w	r3, r7, #16
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	605a      	str	r2, [r3, #4]
 8001840:	609a      	str	r2, [r3, #8]
 8001842:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001844:	4b34      	ldr	r3, [pc, #208]	@ (8001918 <MX_GPIO_Init+0xe8>)
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	4a33      	ldr	r2, [pc, #204]	@ (8001918 <MX_GPIO_Init+0xe8>)
 800184a:	f043 0310 	orr.w	r3, r3, #16
 800184e:	6193      	str	r3, [r2, #24]
 8001850:	4b31      	ldr	r3, [pc, #196]	@ (8001918 <MX_GPIO_Init+0xe8>)
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	f003 0310 	and.w	r3, r3, #16
 8001858:	60fb      	str	r3, [r7, #12]
 800185a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800185c:	4b2e      	ldr	r3, [pc, #184]	@ (8001918 <MX_GPIO_Init+0xe8>)
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	4a2d      	ldr	r2, [pc, #180]	@ (8001918 <MX_GPIO_Init+0xe8>)
 8001862:	f043 0320 	orr.w	r3, r3, #32
 8001866:	6193      	str	r3, [r2, #24]
 8001868:	4b2b      	ldr	r3, [pc, #172]	@ (8001918 <MX_GPIO_Init+0xe8>)
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	f003 0320 	and.w	r3, r3, #32
 8001870:	60bb      	str	r3, [r7, #8]
 8001872:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001874:	4b28      	ldr	r3, [pc, #160]	@ (8001918 <MX_GPIO_Init+0xe8>)
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	4a27      	ldr	r2, [pc, #156]	@ (8001918 <MX_GPIO_Init+0xe8>)
 800187a:	f043 0304 	orr.w	r3, r3, #4
 800187e:	6193      	str	r3, [r2, #24]
 8001880:	4b25      	ldr	r3, [pc, #148]	@ (8001918 <MX_GPIO_Init+0xe8>)
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	f003 0304 	and.w	r3, r3, #4
 8001888:	607b      	str	r3, [r7, #4]
 800188a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800188c:	4b22      	ldr	r3, [pc, #136]	@ (8001918 <MX_GPIO_Init+0xe8>)
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	4a21      	ldr	r2, [pc, #132]	@ (8001918 <MX_GPIO_Init+0xe8>)
 8001892:	f043 0308 	orr.w	r3, r3, #8
 8001896:	6193      	str	r3, [r2, #24]
 8001898:	4b1f      	ldr	r3, [pc, #124]	@ (8001918 <MX_GPIO_Init+0xe8>)
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	f003 0308 	and.w	r3, r3, #8
 80018a0:	603b      	str	r3, [r7, #0]
 80018a2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SysWork_Light_GPIO_Port, SysWork_Light_Pin, GPIO_PIN_RESET);
 80018a4:	2200      	movs	r2, #0
 80018a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80018aa:	481c      	ldr	r0, [pc, #112]	@ (800191c <MX_GPIO_Init+0xec>)
 80018ac:	f006 faf1 	bl	8007e92 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Flash_CS_GPIO_Port, Flash_CS_Pin, GPIO_PIN_RESET);
 80018b0:	2200      	movs	r2, #0
 80018b2:	2180      	movs	r1, #128	@ 0x80
 80018b4:	481a      	ldr	r0, [pc, #104]	@ (8001920 <MX_GPIO_Init+0xf0>)
 80018b6:	f006 faec 	bl	8007e92 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SysWork_Light_Pin */
  GPIO_InitStruct.Pin = SysWork_Light_Pin;
 80018ba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c0:	2301      	movs	r3, #1
 80018c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c8:	2302      	movs	r3, #2
 80018ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SysWork_Light_GPIO_Port, &GPIO_InitStruct);
 80018cc:	f107 0310 	add.w	r3, r7, #16
 80018d0:	4619      	mov	r1, r3
 80018d2:	4812      	ldr	r0, [pc, #72]	@ (800191c <MX_GPIO_Init+0xec>)
 80018d4:	f006 f942 	bl	8007b5c <HAL_GPIO_Init>

  /*Configure GPIO pin : Flash_CS_Pin */
  GPIO_InitStruct.Pin = Flash_CS_Pin;
 80018d8:	2380      	movs	r3, #128	@ 0x80
 80018da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018dc:	2301      	movs	r3, #1
 80018de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018e0:	2301      	movs	r3, #1
 80018e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e4:	2302      	movs	r3, #2
 80018e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Flash_CS_GPIO_Port, &GPIO_InitStruct);
 80018e8:	f107 0310 	add.w	r3, r7, #16
 80018ec:	4619      	mov	r1, r3
 80018ee:	480c      	ldr	r0, [pc, #48]	@ (8001920 <MX_GPIO_Init+0xf0>)
 80018f0:	f006 f934 	bl	8007b5c <HAL_GPIO_Init>

  /*Configure GPIO pins : Switch_Input_Pin Encoder_Input_Pin */
  GPIO_InitStruct.Pin = Switch_Input_Pin|Encoder_Input_Pin;
 80018f4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80018f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018fa:	2300      	movs	r3, #0
 80018fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018fe:	2301      	movs	r3, #1
 8001900:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001902:	f107 0310 	add.w	r3, r7, #16
 8001906:	4619      	mov	r1, r3
 8001908:	4806      	ldr	r0, [pc, #24]	@ (8001924 <MX_GPIO_Init+0xf4>)
 800190a:	f006 f927 	bl	8007b5c <HAL_GPIO_Init>

}
 800190e:	bf00      	nop
 8001910:	3720      	adds	r7, #32
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40021000 	.word	0x40021000
 800191c:	40011000 	.word	0x40011000
 8001920:	40010800 	.word	0x40010800
 8001924:	40010c00 	.word	0x40010c00

08001928 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800192c:	4b12      	ldr	r3, [pc, #72]	@ (8001978 <MX_I2C1_Init+0x50>)
 800192e:	4a13      	ldr	r2, [pc, #76]	@ (800197c <MX_I2C1_Init+0x54>)
 8001930:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001932:	4b11      	ldr	r3, [pc, #68]	@ (8001978 <MX_I2C1_Init+0x50>)
 8001934:	4a12      	ldr	r2, [pc, #72]	@ (8001980 <MX_I2C1_Init+0x58>)
 8001936:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001938:	4b0f      	ldr	r3, [pc, #60]	@ (8001978 <MX_I2C1_Init+0x50>)
 800193a:	2200      	movs	r2, #0
 800193c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800193e:	4b0e      	ldr	r3, [pc, #56]	@ (8001978 <MX_I2C1_Init+0x50>)
 8001940:	2200      	movs	r2, #0
 8001942:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001944:	4b0c      	ldr	r3, [pc, #48]	@ (8001978 <MX_I2C1_Init+0x50>)
 8001946:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800194a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800194c:	4b0a      	ldr	r3, [pc, #40]	@ (8001978 <MX_I2C1_Init+0x50>)
 800194e:	2200      	movs	r2, #0
 8001950:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001952:	4b09      	ldr	r3, [pc, #36]	@ (8001978 <MX_I2C1_Init+0x50>)
 8001954:	2200      	movs	r2, #0
 8001956:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001958:	4b07      	ldr	r3, [pc, #28]	@ (8001978 <MX_I2C1_Init+0x50>)
 800195a:	2200      	movs	r2, #0
 800195c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800195e:	4b06      	ldr	r3, [pc, #24]	@ (8001978 <MX_I2C1_Init+0x50>)
 8001960:	2200      	movs	r2, #0
 8001962:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001964:	4804      	ldr	r0, [pc, #16]	@ (8001978 <MX_I2C1_Init+0x50>)
 8001966:	f006 faad 	bl	8007ec4 <HAL_I2C_Init>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001970:	f000 f933 	bl	8001bda <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001974:	bf00      	nop
 8001976:	bd80      	pop	{r7, pc}
 8001978:	2000025c 	.word	0x2000025c
 800197c:	40005400 	.word	0x40005400
 8001980:	00061a80 	.word	0x00061a80

08001984 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b088      	sub	sp, #32
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800198c:	f107 0310 	add.w	r3, r7, #16
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	609a      	str	r2, [r3, #8]
 8001998:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a29      	ldr	r2, [pc, #164]	@ (8001a44 <HAL_I2C_MspInit+0xc0>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d14a      	bne.n	8001a3a <HAL_I2C_MspInit+0xb6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019a4:	4b28      	ldr	r3, [pc, #160]	@ (8001a48 <HAL_I2C_MspInit+0xc4>)
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	4a27      	ldr	r2, [pc, #156]	@ (8001a48 <HAL_I2C_MspInit+0xc4>)
 80019aa:	f043 0308 	orr.w	r3, r3, #8
 80019ae:	6193      	str	r3, [r2, #24]
 80019b0:	4b25      	ldr	r3, [pc, #148]	@ (8001a48 <HAL_I2C_MspInit+0xc4>)
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	f003 0308 	and.w	r3, r3, #8
 80019b8:	60fb      	str	r3, [r7, #12]
 80019ba:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 80019bc:	23c0      	movs	r3, #192	@ 0xc0
 80019be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019c0:	2312      	movs	r3, #18
 80019c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019c4:	2303      	movs	r3, #3
 80019c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c8:	f107 0310 	add.w	r3, r7, #16
 80019cc:	4619      	mov	r1, r3
 80019ce:	481f      	ldr	r0, [pc, #124]	@ (8001a4c <HAL_I2C_MspInit+0xc8>)
 80019d0:	f006 f8c4 	bl	8007b5c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019d4:	4b1c      	ldr	r3, [pc, #112]	@ (8001a48 <HAL_I2C_MspInit+0xc4>)
 80019d6:	69db      	ldr	r3, [r3, #28]
 80019d8:	4a1b      	ldr	r2, [pc, #108]	@ (8001a48 <HAL_I2C_MspInit+0xc4>)
 80019da:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80019de:	61d3      	str	r3, [r2, #28]
 80019e0:	4b19      	ldr	r3, [pc, #100]	@ (8001a48 <HAL_I2C_MspInit+0xc4>)
 80019e2:	69db      	ldr	r3, [r3, #28]
 80019e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019e8:	60bb      	str	r3, [r7, #8]
 80019ea:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 80019ec:	4b18      	ldr	r3, [pc, #96]	@ (8001a50 <HAL_I2C_MspInit+0xcc>)
 80019ee:	4a19      	ldr	r2, [pc, #100]	@ (8001a54 <HAL_I2C_MspInit+0xd0>)
 80019f0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019f2:	4b17      	ldr	r3, [pc, #92]	@ (8001a50 <HAL_I2C_MspInit+0xcc>)
 80019f4:	2210      	movs	r2, #16
 80019f6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019f8:	4b15      	ldr	r3, [pc, #84]	@ (8001a50 <HAL_I2C_MspInit+0xcc>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019fe:	4b14      	ldr	r3, [pc, #80]	@ (8001a50 <HAL_I2C_MspInit+0xcc>)
 8001a00:	2280      	movs	r2, #128	@ 0x80
 8001a02:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a04:	4b12      	ldr	r3, [pc, #72]	@ (8001a50 <HAL_I2C_MspInit+0xcc>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a0a:	4b11      	ldr	r3, [pc, #68]	@ (8001a50 <HAL_I2C_MspInit+0xcc>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001a10:	4b0f      	ldr	r3, [pc, #60]	@ (8001a50 <HAL_I2C_MspInit+0xcc>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001a16:	4b0e      	ldr	r3, [pc, #56]	@ (8001a50 <HAL_I2C_MspInit+0xcc>)
 8001a18:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a1c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001a1e:	480c      	ldr	r0, [pc, #48]	@ (8001a50 <HAL_I2C_MspInit+0xcc>)
 8001a20:	f005 ff3c 	bl	800789c <HAL_DMA_Init>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <HAL_I2C_MspInit+0xaa>
    {
      Error_Handler();
 8001a2a:	f000 f8d6 	bl	8001bda <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a07      	ldr	r2, [pc, #28]	@ (8001a50 <HAL_I2C_MspInit+0xcc>)
 8001a32:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a34:	4a06      	ldr	r2, [pc, #24]	@ (8001a50 <HAL_I2C_MspInit+0xcc>)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001a3a:	bf00      	nop
 8001a3c:	3720      	adds	r7, #32
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40005400 	.word	0x40005400
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	40010c00 	.word	0x40010c00
 8001a50:	200002b0 	.word	0x200002b0
 8001a54:	4002006c 	.word	0x4002006c

08001a58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a5c:	f005 fd8a 	bl	8007574 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a60:	f000 f876 	bl	8001b50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a64:	f7ff fee4 	bl	8001830 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a68:	f7fe feb2 	bl	80007d0 <MX_DMA_Init>
  MX_I2C1_Init();
 8001a6c:	f7ff ff5c 	bl	8001928 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001a70:	f005 fa8e 	bl	8006f90 <MX_TIM3_Init>
  MX_SPI2_Init();
 8001a74:	f005 f8da 	bl	8006c2c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  // W25Q64_Init(); // 初始化W25Q64
  OLED_Init(); // 初始化OLED
 8001a78:	f000 fa92 	bl	8001fa0 <OLED_Init>
  OLED_InitBuffer(); // 初始化双缓冲
 8001a7c:	f000 f8b4 	bl	8001be8 <OLED_InitBuffer>
  OLED_ClearBuffer(); // 清空缓冲区
 8001a80:	f000 f8e6 	bl	8001c50 <OLED_ClearBuffer>
  
  OLED_EnableDiffMode(1);  // 启用差分更新
 8001a84:	2001      	movs	r0, #1
 8001a86:	f003 fe59 	bl	800573c <OLED_EnableDiffMode>
  OLED_EnableFastUpdate(1); // 启用快速更新
 8001a8a:	2001      	movs	r0, #1
 8001a8c:	f003 fe74 	bl	8005778 <OLED_EnableFastUpdate>


  // HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3); // 启动PWM
  // HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3); // 启动PWM
  // HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); // 启动PWM
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1); // 启动编码器
 8001a90:	2100      	movs	r1, #0
 8001a92:	4825      	ldr	r0, [pc, #148]	@ (8001b28 <main+0xd0>)
 8001a94:	f008 f8e5 	bl	8009c62 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_2); // 启动编码器
 8001a98:	2104      	movs	r1, #4
 8001a9a:	4823      	ldr	r0, [pc, #140]	@ (8001b28 <main+0xd0>)
 8001a9c:	f008 f8e1 	bl	8009c62 <HAL_TIM_Encoder_Start>

  OLED_InitAnimationManager(&g_AnimationManager); // 初始化动画管理器
 8001aa0:	4822      	ldr	r0, [pc, #136]	@ (8001b2c <main+0xd4>)
 8001aa2:	f004 fe07 	bl	80066b4 <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&Menu_AnimationManager); // 初始化菜单动画管理器
 8001aa6:	4822      	ldr	r0, [pc, #136]	@ (8001b30 <main+0xd8>)
 8001aa8:	f004 fe04 	bl	80066b4 <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&Games_AnimationManager); // 初始化游戏动画管理器
 8001aac:	4821      	ldr	r0, [pc, #132]	@ (8001b34 <main+0xdc>)
 8001aae:	f004 fe01 	bl	80066b4 <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&Tools_AnimationManager); // 初始化工具动画管理器
 8001ab2:	4821      	ldr	r0, [pc, #132]	@ (8001b38 <main+0xe0>)
 8001ab4:	f004 fdfe 	bl	80066b4 <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&Settings_AnimationManager); // 初始化设置动画管理器
 8001ab8:	4820      	ldr	r0, [pc, #128]	@ (8001b3c <main+0xe4>)
 8001aba:	f004 fdfb 	bl	80066b4 <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&About_AnimationManager); // 初始化关于动画管理器
 8001abe:	4820      	ldr	r0, [pc, #128]	@ (8001b40 <main+0xe8>)
 8001ac0:	f004 fdf8 	bl	80066b4 <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&Status_AnimationManager); // 初始化状态动画管理器
 8001ac4:	481f      	ldr	r0, [pc, #124]	@ (8001b44 <main+0xec>)
 8001ac6:	f004 fdf5 	bl	80066b4 <OLED_InitAnimationManager>
  OLED_InitAnimationManager(&g_Title_AnimationManager); // 初始化标题动画管理器
 8001aca:	481f      	ldr	r0, [pc, #124]	@ (8001b48 <main+0xf0>)
 8001acc:	f004 fdf2 	bl	80066b4 <OLED_InitAnimationManager>
  __HAL_TIM_SET_COUNTER(&htim3, 32767);
 8001ad0:	4b15      	ldr	r3, [pc, #84]	@ (8001b28 <main+0xd0>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001ad8:	625a      	str	r2, [r3, #36]	@ 0x24
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {    
    #pragma region OLED_UI_SETTINGS // UI设置
    OLED_ClearBuffer();
 8001ada:	f000 f8b9 	bl	8001c50 <OLED_ClearBuffer>
    
    System_UI_Loop(); // UI循环
 8001ade:	f000 fd89 	bl	80025f4 <System_UI_Loop>

    
    // OLED_OptimizedDisplayFPS(80, 56); // 显示帧率
    count = __HAL_TIM_GET_COUNTER(&htim3); // 获取编码器计数值 1圈40
 8001ae2:	4b11      	ldr	r3, [pc, #68]	@ (8001b28 <main+0xd0>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ae8:	b29a      	uxth	r2, r3
 8001aea:	4b18      	ldr	r3, [pc, #96]	@ (8001b4c <main+0xf4>)
 8001aec:	801a      	strh	r2, [r3, #0]
    OLED_UpdateAnimationManager(&Menu_AnimationManager); // 更新菜单动画管理器
 8001aee:	4810      	ldr	r0, [pc, #64]	@ (8001b30 <main+0xd8>)
 8001af0:	f004 fe92 	bl	8006818 <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&g_AnimationManager); // 更新动画管理器
 8001af4:	480d      	ldr	r0, [pc, #52]	@ (8001b2c <main+0xd4>)
 8001af6:	f004 fe8f 	bl	8006818 <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&Games_AnimationManager); // 更新游戏动画管理器
 8001afa:	480e      	ldr	r0, [pc, #56]	@ (8001b34 <main+0xdc>)
 8001afc:	f004 fe8c 	bl	8006818 <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&Tools_AnimationManager); // 更新工具动画管理器
 8001b00:	480d      	ldr	r0, [pc, #52]	@ (8001b38 <main+0xe0>)
 8001b02:	f004 fe89 	bl	8006818 <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&Settings_AnimationManager); // 更新设置动画管理器
 8001b06:	480d      	ldr	r0, [pc, #52]	@ (8001b3c <main+0xe4>)
 8001b08:	f004 fe86 	bl	8006818 <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&About_AnimationManager); // 更新关于动画管理器
 8001b0c:	480c      	ldr	r0, [pc, #48]	@ (8001b40 <main+0xe8>)
 8001b0e:	f004 fe83 	bl	8006818 <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&Status_AnimationManager); // 更新状态动画管理器
 8001b12:	480c      	ldr	r0, [pc, #48]	@ (8001b44 <main+0xec>)
 8001b14:	f004 fe80 	bl	8006818 <OLED_UpdateAnimationManager>
    OLED_UpdateAnimationManager(&g_Title_AnimationManager); // 更新标题动画管理器
 8001b18:	480b      	ldr	r0, [pc, #44]	@ (8001b48 <main+0xf0>)
 8001b1a:	f004 fe7d 	bl	8006818 <OLED_UpdateAnimationManager>
    OLED_SmartUpdate(); // 智能更新显示
 8001b1e:	f003 fe3b 	bl	8005798 <OLED_SmartUpdate>
    OLED_ClearBuffer();
 8001b22:	bf00      	nop
 8001b24:	e7d9      	b.n	8001ada <main+0x82>
 8001b26:	bf00      	nop
 8001b28:	20003f10 	.word	0x20003f10
 8001b2c:	200038c0 	.word	0x200038c0
 8001b30:	20000f14 	.word	0x20000f14
 8001b34:	20001508 	.word	0x20001508
 8001b38:	20001afc 	.word	0x20001afc
 8001b3c:	200020f0 	.word	0x200020f0
 8001b40:	200026e4 	.word	0x200026e4
 8001b44:	20002cd8 	.word	0x20002cd8
 8001b48:	200032cc 	.word	0x200032cc
 8001b4c:	200002f4 	.word	0x200002f4

08001b50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b090      	sub	sp, #64	@ 0x40
 8001b54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b56:	f107 0318 	add.w	r3, r7, #24
 8001b5a:	2228      	movs	r2, #40	@ 0x28
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f008 fb63 	bl	800a22a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b64:	1d3b      	adds	r3, r7, #4
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]
 8001b6a:	605a      	str	r2, [r3, #4]
 8001b6c:	609a      	str	r2, [r3, #8]
 8001b6e:	60da      	str	r2, [r3, #12]
 8001b70:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b72:	2301      	movs	r3, #1
 8001b74:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b76:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b7a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b80:	2301      	movs	r3, #1
 8001b82:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b84:	2302      	movs	r3, #2
 8001b86:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b88:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b8c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001b8e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001b92:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b94:	f107 0318 	add.w	r3, r7, #24
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f006 fe2f 	bl	80087fc <HAL_RCC_OscConfig>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001ba4:	f000 f819 	bl	8001bda <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ba8:	230f      	movs	r3, #15
 8001baa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bac:	2302      	movs	r3, #2
 8001bae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001bb4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001bb8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001bbe:	1d3b      	adds	r3, r7, #4
 8001bc0:	2102      	movs	r1, #2
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f007 f89c 	bl	8008d00 <HAL_RCC_ClockConfig>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001bce:	f000 f804 	bl	8001bda <Error_Handler>
  }
}
 8001bd2:	bf00      	nop
 8001bd4:	3740      	adds	r7, #64	@ 0x40
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bde:	b672      	cpsid	i
}
 8001be0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001be2:	bf00      	nop
 8001be4:	e7fd      	b.n	8001be2 <Error_Handler+0x8>
	...

08001be8 <OLED_InitBuffer>:
        0x22, 0x00, 0x07  // 页地址范围: 0-7
};

// 初始化缓冲区
void OLED_InitBuffer(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
    // 清空缓冲区
    memset(OLED_BackBuffer, 0, sizeof(OLED_BackBuffer));
 8001bee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	4811      	ldr	r0, [pc, #68]	@ (8001c3c <OLED_InitBuffer+0x54>)
 8001bf6:	f008 fb18 	bl	800a22a <memset>
    memset(OLED_FrontBuffer, 0, sizeof(OLED_FrontBuffer));
 8001bfa:	f240 4201 	movw	r2, #1025	@ 0x401
 8001bfe:	2100      	movs	r1, #0
 8001c00:	480f      	ldr	r0, [pc, #60]	@ (8001c40 <OLED_InitBuffer+0x58>)
 8001c02:	f008 fb12 	bl	800a22a <memset>

    // 初始化第一个字节为数据控制字节
    OLED_FrontBuffer[0] = 0x40; // 数据控制字节：Co=0, D/C#=1 (数据)
 8001c06:	4b0e      	ldr	r3, [pc, #56]	@ (8001c40 <OLED_InitBuffer+0x58>)
 8001c08:	2240      	movs	r2, #64	@ 0x40
 8001c0a:	701a      	strb	r2, [r3, #0]

    // 初始化状态变量
    oled_update_flag = OLED_READY;
 8001c0c:	4b0d      	ldr	r3, [pc, #52]	@ (8001c44 <OLED_InitBuffer+0x5c>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	701a      	strb	r2, [r3, #0]
    oled_dma_busy = OLED_READY;
 8001c12:	4b0d      	ldr	r3, [pc, #52]	@ (8001c48 <OLED_InitBuffer+0x60>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	701a      	strb	r2, [r3, #0]

    // 将所有页面标记为脏（需要更新）
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8001c18:	2300      	movs	r3, #0
 8001c1a:	71fb      	strb	r3, [r7, #7]
 8001c1c:	e006      	b.n	8001c2c <OLED_InitBuffer+0x44>
    {
        oled_dirty_pages[i] = 1;
 8001c1e:	79fb      	ldrb	r3, [r7, #7]
 8001c20:	4a0a      	ldr	r2, [pc, #40]	@ (8001c4c <OLED_InitBuffer+0x64>)
 8001c22:	2101      	movs	r1, #1
 8001c24:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8001c26:	79fb      	ldrb	r3, [r7, #7]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	71fb      	strb	r3, [r7, #7]
 8001c2c:	79fb      	ldrb	r3, [r7, #7]
 8001c2e:	2b07      	cmp	r3, #7
 8001c30:	d9f5      	bls.n	8001c1e <OLED_InitBuffer+0x36>
    }
}
 8001c32:	bf00      	nop
 8001c34:	bf00      	nop
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	20000308 	.word	0x20000308
 8001c40:	20000708 	.word	0x20000708
 8001c44:	200002fc 	.word	0x200002fc
 8001c48:	200002fd 	.word	0x200002fd
 8001c4c:	20000300 	.word	0x20000300

08001c50 <OLED_ClearBuffer>:

// 清空缓冲区
void OLED_ClearBuffer(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
    // 重置缓冲区为全0 (全黑)
    memset(OLED_BackBuffer, 0, sizeof(OLED_BackBuffer));
 8001c56:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	480a      	ldr	r0, [pc, #40]	@ (8001c88 <OLED_ClearBuffer+0x38>)
 8001c5e:	f008 fae4 	bl	800a22a <memset>

    // 将所有页面标记为脏（需要更新）
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8001c62:	2300      	movs	r3, #0
 8001c64:	71fb      	strb	r3, [r7, #7]
 8001c66:	e006      	b.n	8001c76 <OLED_ClearBuffer+0x26>
    {
        oled_dirty_pages[i] = 1;
 8001c68:	79fb      	ldrb	r3, [r7, #7]
 8001c6a:	4a08      	ldr	r2, [pc, #32]	@ (8001c8c <OLED_ClearBuffer+0x3c>)
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8001c70:	79fb      	ldrb	r3, [r7, #7]
 8001c72:	3301      	adds	r3, #1
 8001c74:	71fb      	strb	r3, [r7, #7]
 8001c76:	79fb      	ldrb	r3, [r7, #7]
 8001c78:	2b07      	cmp	r3, #7
 8001c7a:	d9f5      	bls.n	8001c68 <OLED_ClearBuffer+0x18>
    }
}
 8001c7c:	bf00      	nop
 8001c7e:	bf00      	nop
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	20000308 	.word	0x20000308
 8001c8c:	20000300 	.word	0x20000300

08001c90 <OLED_IsBusy>:

uint8_t OLED_IsBusy(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
    // 如果标记为忙，检查是否已经过了足够时间
    if (oled_update_flag)
 8001c96:	4b0f      	ldr	r3, [pc, #60]	@ (8001cd4 <OLED_IsBusy+0x44>)
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d007      	beq.n	8001cb0 <OLED_IsBusy+0x20>
    {
        // SSD1315/SSD1306 典型帧率约为60Hz，每帧约16.7ms
        // 可以根据需要调整刷新率，减小此值可以提高帧率
        uint32_t current_time = HAL_GetTick();
 8001ca0:	f005 fcc0 	bl	8007624 <HAL_GetTick>
 8001ca4:	6078      	str	r0, [r7, #4]
        if (current_time - oled_last_update_time >= 0)
 8001ca6:	4b0c      	ldr	r3, [pc, #48]	@ (8001cd8 <OLED_IsBusy+0x48>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
        {
            oled_update_flag = OLED_READY; // 已经过了足够时间，不再忙
 8001caa:	4b0a      	ldr	r3, [pc, #40]	@ (8001cd4 <OLED_IsBusy+0x44>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	701a      	strb	r2, [r3, #0]
        }
    }

    // 如果DMA传输正在进行，也视为忙
    return (oled_update_flag || oled_dma_busy);
 8001cb0:	4b08      	ldr	r3, [pc, #32]	@ (8001cd4 <OLED_IsBusy+0x44>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d104      	bne.n	8001cc4 <OLED_IsBusy+0x34>
 8001cba:	4b08      	ldr	r3, [pc, #32]	@ (8001cdc <OLED_IsBusy+0x4c>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <OLED_IsBusy+0x38>
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e000      	b.n	8001cca <OLED_IsBusy+0x3a>
 8001cc8:	2300      	movs	r3, #0
 8001cca:	b2db      	uxtb	r3, r3
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3708      	adds	r7, #8
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	200002fc 	.word	0x200002fc
 8001cd8:	200002f8 	.word	0x200002f8
 8001cdc:	200002fd 	.word	0x200002fd

08001ce0 <OLED_UpdateDisplayVSync>:

void OLED_UpdateDisplayVSync(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af02      	add	r7, sp, #8
    // 等待上一次更新完成
    while (OLED_IsBusy())
 8001ce6:	bf00      	nop
 8001ce8:	f7ff ffd2 	bl	8001c90 <OLED_IsBusy>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d1fa      	bne.n	8001ce8 <OLED_UpdateDisplayVSync+0x8>
    {
        // 可以加入短暂延时或者让出CPU，但通常不会停留很久
    }

    oled_update_flag = OLED_BUSY;
 8001cf2:	4b1f      	ldr	r3, [pc, #124]	@ (8001d70 <OLED_UpdateDisplayVSync+0x90>)
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	701a      	strb	r2, [r3, #0]
    oled_last_update_time = HAL_GetTick();
 8001cf8:	f005 fc94 	bl	8007624 <HAL_GetTick>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	4a1d      	ldr	r2, [pc, #116]	@ (8001d74 <OLED_UpdateDisplayVSync+0x94>)
 8001d00:	6013      	str	r3, [r2, #0]

    OLED_FrontBuffer[0] = 0x40;                                             // 数据控制字节：Co=0, D/C#=1 (数据)
 8001d02:	4b1d      	ldr	r3, [pc, #116]	@ (8001d78 <OLED_UpdateDisplayVSync+0x98>)
 8001d04:	2240      	movs	r2, #64	@ 0x40
 8001d06:	701a      	strb	r2, [r3, #0]
    memcpy(OLED_FrontBuffer + 1, OLED_BackBuffer, OLED_WIDTH * OLED_PAGES); // 复制当前缓冲区到前缓冲区
 8001d08:	4a1c      	ldr	r2, [pc, #112]	@ (8001d7c <OLED_UpdateDisplayVSync+0x9c>)
 8001d0a:	4b1d      	ldr	r3, [pc, #116]	@ (8001d80 <OLED_UpdateDisplayVSync+0xa0>)
 8001d0c:	4610      	mov	r0, r2
 8001d0e:	4619      	mov	r1, r3
 8001d10:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d14:	461a      	mov	r2, r3
 8001d16:	f008 fb16 	bl	800a346 <memcpy>

    // 一次性发送所有命令
    for (uint8_t i = 0; i < sizeof(cmds); i++)
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	71fb      	strb	r3, [r7, #7]
 8001d1e:	e008      	b.n	8001d32 <OLED_UpdateDisplayVSync+0x52>
    {
        OLED_SendCommand(cmds[i]);
 8001d20:	79fb      	ldrb	r3, [r7, #7]
 8001d22:	4a18      	ldr	r2, [pc, #96]	@ (8001d84 <OLED_UpdateDisplayVSync+0xa4>)
 8001d24:	5cd3      	ldrb	r3, [r2, r3]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f000 f920 	bl	8001f6c <OLED_SendCommand>
    for (uint8_t i = 0; i < sizeof(cmds); i++)
 8001d2c:	79fb      	ldrb	r3, [r7, #7]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	71fb      	strb	r3, [r7, #7]
 8001d32:	79fb      	ldrb	r3, [r7, #7]
 8001d34:	2b07      	cmp	r3, #7
 8001d36:	d9f3      	bls.n	8001d20 <OLED_UpdateDisplayVSync+0x40>
    }


    HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDR << 1, OLED_FrontBuffer, OLED_WIDTH * OLED_PAGES + 1, HAL_MAX_DELAY);
 8001d38:	f04f 33ff 	mov.w	r3, #4294967295
 8001d3c:	9300      	str	r3, [sp, #0]
 8001d3e:	f240 4301 	movw	r3, #1025	@ 0x401
 8001d42:	4a0d      	ldr	r2, [pc, #52]	@ (8001d78 <OLED_UpdateDisplayVSync+0x98>)
 8001d44:	2178      	movs	r1, #120	@ 0x78
 8001d46:	4810      	ldr	r0, [pc, #64]	@ (8001d88 <OLED_UpdateDisplayVSync+0xa8>)
 8001d48:	f006 fa00 	bl	800814c <HAL_I2C_Master_Transmit>

    // 重置所有脏页标记
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	71bb      	strb	r3, [r7, #6]
 8001d50:	e006      	b.n	8001d60 <OLED_UpdateDisplayVSync+0x80>
    {
        oled_dirty_pages[i] = 0;
 8001d52:	79bb      	ldrb	r3, [r7, #6]
 8001d54:	4a0d      	ldr	r2, [pc, #52]	@ (8001d8c <OLED_UpdateDisplayVSync+0xac>)
 8001d56:	2100      	movs	r1, #0
 8001d58:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < OLED_PAGES; i++)
 8001d5a:	79bb      	ldrb	r3, [r7, #6]
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	71bb      	strb	r3, [r7, #6]
 8001d60:	79bb      	ldrb	r3, [r7, #6]
 8001d62:	2b07      	cmp	r3, #7
 8001d64:	d9f5      	bls.n	8001d52 <OLED_UpdateDisplayVSync+0x72>
    }
}
 8001d66:	bf00      	nop
 8001d68:	bf00      	nop
 8001d6a:	3708      	adds	r7, #8
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	200002fc 	.word	0x200002fc
 8001d74:	200002f8 	.word	0x200002f8
 8001d78:	20000708 	.word	0x20000708
 8001d7c:	20000709 	.word	0x20000709
 8001d80:	20000308 	.word	0x20000308
 8001d84:	0800cd68 	.word	0x0800cd68
 8001d88:	2000025c 	.word	0x2000025c
 8001d8c:	20000300 	.word	0x20000300

08001d90 <OLED_UpdateDisplayPartial>:
    }
}

// 局部更新显示函数
void OLED_UpdateDisplayPartial(uint8_t startPage, uint8_t endPage)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af02      	add	r7, sp, #8
 8001d96:	4603      	mov	r3, r0
 8001d98:	460a      	mov	r2, r1
 8001d9a:	71fb      	strb	r3, [r7, #7]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	71bb      	strb	r3, [r7, #6]
    // 边界检查
    if (startPage >= OLED_PAGES || endPage >= OLED_PAGES || startPage > endPage)
 8001da0:	79fb      	ldrb	r3, [r7, #7]
 8001da2:	2b07      	cmp	r3, #7
 8001da4:	d85c      	bhi.n	8001e60 <OLED_UpdateDisplayPartial+0xd0>
 8001da6:	79bb      	ldrb	r3, [r7, #6]
 8001da8:	2b07      	cmp	r3, #7
 8001daa:	d859      	bhi.n	8001e60 <OLED_UpdateDisplayPartial+0xd0>
 8001dac:	79fa      	ldrb	r2, [r7, #7]
 8001dae:	79bb      	ldrb	r3, [r7, #6]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d855      	bhi.n	8001e60 <OLED_UpdateDisplayPartial+0xd0>
        return;

    // 等待上一次更新完成
    while (OLED_IsBusy())
 8001db4:	bf00      	nop
 8001db6:	f7ff ff6b 	bl	8001c90 <OLED_IsBusy>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d1fa      	bne.n	8001db6 <OLED_UpdateDisplayPartial+0x26>
    {
        // 可以加入短暂延时或者让出CPU
    }

    oled_update_flag = OLED_BUSY;
 8001dc0:	4b29      	ldr	r3, [pc, #164]	@ (8001e68 <OLED_UpdateDisplayPartial+0xd8>)
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	701a      	strb	r2, [r3, #0]
    oled_last_update_time = HAL_GetTick();
 8001dc6:	f005 fc2d 	bl	8007624 <HAL_GetTick>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	4a27      	ldr	r2, [pc, #156]	@ (8001e6c <OLED_UpdateDisplayPartial+0xdc>)
 8001dce:	6013      	str	r3, [r2, #0]

    // 设置页地址范围
    OLED_SendCommand(0x22);      // 页地址设置命令
 8001dd0:	2022      	movs	r0, #34	@ 0x22
 8001dd2:	f000 f8cb 	bl	8001f6c <OLED_SendCommand>
    OLED_SendCommand(startPage); // 起始页
 8001dd6:	79fb      	ldrb	r3, [r7, #7]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f000 f8c7 	bl	8001f6c <OLED_SendCommand>
    OLED_SendCommand(endPage);   // 结束页
 8001dde:	79bb      	ldrb	r3, [r7, #6]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f000 f8c3 	bl	8001f6c <OLED_SendCommand>

    // 设置列地址范围（总是更新整行）
    OLED_SendCommand(0x21); // 列地址设置命令
 8001de6:	2021      	movs	r0, #33	@ 0x21
 8001de8:	f000 f8c0 	bl	8001f6c <OLED_SendCommand>
    OLED_SendCommand(0x00); // 起始列
 8001dec:	2000      	movs	r0, #0
 8001dee:	f000 f8bd 	bl	8001f6c <OLED_SendCommand>
    OLED_SendCommand(0x7F); // 结束列 (127)
 8001df2:	207f      	movs	r0, #127	@ 0x7f
 8001df4:	f000 f8ba 	bl	8001f6c <OLED_SendCommand>

    // 计算需要传输的数据长度
    uint16_t dataLen = OLED_WIDTH * (endPage - startPage + 1);
 8001df8:	79ba      	ldrb	r2, [r7, #6]
 8001dfa:	79fb      	ldrb	r3, [r7, #7]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	3301      	adds	r3, #1
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	01db      	lsls	r3, r3, #7
 8001e04:	81bb      	strh	r3, [r7, #12]

    // 前缓冲区的第一个字节设为数据控制字节
    OLED_FrontBuffer[0] = 0x40; // 数据控制字节：Co=0, D/C#=1 (数据)
 8001e06:	4b1a      	ldr	r3, [pc, #104]	@ (8001e70 <OLED_UpdateDisplayPartial+0xe0>)
 8001e08:	2240      	movs	r2, #64	@ 0x40
 8001e0a:	701a      	strb	r2, [r3, #0]

    // 只复制需要更新的页
    for (uint8_t page = startPage; page <= endPage; page++)
 8001e0c:	79fb      	ldrb	r3, [r7, #7]
 8001e0e:	73fb      	strb	r3, [r7, #15]
 8001e10:	e016      	b.n	8001e40 <OLED_UpdateDisplayPartial+0xb0>
    {
        memcpy(
            OLED_FrontBuffer + 1 + (page - startPage) * OLED_WIDTH,
 8001e12:	7bfa      	ldrb	r2, [r7, #15]
 8001e14:	79fb      	ldrb	r3, [r7, #7]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	01db      	lsls	r3, r3, #7
 8001e1a:	3301      	adds	r3, #1
        memcpy(
 8001e1c:	4a14      	ldr	r2, [pc, #80]	@ (8001e70 <OLED_UpdateDisplayPartial+0xe0>)
 8001e1e:	1898      	adds	r0, r3, r2
            OLED_BackBuffer + page * OLED_WIDTH,
 8001e20:	7bfb      	ldrb	r3, [r7, #15]
 8001e22:	01db      	lsls	r3, r3, #7
 8001e24:	461a      	mov	r2, r3
        memcpy(
 8001e26:	4b13      	ldr	r3, [pc, #76]	@ (8001e74 <OLED_UpdateDisplayPartial+0xe4>)
 8001e28:	4413      	add	r3, r2
 8001e2a:	2280      	movs	r2, #128	@ 0x80
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	f008 fa8a 	bl	800a346 <memcpy>
            OLED_WIDTH);
        oled_dirty_pages[page] = 0; // 重置脏页标记
 8001e32:	7bfb      	ldrb	r3, [r7, #15]
 8001e34:	4a10      	ldr	r2, [pc, #64]	@ (8001e78 <OLED_UpdateDisplayPartial+0xe8>)
 8001e36:	2100      	movs	r1, #0
 8001e38:	54d1      	strb	r1, [r2, r3]
    for (uint8_t page = startPage; page <= endPage; page++)
 8001e3a:	7bfb      	ldrb	r3, [r7, #15]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	73fb      	strb	r3, [r7, #15]
 8001e40:	7bfa      	ldrb	r2, [r7, #15]
 8001e42:	79bb      	ldrb	r3, [r7, #6]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d9e4      	bls.n	8001e12 <OLED_UpdateDisplayPartial+0x82>
    }

    // 发送数据
    HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDR << 1, OLED_FrontBuffer, dataLen + 1, HAL_MAX_DELAY);
 8001e48:	89bb      	ldrh	r3, [r7, #12]
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	f04f 32ff 	mov.w	r2, #4294967295
 8001e52:	9200      	str	r2, [sp, #0]
 8001e54:	4a06      	ldr	r2, [pc, #24]	@ (8001e70 <OLED_UpdateDisplayPartial+0xe0>)
 8001e56:	2178      	movs	r1, #120	@ 0x78
 8001e58:	4808      	ldr	r0, [pc, #32]	@ (8001e7c <OLED_UpdateDisplayPartial+0xec>)
 8001e5a:	f006 f977 	bl	800814c <HAL_I2C_Master_Transmit>
 8001e5e:	e000      	b.n	8001e62 <OLED_UpdateDisplayPartial+0xd2>
        return;
 8001e60:	bf00      	nop
}
 8001e62:	3710      	adds	r7, #16
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	200002fc 	.word	0x200002fc
 8001e6c:	200002f8 	.word	0x200002f8
 8001e70:	20000708 	.word	0x20000708
 8001e74:	20000308 	.word	0x20000308
 8001e78:	20000300 	.word	0x20000300
 8001e7c:	2000025c 	.word	0x2000025c

08001e80 <OLED_WritePixel>:

void OLED_WritePixel(int16_t x, int16_t y, uint8_t color)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	80fb      	strh	r3, [r7, #6]
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	80bb      	strh	r3, [r7, #4]
 8001e8e:	4613      	mov	r3, r2
 8001e90:	70fb      	strb	r3, [r7, #3]
    // 边界检查
    if (x >= OLED_WIDTH || x < 0 || y >= OLED_HEIGHT || y < 0)
 8001e92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e96:	2b7f      	cmp	r3, #127	@ 0x7f
 8001e98:	dc5e      	bgt.n	8001f58 <OLED_WritePixel+0xd8>
 8001e9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	db5a      	blt.n	8001f58 <OLED_WritePixel+0xd8>
 8001ea2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001ea6:	2b3f      	cmp	r3, #63	@ 0x3f
 8001ea8:	dc56      	bgt.n	8001f58 <OLED_WritePixel+0xd8>
 8001eaa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	db52      	blt.n	8001f58 <OLED_WritePixel+0xd8>
        return;

    // 计算像素所在的字节位置
    uint16_t byte_index = x + (y / 8) * OLED_WIDTH;
 8001eb2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	da00      	bge.n	8001ebc <OLED_WritePixel+0x3c>
 8001eba:	3307      	adds	r3, #7
 8001ebc:	10db      	asrs	r3, r3, #3
 8001ebe:	b21b      	sxth	r3, r3
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	01db      	lsls	r3, r3, #7
 8001ec4:	b29a      	uxth	r2, r3
 8001ec6:	88fb      	ldrh	r3, [r7, #6]
 8001ec8:	4413      	add	r3, r2
 8001eca:	81fb      	strh	r3, [r7, #14]
    uint8_t bit_position = y % 8;
 8001ecc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001ed0:	425a      	negs	r2, r3
 8001ed2:	f003 0307 	and.w	r3, r3, #7
 8001ed6:	f002 0207 	and.w	r2, r2, #7
 8001eda:	bf58      	it	pl
 8001edc:	4253      	negpl	r3, r2
 8001ede:	b21b      	sxth	r3, r3
 8001ee0:	737b      	strb	r3, [r7, #13]
    uint8_t page = y / 8; // 计算所在页
 8001ee2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	da00      	bge.n	8001eec <OLED_WritePixel+0x6c>
 8001eea:	3307      	adds	r3, #7
 8001eec:	10db      	asrs	r3, r3, #3
 8001eee:	b21b      	sxth	r3, r3
 8001ef0:	733b      	strb	r3, [r7, #12]

    // 记录当前像素值
    uint8_t old_value = OLED_BackBuffer[byte_index];
 8001ef2:	89fb      	ldrh	r3, [r7, #14]
 8001ef4:	4a1b      	ldr	r2, [pc, #108]	@ (8001f64 <OLED_WritePixel+0xe4>)
 8001ef6:	5cd3      	ldrb	r3, [r2, r3]
 8001ef8:	72fb      	strb	r3, [r7, #11]

    if (color) // 如果需要点亮像素
 8001efa:	78fb      	ldrb	r3, [r7, #3]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d00f      	beq.n	8001f20 <OLED_WritePixel+0xa0>
        OLED_BackBuffer[byte_index] |= (1 << bit_position);
 8001f00:	89fb      	ldrh	r3, [r7, #14]
 8001f02:	4a18      	ldr	r2, [pc, #96]	@ (8001f64 <OLED_WritePixel+0xe4>)
 8001f04:	5cd3      	ldrb	r3, [r2, r3]
 8001f06:	b25a      	sxtb	r2, r3
 8001f08:	7b7b      	ldrb	r3, [r7, #13]
 8001f0a:	2101      	movs	r1, #1
 8001f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f10:	b25b      	sxtb	r3, r3
 8001f12:	4313      	orrs	r3, r2
 8001f14:	b25a      	sxtb	r2, r3
 8001f16:	89fb      	ldrh	r3, [r7, #14]
 8001f18:	b2d1      	uxtb	r1, r2
 8001f1a:	4a12      	ldr	r2, [pc, #72]	@ (8001f64 <OLED_WritePixel+0xe4>)
 8001f1c:	54d1      	strb	r1, [r2, r3]
 8001f1e:	e010      	b.n	8001f42 <OLED_WritePixel+0xc2>
    else // 如果需要熄灭像素
        OLED_BackBuffer[byte_index] &= ~(1 << bit_position);
 8001f20:	89fb      	ldrh	r3, [r7, #14]
 8001f22:	4a10      	ldr	r2, [pc, #64]	@ (8001f64 <OLED_WritePixel+0xe4>)
 8001f24:	5cd3      	ldrb	r3, [r2, r3]
 8001f26:	b25a      	sxtb	r2, r3
 8001f28:	7b7b      	ldrb	r3, [r7, #13]
 8001f2a:	2101      	movs	r1, #1
 8001f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f30:	b25b      	sxtb	r3, r3
 8001f32:	43db      	mvns	r3, r3
 8001f34:	b25b      	sxtb	r3, r3
 8001f36:	4013      	ands	r3, r2
 8001f38:	b25a      	sxtb	r2, r3
 8001f3a:	89fb      	ldrh	r3, [r7, #14]
 8001f3c:	b2d1      	uxtb	r1, r2
 8001f3e:	4a09      	ldr	r2, [pc, #36]	@ (8001f64 <OLED_WritePixel+0xe4>)
 8001f40:	54d1      	strb	r1, [r2, r3]

    // 如果像素值发生变化，标记该页为脏
    if (old_value != OLED_BackBuffer[byte_index])
 8001f42:	89fb      	ldrh	r3, [r7, #14]
 8001f44:	4a07      	ldr	r2, [pc, #28]	@ (8001f64 <OLED_WritePixel+0xe4>)
 8001f46:	5cd3      	ldrb	r3, [r2, r3]
 8001f48:	7afa      	ldrb	r2, [r7, #11]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d005      	beq.n	8001f5a <OLED_WritePixel+0xda>
    {
        oled_dirty_pages[page] = 1;
 8001f4e:	7b3b      	ldrb	r3, [r7, #12]
 8001f50:	4a05      	ldr	r2, [pc, #20]	@ (8001f68 <OLED_WritePixel+0xe8>)
 8001f52:	2101      	movs	r1, #1
 8001f54:	54d1      	strb	r1, [r2, r3]
 8001f56:	e000      	b.n	8001f5a <OLED_WritePixel+0xda>
        return;
 8001f58:	bf00      	nop
    }
}
 8001f5a:	3714      	adds	r7, #20
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bc80      	pop	{r7}
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	20000308 	.word	0x20000308
 8001f68:	20000300 	.word	0x20000300

08001f6c <OLED_SendCommand>:

void OLED_SendCommand(uint8_t command)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af02      	add	r7, sp, #8
 8001f72:	4603      	mov	r3, r0
 8001f74:	71fb      	strb	r3, [r7, #7]
    uint8_t data[2];
    data[0] = 0x00; // Co = 0, D/C# = 0
 8001f76:	2300      	movs	r3, #0
 8001f78:	733b      	strb	r3, [r7, #12]
    data[1] = command;
 8001f7a:	79fb      	ldrb	r3, [r7, #7]
 8001f7c:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDR << 1, data, 2, HAL_MAX_DELAY);
 8001f7e:	f107 020c 	add.w	r2, r7, #12
 8001f82:	f04f 33ff 	mov.w	r3, #4294967295
 8001f86:	9300      	str	r3, [sp, #0]
 8001f88:	2302      	movs	r3, #2
 8001f8a:	2178      	movs	r1, #120	@ 0x78
 8001f8c:	4803      	ldr	r0, [pc, #12]	@ (8001f9c <OLED_SendCommand+0x30>)
 8001f8e:	f006 f8dd 	bl	800814c <HAL_I2C_Master_Transmit>
}
 8001f92:	bf00      	nop
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	2000025c 	.word	0x2000025c

08001fa0 <OLED_Init>:
    OLED_UpdateDisplayVSync();
}

// 更新OLED初始化函数来使用双缓冲
void OLED_Init()
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
    HAL_Delay(100); // 等待OLED上电稳定
 8001fa4:	2064      	movs	r0, #100	@ 0x64
 8001fa6:	f005 fb47 	bl	8007638 <HAL_Delay>

    // 初始化命令序列
    OLED_SendCommand(0xAE); // 关闭显示
 8001faa:	20ae      	movs	r0, #174	@ 0xae
 8001fac:	f7ff ffde 	bl	8001f6c <OLED_SendCommand>
    OLED_SendCommand(0xD5); // 设置显示时钟分频比/振荡器频率
 8001fb0:	20d5      	movs	r0, #213	@ 0xd5
 8001fb2:	f7ff ffdb 	bl	8001f6c <OLED_SendCommand>
    OLED_SendCommand(0x80); // 推荐值
 8001fb6:	2080      	movs	r0, #128	@ 0x80
 8001fb8:	f7ff ffd8 	bl	8001f6c <OLED_SendCommand>
    OLED_SendCommand(0xA8); // 设置多路复用比
 8001fbc:	20a8      	movs	r0, #168	@ 0xa8
 8001fbe:	f7ff ffd5 	bl	8001f6c <OLED_SendCommand>
    OLED_SendCommand(0x3F); // 默认 0x3F (1/64 duty)
 8001fc2:	203f      	movs	r0, #63	@ 0x3f
 8001fc4:	f7ff ffd2 	bl	8001f6c <OLED_SendCommand>
    OLED_SendCommand(0xD3); // 设置显示偏移
 8001fc8:	20d3      	movs	r0, #211	@ 0xd3
 8001fca:	f7ff ffcf 	bl	8001f6c <OLED_SendCommand>
    OLED_SendCommand(0x00); // 无偏移
 8001fce:	2000      	movs	r0, #0
 8001fd0:	f7ff ffcc 	bl	8001f6c <OLED_SendCommand>
    OLED_SendCommand(0x40); // 设置显示开始行 (0x40-0x7F)
 8001fd4:	2040      	movs	r0, #64	@ 0x40
 8001fd6:	f7ff ffc9 	bl	8001f6c <OLED_SendCommand>
    OLED_SendCommand(0x8D); // 电荷泵设置
 8001fda:	208d      	movs	r0, #141	@ 0x8d
 8001fdc:	f7ff ffc6 	bl	8001f6c <OLED_SendCommand>
    OLED_SendCommand(0x14); // 启用电荷泵
 8001fe0:	2014      	movs	r0, #20
 8001fe2:	f7ff ffc3 	bl	8001f6c <OLED_SendCommand>
    OLED_SendCommand(0x20); // 设置内存寻址模式
 8001fe6:	2020      	movs	r0, #32
 8001fe8:	f7ff ffc0 	bl	8001f6c <OLED_SendCommand>
    OLED_SendCommand(0x00); // 水平寻址模式
 8001fec:	2000      	movs	r0, #0
 8001fee:	f7ff ffbd 	bl	8001f6c <OLED_SendCommand>
    OLED_SendCommand(0xA1); // 段重映射，列地址127映射到SEG0
 8001ff2:	20a1      	movs	r0, #161	@ 0xa1
 8001ff4:	f7ff ffba 	bl	8001f6c <OLED_SendCommand>
    OLED_SendCommand(0xC8); // COM输出扫描方向，从COM[N-1]到COM0
 8001ff8:	20c8      	movs	r0, #200	@ 0xc8
 8001ffa:	f7ff ffb7 	bl	8001f6c <OLED_SendCommand>
    OLED_SendCommand(0xDA); // COM硬件配置
 8001ffe:	20da      	movs	r0, #218	@ 0xda
 8002000:	f7ff ffb4 	bl	8001f6c <OLED_SendCommand>
    OLED_SendCommand(0x12); // 交替COM配置，使能COM左/右重映射
 8002004:	2012      	movs	r0, #18
 8002006:	f7ff ffb1 	bl	8001f6c <OLED_SendCommand>
    OLED_SendCommand(0x81); // 设置对比度控制
 800200a:	2081      	movs	r0, #129	@ 0x81
 800200c:	f7ff ffae 	bl	8001f6c <OLED_SendCommand>
    OLED_SendCommand(0xCF); // 对比度值(0-255)
 8002010:	20cf      	movs	r0, #207	@ 0xcf
 8002012:	f7ff ffab 	bl	8001f6c <OLED_SendCommand>
    OLED_SendCommand(0xD9); // 设置预充电周期
 8002016:	20d9      	movs	r0, #217	@ 0xd9
 8002018:	f7ff ffa8 	bl	8001f6c <OLED_SendCommand>
    OLED_SendCommand(0xF1); // 第1和第2阶段的预充电周期
 800201c:	20f1      	movs	r0, #241	@ 0xf1
 800201e:	f7ff ffa5 	bl	8001f6c <OLED_SendCommand>
    OLED_SendCommand(0xDB); // 设置VCOMH解除选择电平
 8002022:	20db      	movs	r0, #219	@ 0xdb
 8002024:	f7ff ffa2 	bl	8001f6c <OLED_SendCommand>
    OLED_SendCommand(0x30); // 约0.83xVcc
 8002028:	2030      	movs	r0, #48	@ 0x30
 800202a:	f7ff ff9f 	bl	8001f6c <OLED_SendCommand>
    OLED_SendCommand(0xA4); // 显示RAM内容
 800202e:	20a4      	movs	r0, #164	@ 0xa4
 8002030:	f7ff ff9c 	bl	8001f6c <OLED_SendCommand>
    OLED_SendCommand(0xA6); // 正常显示(非反显)
 8002034:	20a6      	movs	r0, #166	@ 0xa6
 8002036:	f7ff ff99 	bl	8001f6c <OLED_SendCommand>
    OLED_SendCommand(0x2E); // 禁用滚动
 800203a:	202e      	movs	r0, #46	@ 0x2e
 800203c:	f7ff ff96 	bl	8001f6c <OLED_SendCommand>

    // 初始化缓冲区
    OLED_InitBuffer();
 8002040:	f7ff fdd2 	bl	8001be8 <OLED_InitBuffer>

    // 清屏
    OLED_ClearBuffer();
 8002044:	f7ff fe04 	bl	8001c50 <OLED_ClearBuffer>

    // 开启显示
    OLED_SendCommand(0xAF);
 8002048:	20af      	movs	r0, #175	@ 0xaf
 800204a:	f7ff ff8f 	bl	8001f6c <OLED_SendCommand>
}
 800204e:	bf00      	nop
 8002050:	bd80      	pop	{r7, pc}
	...

08002054 <OLED_InvertArea>:

// 区域反色功能 - 将指定矩形区域内的像素颜色反转 //! UPDATEDISPLAY REQUIRED
void OLED_InvertArea(int16_t x, int16_t y, uint8_t width, uint8_t height)
{
 8002054:	b490      	push	{r4, r7}
 8002056:	b088      	sub	sp, #32
 8002058:	af00      	add	r7, sp, #0
 800205a:	4604      	mov	r4, r0
 800205c:	4608      	mov	r0, r1
 800205e:	4611      	mov	r1, r2
 8002060:	461a      	mov	r2, r3
 8002062:	4623      	mov	r3, r4
 8002064:	80fb      	strh	r3, [r7, #6]
 8002066:	4603      	mov	r3, r0
 8002068:	80bb      	strh	r3, [r7, #4]
 800206a:	460b      	mov	r3, r1
 800206c:	70fb      	strb	r3, [r7, #3]
 800206e:	4613      	mov	r3, r2
 8002070:	70bb      	strb	r3, [r7, #2]
    if (width == 0 || height == 0)
 8002072:	78fb      	ldrb	r3, [r7, #3]
 8002074:	2b00      	cmp	r3, #0
 8002076:	f000 809d 	beq.w	80021b4 <OLED_InvertArea+0x160>
 800207a:	78bb      	ldrb	r3, [r7, #2]
 800207c:	2b00      	cmp	r3, #0
 800207e:	f000 8099 	beq.w	80021b4 <OLED_InvertArea+0x160>
        return;

    int16_t x_start_on_screen = x;
 8002082:	88fb      	ldrh	r3, [r7, #6]
 8002084:	83fb      	strh	r3, [r7, #30]
    int16_t y_start_on_screen = y;
 8002086:	88bb      	ldrh	r3, [r7, #4]
 8002088:	83bb      	strh	r3, [r7, #28]
    int16_t x_end_on_screen = x + width - 1;
 800208a:	78fb      	ldrb	r3, [r7, #3]
 800208c:	b29a      	uxth	r2, r3
 800208e:	88fb      	ldrh	r3, [r7, #6]
 8002090:	4413      	add	r3, r2
 8002092:	b29b      	uxth	r3, r3
 8002094:	3b01      	subs	r3, #1
 8002096:	b29b      	uxth	r3, r3
 8002098:	837b      	strh	r3, [r7, #26]
    int16_t y_end_on_screen = y + height - 1;
 800209a:	78bb      	ldrb	r3, [r7, #2]
 800209c:	b29a      	uxth	r2, r3
 800209e:	88bb      	ldrh	r3, [r7, #4]
 80020a0:	4413      	add	r3, r2
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	3b01      	subs	r3, #1
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	833b      	strh	r3, [r7, #24]

    // Clip to screen boundaries
    if (x_start_on_screen < 0)
 80020aa:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	da01      	bge.n	80020b6 <OLED_InvertArea+0x62>
        x_start_on_screen = 0;
 80020b2:	2300      	movs	r3, #0
 80020b4:	83fb      	strh	r3, [r7, #30]
    if (y_start_on_screen < 0)
 80020b6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	da01      	bge.n	80020c2 <OLED_InvertArea+0x6e>
        y_start_on_screen = 0;
 80020be:	2300      	movs	r3, #0
 80020c0:	83bb      	strh	r3, [r7, #28]
    if (x_end_on_screen >= OLED_WIDTH)
 80020c2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80020c6:	2b7f      	cmp	r3, #127	@ 0x7f
 80020c8:	dd01      	ble.n	80020ce <OLED_InvertArea+0x7a>
        x_end_on_screen = OLED_WIDTH - 1;
 80020ca:	237f      	movs	r3, #127	@ 0x7f
 80020cc:	837b      	strh	r3, [r7, #26]
    if (y_end_on_screen >= OLED_HEIGHT)
 80020ce:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80020d2:	2b3f      	cmp	r3, #63	@ 0x3f
 80020d4:	dd01      	ble.n	80020da <OLED_InvertArea+0x86>
        y_end_on_screen = OLED_HEIGHT - 1;
 80020d6:	233f      	movs	r3, #63	@ 0x3f
 80020d8:	833b      	strh	r3, [r7, #24]

    // If clipped area is invalid (e.g., entirely off-screen after clipping)
    if (x_start_on_screen > x_end_on_screen || y_start_on_screen > y_end_on_screen)
 80020da:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80020de:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	dc68      	bgt.n	80021b8 <OLED_InvertArea+0x164>
 80020e6:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80020ea:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	dc62      	bgt.n	80021b8 <OLED_InvertArea+0x164>
        return;

    // 计算涉及的页范围
    uint8_t start_page = y_start_on_screen / 8;
 80020f2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	da00      	bge.n	80020fc <OLED_InvertArea+0xa8>
 80020fa:	3307      	adds	r3, #7
 80020fc:	10db      	asrs	r3, r3, #3
 80020fe:	b21b      	sxth	r3, r3
 8002100:	747b      	strb	r3, [r7, #17]
    uint8_t end_page = y_end_on_screen / 8;
 8002102:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002106:	2b00      	cmp	r3, #0
 8002108:	da00      	bge.n	800210c <OLED_InvertArea+0xb8>
 800210a:	3307      	adds	r3, #7
 800210c:	10db      	asrs	r3, r3, #3
 800210e:	b21b      	sxth	r3, r3
 8002110:	743b      	strb	r3, [r7, #16]

    // 标记受影响的页为脏页
    extern volatile uint8_t oled_dirty_pages[];
    for (uint8_t page = start_page; page <= end_page; page++)
 8002112:	7c7b      	ldrb	r3, [r7, #17]
 8002114:	75fb      	strb	r3, [r7, #23]
 8002116:	e006      	b.n	8002126 <OLED_InvertArea+0xd2>
    {
        oled_dirty_pages[page] = 1;
 8002118:	7dfb      	ldrb	r3, [r7, #23]
 800211a:	4a2a      	ldr	r2, [pc, #168]	@ (80021c4 <OLED_InvertArea+0x170>)
 800211c:	2101      	movs	r1, #1
 800211e:	54d1      	strb	r1, [r2, r3]
    for (uint8_t page = start_page; page <= end_page; page++)
 8002120:	7dfb      	ldrb	r3, [r7, #23]
 8002122:	3301      	adds	r3, #1
 8002124:	75fb      	strb	r3, [r7, #23]
 8002126:	7dfa      	ldrb	r2, [r7, #23]
 8002128:	7c3b      	ldrb	r3, [r7, #16]
 800212a:	429a      	cmp	r2, r3
 800212c:	d9f4      	bls.n	8002118 <OLED_InvertArea+0xc4>
    }

    // 优化的像素更新逻辑 - 按行处理以提高缓存命中率
    for (int16_t j = y_start_on_screen; j <= y_end_on_screen; j++)
 800212e:	8bbb      	ldrh	r3, [r7, #28]
 8002130:	82bb      	strh	r3, [r7, #20]
 8002132:	e038      	b.n	80021a6 <OLED_InvertArea+0x152>
    {
        uint8_t page = (uint8_t)j / 8;
 8002134:	8abb      	ldrh	r3, [r7, #20]
 8002136:	b2db      	uxtb	r3, r3
 8002138:	08db      	lsrs	r3, r3, #3
 800213a:	73fb      	strb	r3, [r7, #15]
        uint8_t bit_position = (uint8_t)j % 8;
 800213c:	8abb      	ldrh	r3, [r7, #20]
 800213e:	b2db      	uxtb	r3, r3
 8002140:	f003 0307 	and.w	r3, r3, #7
 8002144:	73bb      	strb	r3, [r7, #14]
        uint16_t byte_index_base = page * OLED_WIDTH;
 8002146:	7bfb      	ldrb	r3, [r7, #15]
 8002148:	b29b      	uxth	r3, r3
 800214a:	01db      	lsls	r3, r3, #7
 800214c:	81bb      	strh	r3, [r7, #12]

        // 处理当前行上的所有像素
        for (int16_t i = x_start_on_screen; i <= x_end_on_screen; i++)
 800214e:	8bfb      	ldrh	r3, [r7, #30]
 8002150:	827b      	strh	r3, [r7, #18]
 8002152:	e01c      	b.n	800218e <OLED_InvertArea+0x13a>
        {
            uint16_t byte_index = byte_index_base + i;
 8002154:	8a7a      	ldrh	r2, [r7, #18]
 8002156:	89bb      	ldrh	r3, [r7, #12]
 8002158:	4413      	add	r3, r2
 800215a:	817b      	strh	r3, [r7, #10]

            // 反转位
            if (byte_index < sizeof(OLED_BackBuffer))
 800215c:	897b      	ldrh	r3, [r7, #10]
 800215e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002162:	d20e      	bcs.n	8002182 <OLED_InvertArea+0x12e>
            {
                OLED_BackBuffer[byte_index] ^= (1 << bit_position);
 8002164:	897b      	ldrh	r3, [r7, #10]
 8002166:	4a18      	ldr	r2, [pc, #96]	@ (80021c8 <OLED_InvertArea+0x174>)
 8002168:	5cd3      	ldrb	r3, [r2, r3]
 800216a:	b25a      	sxtb	r2, r3
 800216c:	7bbb      	ldrb	r3, [r7, #14]
 800216e:	2101      	movs	r1, #1
 8002170:	fa01 f303 	lsl.w	r3, r1, r3
 8002174:	b25b      	sxtb	r3, r3
 8002176:	4053      	eors	r3, r2
 8002178:	b25a      	sxtb	r2, r3
 800217a:	897b      	ldrh	r3, [r7, #10]
 800217c:	b2d1      	uxtb	r1, r2
 800217e:	4a12      	ldr	r2, [pc, #72]	@ (80021c8 <OLED_InvertArea+0x174>)
 8002180:	54d1      	strb	r1, [r2, r3]
        for (int16_t i = x_start_on_screen; i <= x_end_on_screen; i++)
 8002182:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002186:	b29b      	uxth	r3, r3
 8002188:	3301      	adds	r3, #1
 800218a:	b29b      	uxth	r3, r3
 800218c:	827b      	strh	r3, [r7, #18]
 800218e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002192:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002196:	429a      	cmp	r2, r3
 8002198:	dddc      	ble.n	8002154 <OLED_InvertArea+0x100>
    for (int16_t j = y_start_on_screen; j <= y_end_on_screen; j++)
 800219a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800219e:	b29b      	uxth	r3, r3
 80021a0:	3301      	adds	r3, #1
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	82bb      	strh	r3, [r7, #20]
 80021a6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80021aa:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	ddc0      	ble.n	8002134 <OLED_InvertArea+0xe0>
 80021b2:	e002      	b.n	80021ba <OLED_InvertArea+0x166>
        return;
 80021b4:	bf00      	nop
 80021b6:	e000      	b.n	80021ba <OLED_InvertArea+0x166>
        return;
 80021b8:	bf00      	nop
            }
        }
    }
}
 80021ba:	3720      	adds	r7, #32
 80021bc:	46bd      	mov	sp, r7
 80021be:	bc90      	pop	{r4, r7}
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	20000300 	.word	0x20000300
 80021c8:	20000308 	.word	0x20000308

080021cc <OLED_DisplayChar>:
    OLED_SendCommand(0x00 + (x & 0x0F));        // 设置低4位列地址
    OLED_SendCommand(0x10 + ((x >> 4) & 0x0F)); // 设置高4位列地址
}

void OLED_DisplayChar(int16_t x, int16_t y, char ch) //! UPDATEDISPLAY REQUIRED
{
 80021cc:	b480      	push	{r7}
 80021ce:	b089      	sub	sp, #36	@ 0x24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	4603      	mov	r3, r0
 80021d4:	80fb      	strh	r3, [r7, #6]
 80021d6:	460b      	mov	r3, r1
 80021d8:	80bb      	strh	r3, [r7, #4]
 80021da:	4613      	mov	r3, r2
 80021dc:	70fb      	strb	r3, [r7, #3]
    const uint8_t font_width = 6;
 80021de:	2306      	movs	r3, #6
 80021e0:	773b      	strb	r3, [r7, #28]
    const uint8_t font_height = 8;
 80021e2:	2308      	movs	r3, #8
 80021e4:	76fb      	strb	r3, [r7, #27]

    if (ch < 32)
 80021e6:	78fb      	ldrb	r3, [r7, #3]
 80021e8:	2b1f      	cmp	r3, #31
 80021ea:	f240 80a8 	bls.w	800233e <OLED_DisplayChar+0x172>
        return;

    uint8_t c = ch - 32;
 80021ee:	78fb      	ldrb	r3, [r7, #3]
 80021f0:	3b20      	subs	r3, #32
 80021f2:	76bb      	strb	r3, [r7, #26]

    uint8_t start_page = (y >= 0) ? (y / 8) : 0;
 80021f4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	db08      	blt.n	800220e <OLED_DisplayChar+0x42>
 80021fc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002200:	2b00      	cmp	r3, #0
 8002202:	da00      	bge.n	8002206 <OLED_DisplayChar+0x3a>
 8002204:	3307      	adds	r3, #7
 8002206:	10db      	asrs	r3, r3, #3
 8002208:	b21b      	sxth	r3, r3
 800220a:	b2db      	uxtb	r3, r3
 800220c:	e000      	b.n	8002210 <OLED_DisplayChar+0x44>
 800220e:	2300      	movs	r3, #0
 8002210:	767b      	strb	r3, [r7, #25]
    uint8_t end_page = ((y + font_height - 1) < OLED_HEIGHT) ? ((y + font_height - 1) / 8) : (OLED_HEIGHT / 8 - 1);
 8002212:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002216:	7efb      	ldrb	r3, [r7, #27]
 8002218:	4413      	add	r3, r2
 800221a:	2b40      	cmp	r3, #64	@ 0x40
 800221c:	dc0a      	bgt.n	8002234 <OLED_DisplayChar+0x68>
 800221e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002222:	7efb      	ldrb	r3, [r7, #27]
 8002224:	4413      	add	r3, r2
 8002226:	3b01      	subs	r3, #1
 8002228:	2b00      	cmp	r3, #0
 800222a:	da00      	bge.n	800222e <OLED_DisplayChar+0x62>
 800222c:	3307      	adds	r3, #7
 800222e:	10db      	asrs	r3, r3, #3
 8002230:	b2db      	uxtb	r3, r3
 8002232:	e000      	b.n	8002236 <OLED_DisplayChar+0x6a>
 8002234:	2307      	movs	r3, #7
 8002236:	763b      	strb	r3, [r7, #24]

    extern volatile uint8_t oled_dirty_pages[];
    for (uint8_t page = start_page; page <= end_page && page < OLED_PAGES; page++)
 8002238:	7e7b      	ldrb	r3, [r7, #25]
 800223a:	77fb      	strb	r3, [r7, #31]
 800223c:	e006      	b.n	800224c <OLED_DisplayChar+0x80>
    {
        oled_dirty_pages[page] = 1;
 800223e:	7ffb      	ldrb	r3, [r7, #31]
 8002240:	4a42      	ldr	r2, [pc, #264]	@ (800234c <OLED_DisplayChar+0x180>)
 8002242:	2101      	movs	r1, #1
 8002244:	54d1      	strb	r1, [r2, r3]
    for (uint8_t page = start_page; page <= end_page && page < OLED_PAGES; page++)
 8002246:	7ffb      	ldrb	r3, [r7, #31]
 8002248:	3301      	adds	r3, #1
 800224a:	77fb      	strb	r3, [r7, #31]
 800224c:	7ffa      	ldrb	r2, [r7, #31]
 800224e:	7e3b      	ldrb	r3, [r7, #24]
 8002250:	429a      	cmp	r2, r3
 8002252:	d802      	bhi.n	800225a <OLED_DisplayChar+0x8e>
 8002254:	7ffb      	ldrb	r3, [r7, #31]
 8002256:	2b07      	cmp	r3, #7
 8002258:	d9f1      	bls.n	800223e <OLED_DisplayChar+0x72>
    }
    // 按列渲染
    for (uint8_t char_col = 0; char_col < font_width; char_col++)
 800225a:	2300      	movs	r3, #0
 800225c:	77bb      	strb	r3, [r7, #30]
 800225e:	e069      	b.n	8002334 <OLED_DisplayChar+0x168>
    {
        int16_t screen_x = x + char_col;
 8002260:	7fbb      	ldrb	r3, [r7, #30]
 8002262:	b29a      	uxth	r2, r3
 8002264:	88fb      	ldrh	r3, [r7, #6]
 8002266:	4413      	add	r3, r2
 8002268:	b29b      	uxth	r3, r3
 800226a:	82fb      	strh	r3, [r7, #22]
        if (screen_x < 0 || screen_x >= OLED_WIDTH)
 800226c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002270:	2b00      	cmp	r3, #0
 8002272:	db5b      	blt.n	800232c <OLED_DisplayChar+0x160>
 8002274:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002278:	2b7f      	cmp	r3, #127	@ 0x7f
 800227a:	dc57      	bgt.n	800232c <OLED_DisplayChar+0x160>
            continue;

        if ((c * font_width + char_col) >= sizeof(OLED_FONT_6x8))
 800227c:	7ebb      	ldrb	r3, [r7, #26]
 800227e:	7f3a      	ldrb	r2, [r7, #28]
 8002280:	fb03 f202 	mul.w	r2, r3, r2
 8002284:	7fbb      	ldrb	r3, [r7, #30]
 8002286:	4413      	add	r3, r2
 8002288:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 800228c:	d259      	bcs.n	8002342 <OLED_DisplayChar+0x176>
            break;
        uint8_t font_data_col = OLED_FONT_6x8[c * font_width + char_col];
 800228e:	7ebb      	ldrb	r3, [r7, #26]
 8002290:	7f3a      	ldrb	r2, [r7, #28]
 8002292:	fb03 f202 	mul.w	r2, r3, r2
 8002296:	7fbb      	ldrb	r3, [r7, #30]
 8002298:	4413      	add	r3, r2
 800229a:	4a2d      	ldr	r2, [pc, #180]	@ (8002350 <OLED_DisplayChar+0x184>)
 800229c:	5cd3      	ldrb	r3, [r2, r3]
 800229e:	757b      	strb	r3, [r7, #21]

        for (uint8_t char_row_bit = 0; char_row_bit < font_height; char_row_bit++)
 80022a0:	2300      	movs	r3, #0
 80022a2:	777b      	strb	r3, [r7, #29]
 80022a4:	e03d      	b.n	8002322 <OLED_DisplayChar+0x156>
        {
            int16_t screen_y = y + char_row_bit;
 80022a6:	7f7b      	ldrb	r3, [r7, #29]
 80022a8:	b29a      	uxth	r2, r3
 80022aa:	88bb      	ldrh	r3, [r7, #4]
 80022ac:	4413      	add	r3, r2
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	827b      	strh	r3, [r7, #18]
            if (screen_y < 0 || screen_y >= OLED_HEIGHT)
 80022b2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	db2f      	blt.n	800231a <OLED_DisplayChar+0x14e>
 80022ba:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80022be:	2b3f      	cmp	r3, #63	@ 0x3f
 80022c0:	dc2b      	bgt.n	800231a <OLED_DisplayChar+0x14e>
                continue;

            if ((font_data_col >> char_row_bit) & 0x01)
 80022c2:	7d7a      	ldrb	r2, [r7, #21]
 80022c4:	7f7b      	ldrb	r3, [r7, #29]
 80022c6:	fa42 f303 	asr.w	r3, r2, r3
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d024      	beq.n	800231c <OLED_DisplayChar+0x150>
            {
                uint8_t page = (uint8_t)screen_y / 8;
 80022d2:	8a7b      	ldrh	r3, [r7, #18]
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	08db      	lsrs	r3, r3, #3
 80022d8:	747b      	strb	r3, [r7, #17]
                uint8_t bit_offset_in_page = (uint8_t)screen_y % 8;
 80022da:	8a7b      	ldrh	r3, [r7, #18]
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	f003 0307 	and.w	r3, r3, #7
 80022e2:	743b      	strb	r3, [r7, #16]
                uint16_t buffer_index = (uint16_t)screen_x + page * OLED_WIDTH;
 80022e4:	7c7b      	ldrb	r3, [r7, #17]
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	01db      	lsls	r3, r3, #7
 80022ea:	b29a      	uxth	r2, r3
 80022ec:	8afb      	ldrh	r3, [r7, #22]
 80022ee:	4413      	add	r3, r2
 80022f0:	81fb      	strh	r3, [r7, #14]

                if (buffer_index < sizeof(OLED_BackBuffer))
 80022f2:	89fb      	ldrh	r3, [r7, #14]
 80022f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022f8:	d210      	bcs.n	800231c <OLED_DisplayChar+0x150>
                {
                    OLED_BackBuffer[buffer_index] |= (1 << bit_offset_in_page);
 80022fa:	89fb      	ldrh	r3, [r7, #14]
 80022fc:	4a15      	ldr	r2, [pc, #84]	@ (8002354 <OLED_DisplayChar+0x188>)
 80022fe:	5cd3      	ldrb	r3, [r2, r3]
 8002300:	b25a      	sxtb	r2, r3
 8002302:	7c3b      	ldrb	r3, [r7, #16]
 8002304:	2101      	movs	r1, #1
 8002306:	fa01 f303 	lsl.w	r3, r1, r3
 800230a:	b25b      	sxtb	r3, r3
 800230c:	4313      	orrs	r3, r2
 800230e:	b25a      	sxtb	r2, r3
 8002310:	89fb      	ldrh	r3, [r7, #14]
 8002312:	b2d1      	uxtb	r1, r2
 8002314:	4a0f      	ldr	r2, [pc, #60]	@ (8002354 <OLED_DisplayChar+0x188>)
 8002316:	54d1      	strb	r1, [r2, r3]
 8002318:	e000      	b.n	800231c <OLED_DisplayChar+0x150>
                continue;
 800231a:	bf00      	nop
        for (uint8_t char_row_bit = 0; char_row_bit < font_height; char_row_bit++)
 800231c:	7f7b      	ldrb	r3, [r7, #29]
 800231e:	3301      	adds	r3, #1
 8002320:	777b      	strb	r3, [r7, #29]
 8002322:	7f7a      	ldrb	r2, [r7, #29]
 8002324:	7efb      	ldrb	r3, [r7, #27]
 8002326:	429a      	cmp	r2, r3
 8002328:	d3bd      	bcc.n	80022a6 <OLED_DisplayChar+0xda>
 800232a:	e000      	b.n	800232e <OLED_DisplayChar+0x162>
            continue;
 800232c:	bf00      	nop
    for (uint8_t char_col = 0; char_col < font_width; char_col++)
 800232e:	7fbb      	ldrb	r3, [r7, #30]
 8002330:	3301      	adds	r3, #1
 8002332:	77bb      	strb	r3, [r7, #30]
 8002334:	7fba      	ldrb	r2, [r7, #30]
 8002336:	7f3b      	ldrb	r3, [r7, #28]
 8002338:	429a      	cmp	r2, r3
 800233a:	d391      	bcc.n	8002260 <OLED_DisplayChar+0x94>
 800233c:	e002      	b.n	8002344 <OLED_DisplayChar+0x178>
        return;
 800233e:	bf00      	nop
 8002340:	e000      	b.n	8002344 <OLED_DisplayChar+0x178>
            break;
 8002342:	bf00      	nop
                }
            }
        }
    }
}
 8002344:	3724      	adds	r7, #36	@ 0x24
 8002346:	46bd      	mov	sp, r7
 8002348:	bc80      	pop	{r7}
 800234a:	4770      	bx	lr
 800234c:	20000300 	.word	0x20000300
 8002350:	0800cb28 	.word	0x0800cb28
 8002354:	20000308 	.word	0x20000308

08002358 <OLED_DisplayCharInverted>:

void OLED_DisplayCharInverted(int16_t x, int16_t y, char ch, uint8_t inverted) //! UPDATEDISPLAY REQUIRED
{
 8002358:	b490      	push	{r4, r7}
 800235a:	b086      	sub	sp, #24
 800235c:	af00      	add	r7, sp, #0
 800235e:	4604      	mov	r4, r0
 8002360:	4608      	mov	r0, r1
 8002362:	4611      	mov	r1, r2
 8002364:	461a      	mov	r2, r3
 8002366:	4623      	mov	r3, r4
 8002368:	80fb      	strh	r3, [r7, #6]
 800236a:	4603      	mov	r3, r0
 800236c:	80bb      	strh	r3, [r7, #4]
 800236e:	460b      	mov	r3, r1
 8002370:	70fb      	strb	r3, [r7, #3]
 8002372:	4613      	mov	r3, r2
 8002374:	70bb      	strb	r3, [r7, #2]
    const uint8_t font_width = 6;
 8002376:	2306      	movs	r3, #6
 8002378:	753b      	strb	r3, [r7, #20]
    const uint8_t font_height = 8;
 800237a:	2308      	movs	r3, #8
 800237c:	74fb      	strb	r3, [r7, #19]

    if (ch < 32)
 800237e:	78fb      	ldrb	r3, [r7, #3]
 8002380:	2b1f      	cmp	r3, #31
 8002382:	f240 808e 	bls.w	80024a2 <OLED_DisplayCharInverted+0x14a>
        return;

    uint8_t c = ch - 32;
 8002386:	78fb      	ldrb	r3, [r7, #3]
 8002388:	3b20      	subs	r3, #32
 800238a:	74bb      	strb	r3, [r7, #18]

    for (uint8_t char_col = 0; char_col < font_width; char_col++)
 800238c:	2300      	movs	r3, #0
 800238e:	75fb      	strb	r3, [r7, #23]
 8002390:	e081      	b.n	8002496 <OLED_DisplayCharInverted+0x13e>
    {
        int16_t screen_x = x + char_col;
 8002392:	7dfb      	ldrb	r3, [r7, #23]
 8002394:	b29a      	uxth	r2, r3
 8002396:	88fb      	ldrh	r3, [r7, #6]
 8002398:	4413      	add	r3, r2
 800239a:	b29b      	uxth	r3, r3
 800239c:	823b      	strh	r3, [r7, #16]
        if (screen_x < 0 || screen_x >= OLED_WIDTH)
 800239e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	db73      	blt.n	800248e <OLED_DisplayCharInverted+0x136>
 80023a6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80023aa:	2b7f      	cmp	r3, #127	@ 0x7f
 80023ac:	dc6f      	bgt.n	800248e <OLED_DisplayCharInverted+0x136>
            continue;

        if ((c * font_width + char_col) >= sizeof(OLED_FONT_6x8))
 80023ae:	7cbb      	ldrb	r3, [r7, #18]
 80023b0:	7d3a      	ldrb	r2, [r7, #20]
 80023b2:	fb03 f202 	mul.w	r2, r3, r2
 80023b6:	7dfb      	ldrb	r3, [r7, #23]
 80023b8:	4413      	add	r3, r2
 80023ba:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 80023be:	d272      	bcs.n	80024a6 <OLED_DisplayCharInverted+0x14e>
            break;
        uint8_t font_data_col = OLED_FONT_6x8[c * font_width + char_col];
 80023c0:	7cbb      	ldrb	r3, [r7, #18]
 80023c2:	7d3a      	ldrb	r2, [r7, #20]
 80023c4:	fb03 f202 	mul.w	r2, r3, r2
 80023c8:	7dfb      	ldrb	r3, [r7, #23]
 80023ca:	4413      	add	r3, r2
 80023cc:	4a38      	ldr	r2, [pc, #224]	@ (80024b0 <OLED_DisplayCharInverted+0x158>)
 80023ce:	5cd3      	ldrb	r3, [r2, r3]
 80023d0:	75bb      	strb	r3, [r7, #22]

        if (inverted)
 80023d2:	78bb      	ldrb	r3, [r7, #2]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d002      	beq.n	80023de <OLED_DisplayCharInverted+0x86>
        {
            font_data_col = ~font_data_col;
 80023d8:	7dbb      	ldrb	r3, [r7, #22]
 80023da:	43db      	mvns	r3, r3
 80023dc:	75bb      	strb	r3, [r7, #22]
        }

        for (uint8_t char_row_bit = 0; char_row_bit < font_height; char_row_bit++)
 80023de:	2300      	movs	r3, #0
 80023e0:	757b      	strb	r3, [r7, #21]
 80023e2:	e04f      	b.n	8002484 <OLED_DisplayCharInverted+0x12c>
        {
            int16_t screen_y = y + char_row_bit;
 80023e4:	7d7b      	ldrb	r3, [r7, #21]
 80023e6:	b29a      	uxth	r2, r3
 80023e8:	88bb      	ldrh	r3, [r7, #4]
 80023ea:	4413      	add	r3, r2
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	81fb      	strh	r3, [r7, #14]
            if (screen_y < 0 || screen_y >= OLED_HEIGHT)
 80023f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	db41      	blt.n	800247c <OLED_DisplayCharInverted+0x124>
 80023f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80023fc:	2b3f      	cmp	r3, #63	@ 0x3f
 80023fe:	dc3d      	bgt.n	800247c <OLED_DisplayCharInverted+0x124>
                continue;

            uint8_t page = (uint8_t)screen_y / 8;
 8002400:	89fb      	ldrh	r3, [r7, #14]
 8002402:	b2db      	uxtb	r3, r3
 8002404:	08db      	lsrs	r3, r3, #3
 8002406:	737b      	strb	r3, [r7, #13]
            uint8_t bit_offset_in_page = (uint8_t)screen_y % 8;
 8002408:	89fb      	ldrh	r3, [r7, #14]
 800240a:	b2db      	uxtb	r3, r3
 800240c:	f003 0307 	and.w	r3, r3, #7
 8002410:	733b      	strb	r3, [r7, #12]
            uint16_t buffer_index = (uint16_t)screen_x + page * OLED_WIDTH;
 8002412:	7b7b      	ldrb	r3, [r7, #13]
 8002414:	b29b      	uxth	r3, r3
 8002416:	01db      	lsls	r3, r3, #7
 8002418:	b29a      	uxth	r2, r3
 800241a:	8a3b      	ldrh	r3, [r7, #16]
 800241c:	4413      	add	r3, r2
 800241e:	817b      	strh	r3, [r7, #10]

            if (buffer_index < sizeof(OLED_BackBuffer))
 8002420:	897b      	ldrh	r3, [r7, #10]
 8002422:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002426:	d22a      	bcs.n	800247e <OLED_DisplayCharInverted+0x126>
            {
                if ((font_data_col >> char_row_bit) & 0x01)
 8002428:	7dba      	ldrb	r2, [r7, #22]
 800242a:	7d7b      	ldrb	r3, [r7, #21]
 800242c:	fa42 f303 	asr.w	r3, r2, r3
 8002430:	f003 0301 	and.w	r3, r3, #1
 8002434:	2b00      	cmp	r3, #0
 8002436:	d00f      	beq.n	8002458 <OLED_DisplayCharInverted+0x100>
                {
                    OLED_BackBuffer[buffer_index] |= (1 << bit_offset_in_page);
 8002438:	897b      	ldrh	r3, [r7, #10]
 800243a:	4a1e      	ldr	r2, [pc, #120]	@ (80024b4 <OLED_DisplayCharInverted+0x15c>)
 800243c:	5cd3      	ldrb	r3, [r2, r3]
 800243e:	b25a      	sxtb	r2, r3
 8002440:	7b3b      	ldrb	r3, [r7, #12]
 8002442:	2101      	movs	r1, #1
 8002444:	fa01 f303 	lsl.w	r3, r1, r3
 8002448:	b25b      	sxtb	r3, r3
 800244a:	4313      	orrs	r3, r2
 800244c:	b25a      	sxtb	r2, r3
 800244e:	897b      	ldrh	r3, [r7, #10]
 8002450:	b2d1      	uxtb	r1, r2
 8002452:	4a18      	ldr	r2, [pc, #96]	@ (80024b4 <OLED_DisplayCharInverted+0x15c>)
 8002454:	54d1      	strb	r1, [r2, r3]
 8002456:	e012      	b.n	800247e <OLED_DisplayCharInverted+0x126>
                }
                else
                {
                    OLED_BackBuffer[buffer_index] &= ~(1 << bit_offset_in_page);
 8002458:	897b      	ldrh	r3, [r7, #10]
 800245a:	4a16      	ldr	r2, [pc, #88]	@ (80024b4 <OLED_DisplayCharInverted+0x15c>)
 800245c:	5cd3      	ldrb	r3, [r2, r3]
 800245e:	b25a      	sxtb	r2, r3
 8002460:	7b3b      	ldrb	r3, [r7, #12]
 8002462:	2101      	movs	r1, #1
 8002464:	fa01 f303 	lsl.w	r3, r1, r3
 8002468:	b25b      	sxtb	r3, r3
 800246a:	43db      	mvns	r3, r3
 800246c:	b25b      	sxtb	r3, r3
 800246e:	4013      	ands	r3, r2
 8002470:	b25a      	sxtb	r2, r3
 8002472:	897b      	ldrh	r3, [r7, #10]
 8002474:	b2d1      	uxtb	r1, r2
 8002476:	4a0f      	ldr	r2, [pc, #60]	@ (80024b4 <OLED_DisplayCharInverted+0x15c>)
 8002478:	54d1      	strb	r1, [r2, r3]
 800247a:	e000      	b.n	800247e <OLED_DisplayCharInverted+0x126>
                continue;
 800247c:	bf00      	nop
        for (uint8_t char_row_bit = 0; char_row_bit < font_height; char_row_bit++)
 800247e:	7d7b      	ldrb	r3, [r7, #21]
 8002480:	3301      	adds	r3, #1
 8002482:	757b      	strb	r3, [r7, #21]
 8002484:	7d7a      	ldrb	r2, [r7, #21]
 8002486:	7cfb      	ldrb	r3, [r7, #19]
 8002488:	429a      	cmp	r2, r3
 800248a:	d3ab      	bcc.n	80023e4 <OLED_DisplayCharInverted+0x8c>
 800248c:	e000      	b.n	8002490 <OLED_DisplayCharInverted+0x138>
            continue;
 800248e:	bf00      	nop
    for (uint8_t char_col = 0; char_col < font_width; char_col++)
 8002490:	7dfb      	ldrb	r3, [r7, #23]
 8002492:	3301      	adds	r3, #1
 8002494:	75fb      	strb	r3, [r7, #23]
 8002496:	7dfa      	ldrb	r2, [r7, #23]
 8002498:	7d3b      	ldrb	r3, [r7, #20]
 800249a:	429a      	cmp	r2, r3
 800249c:	f4ff af79 	bcc.w	8002392 <OLED_DisplayCharInverted+0x3a>
 80024a0:	e002      	b.n	80024a8 <OLED_DisplayCharInverted+0x150>
        return;
 80024a2:	bf00      	nop
 80024a4:	e000      	b.n	80024a8 <OLED_DisplayCharInverted+0x150>
            break;
 80024a6:	bf00      	nop
                }
            }
        }
    }
}
 80024a8:	3718      	adds	r7, #24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bc90      	pop	{r4, r7}
 80024ae:	4770      	bx	lr
 80024b0:	0800cb28 	.word	0x0800cb28
 80024b4:	20000308 	.word	0x20000308

080024b8 <OLED_DisplayString>:

void OLED_DisplayString(int16_t x, int16_t y, char *str) //! UPDATEDISPLAY REQUIRED
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	4603      	mov	r3, r0
 80024c0:	603a      	str	r2, [r7, #0]
 80024c2:	80fb      	strh	r3, [r7, #6]
 80024c4:	460b      	mov	r3, r1
 80024c6:	80bb      	strh	r3, [r7, #4]
    uint8_t j = 0;
 80024c8:	2300      	movs	r3, #0
 80024ca:	73fb      	strb	r3, [r7, #15]
    const uint8_t font_width = 6;
 80024cc:	2306      	movs	r3, #6
 80024ce:	73bb      	strb	r3, [r7, #14]
    const uint8_t font_height = 8;
 80024d0:	2308      	movs	r3, #8
 80024d2:	737b      	strb	r3, [r7, #13]

    if (y >= OLED_HEIGHT || (y + font_height - 1) < 0)
 80024d4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80024d8:	2b3f      	cmp	r3, #63	@ 0x3f
 80024da:	dc34      	bgt.n	8002546 <OLED_DisplayString+0x8e>
 80024dc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80024e0:	7b7b      	ldrb	r3, [r7, #13]
 80024e2:	4413      	add	r3, r2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	dd2e      	ble.n	8002546 <OLED_DisplayString+0x8e>
    {
        return;
    }

    int16_t current_char_x;
    while (str[j] != '\0')
 80024e8:	e026      	b.n	8002538 <OLED_DisplayString+0x80>
    {
        current_char_x = x + (j * font_width);
 80024ea:	7bfb      	ldrb	r3, [r7, #15]
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	7bba      	ldrb	r2, [r7, #14]
 80024f0:	b292      	uxth	r2, r2
 80024f2:	fb02 f303 	mul.w	r3, r2, r3
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	88fb      	ldrh	r3, [r7, #6]
 80024fa:	4413      	add	r3, r2
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	817b      	strh	r3, [r7, #10]
        if (current_char_x >= OLED_WIDTH)
 8002500:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002504:	2b7f      	cmp	r3, #127	@ 0x7f
 8002506:	dc20      	bgt.n	800254a <OLED_DisplayString+0x92>
        {
            break;
        }
        if ((current_char_x + font_width - 1) < 0)
 8002508:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800250c:	7bbb      	ldrb	r3, [r7, #14]
 800250e:	4413      	add	r3, r2
 8002510:	2b00      	cmp	r3, #0
 8002512:	dc03      	bgt.n	800251c <OLED_DisplayString+0x64>
        {
            j++;
 8002514:	7bfb      	ldrb	r3, [r7, #15]
 8002516:	3301      	adds	r3, #1
 8002518:	73fb      	strb	r3, [r7, #15]
            continue;
 800251a:	e00d      	b.n	8002538 <OLED_DisplayString+0x80>
        }
        OLED_DisplayChar(current_char_x, y, str[j]);
 800251c:	7bfb      	ldrb	r3, [r7, #15]
 800251e:	683a      	ldr	r2, [r7, #0]
 8002520:	4413      	add	r3, r2
 8002522:	781a      	ldrb	r2, [r3, #0]
 8002524:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002528:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff fe4d 	bl	80021cc <OLED_DisplayChar>
        j++;
 8002532:	7bfb      	ldrb	r3, [r7, #15]
 8002534:	3301      	adds	r3, #1
 8002536:	73fb      	strb	r3, [r7, #15]
    while (str[j] != '\0')
 8002538:	7bfb      	ldrb	r3, [r7, #15]
 800253a:	683a      	ldr	r2, [r7, #0]
 800253c:	4413      	add	r3, r2
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d1d2      	bne.n	80024ea <OLED_DisplayString+0x32>
 8002544:	e002      	b.n	800254c <OLED_DisplayString+0x94>
        return;
 8002546:	bf00      	nop
 8002548:	e000      	b.n	800254c <OLED_DisplayString+0x94>
            break;
 800254a:	bf00      	nop
    }
}
 800254c:	3710      	adds	r7, #16
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <OLED_DisplayStringInverted>:

void OLED_DisplayStringInverted(int16_t x, int16_t y, char *str, uint8_t inverted) //! UPDATEDISPLAY REQUIRED
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b086      	sub	sp, #24
 8002556:	af00      	add	r7, sp, #0
 8002558:	60ba      	str	r2, [r7, #8]
 800255a:	461a      	mov	r2, r3
 800255c:	4603      	mov	r3, r0
 800255e:	81fb      	strh	r3, [r7, #14]
 8002560:	460b      	mov	r3, r1
 8002562:	81bb      	strh	r3, [r7, #12]
 8002564:	4613      	mov	r3, r2
 8002566:	71fb      	strb	r3, [r7, #7]
    uint8_t j = 0;
 8002568:	2300      	movs	r3, #0
 800256a:	75fb      	strb	r3, [r7, #23]
    const uint8_t font_width = 6;
 800256c:	2306      	movs	r3, #6
 800256e:	75bb      	strb	r3, [r7, #22]
    const uint8_t font_height = 8;
 8002570:	2308      	movs	r3, #8
 8002572:	757b      	strb	r3, [r7, #21]

    if (y >= OLED_HEIGHT || (y + font_height - 1) < 0)
 8002574:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002578:	2b3f      	cmp	r3, #63	@ 0x3f
 800257a:	dc34      	bgt.n	80025e6 <OLED_DisplayStringInverted+0x94>
 800257c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002580:	7d7b      	ldrb	r3, [r7, #21]
 8002582:	4413      	add	r3, r2
 8002584:	2b00      	cmp	r3, #0
 8002586:	dd2e      	ble.n	80025e6 <OLED_DisplayStringInverted+0x94>
    {
        return;
    }

    int16_t current_char_x;
    while (str[j] != '\0')
 8002588:	e026      	b.n	80025d8 <OLED_DisplayStringInverted+0x86>
    {
        current_char_x = x + (j * font_width);
 800258a:	7dfb      	ldrb	r3, [r7, #23]
 800258c:	b29b      	uxth	r3, r3
 800258e:	7dba      	ldrb	r2, [r7, #22]
 8002590:	b292      	uxth	r2, r2
 8002592:	fb02 f303 	mul.w	r3, r2, r3
 8002596:	b29a      	uxth	r2, r3
 8002598:	89fb      	ldrh	r3, [r7, #14]
 800259a:	4413      	add	r3, r2
 800259c:	b29b      	uxth	r3, r3
 800259e:	827b      	strh	r3, [r7, #18]
        if (current_char_x >= OLED_WIDTH)
 80025a0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80025a4:	2b7f      	cmp	r3, #127	@ 0x7f
 80025a6:	dc20      	bgt.n	80025ea <OLED_DisplayStringInverted+0x98>
        {
            break;
        }
        if ((current_char_x + font_width - 1) < 0)
 80025a8:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80025ac:	7dbb      	ldrb	r3, [r7, #22]
 80025ae:	4413      	add	r3, r2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	dc03      	bgt.n	80025bc <OLED_DisplayStringInverted+0x6a>
        {
            j++;
 80025b4:	7dfb      	ldrb	r3, [r7, #23]
 80025b6:	3301      	adds	r3, #1
 80025b8:	75fb      	strb	r3, [r7, #23]
            continue;
 80025ba:	e00d      	b.n	80025d8 <OLED_DisplayStringInverted+0x86>
        }
        OLED_DisplayCharInverted(current_char_x, y, str[j], inverted);
 80025bc:	7dfb      	ldrb	r3, [r7, #23]
 80025be:	68ba      	ldr	r2, [r7, #8]
 80025c0:	4413      	add	r3, r2
 80025c2:	781a      	ldrb	r2, [r3, #0]
 80025c4:	79fb      	ldrb	r3, [r7, #7]
 80025c6:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 80025ca:	f9b7 0012 	ldrsh.w	r0, [r7, #18]
 80025ce:	f7ff fec3 	bl	8002358 <OLED_DisplayCharInverted>
        j++;
 80025d2:	7dfb      	ldrb	r3, [r7, #23]
 80025d4:	3301      	adds	r3, #1
 80025d6:	75fb      	strb	r3, [r7, #23]
    while (str[j] != '\0')
 80025d8:	7dfb      	ldrb	r3, [r7, #23]
 80025da:	68ba      	ldr	r2, [r7, #8]
 80025dc:	4413      	add	r3, r2
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d1d2      	bne.n	800258a <OLED_DisplayStringInverted+0x38>
 80025e4:	e002      	b.n	80025ec <OLED_DisplayStringInverted+0x9a>
        return;
 80025e6:	bf00      	nop
 80025e8:	e000      	b.n	80025ec <OLED_DisplayStringInverted+0x9a>
            break;
 80025ea:	bf00      	nop
    }
}
 80025ec:	3718      	adds	r7, #24
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
	...

080025f4 <System_UI_Loop>:
#define OLED_TITLE_End_Y 0
#define StartTweenTime 2500
#define TweenStyle EASE_INOUT_ELASTIC

void System_UI_Loop()
{
 80025f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025f6:	b08d      	sub	sp, #52	@ 0x34
 80025f8:	af04      	add	r7, sp, #16
    static bool isFirstRun = true;

    float x, y, x1, y1;
    if (!isFirstRun)
 80025fa:	4b9d      	ldr	r3, [pc, #628]	@ (8002870 <System_UI_Loop+0x27c>)
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	f083 0301 	eor.w	r3, r3, #1
 8002602:	b2db      	uxtb	r3, r3
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <System_UI_Loop+0x18>
        SystemGetsSignal();
 8002608:	f001 fee4 	bl	80043d4 <SystemGetsSignal>

    if (isFirstRun) //第一次启动调用，初始化部分
 800260c:	4b98      	ldr	r3, [pc, #608]	@ (8002870 <System_UI_Loop+0x27c>)
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	2b00      	cmp	r3, #0
 8002612:	f000 82b1 	beq.w	8002b78 <System_UI_Loop+0x584>
    {
#pragma region 标题栏
        OLED_MoveObject(&g_Title_AnimationManager, "TitleGames", (OLED_WIDTH - strlen("Epicful Games") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("Epicful Games") * 6), OLED_TITLE_End_Y, StartTweenTime, TweenStyle);
 8002616:	230f      	movs	r3, #15
 8002618:	9303      	str	r3, [sp, #12]
 800261a:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800261e:	9302      	str	r3, [sp, #8]
 8002620:	f04f 0300 	mov.w	r3, #0
 8002624:	9301      	str	r3, [sp, #4]
 8002626:	4b93      	ldr	r3, [pc, #588]	@ (8002874 <System_UI_Loop+0x280>)
 8002628:	9300      	str	r3, [sp, #0]
 800262a:	4b93      	ldr	r3, [pc, #588]	@ (8002878 <System_UI_Loop+0x284>)
 800262c:	4a91      	ldr	r2, [pc, #580]	@ (8002874 <System_UI_Loop+0x280>)
 800262e:	4993      	ldr	r1, [pc, #588]	@ (800287c <System_UI_Loop+0x288>)
 8002630:	4893      	ldr	r0, [pc, #588]	@ (8002880 <System_UI_Loop+0x28c>)
 8002632:	f004 f8a0 	bl	8006776 <OLED_MoveObject>
        OLED_MoveObject(&g_Title_AnimationManager, "TitleTools", (OLED_WIDTH - strlen("Tools For You") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("Tools For You") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 8002636:	230f      	movs	r3, #15
 8002638:	9303      	str	r3, [sp, #12]
 800263a:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800263e:	9302      	str	r3, [sp, #8]
 8002640:	4b8d      	ldr	r3, [pc, #564]	@ (8002878 <System_UI_Loop+0x284>)
 8002642:	9301      	str	r3, [sp, #4]
 8002644:	4b8b      	ldr	r3, [pc, #556]	@ (8002874 <System_UI_Loop+0x280>)
 8002646:	9300      	str	r3, [sp, #0]
 8002648:	4b8b      	ldr	r3, [pc, #556]	@ (8002878 <System_UI_Loop+0x284>)
 800264a:	4a8a      	ldr	r2, [pc, #552]	@ (8002874 <System_UI_Loop+0x280>)
 800264c:	498d      	ldr	r1, [pc, #564]	@ (8002884 <System_UI_Loop+0x290>)
 800264e:	488c      	ldr	r0, [pc, #560]	@ (8002880 <System_UI_Loop+0x28c>)
 8002650:	f004 f891 	bl	8006776 <OLED_MoveObject>
        OLED_MoveObject(&g_Title_AnimationManager, "TitleStatus", (OLED_WIDTH - strlen("Machine States") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("Machine States") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 8002654:	230f      	movs	r3, #15
 8002656:	9303      	str	r3, [sp, #12]
 8002658:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800265c:	9302      	str	r3, [sp, #8]
 800265e:	4b86      	ldr	r3, [pc, #536]	@ (8002878 <System_UI_Loop+0x284>)
 8002660:	9301      	str	r3, [sp, #4]
 8002662:	4b89      	ldr	r3, [pc, #548]	@ (8002888 <System_UI_Loop+0x294>)
 8002664:	9300      	str	r3, [sp, #0]
 8002666:	4b84      	ldr	r3, [pc, #528]	@ (8002878 <System_UI_Loop+0x284>)
 8002668:	4a87      	ldr	r2, [pc, #540]	@ (8002888 <System_UI_Loop+0x294>)
 800266a:	4988      	ldr	r1, [pc, #544]	@ (800288c <System_UI_Loop+0x298>)
 800266c:	4884      	ldr	r0, [pc, #528]	@ (8002880 <System_UI_Loop+0x28c>)
 800266e:	f004 f882 	bl	8006776 <OLED_MoveObject>
        OLED_MoveObject(&g_Title_AnimationManager, "TitleSettings", (OLED_WIDTH - strlen("STM Settings") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("STM Settings") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 8002672:	230f      	movs	r3, #15
 8002674:	9303      	str	r3, [sp, #12]
 8002676:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800267a:	9302      	str	r3, [sp, #8]
 800267c:	4b7e      	ldr	r3, [pc, #504]	@ (8002878 <System_UI_Loop+0x284>)
 800267e:	9301      	str	r3, [sp, #4]
 8002680:	4b83      	ldr	r3, [pc, #524]	@ (8002890 <System_UI_Loop+0x29c>)
 8002682:	9300      	str	r3, [sp, #0]
 8002684:	4b7c      	ldr	r3, [pc, #496]	@ (8002878 <System_UI_Loop+0x284>)
 8002686:	4a82      	ldr	r2, [pc, #520]	@ (8002890 <System_UI_Loop+0x29c>)
 8002688:	4982      	ldr	r1, [pc, #520]	@ (8002894 <System_UI_Loop+0x2a0>)
 800268a:	487d      	ldr	r0, [pc, #500]	@ (8002880 <System_UI_Loop+0x28c>)
 800268c:	f004 f873 	bl	8006776 <OLED_MoveObject>
        OLED_MoveObject(&g_Title_AnimationManager, "TitleAbout", (OLED_WIDTH - strlen("Developer") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("Developer") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 8002690:	230f      	movs	r3, #15
 8002692:	9303      	str	r3, [sp, #12]
 8002694:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8002698:	9302      	str	r3, [sp, #8]
 800269a:	4b77      	ldr	r3, [pc, #476]	@ (8002878 <System_UI_Loop+0x284>)
 800269c:	9301      	str	r3, [sp, #4]
 800269e:	4b7e      	ldr	r3, [pc, #504]	@ (8002898 <System_UI_Loop+0x2a4>)
 80026a0:	9300      	str	r3, [sp, #0]
 80026a2:	4b75      	ldr	r3, [pc, #468]	@ (8002878 <System_UI_Loop+0x284>)
 80026a4:	4a7c      	ldr	r2, [pc, #496]	@ (8002898 <System_UI_Loop+0x2a4>)
 80026a6:	497d      	ldr	r1, [pc, #500]	@ (800289c <System_UI_Loop+0x2a8>)
 80026a8:	4875      	ldr	r0, [pc, #468]	@ (8002880 <System_UI_Loop+0x28c>)
 80026aa:	f004 f864 	bl	8006776 <OLED_MoveObject>

        OLED_MoveObject(&g_Title_AnimationManager, "TitleSnake", (OLED_WIDTH - strlen("Greedy Snake") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("Greedy Snake") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 80026ae:	230f      	movs	r3, #15
 80026b0:	9303      	str	r3, [sp, #12]
 80026b2:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80026b6:	9302      	str	r3, [sp, #8]
 80026b8:	4b6f      	ldr	r3, [pc, #444]	@ (8002878 <System_UI_Loop+0x284>)
 80026ba:	9301      	str	r3, [sp, #4]
 80026bc:	4b74      	ldr	r3, [pc, #464]	@ (8002890 <System_UI_Loop+0x29c>)
 80026be:	9300      	str	r3, [sp, #0]
 80026c0:	4b6d      	ldr	r3, [pc, #436]	@ (8002878 <System_UI_Loop+0x284>)
 80026c2:	4a73      	ldr	r2, [pc, #460]	@ (8002890 <System_UI_Loop+0x29c>)
 80026c4:	4976      	ldr	r1, [pc, #472]	@ (80028a0 <System_UI_Loop+0x2ac>)
 80026c6:	486e      	ldr	r0, [pc, #440]	@ (8002880 <System_UI_Loop+0x28c>)
 80026c8:	f004 f855 	bl	8006776 <OLED_MoveObject>
        OLED_MoveObject(&g_Title_AnimationManager, "Title2048", (OLED_WIDTH - strlen("Here is 2048!") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("Here is 2048!") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 80026cc:	230f      	movs	r3, #15
 80026ce:	9303      	str	r3, [sp, #12]
 80026d0:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80026d4:	9302      	str	r3, [sp, #8]
 80026d6:	4b68      	ldr	r3, [pc, #416]	@ (8002878 <System_UI_Loop+0x284>)
 80026d8:	9301      	str	r3, [sp, #4]
 80026da:	4b66      	ldr	r3, [pc, #408]	@ (8002874 <System_UI_Loop+0x280>)
 80026dc:	9300      	str	r3, [sp, #0]
 80026de:	4b66      	ldr	r3, [pc, #408]	@ (8002878 <System_UI_Loop+0x284>)
 80026e0:	4a64      	ldr	r2, [pc, #400]	@ (8002874 <System_UI_Loop+0x280>)
 80026e2:	4970      	ldr	r1, [pc, #448]	@ (80028a4 <System_UI_Loop+0x2b0>)
 80026e4:	4866      	ldr	r0, [pc, #408]	@ (8002880 <System_UI_Loop+0x28c>)
 80026e6:	f004 f846 	bl	8006776 <OLED_MoveObject>
        OLED_MoveObject(&g_Title_AnimationManager, "TitleBack", (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 80026ea:	230f      	movs	r3, #15
 80026ec:	9303      	str	r3, [sp, #12]
 80026ee:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80026f2:	9302      	str	r3, [sp, #8]
 80026f4:	4b60      	ldr	r3, [pc, #384]	@ (8002878 <System_UI_Loop+0x284>)
 80026f6:	9301      	str	r3, [sp, #4]
 80026f8:	4b65      	ldr	r3, [pc, #404]	@ (8002890 <System_UI_Loop+0x29c>)
 80026fa:	9300      	str	r3, [sp, #0]
 80026fc:	4b5e      	ldr	r3, [pc, #376]	@ (8002878 <System_UI_Loop+0x284>)
 80026fe:	4a64      	ldr	r2, [pc, #400]	@ (8002890 <System_UI_Loop+0x29c>)
 8002700:	4969      	ldr	r1, [pc, #420]	@ (80028a8 <System_UI_Loop+0x2b4>)
 8002702:	485f      	ldr	r0, [pc, #380]	@ (8002880 <System_UI_Loop+0x28c>)
 8002704:	f004 f837 	bl	8006776 <OLED_MoveObject>

        OLED_MoveObject(&g_Title_AnimationManager, "BAD APPLE!", (OLED_WIDTH - strlen("BAD APPLE!") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("BAD APPLE!") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 8002708:	230f      	movs	r3, #15
 800270a:	9303      	str	r3, [sp, #12]
 800270c:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8002710:	9302      	str	r3, [sp, #8]
 8002712:	4b59      	ldr	r3, [pc, #356]	@ (8002878 <System_UI_Loop+0x284>)
 8002714:	9301      	str	r3, [sp, #4]
 8002716:	4b65      	ldr	r3, [pc, #404]	@ (80028ac <System_UI_Loop+0x2b8>)
 8002718:	9300      	str	r3, [sp, #0]
 800271a:	4b57      	ldr	r3, [pc, #348]	@ (8002878 <System_UI_Loop+0x284>)
 800271c:	4a63      	ldr	r2, [pc, #396]	@ (80028ac <System_UI_Loop+0x2b8>)
 800271e:	4964      	ldr	r1, [pc, #400]	@ (80028b0 <System_UI_Loop+0x2bc>)
 8002720:	4857      	ldr	r0, [pc, #348]	@ (8002880 <System_UI_Loop+0x28c>)
 8002722:	f004 f828 	bl	8006776 <OLED_MoveObject>

        OLED_MoveObject(&g_Title_AnimationManager, "Show FPS?", (OLED_WIDTH - strlen("Show FPS?") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("Show FPS?") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 8002726:	230f      	movs	r3, #15
 8002728:	9303      	str	r3, [sp, #12]
 800272a:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800272e:	9302      	str	r3, [sp, #8]
 8002730:	4b51      	ldr	r3, [pc, #324]	@ (8002878 <System_UI_Loop+0x284>)
 8002732:	9301      	str	r3, [sp, #4]
 8002734:	4b58      	ldr	r3, [pc, #352]	@ (8002898 <System_UI_Loop+0x2a4>)
 8002736:	9300      	str	r3, [sp, #0]
 8002738:	4b4f      	ldr	r3, [pc, #316]	@ (8002878 <System_UI_Loop+0x284>)
 800273a:	4a57      	ldr	r2, [pc, #348]	@ (8002898 <System_UI_Loop+0x2a4>)
 800273c:	495d      	ldr	r1, [pc, #372]	@ (80028b4 <System_UI_Loop+0x2c0>)
 800273e:	4850      	ldr	r0, [pc, #320]	@ (8002880 <System_UI_Loop+0x28c>)
 8002740:	f004 f819 	bl	8006776 <OLED_MoveObject>
        OLED_MoveObject(&g_Title_AnimationManager, "Adjust Lightness", (OLED_WIDTH - strlen("Adjust Lightness") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("Adjust Lightness") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 8002744:	230f      	movs	r3, #15
 8002746:	9303      	str	r3, [sp, #12]
 8002748:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800274c:	9302      	str	r3, [sp, #8]
 800274e:	4b4a      	ldr	r3, [pc, #296]	@ (8002878 <System_UI_Loop+0x284>)
 8002750:	9301      	str	r3, [sp, #4]
 8002752:	f04f 4384 	mov.w	r3, #1107296256	@ 0x42000000
 8002756:	9300      	str	r3, [sp, #0]
 8002758:	4b47      	ldr	r3, [pc, #284]	@ (8002878 <System_UI_Loop+0x284>)
 800275a:	f04f 4284 	mov.w	r2, #1107296256	@ 0x42000000
 800275e:	4956      	ldr	r1, [pc, #344]	@ (80028b8 <System_UI_Loop+0x2c4>)
 8002760:	4847      	ldr	r0, [pc, #284]	@ (8002880 <System_UI_Loop+0x28c>)
 8002762:	f004 f808 	bl	8006776 <OLED_MoveObject>

        OLED_MoveObject(&g_Title_AnimationManager, "UnikoZera!", (OLED_WIDTH - strlen("UnikoZera!") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("UnikoZera!") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 8002766:	230f      	movs	r3, #15
 8002768:	9303      	str	r3, [sp, #12]
 800276a:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800276e:	9302      	str	r3, [sp, #8]
 8002770:	4b41      	ldr	r3, [pc, #260]	@ (8002878 <System_UI_Loop+0x284>)
 8002772:	9301      	str	r3, [sp, #4]
 8002774:	4b4d      	ldr	r3, [pc, #308]	@ (80028ac <System_UI_Loop+0x2b8>)
 8002776:	9300      	str	r3, [sp, #0]
 8002778:	4b3f      	ldr	r3, [pc, #252]	@ (8002878 <System_UI_Loop+0x284>)
 800277a:	4a4c      	ldr	r2, [pc, #304]	@ (80028ac <System_UI_Loop+0x2b8>)
 800277c:	494f      	ldr	r1, [pc, #316]	@ (80028bc <System_UI_Loop+0x2c8>)
 800277e:	4840      	ldr	r0, [pc, #256]	@ (8002880 <System_UI_Loop+0x28c>)
 8002780:	f003 fff9 	bl	8006776 <OLED_MoveObject>
        OLED_MoveObject(&g_Title_AnimationManager, "https://github.com/UnikoZera", (OLED_WIDTH - strlen("https://github.com/UnikoZera") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("https://github.com/UnikoZera") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 8002784:	230f      	movs	r3, #15
 8002786:	9303      	str	r3, [sp, #12]
 8002788:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800278c:	9302      	str	r3, [sp, #8]
 800278e:	4b3a      	ldr	r3, [pc, #232]	@ (8002878 <System_UI_Loop+0x284>)
 8002790:	9301      	str	r3, [sp, #4]
 8002792:	f04f 439f 	mov.w	r3, #1333788672	@ 0x4f800000
 8002796:	9300      	str	r3, [sp, #0]
 8002798:	4b37      	ldr	r3, [pc, #220]	@ (8002878 <System_UI_Loop+0x284>)
 800279a:	f04f 429f 	mov.w	r2, #1333788672	@ 0x4f800000
 800279e:	4948      	ldr	r1, [pc, #288]	@ (80028c0 <System_UI_Loop+0x2cc>)
 80027a0:	4837      	ldr	r0, [pc, #220]	@ (8002880 <System_UI_Loop+0x28c>)
 80027a2:	f003 ffe8 	bl	8006776 <OLED_MoveObject>
        OLED_MoveObject(&g_Title_AnimationManager, "3864437775@qq.com", (OLED_WIDTH - strlen("3864437775@qq.com") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("3864437775@qq.com") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 80027a6:	230f      	movs	r3, #15
 80027a8:	9303      	str	r3, [sp, #12]
 80027aa:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80027ae:	9302      	str	r3, [sp, #8]
 80027b0:	4b31      	ldr	r3, [pc, #196]	@ (8002878 <System_UI_Loop+0x284>)
 80027b2:	9301      	str	r3, [sp, #4]
 80027b4:	4b43      	ldr	r3, [pc, #268]	@ (80028c4 <System_UI_Loop+0x2d0>)
 80027b6:	9300      	str	r3, [sp, #0]
 80027b8:	4b2f      	ldr	r3, [pc, #188]	@ (8002878 <System_UI_Loop+0x284>)
 80027ba:	4a42      	ldr	r2, [pc, #264]	@ (80028c4 <System_UI_Loop+0x2d0>)
 80027bc:	4942      	ldr	r1, [pc, #264]	@ (80028c8 <System_UI_Loop+0x2d4>)
 80027be:	4830      	ldr	r0, [pc, #192]	@ (8002880 <System_UI_Loop+0x28c>)
 80027c0:	f003 ffd9 	bl	8006776 <OLED_MoveObject>
        OLED_MoveObject(&g_Title_AnimationManager, "https://space.bilibili.com/3546696818624992", (OLED_WIDTH - strlen("https://space.bilibili.com/3546696818624992") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("https://space.bilibili.com/3546696818624992") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 80027c4:	230f      	movs	r3, #15
 80027c6:	9303      	str	r3, [sp, #12]
 80027c8:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80027cc:	9302      	str	r3, [sp, #8]
 80027ce:	4b2a      	ldr	r3, [pc, #168]	@ (8002878 <System_UI_Loop+0x284>)
 80027d0:	9301      	str	r3, [sp, #4]
 80027d2:	4b3e      	ldr	r3, [pc, #248]	@ (80028cc <System_UI_Loop+0x2d8>)
 80027d4:	9300      	str	r3, [sp, #0]
 80027d6:	4b28      	ldr	r3, [pc, #160]	@ (8002878 <System_UI_Loop+0x284>)
 80027d8:	4a3c      	ldr	r2, [pc, #240]	@ (80028cc <System_UI_Loop+0x2d8>)
 80027da:	493d      	ldr	r1, [pc, #244]	@ (80028d0 <System_UI_Loop+0x2dc>)
 80027dc:	4828      	ldr	r0, [pc, #160]	@ (8002880 <System_UI_Loop+0x28c>)
 80027de:	f003 ffca 	bl	8006776 <OLED_MoveObject>
        OLED_MoveObject(&g_Title_AnimationManager, "Let's Visit in GITHUB!", (OLED_WIDTH - strlen("Let's Visit in GITHUB!") * 6), OLED_TITLE_Start_Y, (OLED_WIDTH - strlen("Let's Visit in GITHUB!") * 6), OLED_TITLE_Start_Y, StartTweenTime, TweenStyle);
 80027e2:	230f      	movs	r3, #15
 80027e4:	9303      	str	r3, [sp, #12]
 80027e6:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80027ea:	9302      	str	r3, [sp, #8]
 80027ec:	4b22      	ldr	r3, [pc, #136]	@ (8002878 <System_UI_Loop+0x284>)
 80027ee:	9301      	str	r3, [sp, #4]
 80027f0:	f04f 439f 	mov.w	r3, #1333788672	@ 0x4f800000
 80027f4:	9300      	str	r3, [sp, #0]
 80027f6:	4b20      	ldr	r3, [pc, #128]	@ (8002878 <System_UI_Loop+0x284>)
 80027f8:	f04f 429f 	mov.w	r2, #1333788672	@ 0x4f800000
 80027fc:	4935      	ldr	r1, [pc, #212]	@ (80028d4 <System_UI_Loop+0x2e0>)
 80027fe:	4820      	ldr	r0, [pc, #128]	@ (8002880 <System_UI_Loop+0x28c>)
 8002800:	f003 ffb9 	bl	8006776 <OLED_MoveObject>

#pragma endregion 标题栏

#pragma region 游戏栏
        OLED_MoveObject(&Games_AnimationManager, "Snake", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1, TweenStyle);
 8002804:	230f      	movs	r3, #15
 8002806:	9303      	str	r3, [sp, #12]
 8002808:	2301      	movs	r3, #1
 800280a:	9302      	str	r3, [sp, #8]
 800280c:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8002810:	9301      	str	r3, [sp, #4]
 8002812:	4b31      	ldr	r3, [pc, #196]	@ (80028d8 <System_UI_Loop+0x2e4>)
 8002814:	9300      	str	r3, [sp, #0]
 8002816:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 800281a:	4a2f      	ldr	r2, [pc, #188]	@ (80028d8 <System_UI_Loop+0x2e4>)
 800281c:	492f      	ldr	r1, [pc, #188]	@ (80028dc <System_UI_Loop+0x2e8>)
 800281e:	4830      	ldr	r0, [pc, #192]	@ (80028e0 <System_UI_Loop+0x2ec>)
 8002820:	f003 ffa9 	bl	8006776 <OLED_MoveObject>
        OLED_MoveObject(&Games_AnimationManager, "2048", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1, TweenStyle);
 8002824:	230f      	movs	r3, #15
 8002826:	9303      	str	r3, [sp, #12]
 8002828:	2301      	movs	r3, #1
 800282a:	9302      	str	r3, [sp, #8]
 800282c:	4b2d      	ldr	r3, [pc, #180]	@ (80028e4 <System_UI_Loop+0x2f0>)
 800282e:	9301      	str	r3, [sp, #4]
 8002830:	4b29      	ldr	r3, [pc, #164]	@ (80028d8 <System_UI_Loop+0x2e4>)
 8002832:	9300      	str	r3, [sp, #0]
 8002834:	4b2b      	ldr	r3, [pc, #172]	@ (80028e4 <System_UI_Loop+0x2f0>)
 8002836:	4a28      	ldr	r2, [pc, #160]	@ (80028d8 <System_UI_Loop+0x2e4>)
 8002838:	492b      	ldr	r1, [pc, #172]	@ (80028e8 <System_UI_Loop+0x2f4>)
 800283a:	4829      	ldr	r0, [pc, #164]	@ (80028e0 <System_UI_Loop+0x2ec>)
 800283c:	f003 ff9b 	bl	8006776 <OLED_MoveObject>
        OLED_MoveObject(&g_AnimationManager, "BackButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, 1, TweenStyle);
 8002840:	230f      	movs	r3, #15
 8002842:	9303      	str	r3, [sp, #12]
 8002844:	2301      	movs	r3, #1
 8002846:	9302      	str	r3, [sp, #8]
 8002848:	4b28      	ldr	r3, [pc, #160]	@ (80028ec <System_UI_Loop+0x2f8>)
 800284a:	9301      	str	r3, [sp, #4]
 800284c:	4b22      	ldr	r3, [pc, #136]	@ (80028d8 <System_UI_Loop+0x2e4>)
 800284e:	9300      	str	r3, [sp, #0]
 8002850:	4b26      	ldr	r3, [pc, #152]	@ (80028ec <System_UI_Loop+0x2f8>)
 8002852:	4a21      	ldr	r2, [pc, #132]	@ (80028d8 <System_UI_Loop+0x2e4>)
 8002854:	4926      	ldr	r1, [pc, #152]	@ (80028f0 <System_UI_Loop+0x2fc>)
 8002856:	4827      	ldr	r0, [pc, #156]	@ (80028f4 <System_UI_Loop+0x300>)
 8002858:	f003 ff8d 	bl	8006776 <OLED_MoveObject>
#pragma endregion 游戏栏

#pragma region 工具栏
        OLED_MoveObject(&Tools_AnimationManager, "VideoPlayer", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1, TweenStyle);
 800285c:	230f      	movs	r3, #15
 800285e:	9303      	str	r3, [sp, #12]
 8002860:	2301      	movs	r3, #1
 8002862:	9302      	str	r3, [sp, #8]
 8002864:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8002868:	9301      	str	r3, [sp, #4]
 800286a:	4b1b      	ldr	r3, [pc, #108]	@ (80028d8 <System_UI_Loop+0x2e4>)
 800286c:	9300      	str	r3, [sp, #0]
 800286e:	e043      	b.n	80028f8 <System_UI_Loop+0x304>
 8002870:	20000003 	.word	0x20000003
 8002874:	42480000 	.word	0x42480000
 8002878:	c1200000 	.word	0xc1200000
 800287c:	0800c820 	.word	0x0800c820
 8002880:	200032cc 	.word	0x200032cc
 8002884:	0800c82c 	.word	0x0800c82c
 8002888:	42300000 	.word	0x42300000
 800288c:	0800c838 	.word	0x0800c838
 8002890:	42600000 	.word	0x42600000
 8002894:	0800c844 	.word	0x0800c844
 8002898:	42940000 	.word	0x42940000
 800289c:	0800c854 	.word	0x0800c854
 80028a0:	0800c860 	.word	0x0800c860
 80028a4:	0800c86c 	.word	0x0800c86c
 80028a8:	0800c878 	.word	0x0800c878
 80028ac:	42880000 	.word	0x42880000
 80028b0:	0800c884 	.word	0x0800c884
 80028b4:	0800c890 	.word	0x0800c890
 80028b8:	0800c89c 	.word	0x0800c89c
 80028bc:	0800c8b0 	.word	0x0800c8b0
 80028c0:	0800c8bc 	.word	0x0800c8bc
 80028c4:	41d00000 	.word	0x41d00000
 80028c8:	0800c8dc 	.word	0x0800c8dc
 80028cc:	4f7fffff 	.word	0x4f7fffff
 80028d0:	0800c8f0 	.word	0x0800c8f0
 80028d4:	0800c91c 	.word	0x0800c91c
 80028d8:	c2b40000 	.word	0xc2b40000
 80028dc:	0800c934 	.word	0x0800c934
 80028e0:	20001508 	.word	0x20001508
 80028e4:	41e80000 	.word	0x41e80000
 80028e8:	0800c93c 	.word	0x0800c93c
 80028ec:	42280000 	.word	0x42280000
 80028f0:	0800c944 	.word	0x0800c944
 80028f4:	200038c0 	.word	0x200038c0
 80028f8:	4baa      	ldr	r3, [pc, #680]	@ (8002ba4 <System_UI_Loop+0x5b0>)
 80028fa:	4aab      	ldr	r2, [pc, #684]	@ (8002ba8 <System_UI_Loop+0x5b4>)
 80028fc:	49ab      	ldr	r1, [pc, #684]	@ (8002bac <System_UI_Loop+0x5b8>)
 80028fe:	48ac      	ldr	r0, [pc, #688]	@ (8002bb0 <System_UI_Loop+0x5bc>)
 8002900:	f003 ff39 	bl	8006776 <OLED_MoveObject>

#pragma endregion 工具栏

#pragma region 状态栏 //这里我想做成一个界面就好,不要选项
        OLED_MoveObject(&Status_AnimationManager, "RunningTime", 0, -10, 0, -10, 1, TweenStyle);
 8002904:	230f      	movs	r3, #15
 8002906:	9303      	str	r3, [sp, #12]
 8002908:	2301      	movs	r3, #1
 800290a:	9302      	str	r3, [sp, #8]
 800290c:	4ba9      	ldr	r3, [pc, #676]	@ (8002bb4 <System_UI_Loop+0x5c0>)
 800290e:	9301      	str	r3, [sp, #4]
 8002910:	f04f 0300 	mov.w	r3, #0
 8002914:	9300      	str	r3, [sp, #0]
 8002916:	4ba7      	ldr	r3, [pc, #668]	@ (8002bb4 <System_UI_Loop+0x5c0>)
 8002918:	f04f 0200 	mov.w	r2, #0
 800291c:	49a6      	ldr	r1, [pc, #664]	@ (8002bb8 <System_UI_Loop+0x5c4>)
 800291e:	48a7      	ldr	r0, [pc, #668]	@ (8002bbc <System_UI_Loop+0x5c8>)
 8002920:	f003 ff29 	bl	8006776 <OLED_MoveObject>
        OLED_MoveObject(&Status_AnimationManager, "Status", 0, OLED_HEIGHT, 0, OLED_HEIGHT, 1, TweenStyle);
 8002924:	230f      	movs	r3, #15
 8002926:	9303      	str	r3, [sp, #12]
 8002928:	2301      	movs	r3, #1
 800292a:	9302      	str	r3, [sp, #8]
 800292c:	f04f 4385 	mov.w	r3, #1115684864	@ 0x42800000
 8002930:	9301      	str	r3, [sp, #4]
 8002932:	f04f 0300 	mov.w	r3, #0
 8002936:	9300      	str	r3, [sp, #0]
 8002938:	f04f 4385 	mov.w	r3, #1115684864	@ 0x42800000
 800293c:	f04f 0200 	mov.w	r2, #0
 8002940:	499f      	ldr	r1, [pc, #636]	@ (8002bc0 <System_UI_Loop+0x5cc>)
 8002942:	489e      	ldr	r0, [pc, #632]	@ (8002bbc <System_UI_Loop+0x5c8>)
 8002944:	f003 ff17 	bl	8006776 <OLED_MoveObject>
#pragma endregion 状态栏

#pragma region 设置栏
        OLED_MoveObject(&Settings_AnimationManager, "ShowFPS", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1, TweenStyle);
 8002948:	230f      	movs	r3, #15
 800294a:	9303      	str	r3, [sp, #12]
 800294c:	2301      	movs	r3, #1
 800294e:	9302      	str	r3, [sp, #8]
 8002950:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8002954:	9301      	str	r3, [sp, #4]
 8002956:	4b94      	ldr	r3, [pc, #592]	@ (8002ba8 <System_UI_Loop+0x5b4>)
 8002958:	9300      	str	r3, [sp, #0]
 800295a:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 800295e:	4a92      	ldr	r2, [pc, #584]	@ (8002ba8 <System_UI_Loop+0x5b4>)
 8002960:	4998      	ldr	r1, [pc, #608]	@ (8002bc4 <System_UI_Loop+0x5d0>)
 8002962:	4899      	ldr	r0, [pc, #612]	@ (8002bc8 <System_UI_Loop+0x5d4>)
 8002964:	f003 ff07 	bl	8006776 <OLED_MoveObject>
        OLED_MoveObject(&Settings_AnimationManager, "Lightness", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1, TweenStyle);
 8002968:	230f      	movs	r3, #15
 800296a:	9303      	str	r3, [sp, #12]
 800296c:	2301      	movs	r3, #1
 800296e:	9302      	str	r3, [sp, #8]
 8002970:	4b8c      	ldr	r3, [pc, #560]	@ (8002ba4 <System_UI_Loop+0x5b0>)
 8002972:	9301      	str	r3, [sp, #4]
 8002974:	4b8c      	ldr	r3, [pc, #560]	@ (8002ba8 <System_UI_Loop+0x5b4>)
 8002976:	9300      	str	r3, [sp, #0]
 8002978:	4b8a      	ldr	r3, [pc, #552]	@ (8002ba4 <System_UI_Loop+0x5b0>)
 800297a:	4a8b      	ldr	r2, [pc, #556]	@ (8002ba8 <System_UI_Loop+0x5b4>)
 800297c:	4993      	ldr	r1, [pc, #588]	@ (8002bcc <System_UI_Loop+0x5d8>)
 800297e:	4892      	ldr	r0, [pc, #584]	@ (8002bc8 <System_UI_Loop+0x5d4>)
 8002980:	f003 fef9 	bl	8006776 <OLED_MoveObject>
#pragma endregion 设置栏

#pragma region 关于栏
        OLED_MoveObject(&About_AnimationManager, "Developer", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1, TweenStyle);
 8002984:	230f      	movs	r3, #15
 8002986:	9303      	str	r3, [sp, #12]
 8002988:	2301      	movs	r3, #1
 800298a:	9302      	str	r3, [sp, #8]
 800298c:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8002990:	9301      	str	r3, [sp, #4]
 8002992:	4b85      	ldr	r3, [pc, #532]	@ (8002ba8 <System_UI_Loop+0x5b4>)
 8002994:	9300      	str	r3, [sp, #0]
 8002996:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 800299a:	4a83      	ldr	r2, [pc, #524]	@ (8002ba8 <System_UI_Loop+0x5b4>)
 800299c:	498c      	ldr	r1, [pc, #560]	@ (8002bd0 <System_UI_Loop+0x5dc>)
 800299e:	488d      	ldr	r0, [pc, #564]	@ (8002bd4 <System_UI_Loop+0x5e0>)
 80029a0:	f003 fee9 	bl	8006776 <OLED_MoveObject>
        OLED_MoveObject(&About_AnimationManager, "Github", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1, TweenStyle);
 80029a4:	230f      	movs	r3, #15
 80029a6:	9303      	str	r3, [sp, #12]
 80029a8:	2301      	movs	r3, #1
 80029aa:	9302      	str	r3, [sp, #8]
 80029ac:	4b7d      	ldr	r3, [pc, #500]	@ (8002ba4 <System_UI_Loop+0x5b0>)
 80029ae:	9301      	str	r3, [sp, #4]
 80029b0:	4b7d      	ldr	r3, [pc, #500]	@ (8002ba8 <System_UI_Loop+0x5b4>)
 80029b2:	9300      	str	r3, [sp, #0]
 80029b4:	4b7b      	ldr	r3, [pc, #492]	@ (8002ba4 <System_UI_Loop+0x5b0>)
 80029b6:	4a7c      	ldr	r2, [pc, #496]	@ (8002ba8 <System_UI_Loop+0x5b4>)
 80029b8:	4987      	ldr	r1, [pc, #540]	@ (8002bd8 <System_UI_Loop+0x5e4>)
 80029ba:	4886      	ldr	r0, [pc, #536]	@ (8002bd4 <System_UI_Loop+0x5e0>)
 80029bc:	f003 fedb 	bl	8006776 <OLED_MoveObject>
        OLED_MoveObject(&About_AnimationManager, "Email", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, 1, TweenStyle);
 80029c0:	230f      	movs	r3, #15
 80029c2:	9303      	str	r3, [sp, #12]
 80029c4:	2301      	movs	r3, #1
 80029c6:	9302      	str	r3, [sp, #8]
 80029c8:	4b84      	ldr	r3, [pc, #528]	@ (8002bdc <System_UI_Loop+0x5e8>)
 80029ca:	9301      	str	r3, [sp, #4]
 80029cc:	4b76      	ldr	r3, [pc, #472]	@ (8002ba8 <System_UI_Loop+0x5b4>)
 80029ce:	9300      	str	r3, [sp, #0]
 80029d0:	4b82      	ldr	r3, [pc, #520]	@ (8002bdc <System_UI_Loop+0x5e8>)
 80029d2:	4a75      	ldr	r2, [pc, #468]	@ (8002ba8 <System_UI_Loop+0x5b4>)
 80029d4:	4982      	ldr	r1, [pc, #520]	@ (8002be0 <System_UI_Loop+0x5ec>)
 80029d6:	487f      	ldr	r0, [pc, #508]	@ (8002bd4 <System_UI_Loop+0x5e0>)
 80029d8:	f003 fecd 	bl	8006776 <OLED_MoveObject>
        OLED_MoveObject(&About_AnimationManager, "Donate", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 4, OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 4, 1, TweenStyle);
 80029dc:	230f      	movs	r3, #15
 80029de:	9303      	str	r3, [sp, #12]
 80029e0:	2301      	movs	r3, #1
 80029e2:	9302      	str	r3, [sp, #8]
 80029e4:	4b7f      	ldr	r3, [pc, #508]	@ (8002be4 <System_UI_Loop+0x5f0>)
 80029e6:	9301      	str	r3, [sp, #4]
 80029e8:	4b6f      	ldr	r3, [pc, #444]	@ (8002ba8 <System_UI_Loop+0x5b4>)
 80029ea:	9300      	str	r3, [sp, #0]
 80029ec:	4b7d      	ldr	r3, [pc, #500]	@ (8002be4 <System_UI_Loop+0x5f0>)
 80029ee:	4a6e      	ldr	r2, [pc, #440]	@ (8002ba8 <System_UI_Loop+0x5b4>)
 80029f0:	497d      	ldr	r1, [pc, #500]	@ (8002be8 <System_UI_Loop+0x5f4>)
 80029f2:	4878      	ldr	r0, [pc, #480]	@ (8002bd4 <System_UI_Loop+0x5e0>)
 80029f4:	f003 febf 	bl	8006776 <OLED_MoveObject>
        OLED_MoveObject(&About_AnimationManager, "More", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 5, OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 5, 1, TweenStyle);
 80029f8:	230f      	movs	r3, #15
 80029fa:	9303      	str	r3, [sp, #12]
 80029fc:	2301      	movs	r3, #1
 80029fe:	9302      	str	r3, [sp, #8]
 8002a00:	4b7a      	ldr	r3, [pc, #488]	@ (8002bec <System_UI_Loop+0x5f8>)
 8002a02:	9301      	str	r3, [sp, #4]
 8002a04:	4b68      	ldr	r3, [pc, #416]	@ (8002ba8 <System_UI_Loop+0x5b4>)
 8002a06:	9300      	str	r3, [sp, #0]
 8002a08:	4b78      	ldr	r3, [pc, #480]	@ (8002bec <System_UI_Loop+0x5f8>)
 8002a0a:	4a67      	ldr	r2, [pc, #412]	@ (8002ba8 <System_UI_Loop+0x5b4>)
 8002a0c:	4978      	ldr	r1, [pc, #480]	@ (8002bf0 <System_UI_Loop+0x5fc>)
 8002a0e:	4871      	ldr	r0, [pc, #452]	@ (8002bd4 <System_UI_Loop+0x5e0>)
 8002a10:	f003 feb1 	bl	8006776 <OLED_MoveObject>
#pragma endregion 关于栏

#pragma region 主菜单动画
        OLED_MoveObject(&g_AnimationManager, "TitleBGScale", 0, 8, strlen("Epicful Games") * 6 + 3, 8, StartTweenTime, EASE_INOUT_CUBIC);
 8002a14:	2306      	movs	r3, #6
 8002a16:	9303      	str	r3, [sp, #12]
 8002a18:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8002a1c:	9302      	str	r3, [sp, #8]
 8002a1e:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8002a22:	9301      	str	r3, [sp, #4]
 8002a24:	4b73      	ldr	r3, [pc, #460]	@ (8002bf4 <System_UI_Loop+0x600>)
 8002a26:	9300      	str	r3, [sp, #0]
 8002a28:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8002a2c:	f04f 0200 	mov.w	r2, #0
 8002a30:	4971      	ldr	r1, [pc, #452]	@ (8002bf8 <System_UI_Loop+0x604>)
 8002a32:	4872      	ldr	r0, [pc, #456]	@ (8002bfc <System_UI_Loop+0x608>)
 8002a34:	f003 fe9f 	bl	8006776 <OLED_MoveObject>
        OLED_MoveObject(&g_AnimationManager, "Cursor", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * menuSelection, OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * menuSelection, StartTweenTime, TweenStyle);
 8002a38:	4b71      	ldr	r3, [pc, #452]	@ (8002c00 <System_UI_Loop+0x60c>)
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	4613      	mov	r3, r2
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	4413      	add	r3, r2
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	4413      	add	r3, r2
 8002a48:	3303      	adds	r3, #3
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7fd fc4a 	bl	80002e4 <__aeabi_i2f>
 8002a50:	4604      	mov	r4, r0
 8002a52:	4b6b      	ldr	r3, [pc, #428]	@ (8002c00 <System_UI_Loop+0x60c>)
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	461a      	mov	r2, r3
 8002a58:	4613      	mov	r3, r2
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	4413      	add	r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	4413      	add	r3, r2
 8002a62:	3303      	adds	r3, #3
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7fd fc3d 	bl	80002e4 <__aeabi_i2f>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	220f      	movs	r2, #15
 8002a6e:	9203      	str	r2, [sp, #12]
 8002a70:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8002a74:	9202      	str	r2, [sp, #8]
 8002a76:	9301      	str	r3, [sp, #4]
 8002a78:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002a7c:	9300      	str	r3, [sp, #0]
 8002a7e:	4623      	mov	r3, r4
 8002a80:	4a49      	ldr	r2, [pc, #292]	@ (8002ba8 <System_UI_Loop+0x5b4>)
 8002a82:	4960      	ldr	r1, [pc, #384]	@ (8002c04 <System_UI_Loop+0x610>)
 8002a84:	485d      	ldr	r0, [pc, #372]	@ (8002bfc <System_UI_Loop+0x608>)
 8002a86:	f003 fe76 	bl	8006776 <OLED_MoveObject>
        OLED_MoveObject(&g_AnimationManager, "CursorScale", 0, 10, strlen("Games") * 6 + 3, 10, StartTweenTime, TweenStyle);
 8002a8a:	230f      	movs	r3, #15
 8002a8c:	9303      	str	r3, [sp, #12]
 8002a8e:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8002a92:	9302      	str	r3, [sp, #8]
 8002a94:	4b5c      	ldr	r3, [pc, #368]	@ (8002c08 <System_UI_Loop+0x614>)
 8002a96:	9301      	str	r3, [sp, #4]
 8002a98:	4b5c      	ldr	r3, [pc, #368]	@ (8002c0c <System_UI_Loop+0x618>)
 8002a9a:	9300      	str	r3, [sp, #0]
 8002a9c:	4b5a      	ldr	r3, [pc, #360]	@ (8002c08 <System_UI_Loop+0x614>)
 8002a9e:	f04f 0200 	mov.w	r2, #0
 8002aa2:	495b      	ldr	r1, [pc, #364]	@ (8002c10 <System_UI_Loop+0x61c>)
 8002aa4:	4855      	ldr	r0, [pc, #340]	@ (8002bfc <System_UI_Loop+0x608>)
 8002aa6:	f003 fe66 	bl	8006776 <OLED_MoveObject>
        OLED_MoveObject(&Menu_AnimationManager, "GamesButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, StartTweenTime, TweenStyle);
 8002aaa:	230f      	movs	r3, #15
 8002aac:	9303      	str	r3, [sp, #12]
 8002aae:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8002ab2:	9302      	str	r3, [sp, #8]
 8002ab4:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8002ab8:	9301      	str	r3, [sp, #4]
 8002aba:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002abe:	9300      	str	r3, [sp, #0]
 8002ac0:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8002ac4:	4a38      	ldr	r2, [pc, #224]	@ (8002ba8 <System_UI_Loop+0x5b4>)
 8002ac6:	4953      	ldr	r1, [pc, #332]	@ (8002c14 <System_UI_Loop+0x620>)
 8002ac8:	4853      	ldr	r0, [pc, #332]	@ (8002c18 <System_UI_Loop+0x624>)
 8002aca:	f003 fe54 	bl	8006776 <OLED_MoveObject>
        HAL_Delay(100);
 8002ace:	2064      	movs	r0, #100	@ 0x64
 8002ad0:	f004 fdb2 	bl	8007638 <HAL_Delay>
        OLED_MoveObject(&Menu_AnimationManager, "ToolsButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, StartTweenTime, TweenStyle);
 8002ad4:	230f      	movs	r3, #15
 8002ad6:	9303      	str	r3, [sp, #12]
 8002ad8:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8002adc:	9302      	str	r3, [sp, #8]
 8002ade:	4b31      	ldr	r3, [pc, #196]	@ (8002ba4 <System_UI_Loop+0x5b0>)
 8002ae0:	9301      	str	r3, [sp, #4]
 8002ae2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002ae6:	9300      	str	r3, [sp, #0]
 8002ae8:	4b2e      	ldr	r3, [pc, #184]	@ (8002ba4 <System_UI_Loop+0x5b0>)
 8002aea:	4a2f      	ldr	r2, [pc, #188]	@ (8002ba8 <System_UI_Loop+0x5b4>)
 8002aec:	494b      	ldr	r1, [pc, #300]	@ (8002c1c <System_UI_Loop+0x628>)
 8002aee:	484a      	ldr	r0, [pc, #296]	@ (8002c18 <System_UI_Loop+0x624>)
 8002af0:	f003 fe41 	bl	8006776 <OLED_MoveObject>
        HAL_Delay(100);
 8002af4:	2064      	movs	r0, #100	@ 0x64
 8002af6:	f004 fd9f 	bl	8007638 <HAL_Delay>
        OLED_MoveObject(&Menu_AnimationManager, "StatusButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, StartTweenTime, TweenStyle);
 8002afa:	230f      	movs	r3, #15
 8002afc:	9303      	str	r3, [sp, #12]
 8002afe:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8002b02:	9302      	str	r3, [sp, #8]
 8002b04:	4b35      	ldr	r3, [pc, #212]	@ (8002bdc <System_UI_Loop+0x5e8>)
 8002b06:	9301      	str	r3, [sp, #4]
 8002b08:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002b0c:	9300      	str	r3, [sp, #0]
 8002b0e:	4b33      	ldr	r3, [pc, #204]	@ (8002bdc <System_UI_Loop+0x5e8>)
 8002b10:	4a25      	ldr	r2, [pc, #148]	@ (8002ba8 <System_UI_Loop+0x5b4>)
 8002b12:	4943      	ldr	r1, [pc, #268]	@ (8002c20 <System_UI_Loop+0x62c>)
 8002b14:	4840      	ldr	r0, [pc, #256]	@ (8002c18 <System_UI_Loop+0x624>)
 8002b16:	f003 fe2e 	bl	8006776 <OLED_MoveObject>
        HAL_Delay(100);
 8002b1a:	2064      	movs	r0, #100	@ 0x64
 8002b1c:	f004 fd8c 	bl	8007638 <HAL_Delay>
        OLED_MoveObject(&Menu_AnimationManager, "SettingsButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 4, OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 4, StartTweenTime, TweenStyle);
 8002b20:	230f      	movs	r3, #15
 8002b22:	9303      	str	r3, [sp, #12]
 8002b24:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8002b28:	9302      	str	r3, [sp, #8]
 8002b2a:	4b2e      	ldr	r3, [pc, #184]	@ (8002be4 <System_UI_Loop+0x5f0>)
 8002b2c:	9301      	str	r3, [sp, #4]
 8002b2e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002b32:	9300      	str	r3, [sp, #0]
 8002b34:	4b2b      	ldr	r3, [pc, #172]	@ (8002be4 <System_UI_Loop+0x5f0>)
 8002b36:	4a1c      	ldr	r2, [pc, #112]	@ (8002ba8 <System_UI_Loop+0x5b4>)
 8002b38:	493a      	ldr	r1, [pc, #232]	@ (8002c24 <System_UI_Loop+0x630>)
 8002b3a:	4837      	ldr	r0, [pc, #220]	@ (8002c18 <System_UI_Loop+0x624>)
 8002b3c:	f003 fe1b 	bl	8006776 <OLED_MoveObject>
        HAL_Delay(100);
 8002b40:	2064      	movs	r0, #100	@ 0x64
 8002b42:	f004 fd79 	bl	8007638 <HAL_Delay>
        OLED_MoveObject(&Menu_AnimationManager, "AboutButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 5, OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 5, StartTweenTime, TweenStyle);
 8002b46:	230f      	movs	r3, #15
 8002b48:	9303      	str	r3, [sp, #12]
 8002b4a:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8002b4e:	9302      	str	r3, [sp, #8]
 8002b50:	4b26      	ldr	r3, [pc, #152]	@ (8002bec <System_UI_Loop+0x5f8>)
 8002b52:	9301      	str	r3, [sp, #4]
 8002b54:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002b58:	9300      	str	r3, [sp, #0]
 8002b5a:	4b24      	ldr	r3, [pc, #144]	@ (8002bec <System_UI_Loop+0x5f8>)
 8002b5c:	4a12      	ldr	r2, [pc, #72]	@ (8002ba8 <System_UI_Loop+0x5b4>)
 8002b5e:	4932      	ldr	r1, [pc, #200]	@ (8002c28 <System_UI_Loop+0x634>)
 8002b60:	482d      	ldr	r0, [pc, #180]	@ (8002c18 <System_UI_Loop+0x624>)
 8002b62:	f003 fe08 	bl	8006776 <OLED_MoveObject>
#pragma endregion 主菜单动画

        preMenuSelection = menuSelection;
 8002b66:	4b26      	ldr	r3, [pc, #152]	@ (8002c00 <System_UI_Loop+0x60c>)
 8002b68:	781a      	ldrb	r2, [r3, #0]
 8002b6a:	4b30      	ldr	r3, [pc, #192]	@ (8002c2c <System_UI_Loop+0x638>)
 8002b6c:	701a      	strb	r2, [r3, #0]
        isFirstRun = false;
 8002b6e:	4b30      	ldr	r3, [pc, #192]	@ (8002c30 <System_UI_Loop+0x63c>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	701a      	strb	r2, [r3, #0]
        OLED_UpdateDisplayVSync();
 8002b74:	f7ff f8b4 	bl	8001ce0 <OLED_UpdateDisplayVSync>
    }

#pragma region pager //翻页的函数

    if (menuRank == 1)
 8002b78:	4b2e      	ldr	r3, [pc, #184]	@ (8002c34 <System_UI_Loop+0x640>)
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	f040 80c5 	bne.w	8002d0c <System_UI_Loop+0x718>
    {
        OLED_DoTweenObject(&Menu_AnimationManager, "GamesButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (2 - menuSelection), 200, EASE_IN_CIRC);
 8002b82:	4b1f      	ldr	r3, [pc, #124]	@ (8002c00 <System_UI_Loop+0x60c>)
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	f1c3 0202 	rsb	r2, r3, #2
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	4413      	add	r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	4413      	add	r3, r2
 8002b94:	3303      	adds	r3, #3
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7fd fba4 	bl	80002e4 <__aeabi_i2f>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	220a      	movs	r2, #10
 8002ba0:	e04a      	b.n	8002c38 <System_UI_Loop+0x644>
 8002ba2:	bf00      	nop
 8002ba4:	41e80000 	.word	0x41e80000
 8002ba8:	c2b40000 	.word	0xc2b40000
 8002bac:	0800c950 	.word	0x0800c950
 8002bb0:	20001afc 	.word	0x20001afc
 8002bb4:	c1200000 	.word	0xc1200000
 8002bb8:	0800c95c 	.word	0x0800c95c
 8002bbc:	20002cd8 	.word	0x20002cd8
 8002bc0:	0800c968 	.word	0x0800c968
 8002bc4:	0800c970 	.word	0x0800c970
 8002bc8:	200020f0 	.word	0x200020f0
 8002bcc:	0800c978 	.word	0x0800c978
 8002bd0:	0800c984 	.word	0x0800c984
 8002bd4:	200026e4 	.word	0x200026e4
 8002bd8:	0800c990 	.word	0x0800c990
 8002bdc:	42280000 	.word	0x42280000
 8002be0:	0800c998 	.word	0x0800c998
 8002be4:	425c0000 	.word	0x425c0000
 8002be8:	0800c9a0 	.word	0x0800c9a0
 8002bec:	42880000 	.word	0x42880000
 8002bf0:	0800c9a8 	.word	0x0800c9a8
 8002bf4:	42a20000 	.word	0x42a20000
 8002bf8:	0800c9b0 	.word	0x0800c9b0
 8002bfc:	200038c0 	.word	0x200038c0
 8002c00:	20000002 	.word	0x20000002
 8002c04:	0800c9c0 	.word	0x0800c9c0
 8002c08:	41200000 	.word	0x41200000
 8002c0c:	42040000 	.word	0x42040000
 8002c10:	0800c9c8 	.word	0x0800c9c8
 8002c14:	0800c9d4 	.word	0x0800c9d4
 8002c18:	20000f14 	.word	0x20000f14
 8002c1c:	0800c9e0 	.word	0x0800c9e0
 8002c20:	0800c9ec 	.word	0x0800c9ec
 8002c24:	0800c9fc 	.word	0x0800c9fc
 8002c28:	0800ca0c 	.word	0x0800ca0c
 8002c2c:	20000b0a 	.word	0x20000b0a
 8002c30:	20000003 	.word	0x20000003
 8002c34:	20000001 	.word	0x20000001
 8002c38:	9201      	str	r2, [sp, #4]
 8002c3a:	22c8      	movs	r2, #200	@ 0xc8
 8002c3c:	9200      	str	r2, [sp, #0]
 8002c3e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002c42:	4977      	ldr	r1, [pc, #476]	@ (8002e20 <System_UI_Loop+0x82c>)
 8002c44:	4877      	ldr	r0, [pc, #476]	@ (8002e24 <System_UI_Loop+0x830>)
 8002c46:	f003 fe4d 	bl	80068e4 <OLED_DoTweenObject>
        OLED_DoTweenObject(&Menu_AnimationManager, "ToolsButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (3 - menuSelection), 200, EASE_IN_CIRC);
 8002c4a:	4b77      	ldr	r3, [pc, #476]	@ (8002e28 <System_UI_Loop+0x834>)
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	f1c3 0203 	rsb	r2, r3, #3
 8002c52:	4613      	mov	r3, r2
 8002c54:	005b      	lsls	r3, r3, #1
 8002c56:	4413      	add	r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	4413      	add	r3, r2
 8002c5c:	3303      	adds	r3, #3
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7fd fb40 	bl	80002e4 <__aeabi_i2f>
 8002c64:	4603      	mov	r3, r0
 8002c66:	220a      	movs	r2, #10
 8002c68:	9201      	str	r2, [sp, #4]
 8002c6a:	22c8      	movs	r2, #200	@ 0xc8
 8002c6c:	9200      	str	r2, [sp, #0]
 8002c6e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002c72:	496e      	ldr	r1, [pc, #440]	@ (8002e2c <System_UI_Loop+0x838>)
 8002c74:	486b      	ldr	r0, [pc, #428]	@ (8002e24 <System_UI_Loop+0x830>)
 8002c76:	f003 fe35 	bl	80068e4 <OLED_DoTweenObject>
        OLED_DoTweenObject(&Menu_AnimationManager, "StatusButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (4 - menuSelection), 200, EASE_IN_CIRC);
 8002c7a:	4b6b      	ldr	r3, [pc, #428]	@ (8002e28 <System_UI_Loop+0x834>)
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	f1c3 0204 	rsb	r2, r3, #4
 8002c82:	4613      	mov	r3, r2
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	4413      	add	r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	4413      	add	r3, r2
 8002c8c:	3303      	adds	r3, #3
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7fd fb28 	bl	80002e4 <__aeabi_i2f>
 8002c94:	4603      	mov	r3, r0
 8002c96:	220a      	movs	r2, #10
 8002c98:	9201      	str	r2, [sp, #4]
 8002c9a:	22c8      	movs	r2, #200	@ 0xc8
 8002c9c:	9200      	str	r2, [sp, #0]
 8002c9e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002ca2:	4963      	ldr	r1, [pc, #396]	@ (8002e30 <System_UI_Loop+0x83c>)
 8002ca4:	485f      	ldr	r0, [pc, #380]	@ (8002e24 <System_UI_Loop+0x830>)
 8002ca6:	f003 fe1d 	bl	80068e4 <OLED_DoTweenObject>
        OLED_DoTweenObject(&Menu_AnimationManager, "SettingsButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (5 - menuSelection), 200, EASE_IN_CIRC);
 8002caa:	4b5f      	ldr	r3, [pc, #380]	@ (8002e28 <System_UI_Loop+0x834>)
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	f1c3 0205 	rsb	r2, r3, #5
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	4413      	add	r3, r2
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	4413      	add	r3, r2
 8002cbc:	3303      	adds	r3, #3
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7fd fb10 	bl	80002e4 <__aeabi_i2f>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	220a      	movs	r2, #10
 8002cc8:	9201      	str	r2, [sp, #4]
 8002cca:	22c8      	movs	r2, #200	@ 0xc8
 8002ccc:	9200      	str	r2, [sp, #0]
 8002cce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002cd2:	4958      	ldr	r1, [pc, #352]	@ (8002e34 <System_UI_Loop+0x840>)
 8002cd4:	4853      	ldr	r0, [pc, #332]	@ (8002e24 <System_UI_Loop+0x830>)
 8002cd6:	f003 fe05 	bl	80068e4 <OLED_DoTweenObject>
        OLED_DoTweenObject(&Menu_AnimationManager, "AboutButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (6 - menuSelection), 200, EASE_IN_CIRC);
 8002cda:	4b53      	ldr	r3, [pc, #332]	@ (8002e28 <System_UI_Loop+0x834>)
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	f1c3 0206 	rsb	r2, r3, #6
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	4413      	add	r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	4413      	add	r3, r2
 8002cec:	3303      	adds	r3, #3
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7fd faf8 	bl	80002e4 <__aeabi_i2f>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	220a      	movs	r2, #10
 8002cf8:	9201      	str	r2, [sp, #4]
 8002cfa:	22c8      	movs	r2, #200	@ 0xc8
 8002cfc:	9200      	str	r2, [sp, #0]
 8002cfe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002d02:	494d      	ldr	r1, [pc, #308]	@ (8002e38 <System_UI_Loop+0x844>)
 8002d04:	4847      	ldr	r0, [pc, #284]	@ (8002e24 <System_UI_Loop+0x830>)
 8002d06:	f003 fded 	bl	80068e4 <OLED_DoTweenObject>
 8002d0a:	e14c      	b.n	8002fa6 <System_UI_Loop+0x9b2>
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_GAMES)
 8002d0c:	4b4b      	ldr	r3, [pc, #300]	@ (8002e3c <System_UI_Loop+0x848>)
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d14c      	bne.n	8002dae <System_UI_Loop+0x7ba>
 8002d14:	4b4a      	ldr	r3, [pc, #296]	@ (8002e40 <System_UI_Loop+0x84c>)
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	2b05      	cmp	r3, #5
 8002d1a:	d148      	bne.n	8002dae <System_UI_Loop+0x7ba>
    {
        OLED_DoTweenObject(&Games_AnimationManager, "Snake", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (2 - menuSelection), 200, EASE_IN_CIRC);
 8002d1c:	4b42      	ldr	r3, [pc, #264]	@ (8002e28 <System_UI_Loop+0x834>)
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	f1c3 0202 	rsb	r2, r3, #2
 8002d24:	4613      	mov	r3, r2
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	4413      	add	r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	4413      	add	r3, r2
 8002d2e:	3303      	adds	r3, #3
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7fd fad7 	bl	80002e4 <__aeabi_i2f>
 8002d36:	4603      	mov	r3, r0
 8002d38:	220a      	movs	r2, #10
 8002d3a:	9201      	str	r2, [sp, #4]
 8002d3c:	22c8      	movs	r2, #200	@ 0xc8
 8002d3e:	9200      	str	r2, [sp, #0]
 8002d40:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002d44:	493f      	ldr	r1, [pc, #252]	@ (8002e44 <System_UI_Loop+0x850>)
 8002d46:	4840      	ldr	r0, [pc, #256]	@ (8002e48 <System_UI_Loop+0x854>)
 8002d48:	f003 fdcc 	bl	80068e4 <OLED_DoTweenObject>
        OLED_DoTweenObject(&Games_AnimationManager, "2048", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (3 - menuSelection), 200, EASE_IN_CIRC);
 8002d4c:	4b36      	ldr	r3, [pc, #216]	@ (8002e28 <System_UI_Loop+0x834>)
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	f1c3 0203 	rsb	r2, r3, #3
 8002d54:	4613      	mov	r3, r2
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	4413      	add	r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	4413      	add	r3, r2
 8002d5e:	3303      	adds	r3, #3
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7fd fabf 	bl	80002e4 <__aeabi_i2f>
 8002d66:	4603      	mov	r3, r0
 8002d68:	220a      	movs	r2, #10
 8002d6a:	9201      	str	r2, [sp, #4]
 8002d6c:	22c8      	movs	r2, #200	@ 0xc8
 8002d6e:	9200      	str	r2, [sp, #0]
 8002d70:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002d74:	4935      	ldr	r1, [pc, #212]	@ (8002e4c <System_UI_Loop+0x858>)
 8002d76:	4834      	ldr	r0, [pc, #208]	@ (8002e48 <System_UI_Loop+0x854>)
 8002d78:	f003 fdb4 	bl	80068e4 <OLED_DoTweenObject>
        OLED_DoTweenObject(&g_AnimationManager, "BackButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (4 - menuSelection), 200, EASE_IN_CIRC);
 8002d7c:	4b2a      	ldr	r3, [pc, #168]	@ (8002e28 <System_UI_Loop+0x834>)
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	f1c3 0204 	rsb	r2, r3, #4
 8002d84:	4613      	mov	r3, r2
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	4413      	add	r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	4413      	add	r3, r2
 8002d8e:	3303      	adds	r3, #3
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7fd faa7 	bl	80002e4 <__aeabi_i2f>
 8002d96:	4603      	mov	r3, r0
 8002d98:	220a      	movs	r2, #10
 8002d9a:	9201      	str	r2, [sp, #4]
 8002d9c:	22c8      	movs	r2, #200	@ 0xc8
 8002d9e:	9200      	str	r2, [sp, #0]
 8002da0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002da4:	492a      	ldr	r1, [pc, #168]	@ (8002e50 <System_UI_Loop+0x85c>)
 8002da6:	482b      	ldr	r0, [pc, #172]	@ (8002e54 <System_UI_Loop+0x860>)
 8002da8:	f003 fd9c 	bl	80068e4 <OLED_DoTweenObject>
 8002dac:	e0fb      	b.n	8002fa6 <System_UI_Loop+0x9b2>
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_TOOLS)
 8002dae:	4b23      	ldr	r3, [pc, #140]	@ (8002e3c <System_UI_Loop+0x848>)
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d154      	bne.n	8002e60 <System_UI_Loop+0x86c>
 8002db6:	4b22      	ldr	r3, [pc, #136]	@ (8002e40 <System_UI_Loop+0x84c>)
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	2b04      	cmp	r3, #4
 8002dbc:	d150      	bne.n	8002e60 <System_UI_Loop+0x86c>
    {
        OLED_DoTweenObject(&Tools_AnimationManager, "VideoPlayer", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (2 - menuSelection), 200, EASE_IN_CIRC);
 8002dbe:	4b1a      	ldr	r3, [pc, #104]	@ (8002e28 <System_UI_Loop+0x834>)
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	f1c3 0202 	rsb	r2, r3, #2
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	4413      	add	r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	4413      	add	r3, r2
 8002dd0:	3303      	adds	r3, #3
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7fd fa86 	bl	80002e4 <__aeabi_i2f>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	220a      	movs	r2, #10
 8002ddc:	9201      	str	r2, [sp, #4]
 8002dde:	22c8      	movs	r2, #200	@ 0xc8
 8002de0:	9200      	str	r2, [sp, #0]
 8002de2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002de6:	491c      	ldr	r1, [pc, #112]	@ (8002e58 <System_UI_Loop+0x864>)
 8002de8:	481c      	ldr	r0, [pc, #112]	@ (8002e5c <System_UI_Loop+0x868>)
 8002dea:	f003 fd7b 	bl	80068e4 <OLED_DoTweenObject>
        OLED_DoTweenObject(&g_AnimationManager, "BackButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (3 - menuSelection), 200, EASE_IN_CIRC);
 8002dee:	4b0e      	ldr	r3, [pc, #56]	@ (8002e28 <System_UI_Loop+0x834>)
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	f1c3 0203 	rsb	r2, r3, #3
 8002df6:	4613      	mov	r3, r2
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	4413      	add	r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	4413      	add	r3, r2
 8002e00:	3303      	adds	r3, #3
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7fd fa6e 	bl	80002e4 <__aeabi_i2f>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	220a      	movs	r2, #10
 8002e0c:	9201      	str	r2, [sp, #4]
 8002e0e:	22c8      	movs	r2, #200	@ 0xc8
 8002e10:	9200      	str	r2, [sp, #0]
 8002e12:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002e16:	490e      	ldr	r1, [pc, #56]	@ (8002e50 <System_UI_Loop+0x85c>)
 8002e18:	480e      	ldr	r0, [pc, #56]	@ (8002e54 <System_UI_Loop+0x860>)
 8002e1a:	f003 fd63 	bl	80068e4 <OLED_DoTweenObject>
 8002e1e:	e0c2      	b.n	8002fa6 <System_UI_Loop+0x9b2>
 8002e20:	0800c9d4 	.word	0x0800c9d4
 8002e24:	20000f14 	.word	0x20000f14
 8002e28:	20000002 	.word	0x20000002
 8002e2c:	0800c9e0 	.word	0x0800c9e0
 8002e30:	0800c9ec 	.word	0x0800c9ec
 8002e34:	0800c9fc 	.word	0x0800c9fc
 8002e38:	0800ca0c 	.word	0x0800ca0c
 8002e3c:	20000001 	.word	0x20000001
 8002e40:	20000b09 	.word	0x20000b09
 8002e44:	0800c934 	.word	0x0800c934
 8002e48:	20001508 	.word	0x20001508
 8002e4c:	0800c93c 	.word	0x0800c93c
 8002e50:	0800c944 	.word	0x0800c944
 8002e54:	200038c0 	.word	0x200038c0
 8002e58:	0800c950 	.word	0x0800c950
 8002e5c:	20001afc 	.word	0x20001afc
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_SETTINGS)
 8002e60:	4bbc      	ldr	r3, [pc, #752]	@ (8003154 <System_UI_Loop+0xb60>)
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d104      	bne.n	8002e72 <System_UI_Loop+0x87e>
 8002e68:	4bbb      	ldr	r3, [pc, #748]	@ (8003158 <System_UI_Loop+0xb64>)
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	f000 809a 	beq.w	8002fa6 <System_UI_Loop+0x9b2>
    {
        /* code */
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_ABOUT)
 8002e72:	4bb8      	ldr	r3, [pc, #736]	@ (8003154 <System_UI_Loop+0xb60>)
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	f040 8095 	bne.w	8002fa6 <System_UI_Loop+0x9b2>
 8002e7c:	4bb6      	ldr	r3, [pc, #728]	@ (8003158 <System_UI_Loop+0xb64>)
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	2b03      	cmp	r3, #3
 8002e82:	f040 8090 	bne.w	8002fa6 <System_UI_Loop+0x9b2>
    {
        OLED_DoTweenObject(&About_AnimationManager, "Developer", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (2 - menuSelection), 200, EASE_IN_CIRC);
 8002e86:	4bb5      	ldr	r3, [pc, #724]	@ (800315c <System_UI_Loop+0xb68>)
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	f1c3 0202 	rsb	r2, r3, #2
 8002e8e:	4613      	mov	r3, r2
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	4413      	add	r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	4413      	add	r3, r2
 8002e98:	3303      	adds	r3, #3
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7fd fa22 	bl	80002e4 <__aeabi_i2f>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	220a      	movs	r2, #10
 8002ea4:	9201      	str	r2, [sp, #4]
 8002ea6:	22c8      	movs	r2, #200	@ 0xc8
 8002ea8:	9200      	str	r2, [sp, #0]
 8002eaa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002eae:	49ac      	ldr	r1, [pc, #688]	@ (8003160 <System_UI_Loop+0xb6c>)
 8002eb0:	48ac      	ldr	r0, [pc, #688]	@ (8003164 <System_UI_Loop+0xb70>)
 8002eb2:	f003 fd17 	bl	80068e4 <OLED_DoTweenObject>
        OLED_DoTweenObject(&About_AnimationManager, "Github", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (3 - menuSelection), 200, EASE_IN_CIRC);
 8002eb6:	4ba9      	ldr	r3, [pc, #676]	@ (800315c <System_UI_Loop+0xb68>)
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	f1c3 0203 	rsb	r2, r3, #3
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	4413      	add	r3, r2
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	4413      	add	r3, r2
 8002ec8:	3303      	adds	r3, #3
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7fd fa0a 	bl	80002e4 <__aeabi_i2f>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	220a      	movs	r2, #10
 8002ed4:	9201      	str	r2, [sp, #4]
 8002ed6:	22c8      	movs	r2, #200	@ 0xc8
 8002ed8:	9200      	str	r2, [sp, #0]
 8002eda:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002ede:	49a2      	ldr	r1, [pc, #648]	@ (8003168 <System_UI_Loop+0xb74>)
 8002ee0:	48a0      	ldr	r0, [pc, #640]	@ (8003164 <System_UI_Loop+0xb70>)
 8002ee2:	f003 fcff 	bl	80068e4 <OLED_DoTweenObject>
        OLED_DoTweenObject(&About_AnimationManager, "Email", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (4 - menuSelection), 200, EASE_IN_CIRC);
 8002ee6:	4b9d      	ldr	r3, [pc, #628]	@ (800315c <System_UI_Loop+0xb68>)
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	f1c3 0204 	rsb	r2, r3, #4
 8002eee:	4613      	mov	r3, r2
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	4413      	add	r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	4413      	add	r3, r2
 8002ef8:	3303      	adds	r3, #3
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7fd f9f2 	bl	80002e4 <__aeabi_i2f>
 8002f00:	4603      	mov	r3, r0
 8002f02:	220a      	movs	r2, #10
 8002f04:	9201      	str	r2, [sp, #4]
 8002f06:	22c8      	movs	r2, #200	@ 0xc8
 8002f08:	9200      	str	r2, [sp, #0]
 8002f0a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002f0e:	4997      	ldr	r1, [pc, #604]	@ (800316c <System_UI_Loop+0xb78>)
 8002f10:	4894      	ldr	r0, [pc, #592]	@ (8003164 <System_UI_Loop+0xb70>)
 8002f12:	f003 fce7 	bl	80068e4 <OLED_DoTweenObject>
        OLED_DoTweenObject(&About_AnimationManager, "Donate", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (5 - menuSelection), 200, EASE_IN_CIRC);
 8002f16:	4b91      	ldr	r3, [pc, #580]	@ (800315c <System_UI_Loop+0xb68>)
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	f1c3 0205 	rsb	r2, r3, #5
 8002f1e:	4613      	mov	r3, r2
 8002f20:	005b      	lsls	r3, r3, #1
 8002f22:	4413      	add	r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	4413      	add	r3, r2
 8002f28:	3303      	adds	r3, #3
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7fd f9da 	bl	80002e4 <__aeabi_i2f>
 8002f30:	4603      	mov	r3, r0
 8002f32:	220a      	movs	r2, #10
 8002f34:	9201      	str	r2, [sp, #4]
 8002f36:	22c8      	movs	r2, #200	@ 0xc8
 8002f38:	9200      	str	r2, [sp, #0]
 8002f3a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002f3e:	498c      	ldr	r1, [pc, #560]	@ (8003170 <System_UI_Loop+0xb7c>)
 8002f40:	4888      	ldr	r0, [pc, #544]	@ (8003164 <System_UI_Loop+0xb70>)
 8002f42:	f003 fccf 	bl	80068e4 <OLED_DoTweenObject>
        OLED_DoTweenObject(&About_AnimationManager, "More", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (6 - menuSelection), 200, EASE_IN_CIRC);
 8002f46:	4b85      	ldr	r3, [pc, #532]	@ (800315c <System_UI_Loop+0xb68>)
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	f1c3 0206 	rsb	r2, r3, #6
 8002f4e:	4613      	mov	r3, r2
 8002f50:	005b      	lsls	r3, r3, #1
 8002f52:	4413      	add	r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	4413      	add	r3, r2
 8002f58:	3303      	adds	r3, #3
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7fd f9c2 	bl	80002e4 <__aeabi_i2f>
 8002f60:	4603      	mov	r3, r0
 8002f62:	220a      	movs	r2, #10
 8002f64:	9201      	str	r2, [sp, #4]
 8002f66:	22c8      	movs	r2, #200	@ 0xc8
 8002f68:	9200      	str	r2, [sp, #0]
 8002f6a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002f6e:	4981      	ldr	r1, [pc, #516]	@ (8003174 <System_UI_Loop+0xb80>)
 8002f70:	487c      	ldr	r0, [pc, #496]	@ (8003164 <System_UI_Loop+0xb70>)
 8002f72:	f003 fcb7 	bl	80068e4 <OLED_DoTweenObject>
        OLED_DoTweenObject(&g_AnimationManager, "BackButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (7 - menuSelection), 200, EASE_IN_CIRC);
 8002f76:	4b79      	ldr	r3, [pc, #484]	@ (800315c <System_UI_Loop+0xb68>)
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	f1c3 0207 	rsb	r2, r3, #7
 8002f7e:	4613      	mov	r3, r2
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	4413      	add	r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	4413      	add	r3, r2
 8002f88:	3303      	adds	r3, #3
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7fd f9aa 	bl	80002e4 <__aeabi_i2f>
 8002f90:	4603      	mov	r3, r0
 8002f92:	220a      	movs	r2, #10
 8002f94:	9201      	str	r2, [sp, #4]
 8002f96:	22c8      	movs	r2, #200	@ 0xc8
 8002f98:	9200      	str	r2, [sp, #0]
 8002f9a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002f9e:	4976      	ldr	r1, [pc, #472]	@ (8003178 <System_UI_Loop+0xb84>)
 8002fa0:	4876      	ldr	r0, [pc, #472]	@ (800317c <System_UI_Loop+0xb88>)
 8002fa2:	f003 fc9f 	bl	80068e4 <OLED_DoTweenObject>

#pragma endregion pager

#pragma region DRAWER //画出你的UI

    OLED_GetObjectPosition(&Menu_AnimationManager, "SettingsButton", &x, &y);
 8002fa6:	f107 0318 	add.w	r3, r7, #24
 8002faa:	f107 021c 	add.w	r2, r7, #28
 8002fae:	4974      	ldr	r1, [pc, #464]	@ (8003180 <System_UI_Loop+0xb8c>)
 8002fb0:	4874      	ldr	r0, [pc, #464]	@ (8003184 <System_UI_Loop+0xb90>)
 8002fb2:	f003 fbbc 	bl	800672e <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Settings");
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f7fd fbc3 	bl	8000744 <__aeabi_f2iz>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	b21c      	sxth	r4, r3
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7fd fbbd 	bl	8000744 <__aeabi_f2iz>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	b21b      	sxth	r3, r3
 8002fce:	4a6e      	ldr	r2, [pc, #440]	@ (8003188 <System_UI_Loop+0xb94>)
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	4620      	mov	r0, r4
 8002fd4:	f7ff fa70 	bl	80024b8 <OLED_DisplayString>
    OLED_GetObjectPosition(&Menu_AnimationManager, "StatusButton", &x, &y);
 8002fd8:	f107 0318 	add.w	r3, r7, #24
 8002fdc:	f107 021c 	add.w	r2, r7, #28
 8002fe0:	496a      	ldr	r1, [pc, #424]	@ (800318c <System_UI_Loop+0xb98>)
 8002fe2:	4868      	ldr	r0, [pc, #416]	@ (8003184 <System_UI_Loop+0xb90>)
 8002fe4:	f003 fba3 	bl	800672e <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Status");
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7fd fbaa 	bl	8000744 <__aeabi_f2iz>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	b21c      	sxth	r4, r3
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7fd fba4 	bl	8000744 <__aeabi_f2iz>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	b21b      	sxth	r3, r3
 8003000:	4a63      	ldr	r2, [pc, #396]	@ (8003190 <System_UI_Loop+0xb9c>)
 8003002:	4619      	mov	r1, r3
 8003004:	4620      	mov	r0, r4
 8003006:	f7ff fa57 	bl	80024b8 <OLED_DisplayString>
    OLED_GetObjectPosition(&Menu_AnimationManager, "GamesButton", &x, &y);
 800300a:	f107 0318 	add.w	r3, r7, #24
 800300e:	f107 021c 	add.w	r2, r7, #28
 8003012:	4960      	ldr	r1, [pc, #384]	@ (8003194 <System_UI_Loop+0xba0>)
 8003014:	485b      	ldr	r0, [pc, #364]	@ (8003184 <System_UI_Loop+0xb90>)
 8003016:	f003 fb8a 	bl	800672e <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Games");
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	4618      	mov	r0, r3
 800301e:	f7fd fb91 	bl	8000744 <__aeabi_f2iz>
 8003022:	4603      	mov	r3, r0
 8003024:	b21c      	sxth	r4, r3
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	4618      	mov	r0, r3
 800302a:	f7fd fb8b 	bl	8000744 <__aeabi_f2iz>
 800302e:	4603      	mov	r3, r0
 8003030:	b21b      	sxth	r3, r3
 8003032:	4a59      	ldr	r2, [pc, #356]	@ (8003198 <System_UI_Loop+0xba4>)
 8003034:	4619      	mov	r1, r3
 8003036:	4620      	mov	r0, r4
 8003038:	f7ff fa3e 	bl	80024b8 <OLED_DisplayString>
    OLED_GetObjectPosition(&Menu_AnimationManager, "AboutButton", &x, &y);
 800303c:	f107 0318 	add.w	r3, r7, #24
 8003040:	f107 021c 	add.w	r2, r7, #28
 8003044:	4955      	ldr	r1, [pc, #340]	@ (800319c <System_UI_Loop+0xba8>)
 8003046:	484f      	ldr	r0, [pc, #316]	@ (8003184 <System_UI_Loop+0xb90>)
 8003048:	f003 fb71 	bl	800672e <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "About");
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	4618      	mov	r0, r3
 8003050:	f7fd fb78 	bl	8000744 <__aeabi_f2iz>
 8003054:	4603      	mov	r3, r0
 8003056:	b21c      	sxth	r4, r3
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	4618      	mov	r0, r3
 800305c:	f7fd fb72 	bl	8000744 <__aeabi_f2iz>
 8003060:	4603      	mov	r3, r0
 8003062:	b21b      	sxth	r3, r3
 8003064:	4a4e      	ldr	r2, [pc, #312]	@ (80031a0 <System_UI_Loop+0xbac>)
 8003066:	4619      	mov	r1, r3
 8003068:	4620      	mov	r0, r4
 800306a:	f7ff fa25 	bl	80024b8 <OLED_DisplayString>
    OLED_GetObjectPosition(&Menu_AnimationManager, "ToolsButton", &x, &y);
 800306e:	f107 0318 	add.w	r3, r7, #24
 8003072:	f107 021c 	add.w	r2, r7, #28
 8003076:	494b      	ldr	r1, [pc, #300]	@ (80031a4 <System_UI_Loop+0xbb0>)
 8003078:	4842      	ldr	r0, [pc, #264]	@ (8003184 <System_UI_Loop+0xb90>)
 800307a:	f003 fb58 	bl	800672e <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Tools");
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	4618      	mov	r0, r3
 8003082:	f7fd fb5f 	bl	8000744 <__aeabi_f2iz>
 8003086:	4603      	mov	r3, r0
 8003088:	b21c      	sxth	r4, r3
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	4618      	mov	r0, r3
 800308e:	f7fd fb59 	bl	8000744 <__aeabi_f2iz>
 8003092:	4603      	mov	r3, r0
 8003094:	b21b      	sxth	r3, r3
 8003096:	4a44      	ldr	r2, [pc, #272]	@ (80031a8 <System_UI_Loop+0xbb4>)
 8003098:	4619      	mov	r1, r3
 800309a:	4620      	mov	r0, r4
 800309c:	f7ff fa0c 	bl	80024b8 <OLED_DisplayString>
    OLED_GetObjectPosition(&Games_AnimationManager, "Snake", &x, &y);
 80030a0:	f107 0318 	add.w	r3, r7, #24
 80030a4:	f107 021c 	add.w	r2, r7, #28
 80030a8:	4940      	ldr	r1, [pc, #256]	@ (80031ac <System_UI_Loop+0xbb8>)
 80030aa:	4841      	ldr	r0, [pc, #260]	@ (80031b0 <System_UI_Loop+0xbbc>)
 80030ac:	f003 fb3f 	bl	800672e <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Snake");
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7fd fb46 	bl	8000744 <__aeabi_f2iz>
 80030b8:	4603      	mov	r3, r0
 80030ba:	b21c      	sxth	r4, r3
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	4618      	mov	r0, r3
 80030c0:	f7fd fb40 	bl	8000744 <__aeabi_f2iz>
 80030c4:	4603      	mov	r3, r0
 80030c6:	b21b      	sxth	r3, r3
 80030c8:	4a38      	ldr	r2, [pc, #224]	@ (80031ac <System_UI_Loop+0xbb8>)
 80030ca:	4619      	mov	r1, r3
 80030cc:	4620      	mov	r0, r4
 80030ce:	f7ff f9f3 	bl	80024b8 <OLED_DisplayString>
    OLED_GetObjectPosition(&Games_AnimationManager, "2048", &x, &y);
 80030d2:	f107 0318 	add.w	r3, r7, #24
 80030d6:	f107 021c 	add.w	r2, r7, #28
 80030da:	4936      	ldr	r1, [pc, #216]	@ (80031b4 <System_UI_Loop+0xbc0>)
 80030dc:	4834      	ldr	r0, [pc, #208]	@ (80031b0 <System_UI_Loop+0xbbc>)
 80030de:	f003 fb26 	bl	800672e <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "2048");
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7fd fb2d 	bl	8000744 <__aeabi_f2iz>
 80030ea:	4603      	mov	r3, r0
 80030ec:	b21c      	sxth	r4, r3
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7fd fb27 	bl	8000744 <__aeabi_f2iz>
 80030f6:	4603      	mov	r3, r0
 80030f8:	b21b      	sxth	r3, r3
 80030fa:	4a2e      	ldr	r2, [pc, #184]	@ (80031b4 <System_UI_Loop+0xbc0>)
 80030fc:	4619      	mov	r1, r3
 80030fe:	4620      	mov	r0, r4
 8003100:	f7ff f9da 	bl	80024b8 <OLED_DisplayString>
    OLED_GetObjectPosition(&g_AnimationManager, "BackButton", &x, &y);
 8003104:	f107 0318 	add.w	r3, r7, #24
 8003108:	f107 021c 	add.w	r2, r7, #28
 800310c:	491a      	ldr	r1, [pc, #104]	@ (8003178 <System_UI_Loop+0xb84>)
 800310e:	481b      	ldr	r0, [pc, #108]	@ (800317c <System_UI_Loop+0xb88>)
 8003110:	f003 fb0d 	bl	800672e <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Back");
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	4618      	mov	r0, r3
 8003118:	f7fd fb14 	bl	8000744 <__aeabi_f2iz>
 800311c:	4603      	mov	r3, r0
 800311e:	b21c      	sxth	r4, r3
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	4618      	mov	r0, r3
 8003124:	f7fd fb0e 	bl	8000744 <__aeabi_f2iz>
 8003128:	4603      	mov	r3, r0
 800312a:	b21b      	sxth	r3, r3
 800312c:	4a22      	ldr	r2, [pc, #136]	@ (80031b8 <System_UI_Loop+0xbc4>)
 800312e:	4619      	mov	r1, r3
 8003130:	4620      	mov	r0, r4
 8003132:	f7ff f9c1 	bl	80024b8 <OLED_DisplayString>

    OLED_GetObjectPosition(&g_Title_AnimationManager, "TitleGames", &x, &y);
 8003136:	f107 0318 	add.w	r3, r7, #24
 800313a:	f107 021c 	add.w	r2, r7, #28
 800313e:	491f      	ldr	r1, [pc, #124]	@ (80031bc <System_UI_Loop+0xbc8>)
 8003140:	481f      	ldr	r0, [pc, #124]	@ (80031c0 <System_UI_Loop+0xbcc>)
 8003142:	f003 faf4 	bl	800672e <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Epicful Games");
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	4618      	mov	r0, r3
 800314a:	f7fd fafb 	bl	8000744 <__aeabi_f2iz>
 800314e:	4603      	mov	r3, r0
 8003150:	e038      	b.n	80031c4 <System_UI_Loop+0xbd0>
 8003152:	bf00      	nop
 8003154:	20000001 	.word	0x20000001
 8003158:	20000b09 	.word	0x20000b09
 800315c:	20000002 	.word	0x20000002
 8003160:	0800c984 	.word	0x0800c984
 8003164:	200026e4 	.word	0x200026e4
 8003168:	0800c990 	.word	0x0800c990
 800316c:	0800c998 	.word	0x0800c998
 8003170:	0800c9a0 	.word	0x0800c9a0
 8003174:	0800c9a8 	.word	0x0800c9a8
 8003178:	0800c944 	.word	0x0800c944
 800317c:	200038c0 	.word	0x200038c0
 8003180:	0800c9fc 	.word	0x0800c9fc
 8003184:	20000f14 	.word	0x20000f14
 8003188:	0800ca18 	.word	0x0800ca18
 800318c:	0800c9ec 	.word	0x0800c9ec
 8003190:	0800c968 	.word	0x0800c968
 8003194:	0800c9d4 	.word	0x0800c9d4
 8003198:	0800ca24 	.word	0x0800ca24
 800319c:	0800ca0c 	.word	0x0800ca0c
 80031a0:	0800ca2c 	.word	0x0800ca2c
 80031a4:	0800c9e0 	.word	0x0800c9e0
 80031a8:	0800ca34 	.word	0x0800ca34
 80031ac:	0800c934 	.word	0x0800c934
 80031b0:	20001508 	.word	0x20001508
 80031b4:	0800c93c 	.word	0x0800c93c
 80031b8:	0800ca3c 	.word	0x0800ca3c
 80031bc:	0800c820 	.word	0x0800c820
 80031c0:	200032cc 	.word	0x200032cc
 80031c4:	b21c      	sxth	r4, r3
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7fd fabb 	bl	8000744 <__aeabi_f2iz>
 80031ce:	4603      	mov	r3, r0
 80031d0:	b21b      	sxth	r3, r3
 80031d2:	4abf      	ldr	r2, [pc, #764]	@ (80034d0 <System_UI_Loop+0xedc>)
 80031d4:	4619      	mov	r1, r3
 80031d6:	4620      	mov	r0, r4
 80031d8:	f7ff f96e 	bl	80024b8 <OLED_DisplayString>
    OLED_GetObjectPosition(&g_Title_AnimationManager, "TitleTools", &x, &y);
 80031dc:	f107 0318 	add.w	r3, r7, #24
 80031e0:	f107 021c 	add.w	r2, r7, #28
 80031e4:	49bb      	ldr	r1, [pc, #748]	@ (80034d4 <System_UI_Loop+0xee0>)
 80031e6:	48bc      	ldr	r0, [pc, #752]	@ (80034d8 <System_UI_Loop+0xee4>)
 80031e8:	f003 faa1 	bl	800672e <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Tools For You");
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7fd faa8 	bl	8000744 <__aeabi_f2iz>
 80031f4:	4603      	mov	r3, r0
 80031f6:	b21c      	sxth	r4, r3
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7fd faa2 	bl	8000744 <__aeabi_f2iz>
 8003200:	4603      	mov	r3, r0
 8003202:	b21b      	sxth	r3, r3
 8003204:	4ab5      	ldr	r2, [pc, #724]	@ (80034dc <System_UI_Loop+0xee8>)
 8003206:	4619      	mov	r1, r3
 8003208:	4620      	mov	r0, r4
 800320a:	f7ff f955 	bl	80024b8 <OLED_DisplayString>
    OLED_GetObjectPosition(&g_Title_AnimationManager, "TitleStatus", &x, &y);
 800320e:	f107 0318 	add.w	r3, r7, #24
 8003212:	f107 021c 	add.w	r2, r7, #28
 8003216:	49b2      	ldr	r1, [pc, #712]	@ (80034e0 <System_UI_Loop+0xeec>)
 8003218:	48af      	ldr	r0, [pc, #700]	@ (80034d8 <System_UI_Loop+0xee4>)
 800321a:	f003 fa88 	bl	800672e <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Machine States");
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	4618      	mov	r0, r3
 8003222:	f7fd fa8f 	bl	8000744 <__aeabi_f2iz>
 8003226:	4603      	mov	r3, r0
 8003228:	b21c      	sxth	r4, r3
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	4618      	mov	r0, r3
 800322e:	f7fd fa89 	bl	8000744 <__aeabi_f2iz>
 8003232:	4603      	mov	r3, r0
 8003234:	b21b      	sxth	r3, r3
 8003236:	4aab      	ldr	r2, [pc, #684]	@ (80034e4 <System_UI_Loop+0xef0>)
 8003238:	4619      	mov	r1, r3
 800323a:	4620      	mov	r0, r4
 800323c:	f7ff f93c 	bl	80024b8 <OLED_DisplayString>
    OLED_GetObjectPosition(&g_Title_AnimationManager, "TitleSettings", &x, &y);
 8003240:	f107 0318 	add.w	r3, r7, #24
 8003244:	f107 021c 	add.w	r2, r7, #28
 8003248:	49a7      	ldr	r1, [pc, #668]	@ (80034e8 <System_UI_Loop+0xef4>)
 800324a:	48a3      	ldr	r0, [pc, #652]	@ (80034d8 <System_UI_Loop+0xee4>)
 800324c:	f003 fa6f 	bl	800672e <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "STM Settings");
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	4618      	mov	r0, r3
 8003254:	f7fd fa76 	bl	8000744 <__aeabi_f2iz>
 8003258:	4603      	mov	r3, r0
 800325a:	b21c      	sxth	r4, r3
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	4618      	mov	r0, r3
 8003260:	f7fd fa70 	bl	8000744 <__aeabi_f2iz>
 8003264:	4603      	mov	r3, r0
 8003266:	b21b      	sxth	r3, r3
 8003268:	4aa0      	ldr	r2, [pc, #640]	@ (80034ec <System_UI_Loop+0xef8>)
 800326a:	4619      	mov	r1, r3
 800326c:	4620      	mov	r0, r4
 800326e:	f7ff f923 	bl	80024b8 <OLED_DisplayString>
    OLED_GetObjectPosition(&g_Title_AnimationManager, "TitleAbout", &x, &y);
 8003272:	f107 0318 	add.w	r3, r7, #24
 8003276:	f107 021c 	add.w	r2, r7, #28
 800327a:	499d      	ldr	r1, [pc, #628]	@ (80034f0 <System_UI_Loop+0xefc>)
 800327c:	4896      	ldr	r0, [pc, #600]	@ (80034d8 <System_UI_Loop+0xee4>)
 800327e:	f003 fa56 	bl	800672e <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Developer!");
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	4618      	mov	r0, r3
 8003286:	f7fd fa5d 	bl	8000744 <__aeabi_f2iz>
 800328a:	4603      	mov	r3, r0
 800328c:	b21c      	sxth	r4, r3
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	4618      	mov	r0, r3
 8003292:	f7fd fa57 	bl	8000744 <__aeabi_f2iz>
 8003296:	4603      	mov	r3, r0
 8003298:	b21b      	sxth	r3, r3
 800329a:	4a96      	ldr	r2, [pc, #600]	@ (80034f4 <System_UI_Loop+0xf00>)
 800329c:	4619      	mov	r1, r3
 800329e:	4620      	mov	r0, r4
 80032a0:	f7ff f90a 	bl	80024b8 <OLED_DisplayString>
    OLED_GetObjectPosition(&g_Title_AnimationManager, "TitleSnake", &x, &y);
 80032a4:	f107 0318 	add.w	r3, r7, #24
 80032a8:	f107 021c 	add.w	r2, r7, #28
 80032ac:	4992      	ldr	r1, [pc, #584]	@ (80034f8 <System_UI_Loop+0xf04>)
 80032ae:	488a      	ldr	r0, [pc, #552]	@ (80034d8 <System_UI_Loop+0xee4>)
 80032b0:	f003 fa3d 	bl	800672e <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Greedy Snake");
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7fd fa44 	bl	8000744 <__aeabi_f2iz>
 80032bc:	4603      	mov	r3, r0
 80032be:	b21c      	sxth	r4, r3
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7fd fa3e 	bl	8000744 <__aeabi_f2iz>
 80032c8:	4603      	mov	r3, r0
 80032ca:	b21b      	sxth	r3, r3
 80032cc:	4a8b      	ldr	r2, [pc, #556]	@ (80034fc <System_UI_Loop+0xf08>)
 80032ce:	4619      	mov	r1, r3
 80032d0:	4620      	mov	r0, r4
 80032d2:	f7ff f8f1 	bl	80024b8 <OLED_DisplayString>
    OLED_GetObjectPosition(&g_Title_AnimationManager, "Title2048", &x, &y);
 80032d6:	f107 0318 	add.w	r3, r7, #24
 80032da:	f107 021c 	add.w	r2, r7, #28
 80032de:	4988      	ldr	r1, [pc, #544]	@ (8003500 <System_UI_Loop+0xf0c>)
 80032e0:	487d      	ldr	r0, [pc, #500]	@ (80034d8 <System_UI_Loop+0xee4>)
 80032e2:	f003 fa24 	bl	800672e <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Here is 2048!");
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7fd fa2b 	bl	8000744 <__aeabi_f2iz>
 80032ee:	4603      	mov	r3, r0
 80032f0:	b21c      	sxth	r4, r3
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7fd fa25 	bl	8000744 <__aeabi_f2iz>
 80032fa:	4603      	mov	r3, r0
 80032fc:	b21b      	sxth	r3, r3
 80032fe:	4a81      	ldr	r2, [pc, #516]	@ (8003504 <System_UI_Loop+0xf10>)
 8003300:	4619      	mov	r1, r3
 8003302:	4620      	mov	r0, r4
 8003304:	f7ff f8d8 	bl	80024b8 <OLED_DisplayString>
    OLED_GetObjectPosition(&g_Title_AnimationManager, "TitleBack", &x, &y);
 8003308:	f107 0318 	add.w	r3, r7, #24
 800330c:	f107 021c 	add.w	r2, r7, #28
 8003310:	497d      	ldr	r1, [pc, #500]	@ (8003508 <System_UI_Loop+0xf14>)
 8003312:	4871      	ldr	r0, [pc, #452]	@ (80034d8 <System_UI_Loop+0xee4>)
 8003314:	f003 fa0b 	bl	800672e <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Back To Menu");
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	4618      	mov	r0, r3
 800331c:	f7fd fa12 	bl	8000744 <__aeabi_f2iz>
 8003320:	4603      	mov	r3, r0
 8003322:	b21c      	sxth	r4, r3
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	4618      	mov	r0, r3
 8003328:	f7fd fa0c 	bl	8000744 <__aeabi_f2iz>
 800332c:	4603      	mov	r3, r0
 800332e:	b21b      	sxth	r3, r3
 8003330:	4a76      	ldr	r2, [pc, #472]	@ (800350c <System_UI_Loop+0xf18>)
 8003332:	4619      	mov	r1, r3
 8003334:	4620      	mov	r0, r4
 8003336:	f7ff f8bf 	bl	80024b8 <OLED_DisplayString>
    OLED_GetObjectPosition(&g_Title_AnimationManager, "BAD APPLE!", &x, &y);
 800333a:	f107 0318 	add.w	r3, r7, #24
 800333e:	f107 021c 	add.w	r2, r7, #28
 8003342:	4973      	ldr	r1, [pc, #460]	@ (8003510 <System_UI_Loop+0xf1c>)
 8003344:	4864      	ldr	r0, [pc, #400]	@ (80034d8 <System_UI_Loop+0xee4>)
 8003346:	f003 f9f2 	bl	800672e <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "BAD APPLE!");
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	4618      	mov	r0, r3
 800334e:	f7fd f9f9 	bl	8000744 <__aeabi_f2iz>
 8003352:	4603      	mov	r3, r0
 8003354:	b21c      	sxth	r4, r3
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	4618      	mov	r0, r3
 800335a:	f7fd f9f3 	bl	8000744 <__aeabi_f2iz>
 800335e:	4603      	mov	r3, r0
 8003360:	b21b      	sxth	r3, r3
 8003362:	4a6b      	ldr	r2, [pc, #428]	@ (8003510 <System_UI_Loop+0xf1c>)
 8003364:	4619      	mov	r1, r3
 8003366:	4620      	mov	r0, r4
 8003368:	f7ff f8a6 	bl	80024b8 <OLED_DisplayString>
    OLED_GetObjectPosition(&g_Title_AnimationManager, "UnikoZera!", &x, &y);    
 800336c:	f107 0318 	add.w	r3, r7, #24
 8003370:	f107 021c 	add.w	r2, r7, #28
 8003374:	4967      	ldr	r1, [pc, #412]	@ (8003514 <System_UI_Loop+0xf20>)
 8003376:	4858      	ldr	r0, [pc, #352]	@ (80034d8 <System_UI_Loop+0xee4>)
 8003378:	f003 f9d9 	bl	800672e <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "UnikoZera!");
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	4618      	mov	r0, r3
 8003380:	f7fd f9e0 	bl	8000744 <__aeabi_f2iz>
 8003384:	4603      	mov	r3, r0
 8003386:	b21c      	sxth	r4, r3
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	4618      	mov	r0, r3
 800338c:	f7fd f9da 	bl	8000744 <__aeabi_f2iz>
 8003390:	4603      	mov	r3, r0
 8003392:	b21b      	sxth	r3, r3
 8003394:	4a5f      	ldr	r2, [pc, #380]	@ (8003514 <System_UI_Loop+0xf20>)
 8003396:	4619      	mov	r1, r3
 8003398:	4620      	mov	r0, r4
 800339a:	f7ff f88d 	bl	80024b8 <OLED_DisplayString>

    OLED_GetObjectPosition(&Tools_AnimationManager, "VideoPlayer", &x, &y);
 800339e:	f107 0318 	add.w	r3, r7, #24
 80033a2:	f107 021c 	add.w	r2, r7, #28
 80033a6:	495c      	ldr	r1, [pc, #368]	@ (8003518 <System_UI_Loop+0xf24>)
 80033a8:	485c      	ldr	r0, [pc, #368]	@ (800351c <System_UI_Loop+0xf28>)
 80033aa:	f003 f9c0 	bl	800672e <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Video");
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	4618      	mov	r0, r3
 80033b2:	f7fd f9c7 	bl	8000744 <__aeabi_f2iz>
 80033b6:	4603      	mov	r3, r0
 80033b8:	b21c      	sxth	r4, r3
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	4618      	mov	r0, r3
 80033be:	f7fd f9c1 	bl	8000744 <__aeabi_f2iz>
 80033c2:	4603      	mov	r3, r0
 80033c4:	b21b      	sxth	r3, r3
 80033c6:	4a56      	ldr	r2, [pc, #344]	@ (8003520 <System_UI_Loop+0xf2c>)
 80033c8:	4619      	mov	r1, r3
 80033ca:	4620      	mov	r0, r4
 80033cc:	f7ff f874 	bl	80024b8 <OLED_DisplayString>

    OLED_GetObjectPosition(&Status_AnimationManager, "RunningTime", &x, &y);
 80033d0:	f107 0318 	add.w	r3, r7, #24
 80033d4:	f107 021c 	add.w	r2, r7, #28
 80033d8:	4952      	ldr	r1, [pc, #328]	@ (8003524 <System_UI_Loop+0xf30>)
 80033da:	4853      	ldr	r0, [pc, #332]	@ (8003528 <System_UI_Loop+0xf34>)
 80033dc:	f003 f9a7 	bl	800672e <OLED_GetObjectPosition>
    unsigned char Timer[] = "00:00:00";
 80033e0:	4a52      	ldr	r2, [pc, #328]	@ (800352c <System_UI_Loop+0xf38>)
 80033e2:	1d3b      	adds	r3, r7, #4
 80033e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80033e6:	c303      	stmia	r3!, {r0, r1}
 80033e8:	701a      	strb	r2, [r3, #0]
    sprintf(Timer, "%02d:%02d:%02d", (HAL_GetTick() / 3600000) % 24, (HAL_GetTick() / 60000) % 60, (HAL_GetTick() / 1000) % 60);
 80033ea:	f004 f91b 	bl	8007624 <HAL_GetTick>
 80033ee:	4603      	mov	r3, r0
 80033f0:	4a4f      	ldr	r2, [pc, #316]	@ (8003530 <System_UI_Loop+0xf3c>)
 80033f2:	fba2 2303 	umull	r2, r3, r2, r3
 80033f6:	0d5a      	lsrs	r2, r3, #21
 80033f8:	4b4e      	ldr	r3, [pc, #312]	@ (8003534 <System_UI_Loop+0xf40>)
 80033fa:	fba3 1302 	umull	r1, r3, r3, r2
 80033fe:	091c      	lsrs	r4, r3, #4
 8003400:	4623      	mov	r3, r4
 8003402:	005b      	lsls	r3, r3, #1
 8003404:	4423      	add	r3, r4
 8003406:	00db      	lsls	r3, r3, #3
 8003408:	1ad4      	subs	r4, r2, r3
 800340a:	f004 f90b 	bl	8007624 <HAL_GetTick>
 800340e:	4603      	mov	r3, r0
 8003410:	4a49      	ldr	r2, [pc, #292]	@ (8003538 <System_UI_Loop+0xf44>)
 8003412:	fba2 2303 	umull	r2, r3, r2, r3
 8003416:	0b9a      	lsrs	r2, r3, #14
 8003418:	4b48      	ldr	r3, [pc, #288]	@ (800353c <System_UI_Loop+0xf48>)
 800341a:	fba3 1302 	umull	r1, r3, r3, r2
 800341e:	095d      	lsrs	r5, r3, #5
 8003420:	462b      	mov	r3, r5
 8003422:	011b      	lsls	r3, r3, #4
 8003424:	1b5b      	subs	r3, r3, r5
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	1ad5      	subs	r5, r2, r3
 800342a:	f004 f8fb 	bl	8007624 <HAL_GetTick>
 800342e:	4603      	mov	r3, r0
 8003430:	4a43      	ldr	r2, [pc, #268]	@ (8003540 <System_UI_Loop+0xf4c>)
 8003432:	fba2 2303 	umull	r2, r3, r2, r3
 8003436:	0999      	lsrs	r1, r3, #6
 8003438:	4b40      	ldr	r3, [pc, #256]	@ (800353c <System_UI_Loop+0xf48>)
 800343a:	fba3 2301 	umull	r2, r3, r3, r1
 800343e:	095a      	lsrs	r2, r3, #5
 8003440:	4613      	mov	r3, r2
 8003442:	011b      	lsls	r3, r3, #4
 8003444:	1a9b      	subs	r3, r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	1aca      	subs	r2, r1, r3
 800344a:	1d38      	adds	r0, r7, #4
 800344c:	9200      	str	r2, [sp, #0]
 800344e:	462b      	mov	r3, r5
 8003450:	4622      	mov	r2, r4
 8003452:	493c      	ldr	r1, [pc, #240]	@ (8003544 <System_UI_Loop+0xf50>)
 8003454:	f006 fe84 	bl	800a160 <siprintf>
    OLED_DisplayString(x, y, Timer);
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	4618      	mov	r0, r3
 800345c:	f7fd f972 	bl	8000744 <__aeabi_f2iz>
 8003460:	4603      	mov	r3, r0
 8003462:	b21c      	sxth	r4, r3
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	4618      	mov	r0, r3
 8003468:	f7fd f96c 	bl	8000744 <__aeabi_f2iz>
 800346c:	4603      	mov	r3, r0
 800346e:	b21b      	sxth	r3, r3
 8003470:	1d3a      	adds	r2, r7, #4
 8003472:	4619      	mov	r1, r3
 8003474:	4620      	mov	r0, r4
 8003476:	f7ff f81f 	bl	80024b8 <OLED_DisplayString>
    OLED_GetObjectPosition(&Status_AnimationManager, "Status", &x, &y);
 800347a:	f107 0318 	add.w	r3, r7, #24
 800347e:	f107 021c 	add.w	r2, r7, #28
 8003482:	4931      	ldr	r1, [pc, #196]	@ (8003548 <System_UI_Loop+0xf54>)
 8003484:	4828      	ldr	r0, [pc, #160]	@ (8003528 <System_UI_Loop+0xf34>)
 8003486:	f003 f952 	bl	800672e <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "MCU:STM32F103C8T6");
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	4618      	mov	r0, r3
 800348e:	f7fd f959 	bl	8000744 <__aeabi_f2iz>
 8003492:	4603      	mov	r3, r0
 8003494:	b21c      	sxth	r4, r3
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	4618      	mov	r0, r3
 800349a:	f7fd f953 	bl	8000744 <__aeabi_f2iz>
 800349e:	4603      	mov	r3, r0
 80034a0:	b21b      	sxth	r3, r3
 80034a2:	4a2a      	ldr	r2, [pc, #168]	@ (800354c <System_UI_Loop+0xf58>)
 80034a4:	4619      	mov	r1, r3
 80034a6:	4620      	mov	r0, r4
 80034a8:	f7ff f806 	bl	80024b8 <OLED_DisplayString>
    OLED_DisplayString(x, y + 9, "Core: Cortex-M3");
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7fd f948 	bl	8000744 <__aeabi_f2iz>
 80034b4:	4603      	mov	r3, r0
 80034b6:	b21c      	sxth	r4, r3
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	4925      	ldr	r1, [pc, #148]	@ (8003550 <System_UI_Loop+0xf5c>)
 80034bc:	4618      	mov	r0, r3
 80034be:	f7fc fe5d 	bl	800017c <__addsf3>
 80034c2:	4603      	mov	r3, r0
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7fd f93d 	bl	8000744 <__aeabi_f2iz>
 80034ca:	4603      	mov	r3, r0
 80034cc:	e042      	b.n	8003554 <System_UI_Loop+0xf60>
 80034ce:	bf00      	nop
 80034d0:	0800ca44 	.word	0x0800ca44
 80034d4:	0800c82c 	.word	0x0800c82c
 80034d8:	200032cc 	.word	0x200032cc
 80034dc:	0800ca54 	.word	0x0800ca54
 80034e0:	0800c838 	.word	0x0800c838
 80034e4:	0800ca64 	.word	0x0800ca64
 80034e8:	0800c844 	.word	0x0800c844
 80034ec:	0800ca74 	.word	0x0800ca74
 80034f0:	0800c854 	.word	0x0800c854
 80034f4:	0800ca84 	.word	0x0800ca84
 80034f8:	0800c860 	.word	0x0800c860
 80034fc:	0800ca90 	.word	0x0800ca90
 8003500:	0800c86c 	.word	0x0800c86c
 8003504:	0800caa0 	.word	0x0800caa0
 8003508:	0800c878 	.word	0x0800c878
 800350c:	0800cab0 	.word	0x0800cab0
 8003510:	0800c884 	.word	0x0800c884
 8003514:	0800c8b0 	.word	0x0800c8b0
 8003518:	0800c950 	.word	0x0800c950
 800351c:	20001afc 	.word	0x20001afc
 8003520:	0800cac0 	.word	0x0800cac0
 8003524:	0800c95c 	.word	0x0800c95c
 8003528:	20002cd8 	.word	0x20002cd8
 800352c:	0800cb1c 	.word	0x0800cb1c
 8003530:	95217cb1 	.word	0x95217cb1
 8003534:	aaaaaaab 	.word	0xaaaaaaab
 8003538:	45e7b273 	.word	0x45e7b273
 800353c:	88888889 	.word	0x88888889
 8003540:	10624dd3 	.word	0x10624dd3
 8003544:	0800cac8 	.word	0x0800cac8
 8003548:	0800c968 	.word	0x0800c968
 800354c:	0800cad8 	.word	0x0800cad8
 8003550:	41100000 	.word	0x41100000
 8003554:	b21b      	sxth	r3, r3
 8003556:	4a92      	ldr	r2, [pc, #584]	@ (80037a0 <System_UI_Loop+0x11ac>)
 8003558:	4619      	mov	r1, r3
 800355a:	4620      	mov	r0, r4
 800355c:	f7fe ffac 	bl	80024b8 <OLED_DisplayString>
    OLED_DisplayString(x, y + 18, "CrystalOS v1.0");
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	4618      	mov	r0, r3
 8003564:	f7fd f8ee 	bl	8000744 <__aeabi_f2iz>
 8003568:	4603      	mov	r3, r0
 800356a:	b21c      	sxth	r4, r3
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	498d      	ldr	r1, [pc, #564]	@ (80037a4 <System_UI_Loop+0x11b0>)
 8003570:	4618      	mov	r0, r3
 8003572:	f7fc fe03 	bl	800017c <__addsf3>
 8003576:	4603      	mov	r3, r0
 8003578:	4618      	mov	r0, r3
 800357a:	f7fd f8e3 	bl	8000744 <__aeabi_f2iz>
 800357e:	4603      	mov	r3, r0
 8003580:	b21b      	sxth	r3, r3
 8003582:	4a89      	ldr	r2, [pc, #548]	@ (80037a8 <System_UI_Loop+0x11b4>)
 8003584:	4619      	mov	r1, r3
 8003586:	4620      	mov	r0, r4
 8003588:	f7fe ff96 	bl	80024b8 <OLED_DisplayString>
    OLED_DisplayString(x, y + 27, "UnikoZera Made");
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	4618      	mov	r0, r3
 8003590:	f7fd f8d8 	bl	8000744 <__aeabi_f2iz>
 8003594:	4603      	mov	r3, r0
 8003596:	b21c      	sxth	r4, r3
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	4984      	ldr	r1, [pc, #528]	@ (80037ac <System_UI_Loop+0x11b8>)
 800359c:	4618      	mov	r0, r3
 800359e:	f7fc fded 	bl	800017c <__addsf3>
 80035a2:	4603      	mov	r3, r0
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7fd f8cd 	bl	8000744 <__aeabi_f2iz>
 80035aa:	4603      	mov	r3, r0
 80035ac:	b21b      	sxth	r3, r3
 80035ae:	4a80      	ldr	r2, [pc, #512]	@ (80037b0 <System_UI_Loop+0x11bc>)
 80035b0:	4619      	mov	r1, r3
 80035b2:	4620      	mov	r0, r4
 80035b4:	f7fe ff80 	bl	80024b8 <OLED_DisplayString>


    OLED_GetObjectPosition(&About_AnimationManager, "Developer", &x, &y);
 80035b8:	f107 0318 	add.w	r3, r7, #24
 80035bc:	f107 021c 	add.w	r2, r7, #28
 80035c0:	497c      	ldr	r1, [pc, #496]	@ (80037b4 <System_UI_Loop+0x11c0>)
 80035c2:	487d      	ldr	r0, [pc, #500]	@ (80037b8 <System_UI_Loop+0x11c4>)
 80035c4:	f003 f8b3 	bl	800672e <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Developer");
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7fd f8ba 	bl	8000744 <__aeabi_f2iz>
 80035d0:	4603      	mov	r3, r0
 80035d2:	b21c      	sxth	r4, r3
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7fd f8b4 	bl	8000744 <__aeabi_f2iz>
 80035dc:	4603      	mov	r3, r0
 80035de:	b21b      	sxth	r3, r3
 80035e0:	4a74      	ldr	r2, [pc, #464]	@ (80037b4 <System_UI_Loop+0x11c0>)
 80035e2:	4619      	mov	r1, r3
 80035e4:	4620      	mov	r0, r4
 80035e6:	f7fe ff67 	bl	80024b8 <OLED_DisplayString>
    OLED_GetObjectPosition(&About_AnimationManager, "Github", &x, &y);
 80035ea:	f107 0318 	add.w	r3, r7, #24
 80035ee:	f107 021c 	add.w	r2, r7, #28
 80035f2:	4972      	ldr	r1, [pc, #456]	@ (80037bc <System_UI_Loop+0x11c8>)
 80035f4:	4870      	ldr	r0, [pc, #448]	@ (80037b8 <System_UI_Loop+0x11c4>)
 80035f6:	f003 f89a 	bl	800672e <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Github");
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7fd f8a1 	bl	8000744 <__aeabi_f2iz>
 8003602:	4603      	mov	r3, r0
 8003604:	b21c      	sxth	r4, r3
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	4618      	mov	r0, r3
 800360a:	f7fd f89b 	bl	8000744 <__aeabi_f2iz>
 800360e:	4603      	mov	r3, r0
 8003610:	b21b      	sxth	r3, r3
 8003612:	4a6a      	ldr	r2, [pc, #424]	@ (80037bc <System_UI_Loop+0x11c8>)
 8003614:	4619      	mov	r1, r3
 8003616:	4620      	mov	r0, r4
 8003618:	f7fe ff4e 	bl	80024b8 <OLED_DisplayString>
    OLED_GetObjectPosition(&About_AnimationManager, "Email", &x, &y);
 800361c:	f107 0318 	add.w	r3, r7, #24
 8003620:	f107 021c 	add.w	r2, r7, #28
 8003624:	4966      	ldr	r1, [pc, #408]	@ (80037c0 <System_UI_Loop+0x11cc>)
 8003626:	4864      	ldr	r0, [pc, #400]	@ (80037b8 <System_UI_Loop+0x11c4>)
 8003628:	f003 f881 	bl	800672e <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Email");
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	4618      	mov	r0, r3
 8003630:	f7fd f888 	bl	8000744 <__aeabi_f2iz>
 8003634:	4603      	mov	r3, r0
 8003636:	b21c      	sxth	r4, r3
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	4618      	mov	r0, r3
 800363c:	f7fd f882 	bl	8000744 <__aeabi_f2iz>
 8003640:	4603      	mov	r3, r0
 8003642:	b21b      	sxth	r3, r3
 8003644:	4a5e      	ldr	r2, [pc, #376]	@ (80037c0 <System_UI_Loop+0x11cc>)
 8003646:	4619      	mov	r1, r3
 8003648:	4620      	mov	r0, r4
 800364a:	f7fe ff35 	bl	80024b8 <OLED_DisplayString>
    OLED_GetObjectPosition(&About_AnimationManager, "Donate", &x, &y);
 800364e:	f107 0318 	add.w	r3, r7, #24
 8003652:	f107 021c 	add.w	r2, r7, #28
 8003656:	495b      	ldr	r1, [pc, #364]	@ (80037c4 <System_UI_Loop+0x11d0>)
 8003658:	4857      	ldr	r0, [pc, #348]	@ (80037b8 <System_UI_Loop+0x11c4>)
 800365a:	f003 f868 	bl	800672e <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "Donate");
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	4618      	mov	r0, r3
 8003662:	f7fd f86f 	bl	8000744 <__aeabi_f2iz>
 8003666:	4603      	mov	r3, r0
 8003668:	b21c      	sxth	r4, r3
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	4618      	mov	r0, r3
 800366e:	f7fd f869 	bl	8000744 <__aeabi_f2iz>
 8003672:	4603      	mov	r3, r0
 8003674:	b21b      	sxth	r3, r3
 8003676:	4a53      	ldr	r2, [pc, #332]	@ (80037c4 <System_UI_Loop+0x11d0>)
 8003678:	4619      	mov	r1, r3
 800367a:	4620      	mov	r0, r4
 800367c:	f7fe ff1c 	bl	80024b8 <OLED_DisplayString>
    OLED_GetObjectPosition(&About_AnimationManager, "More", &x, &y);
 8003680:	f107 0318 	add.w	r3, r7, #24
 8003684:	f107 021c 	add.w	r2, r7, #28
 8003688:	494f      	ldr	r1, [pc, #316]	@ (80037c8 <System_UI_Loop+0x11d4>)
 800368a:	484b      	ldr	r0, [pc, #300]	@ (80037b8 <System_UI_Loop+0x11c4>)
 800368c:	f003 f84f 	bl	800672e <OLED_GetObjectPosition>
    OLED_DisplayString(x, y, "More");
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	4618      	mov	r0, r3
 8003694:	f7fd f856 	bl	8000744 <__aeabi_f2iz>
 8003698:	4603      	mov	r3, r0
 800369a:	b21c      	sxth	r4, r3
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	4618      	mov	r0, r3
 80036a0:	f7fd f850 	bl	8000744 <__aeabi_f2iz>
 80036a4:	4603      	mov	r3, r0
 80036a6:	b21b      	sxth	r3, r3
 80036a8:	4a47      	ldr	r2, [pc, #284]	@ (80037c8 <System_UI_Loop+0x11d4>)
 80036aa:	4619      	mov	r1, r3
 80036ac:	4620      	mov	r0, r4
 80036ae:	f7fe ff03 	bl	80024b8 <OLED_DisplayString>


    OLED_GetObjectPosition(&g_AnimationManager, "TitleBGScale", &x, &y);
 80036b2:	f107 0318 	add.w	r3, r7, #24
 80036b6:	f107 021c 	add.w	r2, r7, #28
 80036ba:	4944      	ldr	r1, [pc, #272]	@ (80037cc <System_UI_Loop+0x11d8>)
 80036bc:	4844      	ldr	r0, [pc, #272]	@ (80037d0 <System_UI_Loop+0x11dc>)
 80036be:	f003 f836 	bl	800672e <OLED_GetObjectPosition>
    OLED_InvertArea(OLED_WIDTH - x, 0, x, y);
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	4619      	mov	r1, r3
 80036c6:	f04f 4086 	mov.w	r0, #1124073472	@ 0x43000000
 80036ca:	f7fc fd55 	bl	8000178 <__aeabi_fsub>
 80036ce:	4603      	mov	r3, r0
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7fd f837 	bl	8000744 <__aeabi_f2iz>
 80036d6:	4603      	mov	r3, r0
 80036d8:	b21c      	sxth	r4, r3
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	4618      	mov	r0, r3
 80036de:	f7fd f857 	bl	8000790 <__aeabi_f2uiz>
 80036e2:	4603      	mov	r3, r0
 80036e4:	b2dd      	uxtb	r5, r3
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7fd f851 	bl	8000790 <__aeabi_f2uiz>
 80036ee:	4603      	mov	r3, r0
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	462a      	mov	r2, r5
 80036f4:	2100      	movs	r1, #0
 80036f6:	4620      	mov	r0, r4
 80036f8:	f7fe fcac 	bl	8002054 <OLED_InvertArea>

    OLED_GetObjectPosition(&g_AnimationManager, "Cursor", &x, &y);
 80036fc:	f107 0318 	add.w	r3, r7, #24
 8003700:	f107 021c 	add.w	r2, r7, #28
 8003704:	4933      	ldr	r1, [pc, #204]	@ (80037d4 <System_UI_Loop+0x11e0>)
 8003706:	4832      	ldr	r0, [pc, #200]	@ (80037d0 <System_UI_Loop+0x11dc>)
 8003708:	f003 f811 	bl	800672e <OLED_GetObjectPosition>
    OLED_GetObjectPosition(&g_AnimationManager, "CursorScale", &x1, &y1);
 800370c:	f107 0310 	add.w	r3, r7, #16
 8003710:	f107 0214 	add.w	r2, r7, #20
 8003714:	4930      	ldr	r1, [pc, #192]	@ (80037d8 <System_UI_Loop+0x11e4>)
 8003716:	482e      	ldr	r0, [pc, #184]	@ (80037d0 <System_UI_Loop+0x11dc>)
 8003718:	f003 f809 	bl	800672e <OLED_GetObjectPosition>
    OLED_InvertArea(x - 2, y - 2, x1, y1); // 绘制光标
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8003722:	4618      	mov	r0, r3
 8003724:	f7fc fd28 	bl	8000178 <__aeabi_fsub>
 8003728:	4603      	mov	r3, r0
 800372a:	4618      	mov	r0, r3
 800372c:	f7fd f80a 	bl	8000744 <__aeabi_f2iz>
 8003730:	4603      	mov	r3, r0
 8003732:	b21c      	sxth	r4, r3
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800373a:	4618      	mov	r0, r3
 800373c:	f7fc fd1c 	bl	8000178 <__aeabi_fsub>
 8003740:	4603      	mov	r3, r0
 8003742:	4618      	mov	r0, r3
 8003744:	f7fc fffe 	bl	8000744 <__aeabi_f2iz>
 8003748:	4603      	mov	r3, r0
 800374a:	b21d      	sxth	r5, r3
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	4618      	mov	r0, r3
 8003750:	f7fd f81e 	bl	8000790 <__aeabi_f2uiz>
 8003754:	4603      	mov	r3, r0
 8003756:	b2de      	uxtb	r6, r3
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	4618      	mov	r0, r3
 800375c:	f7fd f818 	bl	8000790 <__aeabi_f2uiz>
 8003760:	4603      	mov	r3, r0
 8003762:	b2db      	uxtb	r3, r3
 8003764:	4632      	mov	r2, r6
 8003766:	4629      	mov	r1, r5
 8003768:	4620      	mov	r0, r4
 800376a:	f7fe fc73 	bl	8002054 <OLED_InvertArea>
#pragma endregion DRAWER

#pragma region PlayerSelection //选择某个选项时候的详细内容
    if (menuRank == 1)
 800376e:	4b1b      	ldr	r3, [pc, #108]	@ (80037dc <System_UI_Loop+0x11e8>)
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	2b01      	cmp	r3, #1
 8003774:	f040 821a 	bne.w	8003bac <System_UI_Loop+0x15b8>
    {
        switch (menuSelection)
 8003778:	4b19      	ldr	r3, [pc, #100]	@ (80037e0 <System_UI_Loop+0x11ec>)
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	3b01      	subs	r3, #1
 800377e:	2b04      	cmp	r3, #4
 8003780:	f200 8574 	bhi.w	800426c <System_UI_Loop+0x1c78>
 8003784:	a201      	add	r2, pc, #4	@ (adr r2, 800378c <System_UI_Loop+0x1198>)
 8003786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800378a:	bf00      	nop
 800378c:	080037e5 	.word	0x080037e5
 8003790:	08003897 	.word	0x08003897
 8003794:	08003949 	.word	0x08003949
 8003798:	08003a4d 	.word	0x08003a4d
 800379c:	08003afd 	.word	0x08003afd
 80037a0:	0800caec 	.word	0x0800caec
 80037a4:	41900000 	.word	0x41900000
 80037a8:	0800cafc 	.word	0x0800cafc
 80037ac:	41d80000 	.word	0x41d80000
 80037b0:	0800cb0c 	.word	0x0800cb0c
 80037b4:	0800c984 	.word	0x0800c984
 80037b8:	200026e4 	.word	0x200026e4
 80037bc:	0800c990 	.word	0x0800c990
 80037c0:	0800c998 	.word	0x0800c998
 80037c4:	0800c9a0 	.word	0x0800c9a0
 80037c8:	0800c9a8 	.word	0x0800c9a8
 80037cc:	0800c9b0 	.word	0x0800c9b0
 80037d0:	200038c0 	.word	0x200038c0
 80037d4:	0800c9c0 	.word	0x0800c9c0
 80037d8:	0800c9c8 	.word	0x0800c9c8
 80037dc:	20000001 	.word	0x20000001
 80037e0:	20000002 	.word	0x20000002
        {
        case 1:
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleBack", (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_Start_Y, 500, TweenStyle);
 80037e4:	230f      	movs	r3, #15
 80037e6:	9301      	str	r3, [sp, #4]
 80037e8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80037ec:	9300      	str	r3, [sp, #0]
 80037ee:	4b83      	ldr	r3, [pc, #524]	@ (80039fc <System_UI_Loop+0x1408>)
 80037f0:	4a83      	ldr	r2, [pc, #524]	@ (8003a00 <System_UI_Loop+0x140c>)
 80037f2:	4984      	ldr	r1, [pc, #528]	@ (8003a04 <System_UI_Loop+0x1410>)
 80037f4:	4884      	ldr	r0, [pc, #528]	@ (8003a08 <System_UI_Loop+0x1414>)
 80037f6:	f003 f875 	bl	80068e4 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleStatus", OLED_WIDTH - strlen("Machine States") * 6, OLED_TITLE_Start_Y, 1, TweenStyle);
 80037fa:	230f      	movs	r3, #15
 80037fc:	9301      	str	r3, [sp, #4]
 80037fe:	2301      	movs	r3, #1
 8003800:	9300      	str	r3, [sp, #0]
 8003802:	4b7e      	ldr	r3, [pc, #504]	@ (80039fc <System_UI_Loop+0x1408>)
 8003804:	4a81      	ldr	r2, [pc, #516]	@ (8003a0c <System_UI_Loop+0x1418>)
 8003806:	4982      	ldr	r1, [pc, #520]	@ (8003a10 <System_UI_Loop+0x141c>)
 8003808:	487f      	ldr	r0, [pc, #508]	@ (8003a08 <System_UI_Loop+0x1414>)
 800380a:	f003 f86b 	bl	80068e4 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSettings", OLED_WIDTH - strlen("STM Settings") * 6, OLED_TITLE_Start_Y, 1, TweenStyle);
 800380e:	230f      	movs	r3, #15
 8003810:	9301      	str	r3, [sp, #4]
 8003812:	2301      	movs	r3, #1
 8003814:	9300      	str	r3, [sp, #0]
 8003816:	4b79      	ldr	r3, [pc, #484]	@ (80039fc <System_UI_Loop+0x1408>)
 8003818:	4a79      	ldr	r2, [pc, #484]	@ (8003a00 <System_UI_Loop+0x140c>)
 800381a:	497e      	ldr	r1, [pc, #504]	@ (8003a14 <System_UI_Loop+0x1420>)
 800381c:	487a      	ldr	r0, [pc, #488]	@ (8003a08 <System_UI_Loop+0x1414>)
 800381e:	f003 f861 	bl	80068e4 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleAbout", (OLED_WIDTH - strlen("Developer!") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 8003822:	2304      	movs	r3, #4
 8003824:	9301      	str	r3, [sp, #4]
 8003826:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800382a:	9300      	str	r3, [sp, #0]
 800382c:	4b73      	ldr	r3, [pc, #460]	@ (80039fc <System_UI_Loop+0x1408>)
 800382e:	4a7a      	ldr	r2, [pc, #488]	@ (8003a18 <System_UI_Loop+0x1424>)
 8003830:	497a      	ldr	r1, [pc, #488]	@ (8003a1c <System_UI_Loop+0x1428>)
 8003832:	4875      	ldr	r0, [pc, #468]	@ (8003a08 <System_UI_Loop+0x1414>)
 8003834:	f003 f856 	bl	80068e4 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleTools", (OLED_WIDTH - strlen("Tools For You") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 8003838:	2304      	movs	r3, #4
 800383a:	9301      	str	r3, [sp, #4]
 800383c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003840:	9300      	str	r3, [sp, #0]
 8003842:	4b6e      	ldr	r3, [pc, #440]	@ (80039fc <System_UI_Loop+0x1408>)
 8003844:	4a76      	ldr	r2, [pc, #472]	@ (8003a20 <System_UI_Loop+0x142c>)
 8003846:	4977      	ldr	r1, [pc, #476]	@ (8003a24 <System_UI_Loop+0x1430>)
 8003848:	486f      	ldr	r0, [pc, #444]	@ (8003a08 <System_UI_Loop+0x1414>)
 800384a:	f003 f84b 	bl	80068e4 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleGames", (OLED_WIDTH - strlen("Epicful Games") * 6), OLED_TITLE_End_Y, 500, EASE_IN_CUBIC);
 800384e:	2304      	movs	r3, #4
 8003850:	9301      	str	r3, [sp, #4]
 8003852:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003856:	9300      	str	r3, [sp, #0]
 8003858:	f04f 0300 	mov.w	r3, #0
 800385c:	4a70      	ldr	r2, [pc, #448]	@ (8003a20 <System_UI_Loop+0x142c>)
 800385e:	4972      	ldr	r1, [pc, #456]	@ (8003a28 <System_UI_Loop+0x1434>)
 8003860:	4869      	ldr	r0, [pc, #420]	@ (8003a08 <System_UI_Loop+0x1414>)
 8003862:	f003 f83f 	bl	80068e4 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Epicful Games") * 6 + 3, 8, 500, EASE_IN_CUBIC);
 8003866:	2304      	movs	r3, #4
 8003868:	9301      	str	r3, [sp, #4]
 800386a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800386e:	9300      	str	r3, [sp, #0]
 8003870:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8003874:	4a6d      	ldr	r2, [pc, #436]	@ (8003a2c <System_UI_Loop+0x1438>)
 8003876:	496e      	ldr	r1, [pc, #440]	@ (8003a30 <System_UI_Loop+0x143c>)
 8003878:	486e      	ldr	r0, [pc, #440]	@ (8003a34 <System_UI_Loop+0x1440>)
 800387a:	f003 f833 	bl	80068e4 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Games") * 6 + 3, 10, 100, EASE_INOUT_CIRC);
 800387e:	230c      	movs	r3, #12
 8003880:	9301      	str	r3, [sp, #4]
 8003882:	2364      	movs	r3, #100	@ 0x64
 8003884:	9300      	str	r3, [sp, #0]
 8003886:	4b6c      	ldr	r3, [pc, #432]	@ (8003a38 <System_UI_Loop+0x1444>)
 8003888:	4a6c      	ldr	r2, [pc, #432]	@ (8003a3c <System_UI_Loop+0x1448>)
 800388a:	496d      	ldr	r1, [pc, #436]	@ (8003a40 <System_UI_Loop+0x144c>)
 800388c:	4869      	ldr	r0, [pc, #420]	@ (8003a34 <System_UI_Loop+0x1440>)
 800388e:	f003 f829 	bl	80068e4 <OLED_DoTweenObject>
            break;
 8003892:	f000 bcec 	b.w	800426e <System_UI_Loop+0x1c7a>
        case 2:
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleBack", (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_Start_Y, 500, TweenStyle);
 8003896:	230f      	movs	r3, #15
 8003898:	9301      	str	r3, [sp, #4]
 800389a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800389e:	9300      	str	r3, [sp, #0]
 80038a0:	4b56      	ldr	r3, [pc, #344]	@ (80039fc <System_UI_Loop+0x1408>)
 80038a2:	4a57      	ldr	r2, [pc, #348]	@ (8003a00 <System_UI_Loop+0x140c>)
 80038a4:	4957      	ldr	r1, [pc, #348]	@ (8003a04 <System_UI_Loop+0x1410>)
 80038a6:	4858      	ldr	r0, [pc, #352]	@ (8003a08 <System_UI_Loop+0x1414>)
 80038a8:	f003 f81c 	bl	80068e4 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSettings", (OLED_WIDTH - strlen("STM Settings") * 6), OLED_TITLE_Start_Y, 1, EASE_IN_CUBIC);
 80038ac:	2304      	movs	r3, #4
 80038ae:	9301      	str	r3, [sp, #4]
 80038b0:	2301      	movs	r3, #1
 80038b2:	9300      	str	r3, [sp, #0]
 80038b4:	4b51      	ldr	r3, [pc, #324]	@ (80039fc <System_UI_Loop+0x1408>)
 80038b6:	4a52      	ldr	r2, [pc, #328]	@ (8003a00 <System_UI_Loop+0x140c>)
 80038b8:	4956      	ldr	r1, [pc, #344]	@ (8003a14 <System_UI_Loop+0x1420>)
 80038ba:	4853      	ldr	r0, [pc, #332]	@ (8003a08 <System_UI_Loop+0x1414>)
 80038bc:	f003 f812 	bl	80068e4 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleAbout", (OLED_WIDTH - strlen("Developer!") * 6), OLED_TITLE_Start_Y, 1, EASE_IN_CUBIC);
 80038c0:	2304      	movs	r3, #4
 80038c2:	9301      	str	r3, [sp, #4]
 80038c4:	2301      	movs	r3, #1
 80038c6:	9300      	str	r3, [sp, #0]
 80038c8:	4b4c      	ldr	r3, [pc, #304]	@ (80039fc <System_UI_Loop+0x1408>)
 80038ca:	4a53      	ldr	r2, [pc, #332]	@ (8003a18 <System_UI_Loop+0x1424>)
 80038cc:	4953      	ldr	r1, [pc, #332]	@ (8003a1c <System_UI_Loop+0x1428>)
 80038ce:	484e      	ldr	r0, [pc, #312]	@ (8003a08 <System_UI_Loop+0x1414>)
 80038d0:	f003 f808 	bl	80068e4 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleStatus", (OLED_WIDTH - strlen("Machine States") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 80038d4:	2304      	movs	r3, #4
 80038d6:	9301      	str	r3, [sp, #4]
 80038d8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80038dc:	9300      	str	r3, [sp, #0]
 80038de:	4b47      	ldr	r3, [pc, #284]	@ (80039fc <System_UI_Loop+0x1408>)
 80038e0:	4a4a      	ldr	r2, [pc, #296]	@ (8003a0c <System_UI_Loop+0x1418>)
 80038e2:	494b      	ldr	r1, [pc, #300]	@ (8003a10 <System_UI_Loop+0x141c>)
 80038e4:	4848      	ldr	r0, [pc, #288]	@ (8003a08 <System_UI_Loop+0x1414>)
 80038e6:	f002 fffd 	bl	80068e4 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleGames", (OLED_WIDTH - strlen("Epicful Games") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 80038ea:	2304      	movs	r3, #4
 80038ec:	9301      	str	r3, [sp, #4]
 80038ee:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80038f2:	9300      	str	r3, [sp, #0]
 80038f4:	4b41      	ldr	r3, [pc, #260]	@ (80039fc <System_UI_Loop+0x1408>)
 80038f6:	4a4a      	ldr	r2, [pc, #296]	@ (8003a20 <System_UI_Loop+0x142c>)
 80038f8:	494b      	ldr	r1, [pc, #300]	@ (8003a28 <System_UI_Loop+0x1434>)
 80038fa:	4843      	ldr	r0, [pc, #268]	@ (8003a08 <System_UI_Loop+0x1414>)
 80038fc:	f002 fff2 	bl	80068e4 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleTools", (OLED_WIDTH - strlen("Tools For You") * 6), OLED_TITLE_End_Y, 500, EASE_IN_CUBIC);
 8003900:	2304      	movs	r3, #4
 8003902:	9301      	str	r3, [sp, #4]
 8003904:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003908:	9300      	str	r3, [sp, #0]
 800390a:	f04f 0300 	mov.w	r3, #0
 800390e:	4a44      	ldr	r2, [pc, #272]	@ (8003a20 <System_UI_Loop+0x142c>)
 8003910:	4944      	ldr	r1, [pc, #272]	@ (8003a24 <System_UI_Loop+0x1430>)
 8003912:	483d      	ldr	r0, [pc, #244]	@ (8003a08 <System_UI_Loop+0x1414>)
 8003914:	f002 ffe6 	bl	80068e4 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Tools for you") * 6 + 3, 8, 500, EASE_IN_CUBIC);
 8003918:	2304      	movs	r3, #4
 800391a:	9301      	str	r3, [sp, #4]
 800391c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003920:	9300      	str	r3, [sp, #0]
 8003922:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8003926:	4a41      	ldr	r2, [pc, #260]	@ (8003a2c <System_UI_Loop+0x1438>)
 8003928:	4941      	ldr	r1, [pc, #260]	@ (8003a30 <System_UI_Loop+0x143c>)
 800392a:	4842      	ldr	r0, [pc, #264]	@ (8003a34 <System_UI_Loop+0x1440>)
 800392c:	f002 ffda 	bl	80068e4 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Tools") * 6 + 3, 10, 100, EASE_INOUT_CIRC);
 8003930:	230c      	movs	r3, #12
 8003932:	9301      	str	r3, [sp, #4]
 8003934:	2364      	movs	r3, #100	@ 0x64
 8003936:	9300      	str	r3, [sp, #0]
 8003938:	4b3f      	ldr	r3, [pc, #252]	@ (8003a38 <System_UI_Loop+0x1444>)
 800393a:	4a40      	ldr	r2, [pc, #256]	@ (8003a3c <System_UI_Loop+0x1448>)
 800393c:	4940      	ldr	r1, [pc, #256]	@ (8003a40 <System_UI_Loop+0x144c>)
 800393e:	483d      	ldr	r0, [pc, #244]	@ (8003a34 <System_UI_Loop+0x1440>)
 8003940:	f002 ffd0 	bl	80068e4 <OLED_DoTweenObject>
            break;
 8003944:	f000 bc93 	b.w	800426e <System_UI_Loop+0x1c7a>
        case 3:
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleBack", (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_Start_Y, 500, TweenStyle);
 8003948:	230f      	movs	r3, #15
 800394a:	9301      	str	r3, [sp, #4]
 800394c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003950:	9300      	str	r3, [sp, #0]
 8003952:	4b2a      	ldr	r3, [pc, #168]	@ (80039fc <System_UI_Loop+0x1408>)
 8003954:	4a2a      	ldr	r2, [pc, #168]	@ (8003a00 <System_UI_Loop+0x140c>)
 8003956:	492b      	ldr	r1, [pc, #172]	@ (8003a04 <System_UI_Loop+0x1410>)
 8003958:	482b      	ldr	r0, [pc, #172]	@ (8003a08 <System_UI_Loop+0x1414>)
 800395a:	f002 ffc3 	bl	80068e4 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleGames", (OLED_WIDTH - strlen("Epicful Games") * 6), OLED_TITLE_Start_Y, 1, EASE_IN_CUBIC);
 800395e:	2304      	movs	r3, #4
 8003960:	9301      	str	r3, [sp, #4]
 8003962:	2301      	movs	r3, #1
 8003964:	9300      	str	r3, [sp, #0]
 8003966:	4b25      	ldr	r3, [pc, #148]	@ (80039fc <System_UI_Loop+0x1408>)
 8003968:	4a2d      	ldr	r2, [pc, #180]	@ (8003a20 <System_UI_Loop+0x142c>)
 800396a:	492f      	ldr	r1, [pc, #188]	@ (8003a28 <System_UI_Loop+0x1434>)
 800396c:	4826      	ldr	r0, [pc, #152]	@ (8003a08 <System_UI_Loop+0x1414>)
 800396e:	f002 ffb9 	bl	80068e4 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleAbout", (OLED_WIDTH - strlen("Developer!") * 6), OLED_TITLE_Start_Y, 1, EASE_IN_CUBIC);
 8003972:	2304      	movs	r3, #4
 8003974:	9301      	str	r3, [sp, #4]
 8003976:	2301      	movs	r3, #1
 8003978:	9300      	str	r3, [sp, #0]
 800397a:	4b20      	ldr	r3, [pc, #128]	@ (80039fc <System_UI_Loop+0x1408>)
 800397c:	4a26      	ldr	r2, [pc, #152]	@ (8003a18 <System_UI_Loop+0x1424>)
 800397e:	4927      	ldr	r1, [pc, #156]	@ (8003a1c <System_UI_Loop+0x1428>)
 8003980:	4821      	ldr	r0, [pc, #132]	@ (8003a08 <System_UI_Loop+0x1414>)
 8003982:	f002 ffaf 	bl	80068e4 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSettings", (OLED_WIDTH - strlen("STM Settings") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 8003986:	2304      	movs	r3, #4
 8003988:	9301      	str	r3, [sp, #4]
 800398a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800398e:	9300      	str	r3, [sp, #0]
 8003990:	4b1a      	ldr	r3, [pc, #104]	@ (80039fc <System_UI_Loop+0x1408>)
 8003992:	4a1b      	ldr	r2, [pc, #108]	@ (8003a00 <System_UI_Loop+0x140c>)
 8003994:	491f      	ldr	r1, [pc, #124]	@ (8003a14 <System_UI_Loop+0x1420>)
 8003996:	481c      	ldr	r0, [pc, #112]	@ (8003a08 <System_UI_Loop+0x1414>)
 8003998:	f002 ffa4 	bl	80068e4 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleTools", (OLED_WIDTH - strlen("Tools For You") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 800399c:	2304      	movs	r3, #4
 800399e:	9301      	str	r3, [sp, #4]
 80039a0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80039a4:	9300      	str	r3, [sp, #0]
 80039a6:	4b15      	ldr	r3, [pc, #84]	@ (80039fc <System_UI_Loop+0x1408>)
 80039a8:	4a1d      	ldr	r2, [pc, #116]	@ (8003a20 <System_UI_Loop+0x142c>)
 80039aa:	491e      	ldr	r1, [pc, #120]	@ (8003a24 <System_UI_Loop+0x1430>)
 80039ac:	4816      	ldr	r0, [pc, #88]	@ (8003a08 <System_UI_Loop+0x1414>)
 80039ae:	f002 ff99 	bl	80068e4 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleStatus", (OLED_WIDTH - strlen("Machine States") * 6), OLED_TITLE_End_Y, 500, EASE_IN_CUBIC);
 80039b2:	2304      	movs	r3, #4
 80039b4:	9301      	str	r3, [sp, #4]
 80039b6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80039ba:	9300      	str	r3, [sp, #0]
 80039bc:	f04f 0300 	mov.w	r3, #0
 80039c0:	4a12      	ldr	r2, [pc, #72]	@ (8003a0c <System_UI_Loop+0x1418>)
 80039c2:	4913      	ldr	r1, [pc, #76]	@ (8003a10 <System_UI_Loop+0x141c>)
 80039c4:	4810      	ldr	r0, [pc, #64]	@ (8003a08 <System_UI_Loop+0x1414>)
 80039c6:	f002 ff8d 	bl	80068e4 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Machine States") * 6 + 3, 8, 500, EASE_IN_CUBIC);
 80039ca:	2304      	movs	r3, #4
 80039cc:	9301      	str	r3, [sp, #4]
 80039ce:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80039d2:	9300      	str	r3, [sp, #0]
 80039d4:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 80039d8:	4a1a      	ldr	r2, [pc, #104]	@ (8003a44 <System_UI_Loop+0x1450>)
 80039da:	4915      	ldr	r1, [pc, #84]	@ (8003a30 <System_UI_Loop+0x143c>)
 80039dc:	4815      	ldr	r0, [pc, #84]	@ (8003a34 <System_UI_Loop+0x1440>)
 80039de:	f002 ff81 	bl	80068e4 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("States") * 6 + 3, 10, 100, EASE_INOUT_CIRC);
 80039e2:	230c      	movs	r3, #12
 80039e4:	9301      	str	r3, [sp, #4]
 80039e6:	2364      	movs	r3, #100	@ 0x64
 80039e8:	9300      	str	r3, [sp, #0]
 80039ea:	4b13      	ldr	r3, [pc, #76]	@ (8003a38 <System_UI_Loop+0x1444>)
 80039ec:	4a16      	ldr	r2, [pc, #88]	@ (8003a48 <System_UI_Loop+0x1454>)
 80039ee:	4914      	ldr	r1, [pc, #80]	@ (8003a40 <System_UI_Loop+0x144c>)
 80039f0:	4810      	ldr	r0, [pc, #64]	@ (8003a34 <System_UI_Loop+0x1440>)
 80039f2:	f002 ff77 	bl	80068e4 <OLED_DoTweenObject>
            break;
 80039f6:	f000 bc3a 	b.w	800426e <System_UI_Loop+0x1c7a>
 80039fa:	bf00      	nop
 80039fc:	c1200000 	.word	0xc1200000
 8003a00:	42600000 	.word	0x42600000
 8003a04:	0800c878 	.word	0x0800c878
 8003a08:	200032cc 	.word	0x200032cc
 8003a0c:	42300000 	.word	0x42300000
 8003a10:	0800c838 	.word	0x0800c838
 8003a14:	0800c844 	.word	0x0800c844
 8003a18:	42880000 	.word	0x42880000
 8003a1c:	0800c854 	.word	0x0800c854
 8003a20:	42480000 	.word	0x42480000
 8003a24:	0800c82c 	.word	0x0800c82c
 8003a28:	0800c820 	.word	0x0800c820
 8003a2c:	42a20000 	.word	0x42a20000
 8003a30:	0800c9b0 	.word	0x0800c9b0
 8003a34:	200038c0 	.word	0x200038c0
 8003a38:	41200000 	.word	0x41200000
 8003a3c:	42040000 	.word	0x42040000
 8003a40:	0800c9c8 	.word	0x0800c9c8
 8003a44:	42ae0000 	.word	0x42ae0000
 8003a48:	421c0000 	.word	0x421c0000
        case 4:
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleBack", (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_Start_Y, 500, TweenStyle);
 8003a4c:	230f      	movs	r3, #15
 8003a4e:	9301      	str	r3, [sp, #4]
 8003a50:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003a54:	9300      	str	r3, [sp, #0]
 8003a56:	4b72      	ldr	r3, [pc, #456]	@ (8003c20 <System_UI_Loop+0x162c>)
 8003a58:	4a72      	ldr	r2, [pc, #456]	@ (8003c24 <System_UI_Loop+0x1630>)
 8003a5a:	4973      	ldr	r1, [pc, #460]	@ (8003c28 <System_UI_Loop+0x1634>)
 8003a5c:	4873      	ldr	r0, [pc, #460]	@ (8003c2c <System_UI_Loop+0x1638>)
 8003a5e:	f002 ff41 	bl	80068e4 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleGames", (OLED_WIDTH - strlen("Epicful Games") * 6), OLED_TITLE_Start_Y, 1, EASE_IN_CUBIC);
 8003a62:	2304      	movs	r3, #4
 8003a64:	9301      	str	r3, [sp, #4]
 8003a66:	2301      	movs	r3, #1
 8003a68:	9300      	str	r3, [sp, #0]
 8003a6a:	4b6d      	ldr	r3, [pc, #436]	@ (8003c20 <System_UI_Loop+0x162c>)
 8003a6c:	4a70      	ldr	r2, [pc, #448]	@ (8003c30 <System_UI_Loop+0x163c>)
 8003a6e:	4971      	ldr	r1, [pc, #452]	@ (8003c34 <System_UI_Loop+0x1640>)
 8003a70:	486e      	ldr	r0, [pc, #440]	@ (8003c2c <System_UI_Loop+0x1638>)
 8003a72:	f002 ff37 	bl	80068e4 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleTools", (OLED_WIDTH - strlen("Tools For You") * 6), OLED_TITLE_Start_Y, 1, EASE_IN_CUBIC);
 8003a76:	2304      	movs	r3, #4
 8003a78:	9301      	str	r3, [sp, #4]
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	9300      	str	r3, [sp, #0]
 8003a7e:	4b68      	ldr	r3, [pc, #416]	@ (8003c20 <System_UI_Loop+0x162c>)
 8003a80:	4a6b      	ldr	r2, [pc, #428]	@ (8003c30 <System_UI_Loop+0x163c>)
 8003a82:	496d      	ldr	r1, [pc, #436]	@ (8003c38 <System_UI_Loop+0x1644>)
 8003a84:	4869      	ldr	r0, [pc, #420]	@ (8003c2c <System_UI_Loop+0x1638>)
 8003a86:	f002 ff2d 	bl	80068e4 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleStatus", (OLED_WIDTH - strlen("Machine States") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 8003a8a:	2304      	movs	r3, #4
 8003a8c:	9301      	str	r3, [sp, #4]
 8003a8e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003a92:	9300      	str	r3, [sp, #0]
 8003a94:	4b62      	ldr	r3, [pc, #392]	@ (8003c20 <System_UI_Loop+0x162c>)
 8003a96:	4a69      	ldr	r2, [pc, #420]	@ (8003c3c <System_UI_Loop+0x1648>)
 8003a98:	4969      	ldr	r1, [pc, #420]	@ (8003c40 <System_UI_Loop+0x164c>)
 8003a9a:	4864      	ldr	r0, [pc, #400]	@ (8003c2c <System_UI_Loop+0x1638>)
 8003a9c:	f002 ff22 	bl	80068e4 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleAbout", (OLED_WIDTH - strlen("Developer!") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 8003aa0:	2304      	movs	r3, #4
 8003aa2:	9301      	str	r3, [sp, #4]
 8003aa4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003aa8:	9300      	str	r3, [sp, #0]
 8003aaa:	4b5d      	ldr	r3, [pc, #372]	@ (8003c20 <System_UI_Loop+0x162c>)
 8003aac:	4a65      	ldr	r2, [pc, #404]	@ (8003c44 <System_UI_Loop+0x1650>)
 8003aae:	4966      	ldr	r1, [pc, #408]	@ (8003c48 <System_UI_Loop+0x1654>)
 8003ab0:	485e      	ldr	r0, [pc, #376]	@ (8003c2c <System_UI_Loop+0x1638>)
 8003ab2:	f002 ff17 	bl	80068e4 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSettings", (OLED_WIDTH - strlen("STM Settings") * 6), OLED_TITLE_End_Y, 500, EASE_IN_CUBIC);
 8003ab6:	2304      	movs	r3, #4
 8003ab8:	9301      	str	r3, [sp, #4]
 8003aba:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003abe:	9300      	str	r3, [sp, #0]
 8003ac0:	f04f 0300 	mov.w	r3, #0
 8003ac4:	4a57      	ldr	r2, [pc, #348]	@ (8003c24 <System_UI_Loop+0x1630>)
 8003ac6:	4961      	ldr	r1, [pc, #388]	@ (8003c4c <System_UI_Loop+0x1658>)
 8003ac8:	4858      	ldr	r0, [pc, #352]	@ (8003c2c <System_UI_Loop+0x1638>)
 8003aca:	f002 ff0b 	bl	80068e4 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("STM Settings") * 6 + 3, 8, 500, EASE_IN_CUBIC);
 8003ace:	2304      	movs	r3, #4
 8003ad0:	9301      	str	r3, [sp, #4]
 8003ad2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003ad6:	9300      	str	r3, [sp, #0]
 8003ad8:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8003adc:	4a5c      	ldr	r2, [pc, #368]	@ (8003c50 <System_UI_Loop+0x165c>)
 8003ade:	495d      	ldr	r1, [pc, #372]	@ (8003c54 <System_UI_Loop+0x1660>)
 8003ae0:	485d      	ldr	r0, [pc, #372]	@ (8003c58 <System_UI_Loop+0x1664>)
 8003ae2:	f002 feff 	bl	80068e4 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Settings") * 6 + 3, 10, 100, EASE_INOUT_CIRC);
 8003ae6:	230c      	movs	r3, #12
 8003ae8:	9301      	str	r3, [sp, #4]
 8003aea:	2364      	movs	r3, #100	@ 0x64
 8003aec:	9300      	str	r3, [sp, #0]
 8003aee:	4b5b      	ldr	r3, [pc, #364]	@ (8003c5c <System_UI_Loop+0x1668>)
 8003af0:	4a5b      	ldr	r2, [pc, #364]	@ (8003c60 <System_UI_Loop+0x166c>)
 8003af2:	495c      	ldr	r1, [pc, #368]	@ (8003c64 <System_UI_Loop+0x1670>)
 8003af4:	4858      	ldr	r0, [pc, #352]	@ (8003c58 <System_UI_Loop+0x1664>)
 8003af6:	f002 fef5 	bl	80068e4 <OLED_DoTweenObject>
            break;
 8003afa:	e3b8      	b.n	800426e <System_UI_Loop+0x1c7a>
        case 5:
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleBack", (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_Start_Y, 500, TweenStyle);
 8003afc:	230f      	movs	r3, #15
 8003afe:	9301      	str	r3, [sp, #4]
 8003b00:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003b04:	9300      	str	r3, [sp, #0]
 8003b06:	4b46      	ldr	r3, [pc, #280]	@ (8003c20 <System_UI_Loop+0x162c>)
 8003b08:	4a46      	ldr	r2, [pc, #280]	@ (8003c24 <System_UI_Loop+0x1630>)
 8003b0a:	4947      	ldr	r1, [pc, #284]	@ (8003c28 <System_UI_Loop+0x1634>)
 8003b0c:	4847      	ldr	r0, [pc, #284]	@ (8003c2c <System_UI_Loop+0x1638>)
 8003b0e:	f002 fee9 	bl	80068e4 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleTools", (OLED_WIDTH - strlen("Tools For You") * 6), OLED_TITLE_Start_Y, 1, EASE_IN_CUBIC);
 8003b12:	2304      	movs	r3, #4
 8003b14:	9301      	str	r3, [sp, #4]
 8003b16:	2301      	movs	r3, #1
 8003b18:	9300      	str	r3, [sp, #0]
 8003b1a:	4b41      	ldr	r3, [pc, #260]	@ (8003c20 <System_UI_Loop+0x162c>)
 8003b1c:	4a44      	ldr	r2, [pc, #272]	@ (8003c30 <System_UI_Loop+0x163c>)
 8003b1e:	4946      	ldr	r1, [pc, #280]	@ (8003c38 <System_UI_Loop+0x1644>)
 8003b20:	4842      	ldr	r0, [pc, #264]	@ (8003c2c <System_UI_Loop+0x1638>)
 8003b22:	f002 fedf 	bl	80068e4 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleStatus", (OLED_WIDTH - strlen("Machine States") * 6), OLED_TITLE_Start_Y, 1, EASE_IN_CUBIC);
 8003b26:	2304      	movs	r3, #4
 8003b28:	9301      	str	r3, [sp, #4]
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	9300      	str	r3, [sp, #0]
 8003b2e:	4b3c      	ldr	r3, [pc, #240]	@ (8003c20 <System_UI_Loop+0x162c>)
 8003b30:	4a42      	ldr	r2, [pc, #264]	@ (8003c3c <System_UI_Loop+0x1648>)
 8003b32:	4943      	ldr	r1, [pc, #268]	@ (8003c40 <System_UI_Loop+0x164c>)
 8003b34:	483d      	ldr	r0, [pc, #244]	@ (8003c2c <System_UI_Loop+0x1638>)
 8003b36:	f002 fed5 	bl	80068e4 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSettings", (OLED_WIDTH - strlen("STM Settings") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 8003b3a:	2304      	movs	r3, #4
 8003b3c:	9301      	str	r3, [sp, #4]
 8003b3e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003b42:	9300      	str	r3, [sp, #0]
 8003b44:	4b36      	ldr	r3, [pc, #216]	@ (8003c20 <System_UI_Loop+0x162c>)
 8003b46:	4a37      	ldr	r2, [pc, #220]	@ (8003c24 <System_UI_Loop+0x1630>)
 8003b48:	4940      	ldr	r1, [pc, #256]	@ (8003c4c <System_UI_Loop+0x1658>)
 8003b4a:	4838      	ldr	r0, [pc, #224]	@ (8003c2c <System_UI_Loop+0x1638>)
 8003b4c:	f002 feca 	bl	80068e4 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleGames", (OLED_WIDTH - strlen("Epicful Games") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 8003b50:	2304      	movs	r3, #4
 8003b52:	9301      	str	r3, [sp, #4]
 8003b54:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003b58:	9300      	str	r3, [sp, #0]
 8003b5a:	4b31      	ldr	r3, [pc, #196]	@ (8003c20 <System_UI_Loop+0x162c>)
 8003b5c:	4a34      	ldr	r2, [pc, #208]	@ (8003c30 <System_UI_Loop+0x163c>)
 8003b5e:	4935      	ldr	r1, [pc, #212]	@ (8003c34 <System_UI_Loop+0x1640>)
 8003b60:	4832      	ldr	r0, [pc, #200]	@ (8003c2c <System_UI_Loop+0x1638>)
 8003b62:	f002 febf 	bl	80068e4 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleAbout", (OLED_WIDTH - strlen("Developer!") * 6), OLED_TITLE_End_Y, 500, EASE_IN_CUBIC);
 8003b66:	2304      	movs	r3, #4
 8003b68:	9301      	str	r3, [sp, #4]
 8003b6a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003b6e:	9300      	str	r3, [sp, #0]
 8003b70:	f04f 0300 	mov.w	r3, #0
 8003b74:	4a33      	ldr	r2, [pc, #204]	@ (8003c44 <System_UI_Loop+0x1650>)
 8003b76:	4934      	ldr	r1, [pc, #208]	@ (8003c48 <System_UI_Loop+0x1654>)
 8003b78:	482c      	ldr	r0, [pc, #176]	@ (8003c2c <System_UI_Loop+0x1638>)
 8003b7a:	f002 feb3 	bl	80068e4 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Developer!") * 6 + 3, 8, 500, EASE_IN_CUBIC);
 8003b7e:	2304      	movs	r3, #4
 8003b80:	9301      	str	r3, [sp, #4]
 8003b82:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003b86:	9300      	str	r3, [sp, #0]
 8003b88:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8003b8c:	4a36      	ldr	r2, [pc, #216]	@ (8003c68 <System_UI_Loop+0x1674>)
 8003b8e:	4931      	ldr	r1, [pc, #196]	@ (8003c54 <System_UI_Loop+0x1660>)
 8003b90:	4831      	ldr	r0, [pc, #196]	@ (8003c58 <System_UI_Loop+0x1664>)
 8003b92:	f002 fea7 	bl	80068e4 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("About") * 6 + 3, 10, 100, EASE_INOUT_CIRC);
 8003b96:	230c      	movs	r3, #12
 8003b98:	9301      	str	r3, [sp, #4]
 8003b9a:	2364      	movs	r3, #100	@ 0x64
 8003b9c:	9300      	str	r3, [sp, #0]
 8003b9e:	4b2f      	ldr	r3, [pc, #188]	@ (8003c5c <System_UI_Loop+0x1668>)
 8003ba0:	4a32      	ldr	r2, [pc, #200]	@ (8003c6c <System_UI_Loop+0x1678>)
 8003ba2:	4930      	ldr	r1, [pc, #192]	@ (8003c64 <System_UI_Loop+0x1670>)
 8003ba4:	482c      	ldr	r0, [pc, #176]	@ (8003c58 <System_UI_Loop+0x1664>)
 8003ba6:	f002 fe9d 	bl	80068e4 <OLED_DoTweenObject>
            break;
 8003baa:	e360      	b.n	800426e <System_UI_Loop+0x1c7a>
        default:
            break;
        }
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_SETTINGS)
 8003bac:	4b30      	ldr	r3, [pc, #192]	@ (8003c70 <System_UI_Loop+0x167c>)
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d116      	bne.n	8003be2 <System_UI_Loop+0x15ee>
 8003bb4:	4b2f      	ldr	r3, [pc, #188]	@ (8003c74 <System_UI_Loop+0x1680>)
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d112      	bne.n	8003be2 <System_UI_Loop+0x15ee>
    {
        switch (menuSelection)
 8003bbc:	4b2e      	ldr	r3, [pc, #184]	@ (8003c78 <System_UI_Loop+0x1684>)
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	2b03      	cmp	r3, #3
 8003bc2:	d006      	beq.n	8003bd2 <System_UI_Loop+0x15de>
 8003bc4:	2b03      	cmp	r3, #3
 8003bc6:	dc06      	bgt.n	8003bd6 <System_UI_Loop+0x15e2>
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d006      	beq.n	8003bda <System_UI_Loop+0x15e6>
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d006      	beq.n	8003bde <System_UI_Loop+0x15ea>
            break;
        case 3:
            /* code */
            break;
        default:
            break;
 8003bd0:	e001      	b.n	8003bd6 <System_UI_Loop+0x15e2>
            break;
 8003bd2:	bf00      	nop
 8003bd4:	e34b      	b.n	800426e <System_UI_Loop+0x1c7a>
            break;
 8003bd6:	bf00      	nop
 8003bd8:	e349      	b.n	800426e <System_UI_Loop+0x1c7a>
            break;
 8003bda:	bf00      	nop
 8003bdc:	e347      	b.n	800426e <System_UI_Loop+0x1c7a>
            break;
 8003bde:	bf00      	nop
        switch (menuSelection)
 8003be0:	e345      	b.n	800426e <System_UI_Loop+0x1c7a>
        }
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_ABOUT)
 8003be2:	4b23      	ldr	r3, [pc, #140]	@ (8003c70 <System_UI_Loop+0x167c>)
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	f040 811b 	bne.w	8003e22 <System_UI_Loop+0x182e>
 8003bec:	4b21      	ldr	r3, [pc, #132]	@ (8003c74 <System_UI_Loop+0x1680>)
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	2b03      	cmp	r3, #3
 8003bf2:	f040 8116 	bne.w	8003e22 <System_UI_Loop+0x182e>
    {
        switch (menuSelection)
 8003bf6:	4b20      	ldr	r3, [pc, #128]	@ (8003c78 <System_UI_Loop+0x1684>)
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	2b05      	cmp	r3, #5
 8003bfe:	f200 810e 	bhi.w	8003e1e <System_UI_Loop+0x182a>
 8003c02:	a201      	add	r2, pc, #4	@ (adr r2, 8003c08 <System_UI_Loop+0x1614>)
 8003c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c08:	08003c7d 	.word	0x08003c7d
 8003c0c:	08003d4b 	.word	0x08003d4b
 8003c10:	08003e1f 	.word	0x08003e1f
 8003c14:	08003e1f 	.word	0x08003e1f
 8003c18:	08003e1f 	.word	0x08003e1f
 8003c1c:	08003dd9 	.word	0x08003dd9
 8003c20:	c1200000 	.word	0xc1200000
 8003c24:	42600000 	.word	0x42600000
 8003c28:	0800c878 	.word	0x0800c878
 8003c2c:	200032cc 	.word	0x200032cc
 8003c30:	42480000 	.word	0x42480000
 8003c34:	0800c820 	.word	0x0800c820
 8003c38:	0800c82c 	.word	0x0800c82c
 8003c3c:	42300000 	.word	0x42300000
 8003c40:	0800c838 	.word	0x0800c838
 8003c44:	42880000 	.word	0x42880000
 8003c48:	0800c854 	.word	0x0800c854
 8003c4c:	0800c844 	.word	0x0800c844
 8003c50:	42960000 	.word	0x42960000
 8003c54:	0800c9b0 	.word	0x0800c9b0
 8003c58:	200038c0 	.word	0x200038c0
 8003c5c:	41200000 	.word	0x41200000
 8003c60:	424c0000 	.word	0x424c0000
 8003c64:	0800c9c8 	.word	0x0800c9c8
 8003c68:	427c0000 	.word	0x427c0000
 8003c6c:	42040000 	.word	0x42040000
 8003c70:	20000001 	.word	0x20000001
 8003c74:	20000b09 	.word	0x20000b09
 8003c78:	20000002 	.word	0x20000002
        {
        case 1:
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleAbout", (OLED_WIDTH - strlen("Developer!") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 8003c7c:	2304      	movs	r3, #4
 8003c7e:	9301      	str	r3, [sp, #4]
 8003c80:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003c84:	9300      	str	r3, [sp, #0]
 8003c86:	4ba3      	ldr	r3, [pc, #652]	@ (8003f14 <System_UI_Loop+0x1920>)
 8003c88:	4aa3      	ldr	r2, [pc, #652]	@ (8003f18 <System_UI_Loop+0x1924>)
 8003c8a:	49a4      	ldr	r1, [pc, #656]	@ (8003f1c <System_UI_Loop+0x1928>)
 8003c8c:	48a4      	ldr	r0, [pc, #656]	@ (8003f20 <System_UI_Loop+0x192c>)
 8003c8e:	f002 fe29 	bl	80068e4 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "UnikoZera!", (OLED_WIDTH - strlen("UnikoZera!") * 6), OLED_TITLE_End_Y, 500, EASE_IN_CUBIC);
 8003c92:	2304      	movs	r3, #4
 8003c94:	9301      	str	r3, [sp, #4]
 8003c96:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003c9a:	9300      	str	r3, [sp, #0]
 8003c9c:	f04f 0300 	mov.w	r3, #0
 8003ca0:	4a9d      	ldr	r2, [pc, #628]	@ (8003f18 <System_UI_Loop+0x1924>)
 8003ca2:	49a0      	ldr	r1, [pc, #640]	@ (8003f24 <System_UI_Loop+0x1930>)
 8003ca4:	489e      	ldr	r0, [pc, #632]	@ (8003f20 <System_UI_Loop+0x192c>)
 8003ca6:	f002 fe1d 	bl	80068e4 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "https://github.com/UnikoZera", (OLED_WIDTH - strlen("https://github.com/UnikoZera") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 8003caa:	2304      	movs	r3, #4
 8003cac:	9301      	str	r3, [sp, #4]
 8003cae:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003cb2:	9300      	str	r3, [sp, #0]
 8003cb4:	4b97      	ldr	r3, [pc, #604]	@ (8003f14 <System_UI_Loop+0x1920>)
 8003cb6:	f04f 429f 	mov.w	r2, #1333788672	@ 0x4f800000
 8003cba:	499b      	ldr	r1, [pc, #620]	@ (8003f28 <System_UI_Loop+0x1934>)
 8003cbc:	4898      	ldr	r0, [pc, #608]	@ (8003f20 <System_UI_Loop+0x192c>)
 8003cbe:	f002 fe11 	bl	80068e4 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "3864437775@qq.com", (OLED_WIDTH - strlen("3864437775@qq.com") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 8003cc2:	2304      	movs	r3, #4
 8003cc4:	9301      	str	r3, [sp, #4]
 8003cc6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003cca:	9300      	str	r3, [sp, #0]
 8003ccc:	4b91      	ldr	r3, [pc, #580]	@ (8003f14 <System_UI_Loop+0x1920>)
 8003cce:	4a97      	ldr	r2, [pc, #604]	@ (8003f2c <System_UI_Loop+0x1938>)
 8003cd0:	4997      	ldr	r1, [pc, #604]	@ (8003f30 <System_UI_Loop+0x193c>)
 8003cd2:	4893      	ldr	r0, [pc, #588]	@ (8003f20 <System_UI_Loop+0x192c>)
 8003cd4:	f002 fe06 	bl	80068e4 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "https://space.bilibili.com/3546696818624992", (OLED_WIDTH - strlen("https://space.bilibili.com/3546696818624992") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 8003cd8:	2304      	movs	r3, #4
 8003cda:	9301      	str	r3, [sp, #4]
 8003cdc:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003ce0:	9300      	str	r3, [sp, #0]
 8003ce2:	4b8c      	ldr	r3, [pc, #560]	@ (8003f14 <System_UI_Loop+0x1920>)
 8003ce4:	4a93      	ldr	r2, [pc, #588]	@ (8003f34 <System_UI_Loop+0x1940>)
 8003ce6:	4994      	ldr	r1, [pc, #592]	@ (8003f38 <System_UI_Loop+0x1944>)
 8003ce8:	488d      	ldr	r0, [pc, #564]	@ (8003f20 <System_UI_Loop+0x192c>)
 8003cea:	f002 fdfb 	bl	80068e4 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "Let's Visit in GITHUB!", (OLED_WIDTH - strlen("Let's Visit in GITHUB!") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 8003cee:	2304      	movs	r3, #4
 8003cf0:	9301      	str	r3, [sp, #4]
 8003cf2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003cf6:	9300      	str	r3, [sp, #0]
 8003cf8:	4b86      	ldr	r3, [pc, #536]	@ (8003f14 <System_UI_Loop+0x1920>)
 8003cfa:	f04f 429f 	mov.w	r2, #1333788672	@ 0x4f800000
 8003cfe:	498f      	ldr	r1, [pc, #572]	@ (8003f3c <System_UI_Loop+0x1948>)
 8003d00:	4887      	ldr	r0, [pc, #540]	@ (8003f20 <System_UI_Loop+0x192c>)
 8003d02:	f002 fdef 	bl	80068e4 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleBack", (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 8003d06:	2304      	movs	r3, #4
 8003d08:	9301      	str	r3, [sp, #4]
 8003d0a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003d0e:	9300      	str	r3, [sp, #0]
 8003d10:	4b80      	ldr	r3, [pc, #512]	@ (8003f14 <System_UI_Loop+0x1920>)
 8003d12:	4a8b      	ldr	r2, [pc, #556]	@ (8003f40 <System_UI_Loop+0x194c>)
 8003d14:	498b      	ldr	r1, [pc, #556]	@ (8003f44 <System_UI_Loop+0x1950>)
 8003d16:	4882      	ldr	r0, [pc, #520]	@ (8003f20 <System_UI_Loop+0x192c>)
 8003d18:	f002 fde4 	bl	80068e4 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("UnikoZera!") * 6 + 3, 8, 500, EASE_IN_CUBIC);
 8003d1c:	2304      	movs	r3, #4
 8003d1e:	9301      	str	r3, [sp, #4]
 8003d20:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003d24:	9300      	str	r3, [sp, #0]
 8003d26:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8003d2a:	4a87      	ldr	r2, [pc, #540]	@ (8003f48 <System_UI_Loop+0x1954>)
 8003d2c:	4987      	ldr	r1, [pc, #540]	@ (8003f4c <System_UI_Loop+0x1958>)
 8003d2e:	4888      	ldr	r0, [pc, #544]	@ (8003f50 <System_UI_Loop+0x195c>)
 8003d30:	f002 fdd8 	bl	80068e4 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Developer") * 6 + 3, 10, 100, EASE_INOUT_CIRC);
 8003d34:	230c      	movs	r3, #12
 8003d36:	9301      	str	r3, [sp, #4]
 8003d38:	2364      	movs	r3, #100	@ 0x64
 8003d3a:	9300      	str	r3, [sp, #0]
 8003d3c:	4b85      	ldr	r3, [pc, #532]	@ (8003f54 <System_UI_Loop+0x1960>)
 8003d3e:	4a86      	ldr	r2, [pc, #536]	@ (8003f58 <System_UI_Loop+0x1964>)
 8003d40:	4986      	ldr	r1, [pc, #536]	@ (8003f5c <System_UI_Loop+0x1968>)
 8003d42:	4883      	ldr	r0, [pc, #524]	@ (8003f50 <System_UI_Loop+0x195c>)
 8003d44:	f002 fdce 	bl	80068e4 <OLED_DoTweenObject>
            break;
 8003d48:	e06a      	b.n	8003e20 <System_UI_Loop+0x182c>
        case 2:
            OLED_DoTweenObject(&g_Title_AnimationManager, "UnikoZera!", (OLED_WIDTH - strlen("UnikoZera!") * 6), OLED_UI_START_Y, 500, EASE_IN_CUBIC);
 8003d4a:	2304      	movs	r3, #4
 8003d4c:	9301      	str	r3, [sp, #4]
 8003d4e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003d52:	9300      	str	r3, [sp, #0]
 8003d54:	4b82      	ldr	r3, [pc, #520]	@ (8003f60 <System_UI_Loop+0x196c>)
 8003d56:	4a70      	ldr	r2, [pc, #448]	@ (8003f18 <System_UI_Loop+0x1924>)
 8003d58:	4972      	ldr	r1, [pc, #456]	@ (8003f24 <System_UI_Loop+0x1930>)
 8003d5a:	4871      	ldr	r0, [pc, #452]	@ (8003f20 <System_UI_Loop+0x192c>)
 8003d5c:	f002 fdc2 	bl	80068e4 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "https://github.com/UnikoZera", (OLED_WIDTH - strlen("https://github.com/UnikoZera") * 6), OLED_TITLE_End_Y, 500, EASE_IN_CUBIC);
 8003d60:	2304      	movs	r3, #4
 8003d62:	9301      	str	r3, [sp, #4]
 8003d64:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003d68:	9300      	str	r3, [sp, #0]
 8003d6a:	f04f 0300 	mov.w	r3, #0
 8003d6e:	f04f 429f 	mov.w	r2, #1333788672	@ 0x4f800000
 8003d72:	496d      	ldr	r1, [pc, #436]	@ (8003f28 <System_UI_Loop+0x1934>)
 8003d74:	486a      	ldr	r0, [pc, #424]	@ (8003f20 <System_UI_Loop+0x192c>)
 8003d76:	f002 fdb5 	bl	80068e4 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "3864437775@qq.com", (OLED_WIDTH - strlen("3864437775@qq.com") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 8003d7a:	2304      	movs	r3, #4
 8003d7c:	9301      	str	r3, [sp, #4]
 8003d7e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003d82:	9300      	str	r3, [sp, #0]
 8003d84:	4b63      	ldr	r3, [pc, #396]	@ (8003f14 <System_UI_Loop+0x1920>)
 8003d86:	4a69      	ldr	r2, [pc, #420]	@ (8003f2c <System_UI_Loop+0x1938>)
 8003d88:	4969      	ldr	r1, [pc, #420]	@ (8003f30 <System_UI_Loop+0x193c>)
 8003d8a:	4865      	ldr	r0, [pc, #404]	@ (8003f20 <System_UI_Loop+0x192c>)
 8003d8c:	f002 fdaa 	bl	80068e4 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "https://space.bilibili.com/3546696818624992", (OLED_WIDTH - strlen("https://space.bilibili.com/3546696818624992") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 8003d90:	2304      	movs	r3, #4
 8003d92:	9301      	str	r3, [sp, #4]
 8003d94:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003d98:	9300      	str	r3, [sp, #0]
 8003d9a:	4b5e      	ldr	r3, [pc, #376]	@ (8003f14 <System_UI_Loop+0x1920>)
 8003d9c:	4a65      	ldr	r2, [pc, #404]	@ (8003f34 <System_UI_Loop+0x1940>)
 8003d9e:	4966      	ldr	r1, [pc, #408]	@ (8003f38 <System_UI_Loop+0x1944>)
 8003da0:	485f      	ldr	r0, [pc, #380]	@ (8003f20 <System_UI_Loop+0x192c>)
 8003da2:	f002 fd9f 	bl	80068e4 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "Let's Visit in GITHUB!", (OLED_WIDTH - strlen("Let's Visit in GITHUB!") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 8003da6:	2304      	movs	r3, #4
 8003da8:	9301      	str	r3, [sp, #4]
 8003daa:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003dae:	9300      	str	r3, [sp, #0]
 8003db0:	4b58      	ldr	r3, [pc, #352]	@ (8003f14 <System_UI_Loop+0x1920>)
 8003db2:	f04f 429f 	mov.w	r2, #1333788672	@ 0x4f800000
 8003db6:	4961      	ldr	r1, [pc, #388]	@ (8003f3c <System_UI_Loop+0x1948>)
 8003db8:	4859      	ldr	r0, [pc, #356]	@ (8003f20 <System_UI_Loop+0x192c>)
 8003dba:	f002 fd93 	bl	80068e4 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleBack", (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_End_Y, 500, EASE_IN_CUBIC);
 8003dbe:	2304      	movs	r3, #4
 8003dc0:	9301      	str	r3, [sp, #4]
 8003dc2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003dc6:	9300      	str	r3, [sp, #0]
 8003dc8:	f04f 0300 	mov.w	r3, #0
 8003dcc:	4a5c      	ldr	r2, [pc, #368]	@ (8003f40 <System_UI_Loop+0x194c>)
 8003dce:	495d      	ldr	r1, [pc, #372]	@ (8003f44 <System_UI_Loop+0x1950>)
 8003dd0:	4853      	ldr	r0, [pc, #332]	@ (8003f20 <System_UI_Loop+0x192c>)
 8003dd2:	f002 fd87 	bl	80068e4 <OLED_DoTweenObject>
            break;
 8003dd6:	e023      	b.n	8003e20 <System_UI_Loop+0x182c>
            break;
        case 5:
            /* code */
            break;
        case 6:
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleBack", (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_End_Y, 500, EASE_IN_CUBIC);
 8003dd8:	2304      	movs	r3, #4
 8003dda:	9301      	str	r3, [sp, #4]
 8003ddc:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003de0:	9300      	str	r3, [sp, #0]
 8003de2:	f04f 0300 	mov.w	r3, #0
 8003de6:	4a56      	ldr	r2, [pc, #344]	@ (8003f40 <System_UI_Loop+0x194c>)
 8003de8:	4956      	ldr	r1, [pc, #344]	@ (8003f44 <System_UI_Loop+0x1950>)
 8003dea:	484d      	ldr	r0, [pc, #308]	@ (8003f20 <System_UI_Loop+0x192c>)
 8003dec:	f002 fd7a 	bl	80068e4 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Back To Menu") * 6 + 3, 8, 500, EASE_IN_CUBIC);
 8003df0:	2304      	movs	r3, #4
 8003df2:	9301      	str	r3, [sp, #4]
 8003df4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003df8:	9300      	str	r3, [sp, #0]
 8003dfa:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8003dfe:	4a59      	ldr	r2, [pc, #356]	@ (8003f64 <System_UI_Loop+0x1970>)
 8003e00:	4952      	ldr	r1, [pc, #328]	@ (8003f4c <System_UI_Loop+0x1958>)
 8003e02:	4853      	ldr	r0, [pc, #332]	@ (8003f50 <System_UI_Loop+0x195c>)
 8003e04:	f002 fd6e 	bl	80068e4 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Back") * 6 + 3, 10, 100, EASE_INOUT_CIRC);
 8003e08:	230c      	movs	r3, #12
 8003e0a:	9301      	str	r3, [sp, #4]
 8003e0c:	2364      	movs	r3, #100	@ 0x64
 8003e0e:	9300      	str	r3, [sp, #0]
 8003e10:	4b50      	ldr	r3, [pc, #320]	@ (8003f54 <System_UI_Loop+0x1960>)
 8003e12:	4a55      	ldr	r2, [pc, #340]	@ (8003f68 <System_UI_Loop+0x1974>)
 8003e14:	4951      	ldr	r1, [pc, #324]	@ (8003f5c <System_UI_Loop+0x1968>)
 8003e16:	484e      	ldr	r0, [pc, #312]	@ (8003f50 <System_UI_Loop+0x195c>)
 8003e18:	f002 fd64 	bl	80068e4 <OLED_DoTweenObject>
            break;
 8003e1c:	e000      	b.n	8003e20 <System_UI_Loop+0x182c>
        default:
            break;
 8003e1e:	bf00      	nop
        switch (menuSelection)
 8003e20:	e225      	b.n	800426e <System_UI_Loop+0x1c7a>
        }
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_TOOLS)
 8003e22:	4b52      	ldr	r3, [pc, #328]	@ (8003f6c <System_UI_Loop+0x1978>)
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	f040 80ae 	bne.w	8003f88 <System_UI_Loop+0x1994>
 8003e2c:	4b50      	ldr	r3, [pc, #320]	@ (8003f70 <System_UI_Loop+0x197c>)
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	2b04      	cmp	r3, #4
 8003e32:	f040 80a9 	bne.w	8003f88 <System_UI_Loop+0x1994>
    {
        switch (menuSelection)
 8003e36:	4b4f      	ldr	r3, [pc, #316]	@ (8003f74 <System_UI_Loop+0x1980>)
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d002      	beq.n	8003e44 <System_UI_Loop+0x1850>
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d039      	beq.n	8003eb6 <System_UI_Loop+0x18c2>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleBack", (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_End_Y, 500, EASE_IN_CUBIC);
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Back To Menu") * 6 + 3, 8, 500, EASE_IN_CUBIC);
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Back") * 6 + 3, 10, 100, EASE_INOUT_CIRC);
            break;
        default:
            break;
 8003e42:	e066      	b.n	8003f12 <System_UI_Loop+0x191e>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleTools", (OLED_WIDTH - strlen("Tools For You") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 8003e44:	2304      	movs	r3, #4
 8003e46:	9301      	str	r3, [sp, #4]
 8003e48:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003e4c:	9300      	str	r3, [sp, #0]
 8003e4e:	4b31      	ldr	r3, [pc, #196]	@ (8003f14 <System_UI_Loop+0x1920>)
 8003e50:	4a49      	ldr	r2, [pc, #292]	@ (8003f78 <System_UI_Loop+0x1984>)
 8003e52:	494a      	ldr	r1, [pc, #296]	@ (8003f7c <System_UI_Loop+0x1988>)
 8003e54:	4832      	ldr	r0, [pc, #200]	@ (8003f20 <System_UI_Loop+0x192c>)
 8003e56:	f002 fd45 	bl	80068e4 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "BAD APPLE!", (OLED_WIDTH - strlen("BAD APPLE!") * 6), OLED_TITLE_End_Y, 500, EASE_IN_CUBIC);
 8003e5a:	2304      	movs	r3, #4
 8003e5c:	9301      	str	r3, [sp, #4]
 8003e5e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003e62:	9300      	str	r3, [sp, #0]
 8003e64:	f04f 0300 	mov.w	r3, #0
 8003e68:	4a2b      	ldr	r2, [pc, #172]	@ (8003f18 <System_UI_Loop+0x1924>)
 8003e6a:	4945      	ldr	r1, [pc, #276]	@ (8003f80 <System_UI_Loop+0x198c>)
 8003e6c:	482c      	ldr	r0, [pc, #176]	@ (8003f20 <System_UI_Loop+0x192c>)
 8003e6e:	f002 fd39 	bl	80068e4 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleBack", (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 8003e72:	2304      	movs	r3, #4
 8003e74:	9301      	str	r3, [sp, #4]
 8003e76:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003e7a:	9300      	str	r3, [sp, #0]
 8003e7c:	4b25      	ldr	r3, [pc, #148]	@ (8003f14 <System_UI_Loop+0x1920>)
 8003e7e:	4a30      	ldr	r2, [pc, #192]	@ (8003f40 <System_UI_Loop+0x194c>)
 8003e80:	4930      	ldr	r1, [pc, #192]	@ (8003f44 <System_UI_Loop+0x1950>)
 8003e82:	4827      	ldr	r0, [pc, #156]	@ (8003f20 <System_UI_Loop+0x192c>)
 8003e84:	f002 fd2e 	bl	80068e4 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("BAD APPLE!") * 6 + 3, 8, 500, EASE_IN_CUBIC);
 8003e88:	2304      	movs	r3, #4
 8003e8a:	9301      	str	r3, [sp, #4]
 8003e8c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003e90:	9300      	str	r3, [sp, #0]
 8003e92:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8003e96:	4a2c      	ldr	r2, [pc, #176]	@ (8003f48 <System_UI_Loop+0x1954>)
 8003e98:	492c      	ldr	r1, [pc, #176]	@ (8003f4c <System_UI_Loop+0x1958>)
 8003e9a:	482d      	ldr	r0, [pc, #180]	@ (8003f50 <System_UI_Loop+0x195c>)
 8003e9c:	f002 fd22 	bl	80068e4 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Video") * 6 + 3, 10, 100, EASE_INOUT_CIRC);
 8003ea0:	230c      	movs	r3, #12
 8003ea2:	9301      	str	r3, [sp, #4]
 8003ea4:	2364      	movs	r3, #100	@ 0x64
 8003ea6:	9300      	str	r3, [sp, #0]
 8003ea8:	4b2a      	ldr	r3, [pc, #168]	@ (8003f54 <System_UI_Loop+0x1960>)
 8003eaa:	4a36      	ldr	r2, [pc, #216]	@ (8003f84 <System_UI_Loop+0x1990>)
 8003eac:	492b      	ldr	r1, [pc, #172]	@ (8003f5c <System_UI_Loop+0x1968>)
 8003eae:	4828      	ldr	r0, [pc, #160]	@ (8003f50 <System_UI_Loop+0x195c>)
 8003eb0:	f002 fd18 	bl	80068e4 <OLED_DoTweenObject>
            break;
 8003eb4:	e02d      	b.n	8003f12 <System_UI_Loop+0x191e>
            OLED_DoTweenObject(&g_Title_AnimationManager, "BAD APPLE!", (OLED_WIDTH - strlen("BAD APPLE!") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 8003eb6:	2304      	movs	r3, #4
 8003eb8:	9301      	str	r3, [sp, #4]
 8003eba:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003ebe:	9300      	str	r3, [sp, #0]
 8003ec0:	4b14      	ldr	r3, [pc, #80]	@ (8003f14 <System_UI_Loop+0x1920>)
 8003ec2:	4a15      	ldr	r2, [pc, #84]	@ (8003f18 <System_UI_Loop+0x1924>)
 8003ec4:	492e      	ldr	r1, [pc, #184]	@ (8003f80 <System_UI_Loop+0x198c>)
 8003ec6:	4816      	ldr	r0, [pc, #88]	@ (8003f20 <System_UI_Loop+0x192c>)
 8003ec8:	f002 fd0c 	bl	80068e4 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleBack", (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_End_Y, 500, EASE_IN_CUBIC);
 8003ecc:	2304      	movs	r3, #4
 8003ece:	9301      	str	r3, [sp, #4]
 8003ed0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003ed4:	9300      	str	r3, [sp, #0]
 8003ed6:	f04f 0300 	mov.w	r3, #0
 8003eda:	4a19      	ldr	r2, [pc, #100]	@ (8003f40 <System_UI_Loop+0x194c>)
 8003edc:	4919      	ldr	r1, [pc, #100]	@ (8003f44 <System_UI_Loop+0x1950>)
 8003ede:	4810      	ldr	r0, [pc, #64]	@ (8003f20 <System_UI_Loop+0x192c>)
 8003ee0:	f002 fd00 	bl	80068e4 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Back To Menu") * 6 + 3, 8, 500, EASE_IN_CUBIC);
 8003ee4:	2304      	movs	r3, #4
 8003ee6:	9301      	str	r3, [sp, #4]
 8003ee8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003eec:	9300      	str	r3, [sp, #0]
 8003eee:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8003ef2:	4a1c      	ldr	r2, [pc, #112]	@ (8003f64 <System_UI_Loop+0x1970>)
 8003ef4:	4915      	ldr	r1, [pc, #84]	@ (8003f4c <System_UI_Loop+0x1958>)
 8003ef6:	4816      	ldr	r0, [pc, #88]	@ (8003f50 <System_UI_Loop+0x195c>)
 8003ef8:	f002 fcf4 	bl	80068e4 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Back") * 6 + 3, 10, 100, EASE_INOUT_CIRC);
 8003efc:	230c      	movs	r3, #12
 8003efe:	9301      	str	r3, [sp, #4]
 8003f00:	2364      	movs	r3, #100	@ 0x64
 8003f02:	9300      	str	r3, [sp, #0]
 8003f04:	4b13      	ldr	r3, [pc, #76]	@ (8003f54 <System_UI_Loop+0x1960>)
 8003f06:	4a18      	ldr	r2, [pc, #96]	@ (8003f68 <System_UI_Loop+0x1974>)
 8003f08:	4914      	ldr	r1, [pc, #80]	@ (8003f5c <System_UI_Loop+0x1968>)
 8003f0a:	4811      	ldr	r0, [pc, #68]	@ (8003f50 <System_UI_Loop+0x195c>)
 8003f0c:	f002 fcea 	bl	80068e4 <OLED_DoTweenObject>
            break;
 8003f10:	bf00      	nop
        switch (menuSelection)
 8003f12:	e1ac      	b.n	800426e <System_UI_Loop+0x1c7a>
 8003f14:	c1200000 	.word	0xc1200000
 8003f18:	42880000 	.word	0x42880000
 8003f1c:	0800c854 	.word	0x0800c854
 8003f20:	200032cc 	.word	0x200032cc
 8003f24:	0800c8b0 	.word	0x0800c8b0
 8003f28:	0800c8bc 	.word	0x0800c8bc
 8003f2c:	41d00000 	.word	0x41d00000
 8003f30:	0800c8dc 	.word	0x0800c8dc
 8003f34:	4f7fffff 	.word	0x4f7fffff
 8003f38:	0800c8f0 	.word	0x0800c8f0
 8003f3c:	0800c91c 	.word	0x0800c91c
 8003f40:	42600000 	.word	0x42600000
 8003f44:	0800c878 	.word	0x0800c878
 8003f48:	427c0000 	.word	0x427c0000
 8003f4c:	0800c9b0 	.word	0x0800c9b0
 8003f50:	200038c0 	.word	0x200038c0
 8003f54:	41200000 	.word	0x41200000
 8003f58:	42640000 	.word	0x42640000
 8003f5c:	0800c9c8 	.word	0x0800c9c8
 8003f60:	c0c00000 	.word	0xc0c00000
 8003f64:	42960000 	.word	0x42960000
 8003f68:	41d80000 	.word	0x41d80000
 8003f6c:	20000001 	.word	0x20000001
 8003f70:	20000b09 	.word	0x20000b09
 8003f74:	20000002 	.word	0x20000002
 8003f78:	42480000 	.word	0x42480000
 8003f7c:	0800c82c 	.word	0x0800c82c
 8003f80:	0800c884 	.word	0x0800c884
 8003f84:	42040000 	.word	0x42040000
        }
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_GAMES)
 8003f88:	4ba0      	ldr	r3, [pc, #640]	@ (800420c <System_UI_Loop+0x1c18>)
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	f040 80ca 	bne.w	8004126 <System_UI_Loop+0x1b32>
 8003f92:	4b9f      	ldr	r3, [pc, #636]	@ (8004210 <System_UI_Loop+0x1c1c>)
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	2b05      	cmp	r3, #5
 8003f98:	f040 80c5 	bne.w	8004126 <System_UI_Loop+0x1b32>
    {
        switch (menuSelection)
 8003f9c:	4b9d      	ldr	r3, [pc, #628]	@ (8004214 <System_UI_Loop+0x1c20>)
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	2b03      	cmp	r3, #3
 8003fa2:	f000 8085 	beq.w	80040b0 <System_UI_Loop+0x1abc>
 8003fa6:	2b03      	cmp	r3, #3
 8003fa8:	f300 80bb 	bgt.w	8004122 <System_UI_Loop+0x1b2e>
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d002      	beq.n	8003fb6 <System_UI_Loop+0x19c2>
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d044      	beq.n	800403e <System_UI_Loop+0x1a4a>
            OLED_DoTweenObject(&g_Title_AnimationManager, "Title2048", (OLED_WIDTH - strlen("Here is 2048!") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Back To Menu") * 6 + 3, 8, 500, EASE_IN_CUBIC);
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Back") * 6 + 3, 10, 100, EASE_INOUT_CIRC);
            break;
        default:
            break;
 8003fb4:	e0b5      	b.n	8004122 <System_UI_Loop+0x1b2e>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleGames", (OLED_WIDTH - strlen("Epicful Games") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 8003fb6:	2304      	movs	r3, #4
 8003fb8:	9301      	str	r3, [sp, #4]
 8003fba:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003fbe:	9300      	str	r3, [sp, #0]
 8003fc0:	4b95      	ldr	r3, [pc, #596]	@ (8004218 <System_UI_Loop+0x1c24>)
 8003fc2:	4a96      	ldr	r2, [pc, #600]	@ (800421c <System_UI_Loop+0x1c28>)
 8003fc4:	4996      	ldr	r1, [pc, #600]	@ (8004220 <System_UI_Loop+0x1c2c>)
 8003fc6:	4897      	ldr	r0, [pc, #604]	@ (8004224 <System_UI_Loop+0x1c30>)
 8003fc8:	f002 fc8c 	bl	80068e4 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSnake", (OLED_WIDTH - strlen("Greedy Snake") * 6), OLED_TITLE_End_Y, 500, EASE_IN_CUBIC);
 8003fcc:	2304      	movs	r3, #4
 8003fce:	9301      	str	r3, [sp, #4]
 8003fd0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003fd4:	9300      	str	r3, [sp, #0]
 8003fd6:	f04f 0300 	mov.w	r3, #0
 8003fda:	4a93      	ldr	r2, [pc, #588]	@ (8004228 <System_UI_Loop+0x1c34>)
 8003fdc:	4993      	ldr	r1, [pc, #588]	@ (800422c <System_UI_Loop+0x1c38>)
 8003fde:	4891      	ldr	r0, [pc, #580]	@ (8004224 <System_UI_Loop+0x1c30>)
 8003fe0:	f002 fc80 	bl	80068e4 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "Title2048", (OLED_WIDTH - strlen("Here is 2048!") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 8003fe4:	2304      	movs	r3, #4
 8003fe6:	9301      	str	r3, [sp, #4]
 8003fe8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003fec:	9300      	str	r3, [sp, #0]
 8003fee:	4b8a      	ldr	r3, [pc, #552]	@ (8004218 <System_UI_Loop+0x1c24>)
 8003ff0:	4a8a      	ldr	r2, [pc, #552]	@ (800421c <System_UI_Loop+0x1c28>)
 8003ff2:	498f      	ldr	r1, [pc, #572]	@ (8004230 <System_UI_Loop+0x1c3c>)
 8003ff4:	488b      	ldr	r0, [pc, #556]	@ (8004224 <System_UI_Loop+0x1c30>)
 8003ff6:	f002 fc75 	bl	80068e4 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleBack", (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 8003ffa:	2304      	movs	r3, #4
 8003ffc:	9301      	str	r3, [sp, #4]
 8003ffe:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8004002:	9300      	str	r3, [sp, #0]
 8004004:	4b84      	ldr	r3, [pc, #528]	@ (8004218 <System_UI_Loop+0x1c24>)
 8004006:	4a88      	ldr	r2, [pc, #544]	@ (8004228 <System_UI_Loop+0x1c34>)
 8004008:	498a      	ldr	r1, [pc, #552]	@ (8004234 <System_UI_Loop+0x1c40>)
 800400a:	4886      	ldr	r0, [pc, #536]	@ (8004224 <System_UI_Loop+0x1c30>)
 800400c:	f002 fc6a 	bl	80068e4 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Greedy Snake") * 6 + 3, 8, 500, EASE_IN_CUBIC);
 8004010:	2304      	movs	r3, #4
 8004012:	9301      	str	r3, [sp, #4]
 8004014:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8004018:	9300      	str	r3, [sp, #0]
 800401a:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 800401e:	4a86      	ldr	r2, [pc, #536]	@ (8004238 <System_UI_Loop+0x1c44>)
 8004020:	4986      	ldr	r1, [pc, #536]	@ (800423c <System_UI_Loop+0x1c48>)
 8004022:	4887      	ldr	r0, [pc, #540]	@ (8004240 <System_UI_Loop+0x1c4c>)
 8004024:	f002 fc5e 	bl	80068e4 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Snake") * 6 + 3, 10, 100, EASE_INOUT_CIRC);
 8004028:	230c      	movs	r3, #12
 800402a:	9301      	str	r3, [sp, #4]
 800402c:	2364      	movs	r3, #100	@ 0x64
 800402e:	9300      	str	r3, [sp, #0]
 8004030:	4b84      	ldr	r3, [pc, #528]	@ (8004244 <System_UI_Loop+0x1c50>)
 8004032:	4a85      	ldr	r2, [pc, #532]	@ (8004248 <System_UI_Loop+0x1c54>)
 8004034:	4985      	ldr	r1, [pc, #532]	@ (800424c <System_UI_Loop+0x1c58>)
 8004036:	4882      	ldr	r0, [pc, #520]	@ (8004240 <System_UI_Loop+0x1c4c>)
 8004038:	f002 fc54 	bl	80068e4 <OLED_DoTweenObject>
            break;
 800403c:	e072      	b.n	8004124 <System_UI_Loop+0x1b30>
            OLED_DoTweenObject(&g_Title_AnimationManager, "Title2048", (OLED_WIDTH - strlen("Here is 2048!") * 6), OLED_TITLE_End_Y, 500, EASE_IN_CUBIC);
 800403e:	2304      	movs	r3, #4
 8004040:	9301      	str	r3, [sp, #4]
 8004042:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8004046:	9300      	str	r3, [sp, #0]
 8004048:	f04f 0300 	mov.w	r3, #0
 800404c:	4a73      	ldr	r2, [pc, #460]	@ (800421c <System_UI_Loop+0x1c28>)
 800404e:	4978      	ldr	r1, [pc, #480]	@ (8004230 <System_UI_Loop+0x1c3c>)
 8004050:	4874      	ldr	r0, [pc, #464]	@ (8004224 <System_UI_Loop+0x1c30>)
 8004052:	f002 fc47 	bl	80068e4 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSnake", (OLED_WIDTH - strlen("Greedy Snake") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 8004056:	2304      	movs	r3, #4
 8004058:	9301      	str	r3, [sp, #4]
 800405a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800405e:	9300      	str	r3, [sp, #0]
 8004060:	4b6d      	ldr	r3, [pc, #436]	@ (8004218 <System_UI_Loop+0x1c24>)
 8004062:	4a71      	ldr	r2, [pc, #452]	@ (8004228 <System_UI_Loop+0x1c34>)
 8004064:	4971      	ldr	r1, [pc, #452]	@ (800422c <System_UI_Loop+0x1c38>)
 8004066:	486f      	ldr	r0, [pc, #444]	@ (8004224 <System_UI_Loop+0x1c30>)
 8004068:	f002 fc3c 	bl	80068e4 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleBack", (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 800406c:	2304      	movs	r3, #4
 800406e:	9301      	str	r3, [sp, #4]
 8004070:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8004074:	9300      	str	r3, [sp, #0]
 8004076:	4b68      	ldr	r3, [pc, #416]	@ (8004218 <System_UI_Loop+0x1c24>)
 8004078:	4a6b      	ldr	r2, [pc, #428]	@ (8004228 <System_UI_Loop+0x1c34>)
 800407a:	496e      	ldr	r1, [pc, #440]	@ (8004234 <System_UI_Loop+0x1c40>)
 800407c:	4869      	ldr	r0, [pc, #420]	@ (8004224 <System_UI_Loop+0x1c30>)
 800407e:	f002 fc31 	bl	80068e4 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Here is 2048!") * 6 + 3, 8, 500, EASE_IN_CUBIC);
 8004082:	2304      	movs	r3, #4
 8004084:	9301      	str	r3, [sp, #4]
 8004086:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800408a:	9300      	str	r3, [sp, #0]
 800408c:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8004090:	4a6f      	ldr	r2, [pc, #444]	@ (8004250 <System_UI_Loop+0x1c5c>)
 8004092:	496a      	ldr	r1, [pc, #424]	@ (800423c <System_UI_Loop+0x1c48>)
 8004094:	486a      	ldr	r0, [pc, #424]	@ (8004240 <System_UI_Loop+0x1c4c>)
 8004096:	f002 fc25 	bl	80068e4 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("2048") * 6 + 3, 10, 100, EASE_INOUT_CIRC);
 800409a:	230c      	movs	r3, #12
 800409c:	9301      	str	r3, [sp, #4]
 800409e:	2364      	movs	r3, #100	@ 0x64
 80040a0:	9300      	str	r3, [sp, #0]
 80040a2:	4b68      	ldr	r3, [pc, #416]	@ (8004244 <System_UI_Loop+0x1c50>)
 80040a4:	4a6b      	ldr	r2, [pc, #428]	@ (8004254 <System_UI_Loop+0x1c60>)
 80040a6:	4969      	ldr	r1, [pc, #420]	@ (800424c <System_UI_Loop+0x1c58>)
 80040a8:	4865      	ldr	r0, [pc, #404]	@ (8004240 <System_UI_Loop+0x1c4c>)
 80040aa:	f002 fc1b 	bl	80068e4 <OLED_DoTweenObject>
            break;
 80040ae:	e039      	b.n	8004124 <System_UI_Loop+0x1b30>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleBack", (OLED_WIDTH - strlen("Back To Menu") * 6), OLED_TITLE_End_Y, 500, EASE_IN_CUBIC);
 80040b0:	2304      	movs	r3, #4
 80040b2:	9301      	str	r3, [sp, #4]
 80040b4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80040b8:	9300      	str	r3, [sp, #0]
 80040ba:	f04f 0300 	mov.w	r3, #0
 80040be:	4a5a      	ldr	r2, [pc, #360]	@ (8004228 <System_UI_Loop+0x1c34>)
 80040c0:	495c      	ldr	r1, [pc, #368]	@ (8004234 <System_UI_Loop+0x1c40>)
 80040c2:	4858      	ldr	r0, [pc, #352]	@ (8004224 <System_UI_Loop+0x1c30>)
 80040c4:	f002 fc0e 	bl	80068e4 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSnake", (OLED_WIDTH - strlen("Greedy Snake") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 80040c8:	2304      	movs	r3, #4
 80040ca:	9301      	str	r3, [sp, #4]
 80040cc:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80040d0:	9300      	str	r3, [sp, #0]
 80040d2:	4b51      	ldr	r3, [pc, #324]	@ (8004218 <System_UI_Loop+0x1c24>)
 80040d4:	4a54      	ldr	r2, [pc, #336]	@ (8004228 <System_UI_Loop+0x1c34>)
 80040d6:	4955      	ldr	r1, [pc, #340]	@ (800422c <System_UI_Loop+0x1c38>)
 80040d8:	4852      	ldr	r0, [pc, #328]	@ (8004224 <System_UI_Loop+0x1c30>)
 80040da:	f002 fc03 	bl	80068e4 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_Title_AnimationManager, "Title2048", (OLED_WIDTH - strlen("Here is 2048!") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 80040de:	2304      	movs	r3, #4
 80040e0:	9301      	str	r3, [sp, #4]
 80040e2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80040e6:	9300      	str	r3, [sp, #0]
 80040e8:	4b4b      	ldr	r3, [pc, #300]	@ (8004218 <System_UI_Loop+0x1c24>)
 80040ea:	4a4c      	ldr	r2, [pc, #304]	@ (800421c <System_UI_Loop+0x1c28>)
 80040ec:	4950      	ldr	r1, [pc, #320]	@ (8004230 <System_UI_Loop+0x1c3c>)
 80040ee:	484d      	ldr	r0, [pc, #308]	@ (8004224 <System_UI_Loop+0x1c30>)
 80040f0:	f002 fbf8 	bl	80068e4 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Back To Menu") * 6 + 3, 8, 500, EASE_IN_CUBIC);
 80040f4:	2304      	movs	r3, #4
 80040f6:	9301      	str	r3, [sp, #4]
 80040f8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80040fc:	9300      	str	r3, [sp, #0]
 80040fe:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8004102:	4a4d      	ldr	r2, [pc, #308]	@ (8004238 <System_UI_Loop+0x1c44>)
 8004104:	494d      	ldr	r1, [pc, #308]	@ (800423c <System_UI_Loop+0x1c48>)
 8004106:	484e      	ldr	r0, [pc, #312]	@ (8004240 <System_UI_Loop+0x1c4c>)
 8004108:	f002 fbec 	bl	80068e4 <OLED_DoTweenObject>
            OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Back") * 6 + 3, 10, 100, EASE_INOUT_CIRC);
 800410c:	230c      	movs	r3, #12
 800410e:	9301      	str	r3, [sp, #4]
 8004110:	2364      	movs	r3, #100	@ 0x64
 8004112:	9300      	str	r3, [sp, #0]
 8004114:	4b4b      	ldr	r3, [pc, #300]	@ (8004244 <System_UI_Loop+0x1c50>)
 8004116:	4a4f      	ldr	r2, [pc, #316]	@ (8004254 <System_UI_Loop+0x1c60>)
 8004118:	494c      	ldr	r1, [pc, #304]	@ (800424c <System_UI_Loop+0x1c58>)
 800411a:	4849      	ldr	r0, [pc, #292]	@ (8004240 <System_UI_Loop+0x1c4c>)
 800411c:	f002 fbe2 	bl	80068e4 <OLED_DoTweenObject>
            break;
 8004120:	e000      	b.n	8004124 <System_UI_Loop+0x1b30>
            break;
 8004122:	bf00      	nop
        switch (menuSelection)
 8004124:	e0a3      	b.n	800426e <System_UI_Loop+0x1c7a>
        }
    }
    else if (menuRank == 3 && currentPage == UI_PAGE_GAMES && menuSelection == 1)
 8004126:	4b39      	ldr	r3, [pc, #228]	@ (800420c <System_UI_Loop+0x1c18>)
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	2b03      	cmp	r3, #3
 800412c:	d10d      	bne.n	800414a <System_UI_Loop+0x1b56>
 800412e:	4b38      	ldr	r3, [pc, #224]	@ (8004210 <System_UI_Loop+0x1c1c>)
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	2b05      	cmp	r3, #5
 8004134:	d109      	bne.n	800414a <System_UI_Loop+0x1b56>
 8004136:	4b37      	ldr	r3, [pc, #220]	@ (8004214 <System_UI_Loop+0x1c20>)
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d105      	bne.n	800414a <System_UI_Loop+0x1b56>
    {
        cancelSelection = true;
 800413e:	4b46      	ldr	r3, [pc, #280]	@ (8004258 <System_UI_Loop+0x1c64>)
 8004140:	2201      	movs	r2, #1
 8004142:	701a      	strb	r2, [r3, #0]
        Snake_GameLoop();
 8004144:	f7fc fdc4 	bl	8000cd0 <Snake_GameLoop>
 8004148:	e091      	b.n	800426e <System_UI_Loop+0x1c7a>
    }
    else if (menuRank == 3 && currentPage == UI_PAGE_GAMES && menuSelection == 2)
 800414a:	4b30      	ldr	r3, [pc, #192]	@ (800420c <System_UI_Loop+0x1c18>)
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	2b03      	cmp	r3, #3
 8004150:	d10d      	bne.n	800416e <System_UI_Loop+0x1b7a>
 8004152:	4b2f      	ldr	r3, [pc, #188]	@ (8004210 <System_UI_Loop+0x1c1c>)
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	2b05      	cmp	r3, #5
 8004158:	d109      	bne.n	800416e <System_UI_Loop+0x1b7a>
 800415a:	4b2e      	ldr	r3, [pc, #184]	@ (8004214 <System_UI_Loop+0x1c20>)
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	2b02      	cmp	r3, #2
 8004160:	d105      	bne.n	800416e <System_UI_Loop+0x1b7a>
    {
        cancelSelection = true;
 8004162:	4b3d      	ldr	r3, [pc, #244]	@ (8004258 <System_UI_Loop+0x1c64>)
 8004164:	2201      	movs	r2, #1
 8004166:	701a      	strb	r2, [r3, #0]
        Game2048_GameLoop();
 8004168:	f7fd fac4 	bl	80016f4 <Game2048_GameLoop>
 800416c:	e07f      	b.n	800426e <System_UI_Loop+0x1c7a>
    }
    else if (menuRank == 3 && currentPage == UI_PAGE_TOOLS && menuSelection == 1)
 800416e:	4b27      	ldr	r3, [pc, #156]	@ (800420c <System_UI_Loop+0x1c18>)
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	2b03      	cmp	r3, #3
 8004174:	d10d      	bne.n	8004192 <System_UI_Loop+0x1b9e>
 8004176:	4b26      	ldr	r3, [pc, #152]	@ (8004210 <System_UI_Loop+0x1c1c>)
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	2b04      	cmp	r3, #4
 800417c:	d109      	bne.n	8004192 <System_UI_Loop+0x1b9e>
 800417e:	4b25      	ldr	r3, [pc, #148]	@ (8004214 <System_UI_Loop+0x1c20>)
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d105      	bne.n	8004192 <System_UI_Loop+0x1b9e>
    {
        cancelSelection = true;
 8004186:	4b34      	ldr	r3, [pc, #208]	@ (8004258 <System_UI_Loop+0x1c64>)
 8004188:	2201      	movs	r2, #1
 800418a:	701a      	strb	r2, [r3, #0]
        play_video();
 800418c:	f003 f8a4 	bl	80072d8 <play_video>
 8004190:	e06d      	b.n	800426e <System_UI_Loop+0x1c7a>
    }
    else if (menuRank == 2 && currentPage == UI_PAGE_STATUS)
 8004192:	4b1e      	ldr	r3, [pc, #120]	@ (800420c <System_UI_Loop+0x1c18>)
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	2b02      	cmp	r3, #2
 8004198:	d169      	bne.n	800426e <System_UI_Loop+0x1c7a>
 800419a:	4b1d      	ldr	r3, [pc, #116]	@ (8004210 <System_UI_Loop+0x1c1c>)
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d165      	bne.n	800426e <System_UI_Loop+0x1c7a>
    {
        OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", 0, 8, 500, EASE_IN_CUBIC);
 80041a2:	2304      	movs	r3, #4
 80041a4:	9301      	str	r3, [sp, #4]
 80041a6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80041aa:	9300      	str	r3, [sp, #0]
 80041ac:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 80041b0:	f04f 0200 	mov.w	r2, #0
 80041b4:	4921      	ldr	r1, [pc, #132]	@ (800423c <System_UI_Loop+0x1c48>)
 80041b6:	4822      	ldr	r0, [pc, #136]	@ (8004240 <System_UI_Loop+0x1c4c>)
 80041b8:	f002 fb94 	bl	80068e4 <OLED_DoTweenObject>
        OLED_DoTweenObject(&g_AnimationManager, "CursorScale", 0, 8, 500, EASE_INOUT_CIRC);
 80041bc:	230c      	movs	r3, #12
 80041be:	9301      	str	r3, [sp, #4]
 80041c0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80041c4:	9300      	str	r3, [sp, #0]
 80041c6:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 80041ca:	f04f 0200 	mov.w	r2, #0
 80041ce:	491f      	ldr	r1, [pc, #124]	@ (800424c <System_UI_Loop+0x1c58>)
 80041d0:	481b      	ldr	r0, [pc, #108]	@ (8004240 <System_UI_Loop+0x1c4c>)
 80041d2:	f002 fb87 	bl	80068e4 <OLED_DoTweenObject>

        OLED_DoTweenObject(&Status_AnimationManager, "RunningTime", OLED_UI_END_X, 1, 500, EASE_IN_CIRC);
 80041d6:	230a      	movs	r3, #10
 80041d8:	9301      	str	r3, [sp, #4]
 80041da:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80041de:	9300      	str	r3, [sp, #0]
 80041e0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80041e4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80041e8:	491c      	ldr	r1, [pc, #112]	@ (800425c <System_UI_Loop+0x1c68>)
 80041ea:	481d      	ldr	r0, [pc, #116]	@ (8004260 <System_UI_Loop+0x1c6c>)
 80041ec:	f002 fb7a 	bl	80068e4 <OLED_DoTweenObject>
        OLED_DoTweenObject(&Status_AnimationManager, "Status", 0, OLED_UI_START_Y + OLED_UI_GAP_Y * 1 + 6, 500, EASE_IN_EXPO);
 80041f0:	2307      	movs	r3, #7
 80041f2:	9301      	str	r3, [sp, #4]
 80041f4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80041f8:	9300      	str	r3, [sp, #0]
 80041fa:	4b1a      	ldr	r3, [pc, #104]	@ (8004264 <System_UI_Loop+0x1c70>)
 80041fc:	f04f 0200 	mov.w	r2, #0
 8004200:	4919      	ldr	r1, [pc, #100]	@ (8004268 <System_UI_Loop+0x1c74>)
 8004202:	4817      	ldr	r0, [pc, #92]	@ (8004260 <System_UI_Loop+0x1c6c>)
 8004204:	f002 fb6e 	bl	80068e4 <OLED_DoTweenObject>
 8004208:	e031      	b.n	800426e <System_UI_Loop+0x1c7a>
 800420a:	bf00      	nop
 800420c:	20000001 	.word	0x20000001
 8004210:	20000b09 	.word	0x20000b09
 8004214:	20000002 	.word	0x20000002
 8004218:	c1200000 	.word	0xc1200000
 800421c:	42480000 	.word	0x42480000
 8004220:	0800c820 	.word	0x0800c820
 8004224:	200032cc 	.word	0x200032cc
 8004228:	42600000 	.word	0x42600000
 800422c:	0800c860 	.word	0x0800c860
 8004230:	0800c86c 	.word	0x0800c86c
 8004234:	0800c878 	.word	0x0800c878
 8004238:	42960000 	.word	0x42960000
 800423c:	0800c9b0 	.word	0x0800c9b0
 8004240:	200038c0 	.word	0x200038c0
 8004244:	41200000 	.word	0x41200000
 8004248:	42040000 	.word	0x42040000
 800424c:	0800c9c8 	.word	0x0800c9c8
 8004250:	42a20000 	.word	0x42a20000
 8004254:	41d80000 	.word	0x41d80000
 8004258:	20000b0b 	.word	0x20000b0b
 800425c:	0800c95c 	.word	0x0800c95c
 8004260:	20002cd8 	.word	0x20002cd8
 8004264:	41b00000 	.word	0x41b00000
 8004268:	0800c968 	.word	0x0800c968
            break;
 800426c:	bf00      	nop
    
#pragma endregion PlayerSelection

#pragma region ResetAnimation //完成换级时候让动画复位

    if (resetAnimation && !(OLED_GetAnimationStates(&Games_AnimationManager, "Snake") || OLED_GetAnimationStates(&Status_AnimationManager, "RunningTime") || OLED_GetAnimationStates(&Settings_AnimationManager, "ShowFPS") || OLED_GetAnimationStates(&About_AnimationManager, "Developer") || OLED_GetAnimationStates(&Tools_AnimationManager, "VideoPlayer")))
 800426e:	4b42      	ldr	r3, [pc, #264]	@ (8004378 <System_UI_Loop+0x1d84>)
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d078      	beq.n	8004368 <System_UI_Loop+0x1d74>
 8004276:	4941      	ldr	r1, [pc, #260]	@ (800437c <System_UI_Loop+0x1d88>)
 8004278:	4841      	ldr	r0, [pc, #260]	@ (8004380 <System_UI_Loop+0x1d8c>)
 800427a:	f002 fb1d 	bl	80068b8 <OLED_GetAnimationStates>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d171      	bne.n	8004368 <System_UI_Loop+0x1d74>
 8004284:	493f      	ldr	r1, [pc, #252]	@ (8004384 <System_UI_Loop+0x1d90>)
 8004286:	4840      	ldr	r0, [pc, #256]	@ (8004388 <System_UI_Loop+0x1d94>)
 8004288:	f002 fb16 	bl	80068b8 <OLED_GetAnimationStates>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d16a      	bne.n	8004368 <System_UI_Loop+0x1d74>
 8004292:	493e      	ldr	r1, [pc, #248]	@ (800438c <System_UI_Loop+0x1d98>)
 8004294:	483e      	ldr	r0, [pc, #248]	@ (8004390 <System_UI_Loop+0x1d9c>)
 8004296:	f002 fb0f 	bl	80068b8 <OLED_GetAnimationStates>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d163      	bne.n	8004368 <System_UI_Loop+0x1d74>
 80042a0:	493c      	ldr	r1, [pc, #240]	@ (8004394 <System_UI_Loop+0x1da0>)
 80042a2:	483d      	ldr	r0, [pc, #244]	@ (8004398 <System_UI_Loop+0x1da4>)
 80042a4:	f002 fb08 	bl	80068b8 <OLED_GetAnimationStates>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d15c      	bne.n	8004368 <System_UI_Loop+0x1d74>
 80042ae:	493b      	ldr	r1, [pc, #236]	@ (800439c <System_UI_Loop+0x1da8>)
 80042b0:	483b      	ldr	r0, [pc, #236]	@ (80043a0 <System_UI_Loop+0x1dac>)
 80042b2:	f002 fb01 	bl	80068b8 <OLED_GetAnimationStates>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d155      	bne.n	8004368 <System_UI_Loop+0x1d74>
    {
        OLED_DoTweenObject(&Games_AnimationManager, "Snake", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1, EASE_IN_CIRC);
 80042bc:	230a      	movs	r3, #10
 80042be:	9301      	str	r3, [sp, #4]
 80042c0:	2301      	movs	r3, #1
 80042c2:	9300      	str	r3, [sp, #0]
 80042c4:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 80042c8:	4a36      	ldr	r2, [pc, #216]	@ (80043a4 <System_UI_Loop+0x1db0>)
 80042ca:	492c      	ldr	r1, [pc, #176]	@ (800437c <System_UI_Loop+0x1d88>)
 80042cc:	482c      	ldr	r0, [pc, #176]	@ (8004380 <System_UI_Loop+0x1d8c>)
 80042ce:	f002 fb09 	bl	80068e4 <OLED_DoTweenObject>
        OLED_DoTweenObject(&Games_AnimationManager, "2048", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1, EASE_IN_CIRC);
 80042d2:	230a      	movs	r3, #10
 80042d4:	9301      	str	r3, [sp, #4]
 80042d6:	2301      	movs	r3, #1
 80042d8:	9300      	str	r3, [sp, #0]
 80042da:	4b33      	ldr	r3, [pc, #204]	@ (80043a8 <System_UI_Loop+0x1db4>)
 80042dc:	4a31      	ldr	r2, [pc, #196]	@ (80043a4 <System_UI_Loop+0x1db0>)
 80042de:	4933      	ldr	r1, [pc, #204]	@ (80043ac <System_UI_Loop+0x1db8>)
 80042e0:	4827      	ldr	r0, [pc, #156]	@ (8004380 <System_UI_Loop+0x1d8c>)
 80042e2:	f002 faff 	bl	80068e4 <OLED_DoTweenObject>


        OLED_DoTweenObject(&About_AnimationManager, "Developer", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1, EASE_IN_CIRC);
 80042e6:	230a      	movs	r3, #10
 80042e8:	9301      	str	r3, [sp, #4]
 80042ea:	2301      	movs	r3, #1
 80042ec:	9300      	str	r3, [sp, #0]
 80042ee:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 80042f2:	4a2c      	ldr	r2, [pc, #176]	@ (80043a4 <System_UI_Loop+0x1db0>)
 80042f4:	4927      	ldr	r1, [pc, #156]	@ (8004394 <System_UI_Loop+0x1da0>)
 80042f6:	4828      	ldr	r0, [pc, #160]	@ (8004398 <System_UI_Loop+0x1da4>)
 80042f8:	f002 faf4 	bl	80068e4 <OLED_DoTweenObject>
        OLED_DoTweenObject(&About_AnimationManager, "Github", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1, EASE_IN_CIRC);
 80042fc:	230a      	movs	r3, #10
 80042fe:	9301      	str	r3, [sp, #4]
 8004300:	2301      	movs	r3, #1
 8004302:	9300      	str	r3, [sp, #0]
 8004304:	4b28      	ldr	r3, [pc, #160]	@ (80043a8 <System_UI_Loop+0x1db4>)
 8004306:	4a27      	ldr	r2, [pc, #156]	@ (80043a4 <System_UI_Loop+0x1db0>)
 8004308:	4929      	ldr	r1, [pc, #164]	@ (80043b0 <System_UI_Loop+0x1dbc>)
 800430a:	4823      	ldr	r0, [pc, #140]	@ (8004398 <System_UI_Loop+0x1da4>)
 800430c:	f002 faea 	bl	80068e4 <OLED_DoTweenObject>
        OLED_DoTweenObject(&About_AnimationManager, "Email", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, 1, EASE_IN_CIRC);
 8004310:	230a      	movs	r3, #10
 8004312:	9301      	str	r3, [sp, #4]
 8004314:	2301      	movs	r3, #1
 8004316:	9300      	str	r3, [sp, #0]
 8004318:	4b26      	ldr	r3, [pc, #152]	@ (80043b4 <System_UI_Loop+0x1dc0>)
 800431a:	4a22      	ldr	r2, [pc, #136]	@ (80043a4 <System_UI_Loop+0x1db0>)
 800431c:	4926      	ldr	r1, [pc, #152]	@ (80043b8 <System_UI_Loop+0x1dc4>)
 800431e:	481e      	ldr	r0, [pc, #120]	@ (8004398 <System_UI_Loop+0x1da4>)
 8004320:	f002 fae0 	bl	80068e4 <OLED_DoTweenObject>
        OLED_DoTweenObject(&About_AnimationManager, "Donate", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 4, 1, EASE_IN_CIRC);
 8004324:	230a      	movs	r3, #10
 8004326:	9301      	str	r3, [sp, #4]
 8004328:	2301      	movs	r3, #1
 800432a:	9300      	str	r3, [sp, #0]
 800432c:	4b23      	ldr	r3, [pc, #140]	@ (80043bc <System_UI_Loop+0x1dc8>)
 800432e:	4a1d      	ldr	r2, [pc, #116]	@ (80043a4 <System_UI_Loop+0x1db0>)
 8004330:	4923      	ldr	r1, [pc, #140]	@ (80043c0 <System_UI_Loop+0x1dcc>)
 8004332:	4819      	ldr	r0, [pc, #100]	@ (8004398 <System_UI_Loop+0x1da4>)
 8004334:	f002 fad6 	bl	80068e4 <OLED_DoTweenObject>
        OLED_DoTweenObject(&About_AnimationManager, "More", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 5, 1, EASE_IN_CIRC);
 8004338:	230a      	movs	r3, #10
 800433a:	9301      	str	r3, [sp, #4]
 800433c:	2301      	movs	r3, #1
 800433e:	9300      	str	r3, [sp, #0]
 8004340:	4b20      	ldr	r3, [pc, #128]	@ (80043c4 <System_UI_Loop+0x1dd0>)
 8004342:	4a18      	ldr	r2, [pc, #96]	@ (80043a4 <System_UI_Loop+0x1db0>)
 8004344:	4920      	ldr	r1, [pc, #128]	@ (80043c8 <System_UI_Loop+0x1dd4>)
 8004346:	4814      	ldr	r0, [pc, #80]	@ (8004398 <System_UI_Loop+0x1da4>)
 8004348:	f002 facc 	bl	80068e4 <OLED_DoTweenObject>

        OLED_DoTweenObject(&Tools_AnimationManager, "VideoPlayer", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1, EASE_IN_CIRC);
 800434c:	230a      	movs	r3, #10
 800434e:	9301      	str	r3, [sp, #4]
 8004350:	2301      	movs	r3, #1
 8004352:	9300      	str	r3, [sp, #0]
 8004354:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8004358:	4a12      	ldr	r2, [pc, #72]	@ (80043a4 <System_UI_Loop+0x1db0>)
 800435a:	4910      	ldr	r1, [pc, #64]	@ (800439c <System_UI_Loop+0x1da8>)
 800435c:	4810      	ldr	r0, [pc, #64]	@ (80043a0 <System_UI_Loop+0x1dac>)
 800435e:	f002 fac1 	bl	80068e4 <OLED_DoTweenObject>
        resetAnimation = false;
 8004362:	4b05      	ldr	r3, [pc, #20]	@ (8004378 <System_UI_Loop+0x1d84>)
 8004364:	2200      	movs	r2, #0
 8004366:	701a      	strb	r2, [r3, #0]

    

#pragma endregion ResetAnimation

    preMenuSelection = menuSelection;
 8004368:	4b18      	ldr	r3, [pc, #96]	@ (80043cc <System_UI_Loop+0x1dd8>)
 800436a:	781a      	ldrb	r2, [r3, #0]
 800436c:	4b18      	ldr	r3, [pc, #96]	@ (80043d0 <System_UI_Loop+0x1ddc>)
 800436e:	701a      	strb	r2, [r3, #0]
}
 8004370:	bf00      	nop
 8004372:	3724      	adds	r7, #36	@ 0x24
 8004374:	46bd      	mov	sp, r7
 8004376:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004378:	20000b0c 	.word	0x20000b0c
 800437c:	0800c934 	.word	0x0800c934
 8004380:	20001508 	.word	0x20001508
 8004384:	0800c95c 	.word	0x0800c95c
 8004388:	20002cd8 	.word	0x20002cd8
 800438c:	0800c970 	.word	0x0800c970
 8004390:	200020f0 	.word	0x200020f0
 8004394:	0800c984 	.word	0x0800c984
 8004398:	200026e4 	.word	0x200026e4
 800439c:	0800c950 	.word	0x0800c950
 80043a0:	20001afc 	.word	0x20001afc
 80043a4:	c2b40000 	.word	0xc2b40000
 80043a8:	41e80000 	.word	0x41e80000
 80043ac:	0800c93c 	.word	0x0800c93c
 80043b0:	0800c990 	.word	0x0800c990
 80043b4:	42280000 	.word	0x42280000
 80043b8:	0800c998 	.word	0x0800c998
 80043bc:	425c0000 	.word	0x425c0000
 80043c0:	0800c9a0 	.word	0x0800c9a0
 80043c4:	42880000 	.word	0x42880000
 80043c8:	0800c9a8 	.word	0x0800c9a8
 80043cc:	20000002 	.word	0x20000002
 80043d0:	20000b0a 	.word	0x20000b0a

080043d4 <SystemGetsSignal>:

void SystemGetsSignal() // 这里是旋钮数据的获取
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af02      	add	r7, sp, #8
#pragma region 管理翻页
    static uint16_t preCount = 32767;
    uint16_t pageCount;
    if (currentPage == UI_PAGE_MENU)
 80043da:	4ba9      	ldr	r3, [pc, #676]	@ (8004680 <SystemGetsSignal+0x2ac>)
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d102      	bne.n	80043e8 <SystemGetsSignal+0x14>
    {
        pageCount = MainMenuItemCount;
 80043e2:	2305      	movs	r3, #5
 80043e4:	80fb      	strh	r3, [r7, #6]
 80043e6:	e01a      	b.n	800441e <SystemGetsSignal+0x4a>
    }
    else if (currentPage == UI_PAGE_SETTINGS)
 80043e8:	4ba5      	ldr	r3, [pc, #660]	@ (8004680 <SystemGetsSignal+0x2ac>)
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d102      	bne.n	80043f6 <SystemGetsSignal+0x22>
    {
        pageCount = SettingsItemCount;
 80043f0:	2303      	movs	r3, #3
 80043f2:	80fb      	strh	r3, [r7, #6]
 80043f4:	e013      	b.n	800441e <SystemGetsSignal+0x4a>
    }
    else if (currentPage == UI_PAGE_ABOUT)
 80043f6:	4ba2      	ldr	r3, [pc, #648]	@ (8004680 <SystemGetsSignal+0x2ac>)
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	2b03      	cmp	r3, #3
 80043fc:	d102      	bne.n	8004404 <SystemGetsSignal+0x30>
    {
        pageCount = AboutItemCount;
 80043fe:	2306      	movs	r3, #6
 8004400:	80fb      	strh	r3, [r7, #6]
 8004402:	e00c      	b.n	800441e <SystemGetsSignal+0x4a>
    }
    else if (currentPage == UI_PAGE_TOOLS)
 8004404:	4b9e      	ldr	r3, [pc, #632]	@ (8004680 <SystemGetsSignal+0x2ac>)
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	2b04      	cmp	r3, #4
 800440a:	d102      	bne.n	8004412 <SystemGetsSignal+0x3e>
    {
        pageCount = ToolsItemCount;
 800440c:	2302      	movs	r3, #2
 800440e:	80fb      	strh	r3, [r7, #6]
 8004410:	e005      	b.n	800441e <SystemGetsSignal+0x4a>
    }
    else if (currentPage == UI_PAGE_GAMES)
 8004412:	4b9b      	ldr	r3, [pc, #620]	@ (8004680 <SystemGetsSignal+0x2ac>)
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	2b05      	cmp	r3, #5
 8004418:	d101      	bne.n	800441e <SystemGetsSignal+0x4a>
    {
        pageCount = GamesItemCount;
 800441a:	2303      	movs	r3, #3
 800441c:	80fb      	strh	r3, [r7, #6]
    }

    if (!cancelSelection)
 800441e:	4b99      	ldr	r3, [pc, #612]	@ (8004684 <SystemGetsSignal+0x2b0>)
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	f083 0301 	eor.w	r3, r3, #1
 8004426:	b2db      	uxtb	r3, r3
 8004428:	2b00      	cmp	r3, #0
 800442a:	d039      	beq.n	80044a0 <SystemGetsSignal+0xcc>
    {
        if (count - preCount > 1)
 800442c:	4b96      	ldr	r3, [pc, #600]	@ (8004688 <SystemGetsSignal+0x2b4>)
 800442e:	881b      	ldrh	r3, [r3, #0]
 8004430:	461a      	mov	r2, r3
 8004432:	4b96      	ldr	r3, [pc, #600]	@ (800468c <SystemGetsSignal+0x2b8>)
 8004434:	881b      	ldrh	r3, [r3, #0]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	2b01      	cmp	r3, #1
 800443a:	dd14      	ble.n	8004466 <SystemGetsSignal+0x92>
        {
            if (menuSelection < pageCount)
 800443c:	4b94      	ldr	r3, [pc, #592]	@ (8004690 <SystemGetsSignal+0x2bc>)
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	461a      	mov	r2, r3
 8004442:	88fb      	ldrh	r3, [r7, #6]
 8004444:	4293      	cmp	r3, r2
 8004446:	d906      	bls.n	8004456 <SystemGetsSignal+0x82>
            {
                menuSelection++;
 8004448:	4b91      	ldr	r3, [pc, #580]	@ (8004690 <SystemGetsSignal+0x2bc>)
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	3301      	adds	r3, #1
 800444e:	b2da      	uxtb	r2, r3
 8004450:	4b8f      	ldr	r3, [pc, #572]	@ (8004690 <SystemGetsSignal+0x2bc>)
 8004452:	701a      	strb	r2, [r3, #0]
 8004454:	e002      	b.n	800445c <SystemGetsSignal+0x88>
            }
            else
            {
                menuSelection = 1;
 8004456:	4b8e      	ldr	r3, [pc, #568]	@ (8004690 <SystemGetsSignal+0x2bc>)
 8004458:	2201      	movs	r2, #1
 800445a:	701a      	strb	r2, [r3, #0]
            }

            preCount = count;
 800445c:	4b8a      	ldr	r3, [pc, #552]	@ (8004688 <SystemGetsSignal+0x2b4>)
 800445e:	881a      	ldrh	r2, [r3, #0]
 8004460:	4b8a      	ldr	r3, [pc, #552]	@ (800468c <SystemGetsSignal+0x2b8>)
 8004462:	801a      	strh	r2, [r3, #0]
 8004464:	e020      	b.n	80044a8 <SystemGetsSignal+0xd4>
        }
        else if (count - preCount < -1)
 8004466:	4b88      	ldr	r3, [pc, #544]	@ (8004688 <SystemGetsSignal+0x2b4>)
 8004468:	881b      	ldrh	r3, [r3, #0]
 800446a:	461a      	mov	r2, r3
 800446c:	4b87      	ldr	r3, [pc, #540]	@ (800468c <SystemGetsSignal+0x2b8>)
 800446e:	881b      	ldrh	r3, [r3, #0]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004476:	da17      	bge.n	80044a8 <SystemGetsSignal+0xd4>
        {

            if (menuSelection > 1)
 8004478:	4b85      	ldr	r3, [pc, #532]	@ (8004690 <SystemGetsSignal+0x2bc>)
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	2b01      	cmp	r3, #1
 800447e:	d906      	bls.n	800448e <SystemGetsSignal+0xba>
            {
                menuSelection--;
 8004480:	4b83      	ldr	r3, [pc, #524]	@ (8004690 <SystemGetsSignal+0x2bc>)
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	3b01      	subs	r3, #1
 8004486:	b2da      	uxtb	r2, r3
 8004488:	4b81      	ldr	r3, [pc, #516]	@ (8004690 <SystemGetsSignal+0x2bc>)
 800448a:	701a      	strb	r2, [r3, #0]
 800448c:	e003      	b.n	8004496 <SystemGetsSignal+0xc2>
            }
            else
            {
                menuSelection = pageCount;
 800448e:	88fb      	ldrh	r3, [r7, #6]
 8004490:	b2da      	uxtb	r2, r3
 8004492:	4b7f      	ldr	r3, [pc, #508]	@ (8004690 <SystemGetsSignal+0x2bc>)
 8004494:	701a      	strb	r2, [r3, #0]
            }

            preCount = count;
 8004496:	4b7c      	ldr	r3, [pc, #496]	@ (8004688 <SystemGetsSignal+0x2b4>)
 8004498:	881a      	ldrh	r2, [r3, #0]
 800449a:	4b7c      	ldr	r3, [pc, #496]	@ (800468c <SystemGetsSignal+0x2b8>)
 800449c:	801a      	strh	r2, [r3, #0]
 800449e:	e003      	b.n	80044a8 <SystemGetsSignal+0xd4>
        }
    }
    else
        preCount = count;
 80044a0:	4b79      	ldr	r3, [pc, #484]	@ (8004688 <SystemGetsSignal+0x2b4>)
 80044a2:	881a      	ldrh	r2, [r3, #0]
 80044a4:	4b79      	ldr	r3, [pc, #484]	@ (800468c <SystemGetsSignal+0x2b8>)
 80044a6:	801a      	strh	r2, [r3, #0]

#pragma endregion 管理翻页

    if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET)
 80044a8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80044ac:	4879      	ldr	r0, [pc, #484]	@ (8004694 <SystemGetsSignal+0x2c0>)
 80044ae:	f003 fcd9 	bl	8007e64 <HAL_GPIO_ReadPin>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	f041 8112 	bne.w	80056de <SystemGetsSignal+0x130a>
    {
        HAL_Delay(50); // 防抖动延时
 80044ba:	2032      	movs	r0, #50	@ 0x32
 80044bc:	f003 f8bc 	bl	8007638 <HAL_Delay>
        if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET && !gameOver && !game2048_game_over)
 80044c0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80044c4:	4873      	ldr	r0, [pc, #460]	@ (8004694 <SystemGetsSignal+0x2c0>)
 80044c6:	f003 fccd 	bl	8007e64 <HAL_GPIO_ReadPin>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	f041 8106 	bne.w	80056de <SystemGetsSignal+0x130a>
 80044d2:	4b71      	ldr	r3, [pc, #452]	@ (8004698 <SystemGetsSignal+0x2c4>)
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	f083 0301 	eor.w	r3, r3, #1
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	2b00      	cmp	r3, #0
 80044de:	f001 80fe 	beq.w	80056de <SystemGetsSignal+0x130a>
 80044e2:	4b6e      	ldr	r3, [pc, #440]	@ (800469c <SystemGetsSignal+0x2c8>)
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	f083 0301 	eor.w	r3, r3, #1
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	f001 80f6 	beq.w	80056de <SystemGetsSignal+0x130a>
        {
// #pragma region 游戏部分
            if (menuRank == 1 && menuSelection == 1)
 80044f2:	4b6b      	ldr	r3, [pc, #428]	@ (80046a0 <SystemGetsSignal+0x2cc>)
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	f040 80f0 	bne.w	80046dc <SystemGetsSignal+0x308>
 80044fc:	4b64      	ldr	r3, [pc, #400]	@ (8004690 <SystemGetsSignal+0x2bc>)
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	2b01      	cmp	r3, #1
 8004502:	f040 80eb 	bne.w	80046dc <SystemGetsSignal+0x308>
            {
                menuRank = 2;
 8004506:	4b66      	ldr	r3, [pc, #408]	@ (80046a0 <SystemGetsSignal+0x2cc>)
 8004508:	2202      	movs	r2, #2
 800450a:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_GAMES;
 800450c:	4b5c      	ldr	r3, [pc, #368]	@ (8004680 <SystemGetsSignal+0x2ac>)
 800450e:	2205      	movs	r2, #5
 8004510:	701a      	strb	r2, [r3, #0]
                OLED_DoTweenObject(&Menu_AnimationManager, "GamesButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (2 - menuSelection), 1000, EASE_IN_CIRC);
 8004512:	4b5f      	ldr	r3, [pc, #380]	@ (8004690 <SystemGetsSignal+0x2bc>)
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	f1c3 0202 	rsb	r2, r3, #2
 800451a:	4613      	mov	r3, r2
 800451c:	005b      	lsls	r3, r3, #1
 800451e:	4413      	add	r3, r2
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	4413      	add	r3, r2
 8004524:	3303      	adds	r3, #3
 8004526:	4618      	mov	r0, r3
 8004528:	f7fb fedc 	bl	80002e4 <__aeabi_i2f>
 800452c:	4603      	mov	r3, r0
 800452e:	220a      	movs	r2, #10
 8004530:	9201      	str	r2, [sp, #4]
 8004532:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004536:	9200      	str	r2, [sp, #0]
 8004538:	4a5a      	ldr	r2, [pc, #360]	@ (80046a4 <SystemGetsSignal+0x2d0>)
 800453a:	495b      	ldr	r1, [pc, #364]	@ (80046a8 <SystemGetsSignal+0x2d4>)
 800453c:	485b      	ldr	r0, [pc, #364]	@ (80046ac <SystemGetsSignal+0x2d8>)
 800453e:	f002 f9d1 	bl	80068e4 <OLED_DoTweenObject>
                HAL_Delay(100);
 8004542:	2064      	movs	r0, #100	@ 0x64
 8004544:	f003 f878 	bl	8007638 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "ToolsButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (3 - menuSelection), 1000, EASE_IN_CIRC);
 8004548:	4b51      	ldr	r3, [pc, #324]	@ (8004690 <SystemGetsSignal+0x2bc>)
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	f1c3 0203 	rsb	r2, r3, #3
 8004550:	4613      	mov	r3, r2
 8004552:	005b      	lsls	r3, r3, #1
 8004554:	4413      	add	r3, r2
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	4413      	add	r3, r2
 800455a:	3303      	adds	r3, #3
 800455c:	4618      	mov	r0, r3
 800455e:	f7fb fec1 	bl	80002e4 <__aeabi_i2f>
 8004562:	4603      	mov	r3, r0
 8004564:	220a      	movs	r2, #10
 8004566:	9201      	str	r2, [sp, #4]
 8004568:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800456c:	9200      	str	r2, [sp, #0]
 800456e:	4a4d      	ldr	r2, [pc, #308]	@ (80046a4 <SystemGetsSignal+0x2d0>)
 8004570:	494f      	ldr	r1, [pc, #316]	@ (80046b0 <SystemGetsSignal+0x2dc>)
 8004572:	484e      	ldr	r0, [pc, #312]	@ (80046ac <SystemGetsSignal+0x2d8>)
 8004574:	f002 f9b6 	bl	80068e4 <OLED_DoTweenObject>
                HAL_Delay(100);
 8004578:	2064      	movs	r0, #100	@ 0x64
 800457a:	f003 f85d 	bl	8007638 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "StatusButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (4 - menuSelection), 1000, EASE_IN_CIRC);
 800457e:	4b44      	ldr	r3, [pc, #272]	@ (8004690 <SystemGetsSignal+0x2bc>)
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	f1c3 0204 	rsb	r2, r3, #4
 8004586:	4613      	mov	r3, r2
 8004588:	005b      	lsls	r3, r3, #1
 800458a:	4413      	add	r3, r2
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	4413      	add	r3, r2
 8004590:	3303      	adds	r3, #3
 8004592:	4618      	mov	r0, r3
 8004594:	f7fb fea6 	bl	80002e4 <__aeabi_i2f>
 8004598:	4603      	mov	r3, r0
 800459a:	220a      	movs	r2, #10
 800459c:	9201      	str	r2, [sp, #4]
 800459e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80045a2:	9200      	str	r2, [sp, #0]
 80045a4:	4a3f      	ldr	r2, [pc, #252]	@ (80046a4 <SystemGetsSignal+0x2d0>)
 80045a6:	4943      	ldr	r1, [pc, #268]	@ (80046b4 <SystemGetsSignal+0x2e0>)
 80045a8:	4840      	ldr	r0, [pc, #256]	@ (80046ac <SystemGetsSignal+0x2d8>)
 80045aa:	f002 f99b 	bl	80068e4 <OLED_DoTweenObject>
                HAL_Delay(100);
 80045ae:	2064      	movs	r0, #100	@ 0x64
 80045b0:	f003 f842 	bl	8007638 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "SettingsButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (5 - menuSelection), 1000, EASE_IN_CIRC);
 80045b4:	4b36      	ldr	r3, [pc, #216]	@ (8004690 <SystemGetsSignal+0x2bc>)
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	f1c3 0205 	rsb	r2, r3, #5
 80045bc:	4613      	mov	r3, r2
 80045be:	005b      	lsls	r3, r3, #1
 80045c0:	4413      	add	r3, r2
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	4413      	add	r3, r2
 80045c6:	3303      	adds	r3, #3
 80045c8:	4618      	mov	r0, r3
 80045ca:	f7fb fe8b 	bl	80002e4 <__aeabi_i2f>
 80045ce:	4603      	mov	r3, r0
 80045d0:	220a      	movs	r2, #10
 80045d2:	9201      	str	r2, [sp, #4]
 80045d4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80045d8:	9200      	str	r2, [sp, #0]
 80045da:	4a32      	ldr	r2, [pc, #200]	@ (80046a4 <SystemGetsSignal+0x2d0>)
 80045dc:	4936      	ldr	r1, [pc, #216]	@ (80046b8 <SystemGetsSignal+0x2e4>)
 80045de:	4833      	ldr	r0, [pc, #204]	@ (80046ac <SystemGetsSignal+0x2d8>)
 80045e0:	f002 f980 	bl	80068e4 <OLED_DoTweenObject>
                HAL_Delay(100);
 80045e4:	2064      	movs	r0, #100	@ 0x64
 80045e6:	f003 f827 	bl	8007638 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "AboutButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (6 - menuSelection), 1000, EASE_IN_CIRC);
 80045ea:	4b29      	ldr	r3, [pc, #164]	@ (8004690 <SystemGetsSignal+0x2bc>)
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	f1c3 0206 	rsb	r2, r3, #6
 80045f2:	4613      	mov	r3, r2
 80045f4:	005b      	lsls	r3, r3, #1
 80045f6:	4413      	add	r3, r2
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	4413      	add	r3, r2
 80045fc:	3303      	adds	r3, #3
 80045fe:	4618      	mov	r0, r3
 8004600:	f7fb fe70 	bl	80002e4 <__aeabi_i2f>
 8004604:	4603      	mov	r3, r0
 8004606:	220a      	movs	r2, #10
 8004608:	9201      	str	r2, [sp, #4]
 800460a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800460e:	9200      	str	r2, [sp, #0]
 8004610:	4a24      	ldr	r2, [pc, #144]	@ (80046a4 <SystemGetsSignal+0x2d0>)
 8004612:	492a      	ldr	r1, [pc, #168]	@ (80046bc <SystemGetsSignal+0x2e8>)
 8004614:	4825      	ldr	r0, [pc, #148]	@ (80046ac <SystemGetsSignal+0x2d8>)
 8004616:	f002 f965 	bl	80068e4 <OLED_DoTweenObject>

                OLED_DoTweenObject(&Games_AnimationManager, "Snake", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1000, EASE_IN_CIRC);
 800461a:	230a      	movs	r3, #10
 800461c:	9301      	str	r3, [sp, #4]
 800461e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004622:	9300      	str	r3, [sp, #0]
 8004624:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8004628:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800462c:	4924      	ldr	r1, [pc, #144]	@ (80046c0 <SystemGetsSignal+0x2ec>)
 800462e:	4825      	ldr	r0, [pc, #148]	@ (80046c4 <SystemGetsSignal+0x2f0>)
 8004630:	f002 f958 	bl	80068e4 <OLED_DoTweenObject>
                HAL_Delay(100);
 8004634:	2064      	movs	r0, #100	@ 0x64
 8004636:	f002 ffff 	bl	8007638 <HAL_Delay>
                OLED_DoTweenObject(&Games_AnimationManager, "2048", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1000, EASE_IN_CIRC);
 800463a:	230a      	movs	r3, #10
 800463c:	9301      	str	r3, [sp, #4]
 800463e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004642:	9300      	str	r3, [sp, #0]
 8004644:	4b20      	ldr	r3, [pc, #128]	@ (80046c8 <SystemGetsSignal+0x2f4>)
 8004646:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800464a:	4920      	ldr	r1, [pc, #128]	@ (80046cc <SystemGetsSignal+0x2f8>)
 800464c:	481d      	ldr	r0, [pc, #116]	@ (80046c4 <SystemGetsSignal+0x2f0>)
 800464e:	f002 f949 	bl	80068e4 <OLED_DoTweenObject>
                HAL_Delay(100);
 8004652:	2064      	movs	r0, #100	@ 0x64
 8004654:	f002 fff0 	bl	8007638 <HAL_Delay>
                OLED_DoTweenObjectY(&g_AnimationManager, "BackButton", OLED_UI_START_Y + OLED_UI_GAP_Y * 3, 1, EASE_IN_CIRC);
 8004658:	230a      	movs	r3, #10
 800465a:	9300      	str	r3, [sp, #0]
 800465c:	2301      	movs	r3, #1
 800465e:	4a1c      	ldr	r2, [pc, #112]	@ (80046d0 <SystemGetsSignal+0x2fc>)
 8004660:	491c      	ldr	r1, [pc, #112]	@ (80046d4 <SystemGetsSignal+0x300>)
 8004662:	481d      	ldr	r0, [pc, #116]	@ (80046d8 <SystemGetsSignal+0x304>)
 8004664:	f002 fa11 	bl	8006a8a <OLED_DoTweenObjectY>
                OLED_DoTweenObjectX(&g_AnimationManager, "BackButton", OLED_UI_END_X, 1000, EASE_IN_CIRC);
 8004668:	230a      	movs	r3, #10
 800466a:	9300      	str	r3, [sp, #0]
 800466c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004670:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004674:	4917      	ldr	r1, [pc, #92]	@ (80046d4 <SystemGetsSignal+0x300>)
 8004676:	4818      	ldr	r0, [pc, #96]	@ (80046d8 <SystemGetsSignal+0x304>)
 8004678:	f002 f9d2 	bl	8006a20 <OLED_DoTweenObjectX>
 800467c:	f001 b826 	b.w	80056cc <SystemGetsSignal+0x12f8>
 8004680:	20000b09 	.word	0x20000b09
 8004684:	20000b0b 	.word	0x20000b0b
 8004688:	200002f4 	.word	0x200002f4
 800468c:	20000004 	.word	0x20000004
 8004690:	20000002 	.word	0x20000002
 8004694:	40010c00 	.word	0x40010c00
 8004698:	20000226 	.word	0x20000226
 800469c:	20000250 	.word	0x20000250
 80046a0:	20000001 	.word	0x20000001
 80046a4:	c2b40000 	.word	0xc2b40000
 80046a8:	0800c9d4 	.word	0x0800c9d4
 80046ac:	20000f14 	.word	0x20000f14
 80046b0:	0800c9e0 	.word	0x0800c9e0
 80046b4:	0800c9ec 	.word	0x0800c9ec
 80046b8:	0800c9fc 	.word	0x0800c9fc
 80046bc:	0800ca0c 	.word	0x0800ca0c
 80046c0:	0800c934 	.word	0x0800c934
 80046c4:	20001508 	.word	0x20001508
 80046c8:	41e80000 	.word	0x41e80000
 80046cc:	0800c93c 	.word	0x0800c93c
 80046d0:	42280000 	.word	0x42280000
 80046d4:	0800c944 	.word	0x0800c944
 80046d8:	200038c0 	.word	0x200038c0
            }
            else if (menuRank == 2 && menuSelection == 3 && currentPage == UI_PAGE_GAMES)
 80046dc:	4bb1      	ldr	r3, [pc, #708]	@ (80049a4 <SystemGetsSignal+0x5d0>)
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	f040 8088 	bne.w	80047f6 <SystemGetsSignal+0x422>
 80046e6:	4bb0      	ldr	r3, [pc, #704]	@ (80049a8 <SystemGetsSignal+0x5d4>)
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	2b03      	cmp	r3, #3
 80046ec:	f040 8083 	bne.w	80047f6 <SystemGetsSignal+0x422>
 80046f0:	4bae      	ldr	r3, [pc, #696]	@ (80049ac <SystemGetsSignal+0x5d8>)
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	2b05      	cmp	r3, #5
 80046f6:	d17e      	bne.n	80047f6 <SystemGetsSignal+0x422>
            {
                menuRank = 1;
 80046f8:	4baa      	ldr	r3, [pc, #680]	@ (80049a4 <SystemGetsSignal+0x5d0>)
 80046fa:	2201      	movs	r2, #1
 80046fc:	701a      	strb	r2, [r3, #0]
                menuSelection = 1;
 80046fe:	4baa      	ldr	r3, [pc, #680]	@ (80049a8 <SystemGetsSignal+0x5d4>)
 8004700:	2201      	movs	r2, #1
 8004702:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_MENU;
 8004704:	4ba9      	ldr	r3, [pc, #676]	@ (80049ac <SystemGetsSignal+0x5d8>)
 8004706:	2200      	movs	r2, #0
 8004708:	701a      	strb	r2, [r3, #0]
                OLED_DoTweenObject(&Games_AnimationManager, "Snake", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * -1, 1000, EASE_IN_CIRC);
 800470a:	230a      	movs	r3, #10
 800470c:	9301      	str	r3, [sp, #4]
 800470e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004712:	9300      	str	r3, [sp, #0]
 8004714:	4ba6      	ldr	r3, [pc, #664]	@ (80049b0 <SystemGetsSignal+0x5dc>)
 8004716:	4aa7      	ldr	r2, [pc, #668]	@ (80049b4 <SystemGetsSignal+0x5e0>)
 8004718:	49a7      	ldr	r1, [pc, #668]	@ (80049b8 <SystemGetsSignal+0x5e4>)
 800471a:	48a8      	ldr	r0, [pc, #672]	@ (80049bc <SystemGetsSignal+0x5e8>)
 800471c:	f002 f8e2 	bl	80068e4 <OLED_DoTweenObject>
                HAL_Delay(100);
 8004720:	2064      	movs	r0, #100	@ 0x64
 8004722:	f002 ff89 	bl	8007638 <HAL_Delay>
                OLED_DoTweenObject(&Games_AnimationManager, "2048", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 0, 1000, EASE_IN_CIRC);
 8004726:	230a      	movs	r3, #10
 8004728:	9301      	str	r3, [sp, #4]
 800472a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800472e:	9300      	str	r3, [sp, #0]
 8004730:	4ba3      	ldr	r3, [pc, #652]	@ (80049c0 <SystemGetsSignal+0x5ec>)
 8004732:	4aa0      	ldr	r2, [pc, #640]	@ (80049b4 <SystemGetsSignal+0x5e0>)
 8004734:	49a3      	ldr	r1, [pc, #652]	@ (80049c4 <SystemGetsSignal+0x5f0>)
 8004736:	48a1      	ldr	r0, [pc, #644]	@ (80049bc <SystemGetsSignal+0x5e8>)
 8004738:	f002 f8d4 	bl	80068e4 <OLED_DoTweenObject>
                HAL_Delay(100);
 800473c:	2064      	movs	r0, #100	@ 0x64
 800473e:	f002 ff7b 	bl	8007638 <HAL_Delay>
                OLED_DoTweenObject(&g_AnimationManager, "BackButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1000, EASE_IN_CIRC);
 8004742:	230a      	movs	r3, #10
 8004744:	9301      	str	r3, [sp, #4]
 8004746:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800474a:	9300      	str	r3, [sp, #0]
 800474c:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8004750:	4a98      	ldr	r2, [pc, #608]	@ (80049b4 <SystemGetsSignal+0x5e0>)
 8004752:	499d      	ldr	r1, [pc, #628]	@ (80049c8 <SystemGetsSignal+0x5f4>)
 8004754:	489d      	ldr	r0, [pc, #628]	@ (80049cc <SystemGetsSignal+0x5f8>)
 8004756:	f002 f8c5 	bl	80068e4 <OLED_DoTweenObject>

                OLED_DoTweenObject(&Menu_AnimationManager, "GamesButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1000, EASE_IN_CIRC);
 800475a:	230a      	movs	r3, #10
 800475c:	9301      	str	r3, [sp, #4]
 800475e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004762:	9300      	str	r3, [sp, #0]
 8004764:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8004768:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800476c:	4998      	ldr	r1, [pc, #608]	@ (80049d0 <SystemGetsSignal+0x5fc>)
 800476e:	4899      	ldr	r0, [pc, #612]	@ (80049d4 <SystemGetsSignal+0x600>)
 8004770:	f002 f8b8 	bl	80068e4 <OLED_DoTweenObject>
                HAL_Delay(100);
 8004774:	2064      	movs	r0, #100	@ 0x64
 8004776:	f002 ff5f 	bl	8007638 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "ToolsButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1000, EASE_IN_CIRC);
 800477a:	230a      	movs	r3, #10
 800477c:	9301      	str	r3, [sp, #4]
 800477e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004782:	9300      	str	r3, [sp, #0]
 8004784:	4b94      	ldr	r3, [pc, #592]	@ (80049d8 <SystemGetsSignal+0x604>)
 8004786:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800478a:	4994      	ldr	r1, [pc, #592]	@ (80049dc <SystemGetsSignal+0x608>)
 800478c:	4891      	ldr	r0, [pc, #580]	@ (80049d4 <SystemGetsSignal+0x600>)
 800478e:	f002 f8a9 	bl	80068e4 <OLED_DoTweenObject>
                HAL_Delay(100);
 8004792:	2064      	movs	r0, #100	@ 0x64
 8004794:	f002 ff50 	bl	8007638 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "StatusButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, 1000, EASE_IN_CIRC);
 8004798:	230a      	movs	r3, #10
 800479a:	9301      	str	r3, [sp, #4]
 800479c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80047a0:	9300      	str	r3, [sp, #0]
 80047a2:	4b8f      	ldr	r3, [pc, #572]	@ (80049e0 <SystemGetsSignal+0x60c>)
 80047a4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80047a8:	498e      	ldr	r1, [pc, #568]	@ (80049e4 <SystemGetsSignal+0x610>)
 80047aa:	488a      	ldr	r0, [pc, #552]	@ (80049d4 <SystemGetsSignal+0x600>)
 80047ac:	f002 f89a 	bl	80068e4 <OLED_DoTweenObject>
                HAL_Delay(100);
 80047b0:	2064      	movs	r0, #100	@ 0x64
 80047b2:	f002 ff41 	bl	8007638 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "SettingsButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 4, 1000, EASE_IN_CIRC);
 80047b6:	230a      	movs	r3, #10
 80047b8:	9301      	str	r3, [sp, #4]
 80047ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80047be:	9300      	str	r3, [sp, #0]
 80047c0:	4b89      	ldr	r3, [pc, #548]	@ (80049e8 <SystemGetsSignal+0x614>)
 80047c2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80047c6:	4989      	ldr	r1, [pc, #548]	@ (80049ec <SystemGetsSignal+0x618>)
 80047c8:	4882      	ldr	r0, [pc, #520]	@ (80049d4 <SystemGetsSignal+0x600>)
 80047ca:	f002 f88b 	bl	80068e4 <OLED_DoTweenObject>
                HAL_Delay(100);
 80047ce:	2064      	movs	r0, #100	@ 0x64
 80047d0:	f002 ff32 	bl	8007638 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "AboutButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 5, 1000, EASE_IN_CIRC);
 80047d4:	230a      	movs	r3, #10
 80047d6:	9301      	str	r3, [sp, #4]
 80047d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80047dc:	9300      	str	r3, [sp, #0]
 80047de:	4b84      	ldr	r3, [pc, #528]	@ (80049f0 <SystemGetsSignal+0x61c>)
 80047e0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80047e4:	4983      	ldr	r1, [pc, #524]	@ (80049f4 <SystemGetsSignal+0x620>)
 80047e6:	487b      	ldr	r0, [pc, #492]	@ (80049d4 <SystemGetsSignal+0x600>)
 80047e8:	f002 f87c 	bl	80068e4 <OLED_DoTweenObject>
                resetAnimation = true;
 80047ec:	4b82      	ldr	r3, [pc, #520]	@ (80049f8 <SystemGetsSignal+0x624>)
 80047ee:	2201      	movs	r2, #1
 80047f0:	701a      	strb	r2, [r3, #0]
 80047f2:	f000 bf6b 	b.w	80056cc <SystemGetsSignal+0x12f8>
            }
            else if (menuRank == 2 && menuSelection == 1 && currentPage == UI_PAGE_GAMES)
 80047f6:	4b6b      	ldr	r3, [pc, #428]	@ (80049a4 <SystemGetsSignal+0x5d0>)
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d15d      	bne.n	80048ba <SystemGetsSignal+0x4e6>
 80047fe:	4b6a      	ldr	r3, [pc, #424]	@ (80049a8 <SystemGetsSignal+0x5d4>)
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	2b01      	cmp	r3, #1
 8004804:	d159      	bne.n	80048ba <SystemGetsSignal+0x4e6>
 8004806:	4b69      	ldr	r3, [pc, #420]	@ (80049ac <SystemGetsSignal+0x5d8>)
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	2b05      	cmp	r3, #5
 800480c:	d155      	bne.n	80048ba <SystemGetsSignal+0x4e6>
            {
                menuRank = 3;
 800480e:	4b65      	ldr	r3, [pc, #404]	@ (80049a4 <SystemGetsSignal+0x5d0>)
 8004810:	2203      	movs	r2, #3
 8004812:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_GAMES;
 8004814:	4b65      	ldr	r3, [pc, #404]	@ (80049ac <SystemGetsSignal+0x5d8>)
 8004816:	2205      	movs	r2, #5
 8004818:	701a      	strb	r2, [r3, #0]
                Snake_InitGame();
 800481a:	f7fc f8c3 	bl	80009a4 <Snake_InitGame>
                OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSnake", (OLED_WIDTH - strlen("Greedy Snake") * 6), OLED_TITLE_Start_Y, 1, EASE_IN_CUBIC);
 800481e:	2304      	movs	r3, #4
 8004820:	9301      	str	r3, [sp, #4]
 8004822:	2301      	movs	r3, #1
 8004824:	9300      	str	r3, [sp, #0]
 8004826:	4b62      	ldr	r3, [pc, #392]	@ (80049b0 <SystemGetsSignal+0x5dc>)
 8004828:	4a74      	ldr	r2, [pc, #464]	@ (80049fc <SystemGetsSignal+0x628>)
 800482a:	4975      	ldr	r1, [pc, #468]	@ (8004a00 <SystemGetsSignal+0x62c>)
 800482c:	4875      	ldr	r0, [pc, #468]	@ (8004a04 <SystemGetsSignal+0x630>)
 800482e:	f002 f859 	bl	80068e4 <OLED_DoTweenObject>
                OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", 0, 8, 1000, EASE_IN_CUBIC);
 8004832:	2304      	movs	r3, #4
 8004834:	9301      	str	r3, [sp, #4]
 8004836:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800483a:	9300      	str	r3, [sp, #0]
 800483c:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8004840:	f04f 0200 	mov.w	r2, #0
 8004844:	4970      	ldr	r1, [pc, #448]	@ (8004a08 <SystemGetsSignal+0x634>)
 8004846:	4861      	ldr	r0, [pc, #388]	@ (80049cc <SystemGetsSignal+0x5f8>)
 8004848:	f002 f84c 	bl	80068e4 <OLED_DoTweenObject>
                OLED_DoTweenObject(&g_AnimationManager, "CursorScale", 0, 8, 1000, EASE_INOUT_CIRC);
 800484c:	230c      	movs	r3, #12
 800484e:	9301      	str	r3, [sp, #4]
 8004850:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004854:	9300      	str	r3, [sp, #0]
 8004856:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 800485a:	f04f 0200 	mov.w	r2, #0
 800485e:	496b      	ldr	r1, [pc, #428]	@ (8004a0c <SystemGetsSignal+0x638>)
 8004860:	485a      	ldr	r0, [pc, #360]	@ (80049cc <SystemGetsSignal+0x5f8>)
 8004862:	f002 f83f 	bl	80068e4 <OLED_DoTweenObject>
                OLED_DoTweenObject(&Games_AnimationManager, "Snake", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1000, EASE_IN_CIRC);
 8004866:	230a      	movs	r3, #10
 8004868:	9301      	str	r3, [sp, #4]
 800486a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800486e:	9300      	str	r3, [sp, #0]
 8004870:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8004874:	4a4f      	ldr	r2, [pc, #316]	@ (80049b4 <SystemGetsSignal+0x5e0>)
 8004876:	4950      	ldr	r1, [pc, #320]	@ (80049b8 <SystemGetsSignal+0x5e4>)
 8004878:	4850      	ldr	r0, [pc, #320]	@ (80049bc <SystemGetsSignal+0x5e8>)
 800487a:	f002 f833 	bl	80068e4 <OLED_DoTweenObject>
                HAL_Delay(100);
 800487e:	2064      	movs	r0, #100	@ 0x64
 8004880:	f002 feda 	bl	8007638 <HAL_Delay>
                OLED_DoTweenObject(&Games_AnimationManager, "2048", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1000, EASE_IN_CIRC);
 8004884:	230a      	movs	r3, #10
 8004886:	9301      	str	r3, [sp, #4]
 8004888:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800488c:	9300      	str	r3, [sp, #0]
 800488e:	4b52      	ldr	r3, [pc, #328]	@ (80049d8 <SystemGetsSignal+0x604>)
 8004890:	4a48      	ldr	r2, [pc, #288]	@ (80049b4 <SystemGetsSignal+0x5e0>)
 8004892:	494c      	ldr	r1, [pc, #304]	@ (80049c4 <SystemGetsSignal+0x5f0>)
 8004894:	4849      	ldr	r0, [pc, #292]	@ (80049bc <SystemGetsSignal+0x5e8>)
 8004896:	f002 f825 	bl	80068e4 <OLED_DoTweenObject>
                HAL_Delay(100);
 800489a:	2064      	movs	r0, #100	@ 0x64
 800489c:	f002 fecc 	bl	8007638 <HAL_Delay>
                OLED_DoTweenObject(&g_AnimationManager, "BackButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, 1000, EASE_IN_CIRC);
 80048a0:	230a      	movs	r3, #10
 80048a2:	9301      	str	r3, [sp, #4]
 80048a4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80048a8:	9300      	str	r3, [sp, #0]
 80048aa:	4b4d      	ldr	r3, [pc, #308]	@ (80049e0 <SystemGetsSignal+0x60c>)
 80048ac:	4a41      	ldr	r2, [pc, #260]	@ (80049b4 <SystemGetsSignal+0x5e0>)
 80048ae:	4946      	ldr	r1, [pc, #280]	@ (80049c8 <SystemGetsSignal+0x5f4>)
 80048b0:	4846      	ldr	r0, [pc, #280]	@ (80049cc <SystemGetsSignal+0x5f8>)
 80048b2:	f002 f817 	bl	80068e4 <OLED_DoTweenObject>
 80048b6:	f000 bf09 	b.w	80056cc <SystemGetsSignal+0x12f8>
            }
            else if (menuRank == 3 && menuSelection == 1 && cancelSelection && UI_PAGE_GAMES && !gameOver  && currentPage == UI_PAGE_GAMES)
 80048ba:	4b3a      	ldr	r3, [pc, #232]	@ (80049a4 <SystemGetsSignal+0x5d0>)
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	2b03      	cmp	r3, #3
 80048c0:	f040 80b0 	bne.w	8004a24 <SystemGetsSignal+0x650>
 80048c4:	4b38      	ldr	r3, [pc, #224]	@ (80049a8 <SystemGetsSignal+0x5d4>)
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	f040 80ab 	bne.w	8004a24 <SystemGetsSignal+0x650>
 80048ce:	4b50      	ldr	r3, [pc, #320]	@ (8004a10 <SystemGetsSignal+0x63c>)
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	f000 80a6 	beq.w	8004a24 <SystemGetsSignal+0x650>
 80048d8:	4b4e      	ldr	r3, [pc, #312]	@ (8004a14 <SystemGetsSignal+0x640>)
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	f083 0301 	eor.w	r3, r3, #1
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	f000 809e 	beq.w	8004a24 <SystemGetsSignal+0x650>
 80048e8:	4b30      	ldr	r3, [pc, #192]	@ (80049ac <SystemGetsSignal+0x5d8>)
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	2b05      	cmp	r3, #5
 80048ee:	f040 8099 	bne.w	8004a24 <SystemGetsSignal+0x650>
            {
                menuRank = 2;
 80048f2:	4b2c      	ldr	r3, [pc, #176]	@ (80049a4 <SystemGetsSignal+0x5d0>)
 80048f4:	2202      	movs	r2, #2
 80048f6:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_GAMES;
 80048f8:	4b2c      	ldr	r3, [pc, #176]	@ (80049ac <SystemGetsSignal+0x5d8>)
 80048fa:	2205      	movs	r2, #5
 80048fc:	701a      	strb	r2, [r3, #0]
                
                OLED_DoTweenObject(&g_Title_AnimationManager, "TitleSnake", (OLED_WIDTH - strlen("Greedy Snake") * 6), OLED_TITLE_End_Y, 1000, EASE_IN_CUBIC);
 80048fe:	2304      	movs	r3, #4
 8004900:	9301      	str	r3, [sp, #4]
 8004902:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004906:	9300      	str	r3, [sp, #0]
 8004908:	f04f 0300 	mov.w	r3, #0
 800490c:	4a3b      	ldr	r2, [pc, #236]	@ (80049fc <SystemGetsSignal+0x628>)
 800490e:	493c      	ldr	r1, [pc, #240]	@ (8004a00 <SystemGetsSignal+0x62c>)
 8004910:	483c      	ldr	r0, [pc, #240]	@ (8004a04 <SystemGetsSignal+0x630>)
 8004912:	f001 ffe7 	bl	80068e4 <OLED_DoTweenObject>
                OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Greedy Snake") * 6 + 3, 8, 1000, EASE_IN_CUBIC);
 8004916:	2304      	movs	r3, #4
 8004918:	9301      	str	r3, [sp, #4]
 800491a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800491e:	9300      	str	r3, [sp, #0]
 8004920:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8004924:	4a3c      	ldr	r2, [pc, #240]	@ (8004a18 <SystemGetsSignal+0x644>)
 8004926:	4938      	ldr	r1, [pc, #224]	@ (8004a08 <SystemGetsSignal+0x634>)
 8004928:	4828      	ldr	r0, [pc, #160]	@ (80049cc <SystemGetsSignal+0x5f8>)
 800492a:	f001 ffdb 	bl	80068e4 <OLED_DoTweenObject>
                OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Snake") * 6 + 3, 10, 1000, EASE_INOUT_CIRC);
 800492e:	230c      	movs	r3, #12
 8004930:	9301      	str	r3, [sp, #4]
 8004932:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004936:	9300      	str	r3, [sp, #0]
 8004938:	4b38      	ldr	r3, [pc, #224]	@ (8004a1c <SystemGetsSignal+0x648>)
 800493a:	4a39      	ldr	r2, [pc, #228]	@ (8004a20 <SystemGetsSignal+0x64c>)
 800493c:	4933      	ldr	r1, [pc, #204]	@ (8004a0c <SystemGetsSignal+0x638>)
 800493e:	4823      	ldr	r0, [pc, #140]	@ (80049cc <SystemGetsSignal+0x5f8>)
 8004940:	f001 ffd0 	bl	80068e4 <OLED_DoTweenObject>
                OLED_DoTweenObject(&Games_AnimationManager, "Snake", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1000, EASE_IN_CIRC);
 8004944:	230a      	movs	r3, #10
 8004946:	9301      	str	r3, [sp, #4]
 8004948:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800494c:	9300      	str	r3, [sp, #0]
 800494e:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8004952:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004956:	4918      	ldr	r1, [pc, #96]	@ (80049b8 <SystemGetsSignal+0x5e4>)
 8004958:	4818      	ldr	r0, [pc, #96]	@ (80049bc <SystemGetsSignal+0x5e8>)
 800495a:	f001 ffc3 	bl	80068e4 <OLED_DoTweenObject>
                HAL_Delay(100);
 800495e:	2064      	movs	r0, #100	@ 0x64
 8004960:	f002 fe6a 	bl	8007638 <HAL_Delay>
                OLED_DoTweenObject(&Games_AnimationManager, "2048", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1000, EASE_IN_CIRC);
 8004964:	230a      	movs	r3, #10
 8004966:	9301      	str	r3, [sp, #4]
 8004968:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800496c:	9300      	str	r3, [sp, #0]
 800496e:	4b1a      	ldr	r3, [pc, #104]	@ (80049d8 <SystemGetsSignal+0x604>)
 8004970:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004974:	4913      	ldr	r1, [pc, #76]	@ (80049c4 <SystemGetsSignal+0x5f0>)
 8004976:	4811      	ldr	r0, [pc, #68]	@ (80049bc <SystemGetsSignal+0x5e8>)
 8004978:	f001 ffb4 	bl	80068e4 <OLED_DoTweenObject>
                HAL_Delay(100);
 800497c:	2064      	movs	r0, #100	@ 0x64
 800497e:	f002 fe5b 	bl	8007638 <HAL_Delay>
                OLED_DoTweenObject(&g_AnimationManager, "BackButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, 1000, EASE_IN_CIRC);
 8004982:	230a      	movs	r3, #10
 8004984:	9301      	str	r3, [sp, #4]
 8004986:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800498a:	9300      	str	r3, [sp, #0]
 800498c:	4b14      	ldr	r3, [pc, #80]	@ (80049e0 <SystemGetsSignal+0x60c>)
 800498e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004992:	490d      	ldr	r1, [pc, #52]	@ (80049c8 <SystemGetsSignal+0x5f4>)
 8004994:	480d      	ldr	r0, [pc, #52]	@ (80049cc <SystemGetsSignal+0x5f8>)
 8004996:	f001 ffa5 	bl	80068e4 <OLED_DoTweenObject>
                cancelSelection = false;
 800499a:	4b1d      	ldr	r3, [pc, #116]	@ (8004a10 <SystemGetsSignal+0x63c>)
 800499c:	2200      	movs	r2, #0
 800499e:	701a      	strb	r2, [r3, #0]
 80049a0:	f000 be94 	b.w	80056cc <SystemGetsSignal+0x12f8>
 80049a4:	20000001 	.word	0x20000001
 80049a8:	20000002 	.word	0x20000002
 80049ac:	20000b09 	.word	0x20000b09
 80049b0:	c1200000 	.word	0xc1200000
 80049b4:	c2b40000 	.word	0xc2b40000
 80049b8:	0800c934 	.word	0x0800c934
 80049bc:	20001508 	.word	0x20001508
 80049c0:	40400000 	.word	0x40400000
 80049c4:	0800c93c 	.word	0x0800c93c
 80049c8:	0800c944 	.word	0x0800c944
 80049cc:	200038c0 	.word	0x200038c0
 80049d0:	0800c9d4 	.word	0x0800c9d4
 80049d4:	20000f14 	.word	0x20000f14
 80049d8:	41e80000 	.word	0x41e80000
 80049dc:	0800c9e0 	.word	0x0800c9e0
 80049e0:	42280000 	.word	0x42280000
 80049e4:	0800c9ec 	.word	0x0800c9ec
 80049e8:	425c0000 	.word	0x425c0000
 80049ec:	0800c9fc 	.word	0x0800c9fc
 80049f0:	42880000 	.word	0x42880000
 80049f4:	0800ca0c 	.word	0x0800ca0c
 80049f8:	20000b0c 	.word	0x20000b0c
 80049fc:	42600000 	.word	0x42600000
 8004a00:	0800c860 	.word	0x0800c860
 8004a04:	200032cc 	.word	0x200032cc
 8004a08:	0800c9b0 	.word	0x0800c9b0
 8004a0c:	0800c9c8 	.word	0x0800c9c8
 8004a10:	20000b0b 	.word	0x20000b0b
 8004a14:	20000226 	.word	0x20000226
 8004a18:	42960000 	.word	0x42960000
 8004a1c:	41200000 	.word	0x41200000
 8004a20:	42040000 	.word	0x42040000
            }
            else if (menuRank == 2 && menuSelection == 2 && currentPage == UI_PAGE_GAMES)
 8004a24:	4b68      	ldr	r3, [pc, #416]	@ (8004bc8 <SystemGetsSignal+0x7f4>)
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d157      	bne.n	8004adc <SystemGetsSignal+0x708>
 8004a2c:	4b67      	ldr	r3, [pc, #412]	@ (8004bcc <SystemGetsSignal+0x7f8>)
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	d153      	bne.n	8004adc <SystemGetsSignal+0x708>
 8004a34:	4b66      	ldr	r3, [pc, #408]	@ (8004bd0 <SystemGetsSignal+0x7fc>)
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	2b05      	cmp	r3, #5
 8004a3a:	d14f      	bne.n	8004adc <SystemGetsSignal+0x708>
            {
                menuRank = 3;
 8004a3c:	4b62      	ldr	r3, [pc, #392]	@ (8004bc8 <SystemGetsSignal+0x7f4>)
 8004a3e:	2203      	movs	r2, #3
 8004a40:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_GAMES;
 8004a42:	4b63      	ldr	r3, [pc, #396]	@ (8004bd0 <SystemGetsSignal+0x7fc>)
 8004a44:	2205      	movs	r2, #5
 8004a46:	701a      	strb	r2, [r3, #0]
                Game2048_Init();
 8004a48:	f7fc faa4 	bl	8000f94 <Game2048_Init>
                OLED_DoTweenObject(&g_Title_AnimationManager, "Title2048", (OLED_WIDTH - strlen("Here is 2048!") * 6), OLED_TITLE_Start_Y, 1, EASE_IN_CUBIC);
 8004a4c:	2304      	movs	r3, #4
 8004a4e:	9301      	str	r3, [sp, #4]
 8004a50:	2301      	movs	r3, #1
 8004a52:	9300      	str	r3, [sp, #0]
 8004a54:	4b5f      	ldr	r3, [pc, #380]	@ (8004bd4 <SystemGetsSignal+0x800>)
 8004a56:	4a60      	ldr	r2, [pc, #384]	@ (8004bd8 <SystemGetsSignal+0x804>)
 8004a58:	4960      	ldr	r1, [pc, #384]	@ (8004bdc <SystemGetsSignal+0x808>)
 8004a5a:	4861      	ldr	r0, [pc, #388]	@ (8004be0 <SystemGetsSignal+0x80c>)
 8004a5c:	f001 ff42 	bl	80068e4 <OLED_DoTweenObject>
                OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", 0, 8, 1000, EASE_IN_CUBIC);
 8004a60:	2304      	movs	r3, #4
 8004a62:	9301      	str	r3, [sp, #4]
 8004a64:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004a68:	9300      	str	r3, [sp, #0]
 8004a6a:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8004a6e:	f04f 0200 	mov.w	r2, #0
 8004a72:	495c      	ldr	r1, [pc, #368]	@ (8004be4 <SystemGetsSignal+0x810>)
 8004a74:	485c      	ldr	r0, [pc, #368]	@ (8004be8 <SystemGetsSignal+0x814>)
 8004a76:	f001 ff35 	bl	80068e4 <OLED_DoTweenObject>
                OLED_DoTweenObject(&g_AnimationManager, "CursorScale", 0, 8, 1000, EASE_INOUT_CIRC);
 8004a7a:	230c      	movs	r3, #12
 8004a7c:	9301      	str	r3, [sp, #4]
 8004a7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004a82:	9300      	str	r3, [sp, #0]
 8004a84:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8004a88:	f04f 0200 	mov.w	r2, #0
 8004a8c:	4957      	ldr	r1, [pc, #348]	@ (8004bec <SystemGetsSignal+0x818>)
 8004a8e:	4856      	ldr	r0, [pc, #344]	@ (8004be8 <SystemGetsSignal+0x814>)
 8004a90:	f001 ff28 	bl	80068e4 <OLED_DoTweenObject>
                OLED_DoTweenObject(&Games_AnimationManager, "Snake", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 0, 1000, EASE_IN_CIRC);
 8004a94:	230a      	movs	r3, #10
 8004a96:	9301      	str	r3, [sp, #4]
 8004a98:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004a9c:	9300      	str	r3, [sp, #0]
 8004a9e:	4b54      	ldr	r3, [pc, #336]	@ (8004bf0 <SystemGetsSignal+0x81c>)
 8004aa0:	4a54      	ldr	r2, [pc, #336]	@ (8004bf4 <SystemGetsSignal+0x820>)
 8004aa2:	4955      	ldr	r1, [pc, #340]	@ (8004bf8 <SystemGetsSignal+0x824>)
 8004aa4:	4855      	ldr	r0, [pc, #340]	@ (8004bfc <SystemGetsSignal+0x828>)
 8004aa6:	f001 ff1d 	bl	80068e4 <OLED_DoTweenObject>
                // HAL_Delay(100);
                OLED_DoTweenObject(&Games_AnimationManager, "2048", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1000, EASE_IN_CIRC);
 8004aaa:	230a      	movs	r3, #10
 8004aac:	9301      	str	r3, [sp, #4]
 8004aae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004ab2:	9300      	str	r3, [sp, #0]
 8004ab4:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8004ab8:	4a4e      	ldr	r2, [pc, #312]	@ (8004bf4 <SystemGetsSignal+0x820>)
 8004aba:	4951      	ldr	r1, [pc, #324]	@ (8004c00 <SystemGetsSignal+0x82c>)
 8004abc:	484f      	ldr	r0, [pc, #316]	@ (8004bfc <SystemGetsSignal+0x828>)
 8004abe:	f001 ff11 	bl	80068e4 <OLED_DoTweenObject>
                // HAL_Delay(100);
                OLED_DoTweenObject(&g_AnimationManager, "BackButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1000, EASE_IN_CIRC);
 8004ac2:	230a      	movs	r3, #10
 8004ac4:	9301      	str	r3, [sp, #4]
 8004ac6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004aca:	9300      	str	r3, [sp, #0]
 8004acc:	4b4d      	ldr	r3, [pc, #308]	@ (8004c04 <SystemGetsSignal+0x830>)
 8004ace:	4a49      	ldr	r2, [pc, #292]	@ (8004bf4 <SystemGetsSignal+0x820>)
 8004ad0:	494d      	ldr	r1, [pc, #308]	@ (8004c08 <SystemGetsSignal+0x834>)
 8004ad2:	4845      	ldr	r0, [pc, #276]	@ (8004be8 <SystemGetsSignal+0x814>)
 8004ad4:	f001 ff06 	bl	80068e4 <OLED_DoTweenObject>
 8004ad8:	f000 bdf8 	b.w	80056cc <SystemGetsSignal+0x12f8>
            }
            else if (menuRank == 3 && menuSelection == 2 && cancelSelection && UI_PAGE_GAMES && !game2048_game_over && currentPage == UI_PAGE_GAMES)
 8004adc:	4b3a      	ldr	r3, [pc, #232]	@ (8004bc8 <SystemGetsSignal+0x7f4>)
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	2b03      	cmp	r3, #3
 8004ae2:	f040 809d 	bne.w	8004c20 <SystemGetsSignal+0x84c>
 8004ae6:	4b39      	ldr	r3, [pc, #228]	@ (8004bcc <SystemGetsSignal+0x7f8>)
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	f040 8098 	bne.w	8004c20 <SystemGetsSignal+0x84c>
 8004af0:	4b46      	ldr	r3, [pc, #280]	@ (8004c0c <SystemGetsSignal+0x838>)
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	f000 8093 	beq.w	8004c20 <SystemGetsSignal+0x84c>
 8004afa:	4b45      	ldr	r3, [pc, #276]	@ (8004c10 <SystemGetsSignal+0x83c>)
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	f083 0301 	eor.w	r3, r3, #1
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	f000 808b 	beq.w	8004c20 <SystemGetsSignal+0x84c>
 8004b0a:	4b31      	ldr	r3, [pc, #196]	@ (8004bd0 <SystemGetsSignal+0x7fc>)
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	2b05      	cmp	r3, #5
 8004b10:	f040 8086 	bne.w	8004c20 <SystemGetsSignal+0x84c>
            {
                menuRank = 2;
 8004b14:	4b2c      	ldr	r3, [pc, #176]	@ (8004bc8 <SystemGetsSignal+0x7f4>)
 8004b16:	2202      	movs	r2, #2
 8004b18:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_GAMES;
 8004b1a:	4b2d      	ldr	r3, [pc, #180]	@ (8004bd0 <SystemGetsSignal+0x7fc>)
 8004b1c:	2205      	movs	r2, #5
 8004b1e:	701a      	strb	r2, [r3, #0]
                OLED_DoTweenObject(&g_Title_AnimationManager, "Title2048", (OLED_WIDTH - strlen("Here is 2048!") * 6), OLED_TITLE_End_Y, 1000, EASE_IN_CUBIC);
 8004b20:	2304      	movs	r3, #4
 8004b22:	9301      	str	r3, [sp, #4]
 8004b24:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004b28:	9300      	str	r3, [sp, #0]
 8004b2a:	f04f 0300 	mov.w	r3, #0
 8004b2e:	4a2a      	ldr	r2, [pc, #168]	@ (8004bd8 <SystemGetsSignal+0x804>)
 8004b30:	492a      	ldr	r1, [pc, #168]	@ (8004bdc <SystemGetsSignal+0x808>)
 8004b32:	482b      	ldr	r0, [pc, #172]	@ (8004be0 <SystemGetsSignal+0x80c>)
 8004b34:	f001 fed6 	bl	80068e4 <OLED_DoTweenObject>
                OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("Here is 2048!") * 6 + 3, 8, 1000, EASE_IN_CUBIC);
 8004b38:	2304      	movs	r3, #4
 8004b3a:	9301      	str	r3, [sp, #4]
 8004b3c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004b40:	9300      	str	r3, [sp, #0]
 8004b42:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8004b46:	4a33      	ldr	r2, [pc, #204]	@ (8004c14 <SystemGetsSignal+0x840>)
 8004b48:	4926      	ldr	r1, [pc, #152]	@ (8004be4 <SystemGetsSignal+0x810>)
 8004b4a:	4827      	ldr	r0, [pc, #156]	@ (8004be8 <SystemGetsSignal+0x814>)
 8004b4c:	f001 feca 	bl	80068e4 <OLED_DoTweenObject>
                OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("2048") * 6 + 3, 10, 1000, EASE_INOUT_CIRC);
 8004b50:	230c      	movs	r3, #12
 8004b52:	9301      	str	r3, [sp, #4]
 8004b54:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004b58:	9300      	str	r3, [sp, #0]
 8004b5a:	4b2f      	ldr	r3, [pc, #188]	@ (8004c18 <SystemGetsSignal+0x844>)
 8004b5c:	4a2f      	ldr	r2, [pc, #188]	@ (8004c1c <SystemGetsSignal+0x848>)
 8004b5e:	4923      	ldr	r1, [pc, #140]	@ (8004bec <SystemGetsSignal+0x818>)
 8004b60:	4821      	ldr	r0, [pc, #132]	@ (8004be8 <SystemGetsSignal+0x814>)
 8004b62:	f001 febf 	bl	80068e4 <OLED_DoTweenObject>
                OLED_DoTweenObject(&Games_AnimationManager, "Snake", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 0, 1000, EASE_IN_CIRC);
 8004b66:	230a      	movs	r3, #10
 8004b68:	9301      	str	r3, [sp, #4]
 8004b6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004b6e:	9300      	str	r3, [sp, #0]
 8004b70:	4b1f      	ldr	r3, [pc, #124]	@ (8004bf0 <SystemGetsSignal+0x81c>)
 8004b72:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004b76:	4920      	ldr	r1, [pc, #128]	@ (8004bf8 <SystemGetsSignal+0x824>)
 8004b78:	4820      	ldr	r0, [pc, #128]	@ (8004bfc <SystemGetsSignal+0x828>)
 8004b7a:	f001 feb3 	bl	80068e4 <OLED_DoTweenObject>
                HAL_Delay(100);
 8004b7e:	2064      	movs	r0, #100	@ 0x64
 8004b80:	f002 fd5a 	bl	8007638 <HAL_Delay>
                OLED_DoTweenObject(&Games_AnimationManager, "2048", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1000, EASE_IN_CIRC);
 8004b84:	230a      	movs	r3, #10
 8004b86:	9301      	str	r3, [sp, #4]
 8004b88:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004b8c:	9300      	str	r3, [sp, #0]
 8004b8e:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8004b92:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004b96:	491a      	ldr	r1, [pc, #104]	@ (8004c00 <SystemGetsSignal+0x82c>)
 8004b98:	4818      	ldr	r0, [pc, #96]	@ (8004bfc <SystemGetsSignal+0x828>)
 8004b9a:	f001 fea3 	bl	80068e4 <OLED_DoTweenObject>
                HAL_Delay(100);
 8004b9e:	2064      	movs	r0, #100	@ 0x64
 8004ba0:	f002 fd4a 	bl	8007638 <HAL_Delay>
                OLED_DoTweenObject(&g_AnimationManager, "BackButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1000, EASE_IN_CIRC);
 8004ba4:	230a      	movs	r3, #10
 8004ba6:	9301      	str	r3, [sp, #4]
 8004ba8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004bac:	9300      	str	r3, [sp, #0]
 8004bae:	4b15      	ldr	r3, [pc, #84]	@ (8004c04 <SystemGetsSignal+0x830>)
 8004bb0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004bb4:	4914      	ldr	r1, [pc, #80]	@ (8004c08 <SystemGetsSignal+0x834>)
 8004bb6:	480c      	ldr	r0, [pc, #48]	@ (8004be8 <SystemGetsSignal+0x814>)
 8004bb8:	f001 fe94 	bl	80068e4 <OLED_DoTweenObject>
                cancelSelection = false;
 8004bbc:	4b13      	ldr	r3, [pc, #76]	@ (8004c0c <SystemGetsSignal+0x838>)
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	701a      	strb	r2, [r3, #0]
 8004bc2:	f000 bd83 	b.w	80056cc <SystemGetsSignal+0x12f8>
 8004bc6:	bf00      	nop
 8004bc8:	20000001 	.word	0x20000001
 8004bcc:	20000002 	.word	0x20000002
 8004bd0:	20000b09 	.word	0x20000b09
 8004bd4:	c1200000 	.word	0xc1200000
 8004bd8:	42480000 	.word	0x42480000
 8004bdc:	0800c86c 	.word	0x0800c86c
 8004be0:	200032cc 	.word	0x200032cc
 8004be4:	0800c9b0 	.word	0x0800c9b0
 8004be8:	200038c0 	.word	0x200038c0
 8004bec:	0800c9c8 	.word	0x0800c9c8
 8004bf0:	40400000 	.word	0x40400000
 8004bf4:	c2b40000 	.word	0xc2b40000
 8004bf8:	0800c934 	.word	0x0800c934
 8004bfc:	20001508 	.word	0x20001508
 8004c00:	0800c93c 	.word	0x0800c93c
 8004c04:	41e80000 	.word	0x41e80000
 8004c08:	0800c944 	.word	0x0800c944
 8004c0c:	20000b0b 	.word	0x20000b0b
 8004c10:	20000250 	.word	0x20000250
 8004c14:	42a20000 	.word	0x42a20000
 8004c18:	41200000 	.word	0x41200000
 8004c1c:	41d80000 	.word	0x41d80000
            }
// #pragma endregion 游戏部分
// #pragma region 关于部分
            else if (menuRank == 1 && menuSelection == 5)
 8004c20:	4b60      	ldr	r3, [pc, #384]	@ (8004da4 <SystemGetsSignal+0x9d0>)
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	f040 80f3 	bne.w	8004e10 <SystemGetsSignal+0xa3c>
 8004c2a:	4b5f      	ldr	r3, [pc, #380]	@ (8004da8 <SystemGetsSignal+0x9d4>)
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	2b05      	cmp	r3, #5
 8004c30:	f040 80ee 	bne.w	8004e10 <SystemGetsSignal+0xa3c>
            {
                menuRank = 2;
 8004c34:	4b5b      	ldr	r3, [pc, #364]	@ (8004da4 <SystemGetsSignal+0x9d0>)
 8004c36:	2202      	movs	r2, #2
 8004c38:	701a      	strb	r2, [r3, #0]
                menuSelection = 1;
 8004c3a:	4b5b      	ldr	r3, [pc, #364]	@ (8004da8 <SystemGetsSignal+0x9d4>)
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_ABOUT;
 8004c40:	4b5a      	ldr	r3, [pc, #360]	@ (8004dac <SystemGetsSignal+0x9d8>)
 8004c42:	2203      	movs	r2, #3
 8004c44:	701a      	strb	r2, [r3, #0]
                OLED_DoTweenObject(&Menu_AnimationManager, "GamesButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * -3, 1000, EASE_IN_CIRC);
 8004c46:	230a      	movs	r3, #10
 8004c48:	9301      	str	r3, [sp, #4]
 8004c4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004c4e:	9300      	str	r3, [sp, #0]
 8004c50:	4b57      	ldr	r3, [pc, #348]	@ (8004db0 <SystemGetsSignal+0x9dc>)
 8004c52:	4a58      	ldr	r2, [pc, #352]	@ (8004db4 <SystemGetsSignal+0x9e0>)
 8004c54:	4958      	ldr	r1, [pc, #352]	@ (8004db8 <SystemGetsSignal+0x9e4>)
 8004c56:	4859      	ldr	r0, [pc, #356]	@ (8004dbc <SystemGetsSignal+0x9e8>)
 8004c58:	f001 fe44 	bl	80068e4 <OLED_DoTweenObject>
                HAL_Delay(100);
 8004c5c:	2064      	movs	r0, #100	@ 0x64
 8004c5e:	f002 fceb 	bl	8007638 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "ToolsButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * -2, 1000, EASE_IN_CIRC);
 8004c62:	230a      	movs	r3, #10
 8004c64:	9301      	str	r3, [sp, #4]
 8004c66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004c6a:	9300      	str	r3, [sp, #0]
 8004c6c:	4b54      	ldr	r3, [pc, #336]	@ (8004dc0 <SystemGetsSignal+0x9ec>)
 8004c6e:	4a51      	ldr	r2, [pc, #324]	@ (8004db4 <SystemGetsSignal+0x9e0>)
 8004c70:	4954      	ldr	r1, [pc, #336]	@ (8004dc4 <SystemGetsSignal+0x9f0>)
 8004c72:	4852      	ldr	r0, [pc, #328]	@ (8004dbc <SystemGetsSignal+0x9e8>)
 8004c74:	f001 fe36 	bl	80068e4 <OLED_DoTweenObject>
                HAL_Delay(100);
 8004c78:	2064      	movs	r0, #100	@ 0x64
 8004c7a:	f002 fcdd 	bl	8007638 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "StatusButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * -1, 1000, EASE_IN_CIRC);
 8004c7e:	230a      	movs	r3, #10
 8004c80:	9301      	str	r3, [sp, #4]
 8004c82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004c86:	9300      	str	r3, [sp, #0]
 8004c88:	4b4f      	ldr	r3, [pc, #316]	@ (8004dc8 <SystemGetsSignal+0x9f4>)
 8004c8a:	4a4a      	ldr	r2, [pc, #296]	@ (8004db4 <SystemGetsSignal+0x9e0>)
 8004c8c:	494f      	ldr	r1, [pc, #316]	@ (8004dcc <SystemGetsSignal+0x9f8>)
 8004c8e:	484b      	ldr	r0, [pc, #300]	@ (8004dbc <SystemGetsSignal+0x9e8>)
 8004c90:	f001 fe28 	bl	80068e4 <OLED_DoTweenObject>
                HAL_Delay(100);
 8004c94:	2064      	movs	r0, #100	@ 0x64
 8004c96:	f002 fccf 	bl	8007638 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "SettingsButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 0, 1000, EASE_IN_CIRC);
 8004c9a:	230a      	movs	r3, #10
 8004c9c:	9301      	str	r3, [sp, #4]
 8004c9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004ca2:	9300      	str	r3, [sp, #0]
 8004ca4:	4b4a      	ldr	r3, [pc, #296]	@ (8004dd0 <SystemGetsSignal+0x9fc>)
 8004ca6:	4a43      	ldr	r2, [pc, #268]	@ (8004db4 <SystemGetsSignal+0x9e0>)
 8004ca8:	494a      	ldr	r1, [pc, #296]	@ (8004dd4 <SystemGetsSignal+0xa00>)
 8004caa:	4844      	ldr	r0, [pc, #272]	@ (8004dbc <SystemGetsSignal+0x9e8>)
 8004cac:	f001 fe1a 	bl	80068e4 <OLED_DoTweenObject>
                HAL_Delay(100);
 8004cb0:	2064      	movs	r0, #100	@ 0x64
 8004cb2:	f002 fcc1 	bl	8007638 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "AboutButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1000, EASE_IN_CIRC);
 8004cb6:	230a      	movs	r3, #10
 8004cb8:	9301      	str	r3, [sp, #4]
 8004cba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004cbe:	9300      	str	r3, [sp, #0]
 8004cc0:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8004cc4:	4a3b      	ldr	r2, [pc, #236]	@ (8004db4 <SystemGetsSignal+0x9e0>)
 8004cc6:	4944      	ldr	r1, [pc, #272]	@ (8004dd8 <SystemGetsSignal+0xa04>)
 8004cc8:	483c      	ldr	r0, [pc, #240]	@ (8004dbc <SystemGetsSignal+0x9e8>)
 8004cca:	f001 fe0b 	bl	80068e4 <OLED_DoTweenObject>

                OLED_DoTweenObject(&About_AnimationManager, "Developer", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1000, EASE_IN_CIRC);
 8004cce:	230a      	movs	r3, #10
 8004cd0:	9301      	str	r3, [sp, #4]
 8004cd2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004cd6:	9300      	str	r3, [sp, #0]
 8004cd8:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8004cdc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004ce0:	493e      	ldr	r1, [pc, #248]	@ (8004ddc <SystemGetsSignal+0xa08>)
 8004ce2:	483f      	ldr	r0, [pc, #252]	@ (8004de0 <SystemGetsSignal+0xa0c>)
 8004ce4:	f001 fdfe 	bl	80068e4 <OLED_DoTweenObject>
                HAL_Delay(100);
 8004ce8:	2064      	movs	r0, #100	@ 0x64
 8004cea:	f002 fca5 	bl	8007638 <HAL_Delay>
                OLED_DoTweenObject(&About_AnimationManager, "Github", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1000, EASE_IN_CIRC);
 8004cee:	230a      	movs	r3, #10
 8004cf0:	9301      	str	r3, [sp, #4]
 8004cf2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004cf6:	9300      	str	r3, [sp, #0]
 8004cf8:	4b3a      	ldr	r3, [pc, #232]	@ (8004de4 <SystemGetsSignal+0xa10>)
 8004cfa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004cfe:	493a      	ldr	r1, [pc, #232]	@ (8004de8 <SystemGetsSignal+0xa14>)
 8004d00:	4837      	ldr	r0, [pc, #220]	@ (8004de0 <SystemGetsSignal+0xa0c>)
 8004d02:	f001 fdef 	bl	80068e4 <OLED_DoTweenObject>
                HAL_Delay(100);
 8004d06:	2064      	movs	r0, #100	@ 0x64
 8004d08:	f002 fc96 	bl	8007638 <HAL_Delay>
                OLED_DoTweenObject(&About_AnimationManager, "Email", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, 1000, EASE_IN_CIRC);
 8004d0c:	230a      	movs	r3, #10
 8004d0e:	9301      	str	r3, [sp, #4]
 8004d10:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004d14:	9300      	str	r3, [sp, #0]
 8004d16:	4b35      	ldr	r3, [pc, #212]	@ (8004dec <SystemGetsSignal+0xa18>)
 8004d18:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004d1c:	4934      	ldr	r1, [pc, #208]	@ (8004df0 <SystemGetsSignal+0xa1c>)
 8004d1e:	4830      	ldr	r0, [pc, #192]	@ (8004de0 <SystemGetsSignal+0xa0c>)
 8004d20:	f001 fde0 	bl	80068e4 <OLED_DoTweenObject>
                HAL_Delay(100);
 8004d24:	2064      	movs	r0, #100	@ 0x64
 8004d26:	f002 fc87 	bl	8007638 <HAL_Delay>
                OLED_DoTweenObject(&About_AnimationManager, "Donate", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 4, 1000, EASE_IN_CIRC);
 8004d2a:	230a      	movs	r3, #10
 8004d2c:	9301      	str	r3, [sp, #4]
 8004d2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004d32:	9300      	str	r3, [sp, #0]
 8004d34:	4b2f      	ldr	r3, [pc, #188]	@ (8004df4 <SystemGetsSignal+0xa20>)
 8004d36:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004d3a:	492f      	ldr	r1, [pc, #188]	@ (8004df8 <SystemGetsSignal+0xa24>)
 8004d3c:	4828      	ldr	r0, [pc, #160]	@ (8004de0 <SystemGetsSignal+0xa0c>)
 8004d3e:	f001 fdd1 	bl	80068e4 <OLED_DoTweenObject>
                HAL_Delay(100);
 8004d42:	2064      	movs	r0, #100	@ 0x64
 8004d44:	f002 fc78 	bl	8007638 <HAL_Delay>
                OLED_DoTweenObject(&About_AnimationManager, "More", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 5, 1000, EASE_IN_CIRC);
 8004d48:	230a      	movs	r3, #10
 8004d4a:	9301      	str	r3, [sp, #4]
 8004d4c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004d50:	9300      	str	r3, [sp, #0]
 8004d52:	4b2a      	ldr	r3, [pc, #168]	@ (8004dfc <SystemGetsSignal+0xa28>)
 8004d54:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004d58:	4929      	ldr	r1, [pc, #164]	@ (8004e00 <SystemGetsSignal+0xa2c>)
 8004d5a:	4821      	ldr	r0, [pc, #132]	@ (8004de0 <SystemGetsSignal+0xa0c>)
 8004d5c:	f001 fdc2 	bl	80068e4 <OLED_DoTweenObject>
                HAL_Delay(100);
 8004d60:	2064      	movs	r0, #100	@ 0x64
 8004d62:	f002 fc69 	bl	8007638 <HAL_Delay>
                OLED_DoTweenObject(&g_AnimationManager, "BackButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 6, 1000, EASE_IN_CIRC);
 8004d66:	230a      	movs	r3, #10
 8004d68:	9301      	str	r3, [sp, #4]
 8004d6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004d6e:	9300      	str	r3, [sp, #0]
 8004d70:	4b24      	ldr	r3, [pc, #144]	@ (8004e04 <SystemGetsSignal+0xa30>)
 8004d72:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004d76:	4924      	ldr	r1, [pc, #144]	@ (8004e08 <SystemGetsSignal+0xa34>)
 8004d78:	4824      	ldr	r0, [pc, #144]	@ (8004e0c <SystemGetsSignal+0xa38>)
 8004d7a:	f001 fdb3 	bl	80068e4 <OLED_DoTweenObject>
                OLED_DoTweenObjectY(&g_AnimationManager, "BackButton", OLED_UI_START_Y + OLED_UI_GAP_Y * 6, 1, EASE_IN_CIRC);
 8004d7e:	230a      	movs	r3, #10
 8004d80:	9300      	str	r3, [sp, #0]
 8004d82:	2301      	movs	r3, #1
 8004d84:	4a1f      	ldr	r2, [pc, #124]	@ (8004e04 <SystemGetsSignal+0xa30>)
 8004d86:	4920      	ldr	r1, [pc, #128]	@ (8004e08 <SystemGetsSignal+0xa34>)
 8004d88:	4820      	ldr	r0, [pc, #128]	@ (8004e0c <SystemGetsSignal+0xa38>)
 8004d8a:	f001 fe7e 	bl	8006a8a <OLED_DoTweenObjectY>
                OLED_DoTweenObjectX(&g_AnimationManager, "BackButton", OLED_UI_START_X, 1000, EASE_IN_CIRC);
 8004d8e:	230a      	movs	r3, #10
 8004d90:	9300      	str	r3, [sp, #0]
 8004d92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004d96:	4a07      	ldr	r2, [pc, #28]	@ (8004db4 <SystemGetsSignal+0x9e0>)
 8004d98:	491b      	ldr	r1, [pc, #108]	@ (8004e08 <SystemGetsSignal+0xa34>)
 8004d9a:	481c      	ldr	r0, [pc, #112]	@ (8004e0c <SystemGetsSignal+0xa38>)
 8004d9c:	f001 fe40 	bl	8006a20 <OLED_DoTweenObjectX>
 8004da0:	f000 bc94 	b.w	80056cc <SystemGetsSignal+0x12f8>
 8004da4:	20000001 	.word	0x20000001
 8004da8:	20000002 	.word	0x20000002
 8004dac:	20000b09 	.word	0x20000b09
 8004db0:	c2100000 	.word	0xc2100000
 8004db4:	c2b40000 	.word	0xc2b40000
 8004db8:	0800c9d4 	.word	0x0800c9d4
 8004dbc:	20000f14 	.word	0x20000f14
 8004dc0:	c1b80000 	.word	0xc1b80000
 8004dc4:	0800c9e0 	.word	0x0800c9e0
 8004dc8:	c1200000 	.word	0xc1200000
 8004dcc:	0800c9ec 	.word	0x0800c9ec
 8004dd0:	40400000 	.word	0x40400000
 8004dd4:	0800c9fc 	.word	0x0800c9fc
 8004dd8:	0800ca0c 	.word	0x0800ca0c
 8004ddc:	0800c984 	.word	0x0800c984
 8004de0:	200026e4 	.word	0x200026e4
 8004de4:	41e80000 	.word	0x41e80000
 8004de8:	0800c990 	.word	0x0800c990
 8004dec:	42280000 	.word	0x42280000
 8004df0:	0800c998 	.word	0x0800c998
 8004df4:	425c0000 	.word	0x425c0000
 8004df8:	0800c9a0 	.word	0x0800c9a0
 8004dfc:	42880000 	.word	0x42880000
 8004e00:	0800c9a8 	.word	0x0800c9a8
 8004e04:	42a20000 	.word	0x42a20000
 8004e08:	0800c944 	.word	0x0800c944
 8004e0c:	200038c0 	.word	0x200038c0
            }
            else if (menuRank == 2 && menuSelection == 6 && currentPage == UI_PAGE_ABOUT)
 8004e10:	4bb8      	ldr	r3, [pc, #736]	@ (80050f4 <SystemGetsSignal+0xd20>)
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	f040 80f2 	bne.w	8004ffe <SystemGetsSignal+0xc2a>
 8004e1a:	4bb7      	ldr	r3, [pc, #732]	@ (80050f8 <SystemGetsSignal+0xd24>)
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	2b06      	cmp	r3, #6
 8004e20:	f040 80ed 	bne.w	8004ffe <SystemGetsSignal+0xc2a>
 8004e24:	4bb5      	ldr	r3, [pc, #724]	@ (80050fc <SystemGetsSignal+0xd28>)
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	2b03      	cmp	r3, #3
 8004e2a:	f040 80e8 	bne.w	8004ffe <SystemGetsSignal+0xc2a>
            {
                menuRank = 1;
 8004e2e:	4bb1      	ldr	r3, [pc, #708]	@ (80050f4 <SystemGetsSignal+0xd20>)
 8004e30:	2201      	movs	r2, #1
 8004e32:	701a      	strb	r2, [r3, #0]
                menuSelection = 5;
 8004e34:	4bb0      	ldr	r3, [pc, #704]	@ (80050f8 <SystemGetsSignal+0xd24>)
 8004e36:	2205      	movs	r2, #5
 8004e38:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_MENU;
 8004e3a:	4bb0      	ldr	r3, [pc, #704]	@ (80050fc <SystemGetsSignal+0xd28>)
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	701a      	strb	r2, [r3, #0]
                OLED_DoTweenObject(&About_AnimationManager, "Developer", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * -4, 1000, EASE_IN_CIRC);
 8004e40:	230a      	movs	r3, #10
 8004e42:	9301      	str	r3, [sp, #4]
 8004e44:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004e48:	9300      	str	r3, [sp, #0]
 8004e4a:	4bad      	ldr	r3, [pc, #692]	@ (8005100 <SystemGetsSignal+0xd2c>)
 8004e4c:	4aad      	ldr	r2, [pc, #692]	@ (8005104 <SystemGetsSignal+0xd30>)
 8004e4e:	49ae      	ldr	r1, [pc, #696]	@ (8005108 <SystemGetsSignal+0xd34>)
 8004e50:	48ae      	ldr	r0, [pc, #696]	@ (800510c <SystemGetsSignal+0xd38>)
 8004e52:	f001 fd47 	bl	80068e4 <OLED_DoTweenObject>
                HAL_Delay(100);
 8004e56:	2064      	movs	r0, #100	@ 0x64
 8004e58:	f002 fbee 	bl	8007638 <HAL_Delay>
                OLED_DoTweenObject(&About_AnimationManager, "Github", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * -3, 1000, EASE_IN_CIRC);
 8004e5c:	230a      	movs	r3, #10
 8004e5e:	9301      	str	r3, [sp, #4]
 8004e60:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004e64:	9300      	str	r3, [sp, #0]
 8004e66:	4baa      	ldr	r3, [pc, #680]	@ (8005110 <SystemGetsSignal+0xd3c>)
 8004e68:	4aa6      	ldr	r2, [pc, #664]	@ (8005104 <SystemGetsSignal+0xd30>)
 8004e6a:	49aa      	ldr	r1, [pc, #680]	@ (8005114 <SystemGetsSignal+0xd40>)
 8004e6c:	48a7      	ldr	r0, [pc, #668]	@ (800510c <SystemGetsSignal+0xd38>)
 8004e6e:	f001 fd39 	bl	80068e4 <OLED_DoTweenObject>
                HAL_Delay(100);
 8004e72:	2064      	movs	r0, #100	@ 0x64
 8004e74:	f002 fbe0 	bl	8007638 <HAL_Delay>
                OLED_DoTweenObject(&About_AnimationManager, "Email", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * -2, 1000, EASE_IN_CIRC);
 8004e78:	230a      	movs	r3, #10
 8004e7a:	9301      	str	r3, [sp, #4]
 8004e7c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004e80:	9300      	str	r3, [sp, #0]
 8004e82:	4ba5      	ldr	r3, [pc, #660]	@ (8005118 <SystemGetsSignal+0xd44>)
 8004e84:	4a9f      	ldr	r2, [pc, #636]	@ (8005104 <SystemGetsSignal+0xd30>)
 8004e86:	49a5      	ldr	r1, [pc, #660]	@ (800511c <SystemGetsSignal+0xd48>)
 8004e88:	48a0      	ldr	r0, [pc, #640]	@ (800510c <SystemGetsSignal+0xd38>)
 8004e8a:	f001 fd2b 	bl	80068e4 <OLED_DoTweenObject>
                HAL_Delay(100);
 8004e8e:	2064      	movs	r0, #100	@ 0x64
 8004e90:	f002 fbd2 	bl	8007638 <HAL_Delay>
                OLED_DoTweenObject(&About_AnimationManager, "Donate", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * -1, 1000, EASE_IN_CIRC);
 8004e94:	230a      	movs	r3, #10
 8004e96:	9301      	str	r3, [sp, #4]
 8004e98:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004e9c:	9300      	str	r3, [sp, #0]
 8004e9e:	4ba0      	ldr	r3, [pc, #640]	@ (8005120 <SystemGetsSignal+0xd4c>)
 8004ea0:	4a98      	ldr	r2, [pc, #608]	@ (8005104 <SystemGetsSignal+0xd30>)
 8004ea2:	49a0      	ldr	r1, [pc, #640]	@ (8005124 <SystemGetsSignal+0xd50>)
 8004ea4:	4899      	ldr	r0, [pc, #612]	@ (800510c <SystemGetsSignal+0xd38>)
 8004ea6:	f001 fd1d 	bl	80068e4 <OLED_DoTweenObject>
                HAL_Delay(100);
 8004eaa:	2064      	movs	r0, #100	@ 0x64
 8004eac:	f002 fbc4 	bl	8007638 <HAL_Delay>
                OLED_DoTweenObject(&About_AnimationManager, "More", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 0, 1000, EASE_IN_CIRC);
 8004eb0:	230a      	movs	r3, #10
 8004eb2:	9301      	str	r3, [sp, #4]
 8004eb4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004eb8:	9300      	str	r3, [sp, #0]
 8004eba:	4b9b      	ldr	r3, [pc, #620]	@ (8005128 <SystemGetsSignal+0xd54>)
 8004ebc:	4a91      	ldr	r2, [pc, #580]	@ (8005104 <SystemGetsSignal+0xd30>)
 8004ebe:	499b      	ldr	r1, [pc, #620]	@ (800512c <SystemGetsSignal+0xd58>)
 8004ec0:	4892      	ldr	r0, [pc, #584]	@ (800510c <SystemGetsSignal+0xd38>)
 8004ec2:	f001 fd0f 	bl	80068e4 <OLED_DoTweenObject>
                HAL_Delay(100);
 8004ec6:	2064      	movs	r0, #100	@ 0x64
 8004ec8:	f002 fbb6 	bl	8007638 <HAL_Delay>
                OLED_DoTweenObject(&g_AnimationManager, "BackButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1000, EASE_IN_CIRC);
 8004ecc:	230a      	movs	r3, #10
 8004ece:	9301      	str	r3, [sp, #4]
 8004ed0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004ed4:	9300      	str	r3, [sp, #0]
 8004ed6:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8004eda:	4a8a      	ldr	r2, [pc, #552]	@ (8005104 <SystemGetsSignal+0xd30>)
 8004edc:	4994      	ldr	r1, [pc, #592]	@ (8005130 <SystemGetsSignal+0xd5c>)
 8004ede:	4895      	ldr	r0, [pc, #596]	@ (8005134 <SystemGetsSignal+0xd60>)
 8004ee0:	f001 fd00 	bl	80068e4 <OLED_DoTweenObject>

                OLED_DoTweenObject(&Menu_AnimationManager, "GamesButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (2 - menuSelection), 1000, EASE_IN_CIRC);
 8004ee4:	4b84      	ldr	r3, [pc, #528]	@ (80050f8 <SystemGetsSignal+0xd24>)
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	f1c3 0202 	rsb	r2, r3, #2
 8004eec:	4613      	mov	r3, r2
 8004eee:	005b      	lsls	r3, r3, #1
 8004ef0:	4413      	add	r3, r2
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	4413      	add	r3, r2
 8004ef6:	3303      	adds	r3, #3
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f7fb f9f3 	bl	80002e4 <__aeabi_i2f>
 8004efe:	4603      	mov	r3, r0
 8004f00:	220a      	movs	r2, #10
 8004f02:	9201      	str	r2, [sp, #4]
 8004f04:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004f08:	9200      	str	r2, [sp, #0]
 8004f0a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004f0e:	498a      	ldr	r1, [pc, #552]	@ (8005138 <SystemGetsSignal+0xd64>)
 8004f10:	488a      	ldr	r0, [pc, #552]	@ (800513c <SystemGetsSignal+0xd68>)
 8004f12:	f001 fce7 	bl	80068e4 <OLED_DoTweenObject>
                HAL_Delay(100);
 8004f16:	2064      	movs	r0, #100	@ 0x64
 8004f18:	f002 fb8e 	bl	8007638 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "ToolsButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (3 - menuSelection), 1000, EASE_IN_CIRC);
 8004f1c:	4b76      	ldr	r3, [pc, #472]	@ (80050f8 <SystemGetsSignal+0xd24>)
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	f1c3 0203 	rsb	r2, r3, #3
 8004f24:	4613      	mov	r3, r2
 8004f26:	005b      	lsls	r3, r3, #1
 8004f28:	4413      	add	r3, r2
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	4413      	add	r3, r2
 8004f2e:	3303      	adds	r3, #3
 8004f30:	4618      	mov	r0, r3
 8004f32:	f7fb f9d7 	bl	80002e4 <__aeabi_i2f>
 8004f36:	4603      	mov	r3, r0
 8004f38:	220a      	movs	r2, #10
 8004f3a:	9201      	str	r2, [sp, #4]
 8004f3c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004f40:	9200      	str	r2, [sp, #0]
 8004f42:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004f46:	497e      	ldr	r1, [pc, #504]	@ (8005140 <SystemGetsSignal+0xd6c>)
 8004f48:	487c      	ldr	r0, [pc, #496]	@ (800513c <SystemGetsSignal+0xd68>)
 8004f4a:	f001 fccb 	bl	80068e4 <OLED_DoTweenObject>
                HAL_Delay(100);
 8004f4e:	2064      	movs	r0, #100	@ 0x64
 8004f50:	f002 fb72 	bl	8007638 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "StatusButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (4 - menuSelection), 1000, EASE_IN_CIRC);
 8004f54:	4b68      	ldr	r3, [pc, #416]	@ (80050f8 <SystemGetsSignal+0xd24>)
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	f1c3 0204 	rsb	r2, r3, #4
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	005b      	lsls	r3, r3, #1
 8004f60:	4413      	add	r3, r2
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	4413      	add	r3, r2
 8004f66:	3303      	adds	r3, #3
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f7fb f9bb 	bl	80002e4 <__aeabi_i2f>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	220a      	movs	r2, #10
 8004f72:	9201      	str	r2, [sp, #4]
 8004f74:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004f78:	9200      	str	r2, [sp, #0]
 8004f7a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004f7e:	4971      	ldr	r1, [pc, #452]	@ (8005144 <SystemGetsSignal+0xd70>)
 8004f80:	486e      	ldr	r0, [pc, #440]	@ (800513c <SystemGetsSignal+0xd68>)
 8004f82:	f001 fcaf 	bl	80068e4 <OLED_DoTweenObject>
                HAL_Delay(100);
 8004f86:	2064      	movs	r0, #100	@ 0x64
 8004f88:	f002 fb56 	bl	8007638 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "SettingsButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (5 - menuSelection), 1000, EASE_IN_CIRC);
 8004f8c:	4b5a      	ldr	r3, [pc, #360]	@ (80050f8 <SystemGetsSignal+0xd24>)
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	f1c3 0205 	rsb	r2, r3, #5
 8004f94:	4613      	mov	r3, r2
 8004f96:	005b      	lsls	r3, r3, #1
 8004f98:	4413      	add	r3, r2
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	4413      	add	r3, r2
 8004f9e:	3303      	adds	r3, #3
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f7fb f99f 	bl	80002e4 <__aeabi_i2f>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	220a      	movs	r2, #10
 8004faa:	9201      	str	r2, [sp, #4]
 8004fac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004fb0:	9200      	str	r2, [sp, #0]
 8004fb2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004fb6:	4964      	ldr	r1, [pc, #400]	@ (8005148 <SystemGetsSignal+0xd74>)
 8004fb8:	4860      	ldr	r0, [pc, #384]	@ (800513c <SystemGetsSignal+0xd68>)
 8004fba:	f001 fc93 	bl	80068e4 <OLED_DoTweenObject>
                HAL_Delay(100);
 8004fbe:	2064      	movs	r0, #100	@ 0x64
 8004fc0:	f002 fb3a 	bl	8007638 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "AboutButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (6 - menuSelection), 1000, EASE_IN_CIRC);
 8004fc4:	4b4c      	ldr	r3, [pc, #304]	@ (80050f8 <SystemGetsSignal+0xd24>)
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	f1c3 0206 	rsb	r2, r3, #6
 8004fcc:	4613      	mov	r3, r2
 8004fce:	005b      	lsls	r3, r3, #1
 8004fd0:	4413      	add	r3, r2
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	4413      	add	r3, r2
 8004fd6:	3303      	adds	r3, #3
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f7fb f983 	bl	80002e4 <__aeabi_i2f>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	220a      	movs	r2, #10
 8004fe2:	9201      	str	r2, [sp, #4]
 8004fe4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004fe8:	9200      	str	r2, [sp, #0]
 8004fea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004fee:	4957      	ldr	r1, [pc, #348]	@ (800514c <SystemGetsSignal+0xd78>)
 8004ff0:	4852      	ldr	r0, [pc, #328]	@ (800513c <SystemGetsSignal+0xd68>)
 8004ff2:	f001 fc77 	bl	80068e4 <OLED_DoTweenObject>
                resetAnimation = true;
 8004ff6:	4b56      	ldr	r3, [pc, #344]	@ (8005150 <SystemGetsSignal+0xd7c>)
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	701a      	strb	r2, [r3, #0]
 8004ffc:	e366      	b.n	80056cc <SystemGetsSignal+0x12f8>
            }
// #pragma endregion 关于部分
// #pragma region 工具部分
            else if (menuRank == 1 && menuSelection == 2)
 8004ffe:	4b3d      	ldr	r3, [pc, #244]	@ (80050f4 <SystemGetsSignal+0xd20>)
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	2b01      	cmp	r3, #1
 8005004:	f040 80b0 	bne.w	8005168 <SystemGetsSignal+0xd94>
 8005008:	4b3b      	ldr	r3, [pc, #236]	@ (80050f8 <SystemGetsSignal+0xd24>)
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	2b02      	cmp	r3, #2
 800500e:	f040 80ab 	bne.w	8005168 <SystemGetsSignal+0xd94>
            {
                menuRank = 2;
 8005012:	4b38      	ldr	r3, [pc, #224]	@ (80050f4 <SystemGetsSignal+0xd20>)
 8005014:	2202      	movs	r2, #2
 8005016:	701a      	strb	r2, [r3, #0]
                menuSelection = 1;
 8005018:	4b37      	ldr	r3, [pc, #220]	@ (80050f8 <SystemGetsSignal+0xd24>)
 800501a:	2201      	movs	r2, #1
 800501c:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_TOOLS;
 800501e:	4b37      	ldr	r3, [pc, #220]	@ (80050fc <SystemGetsSignal+0xd28>)
 8005020:	2204      	movs	r2, #4
 8005022:	701a      	strb	r2, [r3, #0]
                OLED_DoTweenObject(&Menu_AnimationManager, "GamesButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 0, 1000, EASE_IN_CIRC);
 8005024:	230a      	movs	r3, #10
 8005026:	9301      	str	r3, [sp, #4]
 8005028:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800502c:	9300      	str	r3, [sp, #0]
 800502e:	4b3e      	ldr	r3, [pc, #248]	@ (8005128 <SystemGetsSignal+0xd54>)
 8005030:	4a34      	ldr	r2, [pc, #208]	@ (8005104 <SystemGetsSignal+0xd30>)
 8005032:	4941      	ldr	r1, [pc, #260]	@ (8005138 <SystemGetsSignal+0xd64>)
 8005034:	4841      	ldr	r0, [pc, #260]	@ (800513c <SystemGetsSignal+0xd68>)
 8005036:	f001 fc55 	bl	80068e4 <OLED_DoTweenObject>
                HAL_Delay(100);
 800503a:	2064      	movs	r0, #100	@ 0x64
 800503c:	f002 fafc 	bl	8007638 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "ToolsButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1000, EASE_IN_CIRC);
 8005040:	230a      	movs	r3, #10
 8005042:	9301      	str	r3, [sp, #4]
 8005044:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005048:	9300      	str	r3, [sp, #0]
 800504a:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 800504e:	4a2d      	ldr	r2, [pc, #180]	@ (8005104 <SystemGetsSignal+0xd30>)
 8005050:	493b      	ldr	r1, [pc, #236]	@ (8005140 <SystemGetsSignal+0xd6c>)
 8005052:	483a      	ldr	r0, [pc, #232]	@ (800513c <SystemGetsSignal+0xd68>)
 8005054:	f001 fc46 	bl	80068e4 <OLED_DoTweenObject>
                HAL_Delay(100);
 8005058:	2064      	movs	r0, #100	@ 0x64
 800505a:	f002 faed 	bl	8007638 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "StatusButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1000, EASE_IN_CIRC);
 800505e:	230a      	movs	r3, #10
 8005060:	9301      	str	r3, [sp, #4]
 8005062:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005066:	9300      	str	r3, [sp, #0]
 8005068:	4b3a      	ldr	r3, [pc, #232]	@ (8005154 <SystemGetsSignal+0xd80>)
 800506a:	4a26      	ldr	r2, [pc, #152]	@ (8005104 <SystemGetsSignal+0xd30>)
 800506c:	4935      	ldr	r1, [pc, #212]	@ (8005144 <SystemGetsSignal+0xd70>)
 800506e:	4833      	ldr	r0, [pc, #204]	@ (800513c <SystemGetsSignal+0xd68>)
 8005070:	f001 fc38 	bl	80068e4 <OLED_DoTweenObject>
                HAL_Delay(100);
 8005074:	2064      	movs	r0, #100	@ 0x64
 8005076:	f002 fadf 	bl	8007638 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "SettingsButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, 1000, EASE_IN_CIRC);
 800507a:	230a      	movs	r3, #10
 800507c:	9301      	str	r3, [sp, #4]
 800507e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005082:	9300      	str	r3, [sp, #0]
 8005084:	4b34      	ldr	r3, [pc, #208]	@ (8005158 <SystemGetsSignal+0xd84>)
 8005086:	4a1f      	ldr	r2, [pc, #124]	@ (8005104 <SystemGetsSignal+0xd30>)
 8005088:	492f      	ldr	r1, [pc, #188]	@ (8005148 <SystemGetsSignal+0xd74>)
 800508a:	482c      	ldr	r0, [pc, #176]	@ (800513c <SystemGetsSignal+0xd68>)
 800508c:	f001 fc2a 	bl	80068e4 <OLED_DoTweenObject>
                HAL_Delay(100);
 8005090:	2064      	movs	r0, #100	@ 0x64
 8005092:	f002 fad1 	bl	8007638 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "AboutButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 4, 1000, EASE_IN_CIRC);
 8005096:	230a      	movs	r3, #10
 8005098:	9301      	str	r3, [sp, #4]
 800509a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800509e:	9300      	str	r3, [sp, #0]
 80050a0:	4b2e      	ldr	r3, [pc, #184]	@ (800515c <SystemGetsSignal+0xd88>)
 80050a2:	4a18      	ldr	r2, [pc, #96]	@ (8005104 <SystemGetsSignal+0xd30>)
 80050a4:	4929      	ldr	r1, [pc, #164]	@ (800514c <SystemGetsSignal+0xd78>)
 80050a6:	4825      	ldr	r0, [pc, #148]	@ (800513c <SystemGetsSignal+0xd68>)
 80050a8:	f001 fc1c 	bl	80068e4 <OLED_DoTweenObject>

                OLED_DoTweenObject(&Tools_AnimationManager, "VideoPlayer", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1000, EASE_IN_CIRC);
 80050ac:	230a      	movs	r3, #10
 80050ae:	9301      	str	r3, [sp, #4]
 80050b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80050b4:	9300      	str	r3, [sp, #0]
 80050b6:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 80050ba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80050be:	4928      	ldr	r1, [pc, #160]	@ (8005160 <SystemGetsSignal+0xd8c>)
 80050c0:	4828      	ldr	r0, [pc, #160]	@ (8005164 <SystemGetsSignal+0xd90>)
 80050c2:	f001 fc0f 	bl	80068e4 <OLED_DoTweenObject>
                HAL_Delay(100);
 80050c6:	2064      	movs	r0, #100	@ 0x64
 80050c8:	f002 fab6 	bl	8007638 <HAL_Delay>
                OLED_DoTweenObjectY(&g_AnimationManager, "BackButton", OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1, EASE_IN_CIRC);
 80050cc:	230a      	movs	r3, #10
 80050ce:	9300      	str	r3, [sp, #0]
 80050d0:	2301      	movs	r3, #1
 80050d2:	4a20      	ldr	r2, [pc, #128]	@ (8005154 <SystemGetsSignal+0xd80>)
 80050d4:	4916      	ldr	r1, [pc, #88]	@ (8005130 <SystemGetsSignal+0xd5c>)
 80050d6:	4817      	ldr	r0, [pc, #92]	@ (8005134 <SystemGetsSignal+0xd60>)
 80050d8:	f001 fcd7 	bl	8006a8a <OLED_DoTweenObjectY>
                OLED_DoTweenObjectX(&g_AnimationManager, "BackButton", OLED_UI_END_X, 1000, EASE_IN_CIRC);
 80050dc:	230a      	movs	r3, #10
 80050de:	9300      	str	r3, [sp, #0]
 80050e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80050e4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80050e8:	4911      	ldr	r1, [pc, #68]	@ (8005130 <SystemGetsSignal+0xd5c>)
 80050ea:	4812      	ldr	r0, [pc, #72]	@ (8005134 <SystemGetsSignal+0xd60>)
 80050ec:	f001 fc98 	bl	8006a20 <OLED_DoTweenObjectX>
 80050f0:	e2ec      	b.n	80056cc <SystemGetsSignal+0x12f8>
 80050f2:	bf00      	nop
 80050f4:	20000001 	.word	0x20000001
 80050f8:	20000002 	.word	0x20000002
 80050fc:	20000b09 	.word	0x20000b09
 8005100:	c2440000 	.word	0xc2440000
 8005104:	c2b40000 	.word	0xc2b40000
 8005108:	0800c984 	.word	0x0800c984
 800510c:	200026e4 	.word	0x200026e4
 8005110:	c2100000 	.word	0xc2100000
 8005114:	0800c990 	.word	0x0800c990
 8005118:	c1b80000 	.word	0xc1b80000
 800511c:	0800c998 	.word	0x0800c998
 8005120:	c1200000 	.word	0xc1200000
 8005124:	0800c9a0 	.word	0x0800c9a0
 8005128:	40400000 	.word	0x40400000
 800512c:	0800c9a8 	.word	0x0800c9a8
 8005130:	0800c944 	.word	0x0800c944
 8005134:	200038c0 	.word	0x200038c0
 8005138:	0800c9d4 	.word	0x0800c9d4
 800513c:	20000f14 	.word	0x20000f14
 8005140:	0800c9e0 	.word	0x0800c9e0
 8005144:	0800c9ec 	.word	0x0800c9ec
 8005148:	0800c9fc 	.word	0x0800c9fc
 800514c:	0800ca0c 	.word	0x0800ca0c
 8005150:	20000b0c 	.word	0x20000b0c
 8005154:	41e80000 	.word	0x41e80000
 8005158:	42280000 	.word	0x42280000
 800515c:	425c0000 	.word	0x425c0000
 8005160:	0800c950 	.word	0x0800c950
 8005164:	20001afc 	.word	0x20001afc
            }
            else if (menuRank == 2 && menuSelection == 1 && currentPage == UI_PAGE_TOOLS)
 8005168:	4b5a      	ldr	r3, [pc, #360]	@ (80052d4 <SystemGetsSignal+0xf00>)
 800516a:	781b      	ldrb	r3, [r3, #0]
 800516c:	2b02      	cmp	r3, #2
 800516e:	d151      	bne.n	8005214 <SystemGetsSignal+0xe40>
 8005170:	4b59      	ldr	r3, [pc, #356]	@ (80052d8 <SystemGetsSignal+0xf04>)
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	2b01      	cmp	r3, #1
 8005176:	d14d      	bne.n	8005214 <SystemGetsSignal+0xe40>
 8005178:	4b58      	ldr	r3, [pc, #352]	@ (80052dc <SystemGetsSignal+0xf08>)
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	2b04      	cmp	r3, #4
 800517e:	d149      	bne.n	8005214 <SystemGetsSignal+0xe40>
            {
                menuRank = 3;
 8005180:	4b54      	ldr	r3, [pc, #336]	@ (80052d4 <SystemGetsSignal+0xf00>)
 8005182:	2203      	movs	r2, #3
 8005184:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_TOOLS;
 8005186:	4b55      	ldr	r3, [pc, #340]	@ (80052dc <SystemGetsSignal+0xf08>)
 8005188:	2204      	movs	r2, #4
 800518a:	701a      	strb	r2, [r3, #0]
                video_first_play = true;
 800518c:	4b54      	ldr	r3, [pc, #336]	@ (80052e0 <SystemGetsSignal+0xf0c>)
 800518e:	2201      	movs	r2, #1
 8005190:	701a      	strb	r2, [r3, #0]
                OLED_DoTweenObject(&g_Title_AnimationManager, "BAD APPLE!", (OLED_WIDTH - strlen("BAD APPLE!") * 6), OLED_TITLE_Start_Y, 1, EASE_IN_CUBIC);
 8005192:	2304      	movs	r3, #4
 8005194:	9301      	str	r3, [sp, #4]
 8005196:	2301      	movs	r3, #1
 8005198:	9300      	str	r3, [sp, #0]
 800519a:	4b52      	ldr	r3, [pc, #328]	@ (80052e4 <SystemGetsSignal+0xf10>)
 800519c:	4a52      	ldr	r2, [pc, #328]	@ (80052e8 <SystemGetsSignal+0xf14>)
 800519e:	4953      	ldr	r1, [pc, #332]	@ (80052ec <SystemGetsSignal+0xf18>)
 80051a0:	4853      	ldr	r0, [pc, #332]	@ (80052f0 <SystemGetsSignal+0xf1c>)
 80051a2:	f001 fb9f 	bl	80068e4 <OLED_DoTweenObject>
                OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", 0, 8, 1, EASE_IN_CUBIC);
 80051a6:	2304      	movs	r3, #4
 80051a8:	9301      	str	r3, [sp, #4]
 80051aa:	2301      	movs	r3, #1
 80051ac:	9300      	str	r3, [sp, #0]
 80051ae:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 80051b2:	f04f 0200 	mov.w	r2, #0
 80051b6:	494f      	ldr	r1, [pc, #316]	@ (80052f4 <SystemGetsSignal+0xf20>)
 80051b8:	484f      	ldr	r0, [pc, #316]	@ (80052f8 <SystemGetsSignal+0xf24>)
 80051ba:	f001 fb93 	bl	80068e4 <OLED_DoTweenObject>
                OLED_DoTweenObject(&g_AnimationManager, "CursorScale", 0, 8, 1, EASE_INOUT_CIRC);
 80051be:	230c      	movs	r3, #12
 80051c0:	9301      	str	r3, [sp, #4]
 80051c2:	2301      	movs	r3, #1
 80051c4:	9300      	str	r3, [sp, #0]
 80051c6:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 80051ca:	f04f 0200 	mov.w	r2, #0
 80051ce:	494b      	ldr	r1, [pc, #300]	@ (80052fc <SystemGetsSignal+0xf28>)
 80051d0:	4849      	ldr	r0, [pc, #292]	@ (80052f8 <SystemGetsSignal+0xf24>)
 80051d2:	f001 fb87 	bl	80068e4 <OLED_DoTweenObject>
                OLED_DoTweenObject(&Tools_AnimationManager, "VideoPlayer", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1, EASE_IN_CIRC);
 80051d6:	230a      	movs	r3, #10
 80051d8:	9301      	str	r3, [sp, #4]
 80051da:	2301      	movs	r3, #1
 80051dc:	9300      	str	r3, [sp, #0]
 80051de:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 80051e2:	4a47      	ldr	r2, [pc, #284]	@ (8005300 <SystemGetsSignal+0xf2c>)
 80051e4:	4947      	ldr	r1, [pc, #284]	@ (8005304 <SystemGetsSignal+0xf30>)
 80051e6:	4848      	ldr	r0, [pc, #288]	@ (8005308 <SystemGetsSignal+0xf34>)
 80051e8:	f001 fb7c 	bl	80068e4 <OLED_DoTweenObject>
                HAL_Delay(100);
 80051ec:	2064      	movs	r0, #100	@ 0x64
 80051ee:	f002 fa23 	bl	8007638 <HAL_Delay>
                OLED_DoTweenObjectY(&g_AnimationManager, "BackButton", OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1, EASE_IN_CIRC);
 80051f2:	230a      	movs	r3, #10
 80051f4:	9300      	str	r3, [sp, #0]
 80051f6:	2301      	movs	r3, #1
 80051f8:	4a44      	ldr	r2, [pc, #272]	@ (800530c <SystemGetsSignal+0xf38>)
 80051fa:	4945      	ldr	r1, [pc, #276]	@ (8005310 <SystemGetsSignal+0xf3c>)
 80051fc:	483e      	ldr	r0, [pc, #248]	@ (80052f8 <SystemGetsSignal+0xf24>)
 80051fe:	f001 fc44 	bl	8006a8a <OLED_DoTweenObjectY>
                OLED_DoTweenObjectX(&g_AnimationManager, "BackButton", OLED_UI_START_X, 1, EASE_IN_CIRC);
 8005202:	230a      	movs	r3, #10
 8005204:	9300      	str	r3, [sp, #0]
 8005206:	2301      	movs	r3, #1
 8005208:	4a3d      	ldr	r2, [pc, #244]	@ (8005300 <SystemGetsSignal+0xf2c>)
 800520a:	4941      	ldr	r1, [pc, #260]	@ (8005310 <SystemGetsSignal+0xf3c>)
 800520c:	483a      	ldr	r0, [pc, #232]	@ (80052f8 <SystemGetsSignal+0xf24>)
 800520e:	f001 fc07 	bl	8006a20 <OLED_DoTweenObjectX>
 8005212:	e25b      	b.n	80056cc <SystemGetsSignal+0x12f8>
            }
            else if (menuRank == 3 && menuSelection == 1 && cancelSelection && currentPage == UI_PAGE_TOOLS)
 8005214:	4b2f      	ldr	r3, [pc, #188]	@ (80052d4 <SystemGetsSignal+0xf00>)
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	2b03      	cmp	r3, #3
 800521a:	f040 8083 	bne.w	8005324 <SystemGetsSignal+0xf50>
 800521e:	4b2e      	ldr	r3, [pc, #184]	@ (80052d8 <SystemGetsSignal+0xf04>)
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	2b01      	cmp	r3, #1
 8005224:	d17e      	bne.n	8005324 <SystemGetsSignal+0xf50>
 8005226:	4b3b      	ldr	r3, [pc, #236]	@ (8005314 <SystemGetsSignal+0xf40>)
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d07a      	beq.n	8005324 <SystemGetsSignal+0xf50>
 800522e:	4b2b      	ldr	r3, [pc, #172]	@ (80052dc <SystemGetsSignal+0xf08>)
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	2b04      	cmp	r3, #4
 8005234:	d176      	bne.n	8005324 <SystemGetsSignal+0xf50>
            {
                menuRank = 2;
 8005236:	4b27      	ldr	r3, [pc, #156]	@ (80052d4 <SystemGetsSignal+0xf00>)
 8005238:	2202      	movs	r2, #2
 800523a:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_TOOLS;
 800523c:	4b27      	ldr	r3, [pc, #156]	@ (80052dc <SystemGetsSignal+0xf08>)
 800523e:	2204      	movs	r2, #4
 8005240:	701a      	strb	r2, [r3, #0]
                OLED_DoTweenObject(&g_Title_AnimationManager, "BAD APPLE!", (OLED_WIDTH - strlen("BAD APPLE!") * 6), OLED_TITLE_End_Y, 1000, EASE_IN_CUBIC);
 8005242:	2304      	movs	r3, #4
 8005244:	9301      	str	r3, [sp, #4]
 8005246:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800524a:	9300      	str	r3, [sp, #0]
 800524c:	f04f 0300 	mov.w	r3, #0
 8005250:	4a25      	ldr	r2, [pc, #148]	@ (80052e8 <SystemGetsSignal+0xf14>)
 8005252:	4926      	ldr	r1, [pc, #152]	@ (80052ec <SystemGetsSignal+0xf18>)
 8005254:	4826      	ldr	r0, [pc, #152]	@ (80052f0 <SystemGetsSignal+0xf1c>)
 8005256:	f001 fb45 	bl	80068e4 <OLED_DoTweenObject>
                OLED_DoTweenObject(&g_AnimationManager, "TitleBGScale", strlen("BAD APPLE!") * 6 + 3, 8, 1000, EASE_IN_CUBIC);
 800525a:	2304      	movs	r3, #4
 800525c:	9301      	str	r3, [sp, #4]
 800525e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005262:	9300      	str	r3, [sp, #0]
 8005264:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8005268:	4a2b      	ldr	r2, [pc, #172]	@ (8005318 <SystemGetsSignal+0xf44>)
 800526a:	4922      	ldr	r1, [pc, #136]	@ (80052f4 <SystemGetsSignal+0xf20>)
 800526c:	4822      	ldr	r0, [pc, #136]	@ (80052f8 <SystemGetsSignal+0xf24>)
 800526e:	f001 fb39 	bl	80068e4 <OLED_DoTweenObject>
                OLED_DoTweenObject(&g_AnimationManager, "CursorScale", strlen("Video") * 6 + 3, 10, 1000, EASE_INOUT_CIRC);
 8005272:	230c      	movs	r3, #12
 8005274:	9301      	str	r3, [sp, #4]
 8005276:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800527a:	9300      	str	r3, [sp, #0]
 800527c:	4b27      	ldr	r3, [pc, #156]	@ (800531c <SystemGetsSignal+0xf48>)
 800527e:	4a28      	ldr	r2, [pc, #160]	@ (8005320 <SystemGetsSignal+0xf4c>)
 8005280:	491e      	ldr	r1, [pc, #120]	@ (80052fc <SystemGetsSignal+0xf28>)
 8005282:	481d      	ldr	r0, [pc, #116]	@ (80052f8 <SystemGetsSignal+0xf24>)
 8005284:	f001 fb2e 	bl	80068e4 <OLED_DoTweenObject>
                OLED_DoTweenObject(&Tools_AnimationManager, "VideoPlayer", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1000, EASE_IN_CIRC);
 8005288:	230a      	movs	r3, #10
 800528a:	9301      	str	r3, [sp, #4]
 800528c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005290:	9300      	str	r3, [sp, #0]
 8005292:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8005296:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800529a:	491a      	ldr	r1, [pc, #104]	@ (8005304 <SystemGetsSignal+0xf30>)
 800529c:	481a      	ldr	r0, [pc, #104]	@ (8005308 <SystemGetsSignal+0xf34>)
 800529e:	f001 fb21 	bl	80068e4 <OLED_DoTweenObject>
                HAL_Delay(100);
 80052a2:	2064      	movs	r0, #100	@ 0x64
 80052a4:	f002 f9c8 	bl	8007638 <HAL_Delay>
                OLED_DoTweenObjectY(&g_AnimationManager, "BackButton", OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1, EASE_IN_CIRC);
 80052a8:	230a      	movs	r3, #10
 80052aa:	9300      	str	r3, [sp, #0]
 80052ac:	2301      	movs	r3, #1
 80052ae:	4a17      	ldr	r2, [pc, #92]	@ (800530c <SystemGetsSignal+0xf38>)
 80052b0:	4917      	ldr	r1, [pc, #92]	@ (8005310 <SystemGetsSignal+0xf3c>)
 80052b2:	4811      	ldr	r0, [pc, #68]	@ (80052f8 <SystemGetsSignal+0xf24>)
 80052b4:	f001 fbe9 	bl	8006a8a <OLED_DoTweenObjectY>
                OLED_DoTweenObjectX(&g_AnimationManager, "BackButton", OLED_UI_END_X, 1000, EASE_IN_CIRC);
 80052b8:	230a      	movs	r3, #10
 80052ba:	9300      	str	r3, [sp, #0]
 80052bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80052c0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80052c4:	4912      	ldr	r1, [pc, #72]	@ (8005310 <SystemGetsSignal+0xf3c>)
 80052c6:	480c      	ldr	r0, [pc, #48]	@ (80052f8 <SystemGetsSignal+0xf24>)
 80052c8:	f001 fbaa 	bl	8006a20 <OLED_DoTweenObjectX>
                cancelSelection = false;
 80052cc:	4b11      	ldr	r3, [pc, #68]	@ (8005314 <SystemGetsSignal+0xf40>)
 80052ce:	2200      	movs	r2, #0
 80052d0:	701a      	strb	r2, [r3, #0]
 80052d2:	e1fb      	b.n	80056cc <SystemGetsSignal+0x12f8>
 80052d4:	20000001 	.word	0x20000001
 80052d8:	20000002 	.word	0x20000002
 80052dc:	20000b09 	.word	0x20000b09
 80052e0:	20003f58 	.word	0x20003f58
 80052e4:	c1200000 	.word	0xc1200000
 80052e8:	42880000 	.word	0x42880000
 80052ec:	0800c884 	.word	0x0800c884
 80052f0:	200032cc 	.word	0x200032cc
 80052f4:	0800c9b0 	.word	0x0800c9b0
 80052f8:	200038c0 	.word	0x200038c0
 80052fc:	0800c9c8 	.word	0x0800c9c8
 8005300:	c2b40000 	.word	0xc2b40000
 8005304:	0800c950 	.word	0x0800c950
 8005308:	20001afc 	.word	0x20001afc
 800530c:	41e80000 	.word	0x41e80000
 8005310:	0800c944 	.word	0x0800c944
 8005314:	20000b0b 	.word	0x20000b0b
 8005318:	427c0000 	.word	0x427c0000
 800531c:	41200000 	.word	0x41200000
 8005320:	42040000 	.word	0x42040000
            }
            else if (menuRank == 2 && menuSelection == 2 && currentPage == UI_PAGE_TOOLS)
 8005324:	4b90      	ldr	r3, [pc, #576]	@ (8005568 <SystemGetsSignal+0x1194>)
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	2b02      	cmp	r3, #2
 800532a:	f040 80ba 	bne.w	80054a2 <SystemGetsSignal+0x10ce>
 800532e:	4b8f      	ldr	r3, [pc, #572]	@ (800556c <SystemGetsSignal+0x1198>)
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	2b02      	cmp	r3, #2
 8005334:	f040 80b5 	bne.w	80054a2 <SystemGetsSignal+0x10ce>
 8005338:	4b8d      	ldr	r3, [pc, #564]	@ (8005570 <SystemGetsSignal+0x119c>)
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	2b04      	cmp	r3, #4
 800533e:	f040 80b0 	bne.w	80054a2 <SystemGetsSignal+0x10ce>
            {
                menuRank = 1;
 8005342:	4b89      	ldr	r3, [pc, #548]	@ (8005568 <SystemGetsSignal+0x1194>)
 8005344:	2201      	movs	r2, #1
 8005346:	701a      	strb	r2, [r3, #0]
                menuSelection = 2;
 8005348:	4b88      	ldr	r3, [pc, #544]	@ (800556c <SystemGetsSignal+0x1198>)
 800534a:	2202      	movs	r2, #2
 800534c:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_MENU;
 800534e:	4b88      	ldr	r3, [pc, #544]	@ (8005570 <SystemGetsSignal+0x119c>)
 8005350:	2200      	movs	r2, #0
 8005352:	701a      	strb	r2, [r3, #0]
                OLED_DoTweenObject(&Tools_AnimationManager, "VideoPlayer", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 0, 1000, EASE_IN_CIRC);
 8005354:	230a      	movs	r3, #10
 8005356:	9301      	str	r3, [sp, #4]
 8005358:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800535c:	9300      	str	r3, [sp, #0]
 800535e:	4b85      	ldr	r3, [pc, #532]	@ (8005574 <SystemGetsSignal+0x11a0>)
 8005360:	4a85      	ldr	r2, [pc, #532]	@ (8005578 <SystemGetsSignal+0x11a4>)
 8005362:	4986      	ldr	r1, [pc, #536]	@ (800557c <SystemGetsSignal+0x11a8>)
 8005364:	4886      	ldr	r0, [pc, #536]	@ (8005580 <SystemGetsSignal+0x11ac>)
 8005366:	f001 fabd 	bl	80068e4 <OLED_DoTweenObject>
                HAL_Delay(100);
 800536a:	2064      	movs	r0, #100	@ 0x64
 800536c:	f002 f964 	bl	8007638 <HAL_Delay>
                OLED_DoTweenObject(&g_AnimationManager, "BackButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1000, EASE_IN_CIRC);
 8005370:	230a      	movs	r3, #10
 8005372:	9301      	str	r3, [sp, #4]
 8005374:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005378:	9300      	str	r3, [sp, #0]
 800537a:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 800537e:	4a7e      	ldr	r2, [pc, #504]	@ (8005578 <SystemGetsSignal+0x11a4>)
 8005380:	4980      	ldr	r1, [pc, #512]	@ (8005584 <SystemGetsSignal+0x11b0>)
 8005382:	4881      	ldr	r0, [pc, #516]	@ (8005588 <SystemGetsSignal+0x11b4>)
 8005384:	f001 faae 	bl	80068e4 <OLED_DoTweenObject>

                OLED_DoTweenObject(&Menu_AnimationManager, "GamesButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (2 - menuSelection), 1000, EASE_IN_CIRC);
 8005388:	4b78      	ldr	r3, [pc, #480]	@ (800556c <SystemGetsSignal+0x1198>)
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	f1c3 0202 	rsb	r2, r3, #2
 8005390:	4613      	mov	r3, r2
 8005392:	005b      	lsls	r3, r3, #1
 8005394:	4413      	add	r3, r2
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	4413      	add	r3, r2
 800539a:	3303      	adds	r3, #3
 800539c:	4618      	mov	r0, r3
 800539e:	f7fa ffa1 	bl	80002e4 <__aeabi_i2f>
 80053a2:	4603      	mov	r3, r0
 80053a4:	220a      	movs	r2, #10
 80053a6:	9201      	str	r2, [sp, #4]
 80053a8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80053ac:	9200      	str	r2, [sp, #0]
 80053ae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80053b2:	4976      	ldr	r1, [pc, #472]	@ (800558c <SystemGetsSignal+0x11b8>)
 80053b4:	4876      	ldr	r0, [pc, #472]	@ (8005590 <SystemGetsSignal+0x11bc>)
 80053b6:	f001 fa95 	bl	80068e4 <OLED_DoTweenObject>
                HAL_Delay(100);
 80053ba:	2064      	movs	r0, #100	@ 0x64
 80053bc:	f002 f93c 	bl	8007638 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "ToolsButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (3 - menuSelection), 1000, EASE_IN_CIRC);
 80053c0:	4b6a      	ldr	r3, [pc, #424]	@ (800556c <SystemGetsSignal+0x1198>)
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	f1c3 0203 	rsb	r2, r3, #3
 80053c8:	4613      	mov	r3, r2
 80053ca:	005b      	lsls	r3, r3, #1
 80053cc:	4413      	add	r3, r2
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	4413      	add	r3, r2
 80053d2:	3303      	adds	r3, #3
 80053d4:	4618      	mov	r0, r3
 80053d6:	f7fa ff85 	bl	80002e4 <__aeabi_i2f>
 80053da:	4603      	mov	r3, r0
 80053dc:	220a      	movs	r2, #10
 80053de:	9201      	str	r2, [sp, #4]
 80053e0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80053e4:	9200      	str	r2, [sp, #0]
 80053e6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80053ea:	496a      	ldr	r1, [pc, #424]	@ (8005594 <SystemGetsSignal+0x11c0>)
 80053ec:	4868      	ldr	r0, [pc, #416]	@ (8005590 <SystemGetsSignal+0x11bc>)
 80053ee:	f001 fa79 	bl	80068e4 <OLED_DoTweenObject>
                HAL_Delay(100);
 80053f2:	2064      	movs	r0, #100	@ 0x64
 80053f4:	f002 f920 	bl	8007638 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "StatusButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (4 - menuSelection), 1000, EASE_IN_CIRC);
 80053f8:	4b5c      	ldr	r3, [pc, #368]	@ (800556c <SystemGetsSignal+0x1198>)
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	f1c3 0204 	rsb	r2, r3, #4
 8005400:	4613      	mov	r3, r2
 8005402:	005b      	lsls	r3, r3, #1
 8005404:	4413      	add	r3, r2
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	4413      	add	r3, r2
 800540a:	3303      	adds	r3, #3
 800540c:	4618      	mov	r0, r3
 800540e:	f7fa ff69 	bl	80002e4 <__aeabi_i2f>
 8005412:	4603      	mov	r3, r0
 8005414:	220a      	movs	r2, #10
 8005416:	9201      	str	r2, [sp, #4]
 8005418:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800541c:	9200      	str	r2, [sp, #0]
 800541e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005422:	495d      	ldr	r1, [pc, #372]	@ (8005598 <SystemGetsSignal+0x11c4>)
 8005424:	485a      	ldr	r0, [pc, #360]	@ (8005590 <SystemGetsSignal+0x11bc>)
 8005426:	f001 fa5d 	bl	80068e4 <OLED_DoTweenObject>
                HAL_Delay(100);
 800542a:	2064      	movs	r0, #100	@ 0x64
 800542c:	f002 f904 	bl	8007638 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "SettingsButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (5 - menuSelection), 1000, EASE_IN_CIRC);
 8005430:	4b4e      	ldr	r3, [pc, #312]	@ (800556c <SystemGetsSignal+0x1198>)
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	f1c3 0205 	rsb	r2, r3, #5
 8005438:	4613      	mov	r3, r2
 800543a:	005b      	lsls	r3, r3, #1
 800543c:	4413      	add	r3, r2
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	4413      	add	r3, r2
 8005442:	3303      	adds	r3, #3
 8005444:	4618      	mov	r0, r3
 8005446:	f7fa ff4d 	bl	80002e4 <__aeabi_i2f>
 800544a:	4603      	mov	r3, r0
 800544c:	220a      	movs	r2, #10
 800544e:	9201      	str	r2, [sp, #4]
 8005450:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005454:	9200      	str	r2, [sp, #0]
 8005456:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800545a:	4950      	ldr	r1, [pc, #320]	@ (800559c <SystemGetsSignal+0x11c8>)
 800545c:	484c      	ldr	r0, [pc, #304]	@ (8005590 <SystemGetsSignal+0x11bc>)
 800545e:	f001 fa41 	bl	80068e4 <OLED_DoTweenObject>
                HAL_Delay(100);
 8005462:	2064      	movs	r0, #100	@ 0x64
 8005464:	f002 f8e8 	bl	8007638 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "AboutButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * (6 - menuSelection), 1000, EASE_IN_CIRC);
 8005468:	4b40      	ldr	r3, [pc, #256]	@ (800556c <SystemGetsSignal+0x1198>)
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	f1c3 0206 	rsb	r2, r3, #6
 8005470:	4613      	mov	r3, r2
 8005472:	005b      	lsls	r3, r3, #1
 8005474:	4413      	add	r3, r2
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	4413      	add	r3, r2
 800547a:	3303      	adds	r3, #3
 800547c:	4618      	mov	r0, r3
 800547e:	f7fa ff31 	bl	80002e4 <__aeabi_i2f>
 8005482:	4603      	mov	r3, r0
 8005484:	220a      	movs	r2, #10
 8005486:	9201      	str	r2, [sp, #4]
 8005488:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800548c:	9200      	str	r2, [sp, #0]
 800548e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005492:	4943      	ldr	r1, [pc, #268]	@ (80055a0 <SystemGetsSignal+0x11cc>)
 8005494:	483e      	ldr	r0, [pc, #248]	@ (8005590 <SystemGetsSignal+0x11bc>)
 8005496:	f001 fa25 	bl	80068e4 <OLED_DoTweenObject>
                resetAnimation = true;
 800549a:	4b42      	ldr	r3, [pc, #264]	@ (80055a4 <SystemGetsSignal+0x11d0>)
 800549c:	2201      	movs	r2, #1
 800549e:	701a      	strb	r2, [r3, #0]
 80054a0:	e114      	b.n	80056cc <SystemGetsSignal+0x12f8>
            }
            else if (menuRank == 1 && menuSelection == 3)
 80054a2:	4b31      	ldr	r3, [pc, #196]	@ (8005568 <SystemGetsSignal+0x1194>)
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	f040 808a 	bne.w	80055c0 <SystemGetsSignal+0x11ec>
 80054ac:	4b2f      	ldr	r3, [pc, #188]	@ (800556c <SystemGetsSignal+0x1198>)
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	2b03      	cmp	r3, #3
 80054b2:	f040 8085 	bne.w	80055c0 <SystemGetsSignal+0x11ec>
            {
                menuRank = 2;
 80054b6:	4b2c      	ldr	r3, [pc, #176]	@ (8005568 <SystemGetsSignal+0x1194>)
 80054b8:	2202      	movs	r2, #2
 80054ba:	701a      	strb	r2, [r3, #0]
                menuSelection = 3;
 80054bc:	4b2b      	ldr	r3, [pc, #172]	@ (800556c <SystemGetsSignal+0x1198>)
 80054be:	2203      	movs	r2, #3
 80054c0:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_STATUS;
 80054c2:	4b2b      	ldr	r3, [pc, #172]	@ (8005570 <SystemGetsSignal+0x119c>)
 80054c4:	2202      	movs	r2, #2
 80054c6:	701a      	strb	r2, [r3, #0]
                OLED_DoTweenObject(&g_Title_AnimationManager, "TitleStatus", (OLED_WIDTH - strlen("Machine States") * 6), OLED_TITLE_Start_Y, 500, EASE_IN_CUBIC);
 80054c8:	2304      	movs	r3, #4
 80054ca:	9301      	str	r3, [sp, #4]
 80054cc:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80054d0:	9300      	str	r3, [sp, #0]
 80054d2:	4b35      	ldr	r3, [pc, #212]	@ (80055a8 <SystemGetsSignal+0x11d4>)
 80054d4:	4a35      	ldr	r2, [pc, #212]	@ (80055ac <SystemGetsSignal+0x11d8>)
 80054d6:	4936      	ldr	r1, [pc, #216]	@ (80055b0 <SystemGetsSignal+0x11dc>)
 80054d8:	4836      	ldr	r0, [pc, #216]	@ (80055b4 <SystemGetsSignal+0x11e0>)
 80054da:	f001 fa03 	bl	80068e4 <OLED_DoTweenObject>
                OLED_DoTweenObject(&Menu_AnimationManager, "GamesButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * -1, 1000, EASE_IN_CIRC);
 80054de:	230a      	movs	r3, #10
 80054e0:	9301      	str	r3, [sp, #4]
 80054e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80054e6:	9300      	str	r3, [sp, #0]
 80054e8:	4b2f      	ldr	r3, [pc, #188]	@ (80055a8 <SystemGetsSignal+0x11d4>)
 80054ea:	4a23      	ldr	r2, [pc, #140]	@ (8005578 <SystemGetsSignal+0x11a4>)
 80054ec:	4927      	ldr	r1, [pc, #156]	@ (800558c <SystemGetsSignal+0x11b8>)
 80054ee:	4828      	ldr	r0, [pc, #160]	@ (8005590 <SystemGetsSignal+0x11bc>)
 80054f0:	f001 f9f8 	bl	80068e4 <OLED_DoTweenObject>
                HAL_Delay(100);
 80054f4:	2064      	movs	r0, #100	@ 0x64
 80054f6:	f002 f89f 	bl	8007638 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "ToolsButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 0, 1000, EASE_IN_CIRC);
 80054fa:	230a      	movs	r3, #10
 80054fc:	9301      	str	r3, [sp, #4]
 80054fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005502:	9300      	str	r3, [sp, #0]
 8005504:	4b1b      	ldr	r3, [pc, #108]	@ (8005574 <SystemGetsSignal+0x11a0>)
 8005506:	4a1c      	ldr	r2, [pc, #112]	@ (8005578 <SystemGetsSignal+0x11a4>)
 8005508:	4922      	ldr	r1, [pc, #136]	@ (8005594 <SystemGetsSignal+0x11c0>)
 800550a:	4821      	ldr	r0, [pc, #132]	@ (8005590 <SystemGetsSignal+0x11bc>)
 800550c:	f001 f9ea 	bl	80068e4 <OLED_DoTweenObject>
                HAL_Delay(100);
 8005510:	2064      	movs	r0, #100	@ 0x64
 8005512:	f002 f891 	bl	8007638 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "StatusButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1000, EASE_IN_CIRC);
 8005516:	230a      	movs	r3, #10
 8005518:	9301      	str	r3, [sp, #4]
 800551a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800551e:	9300      	str	r3, [sp, #0]
 8005520:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8005524:	4a14      	ldr	r2, [pc, #80]	@ (8005578 <SystemGetsSignal+0x11a4>)
 8005526:	491c      	ldr	r1, [pc, #112]	@ (8005598 <SystemGetsSignal+0x11c4>)
 8005528:	4819      	ldr	r0, [pc, #100]	@ (8005590 <SystemGetsSignal+0x11bc>)
 800552a:	f001 f9db 	bl	80068e4 <OLED_DoTweenObject>
                HAL_Delay(100);
 800552e:	2064      	movs	r0, #100	@ 0x64
 8005530:	f002 f882 	bl	8007638 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "SettingsButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1000, EASE_IN_CIRC);
 8005534:	230a      	movs	r3, #10
 8005536:	9301      	str	r3, [sp, #4]
 8005538:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800553c:	9300      	str	r3, [sp, #0]
 800553e:	4b1e      	ldr	r3, [pc, #120]	@ (80055b8 <SystemGetsSignal+0x11e4>)
 8005540:	4a0d      	ldr	r2, [pc, #52]	@ (8005578 <SystemGetsSignal+0x11a4>)
 8005542:	4916      	ldr	r1, [pc, #88]	@ (800559c <SystemGetsSignal+0x11c8>)
 8005544:	4812      	ldr	r0, [pc, #72]	@ (8005590 <SystemGetsSignal+0x11bc>)
 8005546:	f001 f9cd 	bl	80068e4 <OLED_DoTweenObject>
                HAL_Delay(100);
 800554a:	2064      	movs	r0, #100	@ 0x64
 800554c:	f002 f874 	bl	8007638 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "AboutButton", OLED_UI_START_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, 1000, EASE_IN_CIRC);
 8005550:	230a      	movs	r3, #10
 8005552:	9301      	str	r3, [sp, #4]
 8005554:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005558:	9300      	str	r3, [sp, #0]
 800555a:	4b18      	ldr	r3, [pc, #96]	@ (80055bc <SystemGetsSignal+0x11e8>)
 800555c:	4a06      	ldr	r2, [pc, #24]	@ (8005578 <SystemGetsSignal+0x11a4>)
 800555e:	4910      	ldr	r1, [pc, #64]	@ (80055a0 <SystemGetsSignal+0x11cc>)
 8005560:	480b      	ldr	r0, [pc, #44]	@ (8005590 <SystemGetsSignal+0x11bc>)
 8005562:	f001 f9bf 	bl	80068e4 <OLED_DoTweenObject>
 8005566:	e0b1      	b.n	80056cc <SystemGetsSignal+0x12f8>
 8005568:	20000001 	.word	0x20000001
 800556c:	20000002 	.word	0x20000002
 8005570:	20000b09 	.word	0x20000b09
 8005574:	40400000 	.word	0x40400000
 8005578:	c2b40000 	.word	0xc2b40000
 800557c:	0800c950 	.word	0x0800c950
 8005580:	20001afc 	.word	0x20001afc
 8005584:	0800c944 	.word	0x0800c944
 8005588:	200038c0 	.word	0x200038c0
 800558c:	0800c9d4 	.word	0x0800c9d4
 8005590:	20000f14 	.word	0x20000f14
 8005594:	0800c9e0 	.word	0x0800c9e0
 8005598:	0800c9ec 	.word	0x0800c9ec
 800559c:	0800c9fc 	.word	0x0800c9fc
 80055a0:	0800ca0c 	.word	0x0800ca0c
 80055a4:	20000b0c 	.word	0x20000b0c
 80055a8:	c1200000 	.word	0xc1200000
 80055ac:	42300000 	.word	0x42300000
 80055b0:	0800c838 	.word	0x0800c838
 80055b4:	200032cc 	.word	0x200032cc
 80055b8:	41e80000 	.word	0x41e80000
 80055bc:	42280000 	.word	0x42280000
            }
            else if (menuRank == 2 && currentPage == UI_PAGE_STATUS)
 80055c0:	4b49      	ldr	r3, [pc, #292]	@ (80056e8 <SystemGetsSignal+0x1314>)
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	f040 8081 	bne.w	80056cc <SystemGetsSignal+0x12f8>
 80055ca:	4b48      	ldr	r3, [pc, #288]	@ (80056ec <SystemGetsSignal+0x1318>)
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	2b02      	cmp	r3, #2
 80055d0:	d17c      	bne.n	80056cc <SystemGetsSignal+0x12f8>
            {
                menuRank = 1;
 80055d2:	4b45      	ldr	r3, [pc, #276]	@ (80056e8 <SystemGetsSignal+0x1314>)
 80055d4:	2201      	movs	r2, #1
 80055d6:	701a      	strb	r2, [r3, #0]
                menuSelection = 3;
 80055d8:	4b45      	ldr	r3, [pc, #276]	@ (80056f0 <SystemGetsSignal+0x131c>)
 80055da:	2203      	movs	r2, #3
 80055dc:	701a      	strb	r2, [r3, #0]
                currentPage = UI_PAGE_MENU;
 80055de:	4b43      	ldr	r3, [pc, #268]	@ (80056ec <SystemGetsSignal+0x1318>)
 80055e0:	2200      	movs	r2, #0
 80055e2:	701a      	strb	r2, [r3, #0]
                OLED_DoTweenObject(&g_Title_AnimationManager, "TitleStatus", (OLED_WIDTH - strlen("Status") * 6), OLED_TITLE_End_Y, 500, EASE_IN_CUBIC);
 80055e4:	2304      	movs	r3, #4
 80055e6:	9301      	str	r3, [sp, #4]
 80055e8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80055ec:	9300      	str	r3, [sp, #0]
 80055ee:	f04f 0300 	mov.w	r3, #0
 80055f2:	4a40      	ldr	r2, [pc, #256]	@ (80056f4 <SystemGetsSignal+0x1320>)
 80055f4:	4940      	ldr	r1, [pc, #256]	@ (80056f8 <SystemGetsSignal+0x1324>)
 80055f6:	4841      	ldr	r0, [pc, #260]	@ (80056fc <SystemGetsSignal+0x1328>)
 80055f8:	f001 f974 	bl	80068e4 <OLED_DoTweenObject>

                OLED_DoTweenObject(&Status_AnimationManager, "RunningTime", 0, -10, 500, EASE_IN_CIRC);
 80055fc:	230a      	movs	r3, #10
 80055fe:	9301      	str	r3, [sp, #4]
 8005600:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8005604:	9300      	str	r3, [sp, #0]
 8005606:	4b3e      	ldr	r3, [pc, #248]	@ (8005700 <SystemGetsSignal+0x132c>)
 8005608:	f04f 0200 	mov.w	r2, #0
 800560c:	493d      	ldr	r1, [pc, #244]	@ (8005704 <SystemGetsSignal+0x1330>)
 800560e:	483e      	ldr	r0, [pc, #248]	@ (8005708 <SystemGetsSignal+0x1334>)
 8005610:	f001 f968 	bl	80068e4 <OLED_DoTweenObject>
                HAL_Delay(100);
 8005614:	2064      	movs	r0, #100	@ 0x64
 8005616:	f002 f80f 	bl	8007638 <HAL_Delay>
                OLED_DoTweenObject(&Status_AnimationManager, "Status", 0, OLED_HEIGHT, 500, EASE_IN_CIRC);
 800561a:	230a      	movs	r3, #10
 800561c:	9301      	str	r3, [sp, #4]
 800561e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8005622:	9300      	str	r3, [sp, #0]
 8005624:	f04f 4385 	mov.w	r3, #1115684864	@ 0x42800000
 8005628:	f04f 0200 	mov.w	r2, #0
 800562c:	4937      	ldr	r1, [pc, #220]	@ (800570c <SystemGetsSignal+0x1338>)
 800562e:	4836      	ldr	r0, [pc, #216]	@ (8005708 <SystemGetsSignal+0x1334>)
 8005630:	f001 f958 	bl	80068e4 <OLED_DoTweenObject>


                OLED_DoTweenObject(&Menu_AnimationManager, "GamesButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * -1, 1000, EASE_IN_CIRC);
 8005634:	230a      	movs	r3, #10
 8005636:	9301      	str	r3, [sp, #4]
 8005638:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800563c:	9300      	str	r3, [sp, #0]
 800563e:	4b30      	ldr	r3, [pc, #192]	@ (8005700 <SystemGetsSignal+0x132c>)
 8005640:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005644:	4932      	ldr	r1, [pc, #200]	@ (8005710 <SystemGetsSignal+0x133c>)
 8005646:	4833      	ldr	r0, [pc, #204]	@ (8005714 <SystemGetsSignal+0x1340>)
 8005648:	f001 f94c 	bl	80068e4 <OLED_DoTweenObject>
                HAL_Delay(100);
 800564c:	2064      	movs	r0, #100	@ 0x64
 800564e:	f001 fff3 	bl	8007638 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "ToolsButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 0, 1000, EASE_IN_CIRC);
 8005652:	230a      	movs	r3, #10
 8005654:	9301      	str	r3, [sp, #4]
 8005656:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800565a:	9300      	str	r3, [sp, #0]
 800565c:	4b2e      	ldr	r3, [pc, #184]	@ (8005718 <SystemGetsSignal+0x1344>)
 800565e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005662:	492e      	ldr	r1, [pc, #184]	@ (800571c <SystemGetsSignal+0x1348>)
 8005664:	482b      	ldr	r0, [pc, #172]	@ (8005714 <SystemGetsSignal+0x1340>)
 8005666:	f001 f93d 	bl	80068e4 <OLED_DoTweenObject>
                HAL_Delay(100);
 800566a:	2064      	movs	r0, #100	@ 0x64
 800566c:	f001 ffe4 	bl	8007638 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "StatusButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 1, 1000, EASE_IN_CIRC);
 8005670:	230a      	movs	r3, #10
 8005672:	9301      	str	r3, [sp, #4]
 8005674:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005678:	9300      	str	r3, [sp, #0]
 800567a:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 800567e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005682:	4927      	ldr	r1, [pc, #156]	@ (8005720 <SystemGetsSignal+0x134c>)
 8005684:	4823      	ldr	r0, [pc, #140]	@ (8005714 <SystemGetsSignal+0x1340>)
 8005686:	f001 f92d 	bl	80068e4 <OLED_DoTweenObject>
                HAL_Delay(100);
 800568a:	2064      	movs	r0, #100	@ 0x64
 800568c:	f001 ffd4 	bl	8007638 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "SettingsButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 2, 1000, EASE_IN_CIRC);
 8005690:	230a      	movs	r3, #10
 8005692:	9301      	str	r3, [sp, #4]
 8005694:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005698:	9300      	str	r3, [sp, #0]
 800569a:	4b22      	ldr	r3, [pc, #136]	@ (8005724 <SystemGetsSignal+0x1350>)
 800569c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80056a0:	4921      	ldr	r1, [pc, #132]	@ (8005728 <SystemGetsSignal+0x1354>)
 80056a2:	481c      	ldr	r0, [pc, #112]	@ (8005714 <SystemGetsSignal+0x1340>)
 80056a4:	f001 f91e 	bl	80068e4 <OLED_DoTweenObject>
                HAL_Delay(100);
 80056a8:	2064      	movs	r0, #100	@ 0x64
 80056aa:	f001 ffc5 	bl	8007638 <HAL_Delay>
                OLED_DoTweenObject(&Menu_AnimationManager, "AboutButton", OLED_UI_END_X, OLED_UI_START_Y + OLED_UI_GAP_Y * 3, 1000, EASE_IN_CIRC);
 80056ae:	230a      	movs	r3, #10
 80056b0:	9301      	str	r3, [sp, #4]
 80056b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80056b6:	9300      	str	r3, [sp, #0]
 80056b8:	4b1c      	ldr	r3, [pc, #112]	@ (800572c <SystemGetsSignal+0x1358>)
 80056ba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80056be:	491c      	ldr	r1, [pc, #112]	@ (8005730 <SystemGetsSignal+0x135c>)
 80056c0:	4814      	ldr	r0, [pc, #80]	@ (8005714 <SystemGetsSignal+0x1340>)
 80056c2:	f001 f90f 	bl	80068e4 <OLED_DoTweenObject>
                resetAnimation = true;
 80056c6:	4b1b      	ldr	r3, [pc, #108]	@ (8005734 <SystemGetsSignal+0x1360>)
 80056c8:	2201      	movs	r2, #1
 80056ca:	701a      	strb	r2, [r3, #0]
            }
            

            while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET)
 80056cc:	bf00      	nop
 80056ce:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80056d2:	4819      	ldr	r0, [pc, #100]	@ (8005738 <SystemGetsSignal+0x1364>)
 80056d4:	f002 fbc6 	bl	8007e64 <HAL_GPIO_ReadPin>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d0f7      	beq.n	80056ce <SystemGetsSignal+0x12fa>
            {
                // 等待按钮释放
            }
        }
    }
}
 80056de:	bf00      	nop
 80056e0:	3708      	adds	r7, #8
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	20000001 	.word	0x20000001
 80056ec:	20000b09 	.word	0x20000b09
 80056f0:	20000002 	.word	0x20000002
 80056f4:	42b80000 	.word	0x42b80000
 80056f8:	0800c838 	.word	0x0800c838
 80056fc:	200032cc 	.word	0x200032cc
 8005700:	c1200000 	.word	0xc1200000
 8005704:	0800c95c 	.word	0x0800c95c
 8005708:	20002cd8 	.word	0x20002cd8
 800570c:	0800c968 	.word	0x0800c968
 8005710:	0800c9d4 	.word	0x0800c9d4
 8005714:	20000f14 	.word	0x20000f14
 8005718:	40400000 	.word	0x40400000
 800571c:	0800c9e0 	.word	0x0800c9e0
 8005720:	0800c9ec 	.word	0x0800c9ec
 8005724:	41e80000 	.word	0x41e80000
 8005728:	0800c9fc 	.word	0x0800c9fc
 800572c:	42280000 	.word	0x42280000
 8005730:	0800ca0c 	.word	0x0800ca0c
 8005734:	20000b0c 	.word	0x20000b0c
 8005738:	40010c00 	.word	0x40010c00

0800573c <OLED_EnableDiffMode>:
    }
}

// 启用差分更新模式
void OLED_EnableDiffMode(uint8_t enable)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b082      	sub	sp, #8
 8005740:	af00      	add	r7, sp, #0
 8005742:	4603      	mov	r3, r0
 8005744:	71fb      	strb	r3, [r7, #7]
    diff_mode_enabled = enable;
 8005746:	4a09      	ldr	r2, [pc, #36]	@ (800576c <OLED_EnableDiffMode+0x30>)
 8005748:	79fb      	ldrb	r3, [r7, #7]
 800574a:	7013      	strb	r3, [r2, #0]
    if (enable)
 800574c:	79fb      	ldrb	r3, [r7, #7]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d008      	beq.n	8005764 <OLED_EnableDiffMode+0x28>
    {
        memcpy(OLED_PrevBuffer, OLED_BackBuffer, OLED_WIDTH * OLED_PAGES);
 8005752:	4a07      	ldr	r2, [pc, #28]	@ (8005770 <OLED_EnableDiffMode+0x34>)
 8005754:	4b07      	ldr	r3, [pc, #28]	@ (8005774 <OLED_EnableDiffMode+0x38>)
 8005756:	4610      	mov	r0, r2
 8005758:	4619      	mov	r1, r3
 800575a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800575e:	461a      	mov	r2, r3
 8005760:	f004 fdf1 	bl	800a346 <memcpy>
    }
}
 8005764:	bf00      	nop
 8005766:	3708      	adds	r7, #8
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}
 800576c:	20000f10 	.word	0x20000f10
 8005770:	20000b10 	.word	0x20000b10
 8005774:	20000308 	.word	0x20000308

08005778 <OLED_EnableFastUpdate>:

// 设置快速更新模式
void OLED_EnableFastUpdate(uint8_t enable)
{
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	4603      	mov	r3, r0
 8005780:	71fb      	strb	r3, [r7, #7]
    fast_update_enabled = enable;
 8005782:	4a04      	ldr	r2, [pc, #16]	@ (8005794 <OLED_EnableFastUpdate+0x1c>)
 8005784:	79fb      	ldrb	r3, [r7, #7]
 8005786:	7013      	strb	r3, [r2, #0]
}
 8005788:	bf00      	nop
 800578a:	370c      	adds	r7, #12
 800578c:	46bd      	mov	sp, r7
 800578e:	bc80      	pop	{r7}
 8005790:	4770      	bx	lr
 8005792:	bf00      	nop
 8005794:	20000006 	.word	0x20000006

08005798 <OLED_SmartUpdate>:

// 智能更新显示
// 选择性更新脏页，以提高帧率
void OLED_SmartUpdate(void)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
    // 如果OLED/DMA忙，直接返回
    if (OLED_IsBusy())
 800579e:	f7fc fa77 	bl	8001c90 <OLED_IsBusy>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	f040 8082 	bne.w	80058ae <OLED_SmartUpdate+0x116>
    {
        return;
    }

    // 检查是否有脏页需要更新
    uint8_t has_dirty = 0;
 80057aa:	2300      	movs	r3, #0
 80057ac:	73fb      	strb	r3, [r7, #15]
    uint8_t first_dirty = 255;
 80057ae:	23ff      	movs	r3, #255	@ 0xff
 80057b0:	73bb      	strb	r3, [r7, #14]
    uint8_t last_dirty = 0;
 80057b2:	2300      	movs	r3, #0
 80057b4:	737b      	strb	r3, [r7, #13]

    // 如果启用了差分更新，检查哪些页已经变化
    if (diff_mode_enabled)
 80057b6:	4b40      	ldr	r3, [pc, #256]	@ (80058b8 <OLED_SmartUpdate+0x120>)
 80057b8:	781b      	ldrb	r3, [r3, #0]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d046      	beq.n	800584c <OLED_SmartUpdate+0xb4>
    {
        for (uint8_t page = 0; page < OLED_PAGES; page++)
 80057be:	2300      	movs	r3, #0
 80057c0:	733b      	strb	r3, [r7, #12]
 80057c2:	e03f      	b.n	8005844 <OLED_SmartUpdate+0xac>
        {
            // 检查此页中是否有任何字节发生变化
            uint8_t page_changed = 0;
 80057c4:	2300      	movs	r3, #0
 80057c6:	72fb      	strb	r3, [r7, #11]
            uint16_t start_idx = page * OLED_WIDTH;
 80057c8:	7b3b      	ldrb	r3, [r7, #12]
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	01db      	lsls	r3, r3, #7
 80057ce:	80bb      	strh	r3, [r7, #4]

            for (uint16_t i = 0; i < OLED_WIDTH; i++)
 80057d0:	2300      	movs	r3, #0
 80057d2:	813b      	strh	r3, [r7, #8]
 80057d4:	e015      	b.n	8005802 <OLED_SmartUpdate+0x6a>
            {
                if (OLED_BackBuffer[start_idx + i] != OLED_PrevBuffer[start_idx + i])
 80057d6:	88ba      	ldrh	r2, [r7, #4]
 80057d8:	893b      	ldrh	r3, [r7, #8]
 80057da:	4413      	add	r3, r2
 80057dc:	4a37      	ldr	r2, [pc, #220]	@ (80058bc <OLED_SmartUpdate+0x124>)
 80057de:	5cd2      	ldrb	r2, [r2, r3]
 80057e0:	88b9      	ldrh	r1, [r7, #4]
 80057e2:	893b      	ldrh	r3, [r7, #8]
 80057e4:	440b      	add	r3, r1
 80057e6:	4936      	ldr	r1, [pc, #216]	@ (80058c0 <OLED_SmartUpdate+0x128>)
 80057e8:	5ccb      	ldrb	r3, [r1, r3]
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d006      	beq.n	80057fc <OLED_SmartUpdate+0x64>
                {
                    page_changed = 1;
 80057ee:	2301      	movs	r3, #1
 80057f0:	72fb      	strb	r3, [r7, #11]
                    oled_dirty_pages[page] = 1;
 80057f2:	7b3b      	ldrb	r3, [r7, #12]
 80057f4:	4a33      	ldr	r2, [pc, #204]	@ (80058c4 <OLED_SmartUpdate+0x12c>)
 80057f6:	2101      	movs	r1, #1
 80057f8:	54d1      	strb	r1, [r2, r3]
                    break;
 80057fa:	e005      	b.n	8005808 <OLED_SmartUpdate+0x70>
            for (uint16_t i = 0; i < OLED_WIDTH; i++)
 80057fc:	893b      	ldrh	r3, [r7, #8]
 80057fe:	3301      	adds	r3, #1
 8005800:	813b      	strh	r3, [r7, #8]
 8005802:	893b      	ldrh	r3, [r7, #8]
 8005804:	2b7f      	cmp	r3, #127	@ 0x7f
 8005806:	d9e6      	bls.n	80057d6 <OLED_SmartUpdate+0x3e>
                }
            }

            if (page_changed)
 8005808:	7afb      	ldrb	r3, [r7, #11]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d017      	beq.n	800583e <OLED_SmartUpdate+0xa6>
            {
                has_dirty = 1;
 800580e:	2301      	movs	r3, #1
 8005810:	73fb      	strb	r3, [r7, #15]
                if (page < first_dirty)
 8005812:	7b3a      	ldrb	r2, [r7, #12]
 8005814:	7bbb      	ldrb	r3, [r7, #14]
 8005816:	429a      	cmp	r2, r3
 8005818:	d201      	bcs.n	800581e <OLED_SmartUpdate+0x86>
                    first_dirty = page;
 800581a:	7b3b      	ldrb	r3, [r7, #12]
 800581c:	73bb      	strb	r3, [r7, #14]
                if (page > last_dirty)
 800581e:	7b3a      	ldrb	r2, [r7, #12]
 8005820:	7b7b      	ldrb	r3, [r7, #13]
 8005822:	429a      	cmp	r2, r3
 8005824:	d901      	bls.n	800582a <OLED_SmartUpdate+0x92>
                    last_dirty = page;
 8005826:	7b3b      	ldrb	r3, [r7, #12]
 8005828:	737b      	strb	r3, [r7, #13]

                // 更新上一帧缓存
                memcpy(
 800582a:	88bb      	ldrh	r3, [r7, #4]
 800582c:	4a24      	ldr	r2, [pc, #144]	@ (80058c0 <OLED_SmartUpdate+0x128>)
 800582e:	1898      	adds	r0, r3, r2
 8005830:	88bb      	ldrh	r3, [r7, #4]
 8005832:	4a22      	ldr	r2, [pc, #136]	@ (80058bc <OLED_SmartUpdate+0x124>)
 8005834:	4413      	add	r3, r2
 8005836:	2280      	movs	r2, #128	@ 0x80
 8005838:	4619      	mov	r1, r3
 800583a:	f004 fd84 	bl	800a346 <memcpy>
        for (uint8_t page = 0; page < OLED_PAGES; page++)
 800583e:	7b3b      	ldrb	r3, [r7, #12]
 8005840:	3301      	adds	r3, #1
 8005842:	733b      	strb	r3, [r7, #12]
 8005844:	7b3b      	ldrb	r3, [r7, #12]
 8005846:	2b07      	cmp	r3, #7
 8005848:	d9bc      	bls.n	80057c4 <OLED_SmartUpdate+0x2c>
 800584a:	e01c      	b.n	8005886 <OLED_SmartUpdate+0xee>
        }
    }
    else
    {
        // 如果未启用差分更新，使用脏页标记
        for (uint8_t i = 0; i < OLED_PAGES; i++)
 800584c:	2300      	movs	r3, #0
 800584e:	71fb      	strb	r3, [r7, #7]
 8005850:	e016      	b.n	8005880 <OLED_SmartUpdate+0xe8>
        {
            if (oled_dirty_pages[i])
 8005852:	79fb      	ldrb	r3, [r7, #7]
 8005854:	4a1b      	ldr	r2, [pc, #108]	@ (80058c4 <OLED_SmartUpdate+0x12c>)
 8005856:	5cd3      	ldrb	r3, [r2, r3]
 8005858:	b2db      	uxtb	r3, r3
 800585a:	2b00      	cmp	r3, #0
 800585c:	d00d      	beq.n	800587a <OLED_SmartUpdate+0xe2>
            {
                has_dirty = 1;
 800585e:	2301      	movs	r3, #1
 8005860:	73fb      	strb	r3, [r7, #15]
                if (i < first_dirty)
 8005862:	79fa      	ldrb	r2, [r7, #7]
 8005864:	7bbb      	ldrb	r3, [r7, #14]
 8005866:	429a      	cmp	r2, r3
 8005868:	d201      	bcs.n	800586e <OLED_SmartUpdate+0xd6>
                    first_dirty = i;
 800586a:	79fb      	ldrb	r3, [r7, #7]
 800586c:	73bb      	strb	r3, [r7, #14]
                if (i > last_dirty)
 800586e:	79fa      	ldrb	r2, [r7, #7]
 8005870:	7b7b      	ldrb	r3, [r7, #13]
 8005872:	429a      	cmp	r2, r3
 8005874:	d901      	bls.n	800587a <OLED_SmartUpdate+0xe2>
                    last_dirty = i;
 8005876:	79fb      	ldrb	r3, [r7, #7]
 8005878:	737b      	strb	r3, [r7, #13]
        for (uint8_t i = 0; i < OLED_PAGES; i++)
 800587a:	79fb      	ldrb	r3, [r7, #7]
 800587c:	3301      	adds	r3, #1
 800587e:	71fb      	strb	r3, [r7, #7]
 8005880:	79fb      	ldrb	r3, [r7, #7]
 8005882:	2b07      	cmp	r3, #7
 8005884:	d9e5      	bls.n	8005852 <OLED_SmartUpdate+0xba>
            }
        }
    }

    // 如果有脏页，只更新这些页
    if (has_dirty && fast_update_enabled)
 8005886:	7bfb      	ldrb	r3, [r7, #15]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d00a      	beq.n	80058a2 <OLED_SmartUpdate+0x10a>
 800588c:	4b0e      	ldr	r3, [pc, #56]	@ (80058c8 <OLED_SmartUpdate+0x130>)
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d006      	beq.n	80058a2 <OLED_SmartUpdate+0x10a>
    {
        OLED_UpdateDisplayPartial(first_dirty, last_dirty);
 8005894:	7b7a      	ldrb	r2, [r7, #13]
 8005896:	7bbb      	ldrb	r3, [r7, #14]
 8005898:	4611      	mov	r1, r2
 800589a:	4618      	mov	r0, r3
 800589c:	f7fc fa78 	bl	8001d90 <OLED_UpdateDisplayPartial>
 80058a0:	e006      	b.n	80058b0 <OLED_SmartUpdate+0x118>
    }
    else if (has_dirty)
 80058a2:	7bfb      	ldrb	r3, [r7, #15]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d003      	beq.n	80058b0 <OLED_SmartUpdate+0x118>
    {
        OLED_UpdateDisplayVSync();
 80058a8:	f7fc fa1a 	bl	8001ce0 <OLED_UpdateDisplayVSync>
 80058ac:	e000      	b.n	80058b0 <OLED_SmartUpdate+0x118>
        return;
 80058ae:	bf00      	nop
    }
}
 80058b0:	3710      	adds	r7, #16
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	bf00      	nop
 80058b8:	20000f10 	.word	0x20000f10
 80058bc:	20000308 	.word	0x20000308
 80058c0:	20000b10 	.word	0x20000b10
 80058c4:	20000300 	.word	0x20000300
 80058c8:	20000006 	.word	0x20000006

080058cc <EaseLinear>:
#include "stdint.h" // 添加 stdint.h 以支持标准整数类型
#include "oled_ui.h"
#pragma region TWEENS // 动画缓动函数全部在这里定义

static float EaseLinear(float t)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
    return t;
 80058d4:	687b      	ldr	r3, [r7, #4]
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	370c      	adds	r7, #12
 80058da:	46bd      	mov	sp, r7
 80058dc:	bc80      	pop	{r7}
 80058de:	4770      	bx	lr

080058e0 <EaseInQuad>:

static float EaseInQuad(float t)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b082      	sub	sp, #8
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
    return t * t;
 80058e8:	6879      	ldr	r1, [r7, #4]
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f7fa fd4e 	bl	800038c <__aeabi_fmul>
 80058f0:	4603      	mov	r3, r0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3708      	adds	r7, #8
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}

080058fa <EaseOutQuad>:

static float EaseOutQuad(float t)
{
 80058fa:	b580      	push	{r7, lr}
 80058fc:	b082      	sub	sp, #8
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
    return t * (2 - t);
 8005902:	6879      	ldr	r1, [r7, #4]
 8005904:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8005908:	f7fa fc36 	bl	8000178 <__aeabi_fsub>
 800590c:	4603      	mov	r3, r0
 800590e:	6879      	ldr	r1, [r7, #4]
 8005910:	4618      	mov	r0, r3
 8005912:	f7fa fd3b 	bl	800038c <__aeabi_fmul>
 8005916:	4603      	mov	r3, r0
}
 8005918:	4618      	mov	r0, r3
 800591a:	3708      	adds	r7, #8
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <EaseInOutQuad>:

static float EaseInOutQuad(float t)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b082      	sub	sp, #8
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
    return t < 0.5f ? 2 * t * t : -1 + (4 - 2 * t) * t;
 8005928:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f7fa fecb 	bl	80006c8 <__aeabi_fcmplt>
 8005932:	4603      	mov	r3, r0
 8005934:	2b00      	cmp	r3, #0
 8005936:	d00b      	beq.n	8005950 <EaseInOutQuad+0x30>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	4619      	mov	r1, r3
 800593c:	4618      	mov	r0, r3
 800593e:	f7fa fc1d 	bl	800017c <__addsf3>
 8005942:	4603      	mov	r3, r0
 8005944:	6879      	ldr	r1, [r7, #4]
 8005946:	4618      	mov	r0, r3
 8005948:	f7fa fd20 	bl	800038c <__aeabi_fmul>
 800594c:	4603      	mov	r3, r0
 800594e:	e016      	b.n	800597e <EaseInOutQuad+0x5e>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	4619      	mov	r1, r3
 8005954:	4618      	mov	r0, r3
 8005956:	f7fa fc11 	bl	800017c <__addsf3>
 800595a:	4603      	mov	r3, r0
 800595c:	4619      	mov	r1, r3
 800595e:	f04f 4081 	mov.w	r0, #1082130432	@ 0x40800000
 8005962:	f7fa fc09 	bl	8000178 <__aeabi_fsub>
 8005966:	4603      	mov	r3, r0
 8005968:	6879      	ldr	r1, [r7, #4]
 800596a:	4618      	mov	r0, r3
 800596c:	f7fa fd0e 	bl	800038c <__aeabi_fmul>
 8005970:	4603      	mov	r3, r0
 8005972:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8005976:	4618      	mov	r0, r3
 8005978:	f7fa fbfe 	bl	8000178 <__aeabi_fsub>
 800597c:	4603      	mov	r3, r0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3708      	adds	r7, #8
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}

08005986 <EaseInCubic>:

static float EaseInCubic(float t)
{
 8005986:	b580      	push	{r7, lr}
 8005988:	b082      	sub	sp, #8
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
    return t * t * t;
 800598e:	6879      	ldr	r1, [r7, #4]
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f7fa fcfb 	bl	800038c <__aeabi_fmul>
 8005996:	4603      	mov	r3, r0
 8005998:	6879      	ldr	r1, [r7, #4]
 800599a:	4618      	mov	r0, r3
 800599c:	f7fa fcf6 	bl	800038c <__aeabi_fmul>
 80059a0:	4603      	mov	r3, r0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3708      	adds	r7, #8
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}

080059aa <EaseOutCubic>:

static float EaseOutCubic(float t)
{
 80059aa:	b580      	push	{r7, lr}
 80059ac:	b084      	sub	sp, #16
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
    float t1 = t - 1;
 80059b2:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f7fa fbde 	bl	8000178 <__aeabi_fsub>
 80059bc:	4603      	mov	r3, r0
 80059be:	60fb      	str	r3, [r7, #12]
    return t1 * t1 * t1 + 1;
 80059c0:	68f9      	ldr	r1, [r7, #12]
 80059c2:	68f8      	ldr	r0, [r7, #12]
 80059c4:	f7fa fce2 	bl	800038c <__aeabi_fmul>
 80059c8:	4603      	mov	r3, r0
 80059ca:	68f9      	ldr	r1, [r7, #12]
 80059cc:	4618      	mov	r0, r3
 80059ce:	f7fa fcdd 	bl	800038c <__aeabi_fmul>
 80059d2:	4603      	mov	r3, r0
 80059d4:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80059d8:	4618      	mov	r0, r3
 80059da:	f7fa fbcf 	bl	800017c <__addsf3>
 80059de:	4603      	mov	r3, r0
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3710      	adds	r7, #16
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <EaseInOutCubic>:

static float EaseInOutCubic(float t)
{
 80059e8:	b590      	push	{r4, r7, lr}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
    return t < 0.5f ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;
 80059f0:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f7fa fe67 	bl	80006c8 <__aeabi_fcmplt>
 80059fa:	4603      	mov	r3, r0
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d010      	beq.n	8005a22 <EaseInOutCubic+0x3a>
 8005a00:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f7fa fcc1 	bl	800038c <__aeabi_fmul>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	6879      	ldr	r1, [r7, #4]
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f7fa fcbc 	bl	800038c <__aeabi_fmul>
 8005a14:	4603      	mov	r3, r0
 8005a16:	6879      	ldr	r1, [r7, #4]
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f7fa fcb7 	bl	800038c <__aeabi_fmul>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	e02f      	b.n	8005a82 <EaseInOutCubic+0x9a>
 8005a22:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f7fa fba6 	bl	8000178 <__aeabi_fsub>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	461c      	mov	r4, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	4619      	mov	r1, r3
 8005a34:	4618      	mov	r0, r3
 8005a36:	f7fa fba1 	bl	800017c <__addsf3>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8005a40:	4618      	mov	r0, r3
 8005a42:	f7fa fb99 	bl	8000178 <__aeabi_fsub>
 8005a46:	4603      	mov	r3, r0
 8005a48:	4619      	mov	r1, r3
 8005a4a:	4620      	mov	r0, r4
 8005a4c:	f7fa fc9e 	bl	800038c <__aeabi_fmul>
 8005a50:	4603      	mov	r3, r0
 8005a52:	461c      	mov	r4, r3
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4619      	mov	r1, r3
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f7fa fb8f 	bl	800017c <__addsf3>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8005a64:	4618      	mov	r0, r3
 8005a66:	f7fa fb87 	bl	8000178 <__aeabi_fsub>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	4620      	mov	r0, r4
 8005a70:	f7fa fc8c 	bl	800038c <__aeabi_fmul>
 8005a74:	4603      	mov	r3, r0
 8005a76:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f7fa fb7e 	bl	800017c <__addsf3>
 8005a80:	4603      	mov	r3, r0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	370c      	adds	r7, #12
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd90      	pop	{r4, r7, pc}
	...

08005a8c <EaseInExpo>:

// 在现有EaseType_t枚举中添加这些新类型
// 指数缓动
static float EaseInExpo(float t)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b082      	sub	sp, #8
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
    return (t == 0) ? 0 : powf(2, 10 * (t - 1));
 8005a94:	f04f 0100 	mov.w	r1, #0
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f7fa fe0b 	bl	80006b4 <__aeabi_fcmpeq>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d111      	bne.n	8005ac8 <EaseInExpo+0x3c>
 8005aa4:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f7fa fb65 	bl	8000178 <__aeabi_fsub>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	4908      	ldr	r1, [pc, #32]	@ (8005ad4 <EaseInExpo+0x48>)
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f7fa fc6a 	bl	800038c <__aeabi_fmul>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	4619      	mov	r1, r3
 8005abc:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8005ac0:	f005 fc1e 	bl	800b300 <powf>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	e001      	b.n	8005acc <EaseInExpo+0x40>
 8005ac8:	f04f 0300 	mov.w	r3, #0
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3708      	adds	r7, #8
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	41200000 	.word	0x41200000

08005ad8 <EaseOutExpo>:

static float EaseOutExpo(float t)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b082      	sub	sp, #8
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
    return (t == 1) ? 1 : (1 - powf(2, -10 * t));
 8005ae0:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f7fa fde5 	bl	80006b4 <__aeabi_fcmpeq>
 8005aea:	4603      	mov	r3, r0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d111      	bne.n	8005b14 <EaseOutExpo+0x3c>
 8005af0:	490b      	ldr	r1, [pc, #44]	@ (8005b20 <EaseOutExpo+0x48>)
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f7fa fc4a 	bl	800038c <__aeabi_fmul>
 8005af8:	4603      	mov	r3, r0
 8005afa:	4619      	mov	r1, r3
 8005afc:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8005b00:	f005 fbfe 	bl	800b300 <powf>
 8005b04:	4603      	mov	r3, r0
 8005b06:	4619      	mov	r1, r3
 8005b08:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8005b0c:	f7fa fb34 	bl	8000178 <__aeabi_fsub>
 8005b10:	4603      	mov	r3, r0
 8005b12:	e001      	b.n	8005b18 <EaseOutExpo+0x40>
 8005b14:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3708      	adds	r7, #8
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}
 8005b20:	c1200000 	.word	0xc1200000

08005b24 <EaseInOutExpo>:

static float EaseInOutExpo(float t)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b082      	sub	sp, #8
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
    if (t == 0)
 8005b2c:	f04f 0100 	mov.w	r1, #0
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f7fa fdbf 	bl	80006b4 <__aeabi_fcmpeq>
 8005b36:	4603      	mov	r3, r0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d002      	beq.n	8005b42 <EaseInOutExpo+0x1e>
        return 0;
 8005b3c:	f04f 0300 	mov.w	r3, #0
 8005b40:	e045      	b.n	8005bce <EaseInOutExpo+0xaa>
    if (t == 1)
 8005b42:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f7fa fdb4 	bl	80006b4 <__aeabi_fcmpeq>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d002      	beq.n	8005b58 <EaseInOutExpo+0x34>
        return 1;
 8005b52:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8005b56:	e03a      	b.n	8005bce <EaseInOutExpo+0xaa>
    if (t < 0.5f)
 8005b58:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f7fa fdb3 	bl	80006c8 <__aeabi_fcmplt>
 8005b62:	4603      	mov	r3, r0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d016      	beq.n	8005b96 <EaseInOutExpo+0x72>
        return powf(2, 20 * t - 10) / 2;
 8005b68:	491b      	ldr	r1, [pc, #108]	@ (8005bd8 <EaseInOutExpo+0xb4>)
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f7fa fc0e 	bl	800038c <__aeabi_fmul>
 8005b70:	4603      	mov	r3, r0
 8005b72:	491a      	ldr	r1, [pc, #104]	@ (8005bdc <EaseInOutExpo+0xb8>)
 8005b74:	4618      	mov	r0, r3
 8005b76:	f7fa faff 	bl	8000178 <__aeabi_fsub>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	4619      	mov	r1, r3
 8005b7e:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8005b82:	f005 fbbd 	bl	800b300 <powf>
 8005b86:	4603      	mov	r3, r0
 8005b88:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f7fa fcb1 	bl	80004f4 <__aeabi_fdiv>
 8005b92:	4603      	mov	r3, r0
 8005b94:	e01b      	b.n	8005bce <EaseInOutExpo+0xaa>
    return (2 - powf(2, -20 * t + 10)) / 2;
 8005b96:	4912      	ldr	r1, [pc, #72]	@ (8005be0 <EaseInOutExpo+0xbc>)
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f7fa fbf7 	bl	800038c <__aeabi_fmul>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	490e      	ldr	r1, [pc, #56]	@ (8005bdc <EaseInOutExpo+0xb8>)
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f7fa faea 	bl	800017c <__addsf3>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	4619      	mov	r1, r3
 8005bac:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8005bb0:	f005 fba6 	bl	800b300 <powf>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8005bbc:	f7fa fadc 	bl	8000178 <__aeabi_fsub>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f7fa fc94 	bl	80004f4 <__aeabi_fdiv>
 8005bcc:	4603      	mov	r3, r0
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3708      	adds	r7, #8
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	bf00      	nop
 8005bd8:	41a00000 	.word	0x41a00000
 8005bdc:	41200000 	.word	0x41200000
 8005be0:	c1a00000 	.word	0xc1a00000

08005be4 <EaseInCirc>:

// 圆形曲线缓动
static float EaseInCirc(float t)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b082      	sub	sp, #8
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
    return 1 - sqrtf(1 - t * t);
 8005bec:	6879      	ldr	r1, [r7, #4]
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f7fa fbcc 	bl	800038c <__aeabi_fmul>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	4619      	mov	r1, r3
 8005bf8:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8005bfc:	f7fa fabc 	bl	8000178 <__aeabi_fsub>
 8005c00:	4603      	mov	r3, r0
 8005c02:	4618      	mov	r0, r3
 8005c04:	f005 fbc9 	bl	800b39a <sqrtf>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8005c10:	f7fa fab2 	bl	8000178 <__aeabi_fsub>
 8005c14:	4603      	mov	r3, r0
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3708      	adds	r7, #8
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}

08005c1e <EaseOutCirc>:

static float EaseOutCirc(float t)
{
 8005c1e:	b580      	push	{r7, lr}
 8005c20:	b082      	sub	sp, #8
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
    return sqrtf(1 - powf(t - 1, 2));
 8005c26:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f7fa faa4 	bl	8000178 <__aeabi_fsub>
 8005c30:	4603      	mov	r3, r0
 8005c32:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8005c36:	4618      	mov	r0, r3
 8005c38:	f005 fb62 	bl	800b300 <powf>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	4619      	mov	r1, r3
 8005c40:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8005c44:	f7fa fa98 	bl	8000178 <__aeabi_fsub>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f005 fba5 	bl	800b39a <sqrtf>
 8005c50:	4603      	mov	r3, r0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3708      	adds	r7, #8
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}

08005c5a <EaseInOutCirc>:

static float EaseInOutCirc(float t)
{
 8005c5a:	b580      	push	{r7, lr}
 8005c5c:	b082      	sub	sp, #8
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
    if (t < 0.5f)
 8005c62:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f7fa fd2e 	bl	80006c8 <__aeabi_fcmplt>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d022      	beq.n	8005cb8 <EaseInOutCirc+0x5e>
        return (1 - sqrtf(1 - powf(2 * t, 2))) / 2;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4619      	mov	r1, r3
 8005c76:	4618      	mov	r0, r3
 8005c78:	f7fa fa80 	bl	800017c <__addsf3>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8005c82:	4618      	mov	r0, r3
 8005c84:	f005 fb3c 	bl	800b300 <powf>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8005c90:	f7fa fa72 	bl	8000178 <__aeabi_fsub>
 8005c94:	4603      	mov	r3, r0
 8005c96:	4618      	mov	r0, r3
 8005c98:	f005 fb7f 	bl	800b39a <sqrtf>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	4619      	mov	r1, r3
 8005ca0:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8005ca4:	f7fa fa68 	bl	8000178 <__aeabi_fsub>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f7fa fc20 	bl	80004f4 <__aeabi_fdiv>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	e027      	b.n	8005d08 <EaseInOutCirc+0xae>
    return (sqrtf(1 - powf(-2 * t + 2, 2)) + 1) / 2;
 8005cb8:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f7fa fb65 	bl	800038c <__aeabi_fmul>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f7fa fa57 	bl	800017c <__addsf3>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f005 fb13 	bl	800b300 <powf>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	4619      	mov	r1, r3
 8005cde:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8005ce2:	f7fa fa49 	bl	8000178 <__aeabi_fsub>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f005 fb56 	bl	800b39a <sqrtf>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f7fa fa41 	bl	800017c <__addsf3>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8005d00:	4618      	mov	r0, r3
 8005d02:	f7fa fbf7 	bl	80004f4 <__aeabi_fdiv>
 8005d06:	4603      	mov	r3, r0
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3708      	adds	r7, #8
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <EaseInElastic>:

// 弹性缓动
static float EaseInElastic(float t)
{
 8005d10:	b590      	push	{r4, r7, lr}
 8005d12:	b085      	sub	sp, #20
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
    const float c4 = (2 * 3.14159f) / 3;
 8005d18:	4b22      	ldr	r3, [pc, #136]	@ (8005da4 <EaseInElastic+0x94>)
 8005d1a:	60fb      	str	r3, [r7, #12]

    if (t == 0)
 8005d1c:	f04f 0100 	mov.w	r1, #0
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f7fa fcc7 	bl	80006b4 <__aeabi_fcmpeq>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d002      	beq.n	8005d32 <EaseInElastic+0x22>
        return 0;
 8005d2c:	f04f 0300 	mov.w	r3, #0
 8005d30:	e034      	b.n	8005d9c <EaseInElastic+0x8c>
    if (t == 1)
 8005d32:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f7fa fcbc 	bl	80006b4 <__aeabi_fcmpeq>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d002      	beq.n	8005d48 <EaseInElastic+0x38>
        return 1;
 8005d42:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8005d46:	e029      	b.n	8005d9c <EaseInElastic+0x8c>
    return -powf(2, 10 * t - 10) * sinf((t * 10 - 10.75f) * c4);
 8005d48:	4917      	ldr	r1, [pc, #92]	@ (8005da8 <EaseInElastic+0x98>)
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f7fa fb1e 	bl	800038c <__aeabi_fmul>
 8005d50:	4603      	mov	r3, r0
 8005d52:	4915      	ldr	r1, [pc, #84]	@ (8005da8 <EaseInElastic+0x98>)
 8005d54:	4618      	mov	r0, r3
 8005d56:	f7fa fa0f 	bl	8000178 <__aeabi_fsub>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	4619      	mov	r1, r3
 8005d5e:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8005d62:	f005 facd 	bl	800b300 <powf>
 8005d66:	4603      	mov	r3, r0
 8005d68:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 8005d6c:	490e      	ldr	r1, [pc, #56]	@ (8005da8 <EaseInElastic+0x98>)
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f7fa fb0c 	bl	800038c <__aeabi_fmul>
 8005d74:	4603      	mov	r3, r0
 8005d76:	490d      	ldr	r1, [pc, #52]	@ (8005dac <EaseInElastic+0x9c>)
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f7fa f9fd 	bl	8000178 <__aeabi_fsub>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	68f9      	ldr	r1, [r7, #12]
 8005d82:	4618      	mov	r0, r3
 8005d84:	f7fa fb02 	bl	800038c <__aeabi_fmul>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f005 fb58 	bl	800b440 <sinf>
 8005d90:	4603      	mov	r3, r0
 8005d92:	4619      	mov	r1, r3
 8005d94:	4620      	mov	r0, r4
 8005d96:	f7fa faf9 	bl	800038c <__aeabi_fmul>
 8005d9a:	4603      	mov	r3, r0
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3714      	adds	r7, #20
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd90      	pop	{r4, r7, pc}
 8005da4:	40060a8b 	.word	0x40060a8b
 8005da8:	41200000 	.word	0x41200000
 8005dac:	412c0000 	.word	0x412c0000

08005db0 <EaseOutElastic>:

static float EaseOutElastic(float t)
{
 8005db0:	b590      	push	{r4, r7, lr}
 8005db2:	b085      	sub	sp, #20
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
    const float c4 = (2 * 3.14159f) / 3;
 8005db8:	4b22      	ldr	r3, [pc, #136]	@ (8005e44 <EaseOutElastic+0x94>)
 8005dba:	60fb      	str	r3, [r7, #12]

    if (t == 0)
 8005dbc:	f04f 0100 	mov.w	r1, #0
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f7fa fc77 	bl	80006b4 <__aeabi_fcmpeq>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d002      	beq.n	8005dd2 <EaseOutElastic+0x22>
        return 0;
 8005dcc:	f04f 0300 	mov.w	r3, #0
 8005dd0:	e034      	b.n	8005e3c <EaseOutElastic+0x8c>
    if (t == 1)
 8005dd2:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f7fa fc6c 	bl	80006b4 <__aeabi_fcmpeq>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d002      	beq.n	8005de8 <EaseOutElastic+0x38>
        return 1;
 8005de2:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8005de6:	e029      	b.n	8005e3c <EaseOutElastic+0x8c>
    return powf(2, -10 * t) * sinf((t * 10 - 0.75f) * c4) + 1;
 8005de8:	4917      	ldr	r1, [pc, #92]	@ (8005e48 <EaseOutElastic+0x98>)
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f7fa face 	bl	800038c <__aeabi_fmul>
 8005df0:	4603      	mov	r3, r0
 8005df2:	4619      	mov	r1, r3
 8005df4:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8005df8:	f005 fa82 	bl	800b300 <powf>
 8005dfc:	4604      	mov	r4, r0
 8005dfe:	4913      	ldr	r1, [pc, #76]	@ (8005e4c <EaseOutElastic+0x9c>)
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f7fa fac3 	bl	800038c <__aeabi_fmul>
 8005e06:	4603      	mov	r3, r0
 8005e08:	f04f 517d 	mov.w	r1, #1061158912	@ 0x3f400000
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f7fa f9b3 	bl	8000178 <__aeabi_fsub>
 8005e12:	4603      	mov	r3, r0
 8005e14:	68f9      	ldr	r1, [r7, #12]
 8005e16:	4618      	mov	r0, r3
 8005e18:	f7fa fab8 	bl	800038c <__aeabi_fmul>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f005 fb0e 	bl	800b440 <sinf>
 8005e24:	4603      	mov	r3, r0
 8005e26:	4619      	mov	r1, r3
 8005e28:	4620      	mov	r0, r4
 8005e2a:	f7fa faaf 	bl	800038c <__aeabi_fmul>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8005e34:	4618      	mov	r0, r3
 8005e36:	f7fa f9a1 	bl	800017c <__addsf3>
 8005e3a:	4603      	mov	r3, r0
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3714      	adds	r7, #20
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd90      	pop	{r4, r7, pc}
 8005e44:	40060a8b 	.word	0x40060a8b
 8005e48:	c1200000 	.word	0xc1200000
 8005e4c:	41200000 	.word	0x41200000

08005e50 <EaseInOutElastic>:

static float EaseInOutElastic(float t)
{
 8005e50:	b590      	push	{r4, r7, lr}
 8005e52:	b085      	sub	sp, #20
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
    const float c5 = (2 * 3.14159f) / 4.5f;
 8005e58:	4b44      	ldr	r3, [pc, #272]	@ (8005f6c <EaseInOutElastic+0x11c>)
 8005e5a:	60fb      	str	r3, [r7, #12]

    if (t == 0)
 8005e5c:	f04f 0100 	mov.w	r1, #0
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f7fa fc27 	bl	80006b4 <__aeabi_fcmpeq>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d002      	beq.n	8005e72 <EaseInOutElastic+0x22>
        return 0;
 8005e6c:	f04f 0300 	mov.w	r3, #0
 8005e70:	e077      	b.n	8005f62 <EaseInOutElastic+0x112>
    if (t == 1)
 8005e72:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f7fa fc1c 	bl	80006b4 <__aeabi_fcmpeq>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d002      	beq.n	8005e88 <EaseInOutElastic+0x38>
        return 1;
 8005e82:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8005e86:	e06c      	b.n	8005f62 <EaseInOutElastic+0x112>
    if (t < 0.5f)
 8005e88:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f7fa fc1b 	bl	80006c8 <__aeabi_fcmplt>
 8005e92:	4603      	mov	r3, r0
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d030      	beq.n	8005efa <EaseInOutElastic+0xaa>
        return -(powf(2, 20 * t - 10) * sinf((20 * t - 11.125f) * c5)) / 2;
 8005e98:	4935      	ldr	r1, [pc, #212]	@ (8005f70 <EaseInOutElastic+0x120>)
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f7fa fa76 	bl	800038c <__aeabi_fmul>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	4934      	ldr	r1, [pc, #208]	@ (8005f74 <EaseInOutElastic+0x124>)
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f7fa f967 	bl	8000178 <__aeabi_fsub>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	4619      	mov	r1, r3
 8005eae:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8005eb2:	f005 fa25 	bl	800b300 <powf>
 8005eb6:	4604      	mov	r4, r0
 8005eb8:	492d      	ldr	r1, [pc, #180]	@ (8005f70 <EaseInOutElastic+0x120>)
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f7fa fa66 	bl	800038c <__aeabi_fmul>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	492d      	ldr	r1, [pc, #180]	@ (8005f78 <EaseInOutElastic+0x128>)
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f7fa f957 	bl	8000178 <__aeabi_fsub>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	68f9      	ldr	r1, [r7, #12]
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f7fa fa5c 	bl	800038c <__aeabi_fmul>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f005 fab2 	bl	800b440 <sinf>
 8005edc:	4603      	mov	r3, r0
 8005ede:	4619      	mov	r1, r3
 8005ee0:	4620      	mov	r0, r4
 8005ee2:	f7fa fa53 	bl	800038c <__aeabi_fmul>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8005eec:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f7fa faff 	bl	80004f4 <__aeabi_fdiv>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	e033      	b.n	8005f62 <EaseInOutElastic+0x112>
    return (powf(2, -20 * t + 10) * sinf((20 * t - 11.125f) * c5)) / 2 + 1;
 8005efa:	4920      	ldr	r1, [pc, #128]	@ (8005f7c <EaseInOutElastic+0x12c>)
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f7fa fa45 	bl	800038c <__aeabi_fmul>
 8005f02:	4603      	mov	r3, r0
 8005f04:	491b      	ldr	r1, [pc, #108]	@ (8005f74 <EaseInOutElastic+0x124>)
 8005f06:	4618      	mov	r0, r3
 8005f08:	f7fa f938 	bl	800017c <__addsf3>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	4619      	mov	r1, r3
 8005f10:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8005f14:	f005 f9f4 	bl	800b300 <powf>
 8005f18:	4604      	mov	r4, r0
 8005f1a:	4915      	ldr	r1, [pc, #84]	@ (8005f70 <EaseInOutElastic+0x120>)
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f7fa fa35 	bl	800038c <__aeabi_fmul>
 8005f22:	4603      	mov	r3, r0
 8005f24:	4914      	ldr	r1, [pc, #80]	@ (8005f78 <EaseInOutElastic+0x128>)
 8005f26:	4618      	mov	r0, r3
 8005f28:	f7fa f926 	bl	8000178 <__aeabi_fsub>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	68f9      	ldr	r1, [r7, #12]
 8005f30:	4618      	mov	r0, r3
 8005f32:	f7fa fa2b 	bl	800038c <__aeabi_fmul>
 8005f36:	4603      	mov	r3, r0
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f005 fa81 	bl	800b440 <sinf>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	4619      	mov	r1, r3
 8005f42:	4620      	mov	r0, r4
 8005f44:	f7fa fa22 	bl	800038c <__aeabi_fmul>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f7fa fad0 	bl	80004f4 <__aeabi_fdiv>
 8005f54:	4603      	mov	r3, r0
 8005f56:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f7fa f90e 	bl	800017c <__addsf3>
 8005f60:	4603      	mov	r3, r0
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3714      	adds	r7, #20
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd90      	pop	{r4, r7, pc}
 8005f6a:	bf00      	nop
 8005f6c:	3fb2b8b9 	.word	0x3fb2b8b9
 8005f70:	41a00000 	.word	0x41a00000
 8005f74:	41200000 	.word	0x41200000
 8005f78:	41320000 	.word	0x41320000
 8005f7c:	c1a00000 	.word	0xc1a00000

08005f80 <EaseOutBounce>:

static float EaseOutBounce(float t)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
    const float n1 = 7.5625f;
 8005f88:	4b45      	ldr	r3, [pc, #276]	@ (80060a0 <EaseOutBounce+0x120>)
 8005f8a:	60fb      	str	r3, [r7, #12]
    const float d1 = 2.75f;
 8005f8c:	4b45      	ldr	r3, [pc, #276]	@ (80060a4 <EaseOutBounce+0x124>)
 8005f8e:	60bb      	str	r3, [r7, #8]

    if (t < 1 / d1)
 8005f90:	68b9      	ldr	r1, [r7, #8]
 8005f92:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8005f96:	f7fa faad 	bl	80004f4 <__aeabi_fdiv>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	4619      	mov	r1, r3
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f7fa fb92 	bl	80006c8 <__aeabi_fcmplt>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d00a      	beq.n	8005fc0 <EaseOutBounce+0x40>
    {
        return n1 * t * t;
 8005faa:	6879      	ldr	r1, [r7, #4]
 8005fac:	68f8      	ldr	r0, [r7, #12]
 8005fae:	f7fa f9ed 	bl	800038c <__aeabi_fmul>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	6879      	ldr	r1, [r7, #4]
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f7fa f9e8 	bl	800038c <__aeabi_fmul>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	e06a      	b.n	8006096 <EaseOutBounce+0x116>
    }
    else if (t < 2 / d1)
 8005fc0:	68b9      	ldr	r1, [r7, #8]
 8005fc2:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8005fc6:	f7fa fa95 	bl	80004f4 <__aeabi_fdiv>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	4619      	mov	r1, r3
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f7fa fb7a 	bl	80006c8 <__aeabi_fcmplt>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d01c      	beq.n	8006014 <EaseOutBounce+0x94>
    {
        t -= 1.5f / d1;
 8005fda:	68b9      	ldr	r1, [r7, #8]
 8005fdc:	f04f 507f 	mov.w	r0, #1069547520	@ 0x3fc00000
 8005fe0:	f7fa fa88 	bl	80004f4 <__aeabi_fdiv>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	4619      	mov	r1, r3
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f7fa f8c5 	bl	8000178 <__aeabi_fsub>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	607b      	str	r3, [r7, #4]
        return n1 * t * t + 0.75f;
 8005ff2:	6879      	ldr	r1, [r7, #4]
 8005ff4:	68f8      	ldr	r0, [r7, #12]
 8005ff6:	f7fa f9c9 	bl	800038c <__aeabi_fmul>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	6879      	ldr	r1, [r7, #4]
 8005ffe:	4618      	mov	r0, r3
 8006000:	f7fa f9c4 	bl	800038c <__aeabi_fmul>
 8006004:	4603      	mov	r3, r0
 8006006:	f04f 517d 	mov.w	r1, #1061158912	@ 0x3f400000
 800600a:	4618      	mov	r0, r3
 800600c:	f7fa f8b6 	bl	800017c <__addsf3>
 8006010:	4603      	mov	r3, r0
 8006012:	e040      	b.n	8006096 <EaseOutBounce+0x116>
    }
    else if (t < 2.5f / d1)
 8006014:	68b9      	ldr	r1, [r7, #8]
 8006016:	4824      	ldr	r0, [pc, #144]	@ (80060a8 <EaseOutBounce+0x128>)
 8006018:	f7fa fa6c 	bl	80004f4 <__aeabi_fdiv>
 800601c:	4603      	mov	r3, r0
 800601e:	4619      	mov	r1, r3
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f7fa fb51 	bl	80006c8 <__aeabi_fcmplt>
 8006026:	4603      	mov	r3, r0
 8006028:	2b00      	cmp	r3, #0
 800602a:	d01a      	beq.n	8006062 <EaseOutBounce+0xe2>
    {
        t -= 2.25f / d1;
 800602c:	68b9      	ldr	r1, [r7, #8]
 800602e:	481f      	ldr	r0, [pc, #124]	@ (80060ac <EaseOutBounce+0x12c>)
 8006030:	f7fa fa60 	bl	80004f4 <__aeabi_fdiv>
 8006034:	4603      	mov	r3, r0
 8006036:	4619      	mov	r1, r3
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f7fa f89d 	bl	8000178 <__aeabi_fsub>
 800603e:	4603      	mov	r3, r0
 8006040:	607b      	str	r3, [r7, #4]
        return n1 * t * t + 0.9375f;
 8006042:	6879      	ldr	r1, [r7, #4]
 8006044:	68f8      	ldr	r0, [r7, #12]
 8006046:	f7fa f9a1 	bl	800038c <__aeabi_fmul>
 800604a:	4603      	mov	r3, r0
 800604c:	6879      	ldr	r1, [r7, #4]
 800604e:	4618      	mov	r0, r3
 8006050:	f7fa f99c 	bl	800038c <__aeabi_fmul>
 8006054:	4603      	mov	r3, r0
 8006056:	4916      	ldr	r1, [pc, #88]	@ (80060b0 <EaseOutBounce+0x130>)
 8006058:	4618      	mov	r0, r3
 800605a:	f7fa f88f 	bl	800017c <__addsf3>
 800605e:	4603      	mov	r3, r0
 8006060:	e019      	b.n	8006096 <EaseOutBounce+0x116>
    }
    else
    {
        t -= 2.625f / d1;
 8006062:	68b9      	ldr	r1, [r7, #8]
 8006064:	4813      	ldr	r0, [pc, #76]	@ (80060b4 <EaseOutBounce+0x134>)
 8006066:	f7fa fa45 	bl	80004f4 <__aeabi_fdiv>
 800606a:	4603      	mov	r3, r0
 800606c:	4619      	mov	r1, r3
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f7fa f882 	bl	8000178 <__aeabi_fsub>
 8006074:	4603      	mov	r3, r0
 8006076:	607b      	str	r3, [r7, #4]
        return n1 * t * t + 0.984375f;
 8006078:	6879      	ldr	r1, [r7, #4]
 800607a:	68f8      	ldr	r0, [r7, #12]
 800607c:	f7fa f986 	bl	800038c <__aeabi_fmul>
 8006080:	4603      	mov	r3, r0
 8006082:	6879      	ldr	r1, [r7, #4]
 8006084:	4618      	mov	r0, r3
 8006086:	f7fa f981 	bl	800038c <__aeabi_fmul>
 800608a:	4603      	mov	r3, r0
 800608c:	490a      	ldr	r1, [pc, #40]	@ (80060b8 <EaseOutBounce+0x138>)
 800608e:	4618      	mov	r0, r3
 8006090:	f7fa f874 	bl	800017c <__addsf3>
 8006094:	4603      	mov	r3, r0
    }
}
 8006096:	4618      	mov	r0, r3
 8006098:	3710      	adds	r7, #16
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
 800609e:	bf00      	nop
 80060a0:	40f20000 	.word	0x40f20000
 80060a4:	40300000 	.word	0x40300000
 80060a8:	40200000 	.word	0x40200000
 80060ac:	40100000 	.word	0x40100000
 80060b0:	3f700000 	.word	0x3f700000
 80060b4:	40280000 	.word	0x40280000
 80060b8:	3f7c0000 	.word	0x3f7c0000

080060bc <EaseInBounce>:

// 反弹缓动
static float EaseInBounce(float t)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b082      	sub	sp, #8
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
    return 1 - EaseOutBounce(1 - t);
 80060c4:	6879      	ldr	r1, [r7, #4]
 80060c6:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80060ca:	f7fa f855 	bl	8000178 <__aeabi_fsub>
 80060ce:	4603      	mov	r3, r0
 80060d0:	4618      	mov	r0, r3
 80060d2:	f7ff ff55 	bl	8005f80 <EaseOutBounce>
 80060d6:	4603      	mov	r3, r0
 80060d8:	4619      	mov	r1, r3
 80060da:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80060de:	f7fa f84b 	bl	8000178 <__aeabi_fsub>
 80060e2:	4603      	mov	r3, r0
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3708      	adds	r7, #8
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}

080060ec <EaseInOutBounce>:

static float EaseInOutBounce(float t)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b082      	sub	sp, #8
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
    if (t < 0.5f)
 80060f4:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f7fa fae5 	bl	80006c8 <__aeabi_fcmplt>
 80060fe:	4603      	mov	r3, r0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d010      	beq.n	8006126 <EaseInOutBounce+0x3a>
        return EaseInBounce(t * 2) * 0.5f;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4619      	mov	r1, r3
 8006108:	4618      	mov	r0, r3
 800610a:	f7fa f837 	bl	800017c <__addsf3>
 800610e:	4603      	mov	r3, r0
 8006110:	4618      	mov	r0, r3
 8006112:	f7ff ffd3 	bl	80060bc <EaseInBounce>
 8006116:	4603      	mov	r3, r0
 8006118:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800611c:	4618      	mov	r0, r3
 800611e:	f7fa f935 	bl	800038c <__aeabi_fmul>
 8006122:	4603      	mov	r3, r0
 8006124:	e01b      	b.n	800615e <EaseInOutBounce+0x72>
    return EaseOutBounce(t * 2 - 1) * 0.5f + 0.5f;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	4619      	mov	r1, r3
 800612a:	4618      	mov	r0, r3
 800612c:	f7fa f826 	bl	800017c <__addsf3>
 8006130:	4603      	mov	r3, r0
 8006132:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8006136:	4618      	mov	r0, r3
 8006138:	f7fa f81e 	bl	8000178 <__aeabi_fsub>
 800613c:	4603      	mov	r3, r0
 800613e:	4618      	mov	r0, r3
 8006140:	f7ff ff1e 	bl	8005f80 <EaseOutBounce>
 8006144:	4603      	mov	r3, r0
 8006146:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800614a:	4618      	mov	r0, r3
 800614c:	f7fa f91e 	bl	800038c <__aeabi_fmul>
 8006150:	4603      	mov	r3, r0
 8006152:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8006156:	4618      	mov	r0, r3
 8006158:	f7fa f810 	bl	800017c <__addsf3>
 800615c:	4603      	mov	r3, r0
}
 800615e:	4618      	mov	r0, r3
 8006160:	3708      	adds	r7, #8
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
	...

08006168 <EaseInBack>:

// 背越式缓动
static float EaseInBack(float t)
{
 8006168:	b590      	push	{r4, r7, lr}
 800616a:	b085      	sub	sp, #20
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
    const float c1 = 1.70158f;
 8006170:	4b15      	ldr	r3, [pc, #84]	@ (80061c8 <EaseInBack+0x60>)
 8006172:	60fb      	str	r3, [r7, #12]
    const float c3 = c1 + 1;
 8006174:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8006178:	68f8      	ldr	r0, [r7, #12]
 800617a:	f7f9 ffff 	bl	800017c <__addsf3>
 800617e:	4603      	mov	r3, r0
 8006180:	60bb      	str	r3, [r7, #8]

    return c3 * t * t * t - c1 * t * t;
 8006182:	6879      	ldr	r1, [r7, #4]
 8006184:	68b8      	ldr	r0, [r7, #8]
 8006186:	f7fa f901 	bl	800038c <__aeabi_fmul>
 800618a:	4603      	mov	r3, r0
 800618c:	6879      	ldr	r1, [r7, #4]
 800618e:	4618      	mov	r0, r3
 8006190:	f7fa f8fc 	bl	800038c <__aeabi_fmul>
 8006194:	4603      	mov	r3, r0
 8006196:	6879      	ldr	r1, [r7, #4]
 8006198:	4618      	mov	r0, r3
 800619a:	f7fa f8f7 	bl	800038c <__aeabi_fmul>
 800619e:	4603      	mov	r3, r0
 80061a0:	461c      	mov	r4, r3
 80061a2:	6879      	ldr	r1, [r7, #4]
 80061a4:	68f8      	ldr	r0, [r7, #12]
 80061a6:	f7fa f8f1 	bl	800038c <__aeabi_fmul>
 80061aa:	4603      	mov	r3, r0
 80061ac:	6879      	ldr	r1, [r7, #4]
 80061ae:	4618      	mov	r0, r3
 80061b0:	f7fa f8ec 	bl	800038c <__aeabi_fmul>
 80061b4:	4603      	mov	r3, r0
 80061b6:	4619      	mov	r1, r3
 80061b8:	4620      	mov	r0, r4
 80061ba:	f7f9 ffdd 	bl	8000178 <__aeabi_fsub>
 80061be:	4603      	mov	r3, r0
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3714      	adds	r7, #20
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd90      	pop	{r4, r7, pc}
 80061c8:	3fd9cd60 	.word	0x3fd9cd60

080061cc <EaseOutBack>:

static float EaseOutBack(float t)
{
 80061cc:	b590      	push	{r4, r7, lr}
 80061ce:	b085      	sub	sp, #20
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
    const float c1 = 1.70158f;
 80061d4:	4b1c      	ldr	r3, [pc, #112]	@ (8006248 <EaseOutBack+0x7c>)
 80061d6:	60fb      	str	r3, [r7, #12]
    const float c3 = c1 + 1;
 80061d8:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80061dc:	68f8      	ldr	r0, [r7, #12]
 80061de:	f7f9 ffcd 	bl	800017c <__addsf3>
 80061e2:	4603      	mov	r3, r0
 80061e4:	60bb      	str	r3, [r7, #8]

    return 1 + c3 * powf(t - 1, 3) + c1 * powf(t - 1, 2);
 80061e6:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f7f9 ffc4 	bl	8000178 <__aeabi_fsub>
 80061f0:	4603      	mov	r3, r0
 80061f2:	4916      	ldr	r1, [pc, #88]	@ (800624c <EaseOutBack+0x80>)
 80061f4:	4618      	mov	r0, r3
 80061f6:	f005 f883 	bl	800b300 <powf>
 80061fa:	4603      	mov	r3, r0
 80061fc:	68b9      	ldr	r1, [r7, #8]
 80061fe:	4618      	mov	r0, r3
 8006200:	f7fa f8c4 	bl	800038c <__aeabi_fmul>
 8006204:	4603      	mov	r3, r0
 8006206:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800620a:	4618      	mov	r0, r3
 800620c:	f7f9 ffb6 	bl	800017c <__addsf3>
 8006210:	4603      	mov	r3, r0
 8006212:	461c      	mov	r4, r3
 8006214:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f7f9 ffad 	bl	8000178 <__aeabi_fsub>
 800621e:	4603      	mov	r3, r0
 8006220:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8006224:	4618      	mov	r0, r3
 8006226:	f005 f86b 	bl	800b300 <powf>
 800622a:	4603      	mov	r3, r0
 800622c:	68f9      	ldr	r1, [r7, #12]
 800622e:	4618      	mov	r0, r3
 8006230:	f7fa f8ac 	bl	800038c <__aeabi_fmul>
 8006234:	4603      	mov	r3, r0
 8006236:	4619      	mov	r1, r3
 8006238:	4620      	mov	r0, r4
 800623a:	f7f9 ff9f 	bl	800017c <__addsf3>
 800623e:	4603      	mov	r3, r0
}
 8006240:	4618      	mov	r0, r3
 8006242:	3714      	adds	r7, #20
 8006244:	46bd      	mov	sp, r7
 8006246:	bd90      	pop	{r4, r7, pc}
 8006248:	3fd9cd60 	.word	0x3fd9cd60
 800624c:	40400000 	.word	0x40400000

08006250 <EaseInOutBack>:

static float EaseInOutBack(float t)
{
 8006250:	b5b0      	push	{r4, r5, r7, lr}
 8006252:	b084      	sub	sp, #16
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
    const float c1 = 1.70158f;
 8006258:	4b40      	ldr	r3, [pc, #256]	@ (800635c <EaseInOutBack+0x10c>)
 800625a:	60fb      	str	r3, [r7, #12]
    const float c2 = c1 * 1.525f;
 800625c:	4940      	ldr	r1, [pc, #256]	@ (8006360 <EaseInOutBack+0x110>)
 800625e:	68f8      	ldr	r0, [r7, #12]
 8006260:	f7fa f894 	bl	800038c <__aeabi_fmul>
 8006264:	4603      	mov	r3, r0
 8006266:	60bb      	str	r3, [r7, #8]

    if (t < 0.5f)
 8006268:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f7fa fa2b 	bl	80006c8 <__aeabi_fcmplt>
 8006272:	4603      	mov	r3, r0
 8006274:	2b00      	cmp	r3, #0
 8006276:	d02c      	beq.n	80062d2 <EaseInOutBack+0x82>
        return (powf(2 * t, 2) * ((c2 + 1) * 2 * t - c2)) / 2;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	4619      	mov	r1, r3
 800627c:	4618      	mov	r0, r3
 800627e:	f7f9 ff7d 	bl	800017c <__addsf3>
 8006282:	4603      	mov	r3, r0
 8006284:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8006288:	4618      	mov	r0, r3
 800628a:	f005 f839 	bl	800b300 <powf>
 800628e:	4604      	mov	r4, r0
 8006290:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8006294:	68b8      	ldr	r0, [r7, #8]
 8006296:	f7f9 ff71 	bl	800017c <__addsf3>
 800629a:	4603      	mov	r3, r0
 800629c:	4619      	mov	r1, r3
 800629e:	4618      	mov	r0, r3
 80062a0:	f7f9 ff6c 	bl	800017c <__addsf3>
 80062a4:	4603      	mov	r3, r0
 80062a6:	6879      	ldr	r1, [r7, #4]
 80062a8:	4618      	mov	r0, r3
 80062aa:	f7fa f86f 	bl	800038c <__aeabi_fmul>
 80062ae:	4603      	mov	r3, r0
 80062b0:	68b9      	ldr	r1, [r7, #8]
 80062b2:	4618      	mov	r0, r3
 80062b4:	f7f9 ff60 	bl	8000178 <__aeabi_fsub>
 80062b8:	4603      	mov	r3, r0
 80062ba:	4619      	mov	r1, r3
 80062bc:	4620      	mov	r0, r4
 80062be:	f7fa f865 	bl	800038c <__aeabi_fmul>
 80062c2:	4603      	mov	r3, r0
 80062c4:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80062c8:	4618      	mov	r0, r3
 80062ca:	f7fa f913 	bl	80004f4 <__aeabi_fdiv>
 80062ce:	4603      	mov	r3, r0
 80062d0:	e03f      	b.n	8006352 <EaseInOutBack+0x102>
    return (powf(2 * t - 2, 2) * ((c2 + 1) * (t * 2 - 2) + c2) + 2) / 2;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	4619      	mov	r1, r3
 80062d6:	4618      	mov	r0, r3
 80062d8:	f7f9 ff50 	bl	800017c <__addsf3>
 80062dc:	4603      	mov	r3, r0
 80062de:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80062e2:	4618      	mov	r0, r3
 80062e4:	f7f9 ff48 	bl	8000178 <__aeabi_fsub>
 80062e8:	4603      	mov	r3, r0
 80062ea:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80062ee:	4618      	mov	r0, r3
 80062f0:	f005 f806 	bl	800b300 <powf>
 80062f4:	4604      	mov	r4, r0
 80062f6:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80062fa:	68b8      	ldr	r0, [r7, #8]
 80062fc:	f7f9 ff3e 	bl	800017c <__addsf3>
 8006300:	4603      	mov	r3, r0
 8006302:	461d      	mov	r5, r3
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4619      	mov	r1, r3
 8006308:	4618      	mov	r0, r3
 800630a:	f7f9 ff37 	bl	800017c <__addsf3>
 800630e:	4603      	mov	r3, r0
 8006310:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8006314:	4618      	mov	r0, r3
 8006316:	f7f9 ff2f 	bl	8000178 <__aeabi_fsub>
 800631a:	4603      	mov	r3, r0
 800631c:	4619      	mov	r1, r3
 800631e:	4628      	mov	r0, r5
 8006320:	f7fa f834 	bl	800038c <__aeabi_fmul>
 8006324:	4603      	mov	r3, r0
 8006326:	68b9      	ldr	r1, [r7, #8]
 8006328:	4618      	mov	r0, r3
 800632a:	f7f9 ff27 	bl	800017c <__addsf3>
 800632e:	4603      	mov	r3, r0
 8006330:	4619      	mov	r1, r3
 8006332:	4620      	mov	r0, r4
 8006334:	f7fa f82a 	bl	800038c <__aeabi_fmul>
 8006338:	4603      	mov	r3, r0
 800633a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800633e:	4618      	mov	r0, r3
 8006340:	f7f9 ff1c 	bl	800017c <__addsf3>
 8006344:	4603      	mov	r3, r0
 8006346:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800634a:	4618      	mov	r0, r3
 800634c:	f7fa f8d2 	bl	80004f4 <__aeabi_fdiv>
 8006350:	4603      	mov	r3, r0
}
 8006352:	4618      	mov	r0, r3
 8006354:	3710      	adds	r7, #16
 8006356:	46bd      	mov	sp, r7
 8006358:	bdb0      	pop	{r4, r5, r7, pc}
 800635a:	bf00      	nop
 800635c:	3fd9cd60 	.word	0x3fd9cd60
 8006360:	3fc33333 	.word	0x3fc33333

08006364 <EaseInSine>:

// 正弦缓动
static float EaseInSine(float t)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b082      	sub	sp, #8
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
    return 1 - cosf((t * 3.14159f) / 2);
 800636c:	490c      	ldr	r1, [pc, #48]	@ (80063a0 <EaseInSine+0x3c>)
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f7fa f80c 	bl	800038c <__aeabi_fmul>
 8006374:	4603      	mov	r3, r0
 8006376:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800637a:	4618      	mov	r0, r3
 800637c:	f7fa f8ba 	bl	80004f4 <__aeabi_fdiv>
 8006380:	4603      	mov	r3, r0
 8006382:	4618      	mov	r0, r3
 8006384:	f005 f824 	bl	800b3d0 <cosf>
 8006388:	4603      	mov	r3, r0
 800638a:	4619      	mov	r1, r3
 800638c:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8006390:	f7f9 fef2 	bl	8000178 <__aeabi_fsub>
 8006394:	4603      	mov	r3, r0
}
 8006396:	4618      	mov	r0, r3
 8006398:	3708      	adds	r7, #8
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
 800639e:	bf00      	nop
 80063a0:	40490fd0 	.word	0x40490fd0

080063a4 <EaseOutSine>:

static float EaseOutSine(float t)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b082      	sub	sp, #8
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
    return sinf((t * 3.14159f) / 2);
 80063ac:	4909      	ldr	r1, [pc, #36]	@ (80063d4 <EaseOutSine+0x30>)
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f7f9 ffec 	bl	800038c <__aeabi_fmul>
 80063b4:	4603      	mov	r3, r0
 80063b6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80063ba:	4618      	mov	r0, r3
 80063bc:	f7fa f89a 	bl	80004f4 <__aeabi_fdiv>
 80063c0:	4603      	mov	r3, r0
 80063c2:	4618      	mov	r0, r3
 80063c4:	f005 f83c 	bl	800b440 <sinf>
 80063c8:	4603      	mov	r3, r0
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3708      	adds	r7, #8
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}
 80063d2:	bf00      	nop
 80063d4:	40490fd0 	.word	0x40490fd0

080063d8 <EaseInOutSine>:

static float EaseInOutSine(float t)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b082      	sub	sp, #8
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
    return -(cosf(3.14159f * t) - 1) / 2;
 80063e0:	490d      	ldr	r1, [pc, #52]	@ (8006418 <EaseInOutSine+0x40>)
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f7f9 ffd2 	bl	800038c <__aeabi_fmul>
 80063e8:	4603      	mov	r3, r0
 80063ea:	4618      	mov	r0, r3
 80063ec:	f004 fff0 	bl	800b3d0 <cosf>
 80063f0:	4603      	mov	r3, r0
 80063f2:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80063f6:	4618      	mov	r0, r3
 80063f8:	f7f9 febe 	bl	8000178 <__aeabi_fsub>
 80063fc:	4603      	mov	r3, r0
 80063fe:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8006402:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8006406:	4618      	mov	r0, r3
 8006408:	f7fa f874 	bl	80004f4 <__aeabi_fdiv>
 800640c:	4603      	mov	r3, r0
}
 800640e:	4618      	mov	r0, r3
 8006410:	3708      	adds	r7, #8
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop
 8006418:	40490fd0 	.word	0x40490fd0

0800641c <GetEaseValue>:

static float GetEaseValue(float progress, EaseType_t easeType)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b082      	sub	sp, #8
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	460b      	mov	r3, r1
 8006426:	70fb      	strb	r3, [r7, #3]
    switch (easeType)
 8006428:	78fb      	ldrb	r3, [r7, #3]
 800642a:	2b18      	cmp	r3, #24
 800642c:	f200 80b3 	bhi.w	8006596 <GetEaseValue+0x17a>
 8006430:	a201      	add	r2, pc, #4	@ (adr r2, 8006438 <GetEaseValue+0x1c>)
 8006432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006436:	bf00      	nop
 8006438:	0800649d 	.word	0x0800649d
 800643c:	080064a7 	.word	0x080064a7
 8006440:	080064b1 	.word	0x080064b1
 8006444:	080064bb 	.word	0x080064bb
 8006448:	080064c5 	.word	0x080064c5
 800644c:	080064cf 	.word	0x080064cf
 8006450:	080064d9 	.word	0x080064d9
 8006454:	080064e3 	.word	0x080064e3
 8006458:	080064ed 	.word	0x080064ed
 800645c:	080064f7 	.word	0x080064f7
 8006460:	08006501 	.word	0x08006501
 8006464:	0800650b 	.word	0x0800650b
 8006468:	08006515 	.word	0x08006515
 800646c:	0800651f 	.word	0x0800651f
 8006470:	08006529 	.word	0x08006529
 8006474:	08006533 	.word	0x08006533
 8006478:	0800653d 	.word	0x0800653d
 800647c:	08006547 	.word	0x08006547
 8006480:	08006551 	.word	0x08006551
 8006484:	0800655b 	.word	0x0800655b
 8006488:	08006565 	.word	0x08006565
 800648c:	0800656f 	.word	0x0800656f
 8006490:	08006579 	.word	0x08006579
 8006494:	08006583 	.word	0x08006583
 8006498:	0800658d 	.word	0x0800658d
    {
    case EASE_LINEAR:
        return EaseLinear(progress);
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f7ff fa15 	bl	80058cc <EaseLinear>
 80064a2:	4603      	mov	r3, r0
 80064a4:	e078      	b.n	8006598 <GetEaseValue+0x17c>
    case EASE_IN_QUAD:
        return EaseInQuad(progress);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f7ff fa1a 	bl	80058e0 <EaseInQuad>
 80064ac:	4603      	mov	r3, r0
 80064ae:	e073      	b.n	8006598 <GetEaseValue+0x17c>
    case EASE_OUT_QUAD:
        return EaseOutQuad(progress);
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f7ff fa22 	bl	80058fa <EaseOutQuad>
 80064b6:	4603      	mov	r3, r0
 80064b8:	e06e      	b.n	8006598 <GetEaseValue+0x17c>
    case EASE_INOUT_QUAD:
        return EaseInOutQuad(progress);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f7ff fa30 	bl	8005920 <EaseInOutQuad>
 80064c0:	4603      	mov	r3, r0
 80064c2:	e069      	b.n	8006598 <GetEaseValue+0x17c>
    case EASE_IN_CUBIC:
        return EaseInCubic(progress);
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f7ff fa5e 	bl	8005986 <EaseInCubic>
 80064ca:	4603      	mov	r3, r0
 80064cc:	e064      	b.n	8006598 <GetEaseValue+0x17c>
    case EASE_OUT_CUBIC:
        return EaseOutCubic(progress);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f7ff fa6b 	bl	80059aa <EaseOutCubic>
 80064d4:	4603      	mov	r3, r0
 80064d6:	e05f      	b.n	8006598 <GetEaseValue+0x17c>
    case EASE_INOUT_CUBIC:
        return EaseInOutCubic(progress);
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f7ff fa85 	bl	80059e8 <EaseInOutCubic>
 80064de:	4603      	mov	r3, r0
 80064e0:	e05a      	b.n	8006598 <GetEaseValue+0x17c>
    case EASE_IN_EXPO:
        return EaseInExpo(progress);
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f7ff fad2 	bl	8005a8c <EaseInExpo>
 80064e8:	4603      	mov	r3, r0
 80064ea:	e055      	b.n	8006598 <GetEaseValue+0x17c>
    case EASE_OUT_EXPO:
        return EaseOutExpo(progress);
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f7ff faf3 	bl	8005ad8 <EaseOutExpo>
 80064f2:	4603      	mov	r3, r0
 80064f4:	e050      	b.n	8006598 <GetEaseValue+0x17c>
    case EASE_INOUT_EXPO:
        return EaseInOutExpo(progress);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f7ff fb14 	bl	8005b24 <EaseInOutExpo>
 80064fc:	4603      	mov	r3, r0
 80064fe:	e04b      	b.n	8006598 <GetEaseValue+0x17c>
    case EASE_IN_CIRC:
        return EaseInCirc(progress);
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f7ff fb6f 	bl	8005be4 <EaseInCirc>
 8006506:	4603      	mov	r3, r0
 8006508:	e046      	b.n	8006598 <GetEaseValue+0x17c>
    case EASE_OUT_CIRC:
        return EaseOutCirc(progress);
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f7ff fb87 	bl	8005c1e <EaseOutCirc>
 8006510:	4603      	mov	r3, r0
 8006512:	e041      	b.n	8006598 <GetEaseValue+0x17c>
    case EASE_INOUT_CIRC:
        return EaseInOutCirc(progress);
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f7ff fba0 	bl	8005c5a <EaseInOutCirc>
 800651a:	4603      	mov	r3, r0
 800651c:	e03c      	b.n	8006598 <GetEaseValue+0x17c>
    case EASE_IN_ELASTIC:
        return EaseInElastic(progress);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f7ff fbf6 	bl	8005d10 <EaseInElastic>
 8006524:	4603      	mov	r3, r0
 8006526:	e037      	b.n	8006598 <GetEaseValue+0x17c>
    case EASE_OUT_ELASTIC:
        return EaseOutElastic(progress);
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f7ff fc41 	bl	8005db0 <EaseOutElastic>
 800652e:	4603      	mov	r3, r0
 8006530:	e032      	b.n	8006598 <GetEaseValue+0x17c>
    case EASE_INOUT_ELASTIC:
        return EaseInOutElastic(progress);
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f7ff fc8c 	bl	8005e50 <EaseInOutElastic>
 8006538:	4603      	mov	r3, r0
 800653a:	e02d      	b.n	8006598 <GetEaseValue+0x17c>
    case EASE_IN_BOUNCE:
        return EaseInBounce(progress);
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f7ff fdbd 	bl	80060bc <EaseInBounce>
 8006542:	4603      	mov	r3, r0
 8006544:	e028      	b.n	8006598 <GetEaseValue+0x17c>
    case EASE_OUT_BOUNCE:
        return EaseOutBounce(progress);
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f7ff fd1a 	bl	8005f80 <EaseOutBounce>
 800654c:	4603      	mov	r3, r0
 800654e:	e023      	b.n	8006598 <GetEaseValue+0x17c>
    case EASE_INOUT_BOUNCE:
        return EaseInOutBounce(progress);
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f7ff fdcb 	bl	80060ec <EaseInOutBounce>
 8006556:	4603      	mov	r3, r0
 8006558:	e01e      	b.n	8006598 <GetEaseValue+0x17c>
    case EASE_IN_BACK:
        return EaseInBack(progress);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f7ff fe04 	bl	8006168 <EaseInBack>
 8006560:	4603      	mov	r3, r0
 8006562:	e019      	b.n	8006598 <GetEaseValue+0x17c>
    case EASE_OUT_BACK:
        return EaseOutBack(progress);
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f7ff fe31 	bl	80061cc <EaseOutBack>
 800656a:	4603      	mov	r3, r0
 800656c:	e014      	b.n	8006598 <GetEaseValue+0x17c>
    case EASE_INOUT_BACK:
        return EaseInOutBack(progress);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f7ff fe6e 	bl	8006250 <EaseInOutBack>
 8006574:	4603      	mov	r3, r0
 8006576:	e00f      	b.n	8006598 <GetEaseValue+0x17c>
    case EASE_IN_SINE:
        return EaseInSine(progress);
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f7ff fef3 	bl	8006364 <EaseInSine>
 800657e:	4603      	mov	r3, r0
 8006580:	e00a      	b.n	8006598 <GetEaseValue+0x17c>
    case EASE_OUT_SINE:
        return EaseOutSine(progress);
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f7ff ff0e 	bl	80063a4 <EaseOutSine>
 8006588:	4603      	mov	r3, r0
 800658a:	e005      	b.n	8006598 <GetEaseValue+0x17c>
    case EASE_INOUT_SINE:
        return EaseInOutSine(progress);
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f7ff ff23 	bl	80063d8 <EaseInOutSine>
 8006592:	4603      	mov	r3, r0
 8006594:	e000      	b.n	8006598 <GetEaseValue+0x17c>
    default:
        return progress;
 8006596:	687b      	ldr	r3, [r7, #4]
    }
}
 8006598:	4618      	mov	r0, r3
 800659a:	3708      	adds	r7, #8
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <OLED_InitAnimation>:

#pragma region ANIMATIONTWEENS
// 这里是底层动画实现
void OLED_InitAnimation(Animation_t *anim, float startValue, float endValue,
                        uint32_t duration, EaseType_t easeType)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	60f8      	str	r0, [r7, #12]
 80065a8:	60b9      	str	r1, [r7, #8]
 80065aa:	607a      	str	r2, [r7, #4]
 80065ac:	603b      	str	r3, [r7, #0]
    anim->startTime = HAL_GetTick();
 80065ae:	f001 f839 	bl	8007624 <HAL_GetTick>
 80065b2:	4602      	mov	r2, r0
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	601a      	str	r2, [r3, #0]
    anim->duration = duration;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	683a      	ldr	r2, [r7, #0]
 80065bc:	605a      	str	r2, [r3, #4]
    anim->startValue = startValue;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	68ba      	ldr	r2, [r7, #8]
 80065c2:	609a      	str	r2, [r3, #8]
    anim->endValue = endValue;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	687a      	ldr	r2, [r7, #4]
 80065c8:	60da      	str	r2, [r3, #12]
    anim->currentValue = startValue;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	68ba      	ldr	r2, [r7, #8]
 80065ce:	611a      	str	r2, [r3, #16]
    anim->isActive = 1;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2201      	movs	r2, #1
 80065d4:	751a      	strb	r2, [r3, #20]
    anim->easeType = easeType;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	7e3a      	ldrb	r2, [r7, #24]
 80065da:	755a      	strb	r2, [r3, #21]
}
 80065dc:	bf00      	nop
 80065de:	3710      	adds	r7, #16
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <OLED_UpdateAnimation>:

// 更新动画状态，返回isActive的值
uint8_t OLED_UpdateAnimation(Animation_t *anim, uint32_t currentTime)
{
 80065e4:	b590      	push	{r4, r7, lr}
 80065e6:	b087      	sub	sp, #28
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]
    if (!anim->isActive)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	7d1b      	ldrb	r3, [r3, #20]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d101      	bne.n	80065fa <OLED_UpdateAnimation+0x16>
        return 0;
 80065f6:	2300      	movs	r3, #0
 80065f8:	e04d      	b.n	8006696 <OLED_UpdateAnimation+0xb2>

    uint32_t elapsedTime = currentTime - anim->startTime;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	683a      	ldr	r2, [r7, #0]
 8006600:	1ad3      	subs	r3, r2, r3
 8006602:	617b      	str	r3, [r7, #20]
    // 动画完成
    if (elapsedTime >= anim->duration || anim->currentValue == anim->endValue) // 如果我的目标在指定的点上，也关闭isActive
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	697a      	ldr	r2, [r7, #20]
 800660a:	429a      	cmp	r2, r3
 800660c:	d20a      	bcs.n	8006624 <OLED_UpdateAnimation+0x40>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	691a      	ldr	r2, [r3, #16]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	68db      	ldr	r3, [r3, #12]
 8006616:	4619      	mov	r1, r3
 8006618:	4610      	mov	r0, r2
 800661a:	f7fa f84b 	bl	80006b4 <__aeabi_fcmpeq>
 800661e:	4603      	mov	r3, r0
 8006620:	2b00      	cmp	r3, #0
 8006622:	d008      	beq.n	8006636 <OLED_UpdateAnimation+0x52>
    {
        anim->currentValue = anim->endValue;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	68da      	ldr	r2, [r3, #12]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	611a      	str	r2, [r3, #16]
        anim->isActive = 0;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2200      	movs	r2, #0
 8006630:	751a      	strb	r2, [r3, #20]
        return 0;
 8006632:	2300      	movs	r3, #0
 8006634:	e02f      	b.n	8006696 <OLED_UpdateAnimation+0xb2>
    }

    // 计算当前进度 (0.0 - 1.0)
    float progress = (float)elapsedTime / anim->duration;
 8006636:	6978      	ldr	r0, [r7, #20]
 8006638:	f7f9 fe50 	bl	80002dc <__aeabi_ui2f>
 800663c:	4604      	mov	r4, r0
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	4618      	mov	r0, r3
 8006644:	f7f9 fe4a 	bl	80002dc <__aeabi_ui2f>
 8006648:	4603      	mov	r3, r0
 800664a:	4619      	mov	r1, r3
 800664c:	4620      	mov	r0, r4
 800664e:	f7f9 ff51 	bl	80004f4 <__aeabi_fdiv>
 8006652:	4603      	mov	r3, r0
 8006654:	613b      	str	r3, [r7, #16]

    // 应用缓动函数
    float easedProgress = GetEaseValue(progress, anim->easeType);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	7d5b      	ldrb	r3, [r3, #21]
 800665a:	4619      	mov	r1, r3
 800665c:	6938      	ldr	r0, [r7, #16]
 800665e:	f7ff fedd 	bl	800641c <GetEaseValue>
 8006662:	60f8      	str	r0, [r7, #12]

    // 计算当前值
    anim->currentValue = anim->startValue + (anim->endValue - anim->startValue) * easedProgress;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	689c      	ldr	r4, [r3, #8]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	68da      	ldr	r2, [r3, #12]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	4619      	mov	r1, r3
 8006672:	4610      	mov	r0, r2
 8006674:	f7f9 fd80 	bl	8000178 <__aeabi_fsub>
 8006678:	4603      	mov	r3, r0
 800667a:	68f9      	ldr	r1, [r7, #12]
 800667c:	4618      	mov	r0, r3
 800667e:	f7f9 fe85 	bl	800038c <__aeabi_fmul>
 8006682:	4603      	mov	r3, r0
 8006684:	4619      	mov	r1, r3
 8006686:	4620      	mov	r0, r4
 8006688:	f7f9 fd78 	bl	800017c <__addsf3>
 800668c:	4603      	mov	r3, r0
 800668e:	461a      	mov	r2, r3
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	611a      	str	r2, [r3, #16]

    return 1;
 8006694:	2301      	movs	r3, #1
}
 8006696:	4618      	mov	r0, r3
 8006698:	371c      	adds	r7, #28
 800669a:	46bd      	mov	sp, r7
 800669c:	bd90      	pop	{r4, r7, pc}

0800669e <OLED_GetAnimationValue>:

// 获取当前动画值
float OLED_GetAnimationValue(Animation_t *anim)
{
 800669e:	b480      	push	{r7}
 80066a0:	b083      	sub	sp, #12
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
    return anim->currentValue;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	691b      	ldr	r3, [r3, #16]
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	370c      	adds	r7, #12
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bc80      	pop	{r7}
 80066b2:	4770      	bx	lr

080066b4 <OLED_InitAnimationManager>:
AnimationManager_t Status_AnimationManager;
AnimationManager_t g_Title_AnimationManager; // 菜单动画管理器
AnimationManager_t g_AnimationManager; // 全局动画管理器

void OLED_InitAnimationManager(AnimationManager_t *manager) // 这是初始化一个动画管理器，填入你的manager名字，在系统初始化时候调用它
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b082      	sub	sp, #8
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
    manager->count = 0;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	f883 25f0 	strb.w	r2, [r3, #1520]	@ 0x5f0
    memset(manager->taggedAnimations, 0, sizeof(manager->taggedAnimations));
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f44f 62be 	mov.w	r2, #1520	@ 0x5f0
 80066ca:	2100      	movs	r1, #0
 80066cc:	4618      	mov	r0, r3
 80066ce:	f003 fdac 	bl	800a22a <memset>
}
 80066d2:	bf00      	nop
 80066d4:	3708      	adds	r7, #8
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}

080066da <OLED_FindTaggedAnimation>:

TaggedAnimation_t *OLED_FindTaggedAnimation(AnimationManager_t *manager, const char *tag) // 查找对应manager的标签对应的动画tag
{
 80066da:	b580      	push	{r7, lr}
 80066dc:	b084      	sub	sp, #16
 80066de:	af00      	add	r7, sp, #0
 80066e0:	6078      	str	r0, [r7, #4]
 80066e2:	6039      	str	r1, [r7, #0]
    for (uint8_t i = 0; i < manager->count; i++)
 80066e4:	2300      	movs	r3, #0
 80066e6:	73fb      	strb	r3, [r7, #15]
 80066e8:	e016      	b.n	8006718 <OLED_FindTaggedAnimation+0x3e>
    {
        if (strcmp(manager->taggedAnimations[i].tag, tag) == 0)
 80066ea:	7bfb      	ldrb	r3, [r7, #15]
 80066ec:	224c      	movs	r2, #76	@ 0x4c
 80066ee:	fb02 f303 	mul.w	r3, r2, r3
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	4413      	add	r3, r2
 80066f6:	6839      	ldr	r1, [r7, #0]
 80066f8:	4618      	mov	r0, r3
 80066fa:	f7f9 fd27 	bl	800014c <strcmp>
 80066fe:	4603      	mov	r3, r0
 8006700:	2b00      	cmp	r3, #0
 8006702:	d106      	bne.n	8006712 <OLED_FindTaggedAnimation+0x38>
        {
            return &manager->taggedAnimations[i];
 8006704:	7bfb      	ldrb	r3, [r7, #15]
 8006706:	224c      	movs	r2, #76	@ 0x4c
 8006708:	fb02 f303 	mul.w	r3, r2, r3
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	4413      	add	r3, r2
 8006710:	e009      	b.n	8006726 <OLED_FindTaggedAnimation+0x4c>
    for (uint8_t i = 0; i < manager->count; i++)
 8006712:	7bfb      	ldrb	r3, [r7, #15]
 8006714:	3301      	adds	r3, #1
 8006716:	73fb      	strb	r3, [r7, #15]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f893 35f0 	ldrb.w	r3, [r3, #1520]	@ 0x5f0
 800671e:	7bfa      	ldrb	r2, [r7, #15]
 8006720:	429a      	cmp	r2, r3
 8006722:	d3e2      	bcc.n	80066ea <OLED_FindTaggedAnimation+0x10>
        }
    }
    return NULL;
 8006724:	2300      	movs	r3, #0
}
 8006726:	4618      	mov	r0, r3
 8006728:	3710      	adds	r7, #16
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}

0800672e <OLED_GetObjectPosition>:

uint8_t OLED_GetObjectPosition(AnimationManager_t *manager, const char *tag, float *x, float *y) // 获取tag当前位置
{
 800672e:	b580      	push	{r7, lr}
 8006730:	b086      	sub	sp, #24
 8006732:	af00      	add	r7, sp, #0
 8006734:	60f8      	str	r0, [r7, #12]
 8006736:	60b9      	str	r1, [r7, #8]
 8006738:	607a      	str	r2, [r7, #4]
 800673a:	603b      	str	r3, [r7, #0]
    TaggedAnimation_t *anim = OLED_FindTaggedAnimation(manager, tag);
 800673c:	68b9      	ldr	r1, [r7, #8]
 800673e:	68f8      	ldr	r0, [r7, #12]
 8006740:	f7ff ffcb 	bl	80066da <OLED_FindTaggedAnimation>
 8006744:	6178      	str	r0, [r7, #20]
    if (anim)
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d00f      	beq.n	800676c <OLED_GetObjectPosition+0x3e>
    {
        if (x)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d003      	beq.n	800675a <OLED_GetObjectPosition+0x2c>
            *x = anim->currentX;
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	601a      	str	r2, [r3, #0]
        if (y)
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d003      	beq.n	8006768 <OLED_GetObjectPosition+0x3a>
            *y = anim->currentY;
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	601a      	str	r2, [r3, #0]
        return 1;
 8006768:	2301      	movs	r3, #1
 800676a:	e000      	b.n	800676e <OLED_GetObjectPosition+0x40>
    }
    return 0;
 800676c:	2300      	movs	r3, #0
}
 800676e:	4618      	mov	r0, r3
 8006770:	3718      	adds	r7, #24
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}

08006776 <OLED_MoveObject>:

// 移动指定标签的对象
void OLED_MoveObject(AnimationManager_t *manager, const char *tag,
                     float startX, float startY, float targetX, float targetY,
                     uint32_t duration, EaseType_t easeType) // 这个函数是用来移动一个对象的，tag是对象的标签，startX和startY是起始坐标，targetX和targetY是目标坐标，duration是动画持续时间，easeType是缓动类型
{
 8006776:	b580      	push	{r7, lr}
 8006778:	b088      	sub	sp, #32
 800677a:	af02      	add	r7, sp, #8
 800677c:	60f8      	str	r0, [r7, #12]
 800677e:	60b9      	str	r1, [r7, #8]
 8006780:	607a      	str	r2, [r7, #4]
 8006782:	603b      	str	r3, [r7, #0]
    // 查找已存在的动画
    TaggedAnimation_t *anim = OLED_FindTaggedAnimation(manager, tag);
 8006784:	68b9      	ldr	r1, [r7, #8]
 8006786:	68f8      	ldr	r0, [r7, #12]
 8006788:	f7ff ffa7 	bl	80066da <OLED_FindTaggedAnimation>
 800678c:	6178      	str	r0, [r7, #20]

    // 如果没找到并且还有可用槽位，创建新的动画
    if (anim == NULL)
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d122      	bne.n	80067da <OLED_MoveObject+0x64>
    {
        if (manager->count >= MAX_ANIMATIONS)
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f893 35f0 	ldrb.w	r3, [r3, #1520]	@ 0x5f0
 800679a:	2b13      	cmp	r3, #19
 800679c:	d838      	bhi.n	8006810 <OLED_MoveObject+0x9a>
            return; // 动画已满，无法添加

        anim = &manager->taggedAnimations[manager->count++];
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f893 35f0 	ldrb.w	r3, [r3, #1520]	@ 0x5f0
 80067a4:	1c5a      	adds	r2, r3, #1
 80067a6:	b2d1      	uxtb	r1, r2
 80067a8:	68fa      	ldr	r2, [r7, #12]
 80067aa:	f882 15f0 	strb.w	r1, [r2, #1520]	@ 0x5f0
 80067ae:	461a      	mov	r2, r3
 80067b0:	234c      	movs	r3, #76	@ 0x4c
 80067b2:	fb02 f303 	mul.w	r3, r2, r3
 80067b6:	68fa      	ldr	r2, [r7, #12]
 80067b8:	4413      	add	r3, r2
 80067ba:	617b      	str	r3, [r7, #20]
        strncpy(anim->tag, tag, sizeof(anim->tag) - 1);
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	220f      	movs	r2, #15
 80067c0:	68b9      	ldr	r1, [r7, #8]
 80067c2:	4618      	mov	r0, r3
 80067c4:	f003 fd39 	bl	800a23a <strncpy>
        anim->tag[sizeof(anim->tag) - 1] = '\0'; // 确保字符串结束
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	2200      	movs	r2, #0
 80067cc:	73da      	strb	r2, [r3, #15]
        anim->currentX = startX;
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	645a      	str	r2, [r3, #68]	@ 0x44
        anim->currentY = startY;
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	683a      	ldr	r2, [r7, #0]
 80067d8:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    // 初始化或更新X和Y坐标的动画
    OLED_InitAnimation(&anim->xAnimation, startX, targetX, duration, easeType);
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	f103 0010 	add.w	r0, r3, #16
 80067e0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80067e4:	9300      	str	r3, [sp, #0]
 80067e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067e8:	6a3a      	ldr	r2, [r7, #32]
 80067ea:	6879      	ldr	r1, [r7, #4]
 80067ec:	f7ff fed8 	bl	80065a0 <OLED_InitAnimation>
    OLED_InitAnimation(&anim->yAnimation, startY, targetY, duration, easeType);
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 80067f6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80067fa:	9300      	str	r3, [sp, #0]
 80067fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006800:	6839      	ldr	r1, [r7, #0]
 8006802:	f7ff fecd 	bl	80065a0 <OLED_InitAnimation>
    anim->isActive = 1;
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	2201      	movs	r2, #1
 800680a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800680e:	e000      	b.n	8006812 <OLED_MoveObject+0x9c>
            return; // 动画已满，无法添加
 8006810:	bf00      	nop
}
 8006812:	3718      	adds	r7, #24
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <OLED_UpdateAnimationManager>:

// 更新manager里面的所有动画!
void OLED_UpdateAnimationManager(AnimationManager_t *manager) //! 这里需要使用OLED_UpdateDisplayVSync()来更新显示
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b086      	sub	sp, #24
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
    uint32_t currentTime = HAL_GetTick();
 8006820:	f000 ff00 	bl	8007624 <HAL_GetTick>
 8006824:	6138      	str	r0, [r7, #16]

    for (uint8_t i = 0; i < manager->count; i++)
 8006826:	2300      	movs	r3, #0
 8006828:	75fb      	strb	r3, [r7, #23]
 800682a:	e03a      	b.n	80068a2 <OLED_UpdateAnimationManager+0x8a>
    {
        TaggedAnimation_t *anim = &manager->taggedAnimations[i];
 800682c:	7dfb      	ldrb	r3, [r7, #23]
 800682e:	224c      	movs	r2, #76	@ 0x4c
 8006830:	fb02 f303 	mul.w	r3, r2, r3
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	4413      	add	r3, r2
 8006838:	60fb      	str	r3, [r7, #12]
        if (!anim->isActive)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006840:	2b00      	cmp	r3, #0
 8006842:	d02a      	beq.n	800689a <OLED_UpdateAnimationManager+0x82>
            continue;

        uint8_t activeX = OLED_UpdateAnimation(&anim->xAnimation, currentTime);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	3310      	adds	r3, #16
 8006848:	6939      	ldr	r1, [r7, #16]
 800684a:	4618      	mov	r0, r3
 800684c:	f7ff feca 	bl	80065e4 <OLED_UpdateAnimation>
 8006850:	4603      	mov	r3, r0
 8006852:	72fb      	strb	r3, [r7, #11]
        uint8_t activeY = OLED_UpdateAnimation(&anim->yAnimation, currentTime);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	3328      	adds	r3, #40	@ 0x28
 8006858:	6939      	ldr	r1, [r7, #16]
 800685a:	4618      	mov	r0, r3
 800685c:	f7ff fec2 	bl	80065e4 <OLED_UpdateAnimation>
 8006860:	4603      	mov	r3, r0
 8006862:	72bb      	strb	r3, [r7, #10]

        anim->currentX = OLED_GetAnimationValue(&anim->xAnimation);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	3310      	adds	r3, #16
 8006868:	4618      	mov	r0, r3
 800686a:	f7ff ff18 	bl	800669e <OLED_GetAnimationValue>
 800686e:	4602      	mov	r2, r0
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	645a      	str	r2, [r3, #68]	@ 0x44
        anim->currentY = OLED_GetAnimationValue(&anim->yAnimation);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	3328      	adds	r3, #40	@ 0x28
 8006878:	4618      	mov	r0, r3
 800687a:	f7ff ff10 	bl	800669e <OLED_GetAnimationValue>
 800687e:	4602      	mov	r2, r0
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	649a      	str	r2, [r3, #72]	@ 0x48

        // 如果两个动画都结束，则标记该对象动画为非活跃
        if (!activeX && !activeY)
 8006884:	7afb      	ldrb	r3, [r7, #11]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d108      	bne.n	800689c <OLED_UpdateAnimationManager+0x84>
 800688a:	7abb      	ldrb	r3, [r7, #10]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d105      	bne.n	800689c <OLED_UpdateAnimationManager+0x84>
            anim->isActive = 0;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2200      	movs	r2, #0
 8006894:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006898:	e000      	b.n	800689c <OLED_UpdateAnimationManager+0x84>
            continue;
 800689a:	bf00      	nop
    for (uint8_t i = 0; i < manager->count; i++)
 800689c:	7dfb      	ldrb	r3, [r7, #23]
 800689e:	3301      	adds	r3, #1
 80068a0:	75fb      	strb	r3, [r7, #23]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f893 35f0 	ldrb.w	r3, [r3, #1520]	@ 0x5f0
 80068a8:	7dfa      	ldrb	r2, [r7, #23]
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d3be      	bcc.n	800682c <OLED_UpdateAnimationManager+0x14>
    }
}
 80068ae:	bf00      	nop
 80068b0:	bf00      	nop
 80068b2:	3718      	adds	r7, #24
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}

080068b8 <OLED_GetAnimationStates>:

uint8_t OLED_GetAnimationStates(AnimationManager_t *manager, const char *tag) // 返回值是1表示活跃，0表示非活跃
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b084      	sub	sp, #16
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	6039      	str	r1, [r7, #0]
    TaggedAnimation_t *anim = OLED_FindTaggedAnimation(manager, tag);
 80068c2:	6839      	ldr	r1, [r7, #0]
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f7ff ff08 	bl	80066da <OLED_FindTaggedAnimation>
 80068ca:	60f8      	str	r0, [r7, #12]
    if (anim)
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d003      	beq.n	80068da <OLED_GetAnimationStates+0x22>
    {
        return anim->isActive;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80068d8:	e000      	b.n	80068dc <OLED_GetAnimationStates+0x24>
    }
    return 0; // 如果没有找到，返回0表示非活跃
 80068da:	2300      	movs	r3, #0
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3710      	adds	r7, #16
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}

080068e4 <OLED_DoTweenObject>:

// 移动指定标签的对象到目标坐标。
// 如果对象已在向同一目标动画且动画处于活动状态，则不执行任何操作。
// 否则，它会中断当前动画（如果活动）并从当前位置开始新的动画。
void OLED_DoTweenObject(AnimationManager_t *manager, const char *tag, float targetX, float targetY, uint32_t duration, EaseType_t easeType)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b08a      	sub	sp, #40	@ 0x28
 80068e8:	af04      	add	r7, sp, #16
 80068ea:	60f8      	str	r0, [r7, #12]
 80068ec:	60b9      	str	r1, [r7, #8]
 80068ee:	607a      	str	r2, [r7, #4]
 80068f0:	603b      	str	r3, [r7, #0]
    TaggedAnimation_t *anim = OLED_FindTaggedAnimation(manager, tag);
 80068f2:	68b9      	ldr	r1, [r7, #8]
 80068f4:	68f8      	ldr	r0, [r7, #12]
 80068f6:	f7ff fef0 	bl	80066da <OLED_FindTaggedAnimation>
 80068fa:	6178      	str	r0, [r7, #20]

    if (anim == NULL)
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d029      	beq.n	8006956 <OLED_DoTweenObject+0x72>
        // 但这需要为新对象定义 initialX, initialY。
        return;
    }

    // 检查动画是否已处于活动状态并且已经朝向相同的目标
    if (anim->isActive &&
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006908:	2b00      	cmp	r3, #0
 800690a:	d011      	beq.n	8006930 <OLED_DoTweenObject+0x4c>
        anim->xAnimation.endValue == targetX &&
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	69db      	ldr	r3, [r3, #28]
    if (anim->isActive &&
 8006910:	4619      	mov	r1, r3
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f7f9 fece 	bl	80006b4 <__aeabi_fcmpeq>
 8006918:	4603      	mov	r3, r0
 800691a:	2b00      	cmp	r3, #0
 800691c:	d008      	beq.n	8006930 <OLED_DoTweenObject+0x4c>
        anim->yAnimation.endValue == targetY)
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
        anim->xAnimation.endValue == targetX &&
 8006922:	4619      	mov	r1, r3
 8006924:	6838      	ldr	r0, [r7, #0]
 8006926:	f7f9 fec5 	bl	80006b4 <__aeabi_fcmpeq>
 800692a:	4603      	mov	r3, r0
 800692c:	2b00      	cmp	r3, #0
 800692e:	d114      	bne.n	800695a <OLED_DoTweenObject+0x76>
        return;
    }

    // 否则，（重新）启动动画到新目标
    // OLED_MoveObject 将从 anim->currentX, anim->currentY 开始动画
    OLED_MoveObject(manager, tag, anim->currentX, anim->currentY, targetX, targetY, duration, easeType);
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8006938:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800693c:	9303      	str	r3, [sp, #12]
 800693e:	6a3b      	ldr	r3, [r7, #32]
 8006940:	9302      	str	r3, [sp, #8]
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	9301      	str	r3, [sp, #4]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	9300      	str	r3, [sp, #0]
 800694a:	460b      	mov	r3, r1
 800694c:	68b9      	ldr	r1, [r7, #8]
 800694e:	68f8      	ldr	r0, [r7, #12]
 8006950:	f7ff ff11 	bl	8006776 <OLED_MoveObject>
 8006954:	e002      	b.n	800695c <OLED_DoTweenObject+0x78>
        return;
 8006956:	bf00      	nop
 8006958:	e000      	b.n	800695c <OLED_DoTweenObject+0x78>
        return;
 800695a:	bf00      	nop
}
 800695c:	3718      	adds	r7, #24
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}

08006962 <OLED_MoveObjectAxis>:

// 为X或Y轴单独创建动画的函数
void OLED_MoveObjectAxis(AnimationManager_t *manager, const char *tag,
                         float startX, float startY, float targetX, float targetY,
                         uint32_t duration, EaseType_t easeType, bool onlyX, bool onlyY)
{
 8006962:	b580      	push	{r7, lr}
 8006964:	b088      	sub	sp, #32
 8006966:	af02      	add	r7, sp, #8
 8006968:	60f8      	str	r0, [r7, #12]
 800696a:	60b9      	str	r1, [r7, #8]
 800696c:	607a      	str	r2, [r7, #4]
 800696e:	603b      	str	r3, [r7, #0]
    // 查找已存在的动画
    TaggedAnimation_t *anim = OLED_FindTaggedAnimation(manager, tag);
 8006970:	68b9      	ldr	r1, [r7, #8]
 8006972:	68f8      	ldr	r0, [r7, #12]
 8006974:	f7ff feb1 	bl	80066da <OLED_FindTaggedAnimation>
 8006978:	6178      	str	r0, [r7, #20]

    // 如果没找到并且还有可用槽位，创建新的动画
    if (anim == NULL)
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d122      	bne.n	80069c6 <OLED_MoveObjectAxis+0x64>
    {
        if (manager->count >= MAX_ANIMATIONS)
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f893 35f0 	ldrb.w	r3, [r3, #1520]	@ 0x5f0
 8006986:	2b13      	cmp	r3, #19
 8006988:	d846      	bhi.n	8006a18 <OLED_MoveObjectAxis+0xb6>
            return; // 动画已满，无法添加

        anim = &manager->taggedAnimations[manager->count++];
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f893 35f0 	ldrb.w	r3, [r3, #1520]	@ 0x5f0
 8006990:	1c5a      	adds	r2, r3, #1
 8006992:	b2d1      	uxtb	r1, r2
 8006994:	68fa      	ldr	r2, [r7, #12]
 8006996:	f882 15f0 	strb.w	r1, [r2, #1520]	@ 0x5f0
 800699a:	461a      	mov	r2, r3
 800699c:	234c      	movs	r3, #76	@ 0x4c
 800699e:	fb02 f303 	mul.w	r3, r2, r3
 80069a2:	68fa      	ldr	r2, [r7, #12]
 80069a4:	4413      	add	r3, r2
 80069a6:	617b      	str	r3, [r7, #20]
        strncpy(anim->tag, tag, sizeof(anim->tag) - 1);
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	220f      	movs	r2, #15
 80069ac:	68b9      	ldr	r1, [r7, #8]
 80069ae:	4618      	mov	r0, r3
 80069b0:	f003 fc43 	bl	800a23a <strncpy>
        anim->tag[sizeof(anim->tag) - 1] = '\0'; // 确保字符串结束
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	2200      	movs	r2, #0
 80069b8:	73da      	strb	r2, [r3, #15]
        anim->currentX = startX;
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	645a      	str	r2, [r3, #68]	@ 0x44
        anim->currentY = startY;
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	683a      	ldr	r2, [r7, #0]
 80069c4:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    // 只初始化需要的轴的动画
    if (!onlyY) // 如果不是只修改Y轴，就修改X轴
 80069c6:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80069ca:	f083 0301 	eor.w	r3, r3, #1
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d00a      	beq.n	80069ea <OLED_MoveObjectAxis+0x88>
        OLED_InitAnimation(&anim->xAnimation, startX, targetX, duration, easeType);
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	f103 0010 	add.w	r0, r3, #16
 80069da:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80069de:	9300      	str	r3, [sp, #0]
 80069e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069e2:	6a3a      	ldr	r2, [r7, #32]
 80069e4:	6879      	ldr	r1, [r7, #4]
 80069e6:	f7ff fddb 	bl	80065a0 <OLED_InitAnimation>
    if (!onlyX) // 如果不是只修改X轴，就修改Y轴
 80069ea:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80069ee:	f083 0301 	eor.w	r3, r3, #1
 80069f2:	b2db      	uxtb	r3, r3
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d00a      	beq.n	8006a0e <OLED_MoveObjectAxis+0xac>
        OLED_InitAnimation(&anim->yAnimation, startY, targetY, duration, easeType);
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 80069fe:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006a02:	9300      	str	r3, [sp, #0]
 8006a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a08:	6839      	ldr	r1, [r7, #0]
 8006a0a:	f7ff fdc9 	bl	80065a0 <OLED_InitAnimation>

    anim->isActive = 1;
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	2201      	movs	r2, #1
 8006a12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006a16:	e000      	b.n	8006a1a <OLED_MoveObjectAxis+0xb8>
            return; // 动画已满，无法添加
 8006a18:	bf00      	nop
}
 8006a1a:	3718      	adds	r7, #24
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <OLED_DoTweenObjectX>:

// 这个函数是用来移动一个对象的，tag是对象的标签，targetX是目标坐标，duration是动画持续时间，easeType是缓动类型
//! 这里不可以在while里面调用！为一次性调用
void OLED_DoTweenObjectX(AnimationManager_t *manager, const char *tag, float targetX, uint32_t duration, EaseType_t easeType)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b08c      	sub	sp, #48	@ 0x30
 8006a24:	af06      	add	r7, sp, #24
 8006a26:	60f8      	str	r0, [r7, #12]
 8006a28:	60b9      	str	r1, [r7, #8]
 8006a2a:	607a      	str	r2, [r7, #4]
 8006a2c:	603b      	str	r3, [r7, #0]
    TaggedAnimation_t *anim = OLED_FindTaggedAnimation(manager, tag);
 8006a2e:	68b9      	ldr	r1, [r7, #8]
 8006a30:	68f8      	ldr	r0, [r7, #12]
 8006a32:	f7ff fe52 	bl	80066da <OLED_FindTaggedAnimation>
 8006a36:	6178      	str	r0, [r7, #20]
    if (anim && anim->currentX != targetX)
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d021      	beq.n	8006a82 <OLED_DoTweenObjectX+0x62>
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a42:	4619      	mov	r1, r3
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f7f9 fe35 	bl	80006b4 <__aeabi_fcmpeq>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d000      	beq.n	8006a52 <OLED_DoTweenObjectX+0x32>
    {
        OLED_MoveObjectAxis(manager, tag, anim->currentX, anim->currentY, targetX, anim->currentY, duration, easeType, true, false);
    }
}
 8006a50:	e017      	b.n	8006a82 <OLED_DoTweenObjectX+0x62>
        OLED_MoveObjectAxis(manager, tag, anim->currentX, anim->currentY, targetX, anim->currentY, duration, easeType, true, false);
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a5e:	2200      	movs	r2, #0
 8006a60:	9205      	str	r2, [sp, #20]
 8006a62:	2201      	movs	r2, #1
 8006a64:	9204      	str	r2, [sp, #16]
 8006a66:	f897 2020 	ldrb.w	r2, [r7, #32]
 8006a6a:	9203      	str	r2, [sp, #12]
 8006a6c:	683a      	ldr	r2, [r7, #0]
 8006a6e:	9202      	str	r2, [sp, #8]
 8006a70:	9301      	str	r3, [sp, #4]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	9300      	str	r3, [sp, #0]
 8006a76:	4603      	mov	r3, r0
 8006a78:	460a      	mov	r2, r1
 8006a7a:	68b9      	ldr	r1, [r7, #8]
 8006a7c:	68f8      	ldr	r0, [r7, #12]
 8006a7e:	f7ff ff70 	bl	8006962 <OLED_MoveObjectAxis>
}
 8006a82:	bf00      	nop
 8006a84:	3718      	adds	r7, #24
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}

08006a8a <OLED_DoTweenObjectY>:

// 这个函数是用来移动一个对象的，tag是对象的标签，targetY是目标坐标，duration是动画持续时间，easeType是缓动类型
//! 这里不可以在while里面调用！为一次性调用
void OLED_DoTweenObjectY(AnimationManager_t *manager, const char *tag, float targetY, uint32_t duration, EaseType_t easeType)
{
 8006a8a:	b580      	push	{r7, lr}
 8006a8c:	b08c      	sub	sp, #48	@ 0x30
 8006a8e:	af06      	add	r7, sp, #24
 8006a90:	60f8      	str	r0, [r7, #12]
 8006a92:	60b9      	str	r1, [r7, #8]
 8006a94:	607a      	str	r2, [r7, #4]
 8006a96:	603b      	str	r3, [r7, #0]
    TaggedAnimation_t *anim = OLED_FindTaggedAnimation(manager, tag);
 8006a98:	68b9      	ldr	r1, [r7, #8]
 8006a9a:	68f8      	ldr	r0, [r7, #12]
 8006a9c:	f7ff fe1d 	bl	80066da <OLED_FindTaggedAnimation>
 8006aa0:	6178      	str	r0, [r7, #20]
    if (anim && anim->currentY != targetY)
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d021      	beq.n	8006aec <OLED_DoTweenObjectY+0x62>
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006aac:	4619      	mov	r1, r3
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f7f9 fe00 	bl	80006b4 <__aeabi_fcmpeq>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d000      	beq.n	8006abc <OLED_DoTweenObjectY+0x32>
    {
        OLED_MoveObjectAxis(manager, tag, anim->currentX, anim->currentY, anim->currentX, targetY, duration, easeType, false, true);
    }
}
 8006aba:	e017      	b.n	8006aec <OLED_DoTweenObjectY+0x62>
        OLED_MoveObjectAxis(manager, tag, anim->currentX, anim->currentY, anim->currentX, targetY, duration, easeType, false, true);
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ac8:	2201      	movs	r2, #1
 8006aca:	9205      	str	r2, [sp, #20]
 8006acc:	2200      	movs	r2, #0
 8006ace:	9204      	str	r2, [sp, #16]
 8006ad0:	f897 2020 	ldrb.w	r2, [r7, #32]
 8006ad4:	9203      	str	r2, [sp, #12]
 8006ad6:	683a      	ldr	r2, [r7, #0]
 8006ad8:	9202      	str	r2, [sp, #8]
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	9201      	str	r2, [sp, #4]
 8006ade:	9300      	str	r3, [sp, #0]
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	460a      	mov	r2, r1
 8006ae4:	68b9      	ldr	r1, [r7, #8]
 8006ae6:	68f8      	ldr	r0, [r7, #12]
 8006ae8:	f7ff ff3b 	bl	8006962 <OLED_MoveObjectAxis>
}
 8006aec:	bf00      	nop
 8006aee:	3718      	adds	r7, #24
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <OLED_DrawFilledRectangle>:
    }
}

// 绘制填充矩形
void OLED_DrawFilledRectangle(int16_t x, int16_t y, uint8_t width, uint8_t height, uint8_t color) //! UPDATEDISPLAY REQUIRED
{
 8006af4:	b590      	push	{r4, r7, lr}
 8006af6:	b087      	sub	sp, #28
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	4604      	mov	r4, r0
 8006afc:	4608      	mov	r0, r1
 8006afe:	4611      	mov	r1, r2
 8006b00:	461a      	mov	r2, r3
 8006b02:	4623      	mov	r3, r4
 8006b04:	80fb      	strh	r3, [r7, #6]
 8006b06:	4603      	mov	r3, r0
 8006b08:	80bb      	strh	r3, [r7, #4]
 8006b0a:	460b      	mov	r3, r1
 8006b0c:	70fb      	strb	r3, [r7, #3]
 8006b0e:	4613      	mov	r3, r2
 8006b10:	70bb      	strb	r3, [r7, #2]
    // Initial check for zero dimensions
    if (width == 0 || height == 0)
 8006b12:	78fb      	ldrb	r3, [r7, #3]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d07e      	beq.n	8006c16 <OLED_DrawFilledRectangle+0x122>
 8006b18:	78bb      	ldrb	r3, [r7, #2]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d07b      	beq.n	8006c16 <OLED_DrawFilledRectangle+0x122>
    {
        return;
    }

    // Use int16_t for width and height internally for clipping calculations
    int16_t current_width = width;
 8006b1e:	78fb      	ldrb	r3, [r7, #3]
 8006b20:	82fb      	strh	r3, [r7, #22]
    int16_t current_height = height;
 8006b22:	78bb      	ldrb	r3, [r7, #2]
 8006b24:	82bb      	strh	r3, [r7, #20]

    // Clip left edge: if x is negative, adjust width and set x to 0
    if (x < 0)
 8006b26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	da06      	bge.n	8006b3c <OLED_DrawFilledRectangle+0x48>
    {
        current_width += x; // x is negative, so this reduces width
 8006b2e:	8afa      	ldrh	r2, [r7, #22]
 8006b30:	88fb      	ldrh	r3, [r7, #6]
 8006b32:	4413      	add	r3, r2
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	82fb      	strh	r3, [r7, #22]
        x = 0;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	80fb      	strh	r3, [r7, #6]
    }

    // Clip top edge: if y is negative, adjust height and set y to 0
    if (y < 0)
 8006b3c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	da06      	bge.n	8006b52 <OLED_DrawFilledRectangle+0x5e>
    {
        current_height += y; // y is negative, so this reduces height
 8006b44:	8aba      	ldrh	r2, [r7, #20]
 8006b46:	88bb      	ldrh	r3, [r7, #4]
 8006b48:	4413      	add	r3, r2
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	82bb      	strh	r3, [r7, #20]
        y = 0;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	80bb      	strh	r3, [r7, #4]
    }

    // If width or height became non-positive after left/top clipping, nothing to draw
    if (current_width <= 0 || current_height <= 0)
 8006b52:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	dd5f      	ble.n	8006c1a <OLED_DrawFilledRectangle+0x126>
 8006b5a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	dd5b      	ble.n	8006c1a <OLED_DrawFilledRectangle+0x126>
        return;
    }

    // Check if the adjusted rectangle is entirely off-screen to the right or bottom
    // At this point, x and y are >= 0.
    if (x >= OLED_WIDTH || y >= OLED_HEIGHT)
 8006b62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006b66:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b68:	dc59      	bgt.n	8006c1e <OLED_DrawFilledRectangle+0x12a>
 8006b6a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006b6e:	2b3f      	cmp	r3, #63	@ 0x3f
 8006b70:	dc55      	bgt.n	8006c1e <OLED_DrawFilledRectangle+0x12a>
    {
        return;
    }

    // Clip right edge: if x + current_width extends beyond OLED_WIDTH
    if (x + current_width > OLED_WIDTH)
 8006b72:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006b76:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006b7a:	4413      	add	r3, r2
 8006b7c:	2b80      	cmp	r3, #128	@ 0x80
 8006b7e:	dd04      	ble.n	8006b8a <OLED_DrawFilledRectangle+0x96>
    {
        current_width = OLED_WIDTH - x;
 8006b80:	88fb      	ldrh	r3, [r7, #6]
 8006b82:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	82fb      	strh	r3, [r7, #22]
    }

    // Clip bottom edge: if y + current_height extends beyond OLED_HEIGHT
    if (y + current_height > OLED_HEIGHT)
 8006b8a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8006b8e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006b92:	4413      	add	r3, r2
 8006b94:	2b40      	cmp	r3, #64	@ 0x40
 8006b96:	dd04      	ble.n	8006ba2 <OLED_DrawFilledRectangle+0xae>
    {
        current_height = OLED_HEIGHT - y;
 8006b98:	88bb      	ldrh	r3, [r7, #4]
 8006b9a:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	82bb      	strh	r3, [r7, #20]
    }

    // If width or height became non-positive after right/bottom clipping, nothing to draw
    if (current_width <= 0 || current_height <= 0)
 8006ba2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	dd3b      	ble.n	8006c22 <OLED_DrawFilledRectangle+0x12e>
 8006baa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	dd37      	ble.n	8006c22 <OLED_DrawFilledRectangle+0x12e>
    {
        return;
    }

    // Cast coordinates and dimensions to uint8_t for drawing
    uint8_t final_x = (uint8_t)x;
 8006bb2:	88fb      	ldrh	r3, [r7, #6]
 8006bb4:	747b      	strb	r3, [r7, #17]
    uint8_t final_y = (uint8_t)y;
 8006bb6:	88bb      	ldrh	r3, [r7, #4]
 8006bb8:	743b      	strb	r3, [r7, #16]
    uint8_t final_width = (uint8_t)current_width;
 8006bba:	8afb      	ldrh	r3, [r7, #22]
 8006bbc:	73fb      	strb	r3, [r7, #15]
    uint8_t final_height = (uint8_t)current_height;
 8006bbe:	8abb      	ldrh	r3, [r7, #20]
 8006bc0:	73bb      	strb	r3, [r7, #14]

    uint8_t x2 = final_x + final_width - 1;
 8006bc2:	7c7a      	ldrb	r2, [r7, #17]
 8006bc4:	7bfb      	ldrb	r3, [r7, #15]
 8006bc6:	4413      	add	r3, r2
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	3b01      	subs	r3, #1
 8006bcc:	737b      	strb	r3, [r7, #13]
    uint8_t y2 = final_y + final_height - 1;
 8006bce:	7c3a      	ldrb	r2, [r7, #16]
 8006bd0:	7bbb      	ldrb	r3, [r7, #14]
 8006bd2:	4413      	add	r3, r2
 8006bd4:	b2db      	uxtb	r3, r3
 8006bd6:	3b01      	subs	r3, #1
 8006bd8:	733b      	strb	r3, [r7, #12]

    // 逐像素填充
    for (uint8_t j = final_y; j <= y2; j++)
 8006bda:	7c3b      	ldrb	r3, [r7, #16]
 8006bdc:	74fb      	strb	r3, [r7, #19]
 8006bde:	e015      	b.n	8006c0c <OLED_DrawFilledRectangle+0x118>
    {
        for (uint8_t i = final_x; i <= x2; i++)
 8006be0:	7c7b      	ldrb	r3, [r7, #17]
 8006be2:	74bb      	strb	r3, [r7, #18]
 8006be4:	e00b      	b.n	8006bfe <OLED_DrawFilledRectangle+0x10a>
        {
            OLED_WritePixel(i, j, color);
 8006be6:	7cbb      	ldrb	r3, [r7, #18]
 8006be8:	b21b      	sxth	r3, r3
 8006bea:	7cfa      	ldrb	r2, [r7, #19]
 8006bec:	b211      	sxth	r1, r2
 8006bee:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f7fb f944 	bl	8001e80 <OLED_WritePixel>
        for (uint8_t i = final_x; i <= x2; i++)
 8006bf8:	7cbb      	ldrb	r3, [r7, #18]
 8006bfa:	3301      	adds	r3, #1
 8006bfc:	74bb      	strb	r3, [r7, #18]
 8006bfe:	7cba      	ldrb	r2, [r7, #18]
 8006c00:	7b7b      	ldrb	r3, [r7, #13]
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d9ef      	bls.n	8006be6 <OLED_DrawFilledRectangle+0xf2>
    for (uint8_t j = final_y; j <= y2; j++)
 8006c06:	7cfb      	ldrb	r3, [r7, #19]
 8006c08:	3301      	adds	r3, #1
 8006c0a:	74fb      	strb	r3, [r7, #19]
 8006c0c:	7cfa      	ldrb	r2, [r7, #19]
 8006c0e:	7b3b      	ldrb	r3, [r7, #12]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d9e5      	bls.n	8006be0 <OLED_DrawFilledRectangle+0xec>
 8006c14:	e006      	b.n	8006c24 <OLED_DrawFilledRectangle+0x130>
        return;
 8006c16:	bf00      	nop
 8006c18:	e004      	b.n	8006c24 <OLED_DrawFilledRectangle+0x130>
        return;
 8006c1a:	bf00      	nop
 8006c1c:	e002      	b.n	8006c24 <OLED_DrawFilledRectangle+0x130>
        return;
 8006c1e:	bf00      	nop
 8006c20:	e000      	b.n	8006c24 <OLED_DrawFilledRectangle+0x130>
        return;
 8006c22:	bf00      	nop
        }
    }
}
 8006c24:	371c      	adds	r7, #28
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd90      	pop	{r4, r7, pc}
	...

08006c2c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8006c30:	4b17      	ldr	r3, [pc, #92]	@ (8006c90 <MX_SPI2_Init+0x64>)
 8006c32:	4a18      	ldr	r2, [pc, #96]	@ (8006c94 <MX_SPI2_Init+0x68>)
 8006c34:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8006c36:	4b16      	ldr	r3, [pc, #88]	@ (8006c90 <MX_SPI2_Init+0x64>)
 8006c38:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8006c3c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8006c3e:	4b14      	ldr	r3, [pc, #80]	@ (8006c90 <MX_SPI2_Init+0x64>)
 8006c40:	2200      	movs	r2, #0
 8006c42:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8006c44:	4b12      	ldr	r3, [pc, #72]	@ (8006c90 <MX_SPI2_Init+0x64>)
 8006c46:	2200      	movs	r2, #0
 8006c48:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006c4a:	4b11      	ldr	r3, [pc, #68]	@ (8006c90 <MX_SPI2_Init+0x64>)
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006c50:	4b0f      	ldr	r3, [pc, #60]	@ (8006c90 <MX_SPI2_Init+0x64>)
 8006c52:	2200      	movs	r2, #0
 8006c54:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8006c56:	4b0e      	ldr	r3, [pc, #56]	@ (8006c90 <MX_SPI2_Init+0x64>)
 8006c58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006c5c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006c5e:	4b0c      	ldr	r3, [pc, #48]	@ (8006c90 <MX_SPI2_Init+0x64>)
 8006c60:	2200      	movs	r2, #0
 8006c62:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006c64:	4b0a      	ldr	r3, [pc, #40]	@ (8006c90 <MX_SPI2_Init+0x64>)
 8006c66:	2200      	movs	r2, #0
 8006c68:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8006c6a:	4b09      	ldr	r3, [pc, #36]	@ (8006c90 <MX_SPI2_Init+0x64>)
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c70:	4b07      	ldr	r3, [pc, #28]	@ (8006c90 <MX_SPI2_Init+0x64>)
 8006c72:	2200      	movs	r2, #0
 8006c74:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8006c76:	4b06      	ldr	r3, [pc, #24]	@ (8006c90 <MX_SPI2_Init+0x64>)
 8006c78:	220a      	movs	r2, #10
 8006c7a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8006c7c:	4804      	ldr	r0, [pc, #16]	@ (8006c90 <MX_SPI2_Init+0x64>)
 8006c7e:	f002 f9b9 	bl	8008ff4 <HAL_SPI_Init>
 8006c82:	4603      	mov	r3, r0
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d001      	beq.n	8006c8c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8006c88:	f7fa ffa7 	bl	8001bda <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8006c8c:	bf00      	nop
 8006c8e:	bd80      	pop	{r7, pc}
 8006c90:	20003eb4 	.word	0x20003eb4
 8006c94:	40003800 	.word	0x40003800

08006c98 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b088      	sub	sp, #32
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ca0:	f107 0310 	add.w	r3, r7, #16
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	601a      	str	r2, [r3, #0]
 8006ca8:	605a      	str	r2, [r3, #4]
 8006caa:	609a      	str	r2, [r3, #8]
 8006cac:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a1c      	ldr	r2, [pc, #112]	@ (8006d24 <HAL_SPI_MspInit+0x8c>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d131      	bne.n	8006d1c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006cb8:	4b1b      	ldr	r3, [pc, #108]	@ (8006d28 <HAL_SPI_MspInit+0x90>)
 8006cba:	69db      	ldr	r3, [r3, #28]
 8006cbc:	4a1a      	ldr	r2, [pc, #104]	@ (8006d28 <HAL_SPI_MspInit+0x90>)
 8006cbe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006cc2:	61d3      	str	r3, [r2, #28]
 8006cc4:	4b18      	ldr	r3, [pc, #96]	@ (8006d28 <HAL_SPI_MspInit+0x90>)
 8006cc6:	69db      	ldr	r3, [r3, #28]
 8006cc8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ccc:	60fb      	str	r3, [r7, #12]
 8006cce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006cd0:	4b15      	ldr	r3, [pc, #84]	@ (8006d28 <HAL_SPI_MspInit+0x90>)
 8006cd2:	699b      	ldr	r3, [r3, #24]
 8006cd4:	4a14      	ldr	r2, [pc, #80]	@ (8006d28 <HAL_SPI_MspInit+0x90>)
 8006cd6:	f043 0308 	orr.w	r3, r3, #8
 8006cda:	6193      	str	r3, [r2, #24]
 8006cdc:	4b12      	ldr	r3, [pc, #72]	@ (8006d28 <HAL_SPI_MspInit+0x90>)
 8006cde:	699b      	ldr	r3, [r3, #24]
 8006ce0:	f003 0308 	and.w	r3, r3, #8
 8006ce4:	60bb      	str	r3, [r7, #8]
 8006ce6:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = Flash_SCK_Pin|Flash_MOSI_Pin;
 8006ce8:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8006cec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006cee:	2302      	movs	r3, #2
 8006cf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006cf2:	2303      	movs	r3, #3
 8006cf4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006cf6:	f107 0310 	add.w	r3, r7, #16
 8006cfa:	4619      	mov	r1, r3
 8006cfc:	480b      	ldr	r0, [pc, #44]	@ (8006d2c <HAL_SPI_MspInit+0x94>)
 8006cfe:	f000 ff2d 	bl	8007b5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Flash_MISO_Pin;
 8006d02:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006d06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(Flash_MISO_GPIO_Port, &GPIO_InitStruct);
 8006d10:	f107 0310 	add.w	r3, r7, #16
 8006d14:	4619      	mov	r1, r3
 8006d16:	4805      	ldr	r0, [pc, #20]	@ (8006d2c <HAL_SPI_MspInit+0x94>)
 8006d18:	f000 ff20 	bl	8007b5c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8006d1c:	bf00      	nop
 8006d1e:	3720      	adds	r7, #32
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}
 8006d24:	40003800 	.word	0x40003800
 8006d28:	40021000 	.word	0x40021000
 8006d2c:	40010c00 	.word	0x40010c00

08006d30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b085      	sub	sp, #20
 8006d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8006d36:	4b15      	ldr	r3, [pc, #84]	@ (8006d8c <HAL_MspInit+0x5c>)
 8006d38:	699b      	ldr	r3, [r3, #24]
 8006d3a:	4a14      	ldr	r2, [pc, #80]	@ (8006d8c <HAL_MspInit+0x5c>)
 8006d3c:	f043 0301 	orr.w	r3, r3, #1
 8006d40:	6193      	str	r3, [r2, #24]
 8006d42:	4b12      	ldr	r3, [pc, #72]	@ (8006d8c <HAL_MspInit+0x5c>)
 8006d44:	699b      	ldr	r3, [r3, #24]
 8006d46:	f003 0301 	and.w	r3, r3, #1
 8006d4a:	60bb      	str	r3, [r7, #8]
 8006d4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006d4e:	4b0f      	ldr	r3, [pc, #60]	@ (8006d8c <HAL_MspInit+0x5c>)
 8006d50:	69db      	ldr	r3, [r3, #28]
 8006d52:	4a0e      	ldr	r2, [pc, #56]	@ (8006d8c <HAL_MspInit+0x5c>)
 8006d54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d58:	61d3      	str	r3, [r2, #28]
 8006d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8006d8c <HAL_MspInit+0x5c>)
 8006d5c:	69db      	ldr	r3, [r3, #28]
 8006d5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d62:	607b      	str	r3, [r7, #4]
 8006d64:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8006d66:	4b0a      	ldr	r3, [pc, #40]	@ (8006d90 <HAL_MspInit+0x60>)
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	60fb      	str	r3, [r7, #12]
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8006d72:	60fb      	str	r3, [r7, #12]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006d7a:	60fb      	str	r3, [r7, #12]
 8006d7c:	4a04      	ldr	r2, [pc, #16]	@ (8006d90 <HAL_MspInit+0x60>)
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006d82:	bf00      	nop
 8006d84:	3714      	adds	r7, #20
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bc80      	pop	{r7}
 8006d8a:	4770      	bx	lr
 8006d8c:	40021000 	.word	0x40021000
 8006d90:	40010000 	.word	0x40010000

08006d94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006d94:	b480      	push	{r7}
 8006d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006d98:	bf00      	nop
 8006d9a:	e7fd      	b.n	8006d98 <NMI_Handler+0x4>

08006d9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006da0:	bf00      	nop
 8006da2:	e7fd      	b.n	8006da0 <HardFault_Handler+0x4>

08006da4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006da4:	b480      	push	{r7}
 8006da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006da8:	bf00      	nop
 8006daa:	e7fd      	b.n	8006da8 <MemManage_Handler+0x4>

08006dac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006dac:	b480      	push	{r7}
 8006dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006db0:	bf00      	nop
 8006db2:	e7fd      	b.n	8006db0 <BusFault_Handler+0x4>

08006db4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006db4:	b480      	push	{r7}
 8006db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006db8:	bf00      	nop
 8006dba:	e7fd      	b.n	8006db8 <UsageFault_Handler+0x4>

08006dbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006dc0:	bf00      	nop
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bc80      	pop	{r7}
 8006dc6:	4770      	bx	lr

08006dc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006dcc:	bf00      	nop
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bc80      	pop	{r7}
 8006dd2:	4770      	bx	lr

08006dd4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006dd8:	bf00      	nop
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bc80      	pop	{r7}
 8006dde:	4770      	bx	lr

08006de0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006de4:	f000 fc0c 	bl	8007600 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006de8:	bf00      	nop
 8006dea:	bd80      	pop	{r7, pc}

08006dec <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8006df0:	4802      	ldr	r0, [pc, #8]	@ (8006dfc <DMA1_Channel6_IRQHandler+0x10>)
 8006df2:	f000 fdad 	bl	8007950 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8006df6:	bf00      	nop
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	200002b0 	.word	0x200002b0

08006e00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006e00:	b480      	push	{r7}
 8006e02:	af00      	add	r7, sp, #0
  return 1;
 8006e04:	2301      	movs	r3, #1
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bc80      	pop	{r7}
 8006e0c:	4770      	bx	lr

08006e0e <_kill>:

int _kill(int pid, int sig)
{
 8006e0e:	b580      	push	{r7, lr}
 8006e10:	b082      	sub	sp, #8
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	6078      	str	r0, [r7, #4]
 8006e16:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8006e18:	f003 fa68 	bl	800a2ec <__errno>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	2216      	movs	r2, #22
 8006e20:	601a      	str	r2, [r3, #0]
  return -1;
 8006e22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	3708      	adds	r7, #8
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}

08006e2e <_exit>:

void _exit (int status)
{
 8006e2e:	b580      	push	{r7, lr}
 8006e30:	b082      	sub	sp, #8
 8006e32:	af00      	add	r7, sp, #0
 8006e34:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8006e36:	f04f 31ff 	mov.w	r1, #4294967295
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f7ff ffe7 	bl	8006e0e <_kill>
  while (1) {}    /* Make sure we hang here */
 8006e40:	bf00      	nop
 8006e42:	e7fd      	b.n	8006e40 <_exit+0x12>

08006e44 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b086      	sub	sp, #24
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	60f8      	str	r0, [r7, #12]
 8006e4c:	60b9      	str	r1, [r7, #8]
 8006e4e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006e50:	2300      	movs	r3, #0
 8006e52:	617b      	str	r3, [r7, #20]
 8006e54:	e00a      	b.n	8006e6c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006e56:	f3af 8000 	nop.w
 8006e5a:	4601      	mov	r1, r0
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	1c5a      	adds	r2, r3, #1
 8006e60:	60ba      	str	r2, [r7, #8]
 8006e62:	b2ca      	uxtb	r2, r1
 8006e64:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	3301      	adds	r3, #1
 8006e6a:	617b      	str	r3, [r7, #20]
 8006e6c:	697a      	ldr	r2, [r7, #20]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	429a      	cmp	r2, r3
 8006e72:	dbf0      	blt.n	8006e56 <_read+0x12>
  }

  return len;
 8006e74:	687b      	ldr	r3, [r7, #4]
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3718      	adds	r7, #24
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}

08006e7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006e7e:	b580      	push	{r7, lr}
 8006e80:	b086      	sub	sp, #24
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	60f8      	str	r0, [r7, #12]
 8006e86:	60b9      	str	r1, [r7, #8]
 8006e88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	617b      	str	r3, [r7, #20]
 8006e8e:	e009      	b.n	8006ea4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	1c5a      	adds	r2, r3, #1
 8006e94:	60ba      	str	r2, [r7, #8]
 8006e96:	781b      	ldrb	r3, [r3, #0]
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	3301      	adds	r3, #1
 8006ea2:	617b      	str	r3, [r7, #20]
 8006ea4:	697a      	ldr	r2, [r7, #20]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	dbf1      	blt.n	8006e90 <_write+0x12>
  }
  return len;
 8006eac:	687b      	ldr	r3, [r7, #4]
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3718      	adds	r7, #24
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}

08006eb6 <_close>:

int _close(int file)
{
 8006eb6:	b480      	push	{r7}
 8006eb8:	b083      	sub	sp, #12
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006ebe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	370c      	adds	r7, #12
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bc80      	pop	{r7}
 8006eca:	4770      	bx	lr

08006ecc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b083      	sub	sp, #12
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006edc:	605a      	str	r2, [r3, #4]
  return 0;
 8006ede:	2300      	movs	r3, #0
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	370c      	adds	r7, #12
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bc80      	pop	{r7}
 8006ee8:	4770      	bx	lr

08006eea <_isatty>:

int _isatty(int file)
{
 8006eea:	b480      	push	{r7}
 8006eec:	b083      	sub	sp, #12
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006ef2:	2301      	movs	r3, #1
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	370c      	adds	r7, #12
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bc80      	pop	{r7}
 8006efc:	4770      	bx	lr

08006efe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006efe:	b480      	push	{r7}
 8006f00:	b085      	sub	sp, #20
 8006f02:	af00      	add	r7, sp, #0
 8006f04:	60f8      	str	r0, [r7, #12]
 8006f06:	60b9      	str	r1, [r7, #8]
 8006f08:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006f0a:	2300      	movs	r3, #0
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3714      	adds	r7, #20
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bc80      	pop	{r7}
 8006f14:	4770      	bx	lr
	...

08006f18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b086      	sub	sp, #24
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006f20:	4a14      	ldr	r2, [pc, #80]	@ (8006f74 <_sbrk+0x5c>)
 8006f22:	4b15      	ldr	r3, [pc, #84]	@ (8006f78 <_sbrk+0x60>)
 8006f24:	1ad3      	subs	r3, r2, r3
 8006f26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006f2c:	4b13      	ldr	r3, [pc, #76]	@ (8006f7c <_sbrk+0x64>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d102      	bne.n	8006f3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006f34:	4b11      	ldr	r3, [pc, #68]	@ (8006f7c <_sbrk+0x64>)
 8006f36:	4a12      	ldr	r2, [pc, #72]	@ (8006f80 <_sbrk+0x68>)
 8006f38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006f3a:	4b10      	ldr	r3, [pc, #64]	@ (8006f7c <_sbrk+0x64>)
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	4413      	add	r3, r2
 8006f42:	693a      	ldr	r2, [r7, #16]
 8006f44:	429a      	cmp	r2, r3
 8006f46:	d207      	bcs.n	8006f58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006f48:	f003 f9d0 	bl	800a2ec <__errno>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	220c      	movs	r2, #12
 8006f50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006f52:	f04f 33ff 	mov.w	r3, #4294967295
 8006f56:	e009      	b.n	8006f6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006f58:	4b08      	ldr	r3, [pc, #32]	@ (8006f7c <_sbrk+0x64>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006f5e:	4b07      	ldr	r3, [pc, #28]	@ (8006f7c <_sbrk+0x64>)
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	4413      	add	r3, r2
 8006f66:	4a05      	ldr	r2, [pc, #20]	@ (8006f7c <_sbrk+0x64>)
 8006f68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3718      	adds	r7, #24
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}
 8006f74:	20005000 	.word	0x20005000
 8006f78:	00000400 	.word	0x00000400
 8006f7c:	20003f0c 	.word	0x20003f0c
 8006f80:	200040b8 	.word	0x200040b8

08006f84 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006f84:	b480      	push	{r7}
 8006f86:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006f88:	bf00      	nop
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bc80      	pop	{r7}
 8006f8e:	4770      	bx	lr

08006f90 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b08c      	sub	sp, #48	@ 0x30
 8006f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8006f96:	f107 030c 	add.w	r3, r7, #12
 8006f9a:	2224      	movs	r2, #36	@ 0x24
 8006f9c:	2100      	movs	r1, #0
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f003 f943 	bl	800a22a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006fa4:	1d3b      	adds	r3, r7, #4
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	601a      	str	r2, [r3, #0]
 8006faa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8006fac:	4b20      	ldr	r3, [pc, #128]	@ (8007030 <MX_TIM3_Init+0xa0>)
 8006fae:	4a21      	ldr	r2, [pc, #132]	@ (8007034 <MX_TIM3_Init+0xa4>)
 8006fb0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8006fb2:	4b1f      	ldr	r3, [pc, #124]	@ (8007030 <MX_TIM3_Init+0xa0>)
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006fb8:	4b1d      	ldr	r3, [pc, #116]	@ (8007030 <MX_TIM3_Init+0xa0>)
 8006fba:	2200      	movs	r2, #0
 8006fbc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8006fbe:	4b1c      	ldr	r3, [pc, #112]	@ (8007030 <MX_TIM3_Init+0xa0>)
 8006fc0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006fc4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006fc6:	4b1a      	ldr	r3, [pc, #104]	@ (8007030 <MX_TIM3_Init+0xa0>)
 8006fc8:	2200      	movs	r2, #0
 8006fca:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006fcc:	4b18      	ldr	r3, [pc, #96]	@ (8007030 <MX_TIM3_Init+0xa0>)
 8006fce:	2200      	movs	r2, #0
 8006fd0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006fea:	2301      	movs	r3, #1
 8006fec:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8006ff6:	f107 030c 	add.w	r3, r7, #12
 8006ffa:	4619      	mov	r1, r3
 8006ffc:	480c      	ldr	r0, [pc, #48]	@ (8007030 <MX_TIM3_Init+0xa0>)
 8006ffe:	f002 fd8e 	bl	8009b1e <HAL_TIM_Encoder_Init>
 8007002:	4603      	mov	r3, r0
 8007004:	2b00      	cmp	r3, #0
 8007006:	d001      	beq.n	800700c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8007008:	f7fa fde7 	bl	8001bda <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800700c:	2300      	movs	r3, #0
 800700e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007010:	2300      	movs	r3, #0
 8007012:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8007014:	1d3b      	adds	r3, r7, #4
 8007016:	4619      	mov	r1, r3
 8007018:	4805      	ldr	r0, [pc, #20]	@ (8007030 <MX_TIM3_Init+0xa0>)
 800701a:	f002 ff43 	bl	8009ea4 <HAL_TIMEx_MasterConfigSynchronization>
 800701e:	4603      	mov	r3, r0
 8007020:	2b00      	cmp	r3, #0
 8007022:	d001      	beq.n	8007028 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8007024:	f7fa fdd9 	bl	8001bda <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8007028:	bf00      	nop
 800702a:	3730      	adds	r7, #48	@ 0x30
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}
 8007030:	20003f10 	.word	0x20003f10
 8007034:	40000400 	.word	0x40000400

08007038 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b08a      	sub	sp, #40	@ 0x28
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007040:	f107 0314 	add.w	r3, r7, #20
 8007044:	2200      	movs	r2, #0
 8007046:	601a      	str	r2, [r3, #0]
 8007048:	605a      	str	r2, [r3, #4]
 800704a:	609a      	str	r2, [r3, #8]
 800704c:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM3)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a1e      	ldr	r2, [pc, #120]	@ (80070cc <HAL_TIM_Encoder_MspInit+0x94>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d135      	bne.n	80070c4 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007058:	4b1d      	ldr	r3, [pc, #116]	@ (80070d0 <HAL_TIM_Encoder_MspInit+0x98>)
 800705a:	69db      	ldr	r3, [r3, #28]
 800705c:	4a1c      	ldr	r2, [pc, #112]	@ (80070d0 <HAL_TIM_Encoder_MspInit+0x98>)
 800705e:	f043 0302 	orr.w	r3, r3, #2
 8007062:	61d3      	str	r3, [r2, #28]
 8007064:	4b1a      	ldr	r3, [pc, #104]	@ (80070d0 <HAL_TIM_Encoder_MspInit+0x98>)
 8007066:	69db      	ldr	r3, [r3, #28]
 8007068:	f003 0302 	and.w	r3, r3, #2
 800706c:	613b      	str	r3, [r7, #16]
 800706e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007070:	4b17      	ldr	r3, [pc, #92]	@ (80070d0 <HAL_TIM_Encoder_MspInit+0x98>)
 8007072:	699b      	ldr	r3, [r3, #24]
 8007074:	4a16      	ldr	r2, [pc, #88]	@ (80070d0 <HAL_TIM_Encoder_MspInit+0x98>)
 8007076:	f043 0308 	orr.w	r3, r3, #8
 800707a:	6193      	str	r3, [r2, #24]
 800707c:	4b14      	ldr	r3, [pc, #80]	@ (80070d0 <HAL_TIM_Encoder_MspInit+0x98>)
 800707e:	699b      	ldr	r3, [r3, #24]
 8007080:	f003 0308 	and.w	r3, r3, #8
 8007084:	60fb      	str	r3, [r7, #12]
 8007086:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Encoder_CH1_Pin|Encoder_CH2_Pin;
 8007088:	2330      	movs	r3, #48	@ 0x30
 800708a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800708c:	2300      	movs	r3, #0
 800708e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007090:	2300      	movs	r3, #0
 8007092:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007094:	f107 0314 	add.w	r3, r7, #20
 8007098:	4619      	mov	r1, r3
 800709a:	480e      	ldr	r0, [pc, #56]	@ (80070d4 <HAL_TIM_Encoder_MspInit+0x9c>)
 800709c:	f000 fd5e 	bl	8007b5c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 80070a0:	4b0d      	ldr	r3, [pc, #52]	@ (80070d8 <HAL_TIM_Encoder_MspInit+0xa0>)
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80070a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070a8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80070ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80070ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b0:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80070b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80070b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80070bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80070be:	4a06      	ldr	r2, [pc, #24]	@ (80070d8 <HAL_TIM_Encoder_MspInit+0xa0>)
 80070c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c2:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80070c4:	bf00      	nop
 80070c6:	3728      	adds	r7, #40	@ 0x28
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}
 80070cc:	40000400 	.word	0x40000400
 80070d0:	40021000 	.word	0x40021000
 80070d4:	40010c00 	.word	0x40010c00
 80070d8:	40010000 	.word	0x40010000

080070dc <lz77_decompress>:

#define Video_Basic_Addr 0x00000000 // Base address for video data
bool video_first_play;

int lz77_decompress(const uint8_t *input, size_t input_size, uint8_t *output, size_t output_size)
{
 80070dc:	b480      	push	{r7}
 80070de:	b08f      	sub	sp, #60	@ 0x3c
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	60f8      	str	r0, [r7, #12]
 80070e4:	60b9      	str	r1, [r7, #8]
 80070e6:	607a      	str	r2, [r7, #4]
 80070e8:	603b      	str	r3, [r7, #0]
    const uint8_t *input_end = input + input_size;
 80070ea:	68fa      	ldr	r2, [r7, #12]
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	4413      	add	r3, r2
 80070f0:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t *output_end = output + output_size;
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	4413      	add	r3, r2
 80070f8:	623b      	str	r3, [r7, #32]
    uint8_t *output_ptr = output;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	637b      	str	r3, [r7, #52]	@ 0x34

    while (input < input_end)
 80070fe:	e07d      	b.n	80071fc <lz77_decompress+0x120>
    {
        uint8_t flag = *input++;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	1c5a      	adds	r2, r3, #1
 8007104:	60fa      	str	r2, [r7, #12]
 8007106:	781b      	ldrb	r3, [r3, #0]
 8007108:	77fb      	strb	r3, [r7, #31]
        if (flag < 0x80)
 800710a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800710e:	2b00      	cmp	r3, #0
 8007110:	db25      	blt.n	800715e <lz77_decompress+0x82>
        {
            // Literal run
            size_t len = flag & 0x7F;
 8007112:	7ffb      	ldrb	r3, [r7, #31]
 8007114:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007118:	617b      	str	r3, [r7, #20]
            if (input + len > input_end || output_ptr + len > output_end)
 800711a:	68fa      	ldr	r2, [r7, #12]
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	4413      	add	r3, r2
 8007120:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007122:	429a      	cmp	r2, r3
 8007124:	d305      	bcc.n	8007132 <lz77_decompress+0x56>
 8007126:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	4413      	add	r3, r2
 800712c:	6a3a      	ldr	r2, [r7, #32]
 800712e:	429a      	cmp	r2, r3
 8007130:	d202      	bcs.n	8007138 <lz77_decompress+0x5c>
            {
                return -1; // Overflow check
 8007132:	f04f 33ff 	mov.w	r3, #4294967295
 8007136:	e069      	b.n	800720c <lz77_decompress+0x130>
            }
            for (size_t i = 0; i < len; i++)
 8007138:	2300      	movs	r3, #0
 800713a:	633b      	str	r3, [r7, #48]	@ 0x30
 800713c:	e00a      	b.n	8007154 <lz77_decompress+0x78>
            {
                *output_ptr++ = *input++;
 800713e:	68fa      	ldr	r2, [r7, #12]
 8007140:	1c53      	adds	r3, r2, #1
 8007142:	60fb      	str	r3, [r7, #12]
 8007144:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007146:	1c59      	adds	r1, r3, #1
 8007148:	6379      	str	r1, [r7, #52]	@ 0x34
 800714a:	7812      	ldrb	r2, [r2, #0]
 800714c:	701a      	strb	r2, [r3, #0]
            for (size_t i = 0; i < len; i++)
 800714e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007150:	3301      	adds	r3, #1
 8007152:	633b      	str	r3, [r7, #48]	@ 0x30
 8007154:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	429a      	cmp	r2, r3
 800715a:	d3f0      	bcc.n	800713e <lz77_decompress+0x62>
 800715c:	e04e      	b.n	80071fc <lz77_decompress+0x120>
            }
        }
        else
        {
            // Back reference
            if (input + 2 > input_end)
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	3302      	adds	r3, #2
 8007162:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007164:	429a      	cmp	r2, r3
 8007166:	d202      	bcs.n	800716e <lz77_decompress+0x92>
            {
                return -2; // Input overflow
 8007168:	f06f 0301 	mvn.w	r3, #1
 800716c:	e04e      	b.n	800720c <lz77_decompress+0x130>
            }
            uint16_t offset = ((flag & 0x7F) << 8) | *input++;
 800716e:	7ffb      	ldrb	r3, [r7, #31]
 8007170:	b21b      	sxth	r3, r3
 8007172:	021b      	lsls	r3, r3, #8
 8007174:	b21b      	sxth	r3, r3
 8007176:	f403 43fe 	and.w	r3, r3, #32512	@ 0x7f00
 800717a:	b21a      	sxth	r2, r3
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	1c59      	adds	r1, r3, #1
 8007180:	60f9      	str	r1, [r7, #12]
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	b21b      	sxth	r3, r3
 8007186:	4313      	orrs	r3, r2
 8007188:	b21b      	sxth	r3, r3
 800718a:	83bb      	strh	r3, [r7, #28]
            offset += 1; // Offset starts from 1
 800718c:	8bbb      	ldrh	r3, [r7, #28]
 800718e:	3301      	adds	r3, #1
 8007190:	83bb      	strh	r3, [r7, #28]
            uint8_t length = *input++;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	1c5a      	adds	r2, r3, #1
 8007196:	60fa      	str	r2, [r7, #12]
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	76fb      	strb	r3, [r7, #27]
            if (length == 0 || offset > (size_t)(output_ptr - output))
 800719c:	7efb      	ldrb	r3, [r7, #27]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d005      	beq.n	80071ae <lz77_decompress+0xd2>
 80071a2:	8bbb      	ldrh	r3, [r7, #28]
 80071a4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80071a6:	687a      	ldr	r2, [r7, #4]
 80071a8:	1a8a      	subs	r2, r1, r2
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d902      	bls.n	80071b4 <lz77_decompress+0xd8>
            {
                return -3; // Invalid length or offset
 80071ae:	f06f 0302 	mvn.w	r3, #2
 80071b2:	e02b      	b.n	800720c <lz77_decompress+0x130>
            }
            uint8_t *src = output_ptr - offset;
 80071b4:	8bbb      	ldrh	r3, [r7, #28]
 80071b6:	425b      	negs	r3, r3
 80071b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80071ba:	4413      	add	r3, r2
 80071bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
            if (output_ptr + length > output_end)
 80071be:	7efb      	ldrb	r3, [r7, #27]
 80071c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80071c2:	4413      	add	r3, r2
 80071c4:	6a3a      	ldr	r2, [r7, #32]
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d202      	bcs.n	80071d0 <lz77_decompress+0xf4>
            {
                return -4; // Output overflow
 80071ca:	f06f 0303 	mvn.w	r3, #3
 80071ce:	e01d      	b.n	800720c <lz77_decompress+0x130>
            }
            for (uint8_t i = 0; i < length; i++)
 80071d0:	2300      	movs	r3, #0
 80071d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071d6:	e00c      	b.n	80071f2 <lz77_decompress+0x116>
            {
                *output_ptr++ = *src++;
 80071d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80071da:	1c53      	adds	r3, r2, #1
 80071dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80071de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071e0:	1c59      	adds	r1, r3, #1
 80071e2:	6379      	str	r1, [r7, #52]	@ 0x34
 80071e4:	7812      	ldrb	r2, [r2, #0]
 80071e6:	701a      	strb	r2, [r3, #0]
            for (uint8_t i = 0; i < length; i++)
 80071e8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80071ec:	3301      	adds	r3, #1
 80071ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071f2:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80071f6:	7efb      	ldrb	r3, [r7, #27]
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d3ed      	bcc.n	80071d8 <lz77_decompress+0xfc>
    while (input < input_end)
 80071fc:	68fa      	ldr	r2, [r7, #12]
 80071fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007200:	429a      	cmp	r2, r3
 8007202:	f4ff af7d 	bcc.w	8007100 <lz77_decompress+0x24>
            }
        }
    }
    return (int)(output_ptr - output);
 8007206:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	1ad3      	subs	r3, r2, r3
}
 800720c:	4618      	mov	r0, r3
 800720e:	373c      	adds	r7, #60	@ 0x3c
 8007210:	46bd      	mov	sp, r7
 8007212:	bc80      	pop	{r7}
 8007214:	4770      	bx	lr
	...

08007218 <display_frame_oled>:

// Declare the goodapple data if not in goodapple.h (it should be)
// extern const unsigned char goodapple[]; // Ensure this is available

void display_frame_oled(unsigned char *frame)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b086      	sub	sp, #24
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
    // OLED_ClearBuffer();
    for (int i = 0; i < 114 * 64; i++)
 8007220:	2300      	movs	r3, #0
 8007222:	617b      	str	r3, [r7, #20]
 8007224:	e03d      	b.n	80072a2 <display_frame_oled+0x8a>
    { // Assuming OLED is 128x64, video is 114x64
        bool pixel = (frame[i / 8] & (1 << (i % 8))) != 0;
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	2b00      	cmp	r3, #0
 800722a:	da00      	bge.n	800722e <display_frame_oled+0x16>
 800722c:	3307      	adds	r3, #7
 800722e:	10db      	asrs	r3, r3, #3
 8007230:	461a      	mov	r2, r3
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	4413      	add	r3, r2
 8007236:	781b      	ldrb	r3, [r3, #0]
 8007238:	461a      	mov	r2, r3
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	f003 0307 	and.w	r3, r3, #7
 8007240:	fa42 f303 	asr.w	r3, r2, r3
 8007244:	f003 0301 	and.w	r3, r3, #1
 8007248:	2b00      	cmp	r3, #0
 800724a:	bf14      	ite	ne
 800724c:	2301      	movne	r3, #1
 800724e:	2300      	moveq	r3, #0
 8007250:	74fb      	strb	r3, [r7, #19]
        // Adjust x-coordinate to center the 114-width video on a 128-width screen
        int x = (i % 114) + (OLED_WIDTH - 114) / 2;
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	4a17      	ldr	r2, [pc, #92]	@ (80072b4 <display_frame_oled+0x9c>)
 8007256:	fb82 1203 	smull	r1, r2, r2, r3
 800725a:	441a      	add	r2, r3
 800725c:	1191      	asrs	r1, r2, #6
 800725e:	17da      	asrs	r2, r3, #31
 8007260:	1a8a      	subs	r2, r1, r2
 8007262:	2172      	movs	r1, #114	@ 0x72
 8007264:	fb01 f202 	mul.w	r2, r1, r2
 8007268:	1a9a      	subs	r2, r3, r2
 800726a:	1dd3      	adds	r3, r2, #7
 800726c:	60fb      	str	r3, [r7, #12]
        int y = i / 114;
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	4a10      	ldr	r2, [pc, #64]	@ (80072b4 <display_frame_oled+0x9c>)
 8007272:	fb82 1203 	smull	r1, r2, r2, r3
 8007276:	441a      	add	r2, r3
 8007278:	1192      	asrs	r2, r2, #6
 800727a:	17db      	asrs	r3, r3, #31
 800727c:	1ad3      	subs	r3, r2, r3
 800727e:	60bb      	str	r3, [r7, #8]
        if (x < OLED_WIDTH && y < OLED_HEIGHT)
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2b7f      	cmp	r3, #127	@ 0x7f
 8007284:	dc0a      	bgt.n	800729c <display_frame_oled+0x84>
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	2b3f      	cmp	r3, #63	@ 0x3f
 800728a:	dc07      	bgt.n	800729c <display_frame_oled+0x84>
        {                                         // Boundary check
            OLED_WritePixel(x, y, pixel ? 1 : 0); // Draw pixel (1 for white, 0 for black)
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	b21b      	sxth	r3, r3
 8007290:	68ba      	ldr	r2, [r7, #8]
 8007292:	b211      	sxth	r1, r2
 8007294:	7cfa      	ldrb	r2, [r7, #19]
 8007296:	4618      	mov	r0, r3
 8007298:	f7fa fdf2 	bl	8001e80 <OLED_WritePixel>
    for (int i = 0; i < 114 * 64; i++)
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	3301      	adds	r3, #1
 80072a0:	617b      	str	r3, [r7, #20]
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	f5b3 5fe4 	cmp.w	r3, #7296	@ 0x1c80
 80072a8:	dbbd      	blt.n	8007226 <display_frame_oled+0xe>
        }
    }
    // OLED_SmartUpdate();
}
 80072aa:	bf00      	nop
 80072ac:	bf00      	nop
 80072ae:	3718      	adds	r7, #24
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}
 80072b4:	8fb823ef 	.word	0x8fb823ef

080072b8 <video_player_init>:

void video_player_init()
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	af00      	add	r7, sp, #0
    W25Q64_Read(Video_Basic_Addr, (uint8_t *)&total_frames, sizeof(total_frames)); // Read the frame count from the flash memory, cast to uint8_t* and use sizeof
 80072bc:	2204      	movs	r2, #4
 80072be:	4904      	ldr	r1, [pc, #16]	@ (80072d0 <video_player_init+0x18>)
 80072c0:	2000      	movs	r0, #0
 80072c2:	f7f9 facb 	bl	800085c <W25Q64_Read>
    current_frame_index = 0;
 80072c6:	4b03      	ldr	r3, [pc, #12]	@ (80072d4 <video_player_init+0x1c>)
 80072c8:	2200      	movs	r2, #0
 80072ca:	601a      	str	r2, [r3, #0]
}
 80072cc:	bf00      	nop
 80072ce:	bd80      	pop	{r7, pc}
 80072d0:	20003f60 	.word	0x20003f60
 80072d4:	20003f5c 	.word	0x20003f5c

080072d8 <play_video>:

void play_video()
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	f5ad 7d66 	sub.w	sp, sp, #920	@ 0x398
 80072de:	af00      	add	r7, sp, #0
    static uint16_t LastCount_video = 0;


    if (video_first_play)
 80072e0:	4b28      	ldr	r3, [pc, #160]	@ (8007384 <play_video+0xac>)
 80072e2:	781b      	ldrb	r3, [r3, #0]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d008      	beq.n	80072fa <play_video+0x22>
    {
        video_first_play = false;
 80072e8:	4b26      	ldr	r3, [pc, #152]	@ (8007384 <play_video+0xac>)
 80072ea:	2200      	movs	r2, #0
 80072ec:	701a      	strb	r2, [r3, #0]
        LastCount_video = count; // Initialize LastCount_video
 80072ee:	4b26      	ldr	r3, [pc, #152]	@ (8007388 <play_video+0xb0>)
 80072f0:	881a      	ldrh	r2, [r3, #0]
 80072f2:	4b26      	ldr	r3, [pc, #152]	@ (800738c <play_video+0xb4>)
 80072f4:	801a      	strh	r2, [r3, #0]
        video_player_init();
 80072f6:	f7ff ffdf 	bl	80072b8 <video_player_init>
    }


    unsigned char frame_buffer[920]; // Buffer for one decompressed frame (114*64/8 = 912, rounded up)

    if (total_frames == 0)
 80072fa:	4b25      	ldr	r3, [pc, #148]	@ (8007390 <play_video+0xb8>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d101      	bne.n	8007306 <play_video+0x2e>
    {
        video_player_init();
 8007302:	f7ff ffd9 	bl	80072b8 <video_player_init>
    }

    if (current_frame_index >= total_frames)
 8007306:	4b23      	ldr	r3, [pc, #140]	@ (8007394 <play_video+0xbc>)
 8007308:	681a      	ldr	r2, [r3, #0]
 800730a:	4b21      	ldr	r3, [pc, #132]	@ (8007390 <play_video+0xb8>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	429a      	cmp	r2, r3
 8007310:	d302      	bcc.n	8007318 <play_video+0x40>
    {
        current_frame_index = 0;
 8007312:	4b20      	ldr	r3, [pc, #128]	@ (8007394 <play_video+0xbc>)
 8007314:	2200      	movs	r2, #0
 8007316:	601a      	str	r2, [r3, #0]
    }

    get_target_frame_index(current_frame_index, frame_buffer, sizeof(frame_buffer));
 8007318:	4b1e      	ldr	r3, [pc, #120]	@ (8007394 <play_video+0xbc>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4639      	mov	r1, r7
 800731e:	f44f 7266 	mov.w	r2, #920	@ 0x398
 8007322:	4618      	mov	r0, r3
 8007324:	f000 f880 	bl	8007428 <get_target_frame_index>

    display_frame_oled(frame_buffer);
 8007328:	463b      	mov	r3, r7
 800732a:	4618      	mov	r0, r3
 800732c:	f7ff ff74 	bl	8007218 <display_frame_oled>

    current_frame_index++;
 8007330:	4b18      	ldr	r3, [pc, #96]	@ (8007394 <play_video+0xbc>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	3301      	adds	r3, #1
 8007336:	4a17      	ldr	r2, [pc, #92]	@ (8007394 <play_video+0xbc>)
 8007338:	6013      	str	r3, [r2, #0]

    if(count - LastCount_video >= 2)
 800733a:	4b13      	ldr	r3, [pc, #76]	@ (8007388 <play_video+0xb0>)
 800733c:	881b      	ldrh	r3, [r3, #0]
 800733e:	461a      	mov	r2, r3
 8007340:	4b12      	ldr	r3, [pc, #72]	@ (800738c <play_video+0xb4>)
 8007342:	881b      	ldrh	r3, [r3, #0]
 8007344:	1ad3      	subs	r3, r2, r3
 8007346:	2b01      	cmp	r3, #1
 8007348:	dd07      	ble.n	800735a <play_video+0x82>
    {
        video_fast_forward(10);
 800734a:	200a      	movs	r0, #10
 800734c:	f000 f824 	bl	8007398 <video_fast_forward>
        LastCount_video = count;
 8007350:	4b0d      	ldr	r3, [pc, #52]	@ (8007388 <play_video+0xb0>)
 8007352:	881a      	ldrh	r2, [r3, #0]
 8007354:	4b0d      	ldr	r3, [pc, #52]	@ (800738c <play_video+0xb4>)
 8007356:	801a      	strh	r2, [r3, #0]
    }
  

    // 退出视频播放状态在这里！
    /*code here*/
}
 8007358:	e00f      	b.n	800737a <play_video+0xa2>
    else if (count - LastCount_video <= -2)
 800735a:	4b0b      	ldr	r3, [pc, #44]	@ (8007388 <play_video+0xb0>)
 800735c:	881b      	ldrh	r3, [r3, #0]
 800735e:	461a      	mov	r2, r3
 8007360:	4b0a      	ldr	r3, [pc, #40]	@ (800738c <play_video+0xb4>)
 8007362:	881b      	ldrh	r3, [r3, #0]
 8007364:	1ad3      	subs	r3, r2, r3
 8007366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800736a:	da06      	bge.n	800737a <play_video+0xa2>
        video_rewind(10);
 800736c:	200a      	movs	r0, #10
 800736e:	f000 f837 	bl	80073e0 <video_rewind>
        LastCount_video = count;
 8007372:	4b05      	ldr	r3, [pc, #20]	@ (8007388 <play_video+0xb0>)
 8007374:	881a      	ldrh	r2, [r3, #0]
 8007376:	4b05      	ldr	r3, [pc, #20]	@ (800738c <play_video+0xb4>)
 8007378:	801a      	strh	r2, [r3, #0]
}
 800737a:	bf00      	nop
 800737c:	f507 7766 	add.w	r7, r7, #920	@ 0x398
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}
 8007384:	20003f58 	.word	0x20003f58
 8007388:	200002f4 	.word	0x200002f4
 800738c:	20003f64 	.word	0x20003f64
 8007390:	20003f60 	.word	0x20003f60
 8007394:	20003f5c 	.word	0x20003f5c

08007398 <video_fast_forward>:

void video_fast_forward(int frames_to_skip)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b082      	sub	sp, #8
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
    if (total_frames == 0)
 80073a0:	4b0d      	ldr	r3, [pc, #52]	@ (80073d8 <video_fast_forward+0x40>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d101      	bne.n	80073ac <video_fast_forward+0x14>
        video_player_init(); // Ensure total_frames is initialized
 80073a8:	f7ff ff86 	bl	80072b8 <video_player_init>
    current_frame_index += frames_to_skip;
 80073ac:	4b0b      	ldr	r3, [pc, #44]	@ (80073dc <video_fast_forward+0x44>)
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	4413      	add	r3, r2
 80073b4:	4a09      	ldr	r2, [pc, #36]	@ (80073dc <video_fast_forward+0x44>)
 80073b6:	6013      	str	r3, [r2, #0]
    if (current_frame_index >= total_frames)
 80073b8:	4b08      	ldr	r3, [pc, #32]	@ (80073dc <video_fast_forward+0x44>)
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	4b06      	ldr	r3, [pc, #24]	@ (80073d8 <video_fast_forward+0x40>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d304      	bcc.n	80073ce <video_fast_forward+0x36>
    {
        current_frame_index = total_frames - 1; // Go to last frame
 80073c4:	4b04      	ldr	r3, [pc, #16]	@ (80073d8 <video_fast_forward+0x40>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	3b01      	subs	r3, #1
 80073ca:	4a04      	ldr	r2, [pc, #16]	@ (80073dc <video_fast_forward+0x44>)
 80073cc:	6013      	str	r3, [r2, #0]
    }
    if (current_frame_index < 0) // Should not happen with fast forward, but good practice
    {
        current_frame_index = 0;
    }
}
 80073ce:	bf00      	nop
 80073d0:	3708      	adds	r7, #8
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	bf00      	nop
 80073d8:	20003f60 	.word	0x20003f60
 80073dc:	20003f5c 	.word	0x20003f5c

080073e0 <video_rewind>:

void video_rewind(int frames_to_skip)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b082      	sub	sp, #8
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
    if (total_frames == 0)
 80073e8:	4b0d      	ldr	r3, [pc, #52]	@ (8007420 <video_rewind+0x40>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d101      	bne.n	80073f4 <video_rewind+0x14>
        video_player_init(); // Ensure total_frames is initialized
 80073f0:	f7ff ff62 	bl	80072b8 <video_player_init>

    if ((int)current_frame_index - frames_to_skip < 0) // Check before subtraction to prevent underflow with unsigned int
 80073f4:	4b0b      	ldr	r3, [pc, #44]	@ (8007424 <video_rewind+0x44>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	461a      	mov	r2, r3
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	1ad3      	subs	r3, r2, r3
 80073fe:	2b00      	cmp	r3, #0
 8007400:	da03      	bge.n	800740a <video_rewind+0x2a>
    {
        current_frame_index = 0; // Go to first frame
 8007402:	4b08      	ldr	r3, [pc, #32]	@ (8007424 <video_rewind+0x44>)
 8007404:	2200      	movs	r2, #0
 8007406:	601a      	str	r2, [r3, #0]
    }
    else
    {
        current_frame_index -= frames_to_skip;
    }
}
 8007408:	e005      	b.n	8007416 <video_rewind+0x36>
        current_frame_index -= frames_to_skip;
 800740a:	4b06      	ldr	r3, [pc, #24]	@ (8007424 <video_rewind+0x44>)
 800740c:	681a      	ldr	r2, [r3, #0]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	1ad3      	subs	r3, r2, r3
 8007412:	4a04      	ldr	r2, [pc, #16]	@ (8007424 <video_rewind+0x44>)
 8007414:	6013      	str	r3, [r2, #0]
}
 8007416:	bf00      	nop
 8007418:	3708      	adds	r7, #8
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
 800741e:	bf00      	nop
 8007420:	20003f60 	.word	0x20003f60
 8007424:	20003f5c 	.word	0x20003f5c

08007428 <get_target_frame_index>:
        current_frame_index = 0;
    }
}

int get_target_frame_index(unsigned int index, uint8_t *dst, size_t output_size)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	f5ad 7d70 	sub.w	sp, sp, #960	@ 0x3c0
 800742e:	af00      	add	r7, sp, #0
 8007430:	f507 7370 	add.w	r3, r7, #960	@ 0x3c0
 8007434:	f5a3 736d 	sub.w	r3, r3, #948	@ 0x3b4
 8007438:	6018      	str	r0, [r3, #0]
 800743a:	f507 7370 	add.w	r3, r7, #960	@ 0x3c0
 800743e:	f5a3 736e 	sub.w	r3, r3, #952	@ 0x3b8
 8007442:	6019      	str	r1, [r3, #0]
 8007444:	f507 7370 	add.w	r3, r7, #960	@ 0x3c0
 8007448:	f5a3 736f 	sub.w	r3, r3, #956	@ 0x3bc
 800744c:	601a      	str	r2, [r3, #0]
    unsigned char temp[920];
    uint32_t compressed_length;
    uint32_t picture_start_offset;
    uint32_t total_frames_from_flash;

    W25Q64_Read(Video_Basic_Addr, (uint8_t *)&total_frames_from_flash, sizeof(total_frames_from_flash));
 800744e:	f107 0310 	add.w	r3, r7, #16
 8007452:	2204      	movs	r2, #4
 8007454:	4619      	mov	r1, r3
 8007456:	2000      	movs	r0, #0
 8007458:	f7f9 fa00 	bl	800085c <W25Q64_Read>
    picture_start_offset = sizeof(uint32_t) + (total_frames_from_flash + 1) * sizeof(uint32_t);
 800745c:	f507 7370 	add.w	r3, r7, #960	@ 0x3c0
 8007460:	f5a3 736c 	sub.w	r3, r3, #944	@ 0x3b0
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	3302      	adds	r3, #2
 8007468:	009b      	lsls	r3, r3, #2
 800746a:	f8c7 33bc 	str.w	r3, [r7, #956]	@ 0x3bc
    W25Q64_Read(Video_Basic_Addr + sizeof(uint32_t) + (index * sizeof(uint32_t)), (uint8_t *)&target_ptr_val, sizeof(target_ptr_val));
 800746e:	f507 7370 	add.w	r3, r7, #960	@ 0x3c0
 8007472:	f5a3 736d 	sub.w	r3, r3, #948	@ 0x3b4
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	3301      	adds	r3, #1
 800747a:	009b      	lsls	r3, r3, #2
 800747c:	f507 716c 	add.w	r1, r7, #944	@ 0x3b0
 8007480:	2204      	movs	r2, #4
 8007482:	4618      	mov	r0, r3
 8007484:	f7f9 f9ea 	bl	800085c <W25Q64_Read>
    W25Q64_Read(Video_Basic_Addr + sizeof(uint32_t) + ((index + 1) * sizeof(uint32_t)), (uint8_t *)&next_ptr_val, sizeof(next_ptr_val));
 8007488:	f507 7370 	add.w	r3, r7, #960	@ 0x3c0
 800748c:	f5a3 736d 	sub.w	r3, r3, #948	@ 0x3b4
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	3302      	adds	r3, #2
 8007494:	009b      	lsls	r3, r3, #2
 8007496:	f507 716b 	add.w	r1, r7, #940	@ 0x3ac
 800749a:	2204      	movs	r2, #4
 800749c:	4618      	mov	r0, r3
 800749e:	f7f9 f9dd 	bl	800085c <W25Q64_Read>

    compressed_length = next_ptr_val - target_ptr_val;
 80074a2:	f8d7 23ac 	ldr.w	r2, [r7, #940]	@ 0x3ac
 80074a6:	f8d7 33b0 	ldr.w	r3, [r7, #944]	@ 0x3b0
 80074aa:	1ad3      	subs	r3, r2, r3
 80074ac:	f8c7 33b8 	str.w	r3, [r7, #952]	@ 0x3b8

    if (compressed_length == 0)
 80074b0:	f8d7 33b8 	ldr.w	r3, [r7, #952]	@ 0x3b8
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d101      	bne.n	80074bc <get_target_frame_index+0x94>
    {
        return 0;
 80074b8:	2300      	movs	r3, #0
 80074ba:	e030      	b.n	800751e <get_target_frame_index+0xf6>
    }
    if (next_ptr_val < target_ptr_val)
 80074bc:	f8d7 23ac 	ldr.w	r2, [r7, #940]	@ 0x3ac
 80074c0:	f8d7 33b0 	ldr.w	r3, [r7, #944]	@ 0x3b0
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d202      	bcs.n	80074ce <get_target_frame_index+0xa6>
    {
        return -2;
 80074c8:	f06f 0301 	mvn.w	r3, #1
 80074cc:	e027      	b.n	800751e <get_target_frame_index+0xf6>
    }
    if (compressed_length > sizeof(temp))
 80074ce:	f8d7 33b8 	ldr.w	r3, [r7, #952]	@ 0x3b8
 80074d2:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 80074d6:	d902      	bls.n	80074de <get_target_frame_index+0xb6>
    {
        return -1;
 80074d8:	f04f 33ff 	mov.w	r3, #4294967295
 80074dc:	e01f      	b.n	800751e <get_target_frame_index+0xf6>
    }

    W25Q64_Read(Video_Basic_Addr + picture_start_offset + target_ptr_val, temp, compressed_length);
 80074de:	f8d7 23b0 	ldr.w	r2, [r7, #944]	@ 0x3b0
 80074e2:	f8d7 33bc 	ldr.w	r3, [r7, #956]	@ 0x3bc
 80074e6:	4413      	add	r3, r2
 80074e8:	f107 0114 	add.w	r1, r7, #20
 80074ec:	f8d7 23b8 	ldr.w	r2, [r7, #952]	@ 0x3b8
 80074f0:	4618      	mov	r0, r3
 80074f2:	f7f9 f9b3 	bl	800085c <W25Q64_Read>

    int decompressed_bytes = lz77_decompress(temp, compressed_length, dst, output_size);
 80074f6:	f507 7370 	add.w	r3, r7, #960	@ 0x3c0
 80074fa:	f5a3 736f 	sub.w	r3, r3, #956	@ 0x3bc
 80074fe:	f507 7270 	add.w	r2, r7, #960	@ 0x3c0
 8007502:	f5a2 726e 	sub.w	r2, r2, #952	@ 0x3b8
 8007506:	f107 0014 	add.w	r0, r7, #20
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	6812      	ldr	r2, [r2, #0]
 800750e:	f8d7 13b8 	ldr.w	r1, [r7, #952]	@ 0x3b8
 8007512:	f7ff fde3 	bl	80070dc <lz77_decompress>
 8007516:	f8c7 03b4 	str.w	r0, [r7, #948]	@ 0x3b4
    return decompressed_bytes;
 800751a:	f8d7 33b4 	ldr.w	r3, [r7, #948]	@ 0x3b4
}
 800751e:	4618      	mov	r0, r3
 8007520:	f507 7770 	add.w	r7, r7, #960	@ 0x3c0
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}

08007528 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8007528:	f7ff fd2c 	bl	8006f84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800752c:	480b      	ldr	r0, [pc, #44]	@ (800755c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800752e:	490c      	ldr	r1, [pc, #48]	@ (8007560 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8007530:	4a0c      	ldr	r2, [pc, #48]	@ (8007564 <LoopFillZerobss+0x16>)
  movs r3, #0
 8007532:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007534:	e002      	b.n	800753c <LoopCopyDataInit>

08007536 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007536:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007538:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800753a:	3304      	adds	r3, #4

0800753c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800753c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800753e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007540:	d3f9      	bcc.n	8007536 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007542:	4a09      	ldr	r2, [pc, #36]	@ (8007568 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8007544:	4c09      	ldr	r4, [pc, #36]	@ (800756c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8007546:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007548:	e001      	b.n	800754e <LoopFillZerobss>

0800754a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800754a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800754c:	3204      	adds	r2, #4

0800754e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800754e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007550:	d3fb      	bcc.n	800754a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8007552:	f002 fed1 	bl	800a2f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8007556:	f7fa fa7f 	bl	8001a58 <main>
  bx lr
 800755a:	4770      	bx	lr
  ldr r0, =_sdata
 800755c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007560:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8007564:	0800d278 	.word	0x0800d278
  ldr r2, =_sbss
 8007568:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800756c:	200040b8 	.word	0x200040b8

08007570 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007570:	e7fe      	b.n	8007570 <ADC1_2_IRQHandler>
	...

08007574 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007578:	4b08      	ldr	r3, [pc, #32]	@ (800759c <HAL_Init+0x28>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a07      	ldr	r2, [pc, #28]	@ (800759c <HAL_Init+0x28>)
 800757e:	f043 0310 	orr.w	r3, r3, #16
 8007582:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007584:	2003      	movs	r0, #3
 8007586:	f000 f947 	bl	8007818 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800758a:	200f      	movs	r0, #15
 800758c:	f000 f808 	bl	80075a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007590:	f7ff fbce 	bl	8006d30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007594:	2300      	movs	r3, #0
}
 8007596:	4618      	mov	r0, r3
 8007598:	bd80      	pop	{r7, pc}
 800759a:	bf00      	nop
 800759c:	40022000 	.word	0x40022000

080075a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b082      	sub	sp, #8
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80075a8:	4b12      	ldr	r3, [pc, #72]	@ (80075f4 <HAL_InitTick+0x54>)
 80075aa:	681a      	ldr	r2, [r3, #0]
 80075ac:	4b12      	ldr	r3, [pc, #72]	@ (80075f8 <HAL_InitTick+0x58>)
 80075ae:	781b      	ldrb	r3, [r3, #0]
 80075b0:	4619      	mov	r1, r3
 80075b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80075b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80075ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80075be:	4618      	mov	r0, r3
 80075c0:	f000 f95f 	bl	8007882 <HAL_SYSTICK_Config>
 80075c4:	4603      	mov	r3, r0
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d001      	beq.n	80075ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80075ca:	2301      	movs	r3, #1
 80075cc:	e00e      	b.n	80075ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2b0f      	cmp	r3, #15
 80075d2:	d80a      	bhi.n	80075ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80075d4:	2200      	movs	r2, #0
 80075d6:	6879      	ldr	r1, [r7, #4]
 80075d8:	f04f 30ff 	mov.w	r0, #4294967295
 80075dc:	f000 f927 	bl	800782e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80075e0:	4a06      	ldr	r2, [pc, #24]	@ (80075fc <HAL_InitTick+0x5c>)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80075e6:	2300      	movs	r3, #0
 80075e8:	e000      	b.n	80075ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80075ea:	2301      	movs	r3, #1
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3708      	adds	r7, #8
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}
 80075f4:	20000008 	.word	0x20000008
 80075f8:	20000010 	.word	0x20000010
 80075fc:	2000000c 	.word	0x2000000c

08007600 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007600:	b480      	push	{r7}
 8007602:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007604:	4b05      	ldr	r3, [pc, #20]	@ (800761c <HAL_IncTick+0x1c>)
 8007606:	781b      	ldrb	r3, [r3, #0]
 8007608:	461a      	mov	r2, r3
 800760a:	4b05      	ldr	r3, [pc, #20]	@ (8007620 <HAL_IncTick+0x20>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4413      	add	r3, r2
 8007610:	4a03      	ldr	r2, [pc, #12]	@ (8007620 <HAL_IncTick+0x20>)
 8007612:	6013      	str	r3, [r2, #0]
}
 8007614:	bf00      	nop
 8007616:	46bd      	mov	sp, r7
 8007618:	bc80      	pop	{r7}
 800761a:	4770      	bx	lr
 800761c:	20000010 	.word	0x20000010
 8007620:	20003f68 	.word	0x20003f68

08007624 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007624:	b480      	push	{r7}
 8007626:	af00      	add	r7, sp, #0
  return uwTick;
 8007628:	4b02      	ldr	r3, [pc, #8]	@ (8007634 <HAL_GetTick+0x10>)
 800762a:	681b      	ldr	r3, [r3, #0]
}
 800762c:	4618      	mov	r0, r3
 800762e:	46bd      	mov	sp, r7
 8007630:	bc80      	pop	{r7}
 8007632:	4770      	bx	lr
 8007634:	20003f68 	.word	0x20003f68

08007638 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b084      	sub	sp, #16
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007640:	f7ff fff0 	bl	8007624 <HAL_GetTick>
 8007644:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007650:	d005      	beq.n	800765e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007652:	4b0a      	ldr	r3, [pc, #40]	@ (800767c <HAL_Delay+0x44>)
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	461a      	mov	r2, r3
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	4413      	add	r3, r2
 800765c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800765e:	bf00      	nop
 8007660:	f7ff ffe0 	bl	8007624 <HAL_GetTick>
 8007664:	4602      	mov	r2, r0
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	1ad3      	subs	r3, r2, r3
 800766a:	68fa      	ldr	r2, [r7, #12]
 800766c:	429a      	cmp	r2, r3
 800766e:	d8f7      	bhi.n	8007660 <HAL_Delay+0x28>
  {
  }
}
 8007670:	bf00      	nop
 8007672:	bf00      	nop
 8007674:	3710      	adds	r7, #16
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}
 800767a:	bf00      	nop
 800767c:	20000010 	.word	0x20000010

08007680 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007680:	b480      	push	{r7}
 8007682:	b085      	sub	sp, #20
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f003 0307 	and.w	r3, r3, #7
 800768e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007690:	4b0c      	ldr	r3, [pc, #48]	@ (80076c4 <__NVIC_SetPriorityGrouping+0x44>)
 8007692:	68db      	ldr	r3, [r3, #12]
 8007694:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007696:	68ba      	ldr	r2, [r7, #8]
 8007698:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800769c:	4013      	ands	r3, r2
 800769e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80076a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80076ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80076b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80076b2:	4a04      	ldr	r2, [pc, #16]	@ (80076c4 <__NVIC_SetPriorityGrouping+0x44>)
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	60d3      	str	r3, [r2, #12]
}
 80076b8:	bf00      	nop
 80076ba:	3714      	adds	r7, #20
 80076bc:	46bd      	mov	sp, r7
 80076be:	bc80      	pop	{r7}
 80076c0:	4770      	bx	lr
 80076c2:	bf00      	nop
 80076c4:	e000ed00 	.word	0xe000ed00

080076c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80076c8:	b480      	push	{r7}
 80076ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80076cc:	4b04      	ldr	r3, [pc, #16]	@ (80076e0 <__NVIC_GetPriorityGrouping+0x18>)
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	0a1b      	lsrs	r3, r3, #8
 80076d2:	f003 0307 	and.w	r3, r3, #7
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	46bd      	mov	sp, r7
 80076da:	bc80      	pop	{r7}
 80076dc:	4770      	bx	lr
 80076de:	bf00      	nop
 80076e0:	e000ed00 	.word	0xe000ed00

080076e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b083      	sub	sp, #12
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	4603      	mov	r3, r0
 80076ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80076ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	db0b      	blt.n	800770e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80076f6:	79fb      	ldrb	r3, [r7, #7]
 80076f8:	f003 021f 	and.w	r2, r3, #31
 80076fc:	4906      	ldr	r1, [pc, #24]	@ (8007718 <__NVIC_EnableIRQ+0x34>)
 80076fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007702:	095b      	lsrs	r3, r3, #5
 8007704:	2001      	movs	r0, #1
 8007706:	fa00 f202 	lsl.w	r2, r0, r2
 800770a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800770e:	bf00      	nop
 8007710:	370c      	adds	r7, #12
 8007712:	46bd      	mov	sp, r7
 8007714:	bc80      	pop	{r7}
 8007716:	4770      	bx	lr
 8007718:	e000e100 	.word	0xe000e100

0800771c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800771c:	b480      	push	{r7}
 800771e:	b083      	sub	sp, #12
 8007720:	af00      	add	r7, sp, #0
 8007722:	4603      	mov	r3, r0
 8007724:	6039      	str	r1, [r7, #0]
 8007726:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800772c:	2b00      	cmp	r3, #0
 800772e:	db0a      	blt.n	8007746 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	b2da      	uxtb	r2, r3
 8007734:	490c      	ldr	r1, [pc, #48]	@ (8007768 <__NVIC_SetPriority+0x4c>)
 8007736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800773a:	0112      	lsls	r2, r2, #4
 800773c:	b2d2      	uxtb	r2, r2
 800773e:	440b      	add	r3, r1
 8007740:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007744:	e00a      	b.n	800775c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	b2da      	uxtb	r2, r3
 800774a:	4908      	ldr	r1, [pc, #32]	@ (800776c <__NVIC_SetPriority+0x50>)
 800774c:	79fb      	ldrb	r3, [r7, #7]
 800774e:	f003 030f 	and.w	r3, r3, #15
 8007752:	3b04      	subs	r3, #4
 8007754:	0112      	lsls	r2, r2, #4
 8007756:	b2d2      	uxtb	r2, r2
 8007758:	440b      	add	r3, r1
 800775a:	761a      	strb	r2, [r3, #24]
}
 800775c:	bf00      	nop
 800775e:	370c      	adds	r7, #12
 8007760:	46bd      	mov	sp, r7
 8007762:	bc80      	pop	{r7}
 8007764:	4770      	bx	lr
 8007766:	bf00      	nop
 8007768:	e000e100 	.word	0xe000e100
 800776c:	e000ed00 	.word	0xe000ed00

08007770 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007770:	b480      	push	{r7}
 8007772:	b089      	sub	sp, #36	@ 0x24
 8007774:	af00      	add	r7, sp, #0
 8007776:	60f8      	str	r0, [r7, #12]
 8007778:	60b9      	str	r1, [r7, #8]
 800777a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f003 0307 	and.w	r3, r3, #7
 8007782:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007784:	69fb      	ldr	r3, [r7, #28]
 8007786:	f1c3 0307 	rsb	r3, r3, #7
 800778a:	2b04      	cmp	r3, #4
 800778c:	bf28      	it	cs
 800778e:	2304      	movcs	r3, #4
 8007790:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007792:	69fb      	ldr	r3, [r7, #28]
 8007794:	3304      	adds	r3, #4
 8007796:	2b06      	cmp	r3, #6
 8007798:	d902      	bls.n	80077a0 <NVIC_EncodePriority+0x30>
 800779a:	69fb      	ldr	r3, [r7, #28]
 800779c:	3b03      	subs	r3, #3
 800779e:	e000      	b.n	80077a2 <NVIC_EncodePriority+0x32>
 80077a0:	2300      	movs	r3, #0
 80077a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80077a4:	f04f 32ff 	mov.w	r2, #4294967295
 80077a8:	69bb      	ldr	r3, [r7, #24]
 80077aa:	fa02 f303 	lsl.w	r3, r2, r3
 80077ae:	43da      	mvns	r2, r3
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	401a      	ands	r2, r3
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80077b8:	f04f 31ff 	mov.w	r1, #4294967295
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	fa01 f303 	lsl.w	r3, r1, r3
 80077c2:	43d9      	mvns	r1, r3
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80077c8:	4313      	orrs	r3, r2
         );
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3724      	adds	r7, #36	@ 0x24
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bc80      	pop	{r7}
 80077d2:	4770      	bx	lr

080077d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b082      	sub	sp, #8
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	3b01      	subs	r3, #1
 80077e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80077e4:	d301      	bcc.n	80077ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80077e6:	2301      	movs	r3, #1
 80077e8:	e00f      	b.n	800780a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80077ea:	4a0a      	ldr	r2, [pc, #40]	@ (8007814 <SysTick_Config+0x40>)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	3b01      	subs	r3, #1
 80077f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80077f2:	210f      	movs	r1, #15
 80077f4:	f04f 30ff 	mov.w	r0, #4294967295
 80077f8:	f7ff ff90 	bl	800771c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80077fc:	4b05      	ldr	r3, [pc, #20]	@ (8007814 <SysTick_Config+0x40>)
 80077fe:	2200      	movs	r2, #0
 8007800:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007802:	4b04      	ldr	r3, [pc, #16]	@ (8007814 <SysTick_Config+0x40>)
 8007804:	2207      	movs	r2, #7
 8007806:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007808:	2300      	movs	r3, #0
}
 800780a:	4618      	mov	r0, r3
 800780c:	3708      	adds	r7, #8
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}
 8007812:	bf00      	nop
 8007814:	e000e010 	.word	0xe000e010

08007818 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b082      	sub	sp, #8
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f7ff ff2d 	bl	8007680 <__NVIC_SetPriorityGrouping>
}
 8007826:	bf00      	nop
 8007828:	3708      	adds	r7, #8
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}

0800782e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800782e:	b580      	push	{r7, lr}
 8007830:	b086      	sub	sp, #24
 8007832:	af00      	add	r7, sp, #0
 8007834:	4603      	mov	r3, r0
 8007836:	60b9      	str	r1, [r7, #8]
 8007838:	607a      	str	r2, [r7, #4]
 800783a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800783c:	2300      	movs	r3, #0
 800783e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007840:	f7ff ff42 	bl	80076c8 <__NVIC_GetPriorityGrouping>
 8007844:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007846:	687a      	ldr	r2, [r7, #4]
 8007848:	68b9      	ldr	r1, [r7, #8]
 800784a:	6978      	ldr	r0, [r7, #20]
 800784c:	f7ff ff90 	bl	8007770 <NVIC_EncodePriority>
 8007850:	4602      	mov	r2, r0
 8007852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007856:	4611      	mov	r1, r2
 8007858:	4618      	mov	r0, r3
 800785a:	f7ff ff5f 	bl	800771c <__NVIC_SetPriority>
}
 800785e:	bf00      	nop
 8007860:	3718      	adds	r7, #24
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}

08007866 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007866:	b580      	push	{r7, lr}
 8007868:	b082      	sub	sp, #8
 800786a:	af00      	add	r7, sp, #0
 800786c:	4603      	mov	r3, r0
 800786e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007874:	4618      	mov	r0, r3
 8007876:	f7ff ff35 	bl	80076e4 <__NVIC_EnableIRQ>
}
 800787a:	bf00      	nop
 800787c:	3708      	adds	r7, #8
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}

08007882 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007882:	b580      	push	{r7, lr}
 8007884:	b082      	sub	sp, #8
 8007886:	af00      	add	r7, sp, #0
 8007888:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f7ff ffa2 	bl	80077d4 <SysTick_Config>
 8007890:	4603      	mov	r3, r0
}
 8007892:	4618      	mov	r0, r3
 8007894:	3708      	adds	r7, #8
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}
	...

0800789c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800789c:	b480      	push	{r7}
 800789e:	b085      	sub	sp, #20
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80078a4:	2300      	movs	r3, #0
 80078a6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d101      	bne.n	80078b2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80078ae:	2301      	movs	r3, #1
 80078b0:	e043      	b.n	800793a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	461a      	mov	r2, r3
 80078b8:	4b22      	ldr	r3, [pc, #136]	@ (8007944 <HAL_DMA_Init+0xa8>)
 80078ba:	4413      	add	r3, r2
 80078bc:	4a22      	ldr	r2, [pc, #136]	@ (8007948 <HAL_DMA_Init+0xac>)
 80078be:	fba2 2303 	umull	r2, r3, r2, r3
 80078c2:	091b      	lsrs	r3, r3, #4
 80078c4:	009a      	lsls	r2, r3, #2
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	4a1f      	ldr	r2, [pc, #124]	@ (800794c <HAL_DMA_Init+0xb0>)
 80078ce:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2202      	movs	r2, #2
 80078d4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80078e6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80078ea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80078f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	68db      	ldr	r3, [r3, #12]
 80078fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007900:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	695b      	ldr	r3, [r3, #20]
 8007906:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800790c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	69db      	ldr	r3, [r3, #28]
 8007912:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007914:	68fa      	ldr	r2, [r7, #12]
 8007916:	4313      	orrs	r3, r2
 8007918:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	68fa      	ldr	r2, [r7, #12]
 8007920:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2200      	movs	r2, #0
 8007926:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2201      	movs	r2, #1
 800792c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2200      	movs	r2, #0
 8007934:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8007938:	2300      	movs	r3, #0
}
 800793a:	4618      	mov	r0, r3
 800793c:	3714      	adds	r7, #20
 800793e:	46bd      	mov	sp, r7
 8007940:	bc80      	pop	{r7}
 8007942:	4770      	bx	lr
 8007944:	bffdfff8 	.word	0xbffdfff8
 8007948:	cccccccd 	.word	0xcccccccd
 800794c:	40020000 	.word	0x40020000

08007950 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b084      	sub	sp, #16
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800796c:	2204      	movs	r2, #4
 800796e:	409a      	lsls	r2, r3
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	4013      	ands	r3, r2
 8007974:	2b00      	cmp	r3, #0
 8007976:	d04f      	beq.n	8007a18 <HAL_DMA_IRQHandler+0xc8>
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	f003 0304 	and.w	r3, r3, #4
 800797e:	2b00      	cmp	r3, #0
 8007980:	d04a      	beq.n	8007a18 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f003 0320 	and.w	r3, r3, #32
 800798c:	2b00      	cmp	r3, #0
 800798e:	d107      	bne.n	80079a0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f022 0204 	bic.w	r2, r2, #4
 800799e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a66      	ldr	r2, [pc, #408]	@ (8007b40 <HAL_DMA_IRQHandler+0x1f0>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d029      	beq.n	80079fe <HAL_DMA_IRQHandler+0xae>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a65      	ldr	r2, [pc, #404]	@ (8007b44 <HAL_DMA_IRQHandler+0x1f4>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d022      	beq.n	80079fa <HAL_DMA_IRQHandler+0xaa>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a63      	ldr	r2, [pc, #396]	@ (8007b48 <HAL_DMA_IRQHandler+0x1f8>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d01a      	beq.n	80079f4 <HAL_DMA_IRQHandler+0xa4>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a62      	ldr	r2, [pc, #392]	@ (8007b4c <HAL_DMA_IRQHandler+0x1fc>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d012      	beq.n	80079ee <HAL_DMA_IRQHandler+0x9e>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a60      	ldr	r2, [pc, #384]	@ (8007b50 <HAL_DMA_IRQHandler+0x200>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d00a      	beq.n	80079e8 <HAL_DMA_IRQHandler+0x98>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a5f      	ldr	r2, [pc, #380]	@ (8007b54 <HAL_DMA_IRQHandler+0x204>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d102      	bne.n	80079e2 <HAL_DMA_IRQHandler+0x92>
 80079dc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80079e0:	e00e      	b.n	8007a00 <HAL_DMA_IRQHandler+0xb0>
 80079e2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80079e6:	e00b      	b.n	8007a00 <HAL_DMA_IRQHandler+0xb0>
 80079e8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80079ec:	e008      	b.n	8007a00 <HAL_DMA_IRQHandler+0xb0>
 80079ee:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80079f2:	e005      	b.n	8007a00 <HAL_DMA_IRQHandler+0xb0>
 80079f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80079f8:	e002      	b.n	8007a00 <HAL_DMA_IRQHandler+0xb0>
 80079fa:	2340      	movs	r3, #64	@ 0x40
 80079fc:	e000      	b.n	8007a00 <HAL_DMA_IRQHandler+0xb0>
 80079fe:	2304      	movs	r3, #4
 8007a00:	4a55      	ldr	r2, [pc, #340]	@ (8007b58 <HAL_DMA_IRQHandler+0x208>)
 8007a02:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	f000 8094 	beq.w	8007b36 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8007a16:	e08e      	b.n	8007b36 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a1c:	2202      	movs	r2, #2
 8007a1e:	409a      	lsls	r2, r3
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	4013      	ands	r3, r2
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d056      	beq.n	8007ad6 <HAL_DMA_IRQHandler+0x186>
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	f003 0302 	and.w	r3, r3, #2
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d051      	beq.n	8007ad6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f003 0320 	and.w	r3, r3, #32
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d10b      	bne.n	8007a58 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	681a      	ldr	r2, [r3, #0]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f022 020a 	bic.w	r2, r2, #10
 8007a4e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2201      	movs	r2, #1
 8007a54:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a38      	ldr	r2, [pc, #224]	@ (8007b40 <HAL_DMA_IRQHandler+0x1f0>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d029      	beq.n	8007ab6 <HAL_DMA_IRQHandler+0x166>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a37      	ldr	r2, [pc, #220]	@ (8007b44 <HAL_DMA_IRQHandler+0x1f4>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d022      	beq.n	8007ab2 <HAL_DMA_IRQHandler+0x162>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a35      	ldr	r2, [pc, #212]	@ (8007b48 <HAL_DMA_IRQHandler+0x1f8>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d01a      	beq.n	8007aac <HAL_DMA_IRQHandler+0x15c>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a34      	ldr	r2, [pc, #208]	@ (8007b4c <HAL_DMA_IRQHandler+0x1fc>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d012      	beq.n	8007aa6 <HAL_DMA_IRQHandler+0x156>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a32      	ldr	r2, [pc, #200]	@ (8007b50 <HAL_DMA_IRQHandler+0x200>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d00a      	beq.n	8007aa0 <HAL_DMA_IRQHandler+0x150>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a31      	ldr	r2, [pc, #196]	@ (8007b54 <HAL_DMA_IRQHandler+0x204>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d102      	bne.n	8007a9a <HAL_DMA_IRQHandler+0x14a>
 8007a94:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8007a98:	e00e      	b.n	8007ab8 <HAL_DMA_IRQHandler+0x168>
 8007a9a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007a9e:	e00b      	b.n	8007ab8 <HAL_DMA_IRQHandler+0x168>
 8007aa0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007aa4:	e008      	b.n	8007ab8 <HAL_DMA_IRQHandler+0x168>
 8007aa6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007aaa:	e005      	b.n	8007ab8 <HAL_DMA_IRQHandler+0x168>
 8007aac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007ab0:	e002      	b.n	8007ab8 <HAL_DMA_IRQHandler+0x168>
 8007ab2:	2320      	movs	r3, #32
 8007ab4:	e000      	b.n	8007ab8 <HAL_DMA_IRQHandler+0x168>
 8007ab6:	2302      	movs	r3, #2
 8007ab8:	4a27      	ldr	r2, [pc, #156]	@ (8007b58 <HAL_DMA_IRQHandler+0x208>)
 8007aba:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d034      	beq.n	8007b36 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8007ad4:	e02f      	b.n	8007b36 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ada:	2208      	movs	r2, #8
 8007adc:	409a      	lsls	r2, r3
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	4013      	ands	r3, r2
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d028      	beq.n	8007b38 <HAL_DMA_IRQHandler+0x1e8>
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	f003 0308 	and.w	r3, r3, #8
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d023      	beq.n	8007b38 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	681a      	ldr	r2, [r3, #0]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f022 020e 	bic.w	r2, r2, #14
 8007afe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b08:	2101      	movs	r1, #1
 8007b0a:	fa01 f202 	lsl.w	r2, r1, r2
 8007b0e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2201      	movs	r2, #1
 8007b14:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2201      	movs	r2, #1
 8007b1a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2200      	movs	r2, #0
 8007b22:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d004      	beq.n	8007b38 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	4798      	blx	r3
    }
  }
  return;
 8007b36:	bf00      	nop
 8007b38:	bf00      	nop
}
 8007b3a:	3710      	adds	r7, #16
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}
 8007b40:	40020008 	.word	0x40020008
 8007b44:	4002001c 	.word	0x4002001c
 8007b48:	40020030 	.word	0x40020030
 8007b4c:	40020044 	.word	0x40020044
 8007b50:	40020058 	.word	0x40020058
 8007b54:	4002006c 	.word	0x4002006c
 8007b58:	40020000 	.word	0x40020000

08007b5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b08b      	sub	sp, #44	@ 0x2c
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007b66:	2300      	movs	r3, #0
 8007b68:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007b6e:	e169      	b.n	8007e44 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8007b70:	2201      	movs	r2, #1
 8007b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b74:	fa02 f303 	lsl.w	r3, r2, r3
 8007b78:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	69fa      	ldr	r2, [r7, #28]
 8007b80:	4013      	ands	r3, r2
 8007b82:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8007b84:	69ba      	ldr	r2, [r7, #24]
 8007b86:	69fb      	ldr	r3, [r7, #28]
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	f040 8158 	bne.w	8007e3e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	4a9a      	ldr	r2, [pc, #616]	@ (8007dfc <HAL_GPIO_Init+0x2a0>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d05e      	beq.n	8007c56 <HAL_GPIO_Init+0xfa>
 8007b98:	4a98      	ldr	r2, [pc, #608]	@ (8007dfc <HAL_GPIO_Init+0x2a0>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d875      	bhi.n	8007c8a <HAL_GPIO_Init+0x12e>
 8007b9e:	4a98      	ldr	r2, [pc, #608]	@ (8007e00 <HAL_GPIO_Init+0x2a4>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d058      	beq.n	8007c56 <HAL_GPIO_Init+0xfa>
 8007ba4:	4a96      	ldr	r2, [pc, #600]	@ (8007e00 <HAL_GPIO_Init+0x2a4>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d86f      	bhi.n	8007c8a <HAL_GPIO_Init+0x12e>
 8007baa:	4a96      	ldr	r2, [pc, #600]	@ (8007e04 <HAL_GPIO_Init+0x2a8>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d052      	beq.n	8007c56 <HAL_GPIO_Init+0xfa>
 8007bb0:	4a94      	ldr	r2, [pc, #592]	@ (8007e04 <HAL_GPIO_Init+0x2a8>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d869      	bhi.n	8007c8a <HAL_GPIO_Init+0x12e>
 8007bb6:	4a94      	ldr	r2, [pc, #592]	@ (8007e08 <HAL_GPIO_Init+0x2ac>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d04c      	beq.n	8007c56 <HAL_GPIO_Init+0xfa>
 8007bbc:	4a92      	ldr	r2, [pc, #584]	@ (8007e08 <HAL_GPIO_Init+0x2ac>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d863      	bhi.n	8007c8a <HAL_GPIO_Init+0x12e>
 8007bc2:	4a92      	ldr	r2, [pc, #584]	@ (8007e0c <HAL_GPIO_Init+0x2b0>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d046      	beq.n	8007c56 <HAL_GPIO_Init+0xfa>
 8007bc8:	4a90      	ldr	r2, [pc, #576]	@ (8007e0c <HAL_GPIO_Init+0x2b0>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d85d      	bhi.n	8007c8a <HAL_GPIO_Init+0x12e>
 8007bce:	2b12      	cmp	r3, #18
 8007bd0:	d82a      	bhi.n	8007c28 <HAL_GPIO_Init+0xcc>
 8007bd2:	2b12      	cmp	r3, #18
 8007bd4:	d859      	bhi.n	8007c8a <HAL_GPIO_Init+0x12e>
 8007bd6:	a201      	add	r2, pc, #4	@ (adr r2, 8007bdc <HAL_GPIO_Init+0x80>)
 8007bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bdc:	08007c57 	.word	0x08007c57
 8007be0:	08007c31 	.word	0x08007c31
 8007be4:	08007c43 	.word	0x08007c43
 8007be8:	08007c85 	.word	0x08007c85
 8007bec:	08007c8b 	.word	0x08007c8b
 8007bf0:	08007c8b 	.word	0x08007c8b
 8007bf4:	08007c8b 	.word	0x08007c8b
 8007bf8:	08007c8b 	.word	0x08007c8b
 8007bfc:	08007c8b 	.word	0x08007c8b
 8007c00:	08007c8b 	.word	0x08007c8b
 8007c04:	08007c8b 	.word	0x08007c8b
 8007c08:	08007c8b 	.word	0x08007c8b
 8007c0c:	08007c8b 	.word	0x08007c8b
 8007c10:	08007c8b 	.word	0x08007c8b
 8007c14:	08007c8b 	.word	0x08007c8b
 8007c18:	08007c8b 	.word	0x08007c8b
 8007c1c:	08007c8b 	.word	0x08007c8b
 8007c20:	08007c39 	.word	0x08007c39
 8007c24:	08007c4d 	.word	0x08007c4d
 8007c28:	4a79      	ldr	r2, [pc, #484]	@ (8007e10 <HAL_GPIO_Init+0x2b4>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d013      	beq.n	8007c56 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8007c2e:	e02c      	b.n	8007c8a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	68db      	ldr	r3, [r3, #12]
 8007c34:	623b      	str	r3, [r7, #32]
          break;
 8007c36:	e029      	b.n	8007c8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	68db      	ldr	r3, [r3, #12]
 8007c3c:	3304      	adds	r3, #4
 8007c3e:	623b      	str	r3, [r7, #32]
          break;
 8007c40:	e024      	b.n	8007c8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	68db      	ldr	r3, [r3, #12]
 8007c46:	3308      	adds	r3, #8
 8007c48:	623b      	str	r3, [r7, #32]
          break;
 8007c4a:	e01f      	b.n	8007c8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	68db      	ldr	r3, [r3, #12]
 8007c50:	330c      	adds	r3, #12
 8007c52:	623b      	str	r3, [r7, #32]
          break;
 8007c54:	e01a      	b.n	8007c8c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	689b      	ldr	r3, [r3, #8]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d102      	bne.n	8007c64 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8007c5e:	2304      	movs	r3, #4
 8007c60:	623b      	str	r3, [r7, #32]
          break;
 8007c62:	e013      	b.n	8007c8c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	689b      	ldr	r3, [r3, #8]
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d105      	bne.n	8007c78 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007c6c:	2308      	movs	r3, #8
 8007c6e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	69fa      	ldr	r2, [r7, #28]
 8007c74:	611a      	str	r2, [r3, #16]
          break;
 8007c76:	e009      	b.n	8007c8c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007c78:	2308      	movs	r3, #8
 8007c7a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	69fa      	ldr	r2, [r7, #28]
 8007c80:	615a      	str	r2, [r3, #20]
          break;
 8007c82:	e003      	b.n	8007c8c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8007c84:	2300      	movs	r3, #0
 8007c86:	623b      	str	r3, [r7, #32]
          break;
 8007c88:	e000      	b.n	8007c8c <HAL_GPIO_Init+0x130>
          break;
 8007c8a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007c8c:	69bb      	ldr	r3, [r7, #24]
 8007c8e:	2bff      	cmp	r3, #255	@ 0xff
 8007c90:	d801      	bhi.n	8007c96 <HAL_GPIO_Init+0x13a>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	e001      	b.n	8007c9a <HAL_GPIO_Init+0x13e>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	3304      	adds	r3, #4
 8007c9a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8007c9c:	69bb      	ldr	r3, [r7, #24]
 8007c9e:	2bff      	cmp	r3, #255	@ 0xff
 8007ca0:	d802      	bhi.n	8007ca8 <HAL_GPIO_Init+0x14c>
 8007ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ca4:	009b      	lsls	r3, r3, #2
 8007ca6:	e002      	b.n	8007cae <HAL_GPIO_Init+0x152>
 8007ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007caa:	3b08      	subs	r3, #8
 8007cac:	009b      	lsls	r3, r3, #2
 8007cae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	681a      	ldr	r2, [r3, #0]
 8007cb4:	210f      	movs	r1, #15
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8007cbc:	43db      	mvns	r3, r3
 8007cbe:	401a      	ands	r2, r3
 8007cc0:	6a39      	ldr	r1, [r7, #32]
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8007cc8:	431a      	orrs	r2, r3
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	f000 80b1 	beq.w	8007e3e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8007cdc:	4b4d      	ldr	r3, [pc, #308]	@ (8007e14 <HAL_GPIO_Init+0x2b8>)
 8007cde:	699b      	ldr	r3, [r3, #24]
 8007ce0:	4a4c      	ldr	r2, [pc, #304]	@ (8007e14 <HAL_GPIO_Init+0x2b8>)
 8007ce2:	f043 0301 	orr.w	r3, r3, #1
 8007ce6:	6193      	str	r3, [r2, #24]
 8007ce8:	4b4a      	ldr	r3, [pc, #296]	@ (8007e14 <HAL_GPIO_Init+0x2b8>)
 8007cea:	699b      	ldr	r3, [r3, #24]
 8007cec:	f003 0301 	and.w	r3, r3, #1
 8007cf0:	60bb      	str	r3, [r7, #8]
 8007cf2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8007cf4:	4a48      	ldr	r2, [pc, #288]	@ (8007e18 <HAL_GPIO_Init+0x2bc>)
 8007cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cf8:	089b      	lsrs	r3, r3, #2
 8007cfa:	3302      	adds	r3, #2
 8007cfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d00:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8007d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d04:	f003 0303 	and.w	r3, r3, #3
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	220f      	movs	r2, #15
 8007d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d10:	43db      	mvns	r3, r3
 8007d12:	68fa      	ldr	r2, [r7, #12]
 8007d14:	4013      	ands	r3, r2
 8007d16:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	4a40      	ldr	r2, [pc, #256]	@ (8007e1c <HAL_GPIO_Init+0x2c0>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d013      	beq.n	8007d48 <HAL_GPIO_Init+0x1ec>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	4a3f      	ldr	r2, [pc, #252]	@ (8007e20 <HAL_GPIO_Init+0x2c4>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d00d      	beq.n	8007d44 <HAL_GPIO_Init+0x1e8>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	4a3e      	ldr	r2, [pc, #248]	@ (8007e24 <HAL_GPIO_Init+0x2c8>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d007      	beq.n	8007d40 <HAL_GPIO_Init+0x1e4>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	4a3d      	ldr	r2, [pc, #244]	@ (8007e28 <HAL_GPIO_Init+0x2cc>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d101      	bne.n	8007d3c <HAL_GPIO_Init+0x1e0>
 8007d38:	2303      	movs	r3, #3
 8007d3a:	e006      	b.n	8007d4a <HAL_GPIO_Init+0x1ee>
 8007d3c:	2304      	movs	r3, #4
 8007d3e:	e004      	b.n	8007d4a <HAL_GPIO_Init+0x1ee>
 8007d40:	2302      	movs	r3, #2
 8007d42:	e002      	b.n	8007d4a <HAL_GPIO_Init+0x1ee>
 8007d44:	2301      	movs	r3, #1
 8007d46:	e000      	b.n	8007d4a <HAL_GPIO_Init+0x1ee>
 8007d48:	2300      	movs	r3, #0
 8007d4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d4c:	f002 0203 	and.w	r2, r2, #3
 8007d50:	0092      	lsls	r2, r2, #2
 8007d52:	4093      	lsls	r3, r2
 8007d54:	68fa      	ldr	r2, [r7, #12]
 8007d56:	4313      	orrs	r3, r2
 8007d58:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8007d5a:	492f      	ldr	r1, [pc, #188]	@ (8007e18 <HAL_GPIO_Init+0x2bc>)
 8007d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d5e:	089b      	lsrs	r3, r3, #2
 8007d60:	3302      	adds	r3, #2
 8007d62:	68fa      	ldr	r2, [r7, #12]
 8007d64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d006      	beq.n	8007d82 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8007d74:	4b2d      	ldr	r3, [pc, #180]	@ (8007e2c <HAL_GPIO_Init+0x2d0>)
 8007d76:	689a      	ldr	r2, [r3, #8]
 8007d78:	492c      	ldr	r1, [pc, #176]	@ (8007e2c <HAL_GPIO_Init+0x2d0>)
 8007d7a:	69bb      	ldr	r3, [r7, #24]
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	608b      	str	r3, [r1, #8]
 8007d80:	e006      	b.n	8007d90 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8007d82:	4b2a      	ldr	r3, [pc, #168]	@ (8007e2c <HAL_GPIO_Init+0x2d0>)
 8007d84:	689a      	ldr	r2, [r3, #8]
 8007d86:	69bb      	ldr	r3, [r7, #24]
 8007d88:	43db      	mvns	r3, r3
 8007d8a:	4928      	ldr	r1, [pc, #160]	@ (8007e2c <HAL_GPIO_Init+0x2d0>)
 8007d8c:	4013      	ands	r3, r2
 8007d8e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d006      	beq.n	8007daa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8007d9c:	4b23      	ldr	r3, [pc, #140]	@ (8007e2c <HAL_GPIO_Init+0x2d0>)
 8007d9e:	68da      	ldr	r2, [r3, #12]
 8007da0:	4922      	ldr	r1, [pc, #136]	@ (8007e2c <HAL_GPIO_Init+0x2d0>)
 8007da2:	69bb      	ldr	r3, [r7, #24]
 8007da4:	4313      	orrs	r3, r2
 8007da6:	60cb      	str	r3, [r1, #12]
 8007da8:	e006      	b.n	8007db8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8007daa:	4b20      	ldr	r3, [pc, #128]	@ (8007e2c <HAL_GPIO_Init+0x2d0>)
 8007dac:	68da      	ldr	r2, [r3, #12]
 8007dae:	69bb      	ldr	r3, [r7, #24]
 8007db0:	43db      	mvns	r3, r3
 8007db2:	491e      	ldr	r1, [pc, #120]	@ (8007e2c <HAL_GPIO_Init+0x2d0>)
 8007db4:	4013      	ands	r3, r2
 8007db6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d006      	beq.n	8007dd2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8007dc4:	4b19      	ldr	r3, [pc, #100]	@ (8007e2c <HAL_GPIO_Init+0x2d0>)
 8007dc6:	685a      	ldr	r2, [r3, #4]
 8007dc8:	4918      	ldr	r1, [pc, #96]	@ (8007e2c <HAL_GPIO_Init+0x2d0>)
 8007dca:	69bb      	ldr	r3, [r7, #24]
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	604b      	str	r3, [r1, #4]
 8007dd0:	e006      	b.n	8007de0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8007dd2:	4b16      	ldr	r3, [pc, #88]	@ (8007e2c <HAL_GPIO_Init+0x2d0>)
 8007dd4:	685a      	ldr	r2, [r3, #4]
 8007dd6:	69bb      	ldr	r3, [r7, #24]
 8007dd8:	43db      	mvns	r3, r3
 8007dda:	4914      	ldr	r1, [pc, #80]	@ (8007e2c <HAL_GPIO_Init+0x2d0>)
 8007ddc:	4013      	ands	r3, r2
 8007dde:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d021      	beq.n	8007e30 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8007dec:	4b0f      	ldr	r3, [pc, #60]	@ (8007e2c <HAL_GPIO_Init+0x2d0>)
 8007dee:	681a      	ldr	r2, [r3, #0]
 8007df0:	490e      	ldr	r1, [pc, #56]	@ (8007e2c <HAL_GPIO_Init+0x2d0>)
 8007df2:	69bb      	ldr	r3, [r7, #24]
 8007df4:	4313      	orrs	r3, r2
 8007df6:	600b      	str	r3, [r1, #0]
 8007df8:	e021      	b.n	8007e3e <HAL_GPIO_Init+0x2e2>
 8007dfa:	bf00      	nop
 8007dfc:	10320000 	.word	0x10320000
 8007e00:	10310000 	.word	0x10310000
 8007e04:	10220000 	.word	0x10220000
 8007e08:	10210000 	.word	0x10210000
 8007e0c:	10120000 	.word	0x10120000
 8007e10:	10110000 	.word	0x10110000
 8007e14:	40021000 	.word	0x40021000
 8007e18:	40010000 	.word	0x40010000
 8007e1c:	40010800 	.word	0x40010800
 8007e20:	40010c00 	.word	0x40010c00
 8007e24:	40011000 	.word	0x40011000
 8007e28:	40011400 	.word	0x40011400
 8007e2c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8007e30:	4b0b      	ldr	r3, [pc, #44]	@ (8007e60 <HAL_GPIO_Init+0x304>)
 8007e32:	681a      	ldr	r2, [r3, #0]
 8007e34:	69bb      	ldr	r3, [r7, #24]
 8007e36:	43db      	mvns	r3, r3
 8007e38:	4909      	ldr	r1, [pc, #36]	@ (8007e60 <HAL_GPIO_Init+0x304>)
 8007e3a:	4013      	ands	r3, r2
 8007e3c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8007e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e40:	3301      	adds	r3, #1
 8007e42:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	681a      	ldr	r2, [r3, #0]
 8007e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	f47f ae8e 	bne.w	8007b70 <HAL_GPIO_Init+0x14>
  }
}
 8007e54:	bf00      	nop
 8007e56:	bf00      	nop
 8007e58:	372c      	adds	r7, #44	@ 0x2c
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bc80      	pop	{r7}
 8007e5e:	4770      	bx	lr
 8007e60:	40010400 	.word	0x40010400

08007e64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b085      	sub	sp, #20
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	460b      	mov	r3, r1
 8007e6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	689a      	ldr	r2, [r3, #8]
 8007e74:	887b      	ldrh	r3, [r7, #2]
 8007e76:	4013      	ands	r3, r2
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d002      	beq.n	8007e82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	73fb      	strb	r3, [r7, #15]
 8007e80:	e001      	b.n	8007e86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007e82:	2300      	movs	r3, #0
 8007e84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3714      	adds	r7, #20
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bc80      	pop	{r7}
 8007e90:	4770      	bx	lr

08007e92 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007e92:	b480      	push	{r7}
 8007e94:	b083      	sub	sp, #12
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	6078      	str	r0, [r7, #4]
 8007e9a:	460b      	mov	r3, r1
 8007e9c:	807b      	strh	r3, [r7, #2]
 8007e9e:	4613      	mov	r3, r2
 8007ea0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007ea2:	787b      	ldrb	r3, [r7, #1]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d003      	beq.n	8007eb0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007ea8:	887a      	ldrh	r2, [r7, #2]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8007eae:	e003      	b.n	8007eb8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8007eb0:	887b      	ldrh	r3, [r7, #2]
 8007eb2:	041a      	lsls	r2, r3, #16
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	611a      	str	r2, [r3, #16]
}
 8007eb8:	bf00      	nop
 8007eba:	370c      	adds	r7, #12
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bc80      	pop	{r7}
 8007ec0:	4770      	bx	lr
	...

08007ec4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b084      	sub	sp, #16
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d101      	bne.n	8007ed6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	e12b      	b.n	800812e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007edc:	b2db      	uxtb	r3, r3
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d106      	bne.n	8007ef0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f7f9 fd4a 	bl	8001984 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2224      	movs	r2, #36	@ 0x24
 8007ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	681a      	ldr	r2, [r3, #0]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f022 0201 	bic.w	r2, r2, #1
 8007f06:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	681a      	ldr	r2, [r3, #0]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007f16:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	681a      	ldr	r2, [r3, #0]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007f26:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007f28:	f001 f832 	bl	8008f90 <HAL_RCC_GetPCLK1Freq>
 8007f2c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	685b      	ldr	r3, [r3, #4]
 8007f32:	4a81      	ldr	r2, [pc, #516]	@ (8008138 <HAL_I2C_Init+0x274>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d807      	bhi.n	8007f48 <HAL_I2C_Init+0x84>
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	4a80      	ldr	r2, [pc, #512]	@ (800813c <HAL_I2C_Init+0x278>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	bf94      	ite	ls
 8007f40:	2301      	movls	r3, #1
 8007f42:	2300      	movhi	r3, #0
 8007f44:	b2db      	uxtb	r3, r3
 8007f46:	e006      	b.n	8007f56 <HAL_I2C_Init+0x92>
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	4a7d      	ldr	r2, [pc, #500]	@ (8008140 <HAL_I2C_Init+0x27c>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	bf94      	ite	ls
 8007f50:	2301      	movls	r3, #1
 8007f52:	2300      	movhi	r3, #0
 8007f54:	b2db      	uxtb	r3, r3
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d001      	beq.n	8007f5e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	e0e7      	b.n	800812e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	4a78      	ldr	r2, [pc, #480]	@ (8008144 <HAL_I2C_Init+0x280>)
 8007f62:	fba2 2303 	umull	r2, r3, r2, r3
 8007f66:	0c9b      	lsrs	r3, r3, #18
 8007f68:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	68ba      	ldr	r2, [r7, #8]
 8007f7a:	430a      	orrs	r2, r1
 8007f7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	6a1b      	ldr	r3, [r3, #32]
 8007f84:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	4a6a      	ldr	r2, [pc, #424]	@ (8008138 <HAL_I2C_Init+0x274>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d802      	bhi.n	8007f98 <HAL_I2C_Init+0xd4>
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	3301      	adds	r3, #1
 8007f96:	e009      	b.n	8007fac <HAL_I2C_Init+0xe8>
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8007f9e:	fb02 f303 	mul.w	r3, r2, r3
 8007fa2:	4a69      	ldr	r2, [pc, #420]	@ (8008148 <HAL_I2C_Init+0x284>)
 8007fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8007fa8:	099b      	lsrs	r3, r3, #6
 8007faa:	3301      	adds	r3, #1
 8007fac:	687a      	ldr	r2, [r7, #4]
 8007fae:	6812      	ldr	r2, [r2, #0]
 8007fb0:	430b      	orrs	r3, r1
 8007fb2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	69db      	ldr	r3, [r3, #28]
 8007fba:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8007fbe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	495c      	ldr	r1, [pc, #368]	@ (8008138 <HAL_I2C_Init+0x274>)
 8007fc8:	428b      	cmp	r3, r1
 8007fca:	d819      	bhi.n	8008000 <HAL_I2C_Init+0x13c>
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	1e59      	subs	r1, r3, #1
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	685b      	ldr	r3, [r3, #4]
 8007fd4:	005b      	lsls	r3, r3, #1
 8007fd6:	fbb1 f3f3 	udiv	r3, r1, r3
 8007fda:	1c59      	adds	r1, r3, #1
 8007fdc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8007fe0:	400b      	ands	r3, r1
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d00a      	beq.n	8007ffc <HAL_I2C_Init+0x138>
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	1e59      	subs	r1, r3, #1
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	005b      	lsls	r3, r3, #1
 8007ff0:	fbb1 f3f3 	udiv	r3, r1, r3
 8007ff4:	3301      	adds	r3, #1
 8007ff6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ffa:	e051      	b.n	80080a0 <HAL_I2C_Init+0x1dc>
 8007ffc:	2304      	movs	r3, #4
 8007ffe:	e04f      	b.n	80080a0 <HAL_I2C_Init+0x1dc>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	689b      	ldr	r3, [r3, #8]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d111      	bne.n	800802c <HAL_I2C_Init+0x168>
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	1e58      	subs	r0, r3, #1
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6859      	ldr	r1, [r3, #4]
 8008010:	460b      	mov	r3, r1
 8008012:	005b      	lsls	r3, r3, #1
 8008014:	440b      	add	r3, r1
 8008016:	fbb0 f3f3 	udiv	r3, r0, r3
 800801a:	3301      	adds	r3, #1
 800801c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008020:	2b00      	cmp	r3, #0
 8008022:	bf0c      	ite	eq
 8008024:	2301      	moveq	r3, #1
 8008026:	2300      	movne	r3, #0
 8008028:	b2db      	uxtb	r3, r3
 800802a:	e012      	b.n	8008052 <HAL_I2C_Init+0x18e>
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	1e58      	subs	r0, r3, #1
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6859      	ldr	r1, [r3, #4]
 8008034:	460b      	mov	r3, r1
 8008036:	009b      	lsls	r3, r3, #2
 8008038:	440b      	add	r3, r1
 800803a:	0099      	lsls	r1, r3, #2
 800803c:	440b      	add	r3, r1
 800803e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008042:	3301      	adds	r3, #1
 8008044:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008048:	2b00      	cmp	r3, #0
 800804a:	bf0c      	ite	eq
 800804c:	2301      	moveq	r3, #1
 800804e:	2300      	movne	r3, #0
 8008050:	b2db      	uxtb	r3, r3
 8008052:	2b00      	cmp	r3, #0
 8008054:	d001      	beq.n	800805a <HAL_I2C_Init+0x196>
 8008056:	2301      	movs	r3, #1
 8008058:	e022      	b.n	80080a0 <HAL_I2C_Init+0x1dc>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	689b      	ldr	r3, [r3, #8]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d10e      	bne.n	8008080 <HAL_I2C_Init+0x1bc>
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	1e58      	subs	r0, r3, #1
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6859      	ldr	r1, [r3, #4]
 800806a:	460b      	mov	r3, r1
 800806c:	005b      	lsls	r3, r3, #1
 800806e:	440b      	add	r3, r1
 8008070:	fbb0 f3f3 	udiv	r3, r0, r3
 8008074:	3301      	adds	r3, #1
 8008076:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800807a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800807e:	e00f      	b.n	80080a0 <HAL_I2C_Init+0x1dc>
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	1e58      	subs	r0, r3, #1
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6859      	ldr	r1, [r3, #4]
 8008088:	460b      	mov	r3, r1
 800808a:	009b      	lsls	r3, r3, #2
 800808c:	440b      	add	r3, r1
 800808e:	0099      	lsls	r1, r3, #2
 8008090:	440b      	add	r3, r1
 8008092:	fbb0 f3f3 	udiv	r3, r0, r3
 8008096:	3301      	adds	r3, #1
 8008098:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800809c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80080a0:	6879      	ldr	r1, [r7, #4]
 80080a2:	6809      	ldr	r1, [r1, #0]
 80080a4:	4313      	orrs	r3, r2
 80080a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	69da      	ldr	r2, [r3, #28]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6a1b      	ldr	r3, [r3, #32]
 80080ba:	431a      	orrs	r2, r3
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	430a      	orrs	r2, r1
 80080c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	689b      	ldr	r3, [r3, #8]
 80080ca:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80080ce:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80080d2:	687a      	ldr	r2, [r7, #4]
 80080d4:	6911      	ldr	r1, [r2, #16]
 80080d6:	687a      	ldr	r2, [r7, #4]
 80080d8:	68d2      	ldr	r2, [r2, #12]
 80080da:	4311      	orrs	r1, r2
 80080dc:	687a      	ldr	r2, [r7, #4]
 80080de:	6812      	ldr	r2, [r2, #0]
 80080e0:	430b      	orrs	r3, r1
 80080e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	68db      	ldr	r3, [r3, #12]
 80080ea:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	695a      	ldr	r2, [r3, #20]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	699b      	ldr	r3, [r3, #24]
 80080f6:	431a      	orrs	r2, r3
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	430a      	orrs	r2, r1
 80080fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	681a      	ldr	r2, [r3, #0]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f042 0201 	orr.w	r2, r2, #1
 800810e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2200      	movs	r2, #0
 8008114:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2220      	movs	r2, #32
 800811a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2200      	movs	r2, #0
 8008122:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2200      	movs	r2, #0
 8008128:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800812c:	2300      	movs	r3, #0
}
 800812e:	4618      	mov	r0, r3
 8008130:	3710      	adds	r7, #16
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}
 8008136:	bf00      	nop
 8008138:	000186a0 	.word	0x000186a0
 800813c:	001e847f 	.word	0x001e847f
 8008140:	003d08ff 	.word	0x003d08ff
 8008144:	431bde83 	.word	0x431bde83
 8008148:	10624dd3 	.word	0x10624dd3

0800814c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b088      	sub	sp, #32
 8008150:	af02      	add	r7, sp, #8
 8008152:	60f8      	str	r0, [r7, #12]
 8008154:	607a      	str	r2, [r7, #4]
 8008156:	461a      	mov	r2, r3
 8008158:	460b      	mov	r3, r1
 800815a:	817b      	strh	r3, [r7, #10]
 800815c:	4613      	mov	r3, r2
 800815e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008160:	f7ff fa60 	bl	8007624 <HAL_GetTick>
 8008164:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800816c:	b2db      	uxtb	r3, r3
 800816e:	2b20      	cmp	r3, #32
 8008170:	f040 80e0 	bne.w	8008334 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	9300      	str	r3, [sp, #0]
 8008178:	2319      	movs	r3, #25
 800817a:	2201      	movs	r2, #1
 800817c:	4970      	ldr	r1, [pc, #448]	@ (8008340 <HAL_I2C_Master_Transmit+0x1f4>)
 800817e:	68f8      	ldr	r0, [r7, #12]
 8008180:	f000 f964 	bl	800844c <I2C_WaitOnFlagUntilTimeout>
 8008184:	4603      	mov	r3, r0
 8008186:	2b00      	cmp	r3, #0
 8008188:	d001      	beq.n	800818e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800818a:	2302      	movs	r3, #2
 800818c:	e0d3      	b.n	8008336 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008194:	2b01      	cmp	r3, #1
 8008196:	d101      	bne.n	800819c <HAL_I2C_Master_Transmit+0x50>
 8008198:	2302      	movs	r3, #2
 800819a:	e0cc      	b.n	8008336 <HAL_I2C_Master_Transmit+0x1ea>
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	2201      	movs	r2, #1
 80081a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f003 0301 	and.w	r3, r3, #1
 80081ae:	2b01      	cmp	r3, #1
 80081b0:	d007      	beq.n	80081c2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	681a      	ldr	r2, [r3, #0]
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f042 0201 	orr.w	r2, r2, #1
 80081c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	681a      	ldr	r2, [r3, #0]
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80081d0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2221      	movs	r2, #33	@ 0x21
 80081d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2210      	movs	r2, #16
 80081de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2200      	movs	r2, #0
 80081e6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	687a      	ldr	r2, [r7, #4]
 80081ec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	893a      	ldrh	r2, [r7, #8]
 80081f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80081f8:	b29a      	uxth	r2, r3
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	4a50      	ldr	r2, [pc, #320]	@ (8008344 <HAL_I2C_Master_Transmit+0x1f8>)
 8008202:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008204:	8979      	ldrh	r1, [r7, #10]
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	6a3a      	ldr	r2, [r7, #32]
 800820a:	68f8      	ldr	r0, [r7, #12]
 800820c:	f000 f89c 	bl	8008348 <I2C_MasterRequestWrite>
 8008210:	4603      	mov	r3, r0
 8008212:	2b00      	cmp	r3, #0
 8008214:	d001      	beq.n	800821a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8008216:	2301      	movs	r3, #1
 8008218:	e08d      	b.n	8008336 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800821a:	2300      	movs	r3, #0
 800821c:	613b      	str	r3, [r7, #16]
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	695b      	ldr	r3, [r3, #20]
 8008224:	613b      	str	r3, [r7, #16]
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	699b      	ldr	r3, [r3, #24]
 800822c:	613b      	str	r3, [r7, #16]
 800822e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8008230:	e066      	b.n	8008300 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008232:	697a      	ldr	r2, [r7, #20]
 8008234:	6a39      	ldr	r1, [r7, #32]
 8008236:	68f8      	ldr	r0, [r7, #12]
 8008238:	f000 fa22 	bl	8008680 <I2C_WaitOnTXEFlagUntilTimeout>
 800823c:	4603      	mov	r3, r0
 800823e:	2b00      	cmp	r3, #0
 8008240:	d00d      	beq.n	800825e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008246:	2b04      	cmp	r3, #4
 8008248:	d107      	bne.n	800825a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	681a      	ldr	r2, [r3, #0]
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008258:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800825a:	2301      	movs	r3, #1
 800825c:	e06b      	b.n	8008336 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008262:	781a      	ldrb	r2, [r3, #0]
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800826e:	1c5a      	adds	r2, r3, #1
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008278:	b29b      	uxth	r3, r3
 800827a:	3b01      	subs	r3, #1
 800827c:	b29a      	uxth	r2, r3
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008286:	3b01      	subs	r3, #1
 8008288:	b29a      	uxth	r2, r3
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	695b      	ldr	r3, [r3, #20]
 8008294:	f003 0304 	and.w	r3, r3, #4
 8008298:	2b04      	cmp	r3, #4
 800829a:	d11b      	bne.n	80082d4 <HAL_I2C_Master_Transmit+0x188>
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d017      	beq.n	80082d4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082a8:	781a      	ldrb	r2, [r3, #0]
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082b4:	1c5a      	adds	r2, r3, #1
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80082be:	b29b      	uxth	r3, r3
 80082c0:	3b01      	subs	r3, #1
 80082c2:	b29a      	uxth	r2, r3
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80082cc:	3b01      	subs	r3, #1
 80082ce:	b29a      	uxth	r2, r3
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80082d4:	697a      	ldr	r2, [r7, #20]
 80082d6:	6a39      	ldr	r1, [r7, #32]
 80082d8:	68f8      	ldr	r0, [r7, #12]
 80082da:	f000 fa19 	bl	8008710 <I2C_WaitOnBTFFlagUntilTimeout>
 80082de:	4603      	mov	r3, r0
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d00d      	beq.n	8008300 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082e8:	2b04      	cmp	r3, #4
 80082ea:	d107      	bne.n	80082fc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	681a      	ldr	r2, [r3, #0]
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80082fa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80082fc:	2301      	movs	r3, #1
 80082fe:	e01a      	b.n	8008336 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008304:	2b00      	cmp	r3, #0
 8008306:	d194      	bne.n	8008232 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	681a      	ldr	r2, [r3, #0]
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008316:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2220      	movs	r2, #32
 800831c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	2200      	movs	r2, #0
 8008324:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2200      	movs	r2, #0
 800832c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008330:	2300      	movs	r3, #0
 8008332:	e000      	b.n	8008336 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8008334:	2302      	movs	r3, #2
  }
}
 8008336:	4618      	mov	r0, r3
 8008338:	3718      	adds	r7, #24
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}
 800833e:	bf00      	nop
 8008340:	00100002 	.word	0x00100002
 8008344:	ffff0000 	.word	0xffff0000

08008348 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b088      	sub	sp, #32
 800834c:	af02      	add	r7, sp, #8
 800834e:	60f8      	str	r0, [r7, #12]
 8008350:	607a      	str	r2, [r7, #4]
 8008352:	603b      	str	r3, [r7, #0]
 8008354:	460b      	mov	r3, r1
 8008356:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800835c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	2b08      	cmp	r3, #8
 8008362:	d006      	beq.n	8008372 <I2C_MasterRequestWrite+0x2a>
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	2b01      	cmp	r3, #1
 8008368:	d003      	beq.n	8008372 <I2C_MasterRequestWrite+0x2a>
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008370:	d108      	bne.n	8008384 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	681a      	ldr	r2, [r3, #0]
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008380:	601a      	str	r2, [r3, #0]
 8008382:	e00b      	b.n	800839c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008388:	2b12      	cmp	r3, #18
 800838a:	d107      	bne.n	800839c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	681a      	ldr	r2, [r3, #0]
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800839a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	9300      	str	r3, [sp, #0]
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2200      	movs	r2, #0
 80083a4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80083a8:	68f8      	ldr	r0, [r7, #12]
 80083aa:	f000 f84f 	bl	800844c <I2C_WaitOnFlagUntilTimeout>
 80083ae:	4603      	mov	r3, r0
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d00d      	beq.n	80083d0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80083c2:	d103      	bne.n	80083cc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80083ca:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80083cc:	2303      	movs	r3, #3
 80083ce:	e035      	b.n	800843c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	691b      	ldr	r3, [r3, #16]
 80083d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80083d8:	d108      	bne.n	80083ec <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80083da:	897b      	ldrh	r3, [r7, #10]
 80083dc:	b2db      	uxtb	r3, r3
 80083de:	461a      	mov	r2, r3
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80083e8:	611a      	str	r2, [r3, #16]
 80083ea:	e01b      	b.n	8008424 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80083ec:	897b      	ldrh	r3, [r7, #10]
 80083ee:	11db      	asrs	r3, r3, #7
 80083f0:	b2db      	uxtb	r3, r3
 80083f2:	f003 0306 	and.w	r3, r3, #6
 80083f6:	b2db      	uxtb	r3, r3
 80083f8:	f063 030f 	orn	r3, r3, #15
 80083fc:	b2da      	uxtb	r2, r3
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	687a      	ldr	r2, [r7, #4]
 8008408:	490e      	ldr	r1, [pc, #56]	@ (8008444 <I2C_MasterRequestWrite+0xfc>)
 800840a:	68f8      	ldr	r0, [r7, #12]
 800840c:	f000 f898 	bl	8008540 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008410:	4603      	mov	r3, r0
 8008412:	2b00      	cmp	r3, #0
 8008414:	d001      	beq.n	800841a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8008416:	2301      	movs	r3, #1
 8008418:	e010      	b.n	800843c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800841a:	897b      	ldrh	r3, [r7, #10]
 800841c:	b2da      	uxtb	r2, r3
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	687a      	ldr	r2, [r7, #4]
 8008428:	4907      	ldr	r1, [pc, #28]	@ (8008448 <I2C_MasterRequestWrite+0x100>)
 800842a:	68f8      	ldr	r0, [r7, #12]
 800842c:	f000 f888 	bl	8008540 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008430:	4603      	mov	r3, r0
 8008432:	2b00      	cmp	r3, #0
 8008434:	d001      	beq.n	800843a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8008436:	2301      	movs	r3, #1
 8008438:	e000      	b.n	800843c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800843a:	2300      	movs	r3, #0
}
 800843c:	4618      	mov	r0, r3
 800843e:	3718      	adds	r7, #24
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}
 8008444:	00010008 	.word	0x00010008
 8008448:	00010002 	.word	0x00010002

0800844c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b084      	sub	sp, #16
 8008450:	af00      	add	r7, sp, #0
 8008452:	60f8      	str	r0, [r7, #12]
 8008454:	60b9      	str	r1, [r7, #8]
 8008456:	603b      	str	r3, [r7, #0]
 8008458:	4613      	mov	r3, r2
 800845a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800845c:	e048      	b.n	80084f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008464:	d044      	beq.n	80084f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008466:	f7ff f8dd 	bl	8007624 <HAL_GetTick>
 800846a:	4602      	mov	r2, r0
 800846c:	69bb      	ldr	r3, [r7, #24]
 800846e:	1ad3      	subs	r3, r2, r3
 8008470:	683a      	ldr	r2, [r7, #0]
 8008472:	429a      	cmp	r2, r3
 8008474:	d302      	bcc.n	800847c <I2C_WaitOnFlagUntilTimeout+0x30>
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d139      	bne.n	80084f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	0c1b      	lsrs	r3, r3, #16
 8008480:	b2db      	uxtb	r3, r3
 8008482:	2b01      	cmp	r3, #1
 8008484:	d10d      	bne.n	80084a2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	695b      	ldr	r3, [r3, #20]
 800848c:	43da      	mvns	r2, r3
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	4013      	ands	r3, r2
 8008492:	b29b      	uxth	r3, r3
 8008494:	2b00      	cmp	r3, #0
 8008496:	bf0c      	ite	eq
 8008498:	2301      	moveq	r3, #1
 800849a:	2300      	movne	r3, #0
 800849c:	b2db      	uxtb	r3, r3
 800849e:	461a      	mov	r2, r3
 80084a0:	e00c      	b.n	80084bc <I2C_WaitOnFlagUntilTimeout+0x70>
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	699b      	ldr	r3, [r3, #24]
 80084a8:	43da      	mvns	r2, r3
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	4013      	ands	r3, r2
 80084ae:	b29b      	uxth	r3, r3
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	bf0c      	ite	eq
 80084b4:	2301      	moveq	r3, #1
 80084b6:	2300      	movne	r3, #0
 80084b8:	b2db      	uxtb	r3, r3
 80084ba:	461a      	mov	r2, r3
 80084bc:	79fb      	ldrb	r3, [r7, #7]
 80084be:	429a      	cmp	r2, r3
 80084c0:	d116      	bne.n	80084f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	2200      	movs	r2, #0
 80084c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	2220      	movs	r2, #32
 80084cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	2200      	movs	r2, #0
 80084d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084dc:	f043 0220 	orr.w	r2, r3, #32
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	2200      	movs	r2, #0
 80084e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80084ec:	2301      	movs	r3, #1
 80084ee:	e023      	b.n	8008538 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	0c1b      	lsrs	r3, r3, #16
 80084f4:	b2db      	uxtb	r3, r3
 80084f6:	2b01      	cmp	r3, #1
 80084f8:	d10d      	bne.n	8008516 <I2C_WaitOnFlagUntilTimeout+0xca>
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	695b      	ldr	r3, [r3, #20]
 8008500:	43da      	mvns	r2, r3
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	4013      	ands	r3, r2
 8008506:	b29b      	uxth	r3, r3
 8008508:	2b00      	cmp	r3, #0
 800850a:	bf0c      	ite	eq
 800850c:	2301      	moveq	r3, #1
 800850e:	2300      	movne	r3, #0
 8008510:	b2db      	uxtb	r3, r3
 8008512:	461a      	mov	r2, r3
 8008514:	e00c      	b.n	8008530 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	699b      	ldr	r3, [r3, #24]
 800851c:	43da      	mvns	r2, r3
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	4013      	ands	r3, r2
 8008522:	b29b      	uxth	r3, r3
 8008524:	2b00      	cmp	r3, #0
 8008526:	bf0c      	ite	eq
 8008528:	2301      	moveq	r3, #1
 800852a:	2300      	movne	r3, #0
 800852c:	b2db      	uxtb	r3, r3
 800852e:	461a      	mov	r2, r3
 8008530:	79fb      	ldrb	r3, [r7, #7]
 8008532:	429a      	cmp	r2, r3
 8008534:	d093      	beq.n	800845e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008536:	2300      	movs	r3, #0
}
 8008538:	4618      	mov	r0, r3
 800853a:	3710      	adds	r7, #16
 800853c:	46bd      	mov	sp, r7
 800853e:	bd80      	pop	{r7, pc}

08008540 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b084      	sub	sp, #16
 8008544:	af00      	add	r7, sp, #0
 8008546:	60f8      	str	r0, [r7, #12]
 8008548:	60b9      	str	r1, [r7, #8]
 800854a:	607a      	str	r2, [r7, #4]
 800854c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800854e:	e071      	b.n	8008634 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	695b      	ldr	r3, [r3, #20]
 8008556:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800855a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800855e:	d123      	bne.n	80085a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	681a      	ldr	r2, [r3, #0]
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800856e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008578:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	2200      	movs	r2, #0
 800857e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2220      	movs	r2, #32
 8008584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	2200      	movs	r2, #0
 800858c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008594:	f043 0204 	orr.w	r2, r3, #4
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2200      	movs	r2, #0
 80085a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80085a4:	2301      	movs	r3, #1
 80085a6:	e067      	b.n	8008678 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085ae:	d041      	beq.n	8008634 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085b0:	f7ff f838 	bl	8007624 <HAL_GetTick>
 80085b4:	4602      	mov	r2, r0
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	1ad3      	subs	r3, r2, r3
 80085ba:	687a      	ldr	r2, [r7, #4]
 80085bc:	429a      	cmp	r2, r3
 80085be:	d302      	bcc.n	80085c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d136      	bne.n	8008634 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	0c1b      	lsrs	r3, r3, #16
 80085ca:	b2db      	uxtb	r3, r3
 80085cc:	2b01      	cmp	r3, #1
 80085ce:	d10c      	bne.n	80085ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	695b      	ldr	r3, [r3, #20]
 80085d6:	43da      	mvns	r2, r3
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	4013      	ands	r3, r2
 80085dc:	b29b      	uxth	r3, r3
 80085de:	2b00      	cmp	r3, #0
 80085e0:	bf14      	ite	ne
 80085e2:	2301      	movne	r3, #1
 80085e4:	2300      	moveq	r3, #0
 80085e6:	b2db      	uxtb	r3, r3
 80085e8:	e00b      	b.n	8008602 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	699b      	ldr	r3, [r3, #24]
 80085f0:	43da      	mvns	r2, r3
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	4013      	ands	r3, r2
 80085f6:	b29b      	uxth	r3, r3
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	bf14      	ite	ne
 80085fc:	2301      	movne	r3, #1
 80085fe:	2300      	moveq	r3, #0
 8008600:	b2db      	uxtb	r3, r3
 8008602:	2b00      	cmp	r3, #0
 8008604:	d016      	beq.n	8008634 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	2200      	movs	r2, #0
 800860a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	2220      	movs	r2, #32
 8008610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	2200      	movs	r2, #0
 8008618:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008620:	f043 0220 	orr.w	r2, r3, #32
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	2200      	movs	r2, #0
 800862c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008630:	2301      	movs	r3, #1
 8008632:	e021      	b.n	8008678 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	0c1b      	lsrs	r3, r3, #16
 8008638:	b2db      	uxtb	r3, r3
 800863a:	2b01      	cmp	r3, #1
 800863c:	d10c      	bne.n	8008658 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	695b      	ldr	r3, [r3, #20]
 8008644:	43da      	mvns	r2, r3
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	4013      	ands	r3, r2
 800864a:	b29b      	uxth	r3, r3
 800864c:	2b00      	cmp	r3, #0
 800864e:	bf14      	ite	ne
 8008650:	2301      	movne	r3, #1
 8008652:	2300      	moveq	r3, #0
 8008654:	b2db      	uxtb	r3, r3
 8008656:	e00b      	b.n	8008670 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	699b      	ldr	r3, [r3, #24]
 800865e:	43da      	mvns	r2, r3
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	4013      	ands	r3, r2
 8008664:	b29b      	uxth	r3, r3
 8008666:	2b00      	cmp	r3, #0
 8008668:	bf14      	ite	ne
 800866a:	2301      	movne	r3, #1
 800866c:	2300      	moveq	r3, #0
 800866e:	b2db      	uxtb	r3, r3
 8008670:	2b00      	cmp	r3, #0
 8008672:	f47f af6d 	bne.w	8008550 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8008676:	2300      	movs	r3, #0
}
 8008678:	4618      	mov	r0, r3
 800867a:	3710      	adds	r7, #16
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}

08008680 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b084      	sub	sp, #16
 8008684:	af00      	add	r7, sp, #0
 8008686:	60f8      	str	r0, [r7, #12]
 8008688:	60b9      	str	r1, [r7, #8]
 800868a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800868c:	e034      	b.n	80086f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800868e:	68f8      	ldr	r0, [r7, #12]
 8008690:	f000 f886 	bl	80087a0 <I2C_IsAcknowledgeFailed>
 8008694:	4603      	mov	r3, r0
 8008696:	2b00      	cmp	r3, #0
 8008698:	d001      	beq.n	800869e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800869a:	2301      	movs	r3, #1
 800869c:	e034      	b.n	8008708 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086a4:	d028      	beq.n	80086f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086a6:	f7fe ffbd 	bl	8007624 <HAL_GetTick>
 80086aa:	4602      	mov	r2, r0
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	1ad3      	subs	r3, r2, r3
 80086b0:	68ba      	ldr	r2, [r7, #8]
 80086b2:	429a      	cmp	r2, r3
 80086b4:	d302      	bcc.n	80086bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d11d      	bne.n	80086f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	695b      	ldr	r3, [r3, #20]
 80086c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086c6:	2b80      	cmp	r3, #128	@ 0x80
 80086c8:	d016      	beq.n	80086f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	2200      	movs	r2, #0
 80086ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	2220      	movs	r2, #32
 80086d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2200      	movs	r2, #0
 80086dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086e4:	f043 0220 	orr.w	r2, r3, #32
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	2200      	movs	r2, #0
 80086f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80086f4:	2301      	movs	r3, #1
 80086f6:	e007      	b.n	8008708 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	695b      	ldr	r3, [r3, #20]
 80086fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008702:	2b80      	cmp	r3, #128	@ 0x80
 8008704:	d1c3      	bne.n	800868e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008706:	2300      	movs	r3, #0
}
 8008708:	4618      	mov	r0, r3
 800870a:	3710      	adds	r7, #16
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}

08008710 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b084      	sub	sp, #16
 8008714:	af00      	add	r7, sp, #0
 8008716:	60f8      	str	r0, [r7, #12]
 8008718:	60b9      	str	r1, [r7, #8]
 800871a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800871c:	e034      	b.n	8008788 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800871e:	68f8      	ldr	r0, [r7, #12]
 8008720:	f000 f83e 	bl	80087a0 <I2C_IsAcknowledgeFailed>
 8008724:	4603      	mov	r3, r0
 8008726:	2b00      	cmp	r3, #0
 8008728:	d001      	beq.n	800872e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800872a:	2301      	movs	r3, #1
 800872c:	e034      	b.n	8008798 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008734:	d028      	beq.n	8008788 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008736:	f7fe ff75 	bl	8007624 <HAL_GetTick>
 800873a:	4602      	mov	r2, r0
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	1ad3      	subs	r3, r2, r3
 8008740:	68ba      	ldr	r2, [r7, #8]
 8008742:	429a      	cmp	r2, r3
 8008744:	d302      	bcc.n	800874c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d11d      	bne.n	8008788 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	695b      	ldr	r3, [r3, #20]
 8008752:	f003 0304 	and.w	r3, r3, #4
 8008756:	2b04      	cmp	r3, #4
 8008758:	d016      	beq.n	8008788 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	2200      	movs	r2, #0
 800875e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	2220      	movs	r2, #32
 8008764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2200      	movs	r2, #0
 800876c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008774:	f043 0220 	orr.w	r2, r3, #32
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2200      	movs	r2, #0
 8008780:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008784:	2301      	movs	r3, #1
 8008786:	e007      	b.n	8008798 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	695b      	ldr	r3, [r3, #20]
 800878e:	f003 0304 	and.w	r3, r3, #4
 8008792:	2b04      	cmp	r3, #4
 8008794:	d1c3      	bne.n	800871e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008796:	2300      	movs	r3, #0
}
 8008798:	4618      	mov	r0, r3
 800879a:	3710      	adds	r7, #16
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}

080087a0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b083      	sub	sp, #12
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	695b      	ldr	r3, [r3, #20]
 80087ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80087b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80087b6:	d11b      	bne.n	80087f0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80087c0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2200      	movs	r2, #0
 80087c6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2220      	movs	r2, #32
 80087cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2200      	movs	r2, #0
 80087d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087dc:	f043 0204 	orr.w	r2, r3, #4
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2200      	movs	r2, #0
 80087e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80087ec:	2301      	movs	r3, #1
 80087ee:	e000      	b.n	80087f2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80087f0:	2300      	movs	r3, #0
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	370c      	adds	r7, #12
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bc80      	pop	{r7}
 80087fa:	4770      	bx	lr

080087fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b086      	sub	sp, #24
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d101      	bne.n	800880e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800880a:	2301      	movs	r3, #1
 800880c:	e272      	b.n	8008cf4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f003 0301 	and.w	r3, r3, #1
 8008816:	2b00      	cmp	r3, #0
 8008818:	f000 8087 	beq.w	800892a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800881c:	4b92      	ldr	r3, [pc, #584]	@ (8008a68 <HAL_RCC_OscConfig+0x26c>)
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	f003 030c 	and.w	r3, r3, #12
 8008824:	2b04      	cmp	r3, #4
 8008826:	d00c      	beq.n	8008842 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008828:	4b8f      	ldr	r3, [pc, #572]	@ (8008a68 <HAL_RCC_OscConfig+0x26c>)
 800882a:	685b      	ldr	r3, [r3, #4]
 800882c:	f003 030c 	and.w	r3, r3, #12
 8008830:	2b08      	cmp	r3, #8
 8008832:	d112      	bne.n	800885a <HAL_RCC_OscConfig+0x5e>
 8008834:	4b8c      	ldr	r3, [pc, #560]	@ (8008a68 <HAL_RCC_OscConfig+0x26c>)
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800883c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008840:	d10b      	bne.n	800885a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008842:	4b89      	ldr	r3, [pc, #548]	@ (8008a68 <HAL_RCC_OscConfig+0x26c>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800884a:	2b00      	cmp	r3, #0
 800884c:	d06c      	beq.n	8008928 <HAL_RCC_OscConfig+0x12c>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	685b      	ldr	r3, [r3, #4]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d168      	bne.n	8008928 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008856:	2301      	movs	r3, #1
 8008858:	e24c      	b.n	8008cf4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	685b      	ldr	r3, [r3, #4]
 800885e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008862:	d106      	bne.n	8008872 <HAL_RCC_OscConfig+0x76>
 8008864:	4b80      	ldr	r3, [pc, #512]	@ (8008a68 <HAL_RCC_OscConfig+0x26c>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4a7f      	ldr	r2, [pc, #508]	@ (8008a68 <HAL_RCC_OscConfig+0x26c>)
 800886a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800886e:	6013      	str	r3, [r2, #0]
 8008870:	e02e      	b.n	80088d0 <HAL_RCC_OscConfig+0xd4>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	685b      	ldr	r3, [r3, #4]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d10c      	bne.n	8008894 <HAL_RCC_OscConfig+0x98>
 800887a:	4b7b      	ldr	r3, [pc, #492]	@ (8008a68 <HAL_RCC_OscConfig+0x26c>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	4a7a      	ldr	r2, [pc, #488]	@ (8008a68 <HAL_RCC_OscConfig+0x26c>)
 8008880:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008884:	6013      	str	r3, [r2, #0]
 8008886:	4b78      	ldr	r3, [pc, #480]	@ (8008a68 <HAL_RCC_OscConfig+0x26c>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4a77      	ldr	r2, [pc, #476]	@ (8008a68 <HAL_RCC_OscConfig+0x26c>)
 800888c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008890:	6013      	str	r3, [r2, #0]
 8008892:	e01d      	b.n	80088d0 <HAL_RCC_OscConfig+0xd4>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	685b      	ldr	r3, [r3, #4]
 8008898:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800889c:	d10c      	bne.n	80088b8 <HAL_RCC_OscConfig+0xbc>
 800889e:	4b72      	ldr	r3, [pc, #456]	@ (8008a68 <HAL_RCC_OscConfig+0x26c>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4a71      	ldr	r2, [pc, #452]	@ (8008a68 <HAL_RCC_OscConfig+0x26c>)
 80088a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80088a8:	6013      	str	r3, [r2, #0]
 80088aa:	4b6f      	ldr	r3, [pc, #444]	@ (8008a68 <HAL_RCC_OscConfig+0x26c>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4a6e      	ldr	r2, [pc, #440]	@ (8008a68 <HAL_RCC_OscConfig+0x26c>)
 80088b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80088b4:	6013      	str	r3, [r2, #0]
 80088b6:	e00b      	b.n	80088d0 <HAL_RCC_OscConfig+0xd4>
 80088b8:	4b6b      	ldr	r3, [pc, #428]	@ (8008a68 <HAL_RCC_OscConfig+0x26c>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4a6a      	ldr	r2, [pc, #424]	@ (8008a68 <HAL_RCC_OscConfig+0x26c>)
 80088be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80088c2:	6013      	str	r3, [r2, #0]
 80088c4:	4b68      	ldr	r3, [pc, #416]	@ (8008a68 <HAL_RCC_OscConfig+0x26c>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	4a67      	ldr	r2, [pc, #412]	@ (8008a68 <HAL_RCC_OscConfig+0x26c>)
 80088ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80088ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d013      	beq.n	8008900 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088d8:	f7fe fea4 	bl	8007624 <HAL_GetTick>
 80088dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80088de:	e008      	b.n	80088f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80088e0:	f7fe fea0 	bl	8007624 <HAL_GetTick>
 80088e4:	4602      	mov	r2, r0
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	1ad3      	subs	r3, r2, r3
 80088ea:	2b64      	cmp	r3, #100	@ 0x64
 80088ec:	d901      	bls.n	80088f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80088ee:	2303      	movs	r3, #3
 80088f0:	e200      	b.n	8008cf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80088f2:	4b5d      	ldr	r3, [pc, #372]	@ (8008a68 <HAL_RCC_OscConfig+0x26c>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d0f0      	beq.n	80088e0 <HAL_RCC_OscConfig+0xe4>
 80088fe:	e014      	b.n	800892a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008900:	f7fe fe90 	bl	8007624 <HAL_GetTick>
 8008904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008906:	e008      	b.n	800891a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008908:	f7fe fe8c 	bl	8007624 <HAL_GetTick>
 800890c:	4602      	mov	r2, r0
 800890e:	693b      	ldr	r3, [r7, #16]
 8008910:	1ad3      	subs	r3, r2, r3
 8008912:	2b64      	cmp	r3, #100	@ 0x64
 8008914:	d901      	bls.n	800891a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008916:	2303      	movs	r3, #3
 8008918:	e1ec      	b.n	8008cf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800891a:	4b53      	ldr	r3, [pc, #332]	@ (8008a68 <HAL_RCC_OscConfig+0x26c>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008922:	2b00      	cmp	r3, #0
 8008924:	d1f0      	bne.n	8008908 <HAL_RCC_OscConfig+0x10c>
 8008926:	e000      	b.n	800892a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008928:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f003 0302 	and.w	r3, r3, #2
 8008932:	2b00      	cmp	r3, #0
 8008934:	d063      	beq.n	80089fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008936:	4b4c      	ldr	r3, [pc, #304]	@ (8008a68 <HAL_RCC_OscConfig+0x26c>)
 8008938:	685b      	ldr	r3, [r3, #4]
 800893a:	f003 030c 	and.w	r3, r3, #12
 800893e:	2b00      	cmp	r3, #0
 8008940:	d00b      	beq.n	800895a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8008942:	4b49      	ldr	r3, [pc, #292]	@ (8008a68 <HAL_RCC_OscConfig+0x26c>)
 8008944:	685b      	ldr	r3, [r3, #4]
 8008946:	f003 030c 	and.w	r3, r3, #12
 800894a:	2b08      	cmp	r3, #8
 800894c:	d11c      	bne.n	8008988 <HAL_RCC_OscConfig+0x18c>
 800894e:	4b46      	ldr	r3, [pc, #280]	@ (8008a68 <HAL_RCC_OscConfig+0x26c>)
 8008950:	685b      	ldr	r3, [r3, #4]
 8008952:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008956:	2b00      	cmp	r3, #0
 8008958:	d116      	bne.n	8008988 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800895a:	4b43      	ldr	r3, [pc, #268]	@ (8008a68 <HAL_RCC_OscConfig+0x26c>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f003 0302 	and.w	r3, r3, #2
 8008962:	2b00      	cmp	r3, #0
 8008964:	d005      	beq.n	8008972 <HAL_RCC_OscConfig+0x176>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	691b      	ldr	r3, [r3, #16]
 800896a:	2b01      	cmp	r3, #1
 800896c:	d001      	beq.n	8008972 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800896e:	2301      	movs	r3, #1
 8008970:	e1c0      	b.n	8008cf4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008972:	4b3d      	ldr	r3, [pc, #244]	@ (8008a68 <HAL_RCC_OscConfig+0x26c>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	695b      	ldr	r3, [r3, #20]
 800897e:	00db      	lsls	r3, r3, #3
 8008980:	4939      	ldr	r1, [pc, #228]	@ (8008a68 <HAL_RCC_OscConfig+0x26c>)
 8008982:	4313      	orrs	r3, r2
 8008984:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008986:	e03a      	b.n	80089fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	691b      	ldr	r3, [r3, #16]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d020      	beq.n	80089d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008990:	4b36      	ldr	r3, [pc, #216]	@ (8008a6c <HAL_RCC_OscConfig+0x270>)
 8008992:	2201      	movs	r2, #1
 8008994:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008996:	f7fe fe45 	bl	8007624 <HAL_GetTick>
 800899a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800899c:	e008      	b.n	80089b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800899e:	f7fe fe41 	bl	8007624 <HAL_GetTick>
 80089a2:	4602      	mov	r2, r0
 80089a4:	693b      	ldr	r3, [r7, #16]
 80089a6:	1ad3      	subs	r3, r2, r3
 80089a8:	2b02      	cmp	r3, #2
 80089aa:	d901      	bls.n	80089b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80089ac:	2303      	movs	r3, #3
 80089ae:	e1a1      	b.n	8008cf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80089b0:	4b2d      	ldr	r3, [pc, #180]	@ (8008a68 <HAL_RCC_OscConfig+0x26c>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f003 0302 	and.w	r3, r3, #2
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d0f0      	beq.n	800899e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80089bc:	4b2a      	ldr	r3, [pc, #168]	@ (8008a68 <HAL_RCC_OscConfig+0x26c>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	695b      	ldr	r3, [r3, #20]
 80089c8:	00db      	lsls	r3, r3, #3
 80089ca:	4927      	ldr	r1, [pc, #156]	@ (8008a68 <HAL_RCC_OscConfig+0x26c>)
 80089cc:	4313      	orrs	r3, r2
 80089ce:	600b      	str	r3, [r1, #0]
 80089d0:	e015      	b.n	80089fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80089d2:	4b26      	ldr	r3, [pc, #152]	@ (8008a6c <HAL_RCC_OscConfig+0x270>)
 80089d4:	2200      	movs	r2, #0
 80089d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80089d8:	f7fe fe24 	bl	8007624 <HAL_GetTick>
 80089dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80089de:	e008      	b.n	80089f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80089e0:	f7fe fe20 	bl	8007624 <HAL_GetTick>
 80089e4:	4602      	mov	r2, r0
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	1ad3      	subs	r3, r2, r3
 80089ea:	2b02      	cmp	r3, #2
 80089ec:	d901      	bls.n	80089f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80089ee:	2303      	movs	r3, #3
 80089f0:	e180      	b.n	8008cf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80089f2:	4b1d      	ldr	r3, [pc, #116]	@ (8008a68 <HAL_RCC_OscConfig+0x26c>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f003 0302 	and.w	r3, r3, #2
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d1f0      	bne.n	80089e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f003 0308 	and.w	r3, r3, #8
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d03a      	beq.n	8008a80 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	699b      	ldr	r3, [r3, #24]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d019      	beq.n	8008a46 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008a12:	4b17      	ldr	r3, [pc, #92]	@ (8008a70 <HAL_RCC_OscConfig+0x274>)
 8008a14:	2201      	movs	r2, #1
 8008a16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008a18:	f7fe fe04 	bl	8007624 <HAL_GetTick>
 8008a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008a1e:	e008      	b.n	8008a32 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008a20:	f7fe fe00 	bl	8007624 <HAL_GetTick>
 8008a24:	4602      	mov	r2, r0
 8008a26:	693b      	ldr	r3, [r7, #16]
 8008a28:	1ad3      	subs	r3, r2, r3
 8008a2a:	2b02      	cmp	r3, #2
 8008a2c:	d901      	bls.n	8008a32 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8008a2e:	2303      	movs	r3, #3
 8008a30:	e160      	b.n	8008cf4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008a32:	4b0d      	ldr	r3, [pc, #52]	@ (8008a68 <HAL_RCC_OscConfig+0x26c>)
 8008a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a36:	f003 0302 	and.w	r3, r3, #2
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d0f0      	beq.n	8008a20 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8008a3e:	2001      	movs	r0, #1
 8008a40:	f000 faba 	bl	8008fb8 <RCC_Delay>
 8008a44:	e01c      	b.n	8008a80 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008a46:	4b0a      	ldr	r3, [pc, #40]	@ (8008a70 <HAL_RCC_OscConfig+0x274>)
 8008a48:	2200      	movs	r2, #0
 8008a4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008a4c:	f7fe fdea 	bl	8007624 <HAL_GetTick>
 8008a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008a52:	e00f      	b.n	8008a74 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008a54:	f7fe fde6 	bl	8007624 <HAL_GetTick>
 8008a58:	4602      	mov	r2, r0
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	1ad3      	subs	r3, r2, r3
 8008a5e:	2b02      	cmp	r3, #2
 8008a60:	d908      	bls.n	8008a74 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8008a62:	2303      	movs	r3, #3
 8008a64:	e146      	b.n	8008cf4 <HAL_RCC_OscConfig+0x4f8>
 8008a66:	bf00      	nop
 8008a68:	40021000 	.word	0x40021000
 8008a6c:	42420000 	.word	0x42420000
 8008a70:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008a74:	4b92      	ldr	r3, [pc, #584]	@ (8008cc0 <HAL_RCC_OscConfig+0x4c4>)
 8008a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a78:	f003 0302 	and.w	r3, r3, #2
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d1e9      	bne.n	8008a54 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f003 0304 	and.w	r3, r3, #4
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	f000 80a6 	beq.w	8008bda <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008a92:	4b8b      	ldr	r3, [pc, #556]	@ (8008cc0 <HAL_RCC_OscConfig+0x4c4>)
 8008a94:	69db      	ldr	r3, [r3, #28]
 8008a96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d10d      	bne.n	8008aba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008a9e:	4b88      	ldr	r3, [pc, #544]	@ (8008cc0 <HAL_RCC_OscConfig+0x4c4>)
 8008aa0:	69db      	ldr	r3, [r3, #28]
 8008aa2:	4a87      	ldr	r2, [pc, #540]	@ (8008cc0 <HAL_RCC_OscConfig+0x4c4>)
 8008aa4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008aa8:	61d3      	str	r3, [r2, #28]
 8008aaa:	4b85      	ldr	r3, [pc, #532]	@ (8008cc0 <HAL_RCC_OscConfig+0x4c4>)
 8008aac:	69db      	ldr	r3, [r3, #28]
 8008aae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008ab2:	60bb      	str	r3, [r7, #8]
 8008ab4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008aba:	4b82      	ldr	r3, [pc, #520]	@ (8008cc4 <HAL_RCC_OscConfig+0x4c8>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d118      	bne.n	8008af8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008ac6:	4b7f      	ldr	r3, [pc, #508]	@ (8008cc4 <HAL_RCC_OscConfig+0x4c8>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4a7e      	ldr	r2, [pc, #504]	@ (8008cc4 <HAL_RCC_OscConfig+0x4c8>)
 8008acc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008ad0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008ad2:	f7fe fda7 	bl	8007624 <HAL_GetTick>
 8008ad6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008ad8:	e008      	b.n	8008aec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ada:	f7fe fda3 	bl	8007624 <HAL_GetTick>
 8008ade:	4602      	mov	r2, r0
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	1ad3      	subs	r3, r2, r3
 8008ae4:	2b64      	cmp	r3, #100	@ 0x64
 8008ae6:	d901      	bls.n	8008aec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8008ae8:	2303      	movs	r3, #3
 8008aea:	e103      	b.n	8008cf4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008aec:	4b75      	ldr	r3, [pc, #468]	@ (8008cc4 <HAL_RCC_OscConfig+0x4c8>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d0f0      	beq.n	8008ada <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	68db      	ldr	r3, [r3, #12]
 8008afc:	2b01      	cmp	r3, #1
 8008afe:	d106      	bne.n	8008b0e <HAL_RCC_OscConfig+0x312>
 8008b00:	4b6f      	ldr	r3, [pc, #444]	@ (8008cc0 <HAL_RCC_OscConfig+0x4c4>)
 8008b02:	6a1b      	ldr	r3, [r3, #32]
 8008b04:	4a6e      	ldr	r2, [pc, #440]	@ (8008cc0 <HAL_RCC_OscConfig+0x4c4>)
 8008b06:	f043 0301 	orr.w	r3, r3, #1
 8008b0a:	6213      	str	r3, [r2, #32]
 8008b0c:	e02d      	b.n	8008b6a <HAL_RCC_OscConfig+0x36e>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	68db      	ldr	r3, [r3, #12]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d10c      	bne.n	8008b30 <HAL_RCC_OscConfig+0x334>
 8008b16:	4b6a      	ldr	r3, [pc, #424]	@ (8008cc0 <HAL_RCC_OscConfig+0x4c4>)
 8008b18:	6a1b      	ldr	r3, [r3, #32]
 8008b1a:	4a69      	ldr	r2, [pc, #420]	@ (8008cc0 <HAL_RCC_OscConfig+0x4c4>)
 8008b1c:	f023 0301 	bic.w	r3, r3, #1
 8008b20:	6213      	str	r3, [r2, #32]
 8008b22:	4b67      	ldr	r3, [pc, #412]	@ (8008cc0 <HAL_RCC_OscConfig+0x4c4>)
 8008b24:	6a1b      	ldr	r3, [r3, #32]
 8008b26:	4a66      	ldr	r2, [pc, #408]	@ (8008cc0 <HAL_RCC_OscConfig+0x4c4>)
 8008b28:	f023 0304 	bic.w	r3, r3, #4
 8008b2c:	6213      	str	r3, [r2, #32]
 8008b2e:	e01c      	b.n	8008b6a <HAL_RCC_OscConfig+0x36e>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	68db      	ldr	r3, [r3, #12]
 8008b34:	2b05      	cmp	r3, #5
 8008b36:	d10c      	bne.n	8008b52 <HAL_RCC_OscConfig+0x356>
 8008b38:	4b61      	ldr	r3, [pc, #388]	@ (8008cc0 <HAL_RCC_OscConfig+0x4c4>)
 8008b3a:	6a1b      	ldr	r3, [r3, #32]
 8008b3c:	4a60      	ldr	r2, [pc, #384]	@ (8008cc0 <HAL_RCC_OscConfig+0x4c4>)
 8008b3e:	f043 0304 	orr.w	r3, r3, #4
 8008b42:	6213      	str	r3, [r2, #32]
 8008b44:	4b5e      	ldr	r3, [pc, #376]	@ (8008cc0 <HAL_RCC_OscConfig+0x4c4>)
 8008b46:	6a1b      	ldr	r3, [r3, #32]
 8008b48:	4a5d      	ldr	r2, [pc, #372]	@ (8008cc0 <HAL_RCC_OscConfig+0x4c4>)
 8008b4a:	f043 0301 	orr.w	r3, r3, #1
 8008b4e:	6213      	str	r3, [r2, #32]
 8008b50:	e00b      	b.n	8008b6a <HAL_RCC_OscConfig+0x36e>
 8008b52:	4b5b      	ldr	r3, [pc, #364]	@ (8008cc0 <HAL_RCC_OscConfig+0x4c4>)
 8008b54:	6a1b      	ldr	r3, [r3, #32]
 8008b56:	4a5a      	ldr	r2, [pc, #360]	@ (8008cc0 <HAL_RCC_OscConfig+0x4c4>)
 8008b58:	f023 0301 	bic.w	r3, r3, #1
 8008b5c:	6213      	str	r3, [r2, #32]
 8008b5e:	4b58      	ldr	r3, [pc, #352]	@ (8008cc0 <HAL_RCC_OscConfig+0x4c4>)
 8008b60:	6a1b      	ldr	r3, [r3, #32]
 8008b62:	4a57      	ldr	r2, [pc, #348]	@ (8008cc0 <HAL_RCC_OscConfig+0x4c4>)
 8008b64:	f023 0304 	bic.w	r3, r3, #4
 8008b68:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	68db      	ldr	r3, [r3, #12]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d015      	beq.n	8008b9e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008b72:	f7fe fd57 	bl	8007624 <HAL_GetTick>
 8008b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b78:	e00a      	b.n	8008b90 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b7a:	f7fe fd53 	bl	8007624 <HAL_GetTick>
 8008b7e:	4602      	mov	r2, r0
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	1ad3      	subs	r3, r2, r3
 8008b84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d901      	bls.n	8008b90 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8008b8c:	2303      	movs	r3, #3
 8008b8e:	e0b1      	b.n	8008cf4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b90:	4b4b      	ldr	r3, [pc, #300]	@ (8008cc0 <HAL_RCC_OscConfig+0x4c4>)
 8008b92:	6a1b      	ldr	r3, [r3, #32]
 8008b94:	f003 0302 	and.w	r3, r3, #2
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d0ee      	beq.n	8008b7a <HAL_RCC_OscConfig+0x37e>
 8008b9c:	e014      	b.n	8008bc8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008b9e:	f7fe fd41 	bl	8007624 <HAL_GetTick>
 8008ba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008ba4:	e00a      	b.n	8008bbc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ba6:	f7fe fd3d 	bl	8007624 <HAL_GetTick>
 8008baa:	4602      	mov	r2, r0
 8008bac:	693b      	ldr	r3, [r7, #16]
 8008bae:	1ad3      	subs	r3, r2, r3
 8008bb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d901      	bls.n	8008bbc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8008bb8:	2303      	movs	r3, #3
 8008bba:	e09b      	b.n	8008cf4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008bbc:	4b40      	ldr	r3, [pc, #256]	@ (8008cc0 <HAL_RCC_OscConfig+0x4c4>)
 8008bbe:	6a1b      	ldr	r3, [r3, #32]
 8008bc0:	f003 0302 	and.w	r3, r3, #2
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d1ee      	bne.n	8008ba6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008bc8:	7dfb      	ldrb	r3, [r7, #23]
 8008bca:	2b01      	cmp	r3, #1
 8008bcc:	d105      	bne.n	8008bda <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008bce:	4b3c      	ldr	r3, [pc, #240]	@ (8008cc0 <HAL_RCC_OscConfig+0x4c4>)
 8008bd0:	69db      	ldr	r3, [r3, #28]
 8008bd2:	4a3b      	ldr	r2, [pc, #236]	@ (8008cc0 <HAL_RCC_OscConfig+0x4c4>)
 8008bd4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008bd8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	69db      	ldr	r3, [r3, #28]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	f000 8087 	beq.w	8008cf2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008be4:	4b36      	ldr	r3, [pc, #216]	@ (8008cc0 <HAL_RCC_OscConfig+0x4c4>)
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	f003 030c 	and.w	r3, r3, #12
 8008bec:	2b08      	cmp	r3, #8
 8008bee:	d061      	beq.n	8008cb4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	69db      	ldr	r3, [r3, #28]
 8008bf4:	2b02      	cmp	r3, #2
 8008bf6:	d146      	bne.n	8008c86 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008bf8:	4b33      	ldr	r3, [pc, #204]	@ (8008cc8 <HAL_RCC_OscConfig+0x4cc>)
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008bfe:	f7fe fd11 	bl	8007624 <HAL_GetTick>
 8008c02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008c04:	e008      	b.n	8008c18 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c06:	f7fe fd0d 	bl	8007624 <HAL_GetTick>
 8008c0a:	4602      	mov	r2, r0
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	1ad3      	subs	r3, r2, r3
 8008c10:	2b02      	cmp	r3, #2
 8008c12:	d901      	bls.n	8008c18 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8008c14:	2303      	movs	r3, #3
 8008c16:	e06d      	b.n	8008cf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008c18:	4b29      	ldr	r3, [pc, #164]	@ (8008cc0 <HAL_RCC_OscConfig+0x4c4>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d1f0      	bne.n	8008c06 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6a1b      	ldr	r3, [r3, #32]
 8008c28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c2c:	d108      	bne.n	8008c40 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8008c2e:	4b24      	ldr	r3, [pc, #144]	@ (8008cc0 <HAL_RCC_OscConfig+0x4c4>)
 8008c30:	685b      	ldr	r3, [r3, #4]
 8008c32:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	689b      	ldr	r3, [r3, #8]
 8008c3a:	4921      	ldr	r1, [pc, #132]	@ (8008cc0 <HAL_RCC_OscConfig+0x4c4>)
 8008c3c:	4313      	orrs	r3, r2
 8008c3e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008c40:	4b1f      	ldr	r3, [pc, #124]	@ (8008cc0 <HAL_RCC_OscConfig+0x4c4>)
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6a19      	ldr	r1, [r3, #32]
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c50:	430b      	orrs	r3, r1
 8008c52:	491b      	ldr	r1, [pc, #108]	@ (8008cc0 <HAL_RCC_OscConfig+0x4c4>)
 8008c54:	4313      	orrs	r3, r2
 8008c56:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008c58:	4b1b      	ldr	r3, [pc, #108]	@ (8008cc8 <HAL_RCC_OscConfig+0x4cc>)
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c5e:	f7fe fce1 	bl	8007624 <HAL_GetTick>
 8008c62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008c64:	e008      	b.n	8008c78 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c66:	f7fe fcdd 	bl	8007624 <HAL_GetTick>
 8008c6a:	4602      	mov	r2, r0
 8008c6c:	693b      	ldr	r3, [r7, #16]
 8008c6e:	1ad3      	subs	r3, r2, r3
 8008c70:	2b02      	cmp	r3, #2
 8008c72:	d901      	bls.n	8008c78 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8008c74:	2303      	movs	r3, #3
 8008c76:	e03d      	b.n	8008cf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008c78:	4b11      	ldr	r3, [pc, #68]	@ (8008cc0 <HAL_RCC_OscConfig+0x4c4>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d0f0      	beq.n	8008c66 <HAL_RCC_OscConfig+0x46a>
 8008c84:	e035      	b.n	8008cf2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008c86:	4b10      	ldr	r3, [pc, #64]	@ (8008cc8 <HAL_RCC_OscConfig+0x4cc>)
 8008c88:	2200      	movs	r2, #0
 8008c8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c8c:	f7fe fcca 	bl	8007624 <HAL_GetTick>
 8008c90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008c92:	e008      	b.n	8008ca6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c94:	f7fe fcc6 	bl	8007624 <HAL_GetTick>
 8008c98:	4602      	mov	r2, r0
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	1ad3      	subs	r3, r2, r3
 8008c9e:	2b02      	cmp	r3, #2
 8008ca0:	d901      	bls.n	8008ca6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8008ca2:	2303      	movs	r3, #3
 8008ca4:	e026      	b.n	8008cf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008ca6:	4b06      	ldr	r3, [pc, #24]	@ (8008cc0 <HAL_RCC_OscConfig+0x4c4>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d1f0      	bne.n	8008c94 <HAL_RCC_OscConfig+0x498>
 8008cb2:	e01e      	b.n	8008cf2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	69db      	ldr	r3, [r3, #28]
 8008cb8:	2b01      	cmp	r3, #1
 8008cba:	d107      	bne.n	8008ccc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	e019      	b.n	8008cf4 <HAL_RCC_OscConfig+0x4f8>
 8008cc0:	40021000 	.word	0x40021000
 8008cc4:	40007000 	.word	0x40007000
 8008cc8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008ccc:	4b0b      	ldr	r3, [pc, #44]	@ (8008cfc <HAL_RCC_OscConfig+0x500>)
 8008cce:	685b      	ldr	r3, [r3, #4]
 8008cd0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6a1b      	ldr	r3, [r3, #32]
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d106      	bne.n	8008cee <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008cea:	429a      	cmp	r2, r3
 8008cec:	d001      	beq.n	8008cf2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8008cee:	2301      	movs	r3, #1
 8008cf0:	e000      	b.n	8008cf4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8008cf2:	2300      	movs	r3, #0
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3718      	adds	r7, #24
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}
 8008cfc:	40021000 	.word	0x40021000

08008d00 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b084      	sub	sp, #16
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
 8008d08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d101      	bne.n	8008d14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008d10:	2301      	movs	r3, #1
 8008d12:	e0d0      	b.n	8008eb6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008d14:	4b6a      	ldr	r3, [pc, #424]	@ (8008ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f003 0307 	and.w	r3, r3, #7
 8008d1c:	683a      	ldr	r2, [r7, #0]
 8008d1e:	429a      	cmp	r2, r3
 8008d20:	d910      	bls.n	8008d44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d22:	4b67      	ldr	r3, [pc, #412]	@ (8008ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f023 0207 	bic.w	r2, r3, #7
 8008d2a:	4965      	ldr	r1, [pc, #404]	@ (8008ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d32:	4b63      	ldr	r3, [pc, #396]	@ (8008ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f003 0307 	and.w	r3, r3, #7
 8008d3a:	683a      	ldr	r2, [r7, #0]
 8008d3c:	429a      	cmp	r2, r3
 8008d3e:	d001      	beq.n	8008d44 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8008d40:	2301      	movs	r3, #1
 8008d42:	e0b8      	b.n	8008eb6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f003 0302 	and.w	r3, r3, #2
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d020      	beq.n	8008d92 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f003 0304 	and.w	r3, r3, #4
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d005      	beq.n	8008d68 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008d5c:	4b59      	ldr	r3, [pc, #356]	@ (8008ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	4a58      	ldr	r2, [pc, #352]	@ (8008ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8008d62:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008d66:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f003 0308 	and.w	r3, r3, #8
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d005      	beq.n	8008d80 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008d74:	4b53      	ldr	r3, [pc, #332]	@ (8008ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8008d76:	685b      	ldr	r3, [r3, #4]
 8008d78:	4a52      	ldr	r2, [pc, #328]	@ (8008ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8008d7a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8008d7e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008d80:	4b50      	ldr	r3, [pc, #320]	@ (8008ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	689b      	ldr	r3, [r3, #8]
 8008d8c:	494d      	ldr	r1, [pc, #308]	@ (8008ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f003 0301 	and.w	r3, r3, #1
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d040      	beq.n	8008e20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	685b      	ldr	r3, [r3, #4]
 8008da2:	2b01      	cmp	r3, #1
 8008da4:	d107      	bne.n	8008db6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008da6:	4b47      	ldr	r3, [pc, #284]	@ (8008ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d115      	bne.n	8008dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008db2:	2301      	movs	r3, #1
 8008db4:	e07f      	b.n	8008eb6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	685b      	ldr	r3, [r3, #4]
 8008dba:	2b02      	cmp	r3, #2
 8008dbc:	d107      	bne.n	8008dce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008dbe:	4b41      	ldr	r3, [pc, #260]	@ (8008ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d109      	bne.n	8008dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008dca:	2301      	movs	r3, #1
 8008dcc:	e073      	b.n	8008eb6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008dce:	4b3d      	ldr	r3, [pc, #244]	@ (8008ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f003 0302 	and.w	r3, r3, #2
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d101      	bne.n	8008dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008dda:	2301      	movs	r3, #1
 8008ddc:	e06b      	b.n	8008eb6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008dde:	4b39      	ldr	r3, [pc, #228]	@ (8008ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8008de0:	685b      	ldr	r3, [r3, #4]
 8008de2:	f023 0203 	bic.w	r2, r3, #3
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	685b      	ldr	r3, [r3, #4]
 8008dea:	4936      	ldr	r1, [pc, #216]	@ (8008ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8008dec:	4313      	orrs	r3, r2
 8008dee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008df0:	f7fe fc18 	bl	8007624 <HAL_GetTick>
 8008df4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008df6:	e00a      	b.n	8008e0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008df8:	f7fe fc14 	bl	8007624 <HAL_GetTick>
 8008dfc:	4602      	mov	r2, r0
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	1ad3      	subs	r3, r2, r3
 8008e02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d901      	bls.n	8008e0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008e0a:	2303      	movs	r3, #3
 8008e0c:	e053      	b.n	8008eb6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e0e:	4b2d      	ldr	r3, [pc, #180]	@ (8008ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8008e10:	685b      	ldr	r3, [r3, #4]
 8008e12:	f003 020c 	and.w	r2, r3, #12
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	685b      	ldr	r3, [r3, #4]
 8008e1a:	009b      	lsls	r3, r3, #2
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	d1eb      	bne.n	8008df8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008e20:	4b27      	ldr	r3, [pc, #156]	@ (8008ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f003 0307 	and.w	r3, r3, #7
 8008e28:	683a      	ldr	r2, [r7, #0]
 8008e2a:	429a      	cmp	r2, r3
 8008e2c:	d210      	bcs.n	8008e50 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e2e:	4b24      	ldr	r3, [pc, #144]	@ (8008ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f023 0207 	bic.w	r2, r3, #7
 8008e36:	4922      	ldr	r1, [pc, #136]	@ (8008ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e3e:	4b20      	ldr	r3, [pc, #128]	@ (8008ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f003 0307 	and.w	r3, r3, #7
 8008e46:	683a      	ldr	r2, [r7, #0]
 8008e48:	429a      	cmp	r2, r3
 8008e4a:	d001      	beq.n	8008e50 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	e032      	b.n	8008eb6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f003 0304 	and.w	r3, r3, #4
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d008      	beq.n	8008e6e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008e5c:	4b19      	ldr	r3, [pc, #100]	@ (8008ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8008e5e:	685b      	ldr	r3, [r3, #4]
 8008e60:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	68db      	ldr	r3, [r3, #12]
 8008e68:	4916      	ldr	r1, [pc, #88]	@ (8008ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f003 0308 	and.w	r3, r3, #8
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d009      	beq.n	8008e8e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008e7a:	4b12      	ldr	r3, [pc, #72]	@ (8008ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8008e7c:	685b      	ldr	r3, [r3, #4]
 8008e7e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	691b      	ldr	r3, [r3, #16]
 8008e86:	00db      	lsls	r3, r3, #3
 8008e88:	490e      	ldr	r1, [pc, #56]	@ (8008ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8008e8a:	4313      	orrs	r3, r2
 8008e8c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008e8e:	f000 f821 	bl	8008ed4 <HAL_RCC_GetSysClockFreq>
 8008e92:	4602      	mov	r2, r0
 8008e94:	4b0b      	ldr	r3, [pc, #44]	@ (8008ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8008e96:	685b      	ldr	r3, [r3, #4]
 8008e98:	091b      	lsrs	r3, r3, #4
 8008e9a:	f003 030f 	and.w	r3, r3, #15
 8008e9e:	490a      	ldr	r1, [pc, #40]	@ (8008ec8 <HAL_RCC_ClockConfig+0x1c8>)
 8008ea0:	5ccb      	ldrb	r3, [r1, r3]
 8008ea2:	fa22 f303 	lsr.w	r3, r2, r3
 8008ea6:	4a09      	ldr	r2, [pc, #36]	@ (8008ecc <HAL_RCC_ClockConfig+0x1cc>)
 8008ea8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008eaa:	4b09      	ldr	r3, [pc, #36]	@ (8008ed0 <HAL_RCC_ClockConfig+0x1d0>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f7fe fb76 	bl	80075a0 <HAL_InitTick>

  return HAL_OK;
 8008eb4:	2300      	movs	r3, #0
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	3710      	adds	r7, #16
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}
 8008ebe:	bf00      	nop
 8008ec0:	40022000 	.word	0x40022000
 8008ec4:	40021000 	.word	0x40021000
 8008ec8:	0800cd70 	.word	0x0800cd70
 8008ecc:	20000008 	.word	0x20000008
 8008ed0:	2000000c 	.word	0x2000000c

08008ed4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b087      	sub	sp, #28
 8008ed8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008eda:	2300      	movs	r3, #0
 8008edc:	60fb      	str	r3, [r7, #12]
 8008ede:	2300      	movs	r3, #0
 8008ee0:	60bb      	str	r3, [r7, #8]
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	617b      	str	r3, [r7, #20]
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8008eea:	2300      	movs	r3, #0
 8008eec:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8008eee:	4b1e      	ldr	r3, [pc, #120]	@ (8008f68 <HAL_RCC_GetSysClockFreq+0x94>)
 8008ef0:	685b      	ldr	r3, [r3, #4]
 8008ef2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	f003 030c 	and.w	r3, r3, #12
 8008efa:	2b04      	cmp	r3, #4
 8008efc:	d002      	beq.n	8008f04 <HAL_RCC_GetSysClockFreq+0x30>
 8008efe:	2b08      	cmp	r3, #8
 8008f00:	d003      	beq.n	8008f0a <HAL_RCC_GetSysClockFreq+0x36>
 8008f02:	e027      	b.n	8008f54 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008f04:	4b19      	ldr	r3, [pc, #100]	@ (8008f6c <HAL_RCC_GetSysClockFreq+0x98>)
 8008f06:	613b      	str	r3, [r7, #16]
      break;
 8008f08:	e027      	b.n	8008f5a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	0c9b      	lsrs	r3, r3, #18
 8008f0e:	f003 030f 	and.w	r3, r3, #15
 8008f12:	4a17      	ldr	r2, [pc, #92]	@ (8008f70 <HAL_RCC_GetSysClockFreq+0x9c>)
 8008f14:	5cd3      	ldrb	r3, [r2, r3]
 8008f16:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d010      	beq.n	8008f44 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008f22:	4b11      	ldr	r3, [pc, #68]	@ (8008f68 <HAL_RCC_GetSysClockFreq+0x94>)
 8008f24:	685b      	ldr	r3, [r3, #4]
 8008f26:	0c5b      	lsrs	r3, r3, #17
 8008f28:	f003 0301 	and.w	r3, r3, #1
 8008f2c:	4a11      	ldr	r2, [pc, #68]	@ (8008f74 <HAL_RCC_GetSysClockFreq+0xa0>)
 8008f2e:	5cd3      	ldrb	r3, [r2, r3]
 8008f30:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	4a0d      	ldr	r2, [pc, #52]	@ (8008f6c <HAL_RCC_GetSysClockFreq+0x98>)
 8008f36:	fb03 f202 	mul.w	r2, r3, r2
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f40:	617b      	str	r3, [r7, #20]
 8008f42:	e004      	b.n	8008f4e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	4a0c      	ldr	r2, [pc, #48]	@ (8008f78 <HAL_RCC_GetSysClockFreq+0xa4>)
 8008f48:	fb02 f303 	mul.w	r3, r2, r3
 8008f4c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	613b      	str	r3, [r7, #16]
      break;
 8008f52:	e002      	b.n	8008f5a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008f54:	4b05      	ldr	r3, [pc, #20]	@ (8008f6c <HAL_RCC_GetSysClockFreq+0x98>)
 8008f56:	613b      	str	r3, [r7, #16]
      break;
 8008f58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008f5a:	693b      	ldr	r3, [r7, #16]
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	371c      	adds	r7, #28
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bc80      	pop	{r7}
 8008f64:	4770      	bx	lr
 8008f66:	bf00      	nop
 8008f68:	40021000 	.word	0x40021000
 8008f6c:	007a1200 	.word	0x007a1200
 8008f70:	0800cd88 	.word	0x0800cd88
 8008f74:	0800cd98 	.word	0x0800cd98
 8008f78:	003d0900 	.word	0x003d0900

08008f7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008f80:	4b02      	ldr	r3, [pc, #8]	@ (8008f8c <HAL_RCC_GetHCLKFreq+0x10>)
 8008f82:	681b      	ldr	r3, [r3, #0]
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bc80      	pop	{r7}
 8008f8a:	4770      	bx	lr
 8008f8c:	20000008 	.word	0x20000008

08008f90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008f94:	f7ff fff2 	bl	8008f7c <HAL_RCC_GetHCLKFreq>
 8008f98:	4602      	mov	r2, r0
 8008f9a:	4b05      	ldr	r3, [pc, #20]	@ (8008fb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008f9c:	685b      	ldr	r3, [r3, #4]
 8008f9e:	0a1b      	lsrs	r3, r3, #8
 8008fa0:	f003 0307 	and.w	r3, r3, #7
 8008fa4:	4903      	ldr	r1, [pc, #12]	@ (8008fb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008fa6:	5ccb      	ldrb	r3, [r1, r3]
 8008fa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	bd80      	pop	{r7, pc}
 8008fb0:	40021000 	.word	0x40021000
 8008fb4:	0800cd80 	.word	0x0800cd80

08008fb8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b085      	sub	sp, #20
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008fc0:	4b0a      	ldr	r3, [pc, #40]	@ (8008fec <RCC_Delay+0x34>)
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	4a0a      	ldr	r2, [pc, #40]	@ (8008ff0 <RCC_Delay+0x38>)
 8008fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8008fca:	0a5b      	lsrs	r3, r3, #9
 8008fcc:	687a      	ldr	r2, [r7, #4]
 8008fce:	fb02 f303 	mul.w	r3, r2, r3
 8008fd2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8008fd4:	bf00      	nop
  }
  while (Delay --);
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	1e5a      	subs	r2, r3, #1
 8008fda:	60fa      	str	r2, [r7, #12]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d1f9      	bne.n	8008fd4 <RCC_Delay+0x1c>
}
 8008fe0:	bf00      	nop
 8008fe2:	bf00      	nop
 8008fe4:	3714      	adds	r7, #20
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bc80      	pop	{r7}
 8008fea:	4770      	bx	lr
 8008fec:	20000008 	.word	0x20000008
 8008ff0:	10624dd3 	.word	0x10624dd3

08008ff4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b082      	sub	sp, #8
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d101      	bne.n	8009006 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009002:	2301      	movs	r3, #1
 8009004:	e076      	b.n	80090f4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800900a:	2b00      	cmp	r3, #0
 800900c:	d108      	bne.n	8009020 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	685b      	ldr	r3, [r3, #4]
 8009012:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009016:	d009      	beq.n	800902c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2200      	movs	r2, #0
 800901c:	61da      	str	r2, [r3, #28]
 800901e:	e005      	b.n	800902c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2200      	movs	r2, #0
 8009024:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2200      	movs	r2, #0
 800902a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2200      	movs	r2, #0
 8009030:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009038:	b2db      	uxtb	r3, r3
 800903a:	2b00      	cmp	r3, #0
 800903c:	d106      	bne.n	800904c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2200      	movs	r2, #0
 8009042:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f7fd fe26 	bl	8006c98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2202      	movs	r2, #2
 8009050:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	681a      	ldr	r2, [r3, #0]
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009062:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	685b      	ldr	r3, [r3, #4]
 8009068:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	689b      	ldr	r3, [r3, #8]
 8009070:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009074:	431a      	orrs	r2, r3
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	68db      	ldr	r3, [r3, #12]
 800907a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800907e:	431a      	orrs	r2, r3
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	691b      	ldr	r3, [r3, #16]
 8009084:	f003 0302 	and.w	r3, r3, #2
 8009088:	431a      	orrs	r2, r3
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	695b      	ldr	r3, [r3, #20]
 800908e:	f003 0301 	and.w	r3, r3, #1
 8009092:	431a      	orrs	r2, r3
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	699b      	ldr	r3, [r3, #24]
 8009098:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800909c:	431a      	orrs	r2, r3
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	69db      	ldr	r3, [r3, #28]
 80090a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80090a6:	431a      	orrs	r2, r3
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6a1b      	ldr	r3, [r3, #32]
 80090ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090b0:	ea42 0103 	orr.w	r1, r2, r3
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090b8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	430a      	orrs	r2, r1
 80090c2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	699b      	ldr	r3, [r3, #24]
 80090c8:	0c1a      	lsrs	r2, r3, #16
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f002 0204 	and.w	r2, r2, #4
 80090d2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	69da      	ldr	r2, [r3, #28]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80090e2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2200      	movs	r2, #0
 80090e8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2201      	movs	r2, #1
 80090ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80090f2:	2300      	movs	r3, #0
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	3708      	adds	r7, #8
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}

080090fc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b088      	sub	sp, #32
 8009100:	af00      	add	r7, sp, #0
 8009102:	60f8      	str	r0, [r7, #12]
 8009104:	60b9      	str	r1, [r7, #8]
 8009106:	603b      	str	r3, [r7, #0]
 8009108:	4613      	mov	r3, r2
 800910a:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800910c:	f7fe fa8a 	bl	8007624 <HAL_GetTick>
 8009110:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8009112:	88fb      	ldrh	r3, [r7, #6]
 8009114:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800911c:	b2db      	uxtb	r3, r3
 800911e:	2b01      	cmp	r3, #1
 8009120:	d001      	beq.n	8009126 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8009122:	2302      	movs	r3, #2
 8009124:	e12a      	b.n	800937c <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d002      	beq.n	8009132 <HAL_SPI_Transmit+0x36>
 800912c:	88fb      	ldrh	r3, [r7, #6]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d101      	bne.n	8009136 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8009132:	2301      	movs	r3, #1
 8009134:	e122      	b.n	800937c <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800913c:	2b01      	cmp	r3, #1
 800913e:	d101      	bne.n	8009144 <HAL_SPI_Transmit+0x48>
 8009140:	2302      	movs	r3, #2
 8009142:	e11b      	b.n	800937c <HAL_SPI_Transmit+0x280>
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	2201      	movs	r2, #1
 8009148:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	2203      	movs	r2, #3
 8009150:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	2200      	movs	r2, #0
 8009158:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	68ba      	ldr	r2, [r7, #8]
 800915e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	88fa      	ldrh	r2, [r7, #6]
 8009164:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	88fa      	ldrh	r2, [r7, #6]
 800916a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	2200      	movs	r2, #0
 8009170:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	2200      	movs	r2, #0
 8009176:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	2200      	movs	r2, #0
 800917c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	2200      	movs	r2, #0
 8009182:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	2200      	movs	r2, #0
 8009188:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	689b      	ldr	r3, [r3, #8]
 800918e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009192:	d10f      	bne.n	80091b4 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	681a      	ldr	r2, [r3, #0]
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80091a2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	681a      	ldr	r2, [r3, #0]
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80091b2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091be:	2b40      	cmp	r3, #64	@ 0x40
 80091c0:	d007      	beq.n	80091d2 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	681a      	ldr	r2, [r3, #0]
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80091d0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	68db      	ldr	r3, [r3, #12]
 80091d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80091da:	d152      	bne.n	8009282 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	685b      	ldr	r3, [r3, #4]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d002      	beq.n	80091ea <HAL_SPI_Transmit+0xee>
 80091e4:	8b7b      	ldrh	r3, [r7, #26]
 80091e6:	2b01      	cmp	r3, #1
 80091e8:	d145      	bne.n	8009276 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091ee:	881a      	ldrh	r2, [r3, #0]
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091fa:	1c9a      	adds	r2, r3, #2
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009204:	b29b      	uxth	r3, r3
 8009206:	3b01      	subs	r3, #1
 8009208:	b29a      	uxth	r2, r3
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800920e:	e032      	b.n	8009276 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	689b      	ldr	r3, [r3, #8]
 8009216:	f003 0302 	and.w	r3, r3, #2
 800921a:	2b02      	cmp	r3, #2
 800921c:	d112      	bne.n	8009244 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009222:	881a      	ldrh	r2, [r3, #0]
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800922e:	1c9a      	adds	r2, r3, #2
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009238:	b29b      	uxth	r3, r3
 800923a:	3b01      	subs	r3, #1
 800923c:	b29a      	uxth	r2, r3
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	86da      	strh	r2, [r3, #54]	@ 0x36
 8009242:	e018      	b.n	8009276 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009244:	f7fe f9ee 	bl	8007624 <HAL_GetTick>
 8009248:	4602      	mov	r2, r0
 800924a:	69fb      	ldr	r3, [r7, #28]
 800924c:	1ad3      	subs	r3, r2, r3
 800924e:	683a      	ldr	r2, [r7, #0]
 8009250:	429a      	cmp	r2, r3
 8009252:	d803      	bhi.n	800925c <HAL_SPI_Transmit+0x160>
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800925a:	d102      	bne.n	8009262 <HAL_SPI_Transmit+0x166>
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d109      	bne.n	8009276 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	2201      	movs	r2, #1
 8009266:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	2200      	movs	r2, #0
 800926e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8009272:	2303      	movs	r3, #3
 8009274:	e082      	b.n	800937c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800927a:	b29b      	uxth	r3, r3
 800927c:	2b00      	cmp	r3, #0
 800927e:	d1c7      	bne.n	8009210 <HAL_SPI_Transmit+0x114>
 8009280:	e053      	b.n	800932a <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	685b      	ldr	r3, [r3, #4]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d002      	beq.n	8009290 <HAL_SPI_Transmit+0x194>
 800928a:	8b7b      	ldrh	r3, [r7, #26]
 800928c:	2b01      	cmp	r3, #1
 800928e:	d147      	bne.n	8009320 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	330c      	adds	r3, #12
 800929a:	7812      	ldrb	r2, [r2, #0]
 800929c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092a2:	1c5a      	adds	r2, r3, #1
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80092ac:	b29b      	uxth	r3, r3
 80092ae:	3b01      	subs	r3, #1
 80092b0:	b29a      	uxth	r2, r3
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80092b6:	e033      	b.n	8009320 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	689b      	ldr	r3, [r3, #8]
 80092be:	f003 0302 	and.w	r3, r3, #2
 80092c2:	2b02      	cmp	r3, #2
 80092c4:	d113      	bne.n	80092ee <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	330c      	adds	r3, #12
 80092d0:	7812      	ldrb	r2, [r2, #0]
 80092d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092d8:	1c5a      	adds	r2, r3, #1
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80092e2:	b29b      	uxth	r3, r3
 80092e4:	3b01      	subs	r3, #1
 80092e6:	b29a      	uxth	r2, r3
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	86da      	strh	r2, [r3, #54]	@ 0x36
 80092ec:	e018      	b.n	8009320 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80092ee:	f7fe f999 	bl	8007624 <HAL_GetTick>
 80092f2:	4602      	mov	r2, r0
 80092f4:	69fb      	ldr	r3, [r7, #28]
 80092f6:	1ad3      	subs	r3, r2, r3
 80092f8:	683a      	ldr	r2, [r7, #0]
 80092fa:	429a      	cmp	r2, r3
 80092fc:	d803      	bhi.n	8009306 <HAL_SPI_Transmit+0x20a>
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009304:	d102      	bne.n	800930c <HAL_SPI_Transmit+0x210>
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d109      	bne.n	8009320 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	2201      	movs	r2, #1
 8009310:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	2200      	movs	r2, #0
 8009318:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800931c:	2303      	movs	r3, #3
 800931e:	e02d      	b.n	800937c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009324:	b29b      	uxth	r3, r3
 8009326:	2b00      	cmp	r3, #0
 8009328:	d1c6      	bne.n	80092b8 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800932a:	69fa      	ldr	r2, [r7, #28]
 800932c:	6839      	ldr	r1, [r7, #0]
 800932e:	68f8      	ldr	r0, [r7, #12]
 8009330:	f000 fbc4 	bl	8009abc <SPI_EndRxTxTransaction>
 8009334:	4603      	mov	r3, r0
 8009336:	2b00      	cmp	r3, #0
 8009338:	d002      	beq.n	8009340 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	2220      	movs	r2, #32
 800933e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	689b      	ldr	r3, [r3, #8]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d10a      	bne.n	800935e <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009348:	2300      	movs	r3, #0
 800934a:	617b      	str	r3, [r7, #20]
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	68db      	ldr	r3, [r3, #12]
 8009352:	617b      	str	r3, [r7, #20]
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	689b      	ldr	r3, [r3, #8]
 800935a:	617b      	str	r3, [r7, #20]
 800935c:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	2201      	movs	r2, #1
 8009362:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	2200      	movs	r2, #0
 800936a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009372:	2b00      	cmp	r3, #0
 8009374:	d001      	beq.n	800937a <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8009376:	2301      	movs	r3, #1
 8009378:	e000      	b.n	800937c <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800937a:	2300      	movs	r3, #0
  }
}
 800937c:	4618      	mov	r0, r3
 800937e:	3720      	adds	r7, #32
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}

08009384 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b088      	sub	sp, #32
 8009388:	af02      	add	r7, sp, #8
 800938a:	60f8      	str	r0, [r7, #12]
 800938c:	60b9      	str	r1, [r7, #8]
 800938e:	603b      	str	r3, [r7, #0]
 8009390:	4613      	mov	r3, r2
 8009392:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800939a:	b2db      	uxtb	r3, r3
 800939c:	2b01      	cmp	r3, #1
 800939e:	d001      	beq.n	80093a4 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80093a0:	2302      	movs	r3, #2
 80093a2:	e104      	b.n	80095ae <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	685b      	ldr	r3, [r3, #4]
 80093a8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80093ac:	d112      	bne.n	80093d4 <HAL_SPI_Receive+0x50>
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	689b      	ldr	r3, [r3, #8]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d10e      	bne.n	80093d4 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	2204      	movs	r2, #4
 80093ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80093be:	88fa      	ldrh	r2, [r7, #6]
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	9300      	str	r3, [sp, #0]
 80093c4:	4613      	mov	r3, r2
 80093c6:	68ba      	ldr	r2, [r7, #8]
 80093c8:	68b9      	ldr	r1, [r7, #8]
 80093ca:	68f8      	ldr	r0, [r7, #12]
 80093cc:	f000 f8f3 	bl	80095b6 <HAL_SPI_TransmitReceive>
 80093d0:	4603      	mov	r3, r0
 80093d2:	e0ec      	b.n	80095ae <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80093d4:	f7fe f926 	bl	8007624 <HAL_GetTick>
 80093d8:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d002      	beq.n	80093e6 <HAL_SPI_Receive+0x62>
 80093e0:	88fb      	ldrh	r3, [r7, #6]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d101      	bne.n	80093ea <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80093e6:	2301      	movs	r3, #1
 80093e8:	e0e1      	b.n	80095ae <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80093f0:	2b01      	cmp	r3, #1
 80093f2:	d101      	bne.n	80093f8 <HAL_SPI_Receive+0x74>
 80093f4:	2302      	movs	r3, #2
 80093f6:	e0da      	b.n	80095ae <HAL_SPI_Receive+0x22a>
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	2201      	movs	r2, #1
 80093fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	2204      	movs	r2, #4
 8009404:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	2200      	movs	r2, #0
 800940c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	68ba      	ldr	r2, [r7, #8]
 8009412:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	88fa      	ldrh	r2, [r7, #6]
 8009418:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	88fa      	ldrh	r2, [r7, #6]
 800941e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	2200      	movs	r2, #0
 8009424:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	2200      	movs	r2, #0
 800942a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	2200      	movs	r2, #0
 8009430:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	2200      	movs	r2, #0
 8009436:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	2200      	movs	r2, #0
 800943c:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	689b      	ldr	r3, [r3, #8]
 8009442:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009446:	d10f      	bne.n	8009468 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	681a      	ldr	r2, [r3, #0]
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009456:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	681a      	ldr	r2, [r3, #0]
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009466:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009472:	2b40      	cmp	r3, #64	@ 0x40
 8009474:	d007      	beq.n	8009486 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	681a      	ldr	r2, [r3, #0]
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009484:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	68db      	ldr	r3, [r3, #12]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d170      	bne.n	8009570 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800948e:	e035      	b.n	80094fc <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	689b      	ldr	r3, [r3, #8]
 8009496:	f003 0301 	and.w	r3, r3, #1
 800949a:	2b01      	cmp	r3, #1
 800949c:	d115      	bne.n	80094ca <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f103 020c 	add.w	r2, r3, #12
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094aa:	7812      	ldrb	r2, [r2, #0]
 80094ac:	b2d2      	uxtb	r2, r2
 80094ae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094b4:	1c5a      	adds	r2, r3, #1
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80094be:	b29b      	uxth	r3, r3
 80094c0:	3b01      	subs	r3, #1
 80094c2:	b29a      	uxth	r2, r3
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80094c8:	e018      	b.n	80094fc <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80094ca:	f7fe f8ab 	bl	8007624 <HAL_GetTick>
 80094ce:	4602      	mov	r2, r0
 80094d0:	697b      	ldr	r3, [r7, #20]
 80094d2:	1ad3      	subs	r3, r2, r3
 80094d4:	683a      	ldr	r2, [r7, #0]
 80094d6:	429a      	cmp	r2, r3
 80094d8:	d803      	bhi.n	80094e2 <HAL_SPI_Receive+0x15e>
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094e0:	d102      	bne.n	80094e8 <HAL_SPI_Receive+0x164>
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d109      	bne.n	80094fc <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	2201      	movs	r2, #1
 80094ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	2200      	movs	r2, #0
 80094f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80094f8:	2303      	movs	r3, #3
 80094fa:	e058      	b.n	80095ae <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009500:	b29b      	uxth	r3, r3
 8009502:	2b00      	cmp	r3, #0
 8009504:	d1c4      	bne.n	8009490 <HAL_SPI_Receive+0x10c>
 8009506:	e038      	b.n	800957a <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	689b      	ldr	r3, [r3, #8]
 800950e:	f003 0301 	and.w	r3, r3, #1
 8009512:	2b01      	cmp	r3, #1
 8009514:	d113      	bne.n	800953e <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	68da      	ldr	r2, [r3, #12]
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009520:	b292      	uxth	r2, r2
 8009522:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009528:	1c9a      	adds	r2, r3, #2
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009532:	b29b      	uxth	r3, r3
 8009534:	3b01      	subs	r3, #1
 8009536:	b29a      	uxth	r2, r3
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800953c:	e018      	b.n	8009570 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800953e:	f7fe f871 	bl	8007624 <HAL_GetTick>
 8009542:	4602      	mov	r2, r0
 8009544:	697b      	ldr	r3, [r7, #20]
 8009546:	1ad3      	subs	r3, r2, r3
 8009548:	683a      	ldr	r2, [r7, #0]
 800954a:	429a      	cmp	r2, r3
 800954c:	d803      	bhi.n	8009556 <HAL_SPI_Receive+0x1d2>
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009554:	d102      	bne.n	800955c <HAL_SPI_Receive+0x1d8>
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d109      	bne.n	8009570 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	2201      	movs	r2, #1
 8009560:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	2200      	movs	r2, #0
 8009568:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800956c:	2303      	movs	r3, #3
 800956e:	e01e      	b.n	80095ae <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009574:	b29b      	uxth	r3, r3
 8009576:	2b00      	cmp	r3, #0
 8009578:	d1c6      	bne.n	8009508 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800957a:	697a      	ldr	r2, [r7, #20]
 800957c:	6839      	ldr	r1, [r7, #0]
 800957e:	68f8      	ldr	r0, [r7, #12]
 8009580:	f000 fa4a 	bl	8009a18 <SPI_EndRxTransaction>
 8009584:	4603      	mov	r3, r0
 8009586:	2b00      	cmp	r3, #0
 8009588:	d002      	beq.n	8009590 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	2220      	movs	r2, #32
 800958e:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	2201      	movs	r2, #1
 8009594:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	2200      	movs	r2, #0
 800959c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d001      	beq.n	80095ac <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80095a8:	2301      	movs	r3, #1
 80095aa:	e000      	b.n	80095ae <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80095ac:	2300      	movs	r3, #0
  }
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	3718      	adds	r7, #24
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}

080095b6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80095b6:	b580      	push	{r7, lr}
 80095b8:	b08a      	sub	sp, #40	@ 0x28
 80095ba:	af00      	add	r7, sp, #0
 80095bc:	60f8      	str	r0, [r7, #12]
 80095be:	60b9      	str	r1, [r7, #8]
 80095c0:	607a      	str	r2, [r7, #4]
 80095c2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80095c4:	2301      	movs	r3, #1
 80095c6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80095c8:	f7fe f82c 	bl	8007624 <HAL_GetTick>
 80095cc:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80095d4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	685b      	ldr	r3, [r3, #4]
 80095da:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80095dc:	887b      	ldrh	r3, [r7, #2]
 80095de:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80095e0:	7ffb      	ldrb	r3, [r7, #31]
 80095e2:	2b01      	cmp	r3, #1
 80095e4:	d00c      	beq.n	8009600 <HAL_SPI_TransmitReceive+0x4a>
 80095e6:	69bb      	ldr	r3, [r7, #24]
 80095e8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80095ec:	d106      	bne.n	80095fc <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	689b      	ldr	r3, [r3, #8]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d102      	bne.n	80095fc <HAL_SPI_TransmitReceive+0x46>
 80095f6:	7ffb      	ldrb	r3, [r7, #31]
 80095f8:	2b04      	cmp	r3, #4
 80095fa:	d001      	beq.n	8009600 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80095fc:	2302      	movs	r3, #2
 80095fe:	e17f      	b.n	8009900 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d005      	beq.n	8009612 <HAL_SPI_TransmitReceive+0x5c>
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d002      	beq.n	8009612 <HAL_SPI_TransmitReceive+0x5c>
 800960c:	887b      	ldrh	r3, [r7, #2]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d101      	bne.n	8009616 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8009612:	2301      	movs	r3, #1
 8009614:	e174      	b.n	8009900 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800961c:	2b01      	cmp	r3, #1
 800961e:	d101      	bne.n	8009624 <HAL_SPI_TransmitReceive+0x6e>
 8009620:	2302      	movs	r3, #2
 8009622:	e16d      	b.n	8009900 <HAL_SPI_TransmitReceive+0x34a>
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	2201      	movs	r2, #1
 8009628:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009632:	b2db      	uxtb	r3, r3
 8009634:	2b04      	cmp	r3, #4
 8009636:	d003      	beq.n	8009640 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	2205      	movs	r2, #5
 800963c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	2200      	movs	r2, #0
 8009644:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	687a      	ldr	r2, [r7, #4]
 800964a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	887a      	ldrh	r2, [r7, #2]
 8009650:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	887a      	ldrh	r2, [r7, #2]
 8009656:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	68ba      	ldr	r2, [r7, #8]
 800965c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	887a      	ldrh	r2, [r7, #2]
 8009662:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	887a      	ldrh	r2, [r7, #2]
 8009668:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	2200      	movs	r2, #0
 800966e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	2200      	movs	r2, #0
 8009674:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009680:	2b40      	cmp	r3, #64	@ 0x40
 8009682:	d007      	beq.n	8009694 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	681a      	ldr	r2, [r3, #0]
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009692:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	68db      	ldr	r3, [r3, #12]
 8009698:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800969c:	d17e      	bne.n	800979c <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	685b      	ldr	r3, [r3, #4]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d002      	beq.n	80096ac <HAL_SPI_TransmitReceive+0xf6>
 80096a6:	8afb      	ldrh	r3, [r7, #22]
 80096a8:	2b01      	cmp	r3, #1
 80096aa:	d16c      	bne.n	8009786 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096b0:	881a      	ldrh	r2, [r3, #0]
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096bc:	1c9a      	adds	r2, r3, #2
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80096c6:	b29b      	uxth	r3, r3
 80096c8:	3b01      	subs	r3, #1
 80096ca:	b29a      	uxth	r2, r3
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80096d0:	e059      	b.n	8009786 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	689b      	ldr	r3, [r3, #8]
 80096d8:	f003 0302 	and.w	r3, r3, #2
 80096dc:	2b02      	cmp	r3, #2
 80096de:	d11b      	bne.n	8009718 <HAL_SPI_TransmitReceive+0x162>
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80096e4:	b29b      	uxth	r3, r3
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d016      	beq.n	8009718 <HAL_SPI_TransmitReceive+0x162>
 80096ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096ec:	2b01      	cmp	r3, #1
 80096ee:	d113      	bne.n	8009718 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096f4:	881a      	ldrh	r2, [r3, #0]
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009700:	1c9a      	adds	r2, r3, #2
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800970a:	b29b      	uxth	r3, r3
 800970c:	3b01      	subs	r3, #1
 800970e:	b29a      	uxth	r2, r3
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009714:	2300      	movs	r3, #0
 8009716:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	689b      	ldr	r3, [r3, #8]
 800971e:	f003 0301 	and.w	r3, r3, #1
 8009722:	2b01      	cmp	r3, #1
 8009724:	d119      	bne.n	800975a <HAL_SPI_TransmitReceive+0x1a4>
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800972a:	b29b      	uxth	r3, r3
 800972c:	2b00      	cmp	r3, #0
 800972e:	d014      	beq.n	800975a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	68da      	ldr	r2, [r3, #12]
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800973a:	b292      	uxth	r2, r2
 800973c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009742:	1c9a      	adds	r2, r3, #2
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800974c:	b29b      	uxth	r3, r3
 800974e:	3b01      	subs	r3, #1
 8009750:	b29a      	uxth	r2, r3
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009756:	2301      	movs	r3, #1
 8009758:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800975a:	f7fd ff63 	bl	8007624 <HAL_GetTick>
 800975e:	4602      	mov	r2, r0
 8009760:	6a3b      	ldr	r3, [r7, #32]
 8009762:	1ad3      	subs	r3, r2, r3
 8009764:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009766:	429a      	cmp	r2, r3
 8009768:	d80d      	bhi.n	8009786 <HAL_SPI_TransmitReceive+0x1d0>
 800976a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800976c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009770:	d009      	beq.n	8009786 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	2201      	movs	r2, #1
 8009776:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	2200      	movs	r2, #0
 800977e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8009782:	2303      	movs	r3, #3
 8009784:	e0bc      	b.n	8009900 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800978a:	b29b      	uxth	r3, r3
 800978c:	2b00      	cmp	r3, #0
 800978e:	d1a0      	bne.n	80096d2 <HAL_SPI_TransmitReceive+0x11c>
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009794:	b29b      	uxth	r3, r3
 8009796:	2b00      	cmp	r3, #0
 8009798:	d19b      	bne.n	80096d2 <HAL_SPI_TransmitReceive+0x11c>
 800979a:	e082      	b.n	80098a2 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	685b      	ldr	r3, [r3, #4]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d002      	beq.n	80097aa <HAL_SPI_TransmitReceive+0x1f4>
 80097a4:	8afb      	ldrh	r3, [r7, #22]
 80097a6:	2b01      	cmp	r3, #1
 80097a8:	d171      	bne.n	800988e <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	330c      	adds	r3, #12
 80097b4:	7812      	ldrb	r2, [r2, #0]
 80097b6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097bc:	1c5a      	adds	r2, r3, #1
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80097c6:	b29b      	uxth	r3, r3
 80097c8:	3b01      	subs	r3, #1
 80097ca:	b29a      	uxth	r2, r3
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80097d0:	e05d      	b.n	800988e <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	689b      	ldr	r3, [r3, #8]
 80097d8:	f003 0302 	and.w	r3, r3, #2
 80097dc:	2b02      	cmp	r3, #2
 80097de:	d11c      	bne.n	800981a <HAL_SPI_TransmitReceive+0x264>
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80097e4:	b29b      	uxth	r3, r3
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d017      	beq.n	800981a <HAL_SPI_TransmitReceive+0x264>
 80097ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097ec:	2b01      	cmp	r3, #1
 80097ee:	d114      	bne.n	800981a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	330c      	adds	r3, #12
 80097fa:	7812      	ldrb	r2, [r2, #0]
 80097fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009802:	1c5a      	adds	r2, r3, #1
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800980c:	b29b      	uxth	r3, r3
 800980e:	3b01      	subs	r3, #1
 8009810:	b29a      	uxth	r2, r3
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009816:	2300      	movs	r3, #0
 8009818:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	689b      	ldr	r3, [r3, #8]
 8009820:	f003 0301 	and.w	r3, r3, #1
 8009824:	2b01      	cmp	r3, #1
 8009826:	d119      	bne.n	800985c <HAL_SPI_TransmitReceive+0x2a6>
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800982c:	b29b      	uxth	r3, r3
 800982e:	2b00      	cmp	r3, #0
 8009830:	d014      	beq.n	800985c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	68da      	ldr	r2, [r3, #12]
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800983c:	b2d2      	uxtb	r2, r2
 800983e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009844:	1c5a      	adds	r2, r3, #1
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800984e:	b29b      	uxth	r3, r3
 8009850:	3b01      	subs	r3, #1
 8009852:	b29a      	uxth	r2, r3
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009858:	2301      	movs	r3, #1
 800985a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800985c:	f7fd fee2 	bl	8007624 <HAL_GetTick>
 8009860:	4602      	mov	r2, r0
 8009862:	6a3b      	ldr	r3, [r7, #32]
 8009864:	1ad3      	subs	r3, r2, r3
 8009866:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009868:	429a      	cmp	r2, r3
 800986a:	d803      	bhi.n	8009874 <HAL_SPI_TransmitReceive+0x2be>
 800986c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800986e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009872:	d102      	bne.n	800987a <HAL_SPI_TransmitReceive+0x2c4>
 8009874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009876:	2b00      	cmp	r3, #0
 8009878:	d109      	bne.n	800988e <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	2201      	movs	r2, #1
 800987e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	2200      	movs	r2, #0
 8009886:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800988a:	2303      	movs	r3, #3
 800988c:	e038      	b.n	8009900 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009892:	b29b      	uxth	r3, r3
 8009894:	2b00      	cmp	r3, #0
 8009896:	d19c      	bne.n	80097d2 <HAL_SPI_TransmitReceive+0x21c>
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800989c:	b29b      	uxth	r3, r3
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d197      	bne.n	80097d2 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80098a2:	6a3a      	ldr	r2, [r7, #32]
 80098a4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80098a6:	68f8      	ldr	r0, [r7, #12]
 80098a8:	f000 f908 	bl	8009abc <SPI_EndRxTxTransaction>
 80098ac:	4603      	mov	r3, r0
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d008      	beq.n	80098c4 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	2220      	movs	r2, #32
 80098b6:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	2200      	movs	r2, #0
 80098bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80098c0:	2301      	movs	r3, #1
 80098c2:	e01d      	b.n	8009900 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	689b      	ldr	r3, [r3, #8]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d10a      	bne.n	80098e2 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80098cc:	2300      	movs	r3, #0
 80098ce:	613b      	str	r3, [r7, #16]
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	68db      	ldr	r3, [r3, #12]
 80098d6:	613b      	str	r3, [r7, #16]
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	689b      	ldr	r3, [r3, #8]
 80098de:	613b      	str	r3, [r7, #16]
 80098e0:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	2201      	movs	r2, #1
 80098e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	2200      	movs	r2, #0
 80098ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d001      	beq.n	80098fe <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80098fa:	2301      	movs	r3, #1
 80098fc:	e000      	b.n	8009900 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80098fe:	2300      	movs	r3, #0
  }
}
 8009900:	4618      	mov	r0, r3
 8009902:	3728      	adds	r7, #40	@ 0x28
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}

08009908 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b088      	sub	sp, #32
 800990c:	af00      	add	r7, sp, #0
 800990e:	60f8      	str	r0, [r7, #12]
 8009910:	60b9      	str	r1, [r7, #8]
 8009912:	603b      	str	r3, [r7, #0]
 8009914:	4613      	mov	r3, r2
 8009916:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009918:	f7fd fe84 	bl	8007624 <HAL_GetTick>
 800991c:	4602      	mov	r2, r0
 800991e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009920:	1a9b      	subs	r3, r3, r2
 8009922:	683a      	ldr	r2, [r7, #0]
 8009924:	4413      	add	r3, r2
 8009926:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009928:	f7fd fe7c 	bl	8007624 <HAL_GetTick>
 800992c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800992e:	4b39      	ldr	r3, [pc, #228]	@ (8009a14 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	015b      	lsls	r3, r3, #5
 8009934:	0d1b      	lsrs	r3, r3, #20
 8009936:	69fa      	ldr	r2, [r7, #28]
 8009938:	fb02 f303 	mul.w	r3, r2, r3
 800993c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800993e:	e054      	b.n	80099ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009946:	d050      	beq.n	80099ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009948:	f7fd fe6c 	bl	8007624 <HAL_GetTick>
 800994c:	4602      	mov	r2, r0
 800994e:	69bb      	ldr	r3, [r7, #24]
 8009950:	1ad3      	subs	r3, r2, r3
 8009952:	69fa      	ldr	r2, [r7, #28]
 8009954:	429a      	cmp	r2, r3
 8009956:	d902      	bls.n	800995e <SPI_WaitFlagStateUntilTimeout+0x56>
 8009958:	69fb      	ldr	r3, [r7, #28]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d13d      	bne.n	80099da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	685a      	ldr	r2, [r3, #4]
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800996c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	685b      	ldr	r3, [r3, #4]
 8009972:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009976:	d111      	bne.n	800999c <SPI_WaitFlagStateUntilTimeout+0x94>
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	689b      	ldr	r3, [r3, #8]
 800997c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009980:	d004      	beq.n	800998c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	689b      	ldr	r3, [r3, #8]
 8009986:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800998a:	d107      	bne.n	800999c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	681a      	ldr	r2, [r3, #0]
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800999a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80099a4:	d10f      	bne.n	80099c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	681a      	ldr	r2, [r3, #0]
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80099b4:	601a      	str	r2, [r3, #0]
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	681a      	ldr	r2, [r3, #0]
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80099c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	2201      	movs	r2, #1
 80099ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	2200      	movs	r2, #0
 80099d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80099d6:	2303      	movs	r3, #3
 80099d8:	e017      	b.n	8009a0a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d101      	bne.n	80099e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80099e0:	2300      	movs	r3, #0
 80099e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80099e4:	697b      	ldr	r3, [r7, #20]
 80099e6:	3b01      	subs	r3, #1
 80099e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	689a      	ldr	r2, [r3, #8]
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	4013      	ands	r3, r2
 80099f4:	68ba      	ldr	r2, [r7, #8]
 80099f6:	429a      	cmp	r2, r3
 80099f8:	bf0c      	ite	eq
 80099fa:	2301      	moveq	r3, #1
 80099fc:	2300      	movne	r3, #0
 80099fe:	b2db      	uxtb	r3, r3
 8009a00:	461a      	mov	r2, r3
 8009a02:	79fb      	ldrb	r3, [r7, #7]
 8009a04:	429a      	cmp	r2, r3
 8009a06:	d19b      	bne.n	8009940 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009a08:	2300      	movs	r3, #0
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	3720      	adds	r7, #32
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}
 8009a12:	bf00      	nop
 8009a14:	20000008 	.word	0x20000008

08009a18 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b086      	sub	sp, #24
 8009a1c:	af02      	add	r7, sp, #8
 8009a1e:	60f8      	str	r0, [r7, #12]
 8009a20:	60b9      	str	r1, [r7, #8]
 8009a22:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	685b      	ldr	r3, [r3, #4]
 8009a28:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009a2c:	d111      	bne.n	8009a52 <SPI_EndRxTransaction+0x3a>
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	689b      	ldr	r3, [r3, #8]
 8009a32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009a36:	d004      	beq.n	8009a42 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	689b      	ldr	r3, [r3, #8]
 8009a3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a40:	d107      	bne.n	8009a52 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	681a      	ldr	r2, [r3, #0]
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009a50:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	685b      	ldr	r3, [r3, #4]
 8009a56:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009a5a:	d117      	bne.n	8009a8c <SPI_EndRxTransaction+0x74>
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	689b      	ldr	r3, [r3, #8]
 8009a60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a64:	d112      	bne.n	8009a8c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	9300      	str	r3, [sp, #0]
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	2101      	movs	r1, #1
 8009a70:	68f8      	ldr	r0, [r7, #12]
 8009a72:	f7ff ff49 	bl	8009908 <SPI_WaitFlagStateUntilTimeout>
 8009a76:	4603      	mov	r3, r0
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d01a      	beq.n	8009ab2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a80:	f043 0220 	orr.w	r2, r3, #32
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8009a88:	2303      	movs	r3, #3
 8009a8a:	e013      	b.n	8009ab4 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	9300      	str	r3, [sp, #0]
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	2200      	movs	r2, #0
 8009a94:	2180      	movs	r1, #128	@ 0x80
 8009a96:	68f8      	ldr	r0, [r7, #12]
 8009a98:	f7ff ff36 	bl	8009908 <SPI_WaitFlagStateUntilTimeout>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d007      	beq.n	8009ab2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009aa6:	f043 0220 	orr.w	r2, r3, #32
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8009aae:	2303      	movs	r3, #3
 8009ab0:	e000      	b.n	8009ab4 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8009ab2:	2300      	movs	r3, #0
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	3710      	adds	r7, #16
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}

08009abc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b086      	sub	sp, #24
 8009ac0:	af02      	add	r7, sp, #8
 8009ac2:	60f8      	str	r0, [r7, #12]
 8009ac4:	60b9      	str	r1, [r7, #8]
 8009ac6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	9300      	str	r3, [sp, #0]
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	2201      	movs	r2, #1
 8009ad0:	2102      	movs	r1, #2
 8009ad2:	68f8      	ldr	r0, [r7, #12]
 8009ad4:	f7ff ff18 	bl	8009908 <SPI_WaitFlagStateUntilTimeout>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d007      	beq.n	8009aee <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ae2:	f043 0220 	orr.w	r2, r3, #32
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8009aea:	2303      	movs	r3, #3
 8009aec:	e013      	b.n	8009b16 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	9300      	str	r3, [sp, #0]
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	2200      	movs	r2, #0
 8009af6:	2180      	movs	r1, #128	@ 0x80
 8009af8:	68f8      	ldr	r0, [r7, #12]
 8009afa:	f7ff ff05 	bl	8009908 <SPI_WaitFlagStateUntilTimeout>
 8009afe:	4603      	mov	r3, r0
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d007      	beq.n	8009b14 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b08:	f043 0220 	orr.w	r2, r3, #32
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8009b10:	2303      	movs	r3, #3
 8009b12:	e000      	b.n	8009b16 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8009b14:	2300      	movs	r3, #0
}
 8009b16:	4618      	mov	r0, r3
 8009b18:	3710      	adds	r7, #16
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}

08009b1e <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8009b1e:	b580      	push	{r7, lr}
 8009b20:	b086      	sub	sp, #24
 8009b22:	af00      	add	r7, sp, #0
 8009b24:	6078      	str	r0, [r7, #4]
 8009b26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d101      	bne.n	8009b32 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009b2e:	2301      	movs	r3, #1
 8009b30:	e093      	b.n	8009c5a <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009b38:	b2db      	uxtb	r3, r3
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d106      	bne.n	8009b4c <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2200      	movs	r2, #0
 8009b42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f7fd fa76 	bl	8007038 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2202      	movs	r2, #2
 8009b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	689b      	ldr	r3, [r3, #8]
 8009b5a:	687a      	ldr	r2, [r7, #4]
 8009b5c:	6812      	ldr	r2, [r2, #0]
 8009b5e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009b62:	f023 0307 	bic.w	r3, r3, #7
 8009b66:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681a      	ldr	r2, [r3, #0]
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	3304      	adds	r3, #4
 8009b70:	4619      	mov	r1, r3
 8009b72:	4610      	mov	r0, r2
 8009b74:	f000 f904 	bl	8009d80 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	689b      	ldr	r3, [r3, #8]
 8009b7e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	699b      	ldr	r3, [r3, #24]
 8009b86:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	6a1b      	ldr	r3, [r3, #32]
 8009b8e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	697a      	ldr	r2, [r7, #20]
 8009b96:	4313      	orrs	r3, r2
 8009b98:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009b9a:	693b      	ldr	r3, [r7, #16]
 8009b9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009ba0:	f023 0303 	bic.w	r3, r3, #3
 8009ba4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	689a      	ldr	r2, [r3, #8]
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	699b      	ldr	r3, [r3, #24]
 8009bae:	021b      	lsls	r3, r3, #8
 8009bb0:	4313      	orrs	r3, r2
 8009bb2:	693a      	ldr	r2, [r7, #16]
 8009bb4:	4313      	orrs	r3, r2
 8009bb6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009bb8:	693b      	ldr	r3, [r7, #16]
 8009bba:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8009bbe:	f023 030c 	bic.w	r3, r3, #12
 8009bc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009bca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009bce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	68da      	ldr	r2, [r3, #12]
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	69db      	ldr	r3, [r3, #28]
 8009bd8:	021b      	lsls	r3, r3, #8
 8009bda:	4313      	orrs	r3, r2
 8009bdc:	693a      	ldr	r2, [r7, #16]
 8009bde:	4313      	orrs	r3, r2
 8009be0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	691b      	ldr	r3, [r3, #16]
 8009be6:	011a      	lsls	r2, r3, #4
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	6a1b      	ldr	r3, [r3, #32]
 8009bec:	031b      	lsls	r3, r3, #12
 8009bee:	4313      	orrs	r3, r2
 8009bf0:	693a      	ldr	r2, [r7, #16]
 8009bf2:	4313      	orrs	r3, r2
 8009bf4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8009bfc:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	685a      	ldr	r2, [r3, #4]
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	695b      	ldr	r3, [r3, #20]
 8009c06:	011b      	lsls	r3, r3, #4
 8009c08:	4313      	orrs	r3, r2
 8009c0a:	68fa      	ldr	r2, [r7, #12]
 8009c0c:	4313      	orrs	r3, r2
 8009c0e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	697a      	ldr	r2, [r7, #20]
 8009c16:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	693a      	ldr	r2, [r7, #16]
 8009c1e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	68fa      	ldr	r2, [r7, #12]
 8009c26:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2201      	movs	r2, #1
 8009c2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2201      	movs	r2, #1
 8009c34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2201      	movs	r2, #1
 8009c3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2201      	movs	r2, #1
 8009c44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2201      	movs	r2, #1
 8009c4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2201      	movs	r2, #1
 8009c54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009c58:	2300      	movs	r3, #0
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	3718      	adds	r7, #24
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}

08009c62 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009c62:	b580      	push	{r7, lr}
 8009c64:	b084      	sub	sp, #16
 8009c66:	af00      	add	r7, sp, #0
 8009c68:	6078      	str	r0, [r7, #4]
 8009c6a:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009c72:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009c7a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009c82:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009c8a:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d110      	bne.n	8009cb4 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009c92:	7bfb      	ldrb	r3, [r7, #15]
 8009c94:	2b01      	cmp	r3, #1
 8009c96:	d102      	bne.n	8009c9e <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8009c98:	7b7b      	ldrb	r3, [r7, #13]
 8009c9a:	2b01      	cmp	r3, #1
 8009c9c:	d001      	beq.n	8009ca2 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	e069      	b.n	8009d76 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	2202      	movs	r2, #2
 8009ca6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2202      	movs	r2, #2
 8009cae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009cb2:	e031      	b.n	8009d18 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	2b04      	cmp	r3, #4
 8009cb8:	d110      	bne.n	8009cdc <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009cba:	7bbb      	ldrb	r3, [r7, #14]
 8009cbc:	2b01      	cmp	r3, #1
 8009cbe:	d102      	bne.n	8009cc6 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009cc0:	7b3b      	ldrb	r3, [r7, #12]
 8009cc2:	2b01      	cmp	r3, #1
 8009cc4:	d001      	beq.n	8009cca <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	e055      	b.n	8009d76 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2202      	movs	r2, #2
 8009cce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2202      	movs	r2, #2
 8009cd6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009cda:	e01d      	b.n	8009d18 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009cdc:	7bfb      	ldrb	r3, [r7, #15]
 8009cde:	2b01      	cmp	r3, #1
 8009ce0:	d108      	bne.n	8009cf4 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009ce2:	7bbb      	ldrb	r3, [r7, #14]
 8009ce4:	2b01      	cmp	r3, #1
 8009ce6:	d105      	bne.n	8009cf4 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009ce8:	7b7b      	ldrb	r3, [r7, #13]
 8009cea:	2b01      	cmp	r3, #1
 8009cec:	d102      	bne.n	8009cf4 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009cee:	7b3b      	ldrb	r3, [r7, #12]
 8009cf0:	2b01      	cmp	r3, #1
 8009cf2:	d001      	beq.n	8009cf8 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	e03e      	b.n	8009d76 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2202      	movs	r2, #2
 8009cfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2202      	movs	r2, #2
 8009d04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2202      	movs	r2, #2
 8009d0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2202      	movs	r2, #2
 8009d14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d003      	beq.n	8009d26 <HAL_TIM_Encoder_Start+0xc4>
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	2b04      	cmp	r3, #4
 8009d22:	d008      	beq.n	8009d36 <HAL_TIM_Encoder_Start+0xd4>
 8009d24:	e00f      	b.n	8009d46 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	2201      	movs	r2, #1
 8009d2c:	2100      	movs	r1, #0
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f000 f894 	bl	8009e5c <TIM_CCxChannelCmd>
      break;
 8009d34:	e016      	b.n	8009d64 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	2201      	movs	r2, #1
 8009d3c:	2104      	movs	r1, #4
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f000 f88c 	bl	8009e5c <TIM_CCxChannelCmd>
      break;
 8009d44:	e00e      	b.n	8009d64 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	2201      	movs	r2, #1
 8009d4c:	2100      	movs	r1, #0
 8009d4e:	4618      	mov	r0, r3
 8009d50:	f000 f884 	bl	8009e5c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	2201      	movs	r2, #1
 8009d5a:	2104      	movs	r1, #4
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f000 f87d 	bl	8009e5c <TIM_CCxChannelCmd>
      break;
 8009d62:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	681a      	ldr	r2, [r3, #0]
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f042 0201 	orr.w	r2, r2, #1
 8009d72:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009d74:	2300      	movs	r3, #0
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	3710      	adds	r7, #16
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}
	...

08009d80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009d80:	b480      	push	{r7}
 8009d82:	b085      	sub	sp, #20
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
 8009d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	4a2f      	ldr	r2, [pc, #188]	@ (8009e50 <TIM_Base_SetConfig+0xd0>)
 8009d94:	4293      	cmp	r3, r2
 8009d96:	d00b      	beq.n	8009db0 <TIM_Base_SetConfig+0x30>
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d9e:	d007      	beq.n	8009db0 <TIM_Base_SetConfig+0x30>
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	4a2c      	ldr	r2, [pc, #176]	@ (8009e54 <TIM_Base_SetConfig+0xd4>)
 8009da4:	4293      	cmp	r3, r2
 8009da6:	d003      	beq.n	8009db0 <TIM_Base_SetConfig+0x30>
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	4a2b      	ldr	r2, [pc, #172]	@ (8009e58 <TIM_Base_SetConfig+0xd8>)
 8009dac:	4293      	cmp	r3, r2
 8009dae:	d108      	bne.n	8009dc2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009db6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	685b      	ldr	r3, [r3, #4]
 8009dbc:	68fa      	ldr	r2, [r7, #12]
 8009dbe:	4313      	orrs	r3, r2
 8009dc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	4a22      	ldr	r2, [pc, #136]	@ (8009e50 <TIM_Base_SetConfig+0xd0>)
 8009dc6:	4293      	cmp	r3, r2
 8009dc8:	d00b      	beq.n	8009de2 <TIM_Base_SetConfig+0x62>
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009dd0:	d007      	beq.n	8009de2 <TIM_Base_SetConfig+0x62>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	4a1f      	ldr	r2, [pc, #124]	@ (8009e54 <TIM_Base_SetConfig+0xd4>)
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	d003      	beq.n	8009de2 <TIM_Base_SetConfig+0x62>
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	4a1e      	ldr	r2, [pc, #120]	@ (8009e58 <TIM_Base_SetConfig+0xd8>)
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d108      	bne.n	8009df4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009de8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	68db      	ldr	r3, [r3, #12]
 8009dee:	68fa      	ldr	r2, [r7, #12]
 8009df0:	4313      	orrs	r3, r2
 8009df2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	695b      	ldr	r3, [r3, #20]
 8009dfe:	4313      	orrs	r3, r2
 8009e00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	68fa      	ldr	r2, [r7, #12]
 8009e06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	689a      	ldr	r2, [r3, #8]
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	681a      	ldr	r2, [r3, #0]
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	4a0d      	ldr	r2, [pc, #52]	@ (8009e50 <TIM_Base_SetConfig+0xd0>)
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	d103      	bne.n	8009e28 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	691a      	ldr	r2, [r3, #16]
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	691b      	ldr	r3, [r3, #16]
 8009e32:	f003 0301 	and.w	r3, r3, #1
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d005      	beq.n	8009e46 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	691b      	ldr	r3, [r3, #16]
 8009e3e:	f023 0201 	bic.w	r2, r3, #1
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	611a      	str	r2, [r3, #16]
  }
}
 8009e46:	bf00      	nop
 8009e48:	3714      	adds	r7, #20
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bc80      	pop	{r7}
 8009e4e:	4770      	bx	lr
 8009e50:	40012c00 	.word	0x40012c00
 8009e54:	40000400 	.word	0x40000400
 8009e58:	40000800 	.word	0x40000800

08009e5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	b087      	sub	sp, #28
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	60f8      	str	r0, [r7, #12]
 8009e64:	60b9      	str	r1, [r7, #8]
 8009e66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	f003 031f 	and.w	r3, r3, #31
 8009e6e:	2201      	movs	r2, #1
 8009e70:	fa02 f303 	lsl.w	r3, r2, r3
 8009e74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	6a1a      	ldr	r2, [r3, #32]
 8009e7a:	697b      	ldr	r3, [r7, #20]
 8009e7c:	43db      	mvns	r3, r3
 8009e7e:	401a      	ands	r2, r3
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	6a1a      	ldr	r2, [r3, #32]
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	f003 031f 	and.w	r3, r3, #31
 8009e8e:	6879      	ldr	r1, [r7, #4]
 8009e90:	fa01 f303 	lsl.w	r3, r1, r3
 8009e94:	431a      	orrs	r2, r3
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	621a      	str	r2, [r3, #32]
}
 8009e9a:	bf00      	nop
 8009e9c:	371c      	adds	r7, #28
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bc80      	pop	{r7}
 8009ea2:	4770      	bx	lr

08009ea4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b085      	sub	sp, #20
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
 8009eac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009eb4:	2b01      	cmp	r3, #1
 8009eb6:	d101      	bne.n	8009ebc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009eb8:	2302      	movs	r3, #2
 8009eba:	e046      	b.n	8009f4a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2201      	movs	r2, #1
 8009ec0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2202      	movs	r2, #2
 8009ec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	685b      	ldr	r3, [r3, #4]
 8009ed2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	689b      	ldr	r3, [r3, #8]
 8009eda:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ee2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	68fa      	ldr	r2, [r7, #12]
 8009eea:	4313      	orrs	r3, r2
 8009eec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	68fa      	ldr	r2, [r7, #12]
 8009ef4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	4a16      	ldr	r2, [pc, #88]	@ (8009f54 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8009efc:	4293      	cmp	r3, r2
 8009efe:	d00e      	beq.n	8009f1e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f08:	d009      	beq.n	8009f1e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	4a12      	ldr	r2, [pc, #72]	@ (8009f58 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8009f10:	4293      	cmp	r3, r2
 8009f12:	d004      	beq.n	8009f1e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	4a10      	ldr	r2, [pc, #64]	@ (8009f5c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8009f1a:	4293      	cmp	r3, r2
 8009f1c:	d10c      	bne.n	8009f38 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009f24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	685b      	ldr	r3, [r3, #4]
 8009f2a:	68ba      	ldr	r2, [r7, #8]
 8009f2c:	4313      	orrs	r3, r2
 8009f2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	68ba      	ldr	r2, [r7, #8]
 8009f36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2201      	movs	r2, #1
 8009f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2200      	movs	r2, #0
 8009f44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009f48:	2300      	movs	r3, #0
}
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	3714      	adds	r7, #20
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bc80      	pop	{r7}
 8009f52:	4770      	bx	lr
 8009f54:	40012c00 	.word	0x40012c00
 8009f58:	40000400 	.word	0x40000400
 8009f5c:	40000800 	.word	0x40000800

08009f60 <rand>:
 8009f60:	4b16      	ldr	r3, [pc, #88]	@ (8009fbc <rand+0x5c>)
 8009f62:	b510      	push	{r4, lr}
 8009f64:	681c      	ldr	r4, [r3, #0]
 8009f66:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009f68:	b9b3      	cbnz	r3, 8009f98 <rand+0x38>
 8009f6a:	2018      	movs	r0, #24
 8009f6c:	f000 fa60 	bl	800a430 <malloc>
 8009f70:	4602      	mov	r2, r0
 8009f72:	6320      	str	r0, [r4, #48]	@ 0x30
 8009f74:	b920      	cbnz	r0, 8009f80 <rand+0x20>
 8009f76:	2152      	movs	r1, #82	@ 0x52
 8009f78:	4b11      	ldr	r3, [pc, #68]	@ (8009fc0 <rand+0x60>)
 8009f7a:	4812      	ldr	r0, [pc, #72]	@ (8009fc4 <rand+0x64>)
 8009f7c:	f000 f9f2 	bl	800a364 <__assert_func>
 8009f80:	4911      	ldr	r1, [pc, #68]	@ (8009fc8 <rand+0x68>)
 8009f82:	4b12      	ldr	r3, [pc, #72]	@ (8009fcc <rand+0x6c>)
 8009f84:	e9c0 1300 	strd	r1, r3, [r0]
 8009f88:	4b11      	ldr	r3, [pc, #68]	@ (8009fd0 <rand+0x70>)
 8009f8a:	2100      	movs	r1, #0
 8009f8c:	6083      	str	r3, [r0, #8]
 8009f8e:	230b      	movs	r3, #11
 8009f90:	8183      	strh	r3, [r0, #12]
 8009f92:	2001      	movs	r0, #1
 8009f94:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8009f98:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009f9a:	480e      	ldr	r0, [pc, #56]	@ (8009fd4 <rand+0x74>)
 8009f9c:	690b      	ldr	r3, [r1, #16]
 8009f9e:	694c      	ldr	r4, [r1, #20]
 8009fa0:	4358      	muls	r0, r3
 8009fa2:	4a0d      	ldr	r2, [pc, #52]	@ (8009fd8 <rand+0x78>)
 8009fa4:	fb02 0004 	mla	r0, r2, r4, r0
 8009fa8:	fba3 3202 	umull	r3, r2, r3, r2
 8009fac:	3301      	adds	r3, #1
 8009fae:	eb40 0002 	adc.w	r0, r0, r2
 8009fb2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8009fb6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8009fba:	bd10      	pop	{r4, pc}
 8009fbc:	20000020 	.word	0x20000020
 8009fc0:	0800cd9a 	.word	0x0800cd9a
 8009fc4:	0800cdb1 	.word	0x0800cdb1
 8009fc8:	abcd330e 	.word	0xabcd330e
 8009fcc:	e66d1234 	.word	0xe66d1234
 8009fd0:	0005deec 	.word	0x0005deec
 8009fd4:	5851f42d 	.word	0x5851f42d
 8009fd8:	4c957f2d 	.word	0x4c957f2d

08009fdc <std>:
 8009fdc:	2300      	movs	r3, #0
 8009fde:	b510      	push	{r4, lr}
 8009fe0:	4604      	mov	r4, r0
 8009fe2:	e9c0 3300 	strd	r3, r3, [r0]
 8009fe6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009fea:	6083      	str	r3, [r0, #8]
 8009fec:	8181      	strh	r1, [r0, #12]
 8009fee:	6643      	str	r3, [r0, #100]	@ 0x64
 8009ff0:	81c2      	strh	r2, [r0, #14]
 8009ff2:	6183      	str	r3, [r0, #24]
 8009ff4:	4619      	mov	r1, r3
 8009ff6:	2208      	movs	r2, #8
 8009ff8:	305c      	adds	r0, #92	@ 0x5c
 8009ffa:	f000 f916 	bl	800a22a <memset>
 8009ffe:	4b0d      	ldr	r3, [pc, #52]	@ (800a034 <std+0x58>)
 800a000:	6224      	str	r4, [r4, #32]
 800a002:	6263      	str	r3, [r4, #36]	@ 0x24
 800a004:	4b0c      	ldr	r3, [pc, #48]	@ (800a038 <std+0x5c>)
 800a006:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a008:	4b0c      	ldr	r3, [pc, #48]	@ (800a03c <std+0x60>)
 800a00a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a00c:	4b0c      	ldr	r3, [pc, #48]	@ (800a040 <std+0x64>)
 800a00e:	6323      	str	r3, [r4, #48]	@ 0x30
 800a010:	4b0c      	ldr	r3, [pc, #48]	@ (800a044 <std+0x68>)
 800a012:	429c      	cmp	r4, r3
 800a014:	d006      	beq.n	800a024 <std+0x48>
 800a016:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a01a:	4294      	cmp	r4, r2
 800a01c:	d002      	beq.n	800a024 <std+0x48>
 800a01e:	33d0      	adds	r3, #208	@ 0xd0
 800a020:	429c      	cmp	r4, r3
 800a022:	d105      	bne.n	800a030 <std+0x54>
 800a024:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a028:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a02c:	f000 b988 	b.w	800a340 <__retarget_lock_init_recursive>
 800a030:	bd10      	pop	{r4, pc}
 800a032:	bf00      	nop
 800a034:	0800a1a5 	.word	0x0800a1a5
 800a038:	0800a1c7 	.word	0x0800a1c7
 800a03c:	0800a1ff 	.word	0x0800a1ff
 800a040:	0800a223 	.word	0x0800a223
 800a044:	20003f6c 	.word	0x20003f6c

0800a048 <stdio_exit_handler>:
 800a048:	4a02      	ldr	r2, [pc, #8]	@ (800a054 <stdio_exit_handler+0xc>)
 800a04a:	4903      	ldr	r1, [pc, #12]	@ (800a058 <stdio_exit_handler+0x10>)
 800a04c:	4803      	ldr	r0, [pc, #12]	@ (800a05c <stdio_exit_handler+0x14>)
 800a04e:	f000 b869 	b.w	800a124 <_fwalk_sglue>
 800a052:	bf00      	nop
 800a054:	20000014 	.word	0x20000014
 800a058:	0800ac6d 	.word	0x0800ac6d
 800a05c:	20000024 	.word	0x20000024

0800a060 <cleanup_stdio>:
 800a060:	6841      	ldr	r1, [r0, #4]
 800a062:	4b0c      	ldr	r3, [pc, #48]	@ (800a094 <cleanup_stdio+0x34>)
 800a064:	b510      	push	{r4, lr}
 800a066:	4299      	cmp	r1, r3
 800a068:	4604      	mov	r4, r0
 800a06a:	d001      	beq.n	800a070 <cleanup_stdio+0x10>
 800a06c:	f000 fdfe 	bl	800ac6c <_fflush_r>
 800a070:	68a1      	ldr	r1, [r4, #8]
 800a072:	4b09      	ldr	r3, [pc, #36]	@ (800a098 <cleanup_stdio+0x38>)
 800a074:	4299      	cmp	r1, r3
 800a076:	d002      	beq.n	800a07e <cleanup_stdio+0x1e>
 800a078:	4620      	mov	r0, r4
 800a07a:	f000 fdf7 	bl	800ac6c <_fflush_r>
 800a07e:	68e1      	ldr	r1, [r4, #12]
 800a080:	4b06      	ldr	r3, [pc, #24]	@ (800a09c <cleanup_stdio+0x3c>)
 800a082:	4299      	cmp	r1, r3
 800a084:	d004      	beq.n	800a090 <cleanup_stdio+0x30>
 800a086:	4620      	mov	r0, r4
 800a088:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a08c:	f000 bdee 	b.w	800ac6c <_fflush_r>
 800a090:	bd10      	pop	{r4, pc}
 800a092:	bf00      	nop
 800a094:	20003f6c 	.word	0x20003f6c
 800a098:	20003fd4 	.word	0x20003fd4
 800a09c:	2000403c 	.word	0x2000403c

0800a0a0 <global_stdio_init.part.0>:
 800a0a0:	b510      	push	{r4, lr}
 800a0a2:	4b0b      	ldr	r3, [pc, #44]	@ (800a0d0 <global_stdio_init.part.0+0x30>)
 800a0a4:	4c0b      	ldr	r4, [pc, #44]	@ (800a0d4 <global_stdio_init.part.0+0x34>)
 800a0a6:	4a0c      	ldr	r2, [pc, #48]	@ (800a0d8 <global_stdio_init.part.0+0x38>)
 800a0a8:	4620      	mov	r0, r4
 800a0aa:	601a      	str	r2, [r3, #0]
 800a0ac:	2104      	movs	r1, #4
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	f7ff ff94 	bl	8009fdc <std>
 800a0b4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a0b8:	2201      	movs	r2, #1
 800a0ba:	2109      	movs	r1, #9
 800a0bc:	f7ff ff8e 	bl	8009fdc <std>
 800a0c0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a0c4:	2202      	movs	r2, #2
 800a0c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0ca:	2112      	movs	r1, #18
 800a0cc:	f7ff bf86 	b.w	8009fdc <std>
 800a0d0:	200040a4 	.word	0x200040a4
 800a0d4:	20003f6c 	.word	0x20003f6c
 800a0d8:	0800a049 	.word	0x0800a049

0800a0dc <__sfp_lock_acquire>:
 800a0dc:	4801      	ldr	r0, [pc, #4]	@ (800a0e4 <__sfp_lock_acquire+0x8>)
 800a0de:	f000 b930 	b.w	800a342 <__retarget_lock_acquire_recursive>
 800a0e2:	bf00      	nop
 800a0e4:	200040ad 	.word	0x200040ad

0800a0e8 <__sfp_lock_release>:
 800a0e8:	4801      	ldr	r0, [pc, #4]	@ (800a0f0 <__sfp_lock_release+0x8>)
 800a0ea:	f000 b92b 	b.w	800a344 <__retarget_lock_release_recursive>
 800a0ee:	bf00      	nop
 800a0f0:	200040ad 	.word	0x200040ad

0800a0f4 <__sinit>:
 800a0f4:	b510      	push	{r4, lr}
 800a0f6:	4604      	mov	r4, r0
 800a0f8:	f7ff fff0 	bl	800a0dc <__sfp_lock_acquire>
 800a0fc:	6a23      	ldr	r3, [r4, #32]
 800a0fe:	b11b      	cbz	r3, 800a108 <__sinit+0x14>
 800a100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a104:	f7ff bff0 	b.w	800a0e8 <__sfp_lock_release>
 800a108:	4b04      	ldr	r3, [pc, #16]	@ (800a11c <__sinit+0x28>)
 800a10a:	6223      	str	r3, [r4, #32]
 800a10c:	4b04      	ldr	r3, [pc, #16]	@ (800a120 <__sinit+0x2c>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d1f5      	bne.n	800a100 <__sinit+0xc>
 800a114:	f7ff ffc4 	bl	800a0a0 <global_stdio_init.part.0>
 800a118:	e7f2      	b.n	800a100 <__sinit+0xc>
 800a11a:	bf00      	nop
 800a11c:	0800a061 	.word	0x0800a061
 800a120:	200040a4 	.word	0x200040a4

0800a124 <_fwalk_sglue>:
 800a124:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a128:	4607      	mov	r7, r0
 800a12a:	4688      	mov	r8, r1
 800a12c:	4614      	mov	r4, r2
 800a12e:	2600      	movs	r6, #0
 800a130:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a134:	f1b9 0901 	subs.w	r9, r9, #1
 800a138:	d505      	bpl.n	800a146 <_fwalk_sglue+0x22>
 800a13a:	6824      	ldr	r4, [r4, #0]
 800a13c:	2c00      	cmp	r4, #0
 800a13e:	d1f7      	bne.n	800a130 <_fwalk_sglue+0xc>
 800a140:	4630      	mov	r0, r6
 800a142:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a146:	89ab      	ldrh	r3, [r5, #12]
 800a148:	2b01      	cmp	r3, #1
 800a14a:	d907      	bls.n	800a15c <_fwalk_sglue+0x38>
 800a14c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a150:	3301      	adds	r3, #1
 800a152:	d003      	beq.n	800a15c <_fwalk_sglue+0x38>
 800a154:	4629      	mov	r1, r5
 800a156:	4638      	mov	r0, r7
 800a158:	47c0      	blx	r8
 800a15a:	4306      	orrs	r6, r0
 800a15c:	3568      	adds	r5, #104	@ 0x68
 800a15e:	e7e9      	b.n	800a134 <_fwalk_sglue+0x10>

0800a160 <siprintf>:
 800a160:	b40e      	push	{r1, r2, r3}
 800a162:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a166:	b510      	push	{r4, lr}
 800a168:	2400      	movs	r4, #0
 800a16a:	b09d      	sub	sp, #116	@ 0x74
 800a16c:	ab1f      	add	r3, sp, #124	@ 0x7c
 800a16e:	9002      	str	r0, [sp, #8]
 800a170:	9006      	str	r0, [sp, #24]
 800a172:	9107      	str	r1, [sp, #28]
 800a174:	9104      	str	r1, [sp, #16]
 800a176:	4809      	ldr	r0, [pc, #36]	@ (800a19c <siprintf+0x3c>)
 800a178:	4909      	ldr	r1, [pc, #36]	@ (800a1a0 <siprintf+0x40>)
 800a17a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a17e:	9105      	str	r1, [sp, #20]
 800a180:	6800      	ldr	r0, [r0, #0]
 800a182:	a902      	add	r1, sp, #8
 800a184:	9301      	str	r3, [sp, #4]
 800a186:	941b      	str	r4, [sp, #108]	@ 0x6c
 800a188:	f000 fa64 	bl	800a654 <_svfiprintf_r>
 800a18c:	9b02      	ldr	r3, [sp, #8]
 800a18e:	701c      	strb	r4, [r3, #0]
 800a190:	b01d      	add	sp, #116	@ 0x74
 800a192:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a196:	b003      	add	sp, #12
 800a198:	4770      	bx	lr
 800a19a:	bf00      	nop
 800a19c:	20000020 	.word	0x20000020
 800a1a0:	ffff0208 	.word	0xffff0208

0800a1a4 <__sread>:
 800a1a4:	b510      	push	{r4, lr}
 800a1a6:	460c      	mov	r4, r1
 800a1a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1ac:	f000 f87a 	bl	800a2a4 <_read_r>
 800a1b0:	2800      	cmp	r0, #0
 800a1b2:	bfab      	itete	ge
 800a1b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a1b6:	89a3      	ldrhlt	r3, [r4, #12]
 800a1b8:	181b      	addge	r3, r3, r0
 800a1ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a1be:	bfac      	ite	ge
 800a1c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a1c2:	81a3      	strhlt	r3, [r4, #12]
 800a1c4:	bd10      	pop	{r4, pc}

0800a1c6 <__swrite>:
 800a1c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1ca:	461f      	mov	r7, r3
 800a1cc:	898b      	ldrh	r3, [r1, #12]
 800a1ce:	4605      	mov	r5, r0
 800a1d0:	05db      	lsls	r3, r3, #23
 800a1d2:	460c      	mov	r4, r1
 800a1d4:	4616      	mov	r6, r2
 800a1d6:	d505      	bpl.n	800a1e4 <__swrite+0x1e>
 800a1d8:	2302      	movs	r3, #2
 800a1da:	2200      	movs	r2, #0
 800a1dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1e0:	f000 f84e 	bl	800a280 <_lseek_r>
 800a1e4:	89a3      	ldrh	r3, [r4, #12]
 800a1e6:	4632      	mov	r2, r6
 800a1e8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a1ec:	81a3      	strh	r3, [r4, #12]
 800a1ee:	4628      	mov	r0, r5
 800a1f0:	463b      	mov	r3, r7
 800a1f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a1fa:	f000 b865 	b.w	800a2c8 <_write_r>

0800a1fe <__sseek>:
 800a1fe:	b510      	push	{r4, lr}
 800a200:	460c      	mov	r4, r1
 800a202:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a206:	f000 f83b 	bl	800a280 <_lseek_r>
 800a20a:	1c43      	adds	r3, r0, #1
 800a20c:	89a3      	ldrh	r3, [r4, #12]
 800a20e:	bf15      	itete	ne
 800a210:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a212:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a216:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a21a:	81a3      	strheq	r3, [r4, #12]
 800a21c:	bf18      	it	ne
 800a21e:	81a3      	strhne	r3, [r4, #12]
 800a220:	bd10      	pop	{r4, pc}

0800a222 <__sclose>:
 800a222:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a226:	f000 b81b 	b.w	800a260 <_close_r>

0800a22a <memset>:
 800a22a:	4603      	mov	r3, r0
 800a22c:	4402      	add	r2, r0
 800a22e:	4293      	cmp	r3, r2
 800a230:	d100      	bne.n	800a234 <memset+0xa>
 800a232:	4770      	bx	lr
 800a234:	f803 1b01 	strb.w	r1, [r3], #1
 800a238:	e7f9      	b.n	800a22e <memset+0x4>

0800a23a <strncpy>:
 800a23a:	4603      	mov	r3, r0
 800a23c:	b510      	push	{r4, lr}
 800a23e:	3901      	subs	r1, #1
 800a240:	b132      	cbz	r2, 800a250 <strncpy+0x16>
 800a242:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a246:	3a01      	subs	r2, #1
 800a248:	f803 4b01 	strb.w	r4, [r3], #1
 800a24c:	2c00      	cmp	r4, #0
 800a24e:	d1f7      	bne.n	800a240 <strncpy+0x6>
 800a250:	2100      	movs	r1, #0
 800a252:	441a      	add	r2, r3
 800a254:	4293      	cmp	r3, r2
 800a256:	d100      	bne.n	800a25a <strncpy+0x20>
 800a258:	bd10      	pop	{r4, pc}
 800a25a:	f803 1b01 	strb.w	r1, [r3], #1
 800a25e:	e7f9      	b.n	800a254 <strncpy+0x1a>

0800a260 <_close_r>:
 800a260:	b538      	push	{r3, r4, r5, lr}
 800a262:	2300      	movs	r3, #0
 800a264:	4d05      	ldr	r5, [pc, #20]	@ (800a27c <_close_r+0x1c>)
 800a266:	4604      	mov	r4, r0
 800a268:	4608      	mov	r0, r1
 800a26a:	602b      	str	r3, [r5, #0]
 800a26c:	f7fc fe23 	bl	8006eb6 <_close>
 800a270:	1c43      	adds	r3, r0, #1
 800a272:	d102      	bne.n	800a27a <_close_r+0x1a>
 800a274:	682b      	ldr	r3, [r5, #0]
 800a276:	b103      	cbz	r3, 800a27a <_close_r+0x1a>
 800a278:	6023      	str	r3, [r4, #0]
 800a27a:	bd38      	pop	{r3, r4, r5, pc}
 800a27c:	200040a8 	.word	0x200040a8

0800a280 <_lseek_r>:
 800a280:	b538      	push	{r3, r4, r5, lr}
 800a282:	4604      	mov	r4, r0
 800a284:	4608      	mov	r0, r1
 800a286:	4611      	mov	r1, r2
 800a288:	2200      	movs	r2, #0
 800a28a:	4d05      	ldr	r5, [pc, #20]	@ (800a2a0 <_lseek_r+0x20>)
 800a28c:	602a      	str	r2, [r5, #0]
 800a28e:	461a      	mov	r2, r3
 800a290:	f7fc fe35 	bl	8006efe <_lseek>
 800a294:	1c43      	adds	r3, r0, #1
 800a296:	d102      	bne.n	800a29e <_lseek_r+0x1e>
 800a298:	682b      	ldr	r3, [r5, #0]
 800a29a:	b103      	cbz	r3, 800a29e <_lseek_r+0x1e>
 800a29c:	6023      	str	r3, [r4, #0]
 800a29e:	bd38      	pop	{r3, r4, r5, pc}
 800a2a0:	200040a8 	.word	0x200040a8

0800a2a4 <_read_r>:
 800a2a4:	b538      	push	{r3, r4, r5, lr}
 800a2a6:	4604      	mov	r4, r0
 800a2a8:	4608      	mov	r0, r1
 800a2aa:	4611      	mov	r1, r2
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	4d05      	ldr	r5, [pc, #20]	@ (800a2c4 <_read_r+0x20>)
 800a2b0:	602a      	str	r2, [r5, #0]
 800a2b2:	461a      	mov	r2, r3
 800a2b4:	f7fc fdc6 	bl	8006e44 <_read>
 800a2b8:	1c43      	adds	r3, r0, #1
 800a2ba:	d102      	bne.n	800a2c2 <_read_r+0x1e>
 800a2bc:	682b      	ldr	r3, [r5, #0]
 800a2be:	b103      	cbz	r3, 800a2c2 <_read_r+0x1e>
 800a2c0:	6023      	str	r3, [r4, #0]
 800a2c2:	bd38      	pop	{r3, r4, r5, pc}
 800a2c4:	200040a8 	.word	0x200040a8

0800a2c8 <_write_r>:
 800a2c8:	b538      	push	{r3, r4, r5, lr}
 800a2ca:	4604      	mov	r4, r0
 800a2cc:	4608      	mov	r0, r1
 800a2ce:	4611      	mov	r1, r2
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	4d05      	ldr	r5, [pc, #20]	@ (800a2e8 <_write_r+0x20>)
 800a2d4:	602a      	str	r2, [r5, #0]
 800a2d6:	461a      	mov	r2, r3
 800a2d8:	f7fc fdd1 	bl	8006e7e <_write>
 800a2dc:	1c43      	adds	r3, r0, #1
 800a2de:	d102      	bne.n	800a2e6 <_write_r+0x1e>
 800a2e0:	682b      	ldr	r3, [r5, #0]
 800a2e2:	b103      	cbz	r3, 800a2e6 <_write_r+0x1e>
 800a2e4:	6023      	str	r3, [r4, #0]
 800a2e6:	bd38      	pop	{r3, r4, r5, pc}
 800a2e8:	200040a8 	.word	0x200040a8

0800a2ec <__errno>:
 800a2ec:	4b01      	ldr	r3, [pc, #4]	@ (800a2f4 <__errno+0x8>)
 800a2ee:	6818      	ldr	r0, [r3, #0]
 800a2f0:	4770      	bx	lr
 800a2f2:	bf00      	nop
 800a2f4:	20000020 	.word	0x20000020

0800a2f8 <__libc_init_array>:
 800a2f8:	b570      	push	{r4, r5, r6, lr}
 800a2fa:	2600      	movs	r6, #0
 800a2fc:	4d0c      	ldr	r5, [pc, #48]	@ (800a330 <__libc_init_array+0x38>)
 800a2fe:	4c0d      	ldr	r4, [pc, #52]	@ (800a334 <__libc_init_array+0x3c>)
 800a300:	1b64      	subs	r4, r4, r5
 800a302:	10a4      	asrs	r4, r4, #2
 800a304:	42a6      	cmp	r6, r4
 800a306:	d109      	bne.n	800a31c <__libc_init_array+0x24>
 800a308:	f002 fa56 	bl	800c7b8 <_init>
 800a30c:	2600      	movs	r6, #0
 800a30e:	4d0a      	ldr	r5, [pc, #40]	@ (800a338 <__libc_init_array+0x40>)
 800a310:	4c0a      	ldr	r4, [pc, #40]	@ (800a33c <__libc_init_array+0x44>)
 800a312:	1b64      	subs	r4, r4, r5
 800a314:	10a4      	asrs	r4, r4, #2
 800a316:	42a6      	cmp	r6, r4
 800a318:	d105      	bne.n	800a326 <__libc_init_array+0x2e>
 800a31a:	bd70      	pop	{r4, r5, r6, pc}
 800a31c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a320:	4798      	blx	r3
 800a322:	3601      	adds	r6, #1
 800a324:	e7ee      	b.n	800a304 <__libc_init_array+0xc>
 800a326:	f855 3b04 	ldr.w	r3, [r5], #4
 800a32a:	4798      	blx	r3
 800a32c:	3601      	adds	r6, #1
 800a32e:	e7f2      	b.n	800a316 <__libc_init_array+0x1e>
 800a330:	0800d270 	.word	0x0800d270
 800a334:	0800d270 	.word	0x0800d270
 800a338:	0800d270 	.word	0x0800d270
 800a33c:	0800d274 	.word	0x0800d274

0800a340 <__retarget_lock_init_recursive>:
 800a340:	4770      	bx	lr

0800a342 <__retarget_lock_acquire_recursive>:
 800a342:	4770      	bx	lr

0800a344 <__retarget_lock_release_recursive>:
 800a344:	4770      	bx	lr

0800a346 <memcpy>:
 800a346:	440a      	add	r2, r1
 800a348:	4291      	cmp	r1, r2
 800a34a:	f100 33ff 	add.w	r3, r0, #4294967295
 800a34e:	d100      	bne.n	800a352 <memcpy+0xc>
 800a350:	4770      	bx	lr
 800a352:	b510      	push	{r4, lr}
 800a354:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a358:	4291      	cmp	r1, r2
 800a35a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a35e:	d1f9      	bne.n	800a354 <memcpy+0xe>
 800a360:	bd10      	pop	{r4, pc}
	...

0800a364 <__assert_func>:
 800a364:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a366:	4614      	mov	r4, r2
 800a368:	461a      	mov	r2, r3
 800a36a:	4b09      	ldr	r3, [pc, #36]	@ (800a390 <__assert_func+0x2c>)
 800a36c:	4605      	mov	r5, r0
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	68d8      	ldr	r0, [r3, #12]
 800a372:	b14c      	cbz	r4, 800a388 <__assert_func+0x24>
 800a374:	4b07      	ldr	r3, [pc, #28]	@ (800a394 <__assert_func+0x30>)
 800a376:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a37a:	9100      	str	r1, [sp, #0]
 800a37c:	462b      	mov	r3, r5
 800a37e:	4906      	ldr	r1, [pc, #24]	@ (800a398 <__assert_func+0x34>)
 800a380:	f000 fc9c 	bl	800acbc <fiprintf>
 800a384:	f000 fce4 	bl	800ad50 <abort>
 800a388:	4b04      	ldr	r3, [pc, #16]	@ (800a39c <__assert_func+0x38>)
 800a38a:	461c      	mov	r4, r3
 800a38c:	e7f3      	b.n	800a376 <__assert_func+0x12>
 800a38e:	bf00      	nop
 800a390:	20000020 	.word	0x20000020
 800a394:	0800ce09 	.word	0x0800ce09
 800a398:	0800ce16 	.word	0x0800ce16
 800a39c:	0800ce44 	.word	0x0800ce44

0800a3a0 <_free_r>:
 800a3a0:	b538      	push	{r3, r4, r5, lr}
 800a3a2:	4605      	mov	r5, r0
 800a3a4:	2900      	cmp	r1, #0
 800a3a6:	d040      	beq.n	800a42a <_free_r+0x8a>
 800a3a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3ac:	1f0c      	subs	r4, r1, #4
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	bfb8      	it	lt
 800a3b2:	18e4      	addlt	r4, r4, r3
 800a3b4:	f000 f8e6 	bl	800a584 <__malloc_lock>
 800a3b8:	4a1c      	ldr	r2, [pc, #112]	@ (800a42c <_free_r+0x8c>)
 800a3ba:	6813      	ldr	r3, [r2, #0]
 800a3bc:	b933      	cbnz	r3, 800a3cc <_free_r+0x2c>
 800a3be:	6063      	str	r3, [r4, #4]
 800a3c0:	6014      	str	r4, [r2, #0]
 800a3c2:	4628      	mov	r0, r5
 800a3c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a3c8:	f000 b8e2 	b.w	800a590 <__malloc_unlock>
 800a3cc:	42a3      	cmp	r3, r4
 800a3ce:	d908      	bls.n	800a3e2 <_free_r+0x42>
 800a3d0:	6820      	ldr	r0, [r4, #0]
 800a3d2:	1821      	adds	r1, r4, r0
 800a3d4:	428b      	cmp	r3, r1
 800a3d6:	bf01      	itttt	eq
 800a3d8:	6819      	ldreq	r1, [r3, #0]
 800a3da:	685b      	ldreq	r3, [r3, #4]
 800a3dc:	1809      	addeq	r1, r1, r0
 800a3de:	6021      	streq	r1, [r4, #0]
 800a3e0:	e7ed      	b.n	800a3be <_free_r+0x1e>
 800a3e2:	461a      	mov	r2, r3
 800a3e4:	685b      	ldr	r3, [r3, #4]
 800a3e6:	b10b      	cbz	r3, 800a3ec <_free_r+0x4c>
 800a3e8:	42a3      	cmp	r3, r4
 800a3ea:	d9fa      	bls.n	800a3e2 <_free_r+0x42>
 800a3ec:	6811      	ldr	r1, [r2, #0]
 800a3ee:	1850      	adds	r0, r2, r1
 800a3f0:	42a0      	cmp	r0, r4
 800a3f2:	d10b      	bne.n	800a40c <_free_r+0x6c>
 800a3f4:	6820      	ldr	r0, [r4, #0]
 800a3f6:	4401      	add	r1, r0
 800a3f8:	1850      	adds	r0, r2, r1
 800a3fa:	4283      	cmp	r3, r0
 800a3fc:	6011      	str	r1, [r2, #0]
 800a3fe:	d1e0      	bne.n	800a3c2 <_free_r+0x22>
 800a400:	6818      	ldr	r0, [r3, #0]
 800a402:	685b      	ldr	r3, [r3, #4]
 800a404:	4408      	add	r0, r1
 800a406:	6010      	str	r0, [r2, #0]
 800a408:	6053      	str	r3, [r2, #4]
 800a40a:	e7da      	b.n	800a3c2 <_free_r+0x22>
 800a40c:	d902      	bls.n	800a414 <_free_r+0x74>
 800a40e:	230c      	movs	r3, #12
 800a410:	602b      	str	r3, [r5, #0]
 800a412:	e7d6      	b.n	800a3c2 <_free_r+0x22>
 800a414:	6820      	ldr	r0, [r4, #0]
 800a416:	1821      	adds	r1, r4, r0
 800a418:	428b      	cmp	r3, r1
 800a41a:	bf01      	itttt	eq
 800a41c:	6819      	ldreq	r1, [r3, #0]
 800a41e:	685b      	ldreq	r3, [r3, #4]
 800a420:	1809      	addeq	r1, r1, r0
 800a422:	6021      	streq	r1, [r4, #0]
 800a424:	6063      	str	r3, [r4, #4]
 800a426:	6054      	str	r4, [r2, #4]
 800a428:	e7cb      	b.n	800a3c2 <_free_r+0x22>
 800a42a:	bd38      	pop	{r3, r4, r5, pc}
 800a42c:	200040b4 	.word	0x200040b4

0800a430 <malloc>:
 800a430:	4b02      	ldr	r3, [pc, #8]	@ (800a43c <malloc+0xc>)
 800a432:	4601      	mov	r1, r0
 800a434:	6818      	ldr	r0, [r3, #0]
 800a436:	f000 b825 	b.w	800a484 <_malloc_r>
 800a43a:	bf00      	nop
 800a43c:	20000020 	.word	0x20000020

0800a440 <sbrk_aligned>:
 800a440:	b570      	push	{r4, r5, r6, lr}
 800a442:	4e0f      	ldr	r6, [pc, #60]	@ (800a480 <sbrk_aligned+0x40>)
 800a444:	460c      	mov	r4, r1
 800a446:	6831      	ldr	r1, [r6, #0]
 800a448:	4605      	mov	r5, r0
 800a44a:	b911      	cbnz	r1, 800a452 <sbrk_aligned+0x12>
 800a44c:	f000 fc62 	bl	800ad14 <_sbrk_r>
 800a450:	6030      	str	r0, [r6, #0]
 800a452:	4621      	mov	r1, r4
 800a454:	4628      	mov	r0, r5
 800a456:	f000 fc5d 	bl	800ad14 <_sbrk_r>
 800a45a:	1c43      	adds	r3, r0, #1
 800a45c:	d103      	bne.n	800a466 <sbrk_aligned+0x26>
 800a45e:	f04f 34ff 	mov.w	r4, #4294967295
 800a462:	4620      	mov	r0, r4
 800a464:	bd70      	pop	{r4, r5, r6, pc}
 800a466:	1cc4      	adds	r4, r0, #3
 800a468:	f024 0403 	bic.w	r4, r4, #3
 800a46c:	42a0      	cmp	r0, r4
 800a46e:	d0f8      	beq.n	800a462 <sbrk_aligned+0x22>
 800a470:	1a21      	subs	r1, r4, r0
 800a472:	4628      	mov	r0, r5
 800a474:	f000 fc4e 	bl	800ad14 <_sbrk_r>
 800a478:	3001      	adds	r0, #1
 800a47a:	d1f2      	bne.n	800a462 <sbrk_aligned+0x22>
 800a47c:	e7ef      	b.n	800a45e <sbrk_aligned+0x1e>
 800a47e:	bf00      	nop
 800a480:	200040b0 	.word	0x200040b0

0800a484 <_malloc_r>:
 800a484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a488:	1ccd      	adds	r5, r1, #3
 800a48a:	f025 0503 	bic.w	r5, r5, #3
 800a48e:	3508      	adds	r5, #8
 800a490:	2d0c      	cmp	r5, #12
 800a492:	bf38      	it	cc
 800a494:	250c      	movcc	r5, #12
 800a496:	2d00      	cmp	r5, #0
 800a498:	4606      	mov	r6, r0
 800a49a:	db01      	blt.n	800a4a0 <_malloc_r+0x1c>
 800a49c:	42a9      	cmp	r1, r5
 800a49e:	d904      	bls.n	800a4aa <_malloc_r+0x26>
 800a4a0:	230c      	movs	r3, #12
 800a4a2:	6033      	str	r3, [r6, #0]
 800a4a4:	2000      	movs	r0, #0
 800a4a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a580 <_malloc_r+0xfc>
 800a4ae:	f000 f869 	bl	800a584 <__malloc_lock>
 800a4b2:	f8d8 3000 	ldr.w	r3, [r8]
 800a4b6:	461c      	mov	r4, r3
 800a4b8:	bb44      	cbnz	r4, 800a50c <_malloc_r+0x88>
 800a4ba:	4629      	mov	r1, r5
 800a4bc:	4630      	mov	r0, r6
 800a4be:	f7ff ffbf 	bl	800a440 <sbrk_aligned>
 800a4c2:	1c43      	adds	r3, r0, #1
 800a4c4:	4604      	mov	r4, r0
 800a4c6:	d158      	bne.n	800a57a <_malloc_r+0xf6>
 800a4c8:	f8d8 4000 	ldr.w	r4, [r8]
 800a4cc:	4627      	mov	r7, r4
 800a4ce:	2f00      	cmp	r7, #0
 800a4d0:	d143      	bne.n	800a55a <_malloc_r+0xd6>
 800a4d2:	2c00      	cmp	r4, #0
 800a4d4:	d04b      	beq.n	800a56e <_malloc_r+0xea>
 800a4d6:	6823      	ldr	r3, [r4, #0]
 800a4d8:	4639      	mov	r1, r7
 800a4da:	4630      	mov	r0, r6
 800a4dc:	eb04 0903 	add.w	r9, r4, r3
 800a4e0:	f000 fc18 	bl	800ad14 <_sbrk_r>
 800a4e4:	4581      	cmp	r9, r0
 800a4e6:	d142      	bne.n	800a56e <_malloc_r+0xea>
 800a4e8:	6821      	ldr	r1, [r4, #0]
 800a4ea:	4630      	mov	r0, r6
 800a4ec:	1a6d      	subs	r5, r5, r1
 800a4ee:	4629      	mov	r1, r5
 800a4f0:	f7ff ffa6 	bl	800a440 <sbrk_aligned>
 800a4f4:	3001      	adds	r0, #1
 800a4f6:	d03a      	beq.n	800a56e <_malloc_r+0xea>
 800a4f8:	6823      	ldr	r3, [r4, #0]
 800a4fa:	442b      	add	r3, r5
 800a4fc:	6023      	str	r3, [r4, #0]
 800a4fe:	f8d8 3000 	ldr.w	r3, [r8]
 800a502:	685a      	ldr	r2, [r3, #4]
 800a504:	bb62      	cbnz	r2, 800a560 <_malloc_r+0xdc>
 800a506:	f8c8 7000 	str.w	r7, [r8]
 800a50a:	e00f      	b.n	800a52c <_malloc_r+0xa8>
 800a50c:	6822      	ldr	r2, [r4, #0]
 800a50e:	1b52      	subs	r2, r2, r5
 800a510:	d420      	bmi.n	800a554 <_malloc_r+0xd0>
 800a512:	2a0b      	cmp	r2, #11
 800a514:	d917      	bls.n	800a546 <_malloc_r+0xc2>
 800a516:	1961      	adds	r1, r4, r5
 800a518:	42a3      	cmp	r3, r4
 800a51a:	6025      	str	r5, [r4, #0]
 800a51c:	bf18      	it	ne
 800a51e:	6059      	strne	r1, [r3, #4]
 800a520:	6863      	ldr	r3, [r4, #4]
 800a522:	bf08      	it	eq
 800a524:	f8c8 1000 	streq.w	r1, [r8]
 800a528:	5162      	str	r2, [r4, r5]
 800a52a:	604b      	str	r3, [r1, #4]
 800a52c:	4630      	mov	r0, r6
 800a52e:	f000 f82f 	bl	800a590 <__malloc_unlock>
 800a532:	f104 000b 	add.w	r0, r4, #11
 800a536:	1d23      	adds	r3, r4, #4
 800a538:	f020 0007 	bic.w	r0, r0, #7
 800a53c:	1ac2      	subs	r2, r0, r3
 800a53e:	bf1c      	itt	ne
 800a540:	1a1b      	subne	r3, r3, r0
 800a542:	50a3      	strne	r3, [r4, r2]
 800a544:	e7af      	b.n	800a4a6 <_malloc_r+0x22>
 800a546:	6862      	ldr	r2, [r4, #4]
 800a548:	42a3      	cmp	r3, r4
 800a54a:	bf0c      	ite	eq
 800a54c:	f8c8 2000 	streq.w	r2, [r8]
 800a550:	605a      	strne	r2, [r3, #4]
 800a552:	e7eb      	b.n	800a52c <_malloc_r+0xa8>
 800a554:	4623      	mov	r3, r4
 800a556:	6864      	ldr	r4, [r4, #4]
 800a558:	e7ae      	b.n	800a4b8 <_malloc_r+0x34>
 800a55a:	463c      	mov	r4, r7
 800a55c:	687f      	ldr	r7, [r7, #4]
 800a55e:	e7b6      	b.n	800a4ce <_malloc_r+0x4a>
 800a560:	461a      	mov	r2, r3
 800a562:	685b      	ldr	r3, [r3, #4]
 800a564:	42a3      	cmp	r3, r4
 800a566:	d1fb      	bne.n	800a560 <_malloc_r+0xdc>
 800a568:	2300      	movs	r3, #0
 800a56a:	6053      	str	r3, [r2, #4]
 800a56c:	e7de      	b.n	800a52c <_malloc_r+0xa8>
 800a56e:	230c      	movs	r3, #12
 800a570:	4630      	mov	r0, r6
 800a572:	6033      	str	r3, [r6, #0]
 800a574:	f000 f80c 	bl	800a590 <__malloc_unlock>
 800a578:	e794      	b.n	800a4a4 <_malloc_r+0x20>
 800a57a:	6005      	str	r5, [r0, #0]
 800a57c:	e7d6      	b.n	800a52c <_malloc_r+0xa8>
 800a57e:	bf00      	nop
 800a580:	200040b4 	.word	0x200040b4

0800a584 <__malloc_lock>:
 800a584:	4801      	ldr	r0, [pc, #4]	@ (800a58c <__malloc_lock+0x8>)
 800a586:	f7ff bedc 	b.w	800a342 <__retarget_lock_acquire_recursive>
 800a58a:	bf00      	nop
 800a58c:	200040ac 	.word	0x200040ac

0800a590 <__malloc_unlock>:
 800a590:	4801      	ldr	r0, [pc, #4]	@ (800a598 <__malloc_unlock+0x8>)
 800a592:	f7ff bed7 	b.w	800a344 <__retarget_lock_release_recursive>
 800a596:	bf00      	nop
 800a598:	200040ac 	.word	0x200040ac

0800a59c <__ssputs_r>:
 800a59c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5a0:	461f      	mov	r7, r3
 800a5a2:	688e      	ldr	r6, [r1, #8]
 800a5a4:	4682      	mov	sl, r0
 800a5a6:	42be      	cmp	r6, r7
 800a5a8:	460c      	mov	r4, r1
 800a5aa:	4690      	mov	r8, r2
 800a5ac:	680b      	ldr	r3, [r1, #0]
 800a5ae:	d82d      	bhi.n	800a60c <__ssputs_r+0x70>
 800a5b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a5b4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a5b8:	d026      	beq.n	800a608 <__ssputs_r+0x6c>
 800a5ba:	6965      	ldr	r5, [r4, #20]
 800a5bc:	6909      	ldr	r1, [r1, #16]
 800a5be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a5c2:	eba3 0901 	sub.w	r9, r3, r1
 800a5c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a5ca:	1c7b      	adds	r3, r7, #1
 800a5cc:	444b      	add	r3, r9
 800a5ce:	106d      	asrs	r5, r5, #1
 800a5d0:	429d      	cmp	r5, r3
 800a5d2:	bf38      	it	cc
 800a5d4:	461d      	movcc	r5, r3
 800a5d6:	0553      	lsls	r3, r2, #21
 800a5d8:	d527      	bpl.n	800a62a <__ssputs_r+0x8e>
 800a5da:	4629      	mov	r1, r5
 800a5dc:	f7ff ff52 	bl	800a484 <_malloc_r>
 800a5e0:	4606      	mov	r6, r0
 800a5e2:	b360      	cbz	r0, 800a63e <__ssputs_r+0xa2>
 800a5e4:	464a      	mov	r2, r9
 800a5e6:	6921      	ldr	r1, [r4, #16]
 800a5e8:	f7ff fead 	bl	800a346 <memcpy>
 800a5ec:	89a3      	ldrh	r3, [r4, #12]
 800a5ee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a5f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a5f6:	81a3      	strh	r3, [r4, #12]
 800a5f8:	6126      	str	r6, [r4, #16]
 800a5fa:	444e      	add	r6, r9
 800a5fc:	6026      	str	r6, [r4, #0]
 800a5fe:	463e      	mov	r6, r7
 800a600:	6165      	str	r5, [r4, #20]
 800a602:	eba5 0509 	sub.w	r5, r5, r9
 800a606:	60a5      	str	r5, [r4, #8]
 800a608:	42be      	cmp	r6, r7
 800a60a:	d900      	bls.n	800a60e <__ssputs_r+0x72>
 800a60c:	463e      	mov	r6, r7
 800a60e:	4632      	mov	r2, r6
 800a610:	4641      	mov	r1, r8
 800a612:	6820      	ldr	r0, [r4, #0]
 800a614:	f000 fb64 	bl	800ace0 <memmove>
 800a618:	2000      	movs	r0, #0
 800a61a:	68a3      	ldr	r3, [r4, #8]
 800a61c:	1b9b      	subs	r3, r3, r6
 800a61e:	60a3      	str	r3, [r4, #8]
 800a620:	6823      	ldr	r3, [r4, #0]
 800a622:	4433      	add	r3, r6
 800a624:	6023      	str	r3, [r4, #0]
 800a626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a62a:	462a      	mov	r2, r5
 800a62c:	f000 fb97 	bl	800ad5e <_realloc_r>
 800a630:	4606      	mov	r6, r0
 800a632:	2800      	cmp	r0, #0
 800a634:	d1e0      	bne.n	800a5f8 <__ssputs_r+0x5c>
 800a636:	4650      	mov	r0, sl
 800a638:	6921      	ldr	r1, [r4, #16]
 800a63a:	f7ff feb1 	bl	800a3a0 <_free_r>
 800a63e:	230c      	movs	r3, #12
 800a640:	f8ca 3000 	str.w	r3, [sl]
 800a644:	89a3      	ldrh	r3, [r4, #12]
 800a646:	f04f 30ff 	mov.w	r0, #4294967295
 800a64a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a64e:	81a3      	strh	r3, [r4, #12]
 800a650:	e7e9      	b.n	800a626 <__ssputs_r+0x8a>
	...

0800a654 <_svfiprintf_r>:
 800a654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a658:	4698      	mov	r8, r3
 800a65a:	898b      	ldrh	r3, [r1, #12]
 800a65c:	4607      	mov	r7, r0
 800a65e:	061b      	lsls	r3, r3, #24
 800a660:	460d      	mov	r5, r1
 800a662:	4614      	mov	r4, r2
 800a664:	b09d      	sub	sp, #116	@ 0x74
 800a666:	d510      	bpl.n	800a68a <_svfiprintf_r+0x36>
 800a668:	690b      	ldr	r3, [r1, #16]
 800a66a:	b973      	cbnz	r3, 800a68a <_svfiprintf_r+0x36>
 800a66c:	2140      	movs	r1, #64	@ 0x40
 800a66e:	f7ff ff09 	bl	800a484 <_malloc_r>
 800a672:	6028      	str	r0, [r5, #0]
 800a674:	6128      	str	r0, [r5, #16]
 800a676:	b930      	cbnz	r0, 800a686 <_svfiprintf_r+0x32>
 800a678:	230c      	movs	r3, #12
 800a67a:	603b      	str	r3, [r7, #0]
 800a67c:	f04f 30ff 	mov.w	r0, #4294967295
 800a680:	b01d      	add	sp, #116	@ 0x74
 800a682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a686:	2340      	movs	r3, #64	@ 0x40
 800a688:	616b      	str	r3, [r5, #20]
 800a68a:	2300      	movs	r3, #0
 800a68c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a68e:	2320      	movs	r3, #32
 800a690:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a694:	2330      	movs	r3, #48	@ 0x30
 800a696:	f04f 0901 	mov.w	r9, #1
 800a69a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a69e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800a838 <_svfiprintf_r+0x1e4>
 800a6a2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a6a6:	4623      	mov	r3, r4
 800a6a8:	469a      	mov	sl, r3
 800a6aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a6ae:	b10a      	cbz	r2, 800a6b4 <_svfiprintf_r+0x60>
 800a6b0:	2a25      	cmp	r2, #37	@ 0x25
 800a6b2:	d1f9      	bne.n	800a6a8 <_svfiprintf_r+0x54>
 800a6b4:	ebba 0b04 	subs.w	fp, sl, r4
 800a6b8:	d00b      	beq.n	800a6d2 <_svfiprintf_r+0x7e>
 800a6ba:	465b      	mov	r3, fp
 800a6bc:	4622      	mov	r2, r4
 800a6be:	4629      	mov	r1, r5
 800a6c0:	4638      	mov	r0, r7
 800a6c2:	f7ff ff6b 	bl	800a59c <__ssputs_r>
 800a6c6:	3001      	adds	r0, #1
 800a6c8:	f000 80a7 	beq.w	800a81a <_svfiprintf_r+0x1c6>
 800a6cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a6ce:	445a      	add	r2, fp
 800a6d0:	9209      	str	r2, [sp, #36]	@ 0x24
 800a6d2:	f89a 3000 	ldrb.w	r3, [sl]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	f000 809f 	beq.w	800a81a <_svfiprintf_r+0x1c6>
 800a6dc:	2300      	movs	r3, #0
 800a6de:	f04f 32ff 	mov.w	r2, #4294967295
 800a6e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a6e6:	f10a 0a01 	add.w	sl, sl, #1
 800a6ea:	9304      	str	r3, [sp, #16]
 800a6ec:	9307      	str	r3, [sp, #28]
 800a6ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a6f2:	931a      	str	r3, [sp, #104]	@ 0x68
 800a6f4:	4654      	mov	r4, sl
 800a6f6:	2205      	movs	r2, #5
 800a6f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6fc:	484e      	ldr	r0, [pc, #312]	@ (800a838 <_svfiprintf_r+0x1e4>)
 800a6fe:	f000 fb19 	bl	800ad34 <memchr>
 800a702:	9a04      	ldr	r2, [sp, #16]
 800a704:	b9d8      	cbnz	r0, 800a73e <_svfiprintf_r+0xea>
 800a706:	06d0      	lsls	r0, r2, #27
 800a708:	bf44      	itt	mi
 800a70a:	2320      	movmi	r3, #32
 800a70c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a710:	0711      	lsls	r1, r2, #28
 800a712:	bf44      	itt	mi
 800a714:	232b      	movmi	r3, #43	@ 0x2b
 800a716:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a71a:	f89a 3000 	ldrb.w	r3, [sl]
 800a71e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a720:	d015      	beq.n	800a74e <_svfiprintf_r+0xfa>
 800a722:	4654      	mov	r4, sl
 800a724:	2000      	movs	r0, #0
 800a726:	f04f 0c0a 	mov.w	ip, #10
 800a72a:	9a07      	ldr	r2, [sp, #28]
 800a72c:	4621      	mov	r1, r4
 800a72e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a732:	3b30      	subs	r3, #48	@ 0x30
 800a734:	2b09      	cmp	r3, #9
 800a736:	d94b      	bls.n	800a7d0 <_svfiprintf_r+0x17c>
 800a738:	b1b0      	cbz	r0, 800a768 <_svfiprintf_r+0x114>
 800a73a:	9207      	str	r2, [sp, #28]
 800a73c:	e014      	b.n	800a768 <_svfiprintf_r+0x114>
 800a73e:	eba0 0308 	sub.w	r3, r0, r8
 800a742:	fa09 f303 	lsl.w	r3, r9, r3
 800a746:	4313      	orrs	r3, r2
 800a748:	46a2      	mov	sl, r4
 800a74a:	9304      	str	r3, [sp, #16]
 800a74c:	e7d2      	b.n	800a6f4 <_svfiprintf_r+0xa0>
 800a74e:	9b03      	ldr	r3, [sp, #12]
 800a750:	1d19      	adds	r1, r3, #4
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	9103      	str	r1, [sp, #12]
 800a756:	2b00      	cmp	r3, #0
 800a758:	bfbb      	ittet	lt
 800a75a:	425b      	neglt	r3, r3
 800a75c:	f042 0202 	orrlt.w	r2, r2, #2
 800a760:	9307      	strge	r3, [sp, #28]
 800a762:	9307      	strlt	r3, [sp, #28]
 800a764:	bfb8      	it	lt
 800a766:	9204      	strlt	r2, [sp, #16]
 800a768:	7823      	ldrb	r3, [r4, #0]
 800a76a:	2b2e      	cmp	r3, #46	@ 0x2e
 800a76c:	d10a      	bne.n	800a784 <_svfiprintf_r+0x130>
 800a76e:	7863      	ldrb	r3, [r4, #1]
 800a770:	2b2a      	cmp	r3, #42	@ 0x2a
 800a772:	d132      	bne.n	800a7da <_svfiprintf_r+0x186>
 800a774:	9b03      	ldr	r3, [sp, #12]
 800a776:	3402      	adds	r4, #2
 800a778:	1d1a      	adds	r2, r3, #4
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	9203      	str	r2, [sp, #12]
 800a77e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a782:	9305      	str	r3, [sp, #20]
 800a784:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800a83c <_svfiprintf_r+0x1e8>
 800a788:	2203      	movs	r2, #3
 800a78a:	4650      	mov	r0, sl
 800a78c:	7821      	ldrb	r1, [r4, #0]
 800a78e:	f000 fad1 	bl	800ad34 <memchr>
 800a792:	b138      	cbz	r0, 800a7a4 <_svfiprintf_r+0x150>
 800a794:	2240      	movs	r2, #64	@ 0x40
 800a796:	9b04      	ldr	r3, [sp, #16]
 800a798:	eba0 000a 	sub.w	r0, r0, sl
 800a79c:	4082      	lsls	r2, r0
 800a79e:	4313      	orrs	r3, r2
 800a7a0:	3401      	adds	r4, #1
 800a7a2:	9304      	str	r3, [sp, #16]
 800a7a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7a8:	2206      	movs	r2, #6
 800a7aa:	4825      	ldr	r0, [pc, #148]	@ (800a840 <_svfiprintf_r+0x1ec>)
 800a7ac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a7b0:	f000 fac0 	bl	800ad34 <memchr>
 800a7b4:	2800      	cmp	r0, #0
 800a7b6:	d036      	beq.n	800a826 <_svfiprintf_r+0x1d2>
 800a7b8:	4b22      	ldr	r3, [pc, #136]	@ (800a844 <_svfiprintf_r+0x1f0>)
 800a7ba:	bb1b      	cbnz	r3, 800a804 <_svfiprintf_r+0x1b0>
 800a7bc:	9b03      	ldr	r3, [sp, #12]
 800a7be:	3307      	adds	r3, #7
 800a7c0:	f023 0307 	bic.w	r3, r3, #7
 800a7c4:	3308      	adds	r3, #8
 800a7c6:	9303      	str	r3, [sp, #12]
 800a7c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7ca:	4433      	add	r3, r6
 800a7cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a7ce:	e76a      	b.n	800a6a6 <_svfiprintf_r+0x52>
 800a7d0:	460c      	mov	r4, r1
 800a7d2:	2001      	movs	r0, #1
 800a7d4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a7d8:	e7a8      	b.n	800a72c <_svfiprintf_r+0xd8>
 800a7da:	2300      	movs	r3, #0
 800a7dc:	f04f 0c0a 	mov.w	ip, #10
 800a7e0:	4619      	mov	r1, r3
 800a7e2:	3401      	adds	r4, #1
 800a7e4:	9305      	str	r3, [sp, #20]
 800a7e6:	4620      	mov	r0, r4
 800a7e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a7ec:	3a30      	subs	r2, #48	@ 0x30
 800a7ee:	2a09      	cmp	r2, #9
 800a7f0:	d903      	bls.n	800a7fa <_svfiprintf_r+0x1a6>
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d0c6      	beq.n	800a784 <_svfiprintf_r+0x130>
 800a7f6:	9105      	str	r1, [sp, #20]
 800a7f8:	e7c4      	b.n	800a784 <_svfiprintf_r+0x130>
 800a7fa:	4604      	mov	r4, r0
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	fb0c 2101 	mla	r1, ip, r1, r2
 800a802:	e7f0      	b.n	800a7e6 <_svfiprintf_r+0x192>
 800a804:	ab03      	add	r3, sp, #12
 800a806:	9300      	str	r3, [sp, #0]
 800a808:	462a      	mov	r2, r5
 800a80a:	4638      	mov	r0, r7
 800a80c:	4b0e      	ldr	r3, [pc, #56]	@ (800a848 <_svfiprintf_r+0x1f4>)
 800a80e:	a904      	add	r1, sp, #16
 800a810:	f3af 8000 	nop.w
 800a814:	1c42      	adds	r2, r0, #1
 800a816:	4606      	mov	r6, r0
 800a818:	d1d6      	bne.n	800a7c8 <_svfiprintf_r+0x174>
 800a81a:	89ab      	ldrh	r3, [r5, #12]
 800a81c:	065b      	lsls	r3, r3, #25
 800a81e:	f53f af2d 	bmi.w	800a67c <_svfiprintf_r+0x28>
 800a822:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a824:	e72c      	b.n	800a680 <_svfiprintf_r+0x2c>
 800a826:	ab03      	add	r3, sp, #12
 800a828:	9300      	str	r3, [sp, #0]
 800a82a:	462a      	mov	r2, r5
 800a82c:	4638      	mov	r0, r7
 800a82e:	4b06      	ldr	r3, [pc, #24]	@ (800a848 <_svfiprintf_r+0x1f4>)
 800a830:	a904      	add	r1, sp, #16
 800a832:	f000 f87d 	bl	800a930 <_printf_i>
 800a836:	e7ed      	b.n	800a814 <_svfiprintf_r+0x1c0>
 800a838:	0800ce45 	.word	0x0800ce45
 800a83c:	0800ce4b 	.word	0x0800ce4b
 800a840:	0800ce4f 	.word	0x0800ce4f
 800a844:	00000000 	.word	0x00000000
 800a848:	0800a59d 	.word	0x0800a59d

0800a84c <_printf_common>:
 800a84c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a850:	4616      	mov	r6, r2
 800a852:	4698      	mov	r8, r3
 800a854:	688a      	ldr	r2, [r1, #8]
 800a856:	690b      	ldr	r3, [r1, #16]
 800a858:	4607      	mov	r7, r0
 800a85a:	4293      	cmp	r3, r2
 800a85c:	bfb8      	it	lt
 800a85e:	4613      	movlt	r3, r2
 800a860:	6033      	str	r3, [r6, #0]
 800a862:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a866:	460c      	mov	r4, r1
 800a868:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a86c:	b10a      	cbz	r2, 800a872 <_printf_common+0x26>
 800a86e:	3301      	adds	r3, #1
 800a870:	6033      	str	r3, [r6, #0]
 800a872:	6823      	ldr	r3, [r4, #0]
 800a874:	0699      	lsls	r1, r3, #26
 800a876:	bf42      	ittt	mi
 800a878:	6833      	ldrmi	r3, [r6, #0]
 800a87a:	3302      	addmi	r3, #2
 800a87c:	6033      	strmi	r3, [r6, #0]
 800a87e:	6825      	ldr	r5, [r4, #0]
 800a880:	f015 0506 	ands.w	r5, r5, #6
 800a884:	d106      	bne.n	800a894 <_printf_common+0x48>
 800a886:	f104 0a19 	add.w	sl, r4, #25
 800a88a:	68e3      	ldr	r3, [r4, #12]
 800a88c:	6832      	ldr	r2, [r6, #0]
 800a88e:	1a9b      	subs	r3, r3, r2
 800a890:	42ab      	cmp	r3, r5
 800a892:	dc2b      	bgt.n	800a8ec <_printf_common+0xa0>
 800a894:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a898:	6822      	ldr	r2, [r4, #0]
 800a89a:	3b00      	subs	r3, #0
 800a89c:	bf18      	it	ne
 800a89e:	2301      	movne	r3, #1
 800a8a0:	0692      	lsls	r2, r2, #26
 800a8a2:	d430      	bmi.n	800a906 <_printf_common+0xba>
 800a8a4:	4641      	mov	r1, r8
 800a8a6:	4638      	mov	r0, r7
 800a8a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a8ac:	47c8      	blx	r9
 800a8ae:	3001      	adds	r0, #1
 800a8b0:	d023      	beq.n	800a8fa <_printf_common+0xae>
 800a8b2:	6823      	ldr	r3, [r4, #0]
 800a8b4:	6922      	ldr	r2, [r4, #16]
 800a8b6:	f003 0306 	and.w	r3, r3, #6
 800a8ba:	2b04      	cmp	r3, #4
 800a8bc:	bf14      	ite	ne
 800a8be:	2500      	movne	r5, #0
 800a8c0:	6833      	ldreq	r3, [r6, #0]
 800a8c2:	f04f 0600 	mov.w	r6, #0
 800a8c6:	bf08      	it	eq
 800a8c8:	68e5      	ldreq	r5, [r4, #12]
 800a8ca:	f104 041a 	add.w	r4, r4, #26
 800a8ce:	bf08      	it	eq
 800a8d0:	1aed      	subeq	r5, r5, r3
 800a8d2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a8d6:	bf08      	it	eq
 800a8d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a8dc:	4293      	cmp	r3, r2
 800a8de:	bfc4      	itt	gt
 800a8e0:	1a9b      	subgt	r3, r3, r2
 800a8e2:	18ed      	addgt	r5, r5, r3
 800a8e4:	42b5      	cmp	r5, r6
 800a8e6:	d11a      	bne.n	800a91e <_printf_common+0xd2>
 800a8e8:	2000      	movs	r0, #0
 800a8ea:	e008      	b.n	800a8fe <_printf_common+0xb2>
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	4652      	mov	r2, sl
 800a8f0:	4641      	mov	r1, r8
 800a8f2:	4638      	mov	r0, r7
 800a8f4:	47c8      	blx	r9
 800a8f6:	3001      	adds	r0, #1
 800a8f8:	d103      	bne.n	800a902 <_printf_common+0xb6>
 800a8fa:	f04f 30ff 	mov.w	r0, #4294967295
 800a8fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a902:	3501      	adds	r5, #1
 800a904:	e7c1      	b.n	800a88a <_printf_common+0x3e>
 800a906:	2030      	movs	r0, #48	@ 0x30
 800a908:	18e1      	adds	r1, r4, r3
 800a90a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a90e:	1c5a      	adds	r2, r3, #1
 800a910:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a914:	4422      	add	r2, r4
 800a916:	3302      	adds	r3, #2
 800a918:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a91c:	e7c2      	b.n	800a8a4 <_printf_common+0x58>
 800a91e:	2301      	movs	r3, #1
 800a920:	4622      	mov	r2, r4
 800a922:	4641      	mov	r1, r8
 800a924:	4638      	mov	r0, r7
 800a926:	47c8      	blx	r9
 800a928:	3001      	adds	r0, #1
 800a92a:	d0e6      	beq.n	800a8fa <_printf_common+0xae>
 800a92c:	3601      	adds	r6, #1
 800a92e:	e7d9      	b.n	800a8e4 <_printf_common+0x98>

0800a930 <_printf_i>:
 800a930:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a934:	7e0f      	ldrb	r7, [r1, #24]
 800a936:	4691      	mov	r9, r2
 800a938:	2f78      	cmp	r7, #120	@ 0x78
 800a93a:	4680      	mov	r8, r0
 800a93c:	460c      	mov	r4, r1
 800a93e:	469a      	mov	sl, r3
 800a940:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a942:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a946:	d807      	bhi.n	800a958 <_printf_i+0x28>
 800a948:	2f62      	cmp	r7, #98	@ 0x62
 800a94a:	d80a      	bhi.n	800a962 <_printf_i+0x32>
 800a94c:	2f00      	cmp	r7, #0
 800a94e:	f000 80d1 	beq.w	800aaf4 <_printf_i+0x1c4>
 800a952:	2f58      	cmp	r7, #88	@ 0x58
 800a954:	f000 80b8 	beq.w	800aac8 <_printf_i+0x198>
 800a958:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a95c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a960:	e03a      	b.n	800a9d8 <_printf_i+0xa8>
 800a962:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a966:	2b15      	cmp	r3, #21
 800a968:	d8f6      	bhi.n	800a958 <_printf_i+0x28>
 800a96a:	a101      	add	r1, pc, #4	@ (adr r1, 800a970 <_printf_i+0x40>)
 800a96c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a970:	0800a9c9 	.word	0x0800a9c9
 800a974:	0800a9dd 	.word	0x0800a9dd
 800a978:	0800a959 	.word	0x0800a959
 800a97c:	0800a959 	.word	0x0800a959
 800a980:	0800a959 	.word	0x0800a959
 800a984:	0800a959 	.word	0x0800a959
 800a988:	0800a9dd 	.word	0x0800a9dd
 800a98c:	0800a959 	.word	0x0800a959
 800a990:	0800a959 	.word	0x0800a959
 800a994:	0800a959 	.word	0x0800a959
 800a998:	0800a959 	.word	0x0800a959
 800a99c:	0800aadb 	.word	0x0800aadb
 800a9a0:	0800aa07 	.word	0x0800aa07
 800a9a4:	0800aa95 	.word	0x0800aa95
 800a9a8:	0800a959 	.word	0x0800a959
 800a9ac:	0800a959 	.word	0x0800a959
 800a9b0:	0800aafd 	.word	0x0800aafd
 800a9b4:	0800a959 	.word	0x0800a959
 800a9b8:	0800aa07 	.word	0x0800aa07
 800a9bc:	0800a959 	.word	0x0800a959
 800a9c0:	0800a959 	.word	0x0800a959
 800a9c4:	0800aa9d 	.word	0x0800aa9d
 800a9c8:	6833      	ldr	r3, [r6, #0]
 800a9ca:	1d1a      	adds	r2, r3, #4
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	6032      	str	r2, [r6, #0]
 800a9d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a9d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a9d8:	2301      	movs	r3, #1
 800a9da:	e09c      	b.n	800ab16 <_printf_i+0x1e6>
 800a9dc:	6833      	ldr	r3, [r6, #0]
 800a9de:	6820      	ldr	r0, [r4, #0]
 800a9e0:	1d19      	adds	r1, r3, #4
 800a9e2:	6031      	str	r1, [r6, #0]
 800a9e4:	0606      	lsls	r6, r0, #24
 800a9e6:	d501      	bpl.n	800a9ec <_printf_i+0xbc>
 800a9e8:	681d      	ldr	r5, [r3, #0]
 800a9ea:	e003      	b.n	800a9f4 <_printf_i+0xc4>
 800a9ec:	0645      	lsls	r5, r0, #25
 800a9ee:	d5fb      	bpl.n	800a9e8 <_printf_i+0xb8>
 800a9f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a9f4:	2d00      	cmp	r5, #0
 800a9f6:	da03      	bge.n	800aa00 <_printf_i+0xd0>
 800a9f8:	232d      	movs	r3, #45	@ 0x2d
 800a9fa:	426d      	negs	r5, r5
 800a9fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aa00:	230a      	movs	r3, #10
 800aa02:	4858      	ldr	r0, [pc, #352]	@ (800ab64 <_printf_i+0x234>)
 800aa04:	e011      	b.n	800aa2a <_printf_i+0xfa>
 800aa06:	6821      	ldr	r1, [r4, #0]
 800aa08:	6833      	ldr	r3, [r6, #0]
 800aa0a:	0608      	lsls	r0, r1, #24
 800aa0c:	f853 5b04 	ldr.w	r5, [r3], #4
 800aa10:	d402      	bmi.n	800aa18 <_printf_i+0xe8>
 800aa12:	0649      	lsls	r1, r1, #25
 800aa14:	bf48      	it	mi
 800aa16:	b2ad      	uxthmi	r5, r5
 800aa18:	2f6f      	cmp	r7, #111	@ 0x6f
 800aa1a:	6033      	str	r3, [r6, #0]
 800aa1c:	bf14      	ite	ne
 800aa1e:	230a      	movne	r3, #10
 800aa20:	2308      	moveq	r3, #8
 800aa22:	4850      	ldr	r0, [pc, #320]	@ (800ab64 <_printf_i+0x234>)
 800aa24:	2100      	movs	r1, #0
 800aa26:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800aa2a:	6866      	ldr	r6, [r4, #4]
 800aa2c:	2e00      	cmp	r6, #0
 800aa2e:	60a6      	str	r6, [r4, #8]
 800aa30:	db05      	blt.n	800aa3e <_printf_i+0x10e>
 800aa32:	6821      	ldr	r1, [r4, #0]
 800aa34:	432e      	orrs	r6, r5
 800aa36:	f021 0104 	bic.w	r1, r1, #4
 800aa3a:	6021      	str	r1, [r4, #0]
 800aa3c:	d04b      	beq.n	800aad6 <_printf_i+0x1a6>
 800aa3e:	4616      	mov	r6, r2
 800aa40:	fbb5 f1f3 	udiv	r1, r5, r3
 800aa44:	fb03 5711 	mls	r7, r3, r1, r5
 800aa48:	5dc7      	ldrb	r7, [r0, r7]
 800aa4a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800aa4e:	462f      	mov	r7, r5
 800aa50:	42bb      	cmp	r3, r7
 800aa52:	460d      	mov	r5, r1
 800aa54:	d9f4      	bls.n	800aa40 <_printf_i+0x110>
 800aa56:	2b08      	cmp	r3, #8
 800aa58:	d10b      	bne.n	800aa72 <_printf_i+0x142>
 800aa5a:	6823      	ldr	r3, [r4, #0]
 800aa5c:	07df      	lsls	r7, r3, #31
 800aa5e:	d508      	bpl.n	800aa72 <_printf_i+0x142>
 800aa60:	6923      	ldr	r3, [r4, #16]
 800aa62:	6861      	ldr	r1, [r4, #4]
 800aa64:	4299      	cmp	r1, r3
 800aa66:	bfde      	ittt	le
 800aa68:	2330      	movle	r3, #48	@ 0x30
 800aa6a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800aa6e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800aa72:	1b92      	subs	r2, r2, r6
 800aa74:	6122      	str	r2, [r4, #16]
 800aa76:	464b      	mov	r3, r9
 800aa78:	4621      	mov	r1, r4
 800aa7a:	4640      	mov	r0, r8
 800aa7c:	f8cd a000 	str.w	sl, [sp]
 800aa80:	aa03      	add	r2, sp, #12
 800aa82:	f7ff fee3 	bl	800a84c <_printf_common>
 800aa86:	3001      	adds	r0, #1
 800aa88:	d14a      	bne.n	800ab20 <_printf_i+0x1f0>
 800aa8a:	f04f 30ff 	mov.w	r0, #4294967295
 800aa8e:	b004      	add	sp, #16
 800aa90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa94:	6823      	ldr	r3, [r4, #0]
 800aa96:	f043 0320 	orr.w	r3, r3, #32
 800aa9a:	6023      	str	r3, [r4, #0]
 800aa9c:	2778      	movs	r7, #120	@ 0x78
 800aa9e:	4832      	ldr	r0, [pc, #200]	@ (800ab68 <_printf_i+0x238>)
 800aaa0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800aaa4:	6823      	ldr	r3, [r4, #0]
 800aaa6:	6831      	ldr	r1, [r6, #0]
 800aaa8:	061f      	lsls	r7, r3, #24
 800aaaa:	f851 5b04 	ldr.w	r5, [r1], #4
 800aaae:	d402      	bmi.n	800aab6 <_printf_i+0x186>
 800aab0:	065f      	lsls	r7, r3, #25
 800aab2:	bf48      	it	mi
 800aab4:	b2ad      	uxthmi	r5, r5
 800aab6:	6031      	str	r1, [r6, #0]
 800aab8:	07d9      	lsls	r1, r3, #31
 800aaba:	bf44      	itt	mi
 800aabc:	f043 0320 	orrmi.w	r3, r3, #32
 800aac0:	6023      	strmi	r3, [r4, #0]
 800aac2:	b11d      	cbz	r5, 800aacc <_printf_i+0x19c>
 800aac4:	2310      	movs	r3, #16
 800aac6:	e7ad      	b.n	800aa24 <_printf_i+0xf4>
 800aac8:	4826      	ldr	r0, [pc, #152]	@ (800ab64 <_printf_i+0x234>)
 800aaca:	e7e9      	b.n	800aaa0 <_printf_i+0x170>
 800aacc:	6823      	ldr	r3, [r4, #0]
 800aace:	f023 0320 	bic.w	r3, r3, #32
 800aad2:	6023      	str	r3, [r4, #0]
 800aad4:	e7f6      	b.n	800aac4 <_printf_i+0x194>
 800aad6:	4616      	mov	r6, r2
 800aad8:	e7bd      	b.n	800aa56 <_printf_i+0x126>
 800aada:	6833      	ldr	r3, [r6, #0]
 800aadc:	6825      	ldr	r5, [r4, #0]
 800aade:	1d18      	adds	r0, r3, #4
 800aae0:	6961      	ldr	r1, [r4, #20]
 800aae2:	6030      	str	r0, [r6, #0]
 800aae4:	062e      	lsls	r6, r5, #24
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	d501      	bpl.n	800aaee <_printf_i+0x1be>
 800aaea:	6019      	str	r1, [r3, #0]
 800aaec:	e002      	b.n	800aaf4 <_printf_i+0x1c4>
 800aaee:	0668      	lsls	r0, r5, #25
 800aaf0:	d5fb      	bpl.n	800aaea <_printf_i+0x1ba>
 800aaf2:	8019      	strh	r1, [r3, #0]
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	4616      	mov	r6, r2
 800aaf8:	6123      	str	r3, [r4, #16]
 800aafa:	e7bc      	b.n	800aa76 <_printf_i+0x146>
 800aafc:	6833      	ldr	r3, [r6, #0]
 800aafe:	2100      	movs	r1, #0
 800ab00:	1d1a      	adds	r2, r3, #4
 800ab02:	6032      	str	r2, [r6, #0]
 800ab04:	681e      	ldr	r6, [r3, #0]
 800ab06:	6862      	ldr	r2, [r4, #4]
 800ab08:	4630      	mov	r0, r6
 800ab0a:	f000 f913 	bl	800ad34 <memchr>
 800ab0e:	b108      	cbz	r0, 800ab14 <_printf_i+0x1e4>
 800ab10:	1b80      	subs	r0, r0, r6
 800ab12:	6060      	str	r0, [r4, #4]
 800ab14:	6863      	ldr	r3, [r4, #4]
 800ab16:	6123      	str	r3, [r4, #16]
 800ab18:	2300      	movs	r3, #0
 800ab1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ab1e:	e7aa      	b.n	800aa76 <_printf_i+0x146>
 800ab20:	4632      	mov	r2, r6
 800ab22:	4649      	mov	r1, r9
 800ab24:	4640      	mov	r0, r8
 800ab26:	6923      	ldr	r3, [r4, #16]
 800ab28:	47d0      	blx	sl
 800ab2a:	3001      	adds	r0, #1
 800ab2c:	d0ad      	beq.n	800aa8a <_printf_i+0x15a>
 800ab2e:	6823      	ldr	r3, [r4, #0]
 800ab30:	079b      	lsls	r3, r3, #30
 800ab32:	d413      	bmi.n	800ab5c <_printf_i+0x22c>
 800ab34:	68e0      	ldr	r0, [r4, #12]
 800ab36:	9b03      	ldr	r3, [sp, #12]
 800ab38:	4298      	cmp	r0, r3
 800ab3a:	bfb8      	it	lt
 800ab3c:	4618      	movlt	r0, r3
 800ab3e:	e7a6      	b.n	800aa8e <_printf_i+0x15e>
 800ab40:	2301      	movs	r3, #1
 800ab42:	4632      	mov	r2, r6
 800ab44:	4649      	mov	r1, r9
 800ab46:	4640      	mov	r0, r8
 800ab48:	47d0      	blx	sl
 800ab4a:	3001      	adds	r0, #1
 800ab4c:	d09d      	beq.n	800aa8a <_printf_i+0x15a>
 800ab4e:	3501      	adds	r5, #1
 800ab50:	68e3      	ldr	r3, [r4, #12]
 800ab52:	9903      	ldr	r1, [sp, #12]
 800ab54:	1a5b      	subs	r3, r3, r1
 800ab56:	42ab      	cmp	r3, r5
 800ab58:	dcf2      	bgt.n	800ab40 <_printf_i+0x210>
 800ab5a:	e7eb      	b.n	800ab34 <_printf_i+0x204>
 800ab5c:	2500      	movs	r5, #0
 800ab5e:	f104 0619 	add.w	r6, r4, #25
 800ab62:	e7f5      	b.n	800ab50 <_printf_i+0x220>
 800ab64:	0800ce56 	.word	0x0800ce56
 800ab68:	0800ce67 	.word	0x0800ce67

0800ab6c <__sflush_r>:
 800ab6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ab70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab72:	0716      	lsls	r6, r2, #28
 800ab74:	4605      	mov	r5, r0
 800ab76:	460c      	mov	r4, r1
 800ab78:	d454      	bmi.n	800ac24 <__sflush_r+0xb8>
 800ab7a:	684b      	ldr	r3, [r1, #4]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	dc02      	bgt.n	800ab86 <__sflush_r+0x1a>
 800ab80:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	dd48      	ble.n	800ac18 <__sflush_r+0xac>
 800ab86:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ab88:	2e00      	cmp	r6, #0
 800ab8a:	d045      	beq.n	800ac18 <__sflush_r+0xac>
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ab92:	682f      	ldr	r7, [r5, #0]
 800ab94:	6a21      	ldr	r1, [r4, #32]
 800ab96:	602b      	str	r3, [r5, #0]
 800ab98:	d030      	beq.n	800abfc <__sflush_r+0x90>
 800ab9a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ab9c:	89a3      	ldrh	r3, [r4, #12]
 800ab9e:	0759      	lsls	r1, r3, #29
 800aba0:	d505      	bpl.n	800abae <__sflush_r+0x42>
 800aba2:	6863      	ldr	r3, [r4, #4]
 800aba4:	1ad2      	subs	r2, r2, r3
 800aba6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800aba8:	b10b      	cbz	r3, 800abae <__sflush_r+0x42>
 800abaa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800abac:	1ad2      	subs	r2, r2, r3
 800abae:	2300      	movs	r3, #0
 800abb0:	4628      	mov	r0, r5
 800abb2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800abb4:	6a21      	ldr	r1, [r4, #32]
 800abb6:	47b0      	blx	r6
 800abb8:	1c43      	adds	r3, r0, #1
 800abba:	89a3      	ldrh	r3, [r4, #12]
 800abbc:	d106      	bne.n	800abcc <__sflush_r+0x60>
 800abbe:	6829      	ldr	r1, [r5, #0]
 800abc0:	291d      	cmp	r1, #29
 800abc2:	d82b      	bhi.n	800ac1c <__sflush_r+0xb0>
 800abc4:	4a28      	ldr	r2, [pc, #160]	@ (800ac68 <__sflush_r+0xfc>)
 800abc6:	40ca      	lsrs	r2, r1
 800abc8:	07d6      	lsls	r6, r2, #31
 800abca:	d527      	bpl.n	800ac1c <__sflush_r+0xb0>
 800abcc:	2200      	movs	r2, #0
 800abce:	6062      	str	r2, [r4, #4]
 800abd0:	6922      	ldr	r2, [r4, #16]
 800abd2:	04d9      	lsls	r1, r3, #19
 800abd4:	6022      	str	r2, [r4, #0]
 800abd6:	d504      	bpl.n	800abe2 <__sflush_r+0x76>
 800abd8:	1c42      	adds	r2, r0, #1
 800abda:	d101      	bne.n	800abe0 <__sflush_r+0x74>
 800abdc:	682b      	ldr	r3, [r5, #0]
 800abde:	b903      	cbnz	r3, 800abe2 <__sflush_r+0x76>
 800abe0:	6560      	str	r0, [r4, #84]	@ 0x54
 800abe2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800abe4:	602f      	str	r7, [r5, #0]
 800abe6:	b1b9      	cbz	r1, 800ac18 <__sflush_r+0xac>
 800abe8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800abec:	4299      	cmp	r1, r3
 800abee:	d002      	beq.n	800abf6 <__sflush_r+0x8a>
 800abf0:	4628      	mov	r0, r5
 800abf2:	f7ff fbd5 	bl	800a3a0 <_free_r>
 800abf6:	2300      	movs	r3, #0
 800abf8:	6363      	str	r3, [r4, #52]	@ 0x34
 800abfa:	e00d      	b.n	800ac18 <__sflush_r+0xac>
 800abfc:	2301      	movs	r3, #1
 800abfe:	4628      	mov	r0, r5
 800ac00:	47b0      	blx	r6
 800ac02:	4602      	mov	r2, r0
 800ac04:	1c50      	adds	r0, r2, #1
 800ac06:	d1c9      	bne.n	800ab9c <__sflush_r+0x30>
 800ac08:	682b      	ldr	r3, [r5, #0]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d0c6      	beq.n	800ab9c <__sflush_r+0x30>
 800ac0e:	2b1d      	cmp	r3, #29
 800ac10:	d001      	beq.n	800ac16 <__sflush_r+0xaa>
 800ac12:	2b16      	cmp	r3, #22
 800ac14:	d11d      	bne.n	800ac52 <__sflush_r+0xe6>
 800ac16:	602f      	str	r7, [r5, #0]
 800ac18:	2000      	movs	r0, #0
 800ac1a:	e021      	b.n	800ac60 <__sflush_r+0xf4>
 800ac1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac20:	b21b      	sxth	r3, r3
 800ac22:	e01a      	b.n	800ac5a <__sflush_r+0xee>
 800ac24:	690f      	ldr	r7, [r1, #16]
 800ac26:	2f00      	cmp	r7, #0
 800ac28:	d0f6      	beq.n	800ac18 <__sflush_r+0xac>
 800ac2a:	0793      	lsls	r3, r2, #30
 800ac2c:	bf18      	it	ne
 800ac2e:	2300      	movne	r3, #0
 800ac30:	680e      	ldr	r6, [r1, #0]
 800ac32:	bf08      	it	eq
 800ac34:	694b      	ldreq	r3, [r1, #20]
 800ac36:	1bf6      	subs	r6, r6, r7
 800ac38:	600f      	str	r7, [r1, #0]
 800ac3a:	608b      	str	r3, [r1, #8]
 800ac3c:	2e00      	cmp	r6, #0
 800ac3e:	ddeb      	ble.n	800ac18 <__sflush_r+0xac>
 800ac40:	4633      	mov	r3, r6
 800ac42:	463a      	mov	r2, r7
 800ac44:	4628      	mov	r0, r5
 800ac46:	6a21      	ldr	r1, [r4, #32]
 800ac48:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800ac4c:	47e0      	blx	ip
 800ac4e:	2800      	cmp	r0, #0
 800ac50:	dc07      	bgt.n	800ac62 <__sflush_r+0xf6>
 800ac52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac5a:	f04f 30ff 	mov.w	r0, #4294967295
 800ac5e:	81a3      	strh	r3, [r4, #12]
 800ac60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac62:	4407      	add	r7, r0
 800ac64:	1a36      	subs	r6, r6, r0
 800ac66:	e7e9      	b.n	800ac3c <__sflush_r+0xd0>
 800ac68:	20400001 	.word	0x20400001

0800ac6c <_fflush_r>:
 800ac6c:	b538      	push	{r3, r4, r5, lr}
 800ac6e:	690b      	ldr	r3, [r1, #16]
 800ac70:	4605      	mov	r5, r0
 800ac72:	460c      	mov	r4, r1
 800ac74:	b913      	cbnz	r3, 800ac7c <_fflush_r+0x10>
 800ac76:	2500      	movs	r5, #0
 800ac78:	4628      	mov	r0, r5
 800ac7a:	bd38      	pop	{r3, r4, r5, pc}
 800ac7c:	b118      	cbz	r0, 800ac86 <_fflush_r+0x1a>
 800ac7e:	6a03      	ldr	r3, [r0, #32]
 800ac80:	b90b      	cbnz	r3, 800ac86 <_fflush_r+0x1a>
 800ac82:	f7ff fa37 	bl	800a0f4 <__sinit>
 800ac86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d0f3      	beq.n	800ac76 <_fflush_r+0xa>
 800ac8e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ac90:	07d0      	lsls	r0, r2, #31
 800ac92:	d404      	bmi.n	800ac9e <_fflush_r+0x32>
 800ac94:	0599      	lsls	r1, r3, #22
 800ac96:	d402      	bmi.n	800ac9e <_fflush_r+0x32>
 800ac98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ac9a:	f7ff fb52 	bl	800a342 <__retarget_lock_acquire_recursive>
 800ac9e:	4628      	mov	r0, r5
 800aca0:	4621      	mov	r1, r4
 800aca2:	f7ff ff63 	bl	800ab6c <__sflush_r>
 800aca6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aca8:	4605      	mov	r5, r0
 800acaa:	07da      	lsls	r2, r3, #31
 800acac:	d4e4      	bmi.n	800ac78 <_fflush_r+0xc>
 800acae:	89a3      	ldrh	r3, [r4, #12]
 800acb0:	059b      	lsls	r3, r3, #22
 800acb2:	d4e1      	bmi.n	800ac78 <_fflush_r+0xc>
 800acb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800acb6:	f7ff fb45 	bl	800a344 <__retarget_lock_release_recursive>
 800acba:	e7dd      	b.n	800ac78 <_fflush_r+0xc>

0800acbc <fiprintf>:
 800acbc:	b40e      	push	{r1, r2, r3}
 800acbe:	b503      	push	{r0, r1, lr}
 800acc0:	4601      	mov	r1, r0
 800acc2:	ab03      	add	r3, sp, #12
 800acc4:	4805      	ldr	r0, [pc, #20]	@ (800acdc <fiprintf+0x20>)
 800acc6:	f853 2b04 	ldr.w	r2, [r3], #4
 800acca:	6800      	ldr	r0, [r0, #0]
 800accc:	9301      	str	r3, [sp, #4]
 800acce:	f000 f89b 	bl	800ae08 <_vfiprintf_r>
 800acd2:	b002      	add	sp, #8
 800acd4:	f85d eb04 	ldr.w	lr, [sp], #4
 800acd8:	b003      	add	sp, #12
 800acda:	4770      	bx	lr
 800acdc:	20000020 	.word	0x20000020

0800ace0 <memmove>:
 800ace0:	4288      	cmp	r0, r1
 800ace2:	b510      	push	{r4, lr}
 800ace4:	eb01 0402 	add.w	r4, r1, r2
 800ace8:	d902      	bls.n	800acf0 <memmove+0x10>
 800acea:	4284      	cmp	r4, r0
 800acec:	4623      	mov	r3, r4
 800acee:	d807      	bhi.n	800ad00 <memmove+0x20>
 800acf0:	1e43      	subs	r3, r0, #1
 800acf2:	42a1      	cmp	r1, r4
 800acf4:	d008      	beq.n	800ad08 <memmove+0x28>
 800acf6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800acfa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800acfe:	e7f8      	b.n	800acf2 <memmove+0x12>
 800ad00:	4601      	mov	r1, r0
 800ad02:	4402      	add	r2, r0
 800ad04:	428a      	cmp	r2, r1
 800ad06:	d100      	bne.n	800ad0a <memmove+0x2a>
 800ad08:	bd10      	pop	{r4, pc}
 800ad0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ad0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ad12:	e7f7      	b.n	800ad04 <memmove+0x24>

0800ad14 <_sbrk_r>:
 800ad14:	b538      	push	{r3, r4, r5, lr}
 800ad16:	2300      	movs	r3, #0
 800ad18:	4d05      	ldr	r5, [pc, #20]	@ (800ad30 <_sbrk_r+0x1c>)
 800ad1a:	4604      	mov	r4, r0
 800ad1c:	4608      	mov	r0, r1
 800ad1e:	602b      	str	r3, [r5, #0]
 800ad20:	f7fc f8fa 	bl	8006f18 <_sbrk>
 800ad24:	1c43      	adds	r3, r0, #1
 800ad26:	d102      	bne.n	800ad2e <_sbrk_r+0x1a>
 800ad28:	682b      	ldr	r3, [r5, #0]
 800ad2a:	b103      	cbz	r3, 800ad2e <_sbrk_r+0x1a>
 800ad2c:	6023      	str	r3, [r4, #0]
 800ad2e:	bd38      	pop	{r3, r4, r5, pc}
 800ad30:	200040a8 	.word	0x200040a8

0800ad34 <memchr>:
 800ad34:	4603      	mov	r3, r0
 800ad36:	b510      	push	{r4, lr}
 800ad38:	b2c9      	uxtb	r1, r1
 800ad3a:	4402      	add	r2, r0
 800ad3c:	4293      	cmp	r3, r2
 800ad3e:	4618      	mov	r0, r3
 800ad40:	d101      	bne.n	800ad46 <memchr+0x12>
 800ad42:	2000      	movs	r0, #0
 800ad44:	e003      	b.n	800ad4e <memchr+0x1a>
 800ad46:	7804      	ldrb	r4, [r0, #0]
 800ad48:	3301      	adds	r3, #1
 800ad4a:	428c      	cmp	r4, r1
 800ad4c:	d1f6      	bne.n	800ad3c <memchr+0x8>
 800ad4e:	bd10      	pop	{r4, pc}

0800ad50 <abort>:
 800ad50:	2006      	movs	r0, #6
 800ad52:	b508      	push	{r3, lr}
 800ad54:	f000 fa2c 	bl	800b1b0 <raise>
 800ad58:	2001      	movs	r0, #1
 800ad5a:	f7fc f868 	bl	8006e2e <_exit>

0800ad5e <_realloc_r>:
 800ad5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad62:	4607      	mov	r7, r0
 800ad64:	4614      	mov	r4, r2
 800ad66:	460d      	mov	r5, r1
 800ad68:	b921      	cbnz	r1, 800ad74 <_realloc_r+0x16>
 800ad6a:	4611      	mov	r1, r2
 800ad6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad70:	f7ff bb88 	b.w	800a484 <_malloc_r>
 800ad74:	b92a      	cbnz	r2, 800ad82 <_realloc_r+0x24>
 800ad76:	f7ff fb13 	bl	800a3a0 <_free_r>
 800ad7a:	4625      	mov	r5, r4
 800ad7c:	4628      	mov	r0, r5
 800ad7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad82:	f000 fa31 	bl	800b1e8 <_malloc_usable_size_r>
 800ad86:	4284      	cmp	r4, r0
 800ad88:	4606      	mov	r6, r0
 800ad8a:	d802      	bhi.n	800ad92 <_realloc_r+0x34>
 800ad8c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ad90:	d8f4      	bhi.n	800ad7c <_realloc_r+0x1e>
 800ad92:	4621      	mov	r1, r4
 800ad94:	4638      	mov	r0, r7
 800ad96:	f7ff fb75 	bl	800a484 <_malloc_r>
 800ad9a:	4680      	mov	r8, r0
 800ad9c:	b908      	cbnz	r0, 800ada2 <_realloc_r+0x44>
 800ad9e:	4645      	mov	r5, r8
 800ada0:	e7ec      	b.n	800ad7c <_realloc_r+0x1e>
 800ada2:	42b4      	cmp	r4, r6
 800ada4:	4622      	mov	r2, r4
 800ada6:	4629      	mov	r1, r5
 800ada8:	bf28      	it	cs
 800adaa:	4632      	movcs	r2, r6
 800adac:	f7ff facb 	bl	800a346 <memcpy>
 800adb0:	4629      	mov	r1, r5
 800adb2:	4638      	mov	r0, r7
 800adb4:	f7ff faf4 	bl	800a3a0 <_free_r>
 800adb8:	e7f1      	b.n	800ad9e <_realloc_r+0x40>

0800adba <__sfputc_r>:
 800adba:	6893      	ldr	r3, [r2, #8]
 800adbc:	b410      	push	{r4}
 800adbe:	3b01      	subs	r3, #1
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	6093      	str	r3, [r2, #8]
 800adc4:	da07      	bge.n	800add6 <__sfputc_r+0x1c>
 800adc6:	6994      	ldr	r4, [r2, #24]
 800adc8:	42a3      	cmp	r3, r4
 800adca:	db01      	blt.n	800add0 <__sfputc_r+0x16>
 800adcc:	290a      	cmp	r1, #10
 800adce:	d102      	bne.n	800add6 <__sfputc_r+0x1c>
 800add0:	bc10      	pop	{r4}
 800add2:	f000 b931 	b.w	800b038 <__swbuf_r>
 800add6:	6813      	ldr	r3, [r2, #0]
 800add8:	1c58      	adds	r0, r3, #1
 800adda:	6010      	str	r0, [r2, #0]
 800addc:	7019      	strb	r1, [r3, #0]
 800adde:	4608      	mov	r0, r1
 800ade0:	bc10      	pop	{r4}
 800ade2:	4770      	bx	lr

0800ade4 <__sfputs_r>:
 800ade4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ade6:	4606      	mov	r6, r0
 800ade8:	460f      	mov	r7, r1
 800adea:	4614      	mov	r4, r2
 800adec:	18d5      	adds	r5, r2, r3
 800adee:	42ac      	cmp	r4, r5
 800adf0:	d101      	bne.n	800adf6 <__sfputs_r+0x12>
 800adf2:	2000      	movs	r0, #0
 800adf4:	e007      	b.n	800ae06 <__sfputs_r+0x22>
 800adf6:	463a      	mov	r2, r7
 800adf8:	4630      	mov	r0, r6
 800adfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adfe:	f7ff ffdc 	bl	800adba <__sfputc_r>
 800ae02:	1c43      	adds	r3, r0, #1
 800ae04:	d1f3      	bne.n	800adee <__sfputs_r+0xa>
 800ae06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ae08 <_vfiprintf_r>:
 800ae08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae0c:	460d      	mov	r5, r1
 800ae0e:	4614      	mov	r4, r2
 800ae10:	4698      	mov	r8, r3
 800ae12:	4606      	mov	r6, r0
 800ae14:	b09d      	sub	sp, #116	@ 0x74
 800ae16:	b118      	cbz	r0, 800ae20 <_vfiprintf_r+0x18>
 800ae18:	6a03      	ldr	r3, [r0, #32]
 800ae1a:	b90b      	cbnz	r3, 800ae20 <_vfiprintf_r+0x18>
 800ae1c:	f7ff f96a 	bl	800a0f4 <__sinit>
 800ae20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ae22:	07d9      	lsls	r1, r3, #31
 800ae24:	d405      	bmi.n	800ae32 <_vfiprintf_r+0x2a>
 800ae26:	89ab      	ldrh	r3, [r5, #12]
 800ae28:	059a      	lsls	r2, r3, #22
 800ae2a:	d402      	bmi.n	800ae32 <_vfiprintf_r+0x2a>
 800ae2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ae2e:	f7ff fa88 	bl	800a342 <__retarget_lock_acquire_recursive>
 800ae32:	89ab      	ldrh	r3, [r5, #12]
 800ae34:	071b      	lsls	r3, r3, #28
 800ae36:	d501      	bpl.n	800ae3c <_vfiprintf_r+0x34>
 800ae38:	692b      	ldr	r3, [r5, #16]
 800ae3a:	b99b      	cbnz	r3, 800ae64 <_vfiprintf_r+0x5c>
 800ae3c:	4629      	mov	r1, r5
 800ae3e:	4630      	mov	r0, r6
 800ae40:	f000 f938 	bl	800b0b4 <__swsetup_r>
 800ae44:	b170      	cbz	r0, 800ae64 <_vfiprintf_r+0x5c>
 800ae46:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ae48:	07dc      	lsls	r4, r3, #31
 800ae4a:	d504      	bpl.n	800ae56 <_vfiprintf_r+0x4e>
 800ae4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae50:	b01d      	add	sp, #116	@ 0x74
 800ae52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae56:	89ab      	ldrh	r3, [r5, #12]
 800ae58:	0598      	lsls	r0, r3, #22
 800ae5a:	d4f7      	bmi.n	800ae4c <_vfiprintf_r+0x44>
 800ae5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ae5e:	f7ff fa71 	bl	800a344 <__retarget_lock_release_recursive>
 800ae62:	e7f3      	b.n	800ae4c <_vfiprintf_r+0x44>
 800ae64:	2300      	movs	r3, #0
 800ae66:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae68:	2320      	movs	r3, #32
 800ae6a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ae6e:	2330      	movs	r3, #48	@ 0x30
 800ae70:	f04f 0901 	mov.w	r9, #1
 800ae74:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae78:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800b024 <_vfiprintf_r+0x21c>
 800ae7c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ae80:	4623      	mov	r3, r4
 800ae82:	469a      	mov	sl, r3
 800ae84:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae88:	b10a      	cbz	r2, 800ae8e <_vfiprintf_r+0x86>
 800ae8a:	2a25      	cmp	r2, #37	@ 0x25
 800ae8c:	d1f9      	bne.n	800ae82 <_vfiprintf_r+0x7a>
 800ae8e:	ebba 0b04 	subs.w	fp, sl, r4
 800ae92:	d00b      	beq.n	800aeac <_vfiprintf_r+0xa4>
 800ae94:	465b      	mov	r3, fp
 800ae96:	4622      	mov	r2, r4
 800ae98:	4629      	mov	r1, r5
 800ae9a:	4630      	mov	r0, r6
 800ae9c:	f7ff ffa2 	bl	800ade4 <__sfputs_r>
 800aea0:	3001      	adds	r0, #1
 800aea2:	f000 80a7 	beq.w	800aff4 <_vfiprintf_r+0x1ec>
 800aea6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aea8:	445a      	add	r2, fp
 800aeaa:	9209      	str	r2, [sp, #36]	@ 0x24
 800aeac:	f89a 3000 	ldrb.w	r3, [sl]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	f000 809f 	beq.w	800aff4 <_vfiprintf_r+0x1ec>
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	f04f 32ff 	mov.w	r2, #4294967295
 800aebc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aec0:	f10a 0a01 	add.w	sl, sl, #1
 800aec4:	9304      	str	r3, [sp, #16]
 800aec6:	9307      	str	r3, [sp, #28]
 800aec8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aecc:	931a      	str	r3, [sp, #104]	@ 0x68
 800aece:	4654      	mov	r4, sl
 800aed0:	2205      	movs	r2, #5
 800aed2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aed6:	4853      	ldr	r0, [pc, #332]	@ (800b024 <_vfiprintf_r+0x21c>)
 800aed8:	f7ff ff2c 	bl	800ad34 <memchr>
 800aedc:	9a04      	ldr	r2, [sp, #16]
 800aede:	b9d8      	cbnz	r0, 800af18 <_vfiprintf_r+0x110>
 800aee0:	06d1      	lsls	r1, r2, #27
 800aee2:	bf44      	itt	mi
 800aee4:	2320      	movmi	r3, #32
 800aee6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aeea:	0713      	lsls	r3, r2, #28
 800aeec:	bf44      	itt	mi
 800aeee:	232b      	movmi	r3, #43	@ 0x2b
 800aef0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aef4:	f89a 3000 	ldrb.w	r3, [sl]
 800aef8:	2b2a      	cmp	r3, #42	@ 0x2a
 800aefa:	d015      	beq.n	800af28 <_vfiprintf_r+0x120>
 800aefc:	4654      	mov	r4, sl
 800aefe:	2000      	movs	r0, #0
 800af00:	f04f 0c0a 	mov.w	ip, #10
 800af04:	9a07      	ldr	r2, [sp, #28]
 800af06:	4621      	mov	r1, r4
 800af08:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af0c:	3b30      	subs	r3, #48	@ 0x30
 800af0e:	2b09      	cmp	r3, #9
 800af10:	d94b      	bls.n	800afaa <_vfiprintf_r+0x1a2>
 800af12:	b1b0      	cbz	r0, 800af42 <_vfiprintf_r+0x13a>
 800af14:	9207      	str	r2, [sp, #28]
 800af16:	e014      	b.n	800af42 <_vfiprintf_r+0x13a>
 800af18:	eba0 0308 	sub.w	r3, r0, r8
 800af1c:	fa09 f303 	lsl.w	r3, r9, r3
 800af20:	4313      	orrs	r3, r2
 800af22:	46a2      	mov	sl, r4
 800af24:	9304      	str	r3, [sp, #16]
 800af26:	e7d2      	b.n	800aece <_vfiprintf_r+0xc6>
 800af28:	9b03      	ldr	r3, [sp, #12]
 800af2a:	1d19      	adds	r1, r3, #4
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	9103      	str	r1, [sp, #12]
 800af30:	2b00      	cmp	r3, #0
 800af32:	bfbb      	ittet	lt
 800af34:	425b      	neglt	r3, r3
 800af36:	f042 0202 	orrlt.w	r2, r2, #2
 800af3a:	9307      	strge	r3, [sp, #28]
 800af3c:	9307      	strlt	r3, [sp, #28]
 800af3e:	bfb8      	it	lt
 800af40:	9204      	strlt	r2, [sp, #16]
 800af42:	7823      	ldrb	r3, [r4, #0]
 800af44:	2b2e      	cmp	r3, #46	@ 0x2e
 800af46:	d10a      	bne.n	800af5e <_vfiprintf_r+0x156>
 800af48:	7863      	ldrb	r3, [r4, #1]
 800af4a:	2b2a      	cmp	r3, #42	@ 0x2a
 800af4c:	d132      	bne.n	800afb4 <_vfiprintf_r+0x1ac>
 800af4e:	9b03      	ldr	r3, [sp, #12]
 800af50:	3402      	adds	r4, #2
 800af52:	1d1a      	adds	r2, r3, #4
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	9203      	str	r2, [sp, #12]
 800af58:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800af5c:	9305      	str	r3, [sp, #20]
 800af5e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800b028 <_vfiprintf_r+0x220>
 800af62:	2203      	movs	r2, #3
 800af64:	4650      	mov	r0, sl
 800af66:	7821      	ldrb	r1, [r4, #0]
 800af68:	f7ff fee4 	bl	800ad34 <memchr>
 800af6c:	b138      	cbz	r0, 800af7e <_vfiprintf_r+0x176>
 800af6e:	2240      	movs	r2, #64	@ 0x40
 800af70:	9b04      	ldr	r3, [sp, #16]
 800af72:	eba0 000a 	sub.w	r0, r0, sl
 800af76:	4082      	lsls	r2, r0
 800af78:	4313      	orrs	r3, r2
 800af7a:	3401      	adds	r4, #1
 800af7c:	9304      	str	r3, [sp, #16]
 800af7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af82:	2206      	movs	r2, #6
 800af84:	4829      	ldr	r0, [pc, #164]	@ (800b02c <_vfiprintf_r+0x224>)
 800af86:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800af8a:	f7ff fed3 	bl	800ad34 <memchr>
 800af8e:	2800      	cmp	r0, #0
 800af90:	d03f      	beq.n	800b012 <_vfiprintf_r+0x20a>
 800af92:	4b27      	ldr	r3, [pc, #156]	@ (800b030 <_vfiprintf_r+0x228>)
 800af94:	bb1b      	cbnz	r3, 800afde <_vfiprintf_r+0x1d6>
 800af96:	9b03      	ldr	r3, [sp, #12]
 800af98:	3307      	adds	r3, #7
 800af9a:	f023 0307 	bic.w	r3, r3, #7
 800af9e:	3308      	adds	r3, #8
 800afa0:	9303      	str	r3, [sp, #12]
 800afa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afa4:	443b      	add	r3, r7
 800afa6:	9309      	str	r3, [sp, #36]	@ 0x24
 800afa8:	e76a      	b.n	800ae80 <_vfiprintf_r+0x78>
 800afaa:	460c      	mov	r4, r1
 800afac:	2001      	movs	r0, #1
 800afae:	fb0c 3202 	mla	r2, ip, r2, r3
 800afb2:	e7a8      	b.n	800af06 <_vfiprintf_r+0xfe>
 800afb4:	2300      	movs	r3, #0
 800afb6:	f04f 0c0a 	mov.w	ip, #10
 800afba:	4619      	mov	r1, r3
 800afbc:	3401      	adds	r4, #1
 800afbe:	9305      	str	r3, [sp, #20]
 800afc0:	4620      	mov	r0, r4
 800afc2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800afc6:	3a30      	subs	r2, #48	@ 0x30
 800afc8:	2a09      	cmp	r2, #9
 800afca:	d903      	bls.n	800afd4 <_vfiprintf_r+0x1cc>
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d0c6      	beq.n	800af5e <_vfiprintf_r+0x156>
 800afd0:	9105      	str	r1, [sp, #20]
 800afd2:	e7c4      	b.n	800af5e <_vfiprintf_r+0x156>
 800afd4:	4604      	mov	r4, r0
 800afd6:	2301      	movs	r3, #1
 800afd8:	fb0c 2101 	mla	r1, ip, r1, r2
 800afdc:	e7f0      	b.n	800afc0 <_vfiprintf_r+0x1b8>
 800afde:	ab03      	add	r3, sp, #12
 800afe0:	9300      	str	r3, [sp, #0]
 800afe2:	462a      	mov	r2, r5
 800afe4:	4630      	mov	r0, r6
 800afe6:	4b13      	ldr	r3, [pc, #76]	@ (800b034 <_vfiprintf_r+0x22c>)
 800afe8:	a904      	add	r1, sp, #16
 800afea:	f3af 8000 	nop.w
 800afee:	4607      	mov	r7, r0
 800aff0:	1c78      	adds	r0, r7, #1
 800aff2:	d1d6      	bne.n	800afa2 <_vfiprintf_r+0x19a>
 800aff4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aff6:	07d9      	lsls	r1, r3, #31
 800aff8:	d405      	bmi.n	800b006 <_vfiprintf_r+0x1fe>
 800affa:	89ab      	ldrh	r3, [r5, #12]
 800affc:	059a      	lsls	r2, r3, #22
 800affe:	d402      	bmi.n	800b006 <_vfiprintf_r+0x1fe>
 800b000:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b002:	f7ff f99f 	bl	800a344 <__retarget_lock_release_recursive>
 800b006:	89ab      	ldrh	r3, [r5, #12]
 800b008:	065b      	lsls	r3, r3, #25
 800b00a:	f53f af1f 	bmi.w	800ae4c <_vfiprintf_r+0x44>
 800b00e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b010:	e71e      	b.n	800ae50 <_vfiprintf_r+0x48>
 800b012:	ab03      	add	r3, sp, #12
 800b014:	9300      	str	r3, [sp, #0]
 800b016:	462a      	mov	r2, r5
 800b018:	4630      	mov	r0, r6
 800b01a:	4b06      	ldr	r3, [pc, #24]	@ (800b034 <_vfiprintf_r+0x22c>)
 800b01c:	a904      	add	r1, sp, #16
 800b01e:	f7ff fc87 	bl	800a930 <_printf_i>
 800b022:	e7e4      	b.n	800afee <_vfiprintf_r+0x1e6>
 800b024:	0800ce45 	.word	0x0800ce45
 800b028:	0800ce4b 	.word	0x0800ce4b
 800b02c:	0800ce4f 	.word	0x0800ce4f
 800b030:	00000000 	.word	0x00000000
 800b034:	0800ade5 	.word	0x0800ade5

0800b038 <__swbuf_r>:
 800b038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b03a:	460e      	mov	r6, r1
 800b03c:	4614      	mov	r4, r2
 800b03e:	4605      	mov	r5, r0
 800b040:	b118      	cbz	r0, 800b04a <__swbuf_r+0x12>
 800b042:	6a03      	ldr	r3, [r0, #32]
 800b044:	b90b      	cbnz	r3, 800b04a <__swbuf_r+0x12>
 800b046:	f7ff f855 	bl	800a0f4 <__sinit>
 800b04a:	69a3      	ldr	r3, [r4, #24]
 800b04c:	60a3      	str	r3, [r4, #8]
 800b04e:	89a3      	ldrh	r3, [r4, #12]
 800b050:	071a      	lsls	r2, r3, #28
 800b052:	d501      	bpl.n	800b058 <__swbuf_r+0x20>
 800b054:	6923      	ldr	r3, [r4, #16]
 800b056:	b943      	cbnz	r3, 800b06a <__swbuf_r+0x32>
 800b058:	4621      	mov	r1, r4
 800b05a:	4628      	mov	r0, r5
 800b05c:	f000 f82a 	bl	800b0b4 <__swsetup_r>
 800b060:	b118      	cbz	r0, 800b06a <__swbuf_r+0x32>
 800b062:	f04f 37ff 	mov.w	r7, #4294967295
 800b066:	4638      	mov	r0, r7
 800b068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b06a:	6823      	ldr	r3, [r4, #0]
 800b06c:	6922      	ldr	r2, [r4, #16]
 800b06e:	b2f6      	uxtb	r6, r6
 800b070:	1a98      	subs	r0, r3, r2
 800b072:	6963      	ldr	r3, [r4, #20]
 800b074:	4637      	mov	r7, r6
 800b076:	4283      	cmp	r3, r0
 800b078:	dc05      	bgt.n	800b086 <__swbuf_r+0x4e>
 800b07a:	4621      	mov	r1, r4
 800b07c:	4628      	mov	r0, r5
 800b07e:	f7ff fdf5 	bl	800ac6c <_fflush_r>
 800b082:	2800      	cmp	r0, #0
 800b084:	d1ed      	bne.n	800b062 <__swbuf_r+0x2a>
 800b086:	68a3      	ldr	r3, [r4, #8]
 800b088:	3b01      	subs	r3, #1
 800b08a:	60a3      	str	r3, [r4, #8]
 800b08c:	6823      	ldr	r3, [r4, #0]
 800b08e:	1c5a      	adds	r2, r3, #1
 800b090:	6022      	str	r2, [r4, #0]
 800b092:	701e      	strb	r6, [r3, #0]
 800b094:	6962      	ldr	r2, [r4, #20]
 800b096:	1c43      	adds	r3, r0, #1
 800b098:	429a      	cmp	r2, r3
 800b09a:	d004      	beq.n	800b0a6 <__swbuf_r+0x6e>
 800b09c:	89a3      	ldrh	r3, [r4, #12]
 800b09e:	07db      	lsls	r3, r3, #31
 800b0a0:	d5e1      	bpl.n	800b066 <__swbuf_r+0x2e>
 800b0a2:	2e0a      	cmp	r6, #10
 800b0a4:	d1df      	bne.n	800b066 <__swbuf_r+0x2e>
 800b0a6:	4621      	mov	r1, r4
 800b0a8:	4628      	mov	r0, r5
 800b0aa:	f7ff fddf 	bl	800ac6c <_fflush_r>
 800b0ae:	2800      	cmp	r0, #0
 800b0b0:	d0d9      	beq.n	800b066 <__swbuf_r+0x2e>
 800b0b2:	e7d6      	b.n	800b062 <__swbuf_r+0x2a>

0800b0b4 <__swsetup_r>:
 800b0b4:	b538      	push	{r3, r4, r5, lr}
 800b0b6:	4b29      	ldr	r3, [pc, #164]	@ (800b15c <__swsetup_r+0xa8>)
 800b0b8:	4605      	mov	r5, r0
 800b0ba:	6818      	ldr	r0, [r3, #0]
 800b0bc:	460c      	mov	r4, r1
 800b0be:	b118      	cbz	r0, 800b0c8 <__swsetup_r+0x14>
 800b0c0:	6a03      	ldr	r3, [r0, #32]
 800b0c2:	b90b      	cbnz	r3, 800b0c8 <__swsetup_r+0x14>
 800b0c4:	f7ff f816 	bl	800a0f4 <__sinit>
 800b0c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0cc:	0719      	lsls	r1, r3, #28
 800b0ce:	d422      	bmi.n	800b116 <__swsetup_r+0x62>
 800b0d0:	06da      	lsls	r2, r3, #27
 800b0d2:	d407      	bmi.n	800b0e4 <__swsetup_r+0x30>
 800b0d4:	2209      	movs	r2, #9
 800b0d6:	602a      	str	r2, [r5, #0]
 800b0d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b0dc:	f04f 30ff 	mov.w	r0, #4294967295
 800b0e0:	81a3      	strh	r3, [r4, #12]
 800b0e2:	e033      	b.n	800b14c <__swsetup_r+0x98>
 800b0e4:	0758      	lsls	r0, r3, #29
 800b0e6:	d512      	bpl.n	800b10e <__swsetup_r+0x5a>
 800b0e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b0ea:	b141      	cbz	r1, 800b0fe <__swsetup_r+0x4a>
 800b0ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b0f0:	4299      	cmp	r1, r3
 800b0f2:	d002      	beq.n	800b0fa <__swsetup_r+0x46>
 800b0f4:	4628      	mov	r0, r5
 800b0f6:	f7ff f953 	bl	800a3a0 <_free_r>
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	6363      	str	r3, [r4, #52]	@ 0x34
 800b0fe:	89a3      	ldrh	r3, [r4, #12]
 800b100:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b104:	81a3      	strh	r3, [r4, #12]
 800b106:	2300      	movs	r3, #0
 800b108:	6063      	str	r3, [r4, #4]
 800b10a:	6923      	ldr	r3, [r4, #16]
 800b10c:	6023      	str	r3, [r4, #0]
 800b10e:	89a3      	ldrh	r3, [r4, #12]
 800b110:	f043 0308 	orr.w	r3, r3, #8
 800b114:	81a3      	strh	r3, [r4, #12]
 800b116:	6923      	ldr	r3, [r4, #16]
 800b118:	b94b      	cbnz	r3, 800b12e <__swsetup_r+0x7a>
 800b11a:	89a3      	ldrh	r3, [r4, #12]
 800b11c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b120:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b124:	d003      	beq.n	800b12e <__swsetup_r+0x7a>
 800b126:	4621      	mov	r1, r4
 800b128:	4628      	mov	r0, r5
 800b12a:	f000 f88a 	bl	800b242 <__smakebuf_r>
 800b12e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b132:	f013 0201 	ands.w	r2, r3, #1
 800b136:	d00a      	beq.n	800b14e <__swsetup_r+0x9a>
 800b138:	2200      	movs	r2, #0
 800b13a:	60a2      	str	r2, [r4, #8]
 800b13c:	6962      	ldr	r2, [r4, #20]
 800b13e:	4252      	negs	r2, r2
 800b140:	61a2      	str	r2, [r4, #24]
 800b142:	6922      	ldr	r2, [r4, #16]
 800b144:	b942      	cbnz	r2, 800b158 <__swsetup_r+0xa4>
 800b146:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b14a:	d1c5      	bne.n	800b0d8 <__swsetup_r+0x24>
 800b14c:	bd38      	pop	{r3, r4, r5, pc}
 800b14e:	0799      	lsls	r1, r3, #30
 800b150:	bf58      	it	pl
 800b152:	6962      	ldrpl	r2, [r4, #20]
 800b154:	60a2      	str	r2, [r4, #8]
 800b156:	e7f4      	b.n	800b142 <__swsetup_r+0x8e>
 800b158:	2000      	movs	r0, #0
 800b15a:	e7f7      	b.n	800b14c <__swsetup_r+0x98>
 800b15c:	20000020 	.word	0x20000020

0800b160 <_raise_r>:
 800b160:	291f      	cmp	r1, #31
 800b162:	b538      	push	{r3, r4, r5, lr}
 800b164:	4605      	mov	r5, r0
 800b166:	460c      	mov	r4, r1
 800b168:	d904      	bls.n	800b174 <_raise_r+0x14>
 800b16a:	2316      	movs	r3, #22
 800b16c:	6003      	str	r3, [r0, #0]
 800b16e:	f04f 30ff 	mov.w	r0, #4294967295
 800b172:	bd38      	pop	{r3, r4, r5, pc}
 800b174:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b176:	b112      	cbz	r2, 800b17e <_raise_r+0x1e>
 800b178:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b17c:	b94b      	cbnz	r3, 800b192 <_raise_r+0x32>
 800b17e:	4628      	mov	r0, r5
 800b180:	f000 f830 	bl	800b1e4 <_getpid_r>
 800b184:	4622      	mov	r2, r4
 800b186:	4601      	mov	r1, r0
 800b188:	4628      	mov	r0, r5
 800b18a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b18e:	f000 b817 	b.w	800b1c0 <_kill_r>
 800b192:	2b01      	cmp	r3, #1
 800b194:	d00a      	beq.n	800b1ac <_raise_r+0x4c>
 800b196:	1c59      	adds	r1, r3, #1
 800b198:	d103      	bne.n	800b1a2 <_raise_r+0x42>
 800b19a:	2316      	movs	r3, #22
 800b19c:	6003      	str	r3, [r0, #0]
 800b19e:	2001      	movs	r0, #1
 800b1a0:	e7e7      	b.n	800b172 <_raise_r+0x12>
 800b1a2:	2100      	movs	r1, #0
 800b1a4:	4620      	mov	r0, r4
 800b1a6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b1aa:	4798      	blx	r3
 800b1ac:	2000      	movs	r0, #0
 800b1ae:	e7e0      	b.n	800b172 <_raise_r+0x12>

0800b1b0 <raise>:
 800b1b0:	4b02      	ldr	r3, [pc, #8]	@ (800b1bc <raise+0xc>)
 800b1b2:	4601      	mov	r1, r0
 800b1b4:	6818      	ldr	r0, [r3, #0]
 800b1b6:	f7ff bfd3 	b.w	800b160 <_raise_r>
 800b1ba:	bf00      	nop
 800b1bc:	20000020 	.word	0x20000020

0800b1c0 <_kill_r>:
 800b1c0:	b538      	push	{r3, r4, r5, lr}
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	4d06      	ldr	r5, [pc, #24]	@ (800b1e0 <_kill_r+0x20>)
 800b1c6:	4604      	mov	r4, r0
 800b1c8:	4608      	mov	r0, r1
 800b1ca:	4611      	mov	r1, r2
 800b1cc:	602b      	str	r3, [r5, #0]
 800b1ce:	f7fb fe1e 	bl	8006e0e <_kill>
 800b1d2:	1c43      	adds	r3, r0, #1
 800b1d4:	d102      	bne.n	800b1dc <_kill_r+0x1c>
 800b1d6:	682b      	ldr	r3, [r5, #0]
 800b1d8:	b103      	cbz	r3, 800b1dc <_kill_r+0x1c>
 800b1da:	6023      	str	r3, [r4, #0]
 800b1dc:	bd38      	pop	{r3, r4, r5, pc}
 800b1de:	bf00      	nop
 800b1e0:	200040a8 	.word	0x200040a8

0800b1e4 <_getpid_r>:
 800b1e4:	f7fb be0c 	b.w	8006e00 <_getpid>

0800b1e8 <_malloc_usable_size_r>:
 800b1e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1ec:	1f18      	subs	r0, r3, #4
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	bfbc      	itt	lt
 800b1f2:	580b      	ldrlt	r3, [r1, r0]
 800b1f4:	18c0      	addlt	r0, r0, r3
 800b1f6:	4770      	bx	lr

0800b1f8 <__swhatbuf_r>:
 800b1f8:	b570      	push	{r4, r5, r6, lr}
 800b1fa:	460c      	mov	r4, r1
 800b1fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b200:	4615      	mov	r5, r2
 800b202:	2900      	cmp	r1, #0
 800b204:	461e      	mov	r6, r3
 800b206:	b096      	sub	sp, #88	@ 0x58
 800b208:	da0c      	bge.n	800b224 <__swhatbuf_r+0x2c>
 800b20a:	89a3      	ldrh	r3, [r4, #12]
 800b20c:	2100      	movs	r1, #0
 800b20e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b212:	bf14      	ite	ne
 800b214:	2340      	movne	r3, #64	@ 0x40
 800b216:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b21a:	2000      	movs	r0, #0
 800b21c:	6031      	str	r1, [r6, #0]
 800b21e:	602b      	str	r3, [r5, #0]
 800b220:	b016      	add	sp, #88	@ 0x58
 800b222:	bd70      	pop	{r4, r5, r6, pc}
 800b224:	466a      	mov	r2, sp
 800b226:	f000 f849 	bl	800b2bc <_fstat_r>
 800b22a:	2800      	cmp	r0, #0
 800b22c:	dbed      	blt.n	800b20a <__swhatbuf_r+0x12>
 800b22e:	9901      	ldr	r1, [sp, #4]
 800b230:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b234:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b238:	4259      	negs	r1, r3
 800b23a:	4159      	adcs	r1, r3
 800b23c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b240:	e7eb      	b.n	800b21a <__swhatbuf_r+0x22>

0800b242 <__smakebuf_r>:
 800b242:	898b      	ldrh	r3, [r1, #12]
 800b244:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b246:	079d      	lsls	r5, r3, #30
 800b248:	4606      	mov	r6, r0
 800b24a:	460c      	mov	r4, r1
 800b24c:	d507      	bpl.n	800b25e <__smakebuf_r+0x1c>
 800b24e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b252:	6023      	str	r3, [r4, #0]
 800b254:	6123      	str	r3, [r4, #16]
 800b256:	2301      	movs	r3, #1
 800b258:	6163      	str	r3, [r4, #20]
 800b25a:	b003      	add	sp, #12
 800b25c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b25e:	466a      	mov	r2, sp
 800b260:	ab01      	add	r3, sp, #4
 800b262:	f7ff ffc9 	bl	800b1f8 <__swhatbuf_r>
 800b266:	9f00      	ldr	r7, [sp, #0]
 800b268:	4605      	mov	r5, r0
 800b26a:	4639      	mov	r1, r7
 800b26c:	4630      	mov	r0, r6
 800b26e:	f7ff f909 	bl	800a484 <_malloc_r>
 800b272:	b948      	cbnz	r0, 800b288 <__smakebuf_r+0x46>
 800b274:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b278:	059a      	lsls	r2, r3, #22
 800b27a:	d4ee      	bmi.n	800b25a <__smakebuf_r+0x18>
 800b27c:	f023 0303 	bic.w	r3, r3, #3
 800b280:	f043 0302 	orr.w	r3, r3, #2
 800b284:	81a3      	strh	r3, [r4, #12]
 800b286:	e7e2      	b.n	800b24e <__smakebuf_r+0xc>
 800b288:	89a3      	ldrh	r3, [r4, #12]
 800b28a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b28e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b292:	81a3      	strh	r3, [r4, #12]
 800b294:	9b01      	ldr	r3, [sp, #4]
 800b296:	6020      	str	r0, [r4, #0]
 800b298:	b15b      	cbz	r3, 800b2b2 <__smakebuf_r+0x70>
 800b29a:	4630      	mov	r0, r6
 800b29c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b2a0:	f000 f81e 	bl	800b2e0 <_isatty_r>
 800b2a4:	b128      	cbz	r0, 800b2b2 <__smakebuf_r+0x70>
 800b2a6:	89a3      	ldrh	r3, [r4, #12]
 800b2a8:	f023 0303 	bic.w	r3, r3, #3
 800b2ac:	f043 0301 	orr.w	r3, r3, #1
 800b2b0:	81a3      	strh	r3, [r4, #12]
 800b2b2:	89a3      	ldrh	r3, [r4, #12]
 800b2b4:	431d      	orrs	r5, r3
 800b2b6:	81a5      	strh	r5, [r4, #12]
 800b2b8:	e7cf      	b.n	800b25a <__smakebuf_r+0x18>
	...

0800b2bc <_fstat_r>:
 800b2bc:	b538      	push	{r3, r4, r5, lr}
 800b2be:	2300      	movs	r3, #0
 800b2c0:	4d06      	ldr	r5, [pc, #24]	@ (800b2dc <_fstat_r+0x20>)
 800b2c2:	4604      	mov	r4, r0
 800b2c4:	4608      	mov	r0, r1
 800b2c6:	4611      	mov	r1, r2
 800b2c8:	602b      	str	r3, [r5, #0]
 800b2ca:	f7fb fdff 	bl	8006ecc <_fstat>
 800b2ce:	1c43      	adds	r3, r0, #1
 800b2d0:	d102      	bne.n	800b2d8 <_fstat_r+0x1c>
 800b2d2:	682b      	ldr	r3, [r5, #0]
 800b2d4:	b103      	cbz	r3, 800b2d8 <_fstat_r+0x1c>
 800b2d6:	6023      	str	r3, [r4, #0]
 800b2d8:	bd38      	pop	{r3, r4, r5, pc}
 800b2da:	bf00      	nop
 800b2dc:	200040a8 	.word	0x200040a8

0800b2e0 <_isatty_r>:
 800b2e0:	b538      	push	{r3, r4, r5, lr}
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	4d05      	ldr	r5, [pc, #20]	@ (800b2fc <_isatty_r+0x1c>)
 800b2e6:	4604      	mov	r4, r0
 800b2e8:	4608      	mov	r0, r1
 800b2ea:	602b      	str	r3, [r5, #0]
 800b2ec:	f7fb fdfd 	bl	8006eea <_isatty>
 800b2f0:	1c43      	adds	r3, r0, #1
 800b2f2:	d102      	bne.n	800b2fa <_isatty_r+0x1a>
 800b2f4:	682b      	ldr	r3, [r5, #0]
 800b2f6:	b103      	cbz	r3, 800b2fa <_isatty_r+0x1a>
 800b2f8:	6023      	str	r3, [r4, #0]
 800b2fa:	bd38      	pop	{r3, r4, r5, pc}
 800b2fc:	200040a8 	.word	0x200040a8

0800b300 <powf>:
 800b300:	b570      	push	{r4, r5, r6, lr}
 800b302:	460c      	mov	r4, r1
 800b304:	4606      	mov	r6, r0
 800b306:	f000 fa43 	bl	800b790 <__ieee754_powf>
 800b30a:	4621      	mov	r1, r4
 800b30c:	4605      	mov	r5, r0
 800b30e:	4620      	mov	r0, r4
 800b310:	f7f5 fa02 	bl	8000718 <__aeabi_fcmpun>
 800b314:	bb68      	cbnz	r0, 800b372 <powf+0x72>
 800b316:	2100      	movs	r1, #0
 800b318:	4630      	mov	r0, r6
 800b31a:	f7f5 f9cb 	bl	80006b4 <__aeabi_fcmpeq>
 800b31e:	b190      	cbz	r0, 800b346 <powf+0x46>
 800b320:	2100      	movs	r1, #0
 800b322:	4620      	mov	r0, r4
 800b324:	f7f5 f9c6 	bl	80006b4 <__aeabi_fcmpeq>
 800b328:	2800      	cmp	r0, #0
 800b32a:	d133      	bne.n	800b394 <powf+0x94>
 800b32c:	4620      	mov	r0, r4
 800b32e:	f000 f8c1 	bl	800b4b4 <finitef>
 800b332:	b1f0      	cbz	r0, 800b372 <powf+0x72>
 800b334:	2100      	movs	r1, #0
 800b336:	4620      	mov	r0, r4
 800b338:	f7f5 f9c6 	bl	80006c8 <__aeabi_fcmplt>
 800b33c:	b1c8      	cbz	r0, 800b372 <powf+0x72>
 800b33e:	f7fe ffd5 	bl	800a2ec <__errno>
 800b342:	2322      	movs	r3, #34	@ 0x22
 800b344:	e014      	b.n	800b370 <powf+0x70>
 800b346:	4628      	mov	r0, r5
 800b348:	f000 f8b4 	bl	800b4b4 <finitef>
 800b34c:	b998      	cbnz	r0, 800b376 <powf+0x76>
 800b34e:	4630      	mov	r0, r6
 800b350:	f000 f8b0 	bl	800b4b4 <finitef>
 800b354:	b178      	cbz	r0, 800b376 <powf+0x76>
 800b356:	4620      	mov	r0, r4
 800b358:	f000 f8ac 	bl	800b4b4 <finitef>
 800b35c:	b158      	cbz	r0, 800b376 <powf+0x76>
 800b35e:	4629      	mov	r1, r5
 800b360:	4628      	mov	r0, r5
 800b362:	f7f5 f9d9 	bl	8000718 <__aeabi_fcmpun>
 800b366:	2800      	cmp	r0, #0
 800b368:	d0e9      	beq.n	800b33e <powf+0x3e>
 800b36a:	f7fe ffbf 	bl	800a2ec <__errno>
 800b36e:	2321      	movs	r3, #33	@ 0x21
 800b370:	6003      	str	r3, [r0, #0]
 800b372:	4628      	mov	r0, r5
 800b374:	bd70      	pop	{r4, r5, r6, pc}
 800b376:	2100      	movs	r1, #0
 800b378:	4628      	mov	r0, r5
 800b37a:	f7f5 f99b 	bl	80006b4 <__aeabi_fcmpeq>
 800b37e:	2800      	cmp	r0, #0
 800b380:	d0f7      	beq.n	800b372 <powf+0x72>
 800b382:	4630      	mov	r0, r6
 800b384:	f000 f896 	bl	800b4b4 <finitef>
 800b388:	2800      	cmp	r0, #0
 800b38a:	d0f2      	beq.n	800b372 <powf+0x72>
 800b38c:	4620      	mov	r0, r4
 800b38e:	f000 f891 	bl	800b4b4 <finitef>
 800b392:	e7d3      	b.n	800b33c <powf+0x3c>
 800b394:	f04f 557e 	mov.w	r5, #1065353216	@ 0x3f800000
 800b398:	e7eb      	b.n	800b372 <powf+0x72>

0800b39a <sqrtf>:
 800b39a:	b538      	push	{r3, r4, r5, lr}
 800b39c:	4605      	mov	r5, r0
 800b39e:	f000 f891 	bl	800b4c4 <__ieee754_sqrtf>
 800b3a2:	4629      	mov	r1, r5
 800b3a4:	4604      	mov	r4, r0
 800b3a6:	4628      	mov	r0, r5
 800b3a8:	f7f5 f9b6 	bl	8000718 <__aeabi_fcmpun>
 800b3ac:	b968      	cbnz	r0, 800b3ca <sqrtf+0x30>
 800b3ae:	2100      	movs	r1, #0
 800b3b0:	4628      	mov	r0, r5
 800b3b2:	f7f5 f989 	bl	80006c8 <__aeabi_fcmplt>
 800b3b6:	b140      	cbz	r0, 800b3ca <sqrtf+0x30>
 800b3b8:	f7fe ff98 	bl	800a2ec <__errno>
 800b3bc:	2321      	movs	r3, #33	@ 0x21
 800b3be:	2100      	movs	r1, #0
 800b3c0:	6003      	str	r3, [r0, #0]
 800b3c2:	4608      	mov	r0, r1
 800b3c4:	f7f5 f896 	bl	80004f4 <__aeabi_fdiv>
 800b3c8:	4604      	mov	r4, r0
 800b3ca:	4620      	mov	r0, r4
 800b3cc:	bd38      	pop	{r3, r4, r5, pc}
	...

0800b3d0 <cosf>:
 800b3d0:	b507      	push	{r0, r1, r2, lr}
 800b3d2:	4a1a      	ldr	r2, [pc, #104]	@ (800b43c <cosf+0x6c>)
 800b3d4:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800b3d8:	4293      	cmp	r3, r2
 800b3da:	4601      	mov	r1, r0
 800b3dc:	d805      	bhi.n	800b3ea <cosf+0x1a>
 800b3de:	2100      	movs	r1, #0
 800b3e0:	b003      	add	sp, #12
 800b3e2:	f85d eb04 	ldr.w	lr, [sp], #4
 800b3e6:	f000 b8dd 	b.w	800b5a4 <__kernel_cosf>
 800b3ea:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800b3ee:	d304      	bcc.n	800b3fa <cosf+0x2a>
 800b3f0:	f7f4 fec2 	bl	8000178 <__aeabi_fsub>
 800b3f4:	b003      	add	sp, #12
 800b3f6:	f85d fb04 	ldr.w	pc, [sp], #4
 800b3fa:	4669      	mov	r1, sp
 800b3fc:	f000 fd28 	bl	800be50 <__ieee754_rem_pio2f>
 800b400:	f000 0203 	and.w	r2, r0, #3
 800b404:	2a01      	cmp	r2, #1
 800b406:	d007      	beq.n	800b418 <cosf+0x48>
 800b408:	2a02      	cmp	r2, #2
 800b40a:	d00c      	beq.n	800b426 <cosf+0x56>
 800b40c:	b982      	cbnz	r2, 800b430 <cosf+0x60>
 800b40e:	9901      	ldr	r1, [sp, #4]
 800b410:	9800      	ldr	r0, [sp, #0]
 800b412:	f000 f8c7 	bl	800b5a4 <__kernel_cosf>
 800b416:	e7ed      	b.n	800b3f4 <cosf+0x24>
 800b418:	9901      	ldr	r1, [sp, #4]
 800b41a:	9800      	ldr	r0, [sp, #0]
 800b41c:	f000 f942 	bl	800b6a4 <__kernel_sinf>
 800b420:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800b424:	e7e6      	b.n	800b3f4 <cosf+0x24>
 800b426:	9901      	ldr	r1, [sp, #4]
 800b428:	9800      	ldr	r0, [sp, #0]
 800b42a:	f000 f8bb 	bl	800b5a4 <__kernel_cosf>
 800b42e:	e7f7      	b.n	800b420 <cosf+0x50>
 800b430:	2201      	movs	r2, #1
 800b432:	9901      	ldr	r1, [sp, #4]
 800b434:	9800      	ldr	r0, [sp, #0]
 800b436:	f000 f935 	bl	800b6a4 <__kernel_sinf>
 800b43a:	e7db      	b.n	800b3f4 <cosf+0x24>
 800b43c:	3f490fd8 	.word	0x3f490fd8

0800b440 <sinf>:
 800b440:	b507      	push	{r0, r1, r2, lr}
 800b442:	4a1b      	ldr	r2, [pc, #108]	@ (800b4b0 <sinf+0x70>)
 800b444:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800b448:	4293      	cmp	r3, r2
 800b44a:	4601      	mov	r1, r0
 800b44c:	d806      	bhi.n	800b45c <sinf+0x1c>
 800b44e:	2200      	movs	r2, #0
 800b450:	2100      	movs	r1, #0
 800b452:	b003      	add	sp, #12
 800b454:	f85d eb04 	ldr.w	lr, [sp], #4
 800b458:	f000 b924 	b.w	800b6a4 <__kernel_sinf>
 800b45c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800b460:	d304      	bcc.n	800b46c <sinf+0x2c>
 800b462:	f7f4 fe89 	bl	8000178 <__aeabi_fsub>
 800b466:	b003      	add	sp, #12
 800b468:	f85d fb04 	ldr.w	pc, [sp], #4
 800b46c:	4669      	mov	r1, sp
 800b46e:	f000 fcef 	bl	800be50 <__ieee754_rem_pio2f>
 800b472:	f000 0003 	and.w	r0, r0, #3
 800b476:	2801      	cmp	r0, #1
 800b478:	d008      	beq.n	800b48c <sinf+0x4c>
 800b47a:	2802      	cmp	r0, #2
 800b47c:	d00b      	beq.n	800b496 <sinf+0x56>
 800b47e:	b990      	cbnz	r0, 800b4a6 <sinf+0x66>
 800b480:	2201      	movs	r2, #1
 800b482:	9901      	ldr	r1, [sp, #4]
 800b484:	9800      	ldr	r0, [sp, #0]
 800b486:	f000 f90d 	bl	800b6a4 <__kernel_sinf>
 800b48a:	e7ec      	b.n	800b466 <sinf+0x26>
 800b48c:	9901      	ldr	r1, [sp, #4]
 800b48e:	9800      	ldr	r0, [sp, #0]
 800b490:	f000 f888 	bl	800b5a4 <__kernel_cosf>
 800b494:	e7e7      	b.n	800b466 <sinf+0x26>
 800b496:	2201      	movs	r2, #1
 800b498:	9901      	ldr	r1, [sp, #4]
 800b49a:	9800      	ldr	r0, [sp, #0]
 800b49c:	f000 f902 	bl	800b6a4 <__kernel_sinf>
 800b4a0:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800b4a4:	e7df      	b.n	800b466 <sinf+0x26>
 800b4a6:	9901      	ldr	r1, [sp, #4]
 800b4a8:	9800      	ldr	r0, [sp, #0]
 800b4aa:	f000 f87b 	bl	800b5a4 <__kernel_cosf>
 800b4ae:	e7f7      	b.n	800b4a0 <sinf+0x60>
 800b4b0:	3f490fd8 	.word	0x3f490fd8

0800b4b4 <finitef>:
 800b4b4:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800b4b8:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800b4bc:	bfac      	ite	ge
 800b4be:	2000      	movge	r0, #0
 800b4c0:	2001      	movlt	r0, #1
 800b4c2:	4770      	bx	lr

0800b4c4 <__ieee754_sqrtf>:
 800b4c4:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 800b4c8:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800b4cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4d0:	4603      	mov	r3, r0
 800b4d2:	4604      	mov	r4, r0
 800b4d4:	d30a      	bcc.n	800b4ec <__ieee754_sqrtf+0x28>
 800b4d6:	4601      	mov	r1, r0
 800b4d8:	f7f4 ff58 	bl	800038c <__aeabi_fmul>
 800b4dc:	4601      	mov	r1, r0
 800b4de:	4620      	mov	r0, r4
 800b4e0:	f7f4 fe4c 	bl	800017c <__addsf3>
 800b4e4:	4604      	mov	r4, r0
 800b4e6:	4620      	mov	r0, r4
 800b4e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4ec:	2a00      	cmp	r2, #0
 800b4ee:	d0fa      	beq.n	800b4e6 <__ieee754_sqrtf+0x22>
 800b4f0:	2800      	cmp	r0, #0
 800b4f2:	da06      	bge.n	800b502 <__ieee754_sqrtf+0x3e>
 800b4f4:	4601      	mov	r1, r0
 800b4f6:	f7f4 fe3f 	bl	8000178 <__aeabi_fsub>
 800b4fa:	4601      	mov	r1, r0
 800b4fc:	f7f4 fffa 	bl	80004f4 <__aeabi_fdiv>
 800b500:	e7f0      	b.n	800b4e4 <__ieee754_sqrtf+0x20>
 800b502:	f010 41ff 	ands.w	r1, r0, #2139095040	@ 0x7f800000
 800b506:	d03c      	beq.n	800b582 <__ieee754_sqrtf+0xbe>
 800b508:	15c2      	asrs	r2, r0, #23
 800b50a:	2400      	movs	r4, #0
 800b50c:	2019      	movs	r0, #25
 800b50e:	4626      	mov	r6, r4
 800b510:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 800b514:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b518:	f1a2 057f 	sub.w	r5, r2, #127	@ 0x7f
 800b51c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b520:	07d2      	lsls	r2, r2, #31
 800b522:	bf58      	it	pl
 800b524:	005b      	lslpl	r3, r3, #1
 800b526:	106d      	asrs	r5, r5, #1
 800b528:	005b      	lsls	r3, r3, #1
 800b52a:	1872      	adds	r2, r6, r1
 800b52c:	429a      	cmp	r2, r3
 800b52e:	bfcf      	iteee	gt
 800b530:	461a      	movgt	r2, r3
 800b532:	1856      	addle	r6, r2, r1
 800b534:	1864      	addle	r4, r4, r1
 800b536:	1a9a      	suble	r2, r3, r2
 800b538:	3801      	subs	r0, #1
 800b53a:	ea4f 0342 	mov.w	r3, r2, lsl #1
 800b53e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b542:	d1f2      	bne.n	800b52a <__ieee754_sqrtf+0x66>
 800b544:	b1ba      	cbz	r2, 800b576 <__ieee754_sqrtf+0xb2>
 800b546:	4e15      	ldr	r6, [pc, #84]	@ (800b59c <__ieee754_sqrtf+0xd8>)
 800b548:	4f15      	ldr	r7, [pc, #84]	@ (800b5a0 <__ieee754_sqrtf+0xdc>)
 800b54a:	6830      	ldr	r0, [r6, #0]
 800b54c:	6839      	ldr	r1, [r7, #0]
 800b54e:	f7f4 fe13 	bl	8000178 <__aeabi_fsub>
 800b552:	f8d6 8000 	ldr.w	r8, [r6]
 800b556:	4601      	mov	r1, r0
 800b558:	4640      	mov	r0, r8
 800b55a:	f7f5 f8bf 	bl	80006dc <__aeabi_fcmple>
 800b55e:	b150      	cbz	r0, 800b576 <__ieee754_sqrtf+0xb2>
 800b560:	6830      	ldr	r0, [r6, #0]
 800b562:	6839      	ldr	r1, [r7, #0]
 800b564:	f7f4 fe0a 	bl	800017c <__addsf3>
 800b568:	6836      	ldr	r6, [r6, #0]
 800b56a:	4601      	mov	r1, r0
 800b56c:	4630      	mov	r0, r6
 800b56e:	f7f5 f8ab 	bl	80006c8 <__aeabi_fcmplt>
 800b572:	b170      	cbz	r0, 800b592 <__ieee754_sqrtf+0xce>
 800b574:	3402      	adds	r4, #2
 800b576:	1064      	asrs	r4, r4, #1
 800b578:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 800b57c:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 800b580:	e7b1      	b.n	800b4e6 <__ieee754_sqrtf+0x22>
 800b582:	005b      	lsls	r3, r3, #1
 800b584:	0218      	lsls	r0, r3, #8
 800b586:	460a      	mov	r2, r1
 800b588:	f101 0101 	add.w	r1, r1, #1
 800b58c:	d5f9      	bpl.n	800b582 <__ieee754_sqrtf+0xbe>
 800b58e:	4252      	negs	r2, r2
 800b590:	e7bb      	b.n	800b50a <__ieee754_sqrtf+0x46>
 800b592:	3401      	adds	r4, #1
 800b594:	f024 0401 	bic.w	r4, r4, #1
 800b598:	e7ed      	b.n	800b576 <__ieee754_sqrtf+0xb2>
 800b59a:	bf00      	nop
 800b59c:	0800ce7c 	.word	0x0800ce7c
 800b5a0:	0800ce78 	.word	0x0800ce78

0800b5a4 <__kernel_cosf>:
 800b5a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5a8:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 800b5ac:	f1b5 5f48 	cmp.w	r5, #838860800	@ 0x32000000
 800b5b0:	4606      	mov	r6, r0
 800b5b2:	4688      	mov	r8, r1
 800b5b4:	d203      	bcs.n	800b5be <__kernel_cosf+0x1a>
 800b5b6:	f7f5 f8c5 	bl	8000744 <__aeabi_f2iz>
 800b5ba:	2800      	cmp	r0, #0
 800b5bc:	d05c      	beq.n	800b678 <__kernel_cosf+0xd4>
 800b5be:	4631      	mov	r1, r6
 800b5c0:	4630      	mov	r0, r6
 800b5c2:	f7f4 fee3 	bl	800038c <__aeabi_fmul>
 800b5c6:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800b5ca:	4604      	mov	r4, r0
 800b5cc:	f7f4 fede 	bl	800038c <__aeabi_fmul>
 800b5d0:	492b      	ldr	r1, [pc, #172]	@ (800b680 <__kernel_cosf+0xdc>)
 800b5d2:	4607      	mov	r7, r0
 800b5d4:	4620      	mov	r0, r4
 800b5d6:	f7f4 fed9 	bl	800038c <__aeabi_fmul>
 800b5da:	492a      	ldr	r1, [pc, #168]	@ (800b684 <__kernel_cosf+0xe0>)
 800b5dc:	f7f4 fdce 	bl	800017c <__addsf3>
 800b5e0:	4621      	mov	r1, r4
 800b5e2:	f7f4 fed3 	bl	800038c <__aeabi_fmul>
 800b5e6:	4928      	ldr	r1, [pc, #160]	@ (800b688 <__kernel_cosf+0xe4>)
 800b5e8:	f7f4 fdc6 	bl	8000178 <__aeabi_fsub>
 800b5ec:	4621      	mov	r1, r4
 800b5ee:	f7f4 fecd 	bl	800038c <__aeabi_fmul>
 800b5f2:	4926      	ldr	r1, [pc, #152]	@ (800b68c <__kernel_cosf+0xe8>)
 800b5f4:	f7f4 fdc2 	bl	800017c <__addsf3>
 800b5f8:	4621      	mov	r1, r4
 800b5fa:	f7f4 fec7 	bl	800038c <__aeabi_fmul>
 800b5fe:	4924      	ldr	r1, [pc, #144]	@ (800b690 <__kernel_cosf+0xec>)
 800b600:	f7f4 fdba 	bl	8000178 <__aeabi_fsub>
 800b604:	4621      	mov	r1, r4
 800b606:	f7f4 fec1 	bl	800038c <__aeabi_fmul>
 800b60a:	4922      	ldr	r1, [pc, #136]	@ (800b694 <__kernel_cosf+0xf0>)
 800b60c:	f7f4 fdb6 	bl	800017c <__addsf3>
 800b610:	4621      	mov	r1, r4
 800b612:	f7f4 febb 	bl	800038c <__aeabi_fmul>
 800b616:	4621      	mov	r1, r4
 800b618:	f7f4 feb8 	bl	800038c <__aeabi_fmul>
 800b61c:	4641      	mov	r1, r8
 800b61e:	4604      	mov	r4, r0
 800b620:	4630      	mov	r0, r6
 800b622:	f7f4 feb3 	bl	800038c <__aeabi_fmul>
 800b626:	4601      	mov	r1, r0
 800b628:	4620      	mov	r0, r4
 800b62a:	f7f4 fda5 	bl	8000178 <__aeabi_fsub>
 800b62e:	4b1a      	ldr	r3, [pc, #104]	@ (800b698 <__kernel_cosf+0xf4>)
 800b630:	4604      	mov	r4, r0
 800b632:	429d      	cmp	r5, r3
 800b634:	d80a      	bhi.n	800b64c <__kernel_cosf+0xa8>
 800b636:	4601      	mov	r1, r0
 800b638:	4638      	mov	r0, r7
 800b63a:	f7f4 fd9d 	bl	8000178 <__aeabi_fsub>
 800b63e:	4601      	mov	r1, r0
 800b640:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800b644:	f7f4 fd98 	bl	8000178 <__aeabi_fsub>
 800b648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b64c:	4b13      	ldr	r3, [pc, #76]	@ (800b69c <__kernel_cosf+0xf8>)
 800b64e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800b652:	429d      	cmp	r5, r3
 800b654:	bf8c      	ite	hi
 800b656:	4d12      	ldrhi	r5, [pc, #72]	@ (800b6a0 <__kernel_cosf+0xfc>)
 800b658:	f105 457f 	addls.w	r5, r5, #4278190080	@ 0xff000000
 800b65c:	4629      	mov	r1, r5
 800b65e:	f7f4 fd8b 	bl	8000178 <__aeabi_fsub>
 800b662:	4629      	mov	r1, r5
 800b664:	4606      	mov	r6, r0
 800b666:	4638      	mov	r0, r7
 800b668:	f7f4 fd86 	bl	8000178 <__aeabi_fsub>
 800b66c:	4621      	mov	r1, r4
 800b66e:	f7f4 fd83 	bl	8000178 <__aeabi_fsub>
 800b672:	4601      	mov	r1, r0
 800b674:	4630      	mov	r0, r6
 800b676:	e7e5      	b.n	800b644 <__kernel_cosf+0xa0>
 800b678:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800b67c:	e7e4      	b.n	800b648 <__kernel_cosf+0xa4>
 800b67e:	bf00      	nop
 800b680:	ad47d74e 	.word	0xad47d74e
 800b684:	310f74f6 	.word	0x310f74f6
 800b688:	3493f27c 	.word	0x3493f27c
 800b68c:	37d00d01 	.word	0x37d00d01
 800b690:	3ab60b61 	.word	0x3ab60b61
 800b694:	3d2aaaab 	.word	0x3d2aaaab
 800b698:	3e999999 	.word	0x3e999999
 800b69c:	3f480000 	.word	0x3f480000
 800b6a0:	3e900000 	.word	0x3e900000

0800b6a4 <__kernel_sinf>:
 800b6a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6a8:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800b6ac:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800b6b0:	4604      	mov	r4, r0
 800b6b2:	460f      	mov	r7, r1
 800b6b4:	4691      	mov	r9, r2
 800b6b6:	d203      	bcs.n	800b6c0 <__kernel_sinf+0x1c>
 800b6b8:	f7f5 f844 	bl	8000744 <__aeabi_f2iz>
 800b6bc:	2800      	cmp	r0, #0
 800b6be:	d035      	beq.n	800b72c <__kernel_sinf+0x88>
 800b6c0:	4621      	mov	r1, r4
 800b6c2:	4620      	mov	r0, r4
 800b6c4:	f7f4 fe62 	bl	800038c <__aeabi_fmul>
 800b6c8:	4605      	mov	r5, r0
 800b6ca:	4601      	mov	r1, r0
 800b6cc:	4620      	mov	r0, r4
 800b6ce:	f7f4 fe5d 	bl	800038c <__aeabi_fmul>
 800b6d2:	4929      	ldr	r1, [pc, #164]	@ (800b778 <__kernel_sinf+0xd4>)
 800b6d4:	4606      	mov	r6, r0
 800b6d6:	4628      	mov	r0, r5
 800b6d8:	f7f4 fe58 	bl	800038c <__aeabi_fmul>
 800b6dc:	4927      	ldr	r1, [pc, #156]	@ (800b77c <__kernel_sinf+0xd8>)
 800b6de:	f7f4 fd4b 	bl	8000178 <__aeabi_fsub>
 800b6e2:	4629      	mov	r1, r5
 800b6e4:	f7f4 fe52 	bl	800038c <__aeabi_fmul>
 800b6e8:	4925      	ldr	r1, [pc, #148]	@ (800b780 <__kernel_sinf+0xdc>)
 800b6ea:	f7f4 fd47 	bl	800017c <__addsf3>
 800b6ee:	4629      	mov	r1, r5
 800b6f0:	f7f4 fe4c 	bl	800038c <__aeabi_fmul>
 800b6f4:	4923      	ldr	r1, [pc, #140]	@ (800b784 <__kernel_sinf+0xe0>)
 800b6f6:	f7f4 fd3f 	bl	8000178 <__aeabi_fsub>
 800b6fa:	4629      	mov	r1, r5
 800b6fc:	f7f4 fe46 	bl	800038c <__aeabi_fmul>
 800b700:	4921      	ldr	r1, [pc, #132]	@ (800b788 <__kernel_sinf+0xe4>)
 800b702:	f7f4 fd3b 	bl	800017c <__addsf3>
 800b706:	4680      	mov	r8, r0
 800b708:	f1b9 0f00 	cmp.w	r9, #0
 800b70c:	d111      	bne.n	800b732 <__kernel_sinf+0x8e>
 800b70e:	4601      	mov	r1, r0
 800b710:	4628      	mov	r0, r5
 800b712:	f7f4 fe3b 	bl	800038c <__aeabi_fmul>
 800b716:	491d      	ldr	r1, [pc, #116]	@ (800b78c <__kernel_sinf+0xe8>)
 800b718:	f7f4 fd2e 	bl	8000178 <__aeabi_fsub>
 800b71c:	4631      	mov	r1, r6
 800b71e:	f7f4 fe35 	bl	800038c <__aeabi_fmul>
 800b722:	4601      	mov	r1, r0
 800b724:	4620      	mov	r0, r4
 800b726:	f7f4 fd29 	bl	800017c <__addsf3>
 800b72a:	4604      	mov	r4, r0
 800b72c:	4620      	mov	r0, r4
 800b72e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b732:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800b736:	4638      	mov	r0, r7
 800b738:	f7f4 fe28 	bl	800038c <__aeabi_fmul>
 800b73c:	4641      	mov	r1, r8
 800b73e:	4681      	mov	r9, r0
 800b740:	4630      	mov	r0, r6
 800b742:	f7f4 fe23 	bl	800038c <__aeabi_fmul>
 800b746:	4601      	mov	r1, r0
 800b748:	4648      	mov	r0, r9
 800b74a:	f7f4 fd15 	bl	8000178 <__aeabi_fsub>
 800b74e:	4629      	mov	r1, r5
 800b750:	f7f4 fe1c 	bl	800038c <__aeabi_fmul>
 800b754:	4639      	mov	r1, r7
 800b756:	f7f4 fd0f 	bl	8000178 <__aeabi_fsub>
 800b75a:	490c      	ldr	r1, [pc, #48]	@ (800b78c <__kernel_sinf+0xe8>)
 800b75c:	4605      	mov	r5, r0
 800b75e:	4630      	mov	r0, r6
 800b760:	f7f4 fe14 	bl	800038c <__aeabi_fmul>
 800b764:	4601      	mov	r1, r0
 800b766:	4628      	mov	r0, r5
 800b768:	f7f4 fd08 	bl	800017c <__addsf3>
 800b76c:	4601      	mov	r1, r0
 800b76e:	4620      	mov	r0, r4
 800b770:	f7f4 fd02 	bl	8000178 <__aeabi_fsub>
 800b774:	e7d9      	b.n	800b72a <__kernel_sinf+0x86>
 800b776:	bf00      	nop
 800b778:	2f2ec9d3 	.word	0x2f2ec9d3
 800b77c:	32d72f34 	.word	0x32d72f34
 800b780:	3638ef1b 	.word	0x3638ef1b
 800b784:	39500d01 	.word	0x39500d01
 800b788:	3c088889 	.word	0x3c088889
 800b78c:	3e2aaaab 	.word	0x3e2aaaab

0800b790 <__ieee754_powf>:
 800b790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b794:	f031 4b00 	bics.w	fp, r1, #2147483648	@ 0x80000000
 800b798:	4681      	mov	r9, r0
 800b79a:	460f      	mov	r7, r1
 800b79c:	4606      	mov	r6, r0
 800b79e:	460c      	mov	r4, r1
 800b7a0:	b087      	sub	sp, #28
 800b7a2:	d10c      	bne.n	800b7be <__ieee754_powf+0x2e>
 800b7a4:	f480 0680 	eor.w	r6, r0, #4194304	@ 0x400000
 800b7a8:	0076      	lsls	r6, r6, #1
 800b7aa:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800b7ae:	f240 8310 	bls.w	800bdd2 <__ieee754_powf+0x642>
 800b7b2:	4639      	mov	r1, r7
 800b7b4:	4648      	mov	r0, r9
 800b7b6:	f7f4 fce1 	bl	800017c <__addsf3>
 800b7ba:	4601      	mov	r1, r0
 800b7bc:	e043      	b.n	800b846 <__ieee754_powf+0xb6>
 800b7be:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 800b7c2:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800b7c6:	d802      	bhi.n	800b7ce <__ieee754_powf+0x3e>
 800b7c8:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 800b7cc:	d908      	bls.n	800b7e0 <__ieee754_powf+0x50>
 800b7ce:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800b7d2:	d1ee      	bne.n	800b7b2 <__ieee754_powf+0x22>
 800b7d4:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800b7d8:	0064      	lsls	r4, r4, #1
 800b7da:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800b7de:	e7e6      	b.n	800b7ae <__ieee754_powf+0x1e>
 800b7e0:	2800      	cmp	r0, #0
 800b7e2:	da1f      	bge.n	800b824 <__ieee754_powf+0x94>
 800b7e4:	f1bb 4f97 	cmp.w	fp, #1266679808	@ 0x4b800000
 800b7e8:	f080 82f8 	bcs.w	800bddc <__ieee754_powf+0x64c>
 800b7ec:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 800b7f0:	d32f      	bcc.n	800b852 <__ieee754_powf+0xc2>
 800b7f2:	ea4f 53eb 	mov.w	r3, fp, asr #23
 800b7f6:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800b7fa:	fa4b f503 	asr.w	r5, fp, r3
 800b7fe:	fa05 f303 	lsl.w	r3, r5, r3
 800b802:	455b      	cmp	r3, fp
 800b804:	d123      	bne.n	800b84e <__ieee754_powf+0xbe>
 800b806:	f005 0501 	and.w	r5, r5, #1
 800b80a:	f1c5 0502 	rsb	r5, r5, #2
 800b80e:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 800b812:	d11f      	bne.n	800b854 <__ieee754_powf+0xc4>
 800b814:	2c00      	cmp	r4, #0
 800b816:	4649      	mov	r1, r9
 800b818:	da15      	bge.n	800b846 <__ieee754_powf+0xb6>
 800b81a:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800b81e:	f7f4 fe69 	bl	80004f4 <__aeabi_fdiv>
 800b822:	e7ca      	b.n	800b7ba <__ieee754_powf+0x2a>
 800b824:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 800b828:	d111      	bne.n	800b84e <__ieee754_powf+0xbe>
 800b82a:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800b82e:	f000 82d0 	beq.w	800bdd2 <__ieee754_powf+0x642>
 800b832:	d904      	bls.n	800b83e <__ieee754_powf+0xae>
 800b834:	2c00      	cmp	r4, #0
 800b836:	f280 82cf 	bge.w	800bdd8 <__ieee754_powf+0x648>
 800b83a:	2100      	movs	r1, #0
 800b83c:	e003      	b.n	800b846 <__ieee754_powf+0xb6>
 800b83e:	2c00      	cmp	r4, #0
 800b840:	dafb      	bge.n	800b83a <__ieee754_powf+0xaa>
 800b842:	f107 4100 	add.w	r1, r7, #2147483648	@ 0x80000000
 800b846:	4608      	mov	r0, r1
 800b848:	b007      	add	sp, #28
 800b84a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b84e:	2500      	movs	r5, #0
 800b850:	e7dd      	b.n	800b80e <__ieee754_powf+0x7e>
 800b852:	2500      	movs	r5, #0
 800b854:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800b858:	d104      	bne.n	800b864 <__ieee754_powf+0xd4>
 800b85a:	4649      	mov	r1, r9
 800b85c:	4648      	mov	r0, r9
 800b85e:	f7f4 fd95 	bl	800038c <__aeabi_fmul>
 800b862:	e7aa      	b.n	800b7ba <__ieee754_powf+0x2a>
 800b864:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800b868:	f040 82bd 	bne.w	800bde6 <__ieee754_powf+0x656>
 800b86c:	2e00      	cmp	r6, #0
 800b86e:	f2c0 82ba 	blt.w	800bde6 <__ieee754_powf+0x656>
 800b872:	4648      	mov	r0, r9
 800b874:	b007      	add	sp, #28
 800b876:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b87a:	f7ff be23 	b.w	800b4c4 <__ieee754_sqrtf>
 800b87e:	2d01      	cmp	r5, #1
 800b880:	d1e1      	bne.n	800b846 <__ieee754_powf+0xb6>
 800b882:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 800b886:	e798      	b.n	800b7ba <__ieee754_powf+0x2a>
 800b888:	0ff3      	lsrs	r3, r6, #31
 800b88a:	3b01      	subs	r3, #1
 800b88c:	9303      	str	r3, [sp, #12]
 800b88e:	432b      	orrs	r3, r5
 800b890:	d101      	bne.n	800b896 <__ieee754_powf+0x106>
 800b892:	4649      	mov	r1, r9
 800b894:	e2c5      	b.n	800be22 <__ieee754_powf+0x692>
 800b896:	f1bb 4f9a 	cmp.w	fp, #1291845632	@ 0x4d000000
 800b89a:	f240 809b 	bls.w	800b9d4 <__ieee754_powf+0x244>
 800b89e:	4b46      	ldr	r3, [pc, #280]	@ (800b9b8 <__ieee754_powf+0x228>)
 800b8a0:	4598      	cmp	r8, r3
 800b8a2:	d807      	bhi.n	800b8b4 <__ieee754_powf+0x124>
 800b8a4:	2c00      	cmp	r4, #0
 800b8a6:	da0a      	bge.n	800b8be <__ieee754_powf+0x12e>
 800b8a8:	2000      	movs	r0, #0
 800b8aa:	b007      	add	sp, #28
 800b8ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8b0:	f000 bc9d 	b.w	800c1ee <__math_oflowf>
 800b8b4:	4b41      	ldr	r3, [pc, #260]	@ (800b9bc <__ieee754_powf+0x22c>)
 800b8b6:	4598      	cmp	r8, r3
 800b8b8:	d907      	bls.n	800b8ca <__ieee754_powf+0x13a>
 800b8ba:	2c00      	cmp	r4, #0
 800b8bc:	dcf4      	bgt.n	800b8a8 <__ieee754_powf+0x118>
 800b8be:	2000      	movs	r0, #0
 800b8c0:	b007      	add	sp, #28
 800b8c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8c6:	f000 bc8e 	b.w	800c1e6 <__math_uflowf>
 800b8ca:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800b8ce:	f7f4 fc53 	bl	8000178 <__aeabi_fsub>
 800b8d2:	493b      	ldr	r1, [pc, #236]	@ (800b9c0 <__ieee754_powf+0x230>)
 800b8d4:	4606      	mov	r6, r0
 800b8d6:	f7f4 fd59 	bl	800038c <__aeabi_fmul>
 800b8da:	493a      	ldr	r1, [pc, #232]	@ (800b9c4 <__ieee754_powf+0x234>)
 800b8dc:	4680      	mov	r8, r0
 800b8de:	4630      	mov	r0, r6
 800b8e0:	f7f4 fd54 	bl	800038c <__aeabi_fmul>
 800b8e4:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 800b8e8:	4681      	mov	r9, r0
 800b8ea:	4630      	mov	r0, r6
 800b8ec:	f7f4 fd4e 	bl	800038c <__aeabi_fmul>
 800b8f0:	4601      	mov	r1, r0
 800b8f2:	4835      	ldr	r0, [pc, #212]	@ (800b9c8 <__ieee754_powf+0x238>)
 800b8f4:	f7f4 fc40 	bl	8000178 <__aeabi_fsub>
 800b8f8:	4631      	mov	r1, r6
 800b8fa:	f7f4 fd47 	bl	800038c <__aeabi_fmul>
 800b8fe:	4601      	mov	r1, r0
 800b900:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 800b904:	f7f4 fc38 	bl	8000178 <__aeabi_fsub>
 800b908:	4631      	mov	r1, r6
 800b90a:	4682      	mov	sl, r0
 800b90c:	4630      	mov	r0, r6
 800b90e:	f7f4 fd3d 	bl	800038c <__aeabi_fmul>
 800b912:	4601      	mov	r1, r0
 800b914:	4650      	mov	r0, sl
 800b916:	f7f4 fd39 	bl	800038c <__aeabi_fmul>
 800b91a:	492c      	ldr	r1, [pc, #176]	@ (800b9cc <__ieee754_powf+0x23c>)
 800b91c:	f7f4 fd36 	bl	800038c <__aeabi_fmul>
 800b920:	4601      	mov	r1, r0
 800b922:	4648      	mov	r0, r9
 800b924:	f7f4 fc28 	bl	8000178 <__aeabi_fsub>
 800b928:	4601      	mov	r1, r0
 800b92a:	4606      	mov	r6, r0
 800b92c:	4640      	mov	r0, r8
 800b92e:	f7f4 fc25 	bl	800017c <__addsf3>
 800b932:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 800b936:	f02b 0b0f 	bic.w	fp, fp, #15
 800b93a:	4641      	mov	r1, r8
 800b93c:	4658      	mov	r0, fp
 800b93e:	f7f4 fc1b 	bl	8000178 <__aeabi_fsub>
 800b942:	4601      	mov	r1, r0
 800b944:	4630      	mov	r0, r6
 800b946:	f7f4 fc17 	bl	8000178 <__aeabi_fsub>
 800b94a:	9b03      	ldr	r3, [sp, #12]
 800b94c:	3d01      	subs	r5, #1
 800b94e:	f36f 040b 	bfc	r4, #0, #12
 800b952:	431d      	orrs	r5, r3
 800b954:	4606      	mov	r6, r0
 800b956:	4621      	mov	r1, r4
 800b958:	4638      	mov	r0, r7
 800b95a:	bf14      	ite	ne
 800b95c:	f04f 557e 	movne.w	r5, #1065353216	@ 0x3f800000
 800b960:	4d1b      	ldreq	r5, [pc, #108]	@ (800b9d0 <__ieee754_powf+0x240>)
 800b962:	f7f4 fc09 	bl	8000178 <__aeabi_fsub>
 800b966:	4659      	mov	r1, fp
 800b968:	f7f4 fd10 	bl	800038c <__aeabi_fmul>
 800b96c:	4639      	mov	r1, r7
 800b96e:	4680      	mov	r8, r0
 800b970:	4630      	mov	r0, r6
 800b972:	f7f4 fd0b 	bl	800038c <__aeabi_fmul>
 800b976:	4601      	mov	r1, r0
 800b978:	4640      	mov	r0, r8
 800b97a:	f7f4 fbff 	bl	800017c <__addsf3>
 800b97e:	4621      	mov	r1, r4
 800b980:	4606      	mov	r6, r0
 800b982:	4658      	mov	r0, fp
 800b984:	f7f4 fd02 	bl	800038c <__aeabi_fmul>
 800b988:	4601      	mov	r1, r0
 800b98a:	4607      	mov	r7, r0
 800b98c:	4630      	mov	r0, r6
 800b98e:	f7f4 fbf5 	bl	800017c <__addsf3>
 800b992:	2800      	cmp	r0, #0
 800b994:	4604      	mov	r4, r0
 800b996:	4680      	mov	r8, r0
 800b998:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800b99c:	f340 813f 	ble.w	800bc1e <__ieee754_powf+0x48e>
 800b9a0:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800b9a4:	f240 8128 	bls.w	800bbf8 <__ieee754_powf+0x468>
 800b9a8:	2100      	movs	r1, #0
 800b9aa:	4628      	mov	r0, r5
 800b9ac:	f7f4 fe8c 	bl	80006c8 <__aeabi_fcmplt>
 800b9b0:	3800      	subs	r0, #0
 800b9b2:	bf18      	it	ne
 800b9b4:	2001      	movne	r0, #1
 800b9b6:	e778      	b.n	800b8aa <__ieee754_powf+0x11a>
 800b9b8:	3f7ffff3 	.word	0x3f7ffff3
 800b9bc:	3f800007 	.word	0x3f800007
 800b9c0:	3fb8aa00 	.word	0x3fb8aa00
 800b9c4:	36eca570 	.word	0x36eca570
 800b9c8:	3eaaaaab 	.word	0x3eaaaaab
 800b9cc:	3fb8aa3b 	.word	0x3fb8aa3b
 800b9d0:	bf800000 	.word	0xbf800000
 800b9d4:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800b9d8:	f040 810a 	bne.w	800bbf0 <__ieee754_powf+0x460>
 800b9dc:	f04f 4197 	mov.w	r1, #1266679808	@ 0x4b800000
 800b9e0:	f7f4 fcd4 	bl	800038c <__aeabi_fmul>
 800b9e4:	f06f 0217 	mvn.w	r2, #23
 800b9e8:	4682      	mov	sl, r0
 800b9ea:	ea4f 53ea 	mov.w	r3, sl, asr #23
 800b9ee:	3b7f      	subs	r3, #127	@ 0x7f
 800b9f0:	441a      	add	r2, r3
 800b9f2:	4b95      	ldr	r3, [pc, #596]	@ (800bc48 <__ieee754_powf+0x4b8>)
 800b9f4:	f3ca 0a16 	ubfx	sl, sl, #0, #23
 800b9f8:	459a      	cmp	sl, r3
 800b9fa:	f04a 567e 	orr.w	r6, sl, #1065353216	@ 0x3f800000
 800b9fe:	dd06      	ble.n	800ba0e <__ieee754_powf+0x27e>
 800ba00:	4b92      	ldr	r3, [pc, #584]	@ (800bc4c <__ieee754_powf+0x4bc>)
 800ba02:	459a      	cmp	sl, r3
 800ba04:	f340 80f6 	ble.w	800bbf4 <__ieee754_powf+0x464>
 800ba08:	3201      	adds	r2, #1
 800ba0a:	f5a6 0600 	sub.w	r6, r6, #8388608	@ 0x800000
 800ba0e:	2300      	movs	r3, #0
 800ba10:	9301      	str	r3, [sp, #4]
 800ba12:	9205      	str	r2, [sp, #20]
 800ba14:	4b8e      	ldr	r3, [pc, #568]	@ (800bc50 <__ieee754_powf+0x4c0>)
 800ba16:	9a01      	ldr	r2, [sp, #4]
 800ba18:	4630      	mov	r0, r6
 800ba1a:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 800ba1e:	46b2      	mov	sl, r6
 800ba20:	4659      	mov	r1, fp
 800ba22:	f7f4 fba9 	bl	8000178 <__aeabi_fsub>
 800ba26:	4631      	mov	r1, r6
 800ba28:	4681      	mov	r9, r0
 800ba2a:	4658      	mov	r0, fp
 800ba2c:	f7f4 fba6 	bl	800017c <__addsf3>
 800ba30:	4601      	mov	r1, r0
 800ba32:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800ba36:	f7f4 fd5d 	bl	80004f4 <__aeabi_fdiv>
 800ba3a:	4601      	mov	r1, r0
 800ba3c:	9004      	str	r0, [sp, #16]
 800ba3e:	4648      	mov	r0, r9
 800ba40:	f7f4 fca4 	bl	800038c <__aeabi_fmul>
 800ba44:	9002      	str	r0, [sp, #8]
 800ba46:	9b02      	ldr	r3, [sp, #8]
 800ba48:	1076      	asrs	r6, r6, #1
 800ba4a:	f36f 030b 	bfc	r3, #0, #12
 800ba4e:	4698      	mov	r8, r3
 800ba50:	f046 5600 	orr.w	r6, r6, #536870912	@ 0x20000000
 800ba54:	9b01      	ldr	r3, [sp, #4]
 800ba56:	f506 2680 	add.w	r6, r6, #262144	@ 0x40000
 800ba5a:	eb06 5643 	add.w	r6, r6, r3, lsl #21
 800ba5e:	4631      	mov	r1, r6
 800ba60:	4640      	mov	r0, r8
 800ba62:	f7f4 fc93 	bl	800038c <__aeabi_fmul>
 800ba66:	4601      	mov	r1, r0
 800ba68:	4648      	mov	r0, r9
 800ba6a:	f7f4 fb85 	bl	8000178 <__aeabi_fsub>
 800ba6e:	4659      	mov	r1, fp
 800ba70:	4681      	mov	r9, r0
 800ba72:	4630      	mov	r0, r6
 800ba74:	f7f4 fb80 	bl	8000178 <__aeabi_fsub>
 800ba78:	4601      	mov	r1, r0
 800ba7a:	4650      	mov	r0, sl
 800ba7c:	f7f4 fb7c 	bl	8000178 <__aeabi_fsub>
 800ba80:	4641      	mov	r1, r8
 800ba82:	f7f4 fc83 	bl	800038c <__aeabi_fmul>
 800ba86:	4601      	mov	r1, r0
 800ba88:	4648      	mov	r0, r9
 800ba8a:	f7f4 fb75 	bl	8000178 <__aeabi_fsub>
 800ba8e:	9b04      	ldr	r3, [sp, #16]
 800ba90:	4619      	mov	r1, r3
 800ba92:	f7f4 fc7b 	bl	800038c <__aeabi_fmul>
 800ba96:	9902      	ldr	r1, [sp, #8]
 800ba98:	4683      	mov	fp, r0
 800ba9a:	4608      	mov	r0, r1
 800ba9c:	f7f4 fc76 	bl	800038c <__aeabi_fmul>
 800baa0:	4606      	mov	r6, r0
 800baa2:	496c      	ldr	r1, [pc, #432]	@ (800bc54 <__ieee754_powf+0x4c4>)
 800baa4:	f7f4 fc72 	bl	800038c <__aeabi_fmul>
 800baa8:	496b      	ldr	r1, [pc, #428]	@ (800bc58 <__ieee754_powf+0x4c8>)
 800baaa:	f7f4 fb67 	bl	800017c <__addsf3>
 800baae:	4631      	mov	r1, r6
 800bab0:	f7f4 fc6c 	bl	800038c <__aeabi_fmul>
 800bab4:	4969      	ldr	r1, [pc, #420]	@ (800bc5c <__ieee754_powf+0x4cc>)
 800bab6:	f7f4 fb61 	bl	800017c <__addsf3>
 800baba:	4631      	mov	r1, r6
 800babc:	f7f4 fc66 	bl	800038c <__aeabi_fmul>
 800bac0:	4967      	ldr	r1, [pc, #412]	@ (800bc60 <__ieee754_powf+0x4d0>)
 800bac2:	f7f4 fb5b 	bl	800017c <__addsf3>
 800bac6:	4631      	mov	r1, r6
 800bac8:	f7f4 fc60 	bl	800038c <__aeabi_fmul>
 800bacc:	4965      	ldr	r1, [pc, #404]	@ (800bc64 <__ieee754_powf+0x4d4>)
 800bace:	f7f4 fb55 	bl	800017c <__addsf3>
 800bad2:	4631      	mov	r1, r6
 800bad4:	f7f4 fc5a 	bl	800038c <__aeabi_fmul>
 800bad8:	4963      	ldr	r1, [pc, #396]	@ (800bc68 <__ieee754_powf+0x4d8>)
 800bada:	f7f4 fb4f 	bl	800017c <__addsf3>
 800bade:	4631      	mov	r1, r6
 800bae0:	4681      	mov	r9, r0
 800bae2:	4630      	mov	r0, r6
 800bae4:	f7f4 fc52 	bl	800038c <__aeabi_fmul>
 800bae8:	4601      	mov	r1, r0
 800baea:	4648      	mov	r0, r9
 800baec:	f7f4 fc4e 	bl	800038c <__aeabi_fmul>
 800baf0:	4606      	mov	r6, r0
 800baf2:	4641      	mov	r1, r8
 800baf4:	9802      	ldr	r0, [sp, #8]
 800baf6:	f7f4 fb41 	bl	800017c <__addsf3>
 800bafa:	4659      	mov	r1, fp
 800bafc:	f7f4 fc46 	bl	800038c <__aeabi_fmul>
 800bb00:	4631      	mov	r1, r6
 800bb02:	f7f4 fb3b 	bl	800017c <__addsf3>
 800bb06:	4641      	mov	r1, r8
 800bb08:	4681      	mov	r9, r0
 800bb0a:	4640      	mov	r0, r8
 800bb0c:	f7f4 fc3e 	bl	800038c <__aeabi_fmul>
 800bb10:	4956      	ldr	r1, [pc, #344]	@ (800bc6c <__ieee754_powf+0x4dc>)
 800bb12:	4682      	mov	sl, r0
 800bb14:	f7f4 fb32 	bl	800017c <__addsf3>
 800bb18:	4649      	mov	r1, r9
 800bb1a:	f7f4 fb2f 	bl	800017c <__addsf3>
 800bb1e:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 800bb22:	f026 060f 	bic.w	r6, r6, #15
 800bb26:	4631      	mov	r1, r6
 800bb28:	4640      	mov	r0, r8
 800bb2a:	f7f4 fc2f 	bl	800038c <__aeabi_fmul>
 800bb2e:	494f      	ldr	r1, [pc, #316]	@ (800bc6c <__ieee754_powf+0x4dc>)
 800bb30:	4680      	mov	r8, r0
 800bb32:	4630      	mov	r0, r6
 800bb34:	f7f4 fb20 	bl	8000178 <__aeabi_fsub>
 800bb38:	4651      	mov	r1, sl
 800bb3a:	f7f4 fb1d 	bl	8000178 <__aeabi_fsub>
 800bb3e:	4601      	mov	r1, r0
 800bb40:	4648      	mov	r0, r9
 800bb42:	f7f4 fb19 	bl	8000178 <__aeabi_fsub>
 800bb46:	9902      	ldr	r1, [sp, #8]
 800bb48:	f7f4 fc20 	bl	800038c <__aeabi_fmul>
 800bb4c:	4631      	mov	r1, r6
 800bb4e:	4681      	mov	r9, r0
 800bb50:	4658      	mov	r0, fp
 800bb52:	f7f4 fc1b 	bl	800038c <__aeabi_fmul>
 800bb56:	4601      	mov	r1, r0
 800bb58:	4648      	mov	r0, r9
 800bb5a:	f7f4 fb0f 	bl	800017c <__addsf3>
 800bb5e:	4682      	mov	sl, r0
 800bb60:	4601      	mov	r1, r0
 800bb62:	4640      	mov	r0, r8
 800bb64:	f7f4 fb0a 	bl	800017c <__addsf3>
 800bb68:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 800bb6c:	f026 060f 	bic.w	r6, r6, #15
 800bb70:	4630      	mov	r0, r6
 800bb72:	493f      	ldr	r1, [pc, #252]	@ (800bc70 <__ieee754_powf+0x4e0>)
 800bb74:	f7f4 fc0a 	bl	800038c <__aeabi_fmul>
 800bb78:	4641      	mov	r1, r8
 800bb7a:	4681      	mov	r9, r0
 800bb7c:	4630      	mov	r0, r6
 800bb7e:	f7f4 fafb 	bl	8000178 <__aeabi_fsub>
 800bb82:	4601      	mov	r1, r0
 800bb84:	4650      	mov	r0, sl
 800bb86:	f7f4 faf7 	bl	8000178 <__aeabi_fsub>
 800bb8a:	493a      	ldr	r1, [pc, #232]	@ (800bc74 <__ieee754_powf+0x4e4>)
 800bb8c:	f7f4 fbfe 	bl	800038c <__aeabi_fmul>
 800bb90:	4939      	ldr	r1, [pc, #228]	@ (800bc78 <__ieee754_powf+0x4e8>)
 800bb92:	4680      	mov	r8, r0
 800bb94:	4630      	mov	r0, r6
 800bb96:	f7f4 fbf9 	bl	800038c <__aeabi_fmul>
 800bb9a:	4601      	mov	r1, r0
 800bb9c:	4640      	mov	r0, r8
 800bb9e:	f7f4 faed 	bl	800017c <__addsf3>
 800bba2:	4b36      	ldr	r3, [pc, #216]	@ (800bc7c <__ieee754_powf+0x4ec>)
 800bba4:	9a01      	ldr	r2, [sp, #4]
 800bba6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bbaa:	f7f4 fae7 	bl	800017c <__addsf3>
 800bbae:	9a05      	ldr	r2, [sp, #20]
 800bbb0:	4606      	mov	r6, r0
 800bbb2:	4610      	mov	r0, r2
 800bbb4:	f7f4 fb96 	bl	80002e4 <__aeabi_i2f>
 800bbb8:	4680      	mov	r8, r0
 800bbba:	4b31      	ldr	r3, [pc, #196]	@ (800bc80 <__ieee754_powf+0x4f0>)
 800bbbc:	9a01      	ldr	r2, [sp, #4]
 800bbbe:	4631      	mov	r1, r6
 800bbc0:	f853 a022 	ldr.w	sl, [r3, r2, lsl #2]
 800bbc4:	4648      	mov	r0, r9
 800bbc6:	f7f4 fad9 	bl	800017c <__addsf3>
 800bbca:	4651      	mov	r1, sl
 800bbcc:	f7f4 fad6 	bl	800017c <__addsf3>
 800bbd0:	4641      	mov	r1, r8
 800bbd2:	f7f4 fad3 	bl	800017c <__addsf3>
 800bbd6:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 800bbda:	f02b 0b0f 	bic.w	fp, fp, #15
 800bbde:	4641      	mov	r1, r8
 800bbe0:	4658      	mov	r0, fp
 800bbe2:	f7f4 fac9 	bl	8000178 <__aeabi_fsub>
 800bbe6:	4651      	mov	r1, sl
 800bbe8:	f7f4 fac6 	bl	8000178 <__aeabi_fsub>
 800bbec:	4649      	mov	r1, r9
 800bbee:	e6a6      	b.n	800b93e <__ieee754_powf+0x1ae>
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	e6fa      	b.n	800b9ea <__ieee754_powf+0x25a>
 800bbf4:	2301      	movs	r3, #1
 800bbf6:	e70b      	b.n	800ba10 <__ieee754_powf+0x280>
 800bbf8:	d148      	bne.n	800bc8c <__ieee754_powf+0x4fc>
 800bbfa:	4922      	ldr	r1, [pc, #136]	@ (800bc84 <__ieee754_powf+0x4f4>)
 800bbfc:	4630      	mov	r0, r6
 800bbfe:	f7f4 fabd 	bl	800017c <__addsf3>
 800bc02:	4639      	mov	r1, r7
 800bc04:	4681      	mov	r9, r0
 800bc06:	4620      	mov	r0, r4
 800bc08:	f7f4 fab6 	bl	8000178 <__aeabi_fsub>
 800bc0c:	4601      	mov	r1, r0
 800bc0e:	4648      	mov	r0, r9
 800bc10:	f7f4 fd78 	bl	8000704 <__aeabi_fcmpgt>
 800bc14:	2800      	cmp	r0, #0
 800bc16:	f47f aec7 	bne.w	800b9a8 <__ieee754_powf+0x218>
 800bc1a:	2386      	movs	r3, #134	@ 0x86
 800bc1c:	e03b      	b.n	800bc96 <__ieee754_powf+0x506>
 800bc1e:	4a1a      	ldr	r2, [pc, #104]	@ (800bc88 <__ieee754_powf+0x4f8>)
 800bc20:	4293      	cmp	r3, r2
 800bc22:	d907      	bls.n	800bc34 <__ieee754_powf+0x4a4>
 800bc24:	2100      	movs	r1, #0
 800bc26:	4628      	mov	r0, r5
 800bc28:	f7f4 fd4e 	bl	80006c8 <__aeabi_fcmplt>
 800bc2c:	3800      	subs	r0, #0
 800bc2e:	bf18      	it	ne
 800bc30:	2001      	movne	r0, #1
 800bc32:	e645      	b.n	800b8c0 <__ieee754_powf+0x130>
 800bc34:	d12a      	bne.n	800bc8c <__ieee754_powf+0x4fc>
 800bc36:	4639      	mov	r1, r7
 800bc38:	f7f4 fa9e 	bl	8000178 <__aeabi_fsub>
 800bc3c:	4631      	mov	r1, r6
 800bc3e:	f7f4 fd57 	bl	80006f0 <__aeabi_fcmpge>
 800bc42:	2800      	cmp	r0, #0
 800bc44:	d0e9      	beq.n	800bc1a <__ieee754_powf+0x48a>
 800bc46:	e7ed      	b.n	800bc24 <__ieee754_powf+0x494>
 800bc48:	001cc471 	.word	0x001cc471
 800bc4c:	005db3d6 	.word	0x005db3d6
 800bc50:	0800ce90 	.word	0x0800ce90
 800bc54:	3e53f142 	.word	0x3e53f142
 800bc58:	3e6c3255 	.word	0x3e6c3255
 800bc5c:	3e8ba305 	.word	0x3e8ba305
 800bc60:	3eaaaaab 	.word	0x3eaaaaab
 800bc64:	3edb6db7 	.word	0x3edb6db7
 800bc68:	3f19999a 	.word	0x3f19999a
 800bc6c:	40400000 	.word	0x40400000
 800bc70:	3f763800 	.word	0x3f763800
 800bc74:	3f76384f 	.word	0x3f76384f
 800bc78:	369dc3a0 	.word	0x369dc3a0
 800bc7c:	0800ce80 	.word	0x0800ce80
 800bc80:	0800ce88 	.word	0x0800ce88
 800bc84:	3338aa3c 	.word	0x3338aa3c
 800bc88:	43160000 	.word	0x43160000
 800bc8c:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800bc90:	f240 809b 	bls.w	800bdca <__ieee754_powf+0x63a>
 800bc94:	15db      	asrs	r3, r3, #23
 800bc96:	f44f 0400 	mov.w	r4, #8388608	@ 0x800000
 800bc9a:	3b7e      	subs	r3, #126	@ 0x7e
 800bc9c:	411c      	asrs	r4, r3
 800bc9e:	4444      	add	r4, r8
 800bca0:	f3c4 53c7 	ubfx	r3, r4, #23, #8
 800bca4:	4961      	ldr	r1, [pc, #388]	@ (800be2c <__ieee754_powf+0x69c>)
 800bca6:	3b7f      	subs	r3, #127	@ 0x7f
 800bca8:	4119      	asrs	r1, r3
 800bcaa:	4021      	ands	r1, r4
 800bcac:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800bcb0:	f1c3 0317 	rsb	r3, r3, #23
 800bcb4:	f444 0400 	orr.w	r4, r4, #8388608	@ 0x800000
 800bcb8:	4638      	mov	r0, r7
 800bcba:	411c      	asrs	r4, r3
 800bcbc:	f1b8 0f00 	cmp.w	r8, #0
 800bcc0:	bfb8      	it	lt
 800bcc2:	4264      	neglt	r4, r4
 800bcc4:	f7f4 fa58 	bl	8000178 <__aeabi_fsub>
 800bcc8:	4607      	mov	r7, r0
 800bcca:	4631      	mov	r1, r6
 800bccc:	4638      	mov	r0, r7
 800bcce:	f7f4 fa55 	bl	800017c <__addsf3>
 800bcd2:	f420 687f 	bic.w	r8, r0, #4080	@ 0xff0
 800bcd6:	f028 080f 	bic.w	r8, r8, #15
 800bcda:	4640      	mov	r0, r8
 800bcdc:	4954      	ldr	r1, [pc, #336]	@ (800be30 <__ieee754_powf+0x6a0>)
 800bcde:	f7f4 fb55 	bl	800038c <__aeabi_fmul>
 800bce2:	4639      	mov	r1, r7
 800bce4:	4681      	mov	r9, r0
 800bce6:	4640      	mov	r0, r8
 800bce8:	f7f4 fa46 	bl	8000178 <__aeabi_fsub>
 800bcec:	4601      	mov	r1, r0
 800bcee:	4630      	mov	r0, r6
 800bcf0:	f7f4 fa42 	bl	8000178 <__aeabi_fsub>
 800bcf4:	494f      	ldr	r1, [pc, #316]	@ (800be34 <__ieee754_powf+0x6a4>)
 800bcf6:	f7f4 fb49 	bl	800038c <__aeabi_fmul>
 800bcfa:	494f      	ldr	r1, [pc, #316]	@ (800be38 <__ieee754_powf+0x6a8>)
 800bcfc:	4606      	mov	r6, r0
 800bcfe:	4640      	mov	r0, r8
 800bd00:	f7f4 fb44 	bl	800038c <__aeabi_fmul>
 800bd04:	4601      	mov	r1, r0
 800bd06:	4630      	mov	r0, r6
 800bd08:	f7f4 fa38 	bl	800017c <__addsf3>
 800bd0c:	4607      	mov	r7, r0
 800bd0e:	4601      	mov	r1, r0
 800bd10:	4648      	mov	r0, r9
 800bd12:	f7f4 fa33 	bl	800017c <__addsf3>
 800bd16:	4649      	mov	r1, r9
 800bd18:	4606      	mov	r6, r0
 800bd1a:	f7f4 fa2d 	bl	8000178 <__aeabi_fsub>
 800bd1e:	4601      	mov	r1, r0
 800bd20:	4638      	mov	r0, r7
 800bd22:	f7f4 fa29 	bl	8000178 <__aeabi_fsub>
 800bd26:	4631      	mov	r1, r6
 800bd28:	4680      	mov	r8, r0
 800bd2a:	4630      	mov	r0, r6
 800bd2c:	f7f4 fb2e 	bl	800038c <__aeabi_fmul>
 800bd30:	4607      	mov	r7, r0
 800bd32:	4942      	ldr	r1, [pc, #264]	@ (800be3c <__ieee754_powf+0x6ac>)
 800bd34:	f7f4 fb2a 	bl	800038c <__aeabi_fmul>
 800bd38:	4941      	ldr	r1, [pc, #260]	@ (800be40 <__ieee754_powf+0x6b0>)
 800bd3a:	f7f4 fa1d 	bl	8000178 <__aeabi_fsub>
 800bd3e:	4639      	mov	r1, r7
 800bd40:	f7f4 fb24 	bl	800038c <__aeabi_fmul>
 800bd44:	493f      	ldr	r1, [pc, #252]	@ (800be44 <__ieee754_powf+0x6b4>)
 800bd46:	f7f4 fa19 	bl	800017c <__addsf3>
 800bd4a:	4639      	mov	r1, r7
 800bd4c:	f7f4 fb1e 	bl	800038c <__aeabi_fmul>
 800bd50:	493d      	ldr	r1, [pc, #244]	@ (800be48 <__ieee754_powf+0x6b8>)
 800bd52:	f7f4 fa11 	bl	8000178 <__aeabi_fsub>
 800bd56:	4639      	mov	r1, r7
 800bd58:	f7f4 fb18 	bl	800038c <__aeabi_fmul>
 800bd5c:	493b      	ldr	r1, [pc, #236]	@ (800be4c <__ieee754_powf+0x6bc>)
 800bd5e:	f7f4 fa0d 	bl	800017c <__addsf3>
 800bd62:	4639      	mov	r1, r7
 800bd64:	f7f4 fb12 	bl	800038c <__aeabi_fmul>
 800bd68:	4601      	mov	r1, r0
 800bd6a:	4630      	mov	r0, r6
 800bd6c:	f7f4 fa04 	bl	8000178 <__aeabi_fsub>
 800bd70:	4607      	mov	r7, r0
 800bd72:	4601      	mov	r1, r0
 800bd74:	4630      	mov	r0, r6
 800bd76:	f7f4 fb09 	bl	800038c <__aeabi_fmul>
 800bd7a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800bd7e:	4681      	mov	r9, r0
 800bd80:	4638      	mov	r0, r7
 800bd82:	f7f4 f9f9 	bl	8000178 <__aeabi_fsub>
 800bd86:	4601      	mov	r1, r0
 800bd88:	4648      	mov	r0, r9
 800bd8a:	f7f4 fbb3 	bl	80004f4 <__aeabi_fdiv>
 800bd8e:	4641      	mov	r1, r8
 800bd90:	4607      	mov	r7, r0
 800bd92:	4630      	mov	r0, r6
 800bd94:	f7f4 fafa 	bl	800038c <__aeabi_fmul>
 800bd98:	4641      	mov	r1, r8
 800bd9a:	f7f4 f9ef 	bl	800017c <__addsf3>
 800bd9e:	4601      	mov	r1, r0
 800bda0:	4638      	mov	r0, r7
 800bda2:	f7f4 f9e9 	bl	8000178 <__aeabi_fsub>
 800bda6:	4631      	mov	r1, r6
 800bda8:	f7f4 f9e6 	bl	8000178 <__aeabi_fsub>
 800bdac:	4601      	mov	r1, r0
 800bdae:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800bdb2:	f7f4 f9e1 	bl	8000178 <__aeabi_fsub>
 800bdb6:	eb00 53c4 	add.w	r3, r0, r4, lsl #23
 800bdba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bdbe:	da06      	bge.n	800bdce <__ieee754_powf+0x63e>
 800bdc0:	4621      	mov	r1, r4
 800bdc2:	f000 f9af 	bl	800c124 <scalbnf>
 800bdc6:	4629      	mov	r1, r5
 800bdc8:	e549      	b.n	800b85e <__ieee754_powf+0xce>
 800bdca:	2400      	movs	r4, #0
 800bdcc:	e77d      	b.n	800bcca <__ieee754_powf+0x53a>
 800bdce:	4618      	mov	r0, r3
 800bdd0:	e7f9      	b.n	800bdc6 <__ieee754_powf+0x636>
 800bdd2:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800bdd6:	e536      	b.n	800b846 <__ieee754_powf+0xb6>
 800bdd8:	4639      	mov	r1, r7
 800bdda:	e534      	b.n	800b846 <__ieee754_powf+0xb6>
 800bddc:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 800bde0:	f43f ad23 	beq.w	800b82a <__ieee754_powf+0x9a>
 800bde4:	2502      	movs	r5, #2
 800bde6:	4648      	mov	r0, r9
 800bde8:	f000 f998 	bl	800c11c <fabsf>
 800bdec:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800bdf0:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800bdf4:	46c2      	mov	sl, r8
 800bdf6:	4601      	mov	r1, r0
 800bdf8:	d003      	beq.n	800be02 <__ieee754_powf+0x672>
 800bdfa:	f1b8 0f00 	cmp.w	r8, #0
 800bdfe:	f47f ad43 	bne.w	800b888 <__ieee754_powf+0xf8>
 800be02:	2c00      	cmp	r4, #0
 800be04:	da04      	bge.n	800be10 <__ieee754_powf+0x680>
 800be06:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800be0a:	f7f4 fb73 	bl	80004f4 <__aeabi_fdiv>
 800be0e:	4601      	mov	r1, r0
 800be10:	2e00      	cmp	r6, #0
 800be12:	f6bf ad18 	bge.w	800b846 <__ieee754_powf+0xb6>
 800be16:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800be1a:	ea58 0805 	orrs.w	r8, r8, r5
 800be1e:	f47f ad2e 	bne.w	800b87e <__ieee754_powf+0xee>
 800be22:	4608      	mov	r0, r1
 800be24:	f7f4 f9a8 	bl	8000178 <__aeabi_fsub>
 800be28:	4601      	mov	r1, r0
 800be2a:	e4f8      	b.n	800b81e <__ieee754_powf+0x8e>
 800be2c:	ff800000 	.word	0xff800000
 800be30:	3f317200 	.word	0x3f317200
 800be34:	3f317218 	.word	0x3f317218
 800be38:	35bfbe8c 	.word	0x35bfbe8c
 800be3c:	3331bb4c 	.word	0x3331bb4c
 800be40:	35ddea0e 	.word	0x35ddea0e
 800be44:	388ab355 	.word	0x388ab355
 800be48:	3b360b61 	.word	0x3b360b61
 800be4c:	3e2aaaab 	.word	0x3e2aaaab

0800be50 <__ieee754_rem_pio2f>:
 800be50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be54:	4aa4      	ldr	r2, [pc, #656]	@ (800c0e8 <__ieee754_rem_pio2f+0x298>)
 800be56:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 800be5a:	4590      	cmp	r8, r2
 800be5c:	460c      	mov	r4, r1
 800be5e:	4682      	mov	sl, r0
 800be60:	b087      	sub	sp, #28
 800be62:	d804      	bhi.n	800be6e <__ieee754_rem_pio2f+0x1e>
 800be64:	2300      	movs	r3, #0
 800be66:	6008      	str	r0, [r1, #0]
 800be68:	604b      	str	r3, [r1, #4]
 800be6a:	2500      	movs	r5, #0
 800be6c:	e01d      	b.n	800beaa <__ieee754_rem_pio2f+0x5a>
 800be6e:	4a9f      	ldr	r2, [pc, #636]	@ (800c0ec <__ieee754_rem_pio2f+0x29c>)
 800be70:	4590      	cmp	r8, r2
 800be72:	d84f      	bhi.n	800bf14 <__ieee754_rem_pio2f+0xc4>
 800be74:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 800be78:	2800      	cmp	r0, #0
 800be7a:	499d      	ldr	r1, [pc, #628]	@ (800c0f0 <__ieee754_rem_pio2f+0x2a0>)
 800be7c:	4f9d      	ldr	r7, [pc, #628]	@ (800c0f4 <__ieee754_rem_pio2f+0x2a4>)
 800be7e:	f025 050f 	bic.w	r5, r5, #15
 800be82:	dd24      	ble.n	800bece <__ieee754_rem_pio2f+0x7e>
 800be84:	f7f4 f978 	bl	8000178 <__aeabi_fsub>
 800be88:	42bd      	cmp	r5, r7
 800be8a:	4606      	mov	r6, r0
 800be8c:	d011      	beq.n	800beb2 <__ieee754_rem_pio2f+0x62>
 800be8e:	499a      	ldr	r1, [pc, #616]	@ (800c0f8 <__ieee754_rem_pio2f+0x2a8>)
 800be90:	f7f4 f972 	bl	8000178 <__aeabi_fsub>
 800be94:	4601      	mov	r1, r0
 800be96:	4605      	mov	r5, r0
 800be98:	4630      	mov	r0, r6
 800be9a:	f7f4 f96d 	bl	8000178 <__aeabi_fsub>
 800be9e:	4996      	ldr	r1, [pc, #600]	@ (800c0f8 <__ieee754_rem_pio2f+0x2a8>)
 800bea0:	f7f4 f96a 	bl	8000178 <__aeabi_fsub>
 800bea4:	6025      	str	r5, [r4, #0]
 800bea6:	2501      	movs	r5, #1
 800bea8:	6060      	str	r0, [r4, #4]
 800beaa:	4628      	mov	r0, r5
 800beac:	b007      	add	sp, #28
 800beae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800beb2:	4992      	ldr	r1, [pc, #584]	@ (800c0fc <__ieee754_rem_pio2f+0x2ac>)
 800beb4:	f7f4 f960 	bl	8000178 <__aeabi_fsub>
 800beb8:	4991      	ldr	r1, [pc, #580]	@ (800c100 <__ieee754_rem_pio2f+0x2b0>)
 800beba:	4606      	mov	r6, r0
 800bebc:	f7f4 f95c 	bl	8000178 <__aeabi_fsub>
 800bec0:	4601      	mov	r1, r0
 800bec2:	4605      	mov	r5, r0
 800bec4:	4630      	mov	r0, r6
 800bec6:	f7f4 f957 	bl	8000178 <__aeabi_fsub>
 800beca:	498d      	ldr	r1, [pc, #564]	@ (800c100 <__ieee754_rem_pio2f+0x2b0>)
 800becc:	e7e8      	b.n	800bea0 <__ieee754_rem_pio2f+0x50>
 800bece:	f7f4 f955 	bl	800017c <__addsf3>
 800bed2:	42bd      	cmp	r5, r7
 800bed4:	4606      	mov	r6, r0
 800bed6:	d00f      	beq.n	800bef8 <__ieee754_rem_pio2f+0xa8>
 800bed8:	4987      	ldr	r1, [pc, #540]	@ (800c0f8 <__ieee754_rem_pio2f+0x2a8>)
 800beda:	f7f4 f94f 	bl	800017c <__addsf3>
 800bede:	4601      	mov	r1, r0
 800bee0:	4605      	mov	r5, r0
 800bee2:	4630      	mov	r0, r6
 800bee4:	f7f4 f948 	bl	8000178 <__aeabi_fsub>
 800bee8:	4983      	ldr	r1, [pc, #524]	@ (800c0f8 <__ieee754_rem_pio2f+0x2a8>)
 800beea:	f7f4 f947 	bl	800017c <__addsf3>
 800beee:	6025      	str	r5, [r4, #0]
 800bef0:	6060      	str	r0, [r4, #4]
 800bef2:	f04f 35ff 	mov.w	r5, #4294967295
 800bef6:	e7d8      	b.n	800beaa <__ieee754_rem_pio2f+0x5a>
 800bef8:	4980      	ldr	r1, [pc, #512]	@ (800c0fc <__ieee754_rem_pio2f+0x2ac>)
 800befa:	f7f4 f93f 	bl	800017c <__addsf3>
 800befe:	4980      	ldr	r1, [pc, #512]	@ (800c100 <__ieee754_rem_pio2f+0x2b0>)
 800bf00:	4606      	mov	r6, r0
 800bf02:	f7f4 f93b 	bl	800017c <__addsf3>
 800bf06:	4601      	mov	r1, r0
 800bf08:	4605      	mov	r5, r0
 800bf0a:	4630      	mov	r0, r6
 800bf0c:	f7f4 f934 	bl	8000178 <__aeabi_fsub>
 800bf10:	497b      	ldr	r1, [pc, #492]	@ (800c100 <__ieee754_rem_pio2f+0x2b0>)
 800bf12:	e7ea      	b.n	800beea <__ieee754_rem_pio2f+0x9a>
 800bf14:	4a7b      	ldr	r2, [pc, #492]	@ (800c104 <__ieee754_rem_pio2f+0x2b4>)
 800bf16:	4590      	cmp	r8, r2
 800bf18:	f200 8095 	bhi.w	800c046 <__ieee754_rem_pio2f+0x1f6>
 800bf1c:	f000 f8fe 	bl	800c11c <fabsf>
 800bf20:	4979      	ldr	r1, [pc, #484]	@ (800c108 <__ieee754_rem_pio2f+0x2b8>)
 800bf22:	4606      	mov	r6, r0
 800bf24:	f7f4 fa32 	bl	800038c <__aeabi_fmul>
 800bf28:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800bf2c:	f7f4 f926 	bl	800017c <__addsf3>
 800bf30:	f7f4 fc08 	bl	8000744 <__aeabi_f2iz>
 800bf34:	4605      	mov	r5, r0
 800bf36:	f7f4 f9d5 	bl	80002e4 <__aeabi_i2f>
 800bf3a:	496d      	ldr	r1, [pc, #436]	@ (800c0f0 <__ieee754_rem_pio2f+0x2a0>)
 800bf3c:	4681      	mov	r9, r0
 800bf3e:	f7f4 fa25 	bl	800038c <__aeabi_fmul>
 800bf42:	4601      	mov	r1, r0
 800bf44:	4630      	mov	r0, r6
 800bf46:	f7f4 f917 	bl	8000178 <__aeabi_fsub>
 800bf4a:	496b      	ldr	r1, [pc, #428]	@ (800c0f8 <__ieee754_rem_pio2f+0x2a8>)
 800bf4c:	4607      	mov	r7, r0
 800bf4e:	4648      	mov	r0, r9
 800bf50:	f7f4 fa1c 	bl	800038c <__aeabi_fmul>
 800bf54:	2d1f      	cmp	r5, #31
 800bf56:	4606      	mov	r6, r0
 800bf58:	dc0e      	bgt.n	800bf78 <__ieee754_rem_pio2f+0x128>
 800bf5a:	4a6c      	ldr	r2, [pc, #432]	@ (800c10c <__ieee754_rem_pio2f+0x2bc>)
 800bf5c:	1e69      	subs	r1, r5, #1
 800bf5e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800bf62:	f02a 4300 	bic.w	r3, sl, #2147483648	@ 0x80000000
 800bf66:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800bf6a:	4293      	cmp	r3, r2
 800bf6c:	d004      	beq.n	800bf78 <__ieee754_rem_pio2f+0x128>
 800bf6e:	4631      	mov	r1, r6
 800bf70:	4638      	mov	r0, r7
 800bf72:	f7f4 f901 	bl	8000178 <__aeabi_fsub>
 800bf76:	e00b      	b.n	800bf90 <__ieee754_rem_pio2f+0x140>
 800bf78:	4631      	mov	r1, r6
 800bf7a:	4638      	mov	r0, r7
 800bf7c:	f7f4 f8fc 	bl	8000178 <__aeabi_fsub>
 800bf80:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800bf84:	ebc3 53d8 	rsb	r3, r3, r8, lsr #23
 800bf88:	2b08      	cmp	r3, #8
 800bf8a:	ea4f 5be8 	mov.w	fp, r8, asr #23
 800bf8e:	dc01      	bgt.n	800bf94 <__ieee754_rem_pio2f+0x144>
 800bf90:	6020      	str	r0, [r4, #0]
 800bf92:	e026      	b.n	800bfe2 <__ieee754_rem_pio2f+0x192>
 800bf94:	4959      	ldr	r1, [pc, #356]	@ (800c0fc <__ieee754_rem_pio2f+0x2ac>)
 800bf96:	4648      	mov	r0, r9
 800bf98:	f7f4 f9f8 	bl	800038c <__aeabi_fmul>
 800bf9c:	4606      	mov	r6, r0
 800bf9e:	4601      	mov	r1, r0
 800bfa0:	4638      	mov	r0, r7
 800bfa2:	f7f4 f8e9 	bl	8000178 <__aeabi_fsub>
 800bfa6:	4601      	mov	r1, r0
 800bfa8:	4680      	mov	r8, r0
 800bfaa:	4638      	mov	r0, r7
 800bfac:	f7f4 f8e4 	bl	8000178 <__aeabi_fsub>
 800bfb0:	4631      	mov	r1, r6
 800bfb2:	f7f4 f8e1 	bl	8000178 <__aeabi_fsub>
 800bfb6:	4606      	mov	r6, r0
 800bfb8:	4951      	ldr	r1, [pc, #324]	@ (800c100 <__ieee754_rem_pio2f+0x2b0>)
 800bfba:	4648      	mov	r0, r9
 800bfbc:	f7f4 f9e6 	bl	800038c <__aeabi_fmul>
 800bfc0:	4631      	mov	r1, r6
 800bfc2:	f7f4 f8d9 	bl	8000178 <__aeabi_fsub>
 800bfc6:	4601      	mov	r1, r0
 800bfc8:	4606      	mov	r6, r0
 800bfca:	4640      	mov	r0, r8
 800bfcc:	f7f4 f8d4 	bl	8000178 <__aeabi_fsub>
 800bfd0:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800bfd4:	ebab 0b03 	sub.w	fp, fp, r3
 800bfd8:	f1bb 0f19 	cmp.w	fp, #25
 800bfdc:	dc18      	bgt.n	800c010 <__ieee754_rem_pio2f+0x1c0>
 800bfde:	4647      	mov	r7, r8
 800bfe0:	6020      	str	r0, [r4, #0]
 800bfe2:	f8d4 8000 	ldr.w	r8, [r4]
 800bfe6:	4638      	mov	r0, r7
 800bfe8:	4641      	mov	r1, r8
 800bfea:	f7f4 f8c5 	bl	8000178 <__aeabi_fsub>
 800bfee:	4631      	mov	r1, r6
 800bff0:	f7f4 f8c2 	bl	8000178 <__aeabi_fsub>
 800bff4:	f1ba 0f00 	cmp.w	sl, #0
 800bff8:	6060      	str	r0, [r4, #4]
 800bffa:	f6bf af56 	bge.w	800beaa <__ieee754_rem_pio2f+0x5a>
 800bffe:	f108 4800 	add.w	r8, r8, #2147483648	@ 0x80000000
 800c002:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800c006:	f8c4 8000 	str.w	r8, [r4]
 800c00a:	6060      	str	r0, [r4, #4]
 800c00c:	426d      	negs	r5, r5
 800c00e:	e74c      	b.n	800beaa <__ieee754_rem_pio2f+0x5a>
 800c010:	493f      	ldr	r1, [pc, #252]	@ (800c110 <__ieee754_rem_pio2f+0x2c0>)
 800c012:	4648      	mov	r0, r9
 800c014:	f7f4 f9ba 	bl	800038c <__aeabi_fmul>
 800c018:	4606      	mov	r6, r0
 800c01a:	4601      	mov	r1, r0
 800c01c:	4640      	mov	r0, r8
 800c01e:	f7f4 f8ab 	bl	8000178 <__aeabi_fsub>
 800c022:	4601      	mov	r1, r0
 800c024:	4607      	mov	r7, r0
 800c026:	4640      	mov	r0, r8
 800c028:	f7f4 f8a6 	bl	8000178 <__aeabi_fsub>
 800c02c:	4631      	mov	r1, r6
 800c02e:	f7f4 f8a3 	bl	8000178 <__aeabi_fsub>
 800c032:	4606      	mov	r6, r0
 800c034:	4937      	ldr	r1, [pc, #220]	@ (800c114 <__ieee754_rem_pio2f+0x2c4>)
 800c036:	4648      	mov	r0, r9
 800c038:	f7f4 f9a8 	bl	800038c <__aeabi_fmul>
 800c03c:	4631      	mov	r1, r6
 800c03e:	f7f4 f89b 	bl	8000178 <__aeabi_fsub>
 800c042:	4606      	mov	r6, r0
 800c044:	e793      	b.n	800bf6e <__ieee754_rem_pio2f+0x11e>
 800c046:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800c04a:	d305      	bcc.n	800c058 <__ieee754_rem_pio2f+0x208>
 800c04c:	4601      	mov	r1, r0
 800c04e:	f7f4 f893 	bl	8000178 <__aeabi_fsub>
 800c052:	6060      	str	r0, [r4, #4]
 800c054:	6020      	str	r0, [r4, #0]
 800c056:	e708      	b.n	800be6a <__ieee754_rem_pio2f+0x1a>
 800c058:	ea4f 56e8 	mov.w	r6, r8, asr #23
 800c05c:	3e86      	subs	r6, #134	@ 0x86
 800c05e:	eba8 58c6 	sub.w	r8, r8, r6, lsl #23
 800c062:	4640      	mov	r0, r8
 800c064:	f7f4 fb6e 	bl	8000744 <__aeabi_f2iz>
 800c068:	f7f4 f93c 	bl	80002e4 <__aeabi_i2f>
 800c06c:	4601      	mov	r1, r0
 800c06e:	9003      	str	r0, [sp, #12]
 800c070:	4640      	mov	r0, r8
 800c072:	f7f4 f881 	bl	8000178 <__aeabi_fsub>
 800c076:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800c07a:	f7f4 f987 	bl	800038c <__aeabi_fmul>
 800c07e:	4607      	mov	r7, r0
 800c080:	f7f4 fb60 	bl	8000744 <__aeabi_f2iz>
 800c084:	f7f4 f92e 	bl	80002e4 <__aeabi_i2f>
 800c088:	4601      	mov	r1, r0
 800c08a:	9004      	str	r0, [sp, #16]
 800c08c:	4605      	mov	r5, r0
 800c08e:	4638      	mov	r0, r7
 800c090:	f7f4 f872 	bl	8000178 <__aeabi_fsub>
 800c094:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800c098:	f7f4 f978 	bl	800038c <__aeabi_fmul>
 800c09c:	2100      	movs	r1, #0
 800c09e:	9005      	str	r0, [sp, #20]
 800c0a0:	f7f4 fb08 	bl	80006b4 <__aeabi_fcmpeq>
 800c0a4:	b1f0      	cbz	r0, 800c0e4 <__ieee754_rem_pio2f+0x294>
 800c0a6:	2100      	movs	r1, #0
 800c0a8:	4628      	mov	r0, r5
 800c0aa:	f7f4 fb03 	bl	80006b4 <__aeabi_fcmpeq>
 800c0ae:	2800      	cmp	r0, #0
 800c0b0:	bf14      	ite	ne
 800c0b2:	2301      	movne	r3, #1
 800c0b4:	2302      	moveq	r3, #2
 800c0b6:	4a18      	ldr	r2, [pc, #96]	@ (800c118 <__ieee754_rem_pio2f+0x2c8>)
 800c0b8:	4621      	mov	r1, r4
 800c0ba:	9201      	str	r2, [sp, #4]
 800c0bc:	2202      	movs	r2, #2
 800c0be:	a803      	add	r0, sp, #12
 800c0c0:	9200      	str	r2, [sp, #0]
 800c0c2:	4632      	mov	r2, r6
 800c0c4:	f000 f898 	bl	800c1f8 <__kernel_rem_pio2f>
 800c0c8:	f1ba 0f00 	cmp.w	sl, #0
 800c0cc:	4605      	mov	r5, r0
 800c0ce:	f6bf aeec 	bge.w	800beaa <__ieee754_rem_pio2f+0x5a>
 800c0d2:	6823      	ldr	r3, [r4, #0]
 800c0d4:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800c0d8:	6023      	str	r3, [r4, #0]
 800c0da:	6863      	ldr	r3, [r4, #4]
 800c0dc:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800c0e0:	6063      	str	r3, [r4, #4]
 800c0e2:	e793      	b.n	800c00c <__ieee754_rem_pio2f+0x1bc>
 800c0e4:	2303      	movs	r3, #3
 800c0e6:	e7e6      	b.n	800c0b6 <__ieee754_rem_pio2f+0x266>
 800c0e8:	3f490fd8 	.word	0x3f490fd8
 800c0ec:	4016cbe3 	.word	0x4016cbe3
 800c0f0:	3fc90f80 	.word	0x3fc90f80
 800c0f4:	3fc90fd0 	.word	0x3fc90fd0
 800c0f8:	37354443 	.word	0x37354443
 800c0fc:	37354400 	.word	0x37354400
 800c100:	2e85a308 	.word	0x2e85a308
 800c104:	43490f80 	.word	0x43490f80
 800c108:	3f22f984 	.word	0x3f22f984
 800c10c:	0800ce98 	.word	0x0800ce98
 800c110:	2e85a300 	.word	0x2e85a300
 800c114:	248d3132 	.word	0x248d3132
 800c118:	0800cf18 	.word	0x0800cf18

0800c11c <fabsf>:
 800c11c:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800c120:	4770      	bx	lr
	...

0800c124 <scalbnf>:
 800c124:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800c128:	b538      	push	{r3, r4, r5, lr}
 800c12a:	4603      	mov	r3, r0
 800c12c:	460d      	mov	r5, r1
 800c12e:	4604      	mov	r4, r0
 800c130:	d02e      	beq.n	800c190 <scalbnf+0x6c>
 800c132:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800c136:	d304      	bcc.n	800c142 <scalbnf+0x1e>
 800c138:	4601      	mov	r1, r0
 800c13a:	f7f4 f81f 	bl	800017c <__addsf3>
 800c13e:	4603      	mov	r3, r0
 800c140:	e026      	b.n	800c190 <scalbnf+0x6c>
 800c142:	f010 4fff 	tst.w	r0, #2139095040	@ 0x7f800000
 800c146:	d118      	bne.n	800c17a <scalbnf+0x56>
 800c148:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
 800c14c:	f7f4 f91e 	bl	800038c <__aeabi_fmul>
 800c150:	4a17      	ldr	r2, [pc, #92]	@ (800c1b0 <scalbnf+0x8c>)
 800c152:	4603      	mov	r3, r0
 800c154:	4295      	cmp	r5, r2
 800c156:	db0c      	blt.n	800c172 <scalbnf+0x4e>
 800c158:	4604      	mov	r4, r0
 800c15a:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800c15e:	3a19      	subs	r2, #25
 800c160:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800c164:	428d      	cmp	r5, r1
 800c166:	dd0a      	ble.n	800c17e <scalbnf+0x5a>
 800c168:	4912      	ldr	r1, [pc, #72]	@ (800c1b4 <scalbnf+0x90>)
 800c16a:	4618      	mov	r0, r3
 800c16c:	f361 001e 	bfi	r0, r1, #0, #31
 800c170:	e000      	b.n	800c174 <scalbnf+0x50>
 800c172:	4911      	ldr	r1, [pc, #68]	@ (800c1b8 <scalbnf+0x94>)
 800c174:	f7f4 f90a 	bl	800038c <__aeabi_fmul>
 800c178:	e7e1      	b.n	800c13e <scalbnf+0x1a>
 800c17a:	0dd2      	lsrs	r2, r2, #23
 800c17c:	e7f0      	b.n	800c160 <scalbnf+0x3c>
 800c17e:	1951      	adds	r1, r2, r5
 800c180:	29fe      	cmp	r1, #254	@ 0xfe
 800c182:	dcf1      	bgt.n	800c168 <scalbnf+0x44>
 800c184:	2900      	cmp	r1, #0
 800c186:	dd05      	ble.n	800c194 <scalbnf+0x70>
 800c188:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 800c18c:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 800c190:	4618      	mov	r0, r3
 800c192:	bd38      	pop	{r3, r4, r5, pc}
 800c194:	f111 0f16 	cmn.w	r1, #22
 800c198:	da01      	bge.n	800c19e <scalbnf+0x7a>
 800c19a:	4907      	ldr	r1, [pc, #28]	@ (800c1b8 <scalbnf+0x94>)
 800c19c:	e7e5      	b.n	800c16a <scalbnf+0x46>
 800c19e:	f101 0019 	add.w	r0, r1, #25
 800c1a2:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 800c1a6:	f04f 514c 	mov.w	r1, #855638016	@ 0x33000000
 800c1aa:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 800c1ae:	e7e1      	b.n	800c174 <scalbnf+0x50>
 800c1b0:	ffff3cb0 	.word	0xffff3cb0
 800c1b4:	7149f2ca 	.word	0x7149f2ca
 800c1b8:	0da24260 	.word	0x0da24260

0800c1bc <with_errnof>:
 800c1bc:	b538      	push	{r3, r4, r5, lr}
 800c1be:	4604      	mov	r4, r0
 800c1c0:	460d      	mov	r5, r1
 800c1c2:	f7fe f893 	bl	800a2ec <__errno>
 800c1c6:	6005      	str	r5, [r0, #0]
 800c1c8:	4620      	mov	r0, r4
 800c1ca:	bd38      	pop	{r3, r4, r5, pc}

0800c1cc <xflowf>:
 800c1cc:	b508      	push	{r3, lr}
 800c1ce:	b140      	cbz	r0, 800c1e2 <xflowf+0x16>
 800c1d0:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 800c1d4:	f7f4 f8da 	bl	800038c <__aeabi_fmul>
 800c1d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c1dc:	2122      	movs	r1, #34	@ 0x22
 800c1de:	f7ff bfed 	b.w	800c1bc <with_errnof>
 800c1e2:	4608      	mov	r0, r1
 800c1e4:	e7f6      	b.n	800c1d4 <xflowf+0x8>

0800c1e6 <__math_uflowf>:
 800c1e6:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 800c1ea:	f7ff bfef 	b.w	800c1cc <xflowf>

0800c1ee <__math_oflowf>:
 800c1ee:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 800c1f2:	f7ff bfeb 	b.w	800c1cc <xflowf>
	...

0800c1f8 <__kernel_rem_pio2f>:
 800c1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1fc:	b0db      	sub	sp, #364	@ 0x16c
 800c1fe:	9202      	str	r2, [sp, #8]
 800c200:	9304      	str	r3, [sp, #16]
 800c202:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 800c204:	4bac      	ldr	r3, [pc, #688]	@ (800c4b8 <__kernel_rem_pio2f+0x2c0>)
 800c206:	9005      	str	r0, [sp, #20]
 800c208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c20c:	9100      	str	r1, [sp, #0]
 800c20e:	9301      	str	r3, [sp, #4]
 800c210:	9b04      	ldr	r3, [sp, #16]
 800c212:	3b01      	subs	r3, #1
 800c214:	9303      	str	r3, [sp, #12]
 800c216:	9b02      	ldr	r3, [sp, #8]
 800c218:	1d1a      	adds	r2, r3, #4
 800c21a:	f2c0 8099 	blt.w	800c350 <__kernel_rem_pio2f+0x158>
 800c21e:	1edc      	subs	r4, r3, #3
 800c220:	bf48      	it	mi
 800c222:	1d1c      	addmi	r4, r3, #4
 800c224:	10e4      	asrs	r4, r4, #3
 800c226:	2500      	movs	r5, #0
 800c228:	f04f 0b00 	mov.w	fp, #0
 800c22c:	1c67      	adds	r7, r4, #1
 800c22e:	00fb      	lsls	r3, r7, #3
 800c230:	9306      	str	r3, [sp, #24]
 800c232:	9b02      	ldr	r3, [sp, #8]
 800c234:	9a03      	ldr	r2, [sp, #12]
 800c236:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 800c23a:	9b01      	ldr	r3, [sp, #4]
 800c23c:	eba4 0802 	sub.w	r8, r4, r2
 800c240:	eb03 0902 	add.w	r9, r3, r2
 800c244:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 800c246:	ae1e      	add	r6, sp, #120	@ 0x78
 800c248:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 800c24c:	454d      	cmp	r5, r9
 800c24e:	f340 8081 	ble.w	800c354 <__kernel_rem_pio2f+0x15c>
 800c252:	9a04      	ldr	r2, [sp, #16]
 800c254:	ab1e      	add	r3, sp, #120	@ 0x78
 800c256:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 800c25a:	f04f 0900 	mov.w	r9, #0
 800c25e:	2300      	movs	r3, #0
 800c260:	f50d 7a8c 	add.w	sl, sp, #280	@ 0x118
 800c264:	9a01      	ldr	r2, [sp, #4]
 800c266:	4591      	cmp	r9, r2
 800c268:	f340 809a 	ble.w	800c3a0 <__kernel_rem_pio2f+0x1a8>
 800c26c:	4613      	mov	r3, r2
 800c26e:	aa0a      	add	r2, sp, #40	@ 0x28
 800c270:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c274:	9308      	str	r3, [sp, #32]
 800c276:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 800c278:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c27c:	9c01      	ldr	r4, [sp, #4]
 800c27e:	9307      	str	r3, [sp, #28]
 800c280:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 800c284:	4646      	mov	r6, r8
 800c286:	4625      	mov	r5, r4
 800c288:	f04f 4987 	mov.w	r9, #1132462080	@ 0x43800000
 800c28c:	ab5a      	add	r3, sp, #360	@ 0x168
 800c28e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c292:	f853 bc50 	ldr.w	fp, [r3, #-80]
 800c296:	f50d 7a8c 	add.w	sl, sp, #280	@ 0x118
 800c29a:	2d00      	cmp	r5, #0
 800c29c:	f300 8085 	bgt.w	800c3aa <__kernel_rem_pio2f+0x1b2>
 800c2a0:	4639      	mov	r1, r7
 800c2a2:	4658      	mov	r0, fp
 800c2a4:	f7ff ff3e 	bl	800c124 <scalbnf>
 800c2a8:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 800c2ac:	4605      	mov	r5, r0
 800c2ae:	f7f4 f86d 	bl	800038c <__aeabi_fmul>
 800c2b2:	f000 fa3f 	bl	800c734 <floorf>
 800c2b6:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 800c2ba:	f7f4 f867 	bl	800038c <__aeabi_fmul>
 800c2be:	4601      	mov	r1, r0
 800c2c0:	4628      	mov	r0, r5
 800c2c2:	f7f3 ff59 	bl	8000178 <__aeabi_fsub>
 800c2c6:	4605      	mov	r5, r0
 800c2c8:	f7f4 fa3c 	bl	8000744 <__aeabi_f2iz>
 800c2cc:	4606      	mov	r6, r0
 800c2ce:	f7f4 f809 	bl	80002e4 <__aeabi_i2f>
 800c2d2:	4601      	mov	r1, r0
 800c2d4:	4628      	mov	r0, r5
 800c2d6:	f7f3 ff4f 	bl	8000178 <__aeabi_fsub>
 800c2da:	2f00      	cmp	r7, #0
 800c2dc:	4681      	mov	r9, r0
 800c2de:	f340 8081 	ble.w	800c3e4 <__kernel_rem_pio2f+0x1ec>
 800c2e2:	1e62      	subs	r2, r4, #1
 800c2e4:	ab0a      	add	r3, sp, #40	@ 0x28
 800c2e6:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800c2ea:	f1c7 0108 	rsb	r1, r7, #8
 800c2ee:	fa45 f301 	asr.w	r3, r5, r1
 800c2f2:	441e      	add	r6, r3
 800c2f4:	408b      	lsls	r3, r1
 800c2f6:	1aed      	subs	r5, r5, r3
 800c2f8:	ab0a      	add	r3, sp, #40	@ 0x28
 800c2fa:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800c2fe:	f1c7 0307 	rsb	r3, r7, #7
 800c302:	411d      	asrs	r5, r3
 800c304:	2d00      	cmp	r5, #0
 800c306:	dd7a      	ble.n	800c3fe <__kernel_rem_pio2f+0x206>
 800c308:	2200      	movs	r2, #0
 800c30a:	4692      	mov	sl, r2
 800c30c:	3601      	adds	r6, #1
 800c30e:	4294      	cmp	r4, r2
 800c310:	f300 80aa 	bgt.w	800c468 <__kernel_rem_pio2f+0x270>
 800c314:	2f00      	cmp	r7, #0
 800c316:	dd05      	ble.n	800c324 <__kernel_rem_pio2f+0x12c>
 800c318:	2f01      	cmp	r7, #1
 800c31a:	f000 80b6 	beq.w	800c48a <__kernel_rem_pio2f+0x292>
 800c31e:	2f02      	cmp	r7, #2
 800c320:	f000 80bd 	beq.w	800c49e <__kernel_rem_pio2f+0x2a6>
 800c324:	2d02      	cmp	r5, #2
 800c326:	d16a      	bne.n	800c3fe <__kernel_rem_pio2f+0x206>
 800c328:	4649      	mov	r1, r9
 800c32a:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800c32e:	f7f3 ff23 	bl	8000178 <__aeabi_fsub>
 800c332:	4681      	mov	r9, r0
 800c334:	f1ba 0f00 	cmp.w	sl, #0
 800c338:	d061      	beq.n	800c3fe <__kernel_rem_pio2f+0x206>
 800c33a:	4639      	mov	r1, r7
 800c33c:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800c340:	f7ff fef0 	bl	800c124 <scalbnf>
 800c344:	4601      	mov	r1, r0
 800c346:	4648      	mov	r0, r9
 800c348:	f7f3 ff16 	bl	8000178 <__aeabi_fsub>
 800c34c:	4681      	mov	r9, r0
 800c34e:	e056      	b.n	800c3fe <__kernel_rem_pio2f+0x206>
 800c350:	2400      	movs	r4, #0
 800c352:	e768      	b.n	800c226 <__kernel_rem_pio2f+0x2e>
 800c354:	eb18 0f05 	cmn.w	r8, r5
 800c358:	d407      	bmi.n	800c36a <__kernel_rem_pio2f+0x172>
 800c35a:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 800c35e:	f7f3 ffc1 	bl	80002e4 <__aeabi_i2f>
 800c362:	f846 0b04 	str.w	r0, [r6], #4
 800c366:	3501      	adds	r5, #1
 800c368:	e770      	b.n	800c24c <__kernel_rem_pio2f+0x54>
 800c36a:	4658      	mov	r0, fp
 800c36c:	e7f9      	b.n	800c362 <__kernel_rem_pio2f+0x16a>
 800c36e:	9307      	str	r3, [sp, #28]
 800c370:	9b05      	ldr	r3, [sp, #20]
 800c372:	f85b 1d04 	ldr.w	r1, [fp, #-4]!
 800c376:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800c37a:	f7f4 f807 	bl	800038c <__aeabi_fmul>
 800c37e:	4601      	mov	r1, r0
 800c380:	4630      	mov	r0, r6
 800c382:	f7f3 fefb 	bl	800017c <__addsf3>
 800c386:	4606      	mov	r6, r0
 800c388:	9b07      	ldr	r3, [sp, #28]
 800c38a:	f108 0801 	add.w	r8, r8, #1
 800c38e:	9a03      	ldr	r2, [sp, #12]
 800c390:	4590      	cmp	r8, r2
 800c392:	ddec      	ble.n	800c36e <__kernel_rem_pio2f+0x176>
 800c394:	f84a 6b04 	str.w	r6, [sl], #4
 800c398:	f109 0901 	add.w	r9, r9, #1
 800c39c:	3504      	adds	r5, #4
 800c39e:	e761      	b.n	800c264 <__kernel_rem_pio2f+0x6c>
 800c3a0:	46ab      	mov	fp, r5
 800c3a2:	461e      	mov	r6, r3
 800c3a4:	f04f 0800 	mov.w	r8, #0
 800c3a8:	e7f1      	b.n	800c38e <__kernel_rem_pio2f+0x196>
 800c3aa:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 800c3ae:	4658      	mov	r0, fp
 800c3b0:	f7f3 ffec 	bl	800038c <__aeabi_fmul>
 800c3b4:	f7f4 f9c6 	bl	8000744 <__aeabi_f2iz>
 800c3b8:	f7f3 ff94 	bl	80002e4 <__aeabi_i2f>
 800c3bc:	4649      	mov	r1, r9
 800c3be:	9009      	str	r0, [sp, #36]	@ 0x24
 800c3c0:	f7f3 ffe4 	bl	800038c <__aeabi_fmul>
 800c3c4:	4601      	mov	r1, r0
 800c3c6:	4658      	mov	r0, fp
 800c3c8:	f7f3 fed6 	bl	8000178 <__aeabi_fsub>
 800c3cc:	f7f4 f9ba 	bl	8000744 <__aeabi_f2iz>
 800c3d0:	3d01      	subs	r5, #1
 800c3d2:	f846 0b04 	str.w	r0, [r6], #4
 800c3d6:	f85a 1025 	ldr.w	r1, [sl, r5, lsl #2]
 800c3da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c3dc:	f7f3 fece 	bl	800017c <__addsf3>
 800c3e0:	4683      	mov	fp, r0
 800c3e2:	e75a      	b.n	800c29a <__kernel_rem_pio2f+0xa2>
 800c3e4:	d105      	bne.n	800c3f2 <__kernel_rem_pio2f+0x1fa>
 800c3e6:	1e63      	subs	r3, r4, #1
 800c3e8:	aa0a      	add	r2, sp, #40	@ 0x28
 800c3ea:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 800c3ee:	11ed      	asrs	r5, r5, #7
 800c3f0:	e788      	b.n	800c304 <__kernel_rem_pio2f+0x10c>
 800c3f2:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800c3f6:	f7f4 f97b 	bl	80006f0 <__aeabi_fcmpge>
 800c3fa:	4605      	mov	r5, r0
 800c3fc:	bb90      	cbnz	r0, 800c464 <__kernel_rem_pio2f+0x26c>
 800c3fe:	2100      	movs	r1, #0
 800c400:	4648      	mov	r0, r9
 800c402:	f7f4 f957 	bl	80006b4 <__aeabi_fcmpeq>
 800c406:	2800      	cmp	r0, #0
 800c408:	f000 8090 	beq.w	800c52c <__kernel_rem_pio2f+0x334>
 800c40c:	2200      	movs	r2, #0
 800c40e:	1e63      	subs	r3, r4, #1
 800c410:	9901      	ldr	r1, [sp, #4]
 800c412:	428b      	cmp	r3, r1
 800c414:	da4a      	bge.n	800c4ac <__kernel_rem_pio2f+0x2b4>
 800c416:	2a00      	cmp	r2, #0
 800c418:	d076      	beq.n	800c508 <__kernel_rem_pio2f+0x310>
 800c41a:	3c01      	subs	r4, #1
 800c41c:	ab0a      	add	r3, sp, #40	@ 0x28
 800c41e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800c422:	3f08      	subs	r7, #8
 800c424:	2b00      	cmp	r3, #0
 800c426:	d0f8      	beq.n	800c41a <__kernel_rem_pio2f+0x222>
 800c428:	4639      	mov	r1, r7
 800c42a:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800c42e:	f7ff fe79 	bl	800c124 <scalbnf>
 800c432:	46a2      	mov	sl, r4
 800c434:	4607      	mov	r7, r0
 800c436:	f04f 596e 	mov.w	r9, #998244352	@ 0x3b800000
 800c43a:	f50d 788c 	add.w	r8, sp, #280	@ 0x118
 800c43e:	f1ba 0f00 	cmp.w	sl, #0
 800c442:	f280 80a1 	bge.w	800c588 <__kernel_rem_pio2f+0x390>
 800c446:	4627      	mov	r7, r4
 800c448:	2200      	movs	r2, #0
 800c44a:	2f00      	cmp	r7, #0
 800c44c:	f2c0 80cb 	blt.w	800c5e6 <__kernel_rem_pio2f+0x3ee>
 800c450:	a946      	add	r1, sp, #280	@ 0x118
 800c452:	4690      	mov	r8, r2
 800c454:	f04f 0a00 	mov.w	sl, #0
 800c458:	4b18      	ldr	r3, [pc, #96]	@ (800c4bc <__kernel_rem_pio2f+0x2c4>)
 800c45a:	eb01 0b87 	add.w	fp, r1, r7, lsl #2
 800c45e:	eba4 0907 	sub.w	r9, r4, r7
 800c462:	e0b4      	b.n	800c5ce <__kernel_rem_pio2f+0x3d6>
 800c464:	2502      	movs	r5, #2
 800c466:	e74f      	b.n	800c308 <__kernel_rem_pio2f+0x110>
 800c468:	f858 3b04 	ldr.w	r3, [r8], #4
 800c46c:	f1ba 0f00 	cmp.w	sl, #0
 800c470:	d108      	bne.n	800c484 <__kernel_rem_pio2f+0x28c>
 800c472:	b123      	cbz	r3, 800c47e <__kernel_rem_pio2f+0x286>
 800c474:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800c478:	f848 3c04 	str.w	r3, [r8, #-4]
 800c47c:	2301      	movs	r3, #1
 800c47e:	469a      	mov	sl, r3
 800c480:	3201      	adds	r2, #1
 800c482:	e744      	b.n	800c30e <__kernel_rem_pio2f+0x116>
 800c484:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 800c488:	e7f6      	b.n	800c478 <__kernel_rem_pio2f+0x280>
 800c48a:	1e62      	subs	r2, r4, #1
 800c48c:	ab0a      	add	r3, sp, #40	@ 0x28
 800c48e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c492:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c496:	a90a      	add	r1, sp, #40	@ 0x28
 800c498:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c49c:	e742      	b.n	800c324 <__kernel_rem_pio2f+0x12c>
 800c49e:	1e62      	subs	r2, r4, #1
 800c4a0:	ab0a      	add	r3, sp, #40	@ 0x28
 800c4a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4a6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c4aa:	e7f4      	b.n	800c496 <__kernel_rem_pio2f+0x29e>
 800c4ac:	a90a      	add	r1, sp, #40	@ 0x28
 800c4ae:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c4b2:	3b01      	subs	r3, #1
 800c4b4:	430a      	orrs	r2, r1
 800c4b6:	e7ab      	b.n	800c410 <__kernel_rem_pio2f+0x218>
 800c4b8:	0800d25c 	.word	0x0800d25c
 800c4bc:	0800d230 	.word	0x0800d230
 800c4c0:	3301      	adds	r3, #1
 800c4c2:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800c4c6:	2900      	cmp	r1, #0
 800c4c8:	d0fa      	beq.n	800c4c0 <__kernel_rem_pio2f+0x2c8>
 800c4ca:	9a04      	ldr	r2, [sp, #16]
 800c4cc:	a91e      	add	r1, sp, #120	@ 0x78
 800c4ce:	18a2      	adds	r2, r4, r2
 800c4d0:	1c66      	adds	r6, r4, #1
 800c4d2:	eb01 0582 	add.w	r5, r1, r2, lsl #2
 800c4d6:	441c      	add	r4, r3
 800c4d8:	f50d 798c 	add.w	r9, sp, #280	@ 0x118
 800c4dc:	42b4      	cmp	r4, r6
 800c4de:	f6ff aecf 	blt.w	800c280 <__kernel_rem_pio2f+0x88>
 800c4e2:	9b07      	ldr	r3, [sp, #28]
 800c4e4:	46ab      	mov	fp, r5
 800c4e6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c4ea:	f7f3 fefb 	bl	80002e4 <__aeabi_i2f>
 800c4ee:	f04f 0a00 	mov.w	sl, #0
 800c4f2:	f04f 0800 	mov.w	r8, #0
 800c4f6:	6028      	str	r0, [r5, #0]
 800c4f8:	9b03      	ldr	r3, [sp, #12]
 800c4fa:	459a      	cmp	sl, r3
 800c4fc:	dd07      	ble.n	800c50e <__kernel_rem_pio2f+0x316>
 800c4fe:	f849 8026 	str.w	r8, [r9, r6, lsl #2]
 800c502:	3504      	adds	r5, #4
 800c504:	3601      	adds	r6, #1
 800c506:	e7e9      	b.n	800c4dc <__kernel_rem_pio2f+0x2e4>
 800c508:	2301      	movs	r3, #1
 800c50a:	9a08      	ldr	r2, [sp, #32]
 800c50c:	e7d9      	b.n	800c4c2 <__kernel_rem_pio2f+0x2ca>
 800c50e:	9b05      	ldr	r3, [sp, #20]
 800c510:	f85b 0904 	ldr.w	r0, [fp], #-4
 800c514:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 800c518:	f7f3 ff38 	bl	800038c <__aeabi_fmul>
 800c51c:	4601      	mov	r1, r0
 800c51e:	4640      	mov	r0, r8
 800c520:	f7f3 fe2c 	bl	800017c <__addsf3>
 800c524:	f10a 0a01 	add.w	sl, sl, #1
 800c528:	4680      	mov	r8, r0
 800c52a:	e7e5      	b.n	800c4f8 <__kernel_rem_pio2f+0x300>
 800c52c:	9b06      	ldr	r3, [sp, #24]
 800c52e:	9a02      	ldr	r2, [sp, #8]
 800c530:	4648      	mov	r0, r9
 800c532:	1a99      	subs	r1, r3, r2
 800c534:	f7ff fdf6 	bl	800c124 <scalbnf>
 800c538:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800c53c:	4680      	mov	r8, r0
 800c53e:	f7f4 f8d7 	bl	80006f0 <__aeabi_fcmpge>
 800c542:	b1f8      	cbz	r0, 800c584 <__kernel_rem_pio2f+0x38c>
 800c544:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 800c548:	4640      	mov	r0, r8
 800c54a:	f7f3 ff1f 	bl	800038c <__aeabi_fmul>
 800c54e:	f7f4 f8f9 	bl	8000744 <__aeabi_f2iz>
 800c552:	f7f3 fec7 	bl	80002e4 <__aeabi_i2f>
 800c556:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800c55a:	4681      	mov	r9, r0
 800c55c:	f7f3 ff16 	bl	800038c <__aeabi_fmul>
 800c560:	4601      	mov	r1, r0
 800c562:	4640      	mov	r0, r8
 800c564:	f7f3 fe08 	bl	8000178 <__aeabi_fsub>
 800c568:	f7f4 f8ec 	bl	8000744 <__aeabi_f2iz>
 800c56c:	ab0a      	add	r3, sp, #40	@ 0x28
 800c56e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c572:	4648      	mov	r0, r9
 800c574:	3401      	adds	r4, #1
 800c576:	3708      	adds	r7, #8
 800c578:	f7f4 f8e4 	bl	8000744 <__aeabi_f2iz>
 800c57c:	ab0a      	add	r3, sp, #40	@ 0x28
 800c57e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c582:	e751      	b.n	800c428 <__kernel_rem_pio2f+0x230>
 800c584:	4640      	mov	r0, r8
 800c586:	e7f7      	b.n	800c578 <__kernel_rem_pio2f+0x380>
 800c588:	ab0a      	add	r3, sp, #40	@ 0x28
 800c58a:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800c58e:	f7f3 fea9 	bl	80002e4 <__aeabi_i2f>
 800c592:	4639      	mov	r1, r7
 800c594:	f7f3 fefa 	bl	800038c <__aeabi_fmul>
 800c598:	4649      	mov	r1, r9
 800c59a:	f848 002a 	str.w	r0, [r8, sl, lsl #2]
 800c59e:	4638      	mov	r0, r7
 800c5a0:	f7f3 fef4 	bl	800038c <__aeabi_fmul>
 800c5a4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c5a8:	4607      	mov	r7, r0
 800c5aa:	e748      	b.n	800c43e <__kernel_rem_pio2f+0x246>
 800c5ac:	f853 0b04 	ldr.w	r0, [r3], #4
 800c5b0:	f85b 1b04 	ldr.w	r1, [fp], #4
 800c5b4:	9203      	str	r2, [sp, #12]
 800c5b6:	9302      	str	r3, [sp, #8]
 800c5b8:	f7f3 fee8 	bl	800038c <__aeabi_fmul>
 800c5bc:	4601      	mov	r1, r0
 800c5be:	4640      	mov	r0, r8
 800c5c0:	f7f3 fddc 	bl	800017c <__addsf3>
 800c5c4:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c5c8:	4680      	mov	r8, r0
 800c5ca:	f10a 0a01 	add.w	sl, sl, #1
 800c5ce:	9901      	ldr	r1, [sp, #4]
 800c5d0:	458a      	cmp	sl, r1
 800c5d2:	dc01      	bgt.n	800c5d8 <__kernel_rem_pio2f+0x3e0>
 800c5d4:	45ca      	cmp	sl, r9
 800c5d6:	dde9      	ble.n	800c5ac <__kernel_rem_pio2f+0x3b4>
 800c5d8:	ab5a      	add	r3, sp, #360	@ 0x168
 800c5da:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 800c5de:	f849 8ca0 	str.w	r8, [r9, #-160]
 800c5e2:	3f01      	subs	r7, #1
 800c5e4:	e731      	b.n	800c44a <__kernel_rem_pio2f+0x252>
 800c5e6:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800c5e8:	2b02      	cmp	r3, #2
 800c5ea:	dc07      	bgt.n	800c5fc <__kernel_rem_pio2f+0x404>
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	dc4e      	bgt.n	800c68e <__kernel_rem_pio2f+0x496>
 800c5f0:	d02e      	beq.n	800c650 <__kernel_rem_pio2f+0x458>
 800c5f2:	f006 0007 	and.w	r0, r6, #7
 800c5f6:	b05b      	add	sp, #364	@ 0x16c
 800c5f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5fc:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800c5fe:	2b03      	cmp	r3, #3
 800c600:	d1f7      	bne.n	800c5f2 <__kernel_rem_pio2f+0x3fa>
 800c602:	f10d 0bc8 	add.w	fp, sp, #200	@ 0xc8
 800c606:	eb0b 0784 	add.w	r7, fp, r4, lsl #2
 800c60a:	46b8      	mov	r8, r7
 800c60c:	46a2      	mov	sl, r4
 800c60e:	f1ba 0f00 	cmp.w	sl, #0
 800c612:	dc49      	bgt.n	800c6a8 <__kernel_rem_pio2f+0x4b0>
 800c614:	46a1      	mov	r9, r4
 800c616:	f1b9 0f01 	cmp.w	r9, #1
 800c61a:	dc60      	bgt.n	800c6de <__kernel_rem_pio2f+0x4e6>
 800c61c:	2000      	movs	r0, #0
 800c61e:	2c01      	cmp	r4, #1
 800c620:	dc76      	bgt.n	800c710 <__kernel_rem_pio2f+0x518>
 800c622:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 800c624:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 800c626:	2d00      	cmp	r5, #0
 800c628:	d178      	bne.n	800c71c <__kernel_rem_pio2f+0x524>
 800c62a:	9900      	ldr	r1, [sp, #0]
 800c62c:	600a      	str	r2, [r1, #0]
 800c62e:	460a      	mov	r2, r1
 800c630:	604b      	str	r3, [r1, #4]
 800c632:	6090      	str	r0, [r2, #8]
 800c634:	e7dd      	b.n	800c5f2 <__kernel_rem_pio2f+0x3fa>
 800c636:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 800c63a:	f7f3 fd9f 	bl	800017c <__addsf3>
 800c63e:	3c01      	subs	r4, #1
 800c640:	2c00      	cmp	r4, #0
 800c642:	daf8      	bge.n	800c636 <__kernel_rem_pio2f+0x43e>
 800c644:	b10d      	cbz	r5, 800c64a <__kernel_rem_pio2f+0x452>
 800c646:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800c64a:	9b00      	ldr	r3, [sp, #0]
 800c64c:	6018      	str	r0, [r3, #0]
 800c64e:	e7d0      	b.n	800c5f2 <__kernel_rem_pio2f+0x3fa>
 800c650:	2000      	movs	r0, #0
 800c652:	af32      	add	r7, sp, #200	@ 0xc8
 800c654:	e7f4      	b.n	800c640 <__kernel_rem_pio2f+0x448>
 800c656:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 800c65a:	f7f3 fd8f 	bl	800017c <__addsf3>
 800c65e:	f108 38ff 	add.w	r8, r8, #4294967295
 800c662:	f1b8 0f00 	cmp.w	r8, #0
 800c666:	daf6      	bge.n	800c656 <__kernel_rem_pio2f+0x45e>
 800c668:	b1ad      	cbz	r5, 800c696 <__kernel_rem_pio2f+0x49e>
 800c66a:	f100 4300 	add.w	r3, r0, #2147483648	@ 0x80000000
 800c66e:	9a00      	ldr	r2, [sp, #0]
 800c670:	4601      	mov	r1, r0
 800c672:	6013      	str	r3, [r2, #0]
 800c674:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 800c676:	f7f3 fd7f 	bl	8000178 <__aeabi_fsub>
 800c67a:	f04f 0801 	mov.w	r8, #1
 800c67e:	4544      	cmp	r4, r8
 800c680:	da0b      	bge.n	800c69a <__kernel_rem_pio2f+0x4a2>
 800c682:	b10d      	cbz	r5, 800c688 <__kernel_rem_pio2f+0x490>
 800c684:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800c688:	9b00      	ldr	r3, [sp, #0]
 800c68a:	6058      	str	r0, [r3, #4]
 800c68c:	e7b1      	b.n	800c5f2 <__kernel_rem_pio2f+0x3fa>
 800c68e:	46a0      	mov	r8, r4
 800c690:	2000      	movs	r0, #0
 800c692:	af32      	add	r7, sp, #200	@ 0xc8
 800c694:	e7e5      	b.n	800c662 <__kernel_rem_pio2f+0x46a>
 800c696:	4603      	mov	r3, r0
 800c698:	e7e9      	b.n	800c66e <__kernel_rem_pio2f+0x476>
 800c69a:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800c69e:	f7f3 fd6d 	bl	800017c <__addsf3>
 800c6a2:	f108 0801 	add.w	r8, r8, #1
 800c6a6:	e7ea      	b.n	800c67e <__kernel_rem_pio2f+0x486>
 800c6a8:	f8d8 3000 	ldr.w	r3, [r8]
 800c6ac:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800c6b0:	4619      	mov	r1, r3
 800c6b2:	4610      	mov	r0, r2
 800c6b4:	9302      	str	r3, [sp, #8]
 800c6b6:	9201      	str	r2, [sp, #4]
 800c6b8:	f7f3 fd60 	bl	800017c <__addsf3>
 800c6bc:	9a01      	ldr	r2, [sp, #4]
 800c6be:	4601      	mov	r1, r0
 800c6c0:	4681      	mov	r9, r0
 800c6c2:	4610      	mov	r0, r2
 800c6c4:	f7f3 fd58 	bl	8000178 <__aeabi_fsub>
 800c6c8:	9b02      	ldr	r3, [sp, #8]
 800c6ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c6ce:	4619      	mov	r1, r3
 800c6d0:	f7f3 fd54 	bl	800017c <__addsf3>
 800c6d4:	f848 0904 	str.w	r0, [r8], #-4
 800c6d8:	f8c8 9000 	str.w	r9, [r8]
 800c6dc:	e797      	b.n	800c60e <__kernel_rem_pio2f+0x416>
 800c6de:	f857 3c04 	ldr.w	r3, [r7, #-4]
 800c6e2:	f8d7 a000 	ldr.w	sl, [r7]
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	4651      	mov	r1, sl
 800c6ea:	9301      	str	r3, [sp, #4]
 800c6ec:	f7f3 fd46 	bl	800017c <__addsf3>
 800c6f0:	9b01      	ldr	r3, [sp, #4]
 800c6f2:	4601      	mov	r1, r0
 800c6f4:	4680      	mov	r8, r0
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	f7f3 fd3e 	bl	8000178 <__aeabi_fsub>
 800c6fc:	4651      	mov	r1, sl
 800c6fe:	f7f3 fd3d 	bl	800017c <__addsf3>
 800c702:	f847 0904 	str.w	r0, [r7], #-4
 800c706:	f109 39ff 	add.w	r9, r9, #4294967295
 800c70a:	f8c7 8000 	str.w	r8, [r7]
 800c70e:	e782      	b.n	800c616 <__kernel_rem_pio2f+0x41e>
 800c710:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 800c714:	f7f3 fd32 	bl	800017c <__addsf3>
 800c718:	3c01      	subs	r4, #1
 800c71a:	e780      	b.n	800c61e <__kernel_rem_pio2f+0x426>
 800c71c:	9900      	ldr	r1, [sp, #0]
 800c71e:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 800c722:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800c726:	600a      	str	r2, [r1, #0]
 800c728:	604b      	str	r3, [r1, #4]
 800c72a:	460a      	mov	r2, r1
 800c72c:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800c730:	e77f      	b.n	800c632 <__kernel_rem_pio2f+0x43a>
 800c732:	bf00      	nop

0800c734 <floorf>:
 800c734:	b570      	push	{r4, r5, r6, lr}
 800c736:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 800c73a:	3d7f      	subs	r5, #127	@ 0x7f
 800c73c:	2d16      	cmp	r5, #22
 800c73e:	4601      	mov	r1, r0
 800c740:	4604      	mov	r4, r0
 800c742:	f020 4600 	bic.w	r6, r0, #2147483648	@ 0x80000000
 800c746:	dc26      	bgt.n	800c796 <floorf+0x62>
 800c748:	2d00      	cmp	r5, #0
 800c74a:	da0f      	bge.n	800c76c <floorf+0x38>
 800c74c:	4917      	ldr	r1, [pc, #92]	@ (800c7ac <floorf+0x78>)
 800c74e:	f7f3 fd15 	bl	800017c <__addsf3>
 800c752:	2100      	movs	r1, #0
 800c754:	f7f3 ffd6 	bl	8000704 <__aeabi_fcmpgt>
 800c758:	b130      	cbz	r0, 800c768 <floorf+0x34>
 800c75a:	2c00      	cmp	r4, #0
 800c75c:	da23      	bge.n	800c7a6 <floorf+0x72>
 800c75e:	2e00      	cmp	r6, #0
 800c760:	4c13      	ldr	r4, [pc, #76]	@ (800c7b0 <floorf+0x7c>)
 800c762:	bf08      	it	eq
 800c764:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800c768:	4621      	mov	r1, r4
 800c76a:	e01a      	b.n	800c7a2 <floorf+0x6e>
 800c76c:	4e11      	ldr	r6, [pc, #68]	@ (800c7b4 <floorf+0x80>)
 800c76e:	412e      	asrs	r6, r5
 800c770:	4230      	tst	r0, r6
 800c772:	d016      	beq.n	800c7a2 <floorf+0x6e>
 800c774:	490d      	ldr	r1, [pc, #52]	@ (800c7ac <floorf+0x78>)
 800c776:	f7f3 fd01 	bl	800017c <__addsf3>
 800c77a:	2100      	movs	r1, #0
 800c77c:	f7f3 ffc2 	bl	8000704 <__aeabi_fcmpgt>
 800c780:	2800      	cmp	r0, #0
 800c782:	d0f1      	beq.n	800c768 <floorf+0x34>
 800c784:	2c00      	cmp	r4, #0
 800c786:	bfbe      	ittt	lt
 800c788:	f44f 0300 	movlt.w	r3, #8388608	@ 0x800000
 800c78c:	412b      	asrlt	r3, r5
 800c78e:	18e4      	addlt	r4, r4, r3
 800c790:	ea24 0406 	bic.w	r4, r4, r6
 800c794:	e7e8      	b.n	800c768 <floorf+0x34>
 800c796:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 800c79a:	d302      	bcc.n	800c7a2 <floorf+0x6e>
 800c79c:	f7f3 fcee 	bl	800017c <__addsf3>
 800c7a0:	4601      	mov	r1, r0
 800c7a2:	4608      	mov	r0, r1
 800c7a4:	bd70      	pop	{r4, r5, r6, pc}
 800c7a6:	2400      	movs	r4, #0
 800c7a8:	e7de      	b.n	800c768 <floorf+0x34>
 800c7aa:	bf00      	nop
 800c7ac:	7149f2ca 	.word	0x7149f2ca
 800c7b0:	bf800000 	.word	0xbf800000
 800c7b4:	007fffff 	.word	0x007fffff

0800c7b8 <_init>:
 800c7b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7ba:	bf00      	nop
 800c7bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7be:	bc08      	pop	{r3}
 800c7c0:	469e      	mov	lr, r3
 800c7c2:	4770      	bx	lr

0800c7c4 <_fini>:
 800c7c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7c6:	bf00      	nop
 800c7c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7ca:	bc08      	pop	{r3}
 800c7cc:	469e      	mov	lr, r3
 800c7ce:	4770      	bx	lr
