
STM32PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000489c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  080049a8  080049a8  000059a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004dc4  08004dc4  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004dc4  08004dc4  0000605c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004dc4  08004dc4  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004dc4  08004dc4  00005dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004dc8  08004dc8  00005dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004dcc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009e4  2000005c  08004e28  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a40  08004e28  00006a40  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006fb5  00000000  00000000  00006085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018a9  00000000  00000000  0000d03a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008a8  00000000  00000000  0000e8e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006ee  00000000  00000000  0000f190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017806  00000000  00000000  0000f87e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b4de  00000000  00000000  00027084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082edc  00000000  00000000  00032562  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b543e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002928  00000000  00000000  000b5484  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000b7dac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004990 	.word	0x08004990

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08004990 	.word	0x08004990

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	@ 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ba:	2afd      	cmp	r2, #253	@ 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	@ 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	@ 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	@ 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_fcmpun>:
 80006f4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006f8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80006fc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000700:	d102      	bne.n	8000708 <__aeabi_fcmpun+0x14>
 8000702:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000706:	d108      	bne.n	800071a <__aeabi_fcmpun+0x26>
 8000708:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800070c:	d102      	bne.n	8000714 <__aeabi_fcmpun+0x20>
 800070e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000712:	d102      	bne.n	800071a <__aeabi_fcmpun+0x26>
 8000714:	f04f 0000 	mov.w	r0, #0
 8000718:	4770      	bx	lr
 800071a:	f04f 0001 	mov.w	r0, #1
 800071e:	4770      	bx	lr

08000720 <__aeabi_f2iz>:
 8000720:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000724:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000728:	d30f      	bcc.n	800074a <__aeabi_f2iz+0x2a>
 800072a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800072e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000732:	d90d      	bls.n	8000750 <__aeabi_f2iz+0x30>
 8000734:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000738:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800073c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000740:	fa23 f002 	lsr.w	r0, r3, r2
 8000744:	bf18      	it	ne
 8000746:	4240      	negne	r0, r0
 8000748:	4770      	bx	lr
 800074a:	f04f 0000 	mov.w	r0, #0
 800074e:	4770      	bx	lr
 8000750:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000754:	d101      	bne.n	800075a <__aeabi_f2iz+0x3a>
 8000756:	0242      	lsls	r2, r0, #9
 8000758:	d105      	bne.n	8000766 <__aeabi_f2iz+0x46>
 800075a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800075e:	bf08      	it	eq
 8000760:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000764:	4770      	bx	lr
 8000766:	f04f 0000 	mov.w	r0, #0
 800076a:	4770      	bx	lr

0800076c <__aeabi_f2uiz>:
 800076c:	0042      	lsls	r2, r0, #1
 800076e:	d20e      	bcs.n	800078e <__aeabi_f2uiz+0x22>
 8000770:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000774:	d30b      	bcc.n	800078e <__aeabi_f2uiz+0x22>
 8000776:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800077a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800077e:	d409      	bmi.n	8000794 <__aeabi_f2uiz+0x28>
 8000780:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000784:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000788:	fa23 f002 	lsr.w	r0, r3, r2
 800078c:	4770      	bx	lr
 800078e:	f04f 0000 	mov.w	r0, #0
 8000792:	4770      	bx	lr
 8000794:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000798:	d101      	bne.n	800079e <__aeabi_f2uiz+0x32>
 800079a:	0242      	lsls	r2, r0, #9
 800079c:	d102      	bne.n	80007a4 <__aeabi_f2uiz+0x38>
 800079e:	f04f 30ff 	mov.w	r0, #4294967295
 80007a2:	4770      	bx	lr
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop

080007ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b088      	sub	sp, #32
 80007b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b2:	f107 0310 	add.w	r3, r7, #16
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c0:	4b1e      	ldr	r3, [pc, #120]	@ (800083c <MX_GPIO_Init+0x90>)
 80007c2:	699b      	ldr	r3, [r3, #24]
 80007c4:	4a1d      	ldr	r2, [pc, #116]	@ (800083c <MX_GPIO_Init+0x90>)
 80007c6:	f043 0310 	orr.w	r3, r3, #16
 80007ca:	6193      	str	r3, [r2, #24]
 80007cc:	4b1b      	ldr	r3, [pc, #108]	@ (800083c <MX_GPIO_Init+0x90>)
 80007ce:	699b      	ldr	r3, [r3, #24]
 80007d0:	f003 0310 	and.w	r3, r3, #16
 80007d4:	60fb      	str	r3, [r7, #12]
 80007d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d8:	4b18      	ldr	r3, [pc, #96]	@ (800083c <MX_GPIO_Init+0x90>)
 80007da:	699b      	ldr	r3, [r3, #24]
 80007dc:	4a17      	ldr	r2, [pc, #92]	@ (800083c <MX_GPIO_Init+0x90>)
 80007de:	f043 0304 	orr.w	r3, r3, #4
 80007e2:	6193      	str	r3, [r2, #24]
 80007e4:	4b15      	ldr	r3, [pc, #84]	@ (800083c <MX_GPIO_Init+0x90>)
 80007e6:	699b      	ldr	r3, [r3, #24]
 80007e8:	f003 0304 	and.w	r3, r3, #4
 80007ec:	60bb      	str	r3, [r7, #8]
 80007ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f0:	4b12      	ldr	r3, [pc, #72]	@ (800083c <MX_GPIO_Init+0x90>)
 80007f2:	699b      	ldr	r3, [r3, #24]
 80007f4:	4a11      	ldr	r2, [pc, #68]	@ (800083c <MX_GPIO_Init+0x90>)
 80007f6:	f043 0308 	orr.w	r3, r3, #8
 80007fa:	6193      	str	r3, [r2, #24]
 80007fc:	4b0f      	ldr	r3, [pc, #60]	@ (800083c <MX_GPIO_Init+0x90>)
 80007fe:	699b      	ldr	r3, [r3, #24]
 8000800:	f003 0308 	and.w	r3, r3, #8
 8000804:	607b      	str	r3, [r7, #4]
 8000806:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000808:	2200      	movs	r2, #0
 800080a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800080e:	480c      	ldr	r0, [pc, #48]	@ (8000840 <MX_GPIO_Init+0x94>)
 8000810:	f001 fd72 	bl	80022f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000814:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000818:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081a:	2301      	movs	r3, #1
 800081c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000822:	2302      	movs	r3, #2
 8000824:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000826:	f107 0310 	add.w	r3, r7, #16
 800082a:	4619      	mov	r1, r3
 800082c:	4804      	ldr	r0, [pc, #16]	@ (8000840 <MX_GPIO_Init+0x94>)
 800082e:	f001 fbdf 	bl	8001ff0 <HAL_GPIO_Init>

}
 8000832:	bf00      	nop
 8000834:	3720      	adds	r7, #32
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40021000 	.word	0x40021000
 8000840:	40011000 	.word	0x40011000

08000844 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000848:	4b12      	ldr	r3, [pc, #72]	@ (8000894 <MX_I2C1_Init+0x50>)
 800084a:	4a13      	ldr	r2, [pc, #76]	@ (8000898 <MX_I2C1_Init+0x54>)
 800084c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800084e:	4b11      	ldr	r3, [pc, #68]	@ (8000894 <MX_I2C1_Init+0x50>)
 8000850:	4a12      	ldr	r2, [pc, #72]	@ (800089c <MX_I2C1_Init+0x58>)
 8000852:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000854:	4b0f      	ldr	r3, [pc, #60]	@ (8000894 <MX_I2C1_Init+0x50>)
 8000856:	2200      	movs	r2, #0
 8000858:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800085a:	4b0e      	ldr	r3, [pc, #56]	@ (8000894 <MX_I2C1_Init+0x50>)
 800085c:	2200      	movs	r2, #0
 800085e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000860:	4b0c      	ldr	r3, [pc, #48]	@ (8000894 <MX_I2C1_Init+0x50>)
 8000862:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000866:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000868:	4b0a      	ldr	r3, [pc, #40]	@ (8000894 <MX_I2C1_Init+0x50>)
 800086a:	2200      	movs	r2, #0
 800086c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800086e:	4b09      	ldr	r3, [pc, #36]	@ (8000894 <MX_I2C1_Init+0x50>)
 8000870:	2200      	movs	r2, #0
 8000872:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000874:	4b07      	ldr	r3, [pc, #28]	@ (8000894 <MX_I2C1_Init+0x50>)
 8000876:	2200      	movs	r2, #0
 8000878:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800087a:	4b06      	ldr	r3, [pc, #24]	@ (8000894 <MX_I2C1_Init+0x50>)
 800087c:	2200      	movs	r2, #0
 800087e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000880:	4804      	ldr	r0, [pc, #16]	@ (8000894 <MX_I2C1_Init+0x50>)
 8000882:	f001 fd51 	bl	8002328 <HAL_I2C_Init>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800088c:	f000 f89b 	bl	80009c6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000890:	bf00      	nop
 8000892:	bd80      	pop	{r7, pc}
 8000894:	20000078 	.word	0x20000078
 8000898:	40005400 	.word	0x40005400
 800089c:	00061a80 	.word	0x00061a80

080008a0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b088      	sub	sp, #32
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a8:	f107 0310 	add.w	r3, r7, #16
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4a15      	ldr	r2, [pc, #84]	@ (8000910 <HAL_I2C_MspInit+0x70>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d123      	bne.n	8000908 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c0:	4b14      	ldr	r3, [pc, #80]	@ (8000914 <HAL_I2C_MspInit+0x74>)
 80008c2:	699b      	ldr	r3, [r3, #24]
 80008c4:	4a13      	ldr	r2, [pc, #76]	@ (8000914 <HAL_I2C_MspInit+0x74>)
 80008c6:	f043 0308 	orr.w	r3, r3, #8
 80008ca:	6193      	str	r3, [r2, #24]
 80008cc:	4b11      	ldr	r3, [pc, #68]	@ (8000914 <HAL_I2C_MspInit+0x74>)
 80008ce:	699b      	ldr	r3, [r3, #24]
 80008d0:	f003 0308 	and.w	r3, r3, #8
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008d8:	23c0      	movs	r3, #192	@ 0xc0
 80008da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008dc:	2312      	movs	r3, #18
 80008de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008e0:	2303      	movs	r3, #3
 80008e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e4:	f107 0310 	add.w	r3, r7, #16
 80008e8:	4619      	mov	r1, r3
 80008ea:	480b      	ldr	r0, [pc, #44]	@ (8000918 <HAL_I2C_MspInit+0x78>)
 80008ec:	f001 fb80 	bl	8001ff0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008f0:	4b08      	ldr	r3, [pc, #32]	@ (8000914 <HAL_I2C_MspInit+0x74>)
 80008f2:	69db      	ldr	r3, [r3, #28]
 80008f4:	4a07      	ldr	r2, [pc, #28]	@ (8000914 <HAL_I2C_MspInit+0x74>)
 80008f6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80008fa:	61d3      	str	r3, [r2, #28]
 80008fc:	4b05      	ldr	r3, [pc, #20]	@ (8000914 <HAL_I2C_MspInit+0x74>)
 80008fe:	69db      	ldr	r3, [r3, #28]
 8000900:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000904:	60bb      	str	r3, [r7, #8]
 8000906:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000908:	bf00      	nop
 800090a:	3720      	adds	r7, #32
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40005400 	.word	0x40005400
 8000914:	40021000 	.word	0x40021000
 8000918:	40010c00 	.word	0x40010c00

0800091c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000920:	f001 f9fc 	bl	8001d1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000924:	f000 f814 	bl	8000950 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000928:	f7ff ff40 	bl	80007ac <MX_GPIO_Init>
  MX_I2C1_Init();
 800092c:	f7ff ff8a 	bl	8000844 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init(); // 初始化OLED
 8000930:	f000 f94e 	bl	8000bd0 <OLED_Init>
  OLED_InitBuffer(); // 初始化双缓冲
 8000934:	f000 f84e 	bl	80009d4 <OLED_InitBuffer>
  OLED_ClearBuffer(); // 清空缓冲区
 8000938:	f000 f860 	bl	80009fc <OLED_ClearBuffer>

  InitBlockAnimation(); // 初始化方块动画
 800093c:	f001 f88a 	bl	8001a54 <InitBlockAnimation>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {    
    OLED_ClearBuffer();
 8000940:	f000 f85c 	bl	80009fc <OLED_ClearBuffer>

    // OLED_DrawTitleBar("STM32 OLED Demo"); // 绘制标题栏

    AnimationLoop(); // 执行动画循环
 8000944:	f001 f8da 	bl	8001afc <AnimationLoop>

    OLED_UpdateDisplayVSync(); // 更新显示
 8000948:	f000 f884 	bl	8000a54 <OLED_UpdateDisplayVSync>
    OLED_ClearBuffer();
 800094c:	bf00      	nop
 800094e:	e7f7      	b.n	8000940 <main+0x24>

08000950 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b090      	sub	sp, #64	@ 0x40
 8000954:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000956:	f107 0318 	add.w	r3, r7, #24
 800095a:	2228      	movs	r2, #40	@ 0x28
 800095c:	2100      	movs	r1, #0
 800095e:	4618      	mov	r0, r3
 8000960:	f002 fd7a 	bl	8003458 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000964:	1d3b      	adds	r3, r7, #4
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	609a      	str	r2, [r3, #8]
 800096e:	60da      	str	r2, [r3, #12]
 8000970:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000972:	2302      	movs	r3, #2
 8000974:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000976:	2301      	movs	r3, #1
 8000978:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800097a:	2310      	movs	r3, #16
 800097c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800097e:	2300      	movs	r3, #0
 8000980:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000982:	f107 0318 	add.w	r3, r7, #24
 8000986:	4618      	mov	r0, r3
 8000988:	f002 f96a 	bl	8002c60 <HAL_RCC_OscConfig>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000992:	f000 f818 	bl	80009c6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000996:	230f      	movs	r3, #15
 8000998:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800099a:	2300      	movs	r3, #0
 800099c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800099e:	2300      	movs	r3, #0
 80009a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009a2:	2300      	movs	r3, #0
 80009a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009a6:	2300      	movs	r3, #0
 80009a8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009aa:	1d3b      	adds	r3, r7, #4
 80009ac:	2100      	movs	r1, #0
 80009ae:	4618      	mov	r0, r3
 80009b0:	f002 fbd8 	bl	8003164 <HAL_RCC_ClockConfig>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80009ba:	f000 f804 	bl	80009c6 <Error_Handler>
  }
}
 80009be:	bf00      	nop
 80009c0:	3740      	adds	r7, #64	@ 0x40
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c6:	b480      	push	{r7}
 80009c8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009ca:	b672      	cpsid	i
}
 80009cc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ce:	bf00      	nop
 80009d0:	e7fd      	b.n	80009ce <Error_Handler+0x8>
	...

080009d4 <OLED_InitBuffer>:
    0x44, 0x64, 0x54, 0x4C, 0x44, 0x00  // z (122)
};

// 初始化缓冲区
void OLED_InitBuffer(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
    // 清空缓冲区
    memset(OLED_BackBuffer, 0, sizeof(OLED_BackBuffer));
 80009d8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80009dc:	2100      	movs	r1, #0
 80009de:	4805      	ldr	r0, [pc, #20]	@ (80009f4 <OLED_InitBuffer+0x20>)
 80009e0:	f002 fd3a 	bl	8003458 <memset>
    memset(OLED_FrontBuffer, 0, sizeof(OLED_FrontBuffer));
 80009e4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80009e8:	2100      	movs	r1, #0
 80009ea:	4803      	ldr	r0, [pc, #12]	@ (80009f8 <OLED_InitBuffer+0x24>)
 80009ec:	f002 fd34 	bl	8003458 <memset>
}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	200000d4 	.word	0x200000d4
 80009f8:	200004d4 	.word	0x200004d4

080009fc <OLED_ClearBuffer>:

// 清空缓冲区
void OLED_ClearBuffer(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
    // 重置缓冲区为全0 (全黑)
    memset(OLED_BackBuffer, 0, sizeof(OLED_BackBuffer));
 8000a00:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a04:	2100      	movs	r1, #0
 8000a06:	4802      	ldr	r0, [pc, #8]	@ (8000a10 <OLED_ClearBuffer+0x14>)
 8000a08:	f002 fd26 	bl	8003458 <memset>
}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	200000d4 	.word	0x200000d4

08000a14 <OLED_IsBusy>:

uint8_t OLED_IsBusy(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
    // 如果标记为忙，检查是否已经过了足够时间
    if (oled_update_flag)
 8000a1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a4c <OLED_IsBusy+0x38>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d00b      	beq.n	8000a3c <OLED_IsBusy+0x28>
    {
        // SSD1315/SSD1306 典型帧率约为60Hz，每帧约16.7ms
        uint32_t current_time = HAL_GetTick();
 8000a24:	f001 f9d2 	bl	8001dcc <HAL_GetTick>
 8000a28:	6078      	str	r0, [r7, #4]
        if (current_time - oled_last_update_time >= 30)
 8000a2a:	4b09      	ldr	r3, [pc, #36]	@ (8000a50 <OLED_IsBusy+0x3c>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	687a      	ldr	r2, [r7, #4]
 8000a30:	1ad3      	subs	r3, r2, r3
 8000a32:	2b1d      	cmp	r3, #29
 8000a34:	d902      	bls.n	8000a3c <OLED_IsBusy+0x28>
        {
            oled_update_flag = 0; // 已经过了足够时间，不再忙
 8000a36:	4b05      	ldr	r3, [pc, #20]	@ (8000a4c <OLED_IsBusy+0x38>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	701a      	strb	r2, [r3, #0]
        }
    }
    return oled_update_flag;
 8000a3c:	4b03      	ldr	r3, [pc, #12]	@ (8000a4c <OLED_IsBusy+0x38>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	b2db      	uxtb	r3, r3
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	200000d0 	.word	0x200000d0
 8000a50:	200000cc 	.word	0x200000cc

08000a54 <OLED_UpdateDisplayVSync>:

void OLED_UpdateDisplayVSync(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b0a4      	sub	sp, #144	@ 0x90
 8000a58:	af02      	add	r7, sp, #8
    while (OLED_IsBusy()) 
 8000a5a:	bf00      	nop
 8000a5c:	f7ff ffda 	bl	8000a14 <OLED_IsBusy>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d1fa      	bne.n	8000a5c <OLED_UpdateDisplayVSync+0x8>
    {

    }
    oled_update_flag = 1;
 8000a66:	4b23      	ldr	r3, [pc, #140]	@ (8000af4 <OLED_UpdateDisplayVSync+0xa0>)
 8000a68:	2201      	movs	r2, #1
 8000a6a:	701a      	strb	r2, [r3, #0]
    oled_last_update_time = HAL_GetTick();
 8000a6c:	f001 f9ae 	bl	8001dcc <HAL_GetTick>
 8000a70:	4603      	mov	r3, r0
 8000a72:	4a21      	ldr	r2, [pc, #132]	@ (8000af8 <OLED_UpdateDisplayVSync+0xa4>)
 8000a74:	6013      	str	r3, [r2, #0]

    // 交换前后缓冲区
    memcpy(OLED_FrontBuffer, OLED_BackBuffer, 128 * 8); // 复制当前缓冲区到前缓冲区
 8000a76:	4a21      	ldr	r2, [pc, #132]	@ (8000afc <OLED_UpdateDisplayVSync+0xa8>)
 8000a78:	4b21      	ldr	r3, [pc, #132]	@ (8000b00 <OLED_UpdateDisplayVSync+0xac>)
 8000a7a:	4610      	mov	r0, r2
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a82:	461a      	mov	r2, r3
 8000a84:	f002 fd1a 	bl	80034bc <memcpy>

    // 将前缓冲区发送到显示器
    uint8_t data[129]; // 数据缓冲区 (包括控制字节)
    data[0] = 0x40;    // 数据控制字节
 8000a88:	2340      	movs	r3, #64	@ 0x40
 8000a8a:	713b      	strb	r3, [r7, #4]

    // 逐页发送数据，每页一次性发送整行
    for (uint8_t page = 0; page < 8; page++)
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8000a92:	e025      	b.n	8000ae0 <OLED_UpdateDisplayVSync+0x8c>
    {
        // 设置页地址
        OLED_SendCommand(0xB0 + page);
 8000a94:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000a98:	3b50      	subs	r3, #80	@ 0x50
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f000 f87d 	bl	8000b9c <OLED_SendCommand>
        // 设置列起始地址
        OLED_SendCommand(0x00); // 低位地址
 8000aa2:	2000      	movs	r0, #0
 8000aa4:	f000 f87a 	bl	8000b9c <OLED_SendCommand>
        OLED_SendCommand(0x10); // 高位地址
 8000aa8:	2010      	movs	r0, #16
 8000aaa:	f000 f877 	bl	8000b9c <OLED_SendCommand>

        // 复制当前页到发送缓冲区
        memcpy(data + 1, &OLED_FrontBuffer[page * OLED_WIDTH], OLED_WIDTH);
 8000aae:	1d3b      	adds	r3, r7, #4
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 8000ab6:	01d2      	lsls	r2, r2, #7
 8000ab8:	4910      	ldr	r1, [pc, #64]	@ (8000afc <OLED_UpdateDisplayVSync+0xa8>)
 8000aba:	4411      	add	r1, r2
 8000abc:	2280      	movs	r2, #128	@ 0x80
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f002 fcfc 	bl	80034bc <memcpy>

        // 发送一整行数据
        HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDR << 1, data, OLED_WIDTH + 1, HAL_MAX_DELAY);
 8000ac4:	1d3a      	adds	r2, r7, #4
 8000ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aca:	9300      	str	r3, [sp, #0]
 8000acc:	2381      	movs	r3, #129	@ 0x81
 8000ace:	2178      	movs	r1, #120	@ 0x78
 8000ad0:	480c      	ldr	r0, [pc, #48]	@ (8000b04 <OLED_UpdateDisplayVSync+0xb0>)
 8000ad2:	f001 fd6d 	bl	80025b0 <HAL_I2C_Master_Transmit>
    for (uint8_t page = 0; page < 8; page++)
 8000ad6:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000ada:	3301      	adds	r3, #1
 8000adc:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8000ae0:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000ae4:	2b07      	cmp	r3, #7
 8000ae6:	d9d5      	bls.n	8000a94 <OLED_UpdateDisplayVSync+0x40>
    }
}
 8000ae8:	bf00      	nop
 8000aea:	bf00      	nop
 8000aec:	3788      	adds	r7, #136	@ 0x88
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	200000d0 	.word	0x200000d0
 8000af8:	200000cc 	.word	0x200000cc
 8000afc:	200004d4 	.word	0x200004d4
 8000b00:	200000d4 	.word	0x200000d4
 8000b04:	20000078 	.word	0x20000078

08000b08 <OLED_WritePixel>:

void OLED_WritePixel(uint8_t x, uint8_t y, uint8_t color)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b085      	sub	sp, #20
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	71fb      	strb	r3, [r7, #7]
 8000b12:	460b      	mov	r3, r1
 8000b14:	71bb      	strb	r3, [r7, #6]
 8000b16:	4613      	mov	r3, r2
 8000b18:	717b      	strb	r3, [r7, #5]
    // 边界检查
    if (x >= 128 || y >= 64)
 8000b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	db34      	blt.n	8000b8c <OLED_WritePixel+0x84>
 8000b22:	79bb      	ldrb	r3, [r7, #6]
 8000b24:	2b3f      	cmp	r3, #63	@ 0x3f
 8000b26:	d831      	bhi.n	8000b8c <OLED_WritePixel+0x84>
        return;

    // 计算像素所在的字节位置
    uint16_t byte_index = x + (y / 8) * 128;
 8000b28:	79fb      	ldrb	r3, [r7, #7]
 8000b2a:	b29a      	uxth	r2, r3
 8000b2c:	79bb      	ldrb	r3, [r7, #6]
 8000b2e:	08db      	lsrs	r3, r3, #3
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	01db      	lsls	r3, r3, #7
 8000b34:	b29b      	uxth	r3, r3
 8000b36:	4413      	add	r3, r2
 8000b38:	81fb      	strh	r3, [r7, #14]
    uint8_t bit_position = y % 8;
 8000b3a:	79bb      	ldrb	r3, [r7, #6]
 8000b3c:	f003 0307 	and.w	r3, r3, #7
 8000b40:	737b      	strb	r3, [r7, #13]

    if (color) // 如果需要点亮像素
 8000b42:	797b      	ldrb	r3, [r7, #5]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d00f      	beq.n	8000b68 <OLED_WritePixel+0x60>
        OLED_BackBuffer[byte_index] |= (1 << bit_position);
 8000b48:	89fb      	ldrh	r3, [r7, #14]
 8000b4a:	4a13      	ldr	r2, [pc, #76]	@ (8000b98 <OLED_WritePixel+0x90>)
 8000b4c:	5cd3      	ldrb	r3, [r2, r3]
 8000b4e:	b25a      	sxtb	r2, r3
 8000b50:	7b7b      	ldrb	r3, [r7, #13]
 8000b52:	2101      	movs	r1, #1
 8000b54:	fa01 f303 	lsl.w	r3, r1, r3
 8000b58:	b25b      	sxtb	r3, r3
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	b25a      	sxtb	r2, r3
 8000b5e:	89fb      	ldrh	r3, [r7, #14]
 8000b60:	b2d1      	uxtb	r1, r2
 8000b62:	4a0d      	ldr	r2, [pc, #52]	@ (8000b98 <OLED_WritePixel+0x90>)
 8000b64:	54d1      	strb	r1, [r2, r3]
 8000b66:	e012      	b.n	8000b8e <OLED_WritePixel+0x86>
    else // 如果需要熄灭像素
        OLED_BackBuffer[byte_index] &= ~(1 << bit_position);
 8000b68:	89fb      	ldrh	r3, [r7, #14]
 8000b6a:	4a0b      	ldr	r2, [pc, #44]	@ (8000b98 <OLED_WritePixel+0x90>)
 8000b6c:	5cd3      	ldrb	r3, [r2, r3]
 8000b6e:	b25a      	sxtb	r2, r3
 8000b70:	7b7b      	ldrb	r3, [r7, #13]
 8000b72:	2101      	movs	r1, #1
 8000b74:	fa01 f303 	lsl.w	r3, r1, r3
 8000b78:	b25b      	sxtb	r3, r3
 8000b7a:	43db      	mvns	r3, r3
 8000b7c:	b25b      	sxtb	r3, r3
 8000b7e:	4013      	ands	r3, r2
 8000b80:	b25a      	sxtb	r2, r3
 8000b82:	89fb      	ldrh	r3, [r7, #14]
 8000b84:	b2d1      	uxtb	r1, r2
 8000b86:	4a04      	ldr	r2, [pc, #16]	@ (8000b98 <OLED_WritePixel+0x90>)
 8000b88:	54d1      	strb	r1, [r2, r3]
 8000b8a:	e000      	b.n	8000b8e <OLED_WritePixel+0x86>
        return;
 8000b8c:	bf00      	nop
}
 8000b8e:	3714      	adds	r7, #20
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bc80      	pop	{r7}
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	200000d4 	.word	0x200000d4

08000b9c <OLED_SendCommand>:

void OLED_SendCommand(uint8_t command)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b086      	sub	sp, #24
 8000ba0:	af02      	add	r7, sp, #8
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	71fb      	strb	r3, [r7, #7]
    uint8_t data[2];
    data[0] = 0x00; // Co = 0, D/C# = 0
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	733b      	strb	r3, [r7, #12]
    data[1] = command;
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDR << 1, data, 2, HAL_MAX_DELAY);
 8000bae:	f107 020c 	add.w	r2, r7, #12
 8000bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb6:	9300      	str	r3, [sp, #0]
 8000bb8:	2302      	movs	r3, #2
 8000bba:	2178      	movs	r1, #120	@ 0x78
 8000bbc:	4803      	ldr	r0, [pc, #12]	@ (8000bcc <OLED_SendCommand+0x30>)
 8000bbe:	f001 fcf7 	bl	80025b0 <HAL_I2C_Master_Transmit>
}
 8000bc2:	bf00      	nop
 8000bc4:	3710      	adds	r7, #16
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	20000078 	.word	0x20000078

08000bd0 <OLED_Init>:
    OLED_UpdateDisplayVSync();
}

// 更新OLED初始化函数来使用双缓冲
void OLED_Init()
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
    HAL_Delay(100); // 等待OLED上电稳定
 8000bd4:	2064      	movs	r0, #100	@ 0x64
 8000bd6:	f001 f903 	bl	8001de0 <HAL_Delay>

    // 初始化命令序列
    OLED_SendCommand(0xAE); // 关闭显示
 8000bda:	20ae      	movs	r0, #174	@ 0xae
 8000bdc:	f7ff ffde 	bl	8000b9c <OLED_SendCommand>
    OLED_SendCommand(0xD5); // 设置显示时钟分频比/振荡器频率
 8000be0:	20d5      	movs	r0, #213	@ 0xd5
 8000be2:	f7ff ffdb 	bl	8000b9c <OLED_SendCommand>
    OLED_SendCommand(0x80); // 推荐值
 8000be6:	2080      	movs	r0, #128	@ 0x80
 8000be8:	f7ff ffd8 	bl	8000b9c <OLED_SendCommand>
    OLED_SendCommand(0xA8); // 设置多路复用比
 8000bec:	20a8      	movs	r0, #168	@ 0xa8
 8000bee:	f7ff ffd5 	bl	8000b9c <OLED_SendCommand>
    OLED_SendCommand(0x3F); // 默认 0x3F (1/64 duty)
 8000bf2:	203f      	movs	r0, #63	@ 0x3f
 8000bf4:	f7ff ffd2 	bl	8000b9c <OLED_SendCommand>
    OLED_SendCommand(0xD3); // 设置显示偏移
 8000bf8:	20d3      	movs	r0, #211	@ 0xd3
 8000bfa:	f7ff ffcf 	bl	8000b9c <OLED_SendCommand>
    OLED_SendCommand(0x00); // 无偏移
 8000bfe:	2000      	movs	r0, #0
 8000c00:	f7ff ffcc 	bl	8000b9c <OLED_SendCommand>
    OLED_SendCommand(0x40); // 设置显示开始行 (0x40-0x7F)
 8000c04:	2040      	movs	r0, #64	@ 0x40
 8000c06:	f7ff ffc9 	bl	8000b9c <OLED_SendCommand>
    OLED_SendCommand(0x8D); // 电荷泵设置
 8000c0a:	208d      	movs	r0, #141	@ 0x8d
 8000c0c:	f7ff ffc6 	bl	8000b9c <OLED_SendCommand>
    OLED_SendCommand(0x14); // 启用电荷泵
 8000c10:	2014      	movs	r0, #20
 8000c12:	f7ff ffc3 	bl	8000b9c <OLED_SendCommand>
    OLED_SendCommand(0x20); // 设置内存寻址模式
 8000c16:	2020      	movs	r0, #32
 8000c18:	f7ff ffc0 	bl	8000b9c <OLED_SendCommand>
    OLED_SendCommand(0x00); // 水平寻址模式
 8000c1c:	2000      	movs	r0, #0
 8000c1e:	f7ff ffbd 	bl	8000b9c <OLED_SendCommand>
    OLED_SendCommand(0xA1); // 段重映射，列地址127映射到SEG0
 8000c22:	20a1      	movs	r0, #161	@ 0xa1
 8000c24:	f7ff ffba 	bl	8000b9c <OLED_SendCommand>
    OLED_SendCommand(0xC8); // COM输出扫描方向，从COM[N-1]到COM0
 8000c28:	20c8      	movs	r0, #200	@ 0xc8
 8000c2a:	f7ff ffb7 	bl	8000b9c <OLED_SendCommand>
    OLED_SendCommand(0xDA); // COM硬件配置
 8000c2e:	20da      	movs	r0, #218	@ 0xda
 8000c30:	f7ff ffb4 	bl	8000b9c <OLED_SendCommand>
    OLED_SendCommand(0x12); // 交替COM配置，使能COM左/右重映射
 8000c34:	2012      	movs	r0, #18
 8000c36:	f7ff ffb1 	bl	8000b9c <OLED_SendCommand>
    OLED_SendCommand(0x81); // 设置对比度控制
 8000c3a:	2081      	movs	r0, #129	@ 0x81
 8000c3c:	f7ff ffae 	bl	8000b9c <OLED_SendCommand>
    OLED_SendCommand(0xCF); // 对比度值(0-255)
 8000c40:	20cf      	movs	r0, #207	@ 0xcf
 8000c42:	f7ff ffab 	bl	8000b9c <OLED_SendCommand>
    OLED_SendCommand(0xD9); // 设置预充电周期
 8000c46:	20d9      	movs	r0, #217	@ 0xd9
 8000c48:	f7ff ffa8 	bl	8000b9c <OLED_SendCommand>
    OLED_SendCommand(0xF1); // 第1和第2阶段的预充电周期
 8000c4c:	20f1      	movs	r0, #241	@ 0xf1
 8000c4e:	f7ff ffa5 	bl	8000b9c <OLED_SendCommand>
    OLED_SendCommand(0xDB); // 设置VCOMH解除选择电平
 8000c52:	20db      	movs	r0, #219	@ 0xdb
 8000c54:	f7ff ffa2 	bl	8000b9c <OLED_SendCommand>
    OLED_SendCommand(0x30); // 约0.83xVcc
 8000c58:	2030      	movs	r0, #48	@ 0x30
 8000c5a:	f7ff ff9f 	bl	8000b9c <OLED_SendCommand>
    OLED_SendCommand(0xA4); // 显示RAM内容
 8000c5e:	20a4      	movs	r0, #164	@ 0xa4
 8000c60:	f7ff ff9c 	bl	8000b9c <OLED_SendCommand>
    OLED_SendCommand(0xA6); // 正常显示(非反显)
 8000c64:	20a6      	movs	r0, #166	@ 0xa6
 8000c66:	f7ff ff99 	bl	8000b9c <OLED_SendCommand>
    OLED_SendCommand(0x2E); // 禁用滚动
 8000c6a:	202e      	movs	r0, #46	@ 0x2e
 8000c6c:	f7ff ff96 	bl	8000b9c <OLED_SendCommand>

    // 初始化缓冲区
    OLED_InitBuffer();
 8000c70:	f7ff feb0 	bl	80009d4 <OLED_InitBuffer>

    // 清屏
    OLED_ClearBuffer();
 8000c74:	f7ff fec2 	bl	80009fc <OLED_ClearBuffer>

    // 开启显示
    OLED_SendCommand(0xAF);
 8000c78:	20af      	movs	r0, #175	@ 0xaf
 8000c7a:	f7ff ff8f 	bl	8000b9c <OLED_SendCommand>
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <EaseLinear>:
#include "oled_ui.h"

#pragma region TWEENS

static float EaseLinear(float t)
{
 8000c82:	b480      	push	{r7}
 8000c84:	b083      	sub	sp, #12
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
    return t;
 8000c8a:	687b      	ldr	r3, [r7, #4]
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bc80      	pop	{r7}
 8000c94:	4770      	bx	lr

08000c96 <EaseInQuad>:

static float EaseInQuad(float t)
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b082      	sub	sp, #8
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
    return t * t;
 8000c9e:	6879      	ldr	r1, [r7, #4]
 8000ca0:	6878      	ldr	r0, [r7, #4]
 8000ca2:	f7ff fb61 	bl	8000368 <__aeabi_fmul>
 8000ca6:	4603      	mov	r3, r0
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <EaseOutQuad>:

static float EaseOutQuad(float t)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
    return t * (2 - t);
 8000cb8:	6879      	ldr	r1, [r7, #4]
 8000cba:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000cbe:	f7ff fa49 	bl	8000154 <__aeabi_fsub>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	6879      	ldr	r1, [r7, #4]
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f7ff fb4e 	bl	8000368 <__aeabi_fmul>
 8000ccc:	4603      	mov	r3, r0
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <EaseInOutQuad>:

static float EaseInOutQuad(float t)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b082      	sub	sp, #8
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
    return t < 0.5f ? 2 * t * t : -1 + (4 - 2 * t) * t;
 8000cde:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f7ff fcde 	bl	80006a4 <__aeabi_fcmplt>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d00b      	beq.n	8000d06 <EaseInOutQuad+0x30>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff fa30 	bl	8000158 <__addsf3>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	6879      	ldr	r1, [r7, #4]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff fb33 	bl	8000368 <__aeabi_fmul>
 8000d02:	4603      	mov	r3, r0
 8000d04:	e016      	b.n	8000d34 <EaseInOutQuad+0x5e>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff fa24 	bl	8000158 <__addsf3>
 8000d10:	4603      	mov	r3, r0
 8000d12:	4619      	mov	r1, r3
 8000d14:	f04f 4081 	mov.w	r0, #1082130432	@ 0x40800000
 8000d18:	f7ff fa1c 	bl	8000154 <__aeabi_fsub>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	6879      	ldr	r1, [r7, #4]
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff fb21 	bl	8000368 <__aeabi_fmul>
 8000d26:	4603      	mov	r3, r0
 8000d28:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff fa11 	bl	8000154 <__aeabi_fsub>
 8000d32:	4603      	mov	r3, r0
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <EaseInCubic>:

static float EaseInCubic(float t)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
    return t * t * t;
 8000d44:	6879      	ldr	r1, [r7, #4]
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	f7ff fb0e 	bl	8000368 <__aeabi_fmul>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	6879      	ldr	r1, [r7, #4]
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff fb09 	bl	8000368 <__aeabi_fmul>
 8000d56:	4603      	mov	r3, r0
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <EaseOutCubic>:

static float EaseOutCubic(float t)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
    float t1 = t - 1;
 8000d68:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8000d6c:	6878      	ldr	r0, [r7, #4]
 8000d6e:	f7ff f9f1 	bl	8000154 <__aeabi_fsub>
 8000d72:	4603      	mov	r3, r0
 8000d74:	60fb      	str	r3, [r7, #12]
    return t1 * t1 * t1 + 1;
 8000d76:	68f9      	ldr	r1, [r7, #12]
 8000d78:	68f8      	ldr	r0, [r7, #12]
 8000d7a:	f7ff faf5 	bl	8000368 <__aeabi_fmul>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	68f9      	ldr	r1, [r7, #12]
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff faf0 	bl	8000368 <__aeabi_fmul>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff f9e2 	bl	8000158 <__addsf3>
 8000d94:	4603      	mov	r3, r0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3710      	adds	r7, #16
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <EaseInOutCubic>:

static float EaseInOutCubic(float t)
{
 8000d9e:	b590      	push	{r4, r7, lr}
 8000da0:	b083      	sub	sp, #12
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
    return t < 0.5f ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;
 8000da6:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	f7ff fc7a 	bl	80006a4 <__aeabi_fcmplt>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d010      	beq.n	8000dd8 <EaseInOutCubic+0x3a>
 8000db6:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	f7ff fad4 	bl	8000368 <__aeabi_fmul>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	6879      	ldr	r1, [r7, #4]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff facf 	bl	8000368 <__aeabi_fmul>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	6879      	ldr	r1, [r7, #4]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff faca 	bl	8000368 <__aeabi_fmul>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	e02f      	b.n	8000e38 <EaseInOutCubic+0x9a>
 8000dd8:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f7ff f9b9 	bl	8000154 <__aeabi_fsub>
 8000de2:	4603      	mov	r3, r0
 8000de4:	461c      	mov	r4, r3
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4619      	mov	r1, r3
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff f9b4 	bl	8000158 <__addsf3>
 8000df0:	4603      	mov	r3, r0
 8000df2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff f9ac 	bl	8000154 <__aeabi_fsub>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4620      	mov	r0, r4
 8000e02:	f7ff fab1 	bl	8000368 <__aeabi_fmul>
 8000e06:	4603      	mov	r3, r0
 8000e08:	461c      	mov	r4, r3
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff f9a2 	bl	8000158 <__addsf3>
 8000e14:	4603      	mov	r3, r0
 8000e16:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff f99a 	bl	8000154 <__aeabi_fsub>
 8000e20:	4603      	mov	r3, r0
 8000e22:	4619      	mov	r1, r3
 8000e24:	4620      	mov	r0, r4
 8000e26:	f7ff fa9f 	bl	8000368 <__aeabi_fmul>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff f991 	bl	8000158 <__addsf3>
 8000e36:	4603      	mov	r3, r0
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd90      	pop	{r4, r7, pc}

08000e40 <EaseInExpo>:

// 在现有EaseType_t枚举中添加这些新类型
// 指数缓动
static float EaseInExpo(float t)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
    return (t == 0) ? 0 : powf(2, 10 * (t - 1));
 8000e48:	f04f 0100 	mov.w	r1, #0
 8000e4c:	6878      	ldr	r0, [r7, #4]
 8000e4e:	f7ff fc1f 	bl	8000690 <__aeabi_fcmpeq>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d111      	bne.n	8000e7c <EaseInExpo+0x3c>
 8000e58:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8000e5c:	6878      	ldr	r0, [r7, #4]
 8000e5e:	f7ff f979 	bl	8000154 <__aeabi_fsub>
 8000e62:	4603      	mov	r3, r0
 8000e64:	4908      	ldr	r1, [pc, #32]	@ (8000e88 <EaseInExpo+0x48>)
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff fa7e 	bl	8000368 <__aeabi_fmul>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	4619      	mov	r1, r3
 8000e70:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000e74:	f002 fb30 	bl	80034d8 <powf>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	e001      	b.n	8000e80 <EaseInExpo+0x40>
 8000e7c:	f04f 0300 	mov.w	r3, #0
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	41200000 	.word	0x41200000

08000e8c <EaseOutExpo>:

static float EaseOutExpo(float t)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
    return (t == 1) ? 1 : (1 - powf(2, -10 * t));
 8000e94:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f7ff fbf9 	bl	8000690 <__aeabi_fcmpeq>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d111      	bne.n	8000ec8 <EaseOutExpo+0x3c>
 8000ea4:	490b      	ldr	r1, [pc, #44]	@ (8000ed4 <EaseOutExpo+0x48>)
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f7ff fa5e 	bl	8000368 <__aeabi_fmul>
 8000eac:	4603      	mov	r3, r0
 8000eae:	4619      	mov	r1, r3
 8000eb0:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000eb4:	f002 fb10 	bl	80034d8 <powf>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	4619      	mov	r1, r3
 8000ebc:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8000ec0:	f7ff f948 	bl	8000154 <__aeabi_fsub>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	e001      	b.n	8000ecc <EaseOutExpo+0x40>
 8000ec8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	c1200000 	.word	0xc1200000

08000ed8 <EaseInOutExpo>:

static float EaseInOutExpo(float t)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
    if (t == 0)
 8000ee0:	f04f 0100 	mov.w	r1, #0
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f7ff fbd3 	bl	8000690 <__aeabi_fcmpeq>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d002      	beq.n	8000ef6 <EaseInOutExpo+0x1e>
        return 0;
 8000ef0:	f04f 0300 	mov.w	r3, #0
 8000ef4:	e045      	b.n	8000f82 <EaseInOutExpo+0xaa>
    if (t == 1)
 8000ef6:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f7ff fbc8 	bl	8000690 <__aeabi_fcmpeq>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d002      	beq.n	8000f0c <EaseInOutExpo+0x34>
        return 1;
 8000f06:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000f0a:	e03a      	b.n	8000f82 <EaseInOutExpo+0xaa>
    if (t < 0.5f)
 8000f0c:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f7ff fbc7 	bl	80006a4 <__aeabi_fcmplt>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d016      	beq.n	8000f4a <EaseInOutExpo+0x72>
        return powf(2, 20 * t - 10) / 2;
 8000f1c:	491b      	ldr	r1, [pc, #108]	@ (8000f8c <EaseInOutExpo+0xb4>)
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f7ff fa22 	bl	8000368 <__aeabi_fmul>
 8000f24:	4603      	mov	r3, r0
 8000f26:	491a      	ldr	r1, [pc, #104]	@ (8000f90 <EaseInOutExpo+0xb8>)
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff f913 	bl	8000154 <__aeabi_fsub>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	4619      	mov	r1, r3
 8000f32:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000f36:	f002 facf 	bl	80034d8 <powf>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff fac5 	bl	80004d0 <__aeabi_fdiv>
 8000f46:	4603      	mov	r3, r0
 8000f48:	e01b      	b.n	8000f82 <EaseInOutExpo+0xaa>
    return (2 - powf(2, -20 * t + 10)) / 2;
 8000f4a:	4912      	ldr	r1, [pc, #72]	@ (8000f94 <EaseInOutExpo+0xbc>)
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f7ff fa0b 	bl	8000368 <__aeabi_fmul>
 8000f52:	4603      	mov	r3, r0
 8000f54:	490e      	ldr	r1, [pc, #56]	@ (8000f90 <EaseInOutExpo+0xb8>)
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff f8fe 	bl	8000158 <__addsf3>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	4619      	mov	r1, r3
 8000f60:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000f64:	f002 fab8 	bl	80034d8 <powf>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000f70:	f7ff f8f0 	bl	8000154 <__aeabi_fsub>
 8000f74:	4603      	mov	r3, r0
 8000f76:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff faa8 	bl	80004d0 <__aeabi_fdiv>
 8000f80:	4603      	mov	r3, r0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	41a00000 	.word	0x41a00000
 8000f90:	41200000 	.word	0x41200000
 8000f94:	c1a00000 	.word	0xc1a00000

08000f98 <EaseInCirc>:

// 圆形曲线缓动
static float EaseInCirc(float t)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
    return 1 - sqrtf(1 - t * t);
 8000fa0:	6879      	ldr	r1, [r7, #4]
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f7ff f9e0 	bl	8000368 <__aeabi_fmul>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	4619      	mov	r1, r3
 8000fac:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8000fb0:	f7ff f8d0 	bl	8000154 <__aeabi_fsub>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f002 fadb 	bl	8003572 <sqrtf>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8000fc4:	f7ff f8c6 	bl	8000154 <__aeabi_fsub>
 8000fc8:	4603      	mov	r3, r0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <EaseOutCirc>:

static float EaseOutCirc(float t)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b082      	sub	sp, #8
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
    return sqrtf(1 - powf(t - 1, 2));
 8000fda:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f7ff f8b8 	bl	8000154 <__aeabi_fsub>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000fea:	4618      	mov	r0, r3
 8000fec:	f002 fa74 	bl	80034d8 <powf>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8000ff8:	f7ff f8ac 	bl	8000154 <__aeabi_fsub>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	4618      	mov	r0, r3
 8001000:	f002 fab7 	bl	8003572 <sqrtf>
 8001004:	4603      	mov	r3, r0
}
 8001006:	4618      	mov	r0, r3
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <EaseInOutCirc>:

static float EaseInOutCirc(float t)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b082      	sub	sp, #8
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
    if (t < 0.5f)
 8001016:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f7ff fb42 	bl	80006a4 <__aeabi_fcmplt>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d022      	beq.n	800106c <EaseInOutCirc+0x5e>
        return (1 - sqrtf(1 - powf(2 * t, 2))) / 2;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4619      	mov	r1, r3
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff f894 	bl	8000158 <__addsf3>
 8001030:	4603      	mov	r3, r0
 8001032:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001036:	4618      	mov	r0, r3
 8001038:	f002 fa4e 	bl	80034d8 <powf>
 800103c:	4603      	mov	r3, r0
 800103e:	4619      	mov	r1, r3
 8001040:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001044:	f7ff f886 	bl	8000154 <__aeabi_fsub>
 8001048:	4603      	mov	r3, r0
 800104a:	4618      	mov	r0, r3
 800104c:	f002 fa91 	bl	8003572 <sqrtf>
 8001050:	4603      	mov	r3, r0
 8001052:	4619      	mov	r1, r3
 8001054:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001058:	f7ff f87c 	bl	8000154 <__aeabi_fsub>
 800105c:	4603      	mov	r3, r0
 800105e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff fa34 	bl	80004d0 <__aeabi_fdiv>
 8001068:	4603      	mov	r3, r0
 800106a:	e027      	b.n	80010bc <EaseInOutCirc+0xae>
    return (sqrtf(1 - powf(-2 * t + 2, 2)) + 1) / 2;
 800106c:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f7ff f979 	bl	8000368 <__aeabi_fmul>
 8001076:	4603      	mov	r3, r0
 8001078:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff f86b 	bl	8000158 <__addsf3>
 8001082:	4603      	mov	r3, r0
 8001084:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001088:	4618      	mov	r0, r3
 800108a:	f002 fa25 	bl	80034d8 <powf>
 800108e:	4603      	mov	r3, r0
 8001090:	4619      	mov	r1, r3
 8001092:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001096:	f7ff f85d 	bl	8000154 <__aeabi_fsub>
 800109a:	4603      	mov	r3, r0
 800109c:	4618      	mov	r0, r3
 800109e:	f002 fa68 	bl	8003572 <sqrtf>
 80010a2:	4603      	mov	r3, r0
 80010a4:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff f855 	bl	8000158 <__addsf3>
 80010ae:	4603      	mov	r3, r0
 80010b0:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff fa0b 	bl	80004d0 <__aeabi_fdiv>
 80010ba:	4603      	mov	r3, r0
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <EaseInElastic>:

// 弹性缓动
static float EaseInElastic(float t)
{
 80010c4:	b590      	push	{r4, r7, lr}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
    const float c4 = (2 * 3.14159f) / 3;
 80010cc:	4b22      	ldr	r3, [pc, #136]	@ (8001158 <EaseInElastic+0x94>)
 80010ce:	60fb      	str	r3, [r7, #12]

    if (t == 0)
 80010d0:	f04f 0100 	mov.w	r1, #0
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f7ff fadb 	bl	8000690 <__aeabi_fcmpeq>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d002      	beq.n	80010e6 <EaseInElastic+0x22>
        return 0;
 80010e0:	f04f 0300 	mov.w	r3, #0
 80010e4:	e034      	b.n	8001150 <EaseInElastic+0x8c>
    if (t == 1)
 80010e6:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f7ff fad0 	bl	8000690 <__aeabi_fcmpeq>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d002      	beq.n	80010fc <EaseInElastic+0x38>
        return 1;
 80010f6:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80010fa:	e029      	b.n	8001150 <EaseInElastic+0x8c>
    return -powf(2, 10 * t - 10) * sinf((t * 10 - 10.75f) * c4);
 80010fc:	4917      	ldr	r1, [pc, #92]	@ (800115c <EaseInElastic+0x98>)
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f7ff f932 	bl	8000368 <__aeabi_fmul>
 8001104:	4603      	mov	r3, r0
 8001106:	4915      	ldr	r1, [pc, #84]	@ (800115c <EaseInElastic+0x98>)
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff f823 	bl	8000154 <__aeabi_fsub>
 800110e:	4603      	mov	r3, r0
 8001110:	4619      	mov	r1, r3
 8001112:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001116:	f002 f9df 	bl	80034d8 <powf>
 800111a:	4603      	mov	r3, r0
 800111c:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 8001120:	490e      	ldr	r1, [pc, #56]	@ (800115c <EaseInElastic+0x98>)
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f7ff f920 	bl	8000368 <__aeabi_fmul>
 8001128:	4603      	mov	r3, r0
 800112a:	490d      	ldr	r1, [pc, #52]	@ (8001160 <EaseInElastic+0x9c>)
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff f811 	bl	8000154 <__aeabi_fsub>
 8001132:	4603      	mov	r3, r0
 8001134:	68f9      	ldr	r1, [r7, #12]
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff f916 	bl	8000368 <__aeabi_fmul>
 800113c:	4603      	mov	r3, r0
 800113e:	4618      	mov	r0, r3
 8001140:	f002 fa6a 	bl	8003618 <sinf>
 8001144:	4603      	mov	r3, r0
 8001146:	4619      	mov	r1, r3
 8001148:	4620      	mov	r0, r4
 800114a:	f7ff f90d 	bl	8000368 <__aeabi_fmul>
 800114e:	4603      	mov	r3, r0
}
 8001150:	4618      	mov	r0, r3
 8001152:	3714      	adds	r7, #20
 8001154:	46bd      	mov	sp, r7
 8001156:	bd90      	pop	{r4, r7, pc}
 8001158:	40060a8b 	.word	0x40060a8b
 800115c:	41200000 	.word	0x41200000
 8001160:	412c0000 	.word	0x412c0000

08001164 <EaseOutElastic>:

static float EaseOutElastic(float t)
{
 8001164:	b590      	push	{r4, r7, lr}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
    const float c4 = (2 * 3.14159f) / 3;
 800116c:	4b22      	ldr	r3, [pc, #136]	@ (80011f8 <EaseOutElastic+0x94>)
 800116e:	60fb      	str	r3, [r7, #12]

    if (t == 0)
 8001170:	f04f 0100 	mov.w	r1, #0
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f7ff fa8b 	bl	8000690 <__aeabi_fcmpeq>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d002      	beq.n	8001186 <EaseOutElastic+0x22>
        return 0;
 8001180:	f04f 0300 	mov.w	r3, #0
 8001184:	e034      	b.n	80011f0 <EaseOutElastic+0x8c>
    if (t == 1)
 8001186:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f7ff fa80 	bl	8000690 <__aeabi_fcmpeq>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d002      	beq.n	800119c <EaseOutElastic+0x38>
        return 1;
 8001196:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800119a:	e029      	b.n	80011f0 <EaseOutElastic+0x8c>
    return powf(2, -10 * t) * sinf((t * 10 - 0.75f) * c4) + 1;
 800119c:	4917      	ldr	r1, [pc, #92]	@ (80011fc <EaseOutElastic+0x98>)
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f7ff f8e2 	bl	8000368 <__aeabi_fmul>
 80011a4:	4603      	mov	r3, r0
 80011a6:	4619      	mov	r1, r3
 80011a8:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80011ac:	f002 f994 	bl	80034d8 <powf>
 80011b0:	4604      	mov	r4, r0
 80011b2:	4913      	ldr	r1, [pc, #76]	@ (8001200 <EaseOutElastic+0x9c>)
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f7ff f8d7 	bl	8000368 <__aeabi_fmul>
 80011ba:	4603      	mov	r3, r0
 80011bc:	f04f 517d 	mov.w	r1, #1061158912	@ 0x3f400000
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7fe ffc7 	bl	8000154 <__aeabi_fsub>
 80011c6:	4603      	mov	r3, r0
 80011c8:	68f9      	ldr	r1, [r7, #12]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff f8cc 	bl	8000368 <__aeabi_fmul>
 80011d0:	4603      	mov	r3, r0
 80011d2:	4618      	mov	r0, r3
 80011d4:	f002 fa20 	bl	8003618 <sinf>
 80011d8:	4603      	mov	r3, r0
 80011da:	4619      	mov	r1, r3
 80011dc:	4620      	mov	r0, r4
 80011de:	f7ff f8c3 	bl	8000368 <__aeabi_fmul>
 80011e2:	4603      	mov	r3, r0
 80011e4:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7fe ffb5 	bl	8000158 <__addsf3>
 80011ee:	4603      	mov	r3, r0
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3714      	adds	r7, #20
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd90      	pop	{r4, r7, pc}
 80011f8:	40060a8b 	.word	0x40060a8b
 80011fc:	c1200000 	.word	0xc1200000
 8001200:	41200000 	.word	0x41200000

08001204 <EaseInOutElastic>:

static float EaseInOutElastic(float t)
{
 8001204:	b590      	push	{r4, r7, lr}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
    const float c5 = (2 * 3.14159f) / 4.5f;
 800120c:	4b44      	ldr	r3, [pc, #272]	@ (8001320 <EaseInOutElastic+0x11c>)
 800120e:	60fb      	str	r3, [r7, #12]

    if (t == 0)
 8001210:	f04f 0100 	mov.w	r1, #0
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f7ff fa3b 	bl	8000690 <__aeabi_fcmpeq>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d002      	beq.n	8001226 <EaseInOutElastic+0x22>
        return 0;
 8001220:	f04f 0300 	mov.w	r3, #0
 8001224:	e077      	b.n	8001316 <EaseInOutElastic+0x112>
    if (t == 1)
 8001226:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f7ff fa30 	bl	8000690 <__aeabi_fcmpeq>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d002      	beq.n	800123c <EaseInOutElastic+0x38>
        return 1;
 8001236:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800123a:	e06c      	b.n	8001316 <EaseInOutElastic+0x112>
    if (t < 0.5f)
 800123c:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f7ff fa2f 	bl	80006a4 <__aeabi_fcmplt>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d030      	beq.n	80012ae <EaseInOutElastic+0xaa>
        return -(powf(2, 20 * t - 10) * sinf((20 * t - 11.125f) * c5)) / 2;
 800124c:	4935      	ldr	r1, [pc, #212]	@ (8001324 <EaseInOutElastic+0x120>)
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f7ff f88a 	bl	8000368 <__aeabi_fmul>
 8001254:	4603      	mov	r3, r0
 8001256:	4934      	ldr	r1, [pc, #208]	@ (8001328 <EaseInOutElastic+0x124>)
 8001258:	4618      	mov	r0, r3
 800125a:	f7fe ff7b 	bl	8000154 <__aeabi_fsub>
 800125e:	4603      	mov	r3, r0
 8001260:	4619      	mov	r1, r3
 8001262:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001266:	f002 f937 	bl	80034d8 <powf>
 800126a:	4604      	mov	r4, r0
 800126c:	492d      	ldr	r1, [pc, #180]	@ (8001324 <EaseInOutElastic+0x120>)
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f7ff f87a 	bl	8000368 <__aeabi_fmul>
 8001274:	4603      	mov	r3, r0
 8001276:	492d      	ldr	r1, [pc, #180]	@ (800132c <EaseInOutElastic+0x128>)
 8001278:	4618      	mov	r0, r3
 800127a:	f7fe ff6b 	bl	8000154 <__aeabi_fsub>
 800127e:	4603      	mov	r3, r0
 8001280:	68f9      	ldr	r1, [r7, #12]
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff f870 	bl	8000368 <__aeabi_fmul>
 8001288:	4603      	mov	r3, r0
 800128a:	4618      	mov	r0, r3
 800128c:	f002 f9c4 	bl	8003618 <sinf>
 8001290:	4603      	mov	r3, r0
 8001292:	4619      	mov	r1, r3
 8001294:	4620      	mov	r0, r4
 8001296:	f7ff f867 	bl	8000368 <__aeabi_fmul>
 800129a:	4603      	mov	r3, r0
 800129c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80012a0:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff f913 	bl	80004d0 <__aeabi_fdiv>
 80012aa:	4603      	mov	r3, r0
 80012ac:	e033      	b.n	8001316 <EaseInOutElastic+0x112>
    return (powf(2, -20 * t + 10) * sinf((20 * t - 11.125f) * c5)) / 2 + 1;
 80012ae:	4920      	ldr	r1, [pc, #128]	@ (8001330 <EaseInOutElastic+0x12c>)
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f7ff f859 	bl	8000368 <__aeabi_fmul>
 80012b6:	4603      	mov	r3, r0
 80012b8:	491b      	ldr	r1, [pc, #108]	@ (8001328 <EaseInOutElastic+0x124>)
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7fe ff4c 	bl	8000158 <__addsf3>
 80012c0:	4603      	mov	r3, r0
 80012c2:	4619      	mov	r1, r3
 80012c4:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80012c8:	f002 f906 	bl	80034d8 <powf>
 80012cc:	4604      	mov	r4, r0
 80012ce:	4915      	ldr	r1, [pc, #84]	@ (8001324 <EaseInOutElastic+0x120>)
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f7ff f849 	bl	8000368 <__aeabi_fmul>
 80012d6:	4603      	mov	r3, r0
 80012d8:	4914      	ldr	r1, [pc, #80]	@ (800132c <EaseInOutElastic+0x128>)
 80012da:	4618      	mov	r0, r3
 80012dc:	f7fe ff3a 	bl	8000154 <__aeabi_fsub>
 80012e0:	4603      	mov	r3, r0
 80012e2:	68f9      	ldr	r1, [r7, #12]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff f83f 	bl	8000368 <__aeabi_fmul>
 80012ea:	4603      	mov	r3, r0
 80012ec:	4618      	mov	r0, r3
 80012ee:	f002 f993 	bl	8003618 <sinf>
 80012f2:	4603      	mov	r3, r0
 80012f4:	4619      	mov	r1, r3
 80012f6:	4620      	mov	r0, r4
 80012f8:	f7ff f836 	bl	8000368 <__aeabi_fmul>
 80012fc:	4603      	mov	r3, r0
 80012fe:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff f8e4 	bl	80004d0 <__aeabi_fdiv>
 8001308:	4603      	mov	r3, r0
 800130a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800130e:	4618      	mov	r0, r3
 8001310:	f7fe ff22 	bl	8000158 <__addsf3>
 8001314:	4603      	mov	r3, r0
}
 8001316:	4618      	mov	r0, r3
 8001318:	3714      	adds	r7, #20
 800131a:	46bd      	mov	sp, r7
 800131c:	bd90      	pop	{r4, r7, pc}
 800131e:	bf00      	nop
 8001320:	3fb2b8b9 	.word	0x3fb2b8b9
 8001324:	41a00000 	.word	0x41a00000
 8001328:	41200000 	.word	0x41200000
 800132c:	41320000 	.word	0x41320000
 8001330:	c1a00000 	.word	0xc1a00000

08001334 <EaseOutBounce>:

static float EaseOutBounce(float t)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
    const float n1 = 7.5625f;
 800133c:	4b45      	ldr	r3, [pc, #276]	@ (8001454 <EaseOutBounce+0x120>)
 800133e:	60fb      	str	r3, [r7, #12]
    const float d1 = 2.75f;
 8001340:	4b45      	ldr	r3, [pc, #276]	@ (8001458 <EaseOutBounce+0x124>)
 8001342:	60bb      	str	r3, [r7, #8]

    if (t < 1 / d1)
 8001344:	68b9      	ldr	r1, [r7, #8]
 8001346:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800134a:	f7ff f8c1 	bl	80004d0 <__aeabi_fdiv>
 800134e:	4603      	mov	r3, r0
 8001350:	4619      	mov	r1, r3
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f7ff f9a6 	bl	80006a4 <__aeabi_fcmplt>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d00a      	beq.n	8001374 <EaseOutBounce+0x40>
    {
        return n1 * t * t;
 800135e:	6879      	ldr	r1, [r7, #4]
 8001360:	68f8      	ldr	r0, [r7, #12]
 8001362:	f7ff f801 	bl	8000368 <__aeabi_fmul>
 8001366:	4603      	mov	r3, r0
 8001368:	6879      	ldr	r1, [r7, #4]
 800136a:	4618      	mov	r0, r3
 800136c:	f7fe fffc 	bl	8000368 <__aeabi_fmul>
 8001370:	4603      	mov	r3, r0
 8001372:	e06a      	b.n	800144a <EaseOutBounce+0x116>
    }
    else if (t < 2 / d1)
 8001374:	68b9      	ldr	r1, [r7, #8]
 8001376:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800137a:	f7ff f8a9 	bl	80004d0 <__aeabi_fdiv>
 800137e:	4603      	mov	r3, r0
 8001380:	4619      	mov	r1, r3
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff f98e 	bl	80006a4 <__aeabi_fcmplt>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d01c      	beq.n	80013c8 <EaseOutBounce+0x94>
    {
        t -= 1.5f / d1;
 800138e:	68b9      	ldr	r1, [r7, #8]
 8001390:	f04f 507f 	mov.w	r0, #1069547520	@ 0x3fc00000
 8001394:	f7ff f89c 	bl	80004d0 <__aeabi_fdiv>
 8001398:	4603      	mov	r3, r0
 800139a:	4619      	mov	r1, r3
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f7fe fed9 	bl	8000154 <__aeabi_fsub>
 80013a2:	4603      	mov	r3, r0
 80013a4:	607b      	str	r3, [r7, #4]
        return n1 * t * t + 0.75f;
 80013a6:	6879      	ldr	r1, [r7, #4]
 80013a8:	68f8      	ldr	r0, [r7, #12]
 80013aa:	f7fe ffdd 	bl	8000368 <__aeabi_fmul>
 80013ae:	4603      	mov	r3, r0
 80013b0:	6879      	ldr	r1, [r7, #4]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7fe ffd8 	bl	8000368 <__aeabi_fmul>
 80013b8:	4603      	mov	r3, r0
 80013ba:	f04f 517d 	mov.w	r1, #1061158912	@ 0x3f400000
 80013be:	4618      	mov	r0, r3
 80013c0:	f7fe feca 	bl	8000158 <__addsf3>
 80013c4:	4603      	mov	r3, r0
 80013c6:	e040      	b.n	800144a <EaseOutBounce+0x116>
    }
    else if (t < 2.5f / d1)
 80013c8:	68b9      	ldr	r1, [r7, #8]
 80013ca:	4824      	ldr	r0, [pc, #144]	@ (800145c <EaseOutBounce+0x128>)
 80013cc:	f7ff f880 	bl	80004d0 <__aeabi_fdiv>
 80013d0:	4603      	mov	r3, r0
 80013d2:	4619      	mov	r1, r3
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f7ff f965 	bl	80006a4 <__aeabi_fcmplt>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d01a      	beq.n	8001416 <EaseOutBounce+0xe2>
    {
        t -= 2.25f / d1;
 80013e0:	68b9      	ldr	r1, [r7, #8]
 80013e2:	481f      	ldr	r0, [pc, #124]	@ (8001460 <EaseOutBounce+0x12c>)
 80013e4:	f7ff f874 	bl	80004d0 <__aeabi_fdiv>
 80013e8:	4603      	mov	r3, r0
 80013ea:	4619      	mov	r1, r3
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f7fe feb1 	bl	8000154 <__aeabi_fsub>
 80013f2:	4603      	mov	r3, r0
 80013f4:	607b      	str	r3, [r7, #4]
        return n1 * t * t + 0.9375f;
 80013f6:	6879      	ldr	r1, [r7, #4]
 80013f8:	68f8      	ldr	r0, [r7, #12]
 80013fa:	f7fe ffb5 	bl	8000368 <__aeabi_fmul>
 80013fe:	4603      	mov	r3, r0
 8001400:	6879      	ldr	r1, [r7, #4]
 8001402:	4618      	mov	r0, r3
 8001404:	f7fe ffb0 	bl	8000368 <__aeabi_fmul>
 8001408:	4603      	mov	r3, r0
 800140a:	4916      	ldr	r1, [pc, #88]	@ (8001464 <EaseOutBounce+0x130>)
 800140c:	4618      	mov	r0, r3
 800140e:	f7fe fea3 	bl	8000158 <__addsf3>
 8001412:	4603      	mov	r3, r0
 8001414:	e019      	b.n	800144a <EaseOutBounce+0x116>
    }
    else
    {
        t -= 2.625f / d1;
 8001416:	68b9      	ldr	r1, [r7, #8]
 8001418:	4813      	ldr	r0, [pc, #76]	@ (8001468 <EaseOutBounce+0x134>)
 800141a:	f7ff f859 	bl	80004d0 <__aeabi_fdiv>
 800141e:	4603      	mov	r3, r0
 8001420:	4619      	mov	r1, r3
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f7fe fe96 	bl	8000154 <__aeabi_fsub>
 8001428:	4603      	mov	r3, r0
 800142a:	607b      	str	r3, [r7, #4]
        return n1 * t * t + 0.984375f;
 800142c:	6879      	ldr	r1, [r7, #4]
 800142e:	68f8      	ldr	r0, [r7, #12]
 8001430:	f7fe ff9a 	bl	8000368 <__aeabi_fmul>
 8001434:	4603      	mov	r3, r0
 8001436:	6879      	ldr	r1, [r7, #4]
 8001438:	4618      	mov	r0, r3
 800143a:	f7fe ff95 	bl	8000368 <__aeabi_fmul>
 800143e:	4603      	mov	r3, r0
 8001440:	490a      	ldr	r1, [pc, #40]	@ (800146c <EaseOutBounce+0x138>)
 8001442:	4618      	mov	r0, r3
 8001444:	f7fe fe88 	bl	8000158 <__addsf3>
 8001448:	4603      	mov	r3, r0
    }
}
 800144a:	4618      	mov	r0, r3
 800144c:	3710      	adds	r7, #16
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40f20000 	.word	0x40f20000
 8001458:	40300000 	.word	0x40300000
 800145c:	40200000 	.word	0x40200000
 8001460:	40100000 	.word	0x40100000
 8001464:	3f700000 	.word	0x3f700000
 8001468:	40280000 	.word	0x40280000
 800146c:	3f7c0000 	.word	0x3f7c0000

08001470 <EaseInBounce>:

// 反弹缓动
static float EaseInBounce(float t)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
    return 1 - EaseOutBounce(1 - t);
 8001478:	6879      	ldr	r1, [r7, #4]
 800147a:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800147e:	f7fe fe69 	bl	8000154 <__aeabi_fsub>
 8001482:	4603      	mov	r3, r0
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff ff55 	bl	8001334 <EaseOutBounce>
 800148a:	4603      	mov	r3, r0
 800148c:	4619      	mov	r1, r3
 800148e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001492:	f7fe fe5f 	bl	8000154 <__aeabi_fsub>
 8001496:	4603      	mov	r3, r0
}
 8001498:	4618      	mov	r0, r3
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <EaseInOutBounce>:



static float EaseInOutBounce(float t)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
    if (t < 0.5f)
 80014a8:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f7ff f8f9 	bl	80006a4 <__aeabi_fcmplt>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d010      	beq.n	80014da <EaseInOutBounce+0x3a>
        return EaseInBounce(t * 2) * 0.5f;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	4619      	mov	r1, r3
 80014bc:	4618      	mov	r0, r3
 80014be:	f7fe fe4b 	bl	8000158 <__addsf3>
 80014c2:	4603      	mov	r3, r0
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff ffd3 	bl	8001470 <EaseInBounce>
 80014ca:	4603      	mov	r3, r0
 80014cc:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7fe ff49 	bl	8000368 <__aeabi_fmul>
 80014d6:	4603      	mov	r3, r0
 80014d8:	e01b      	b.n	8001512 <EaseInOutBounce+0x72>
    return EaseOutBounce(t * 2 - 1) * 0.5f + 0.5f;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4619      	mov	r1, r3
 80014de:	4618      	mov	r0, r3
 80014e0:	f7fe fe3a 	bl	8000158 <__addsf3>
 80014e4:	4603      	mov	r3, r0
 80014e6:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7fe fe32 	bl	8000154 <__aeabi_fsub>
 80014f0:	4603      	mov	r3, r0
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff ff1e 	bl	8001334 <EaseOutBounce>
 80014f8:	4603      	mov	r3, r0
 80014fa:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80014fe:	4618      	mov	r0, r3
 8001500:	f7fe ff32 	bl	8000368 <__aeabi_fmul>
 8001504:	4603      	mov	r3, r0
 8001506:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800150a:	4618      	mov	r0, r3
 800150c:	f7fe fe24 	bl	8000158 <__addsf3>
 8001510:	4603      	mov	r3, r0
}
 8001512:	4618      	mov	r0, r3
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
	...

0800151c <EaseInBack>:

// 背越式缓动
static float EaseInBack(float t)
{
 800151c:	b590      	push	{r4, r7, lr}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
    const float c1 = 1.70158f;
 8001524:	4b15      	ldr	r3, [pc, #84]	@ (800157c <EaseInBack+0x60>)
 8001526:	60fb      	str	r3, [r7, #12]
    const float c3 = c1 + 1;
 8001528:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800152c:	68f8      	ldr	r0, [r7, #12]
 800152e:	f7fe fe13 	bl	8000158 <__addsf3>
 8001532:	4603      	mov	r3, r0
 8001534:	60bb      	str	r3, [r7, #8]

    return c3 * t * t * t - c1 * t * t;
 8001536:	6879      	ldr	r1, [r7, #4]
 8001538:	68b8      	ldr	r0, [r7, #8]
 800153a:	f7fe ff15 	bl	8000368 <__aeabi_fmul>
 800153e:	4603      	mov	r3, r0
 8001540:	6879      	ldr	r1, [r7, #4]
 8001542:	4618      	mov	r0, r3
 8001544:	f7fe ff10 	bl	8000368 <__aeabi_fmul>
 8001548:	4603      	mov	r3, r0
 800154a:	6879      	ldr	r1, [r7, #4]
 800154c:	4618      	mov	r0, r3
 800154e:	f7fe ff0b 	bl	8000368 <__aeabi_fmul>
 8001552:	4603      	mov	r3, r0
 8001554:	461c      	mov	r4, r3
 8001556:	6879      	ldr	r1, [r7, #4]
 8001558:	68f8      	ldr	r0, [r7, #12]
 800155a:	f7fe ff05 	bl	8000368 <__aeabi_fmul>
 800155e:	4603      	mov	r3, r0
 8001560:	6879      	ldr	r1, [r7, #4]
 8001562:	4618      	mov	r0, r3
 8001564:	f7fe ff00 	bl	8000368 <__aeabi_fmul>
 8001568:	4603      	mov	r3, r0
 800156a:	4619      	mov	r1, r3
 800156c:	4620      	mov	r0, r4
 800156e:	f7fe fdf1 	bl	8000154 <__aeabi_fsub>
 8001572:	4603      	mov	r3, r0
}
 8001574:	4618      	mov	r0, r3
 8001576:	3714      	adds	r7, #20
 8001578:	46bd      	mov	sp, r7
 800157a:	bd90      	pop	{r4, r7, pc}
 800157c:	3fd9cd60 	.word	0x3fd9cd60

08001580 <EaseOutBack>:

static float EaseOutBack(float t)
{
 8001580:	b590      	push	{r4, r7, lr}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
    const float c1 = 1.70158f;
 8001588:	4b1c      	ldr	r3, [pc, #112]	@ (80015fc <EaseOutBack+0x7c>)
 800158a:	60fb      	str	r3, [r7, #12]
    const float c3 = c1 + 1;
 800158c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001590:	68f8      	ldr	r0, [r7, #12]
 8001592:	f7fe fde1 	bl	8000158 <__addsf3>
 8001596:	4603      	mov	r3, r0
 8001598:	60bb      	str	r3, [r7, #8]

    return 1 + c3 * powf(t - 1, 3) + c1 * powf(t - 1, 2);
 800159a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f7fe fdd8 	bl	8000154 <__aeabi_fsub>
 80015a4:	4603      	mov	r3, r0
 80015a6:	4916      	ldr	r1, [pc, #88]	@ (8001600 <EaseOutBack+0x80>)
 80015a8:	4618      	mov	r0, r3
 80015aa:	f001 ff95 	bl	80034d8 <powf>
 80015ae:	4603      	mov	r3, r0
 80015b0:	68b9      	ldr	r1, [r7, #8]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7fe fed8 	bl	8000368 <__aeabi_fmul>
 80015b8:	4603      	mov	r3, r0
 80015ba:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80015be:	4618      	mov	r0, r3
 80015c0:	f7fe fdca 	bl	8000158 <__addsf3>
 80015c4:	4603      	mov	r3, r0
 80015c6:	461c      	mov	r4, r3
 80015c8:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f7fe fdc1 	bl	8000154 <__aeabi_fsub>
 80015d2:	4603      	mov	r3, r0
 80015d4:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80015d8:	4618      	mov	r0, r3
 80015da:	f001 ff7d 	bl	80034d8 <powf>
 80015de:	4603      	mov	r3, r0
 80015e0:	68f9      	ldr	r1, [r7, #12]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7fe fec0 	bl	8000368 <__aeabi_fmul>
 80015e8:	4603      	mov	r3, r0
 80015ea:	4619      	mov	r1, r3
 80015ec:	4620      	mov	r0, r4
 80015ee:	f7fe fdb3 	bl	8000158 <__addsf3>
 80015f2:	4603      	mov	r3, r0
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3714      	adds	r7, #20
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd90      	pop	{r4, r7, pc}
 80015fc:	3fd9cd60 	.word	0x3fd9cd60
 8001600:	40400000 	.word	0x40400000

08001604 <EaseInOutBack>:

static float EaseInOutBack(float t)
{
 8001604:	b5b0      	push	{r4, r5, r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
    const float c1 = 1.70158f;
 800160c:	4b40      	ldr	r3, [pc, #256]	@ (8001710 <EaseInOutBack+0x10c>)
 800160e:	60fb      	str	r3, [r7, #12]
    const float c2 = c1 * 1.525f;
 8001610:	4940      	ldr	r1, [pc, #256]	@ (8001714 <EaseInOutBack+0x110>)
 8001612:	68f8      	ldr	r0, [r7, #12]
 8001614:	f7fe fea8 	bl	8000368 <__aeabi_fmul>
 8001618:	4603      	mov	r3, r0
 800161a:	60bb      	str	r3, [r7, #8]

    if (t < 0.5f)
 800161c:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f7ff f83f 	bl	80006a4 <__aeabi_fcmplt>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d02c      	beq.n	8001686 <EaseInOutBack+0x82>
        return (powf(2 * t, 2) * ((c2 + 1) * 2 * t - c2)) / 2;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4619      	mov	r1, r3
 8001630:	4618      	mov	r0, r3
 8001632:	f7fe fd91 	bl	8000158 <__addsf3>
 8001636:	4603      	mov	r3, r0
 8001638:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800163c:	4618      	mov	r0, r3
 800163e:	f001 ff4b 	bl	80034d8 <powf>
 8001642:	4604      	mov	r4, r0
 8001644:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001648:	68b8      	ldr	r0, [r7, #8]
 800164a:	f7fe fd85 	bl	8000158 <__addsf3>
 800164e:	4603      	mov	r3, r0
 8001650:	4619      	mov	r1, r3
 8001652:	4618      	mov	r0, r3
 8001654:	f7fe fd80 	bl	8000158 <__addsf3>
 8001658:	4603      	mov	r3, r0
 800165a:	6879      	ldr	r1, [r7, #4]
 800165c:	4618      	mov	r0, r3
 800165e:	f7fe fe83 	bl	8000368 <__aeabi_fmul>
 8001662:	4603      	mov	r3, r0
 8001664:	68b9      	ldr	r1, [r7, #8]
 8001666:	4618      	mov	r0, r3
 8001668:	f7fe fd74 	bl	8000154 <__aeabi_fsub>
 800166c:	4603      	mov	r3, r0
 800166e:	4619      	mov	r1, r3
 8001670:	4620      	mov	r0, r4
 8001672:	f7fe fe79 	bl	8000368 <__aeabi_fmul>
 8001676:	4603      	mov	r3, r0
 8001678:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800167c:	4618      	mov	r0, r3
 800167e:	f7fe ff27 	bl	80004d0 <__aeabi_fdiv>
 8001682:	4603      	mov	r3, r0
 8001684:	e03f      	b.n	8001706 <EaseInOutBack+0x102>
    return (powf(2 * t - 2, 2) * ((c2 + 1) * (t * 2 - 2) + c2) + 2) / 2;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4619      	mov	r1, r3
 800168a:	4618      	mov	r0, r3
 800168c:	f7fe fd64 	bl	8000158 <__addsf3>
 8001690:	4603      	mov	r3, r0
 8001692:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001696:	4618      	mov	r0, r3
 8001698:	f7fe fd5c 	bl	8000154 <__aeabi_fsub>
 800169c:	4603      	mov	r3, r0
 800169e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80016a2:	4618      	mov	r0, r3
 80016a4:	f001 ff18 	bl	80034d8 <powf>
 80016a8:	4604      	mov	r4, r0
 80016aa:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80016ae:	68b8      	ldr	r0, [r7, #8]
 80016b0:	f7fe fd52 	bl	8000158 <__addsf3>
 80016b4:	4603      	mov	r3, r0
 80016b6:	461d      	mov	r5, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4619      	mov	r1, r3
 80016bc:	4618      	mov	r0, r3
 80016be:	f7fe fd4b 	bl	8000158 <__addsf3>
 80016c2:	4603      	mov	r3, r0
 80016c4:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7fe fd43 	bl	8000154 <__aeabi_fsub>
 80016ce:	4603      	mov	r3, r0
 80016d0:	4619      	mov	r1, r3
 80016d2:	4628      	mov	r0, r5
 80016d4:	f7fe fe48 	bl	8000368 <__aeabi_fmul>
 80016d8:	4603      	mov	r3, r0
 80016da:	68b9      	ldr	r1, [r7, #8]
 80016dc:	4618      	mov	r0, r3
 80016de:	f7fe fd3b 	bl	8000158 <__addsf3>
 80016e2:	4603      	mov	r3, r0
 80016e4:	4619      	mov	r1, r3
 80016e6:	4620      	mov	r0, r4
 80016e8:	f7fe fe3e 	bl	8000368 <__aeabi_fmul>
 80016ec:	4603      	mov	r3, r0
 80016ee:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7fe fd30 	bl	8000158 <__addsf3>
 80016f8:	4603      	mov	r3, r0
 80016fa:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80016fe:	4618      	mov	r0, r3
 8001700:	f7fe fee6 	bl	80004d0 <__aeabi_fdiv>
 8001704:	4603      	mov	r3, r0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bdb0      	pop	{r4, r5, r7, pc}
 800170e:	bf00      	nop
 8001710:	3fd9cd60 	.word	0x3fd9cd60
 8001714:	3fc33333 	.word	0x3fc33333

08001718 <EaseInSine>:

// 正弦缓动
static float EaseInSine(float t)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
    return 1 - cosf((t * 3.14159f) / 2);
 8001720:	490c      	ldr	r1, [pc, #48]	@ (8001754 <EaseInSine+0x3c>)
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f7fe fe20 	bl	8000368 <__aeabi_fmul>
 8001728:	4603      	mov	r3, r0
 800172a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800172e:	4618      	mov	r0, r3
 8001730:	f7fe fece 	bl	80004d0 <__aeabi_fdiv>
 8001734:	4603      	mov	r3, r0
 8001736:	4618      	mov	r0, r3
 8001738:	f001 ff36 	bl	80035a8 <cosf>
 800173c:	4603      	mov	r3, r0
 800173e:	4619      	mov	r1, r3
 8001740:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001744:	f7fe fd06 	bl	8000154 <__aeabi_fsub>
 8001748:	4603      	mov	r3, r0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40490fd0 	.word	0x40490fd0

08001758 <EaseOutSine>:

static float EaseOutSine(float t)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
    return sinf((t * 3.14159f) / 2);
 8001760:	4909      	ldr	r1, [pc, #36]	@ (8001788 <EaseOutSine+0x30>)
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f7fe fe00 	bl	8000368 <__aeabi_fmul>
 8001768:	4603      	mov	r3, r0
 800176a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800176e:	4618      	mov	r0, r3
 8001770:	f7fe feae 	bl	80004d0 <__aeabi_fdiv>
 8001774:	4603      	mov	r3, r0
 8001776:	4618      	mov	r0, r3
 8001778:	f001 ff4e 	bl	8003618 <sinf>
 800177c:	4603      	mov	r3, r0
}
 800177e:	4618      	mov	r0, r3
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40490fd0 	.word	0x40490fd0

0800178c <EaseInOutSine>:

static float EaseInOutSine(float t)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
    return -(cosf(3.14159f * t) - 1) / 2;
 8001794:	490d      	ldr	r1, [pc, #52]	@ (80017cc <EaseInOutSine+0x40>)
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f7fe fde6 	bl	8000368 <__aeabi_fmul>
 800179c:	4603      	mov	r3, r0
 800179e:	4618      	mov	r0, r3
 80017a0:	f001 ff02 	bl	80035a8 <cosf>
 80017a4:	4603      	mov	r3, r0
 80017a6:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7fe fcd2 	bl	8000154 <__aeabi_fsub>
 80017b0:	4603      	mov	r3, r0
 80017b2:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80017b6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7fe fe88 	bl	80004d0 <__aeabi_fdiv>
 80017c0:	4603      	mov	r3, r0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40490fd0 	.word	0x40490fd0

080017d0 <GetEaseValue>:

static float GetEaseValue(float progress, EaseType_t easeType)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	460b      	mov	r3, r1
 80017da:	70fb      	strb	r3, [r7, #3]
    switch (easeType)
 80017dc:	78fb      	ldrb	r3, [r7, #3]
 80017de:	2b18      	cmp	r3, #24
 80017e0:	f200 80b3 	bhi.w	800194a <GetEaseValue+0x17a>
 80017e4:	a201      	add	r2, pc, #4	@ (adr r2, 80017ec <GetEaseValue+0x1c>)
 80017e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ea:	bf00      	nop
 80017ec:	08001851 	.word	0x08001851
 80017f0:	0800185b 	.word	0x0800185b
 80017f4:	08001865 	.word	0x08001865
 80017f8:	0800186f 	.word	0x0800186f
 80017fc:	08001879 	.word	0x08001879
 8001800:	08001883 	.word	0x08001883
 8001804:	0800188d 	.word	0x0800188d
 8001808:	08001897 	.word	0x08001897
 800180c:	080018a1 	.word	0x080018a1
 8001810:	080018ab 	.word	0x080018ab
 8001814:	080018b5 	.word	0x080018b5
 8001818:	080018bf 	.word	0x080018bf
 800181c:	080018c9 	.word	0x080018c9
 8001820:	080018d3 	.word	0x080018d3
 8001824:	080018dd 	.word	0x080018dd
 8001828:	080018e7 	.word	0x080018e7
 800182c:	080018f1 	.word	0x080018f1
 8001830:	080018fb 	.word	0x080018fb
 8001834:	08001905 	.word	0x08001905
 8001838:	0800190f 	.word	0x0800190f
 800183c:	08001919 	.word	0x08001919
 8001840:	08001923 	.word	0x08001923
 8001844:	0800192d 	.word	0x0800192d
 8001848:	08001937 	.word	0x08001937
 800184c:	08001941 	.word	0x08001941
    {
    case EASE_LINEAR:
        return EaseLinear(progress);
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f7ff fa16 	bl	8000c82 <EaseLinear>
 8001856:	4603      	mov	r3, r0
 8001858:	e078      	b.n	800194c <GetEaseValue+0x17c>
    case EASE_IN_QUAD:
        return EaseInQuad(progress);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f7ff fa1b 	bl	8000c96 <EaseInQuad>
 8001860:	4603      	mov	r3, r0
 8001862:	e073      	b.n	800194c <GetEaseValue+0x17c>
    case EASE_OUT_QUAD:
        return EaseOutQuad(progress);
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f7ff fa23 	bl	8000cb0 <EaseOutQuad>
 800186a:	4603      	mov	r3, r0
 800186c:	e06e      	b.n	800194c <GetEaseValue+0x17c>
    case EASE_INOUT_QUAD:
        return EaseInOutQuad(progress);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f7ff fa31 	bl	8000cd6 <EaseInOutQuad>
 8001874:	4603      	mov	r3, r0
 8001876:	e069      	b.n	800194c <GetEaseValue+0x17c>
    case EASE_IN_CUBIC:
        return EaseInCubic(progress);
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f7ff fa5f 	bl	8000d3c <EaseInCubic>
 800187e:	4603      	mov	r3, r0
 8001880:	e064      	b.n	800194c <GetEaseValue+0x17c>
    case EASE_OUT_CUBIC:
        return EaseOutCubic(progress);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f7ff fa6c 	bl	8000d60 <EaseOutCubic>
 8001888:	4603      	mov	r3, r0
 800188a:	e05f      	b.n	800194c <GetEaseValue+0x17c>
    case EASE_INOUT_CUBIC:
        return EaseInOutCubic(progress);
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f7ff fa86 	bl	8000d9e <EaseInOutCubic>
 8001892:	4603      	mov	r3, r0
 8001894:	e05a      	b.n	800194c <GetEaseValue+0x17c>
    // 新添加的缓动函数
    case EASE_IN_EXPO:
        return EaseInExpo(progress);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f7ff fad2 	bl	8000e40 <EaseInExpo>
 800189c:	4603      	mov	r3, r0
 800189e:	e055      	b.n	800194c <GetEaseValue+0x17c>
    case EASE_OUT_EXPO:
        return EaseOutExpo(progress);
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f7ff faf3 	bl	8000e8c <EaseOutExpo>
 80018a6:	4603      	mov	r3, r0
 80018a8:	e050      	b.n	800194c <GetEaseValue+0x17c>
    case EASE_INOUT_EXPO:
        return EaseInOutExpo(progress);
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f7ff fb14 	bl	8000ed8 <EaseInOutExpo>
 80018b0:	4603      	mov	r3, r0
 80018b2:	e04b      	b.n	800194c <GetEaseValue+0x17c>
    case EASE_IN_CIRC:
        return EaseInCirc(progress);
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f7ff fb6f 	bl	8000f98 <EaseInCirc>
 80018ba:	4603      	mov	r3, r0
 80018bc:	e046      	b.n	800194c <GetEaseValue+0x17c>
    case EASE_OUT_CIRC:
        return EaseOutCirc(progress);
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f7ff fb87 	bl	8000fd2 <EaseOutCirc>
 80018c4:	4603      	mov	r3, r0
 80018c6:	e041      	b.n	800194c <GetEaseValue+0x17c>
    case EASE_INOUT_CIRC:
        return EaseInOutCirc(progress);
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f7ff fba0 	bl	800100e <EaseInOutCirc>
 80018ce:	4603      	mov	r3, r0
 80018d0:	e03c      	b.n	800194c <GetEaseValue+0x17c>
    case EASE_IN_ELASTIC:
        return EaseInElastic(progress);
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f7ff fbf6 	bl	80010c4 <EaseInElastic>
 80018d8:	4603      	mov	r3, r0
 80018da:	e037      	b.n	800194c <GetEaseValue+0x17c>
    case EASE_OUT_ELASTIC:
        return EaseOutElastic(progress);
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f7ff fc41 	bl	8001164 <EaseOutElastic>
 80018e2:	4603      	mov	r3, r0
 80018e4:	e032      	b.n	800194c <GetEaseValue+0x17c>
    case EASE_INOUT_ELASTIC:
        return EaseInOutElastic(progress);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f7ff fc8c 	bl	8001204 <EaseInOutElastic>
 80018ec:	4603      	mov	r3, r0
 80018ee:	e02d      	b.n	800194c <GetEaseValue+0x17c>
    case EASE_IN_BOUNCE:
        return EaseInBounce(progress);
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f7ff fdbd 	bl	8001470 <EaseInBounce>
 80018f6:	4603      	mov	r3, r0
 80018f8:	e028      	b.n	800194c <GetEaseValue+0x17c>
    case EASE_OUT_BOUNCE:
        return EaseOutBounce(progress);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f7ff fd1a 	bl	8001334 <EaseOutBounce>
 8001900:	4603      	mov	r3, r0
 8001902:	e023      	b.n	800194c <GetEaseValue+0x17c>
    case EASE_INOUT_BOUNCE:
        return EaseInOutBounce(progress);
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f7ff fdcb 	bl	80014a0 <EaseInOutBounce>
 800190a:	4603      	mov	r3, r0
 800190c:	e01e      	b.n	800194c <GetEaseValue+0x17c>
    case EASE_IN_BACK:
        return EaseInBack(progress);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f7ff fe04 	bl	800151c <EaseInBack>
 8001914:	4603      	mov	r3, r0
 8001916:	e019      	b.n	800194c <GetEaseValue+0x17c>
    case EASE_OUT_BACK:
        return EaseOutBack(progress);
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f7ff fe31 	bl	8001580 <EaseOutBack>
 800191e:	4603      	mov	r3, r0
 8001920:	e014      	b.n	800194c <GetEaseValue+0x17c>
    case EASE_INOUT_BACK:
        return EaseInOutBack(progress);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f7ff fe6e 	bl	8001604 <EaseInOutBack>
 8001928:	4603      	mov	r3, r0
 800192a:	e00f      	b.n	800194c <GetEaseValue+0x17c>
    case EASE_IN_SINE:
        return EaseInSine(progress);
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f7ff fef3 	bl	8001718 <EaseInSine>
 8001932:	4603      	mov	r3, r0
 8001934:	e00a      	b.n	800194c <GetEaseValue+0x17c>
    case EASE_OUT_SINE:
        return EaseOutSine(progress);
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f7ff ff0e 	bl	8001758 <EaseOutSine>
 800193c:	4603      	mov	r3, r0
 800193e:	e005      	b.n	800194c <GetEaseValue+0x17c>
    case EASE_INOUT_SINE:
        return EaseInOutSine(progress);
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f7ff ff23 	bl	800178c <EaseInOutSine>
 8001946:	4603      	mov	r3, r0
 8001948:	e000      	b.n	800194c <GetEaseValue+0x17c>
    default:
        return progress;
 800194a:	687b      	ldr	r3, [r7, #4]
    }
}
 800194c:	4618      	mov	r0, r3
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <OLED_InitAnimation>:

// 初始化动画
void OLED_InitAnimation(Animation_t *anim, float startValue, float endValue,
                        uint32_t duration, EaseType_t easeType)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
 8001960:	603b      	str	r3, [r7, #0]
    anim->startTime = HAL_GetTick();
 8001962:	f000 fa33 	bl	8001dcc <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	601a      	str	r2, [r3, #0]
    anim->duration = duration;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	683a      	ldr	r2, [r7, #0]
 8001970:	605a      	str	r2, [r3, #4]
    anim->startValue = startValue;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	68ba      	ldr	r2, [r7, #8]
 8001976:	609a      	str	r2, [r3, #8]
    anim->endValue = endValue;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	60da      	str	r2, [r3, #12]
    anim->currentValue = startValue;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	68ba      	ldr	r2, [r7, #8]
 8001982:	611a      	str	r2, [r3, #16]
    anim->isActive = 1;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2201      	movs	r2, #1
 8001988:	751a      	strb	r2, [r3, #20]
    anim->easeType = easeType;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	7e3a      	ldrb	r2, [r7, #24]
 800198e:	755a      	strb	r2, [r3, #21]
}
 8001990:	bf00      	nop
 8001992:	3710      	adds	r7, #16
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}

08001998 <OLED_UpdateAnimation>:

// 更新动画状态
uint8_t OLED_UpdateAnimation(Animation_t *anim, uint32_t currentTime)
{
 8001998:	b590      	push	{r4, r7, lr}
 800199a:	b087      	sub	sp, #28
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
    if (!anim->isActive)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	7d1b      	ldrb	r3, [r3, #20]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d101      	bne.n	80019ae <OLED_UpdateAnimation+0x16>
        return 0;
 80019aa:	2300      	movs	r3, #0
 80019ac:	e042      	b.n	8001a34 <OLED_UpdateAnimation+0x9c>

    uint32_t elapsedTime = currentTime - anim->startTime;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	683a      	ldr	r2, [r7, #0]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	617b      	str	r3, [r7, #20]

    // 动画完成
    if (elapsedTime >= anim->duration)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	697a      	ldr	r2, [r7, #20]
 80019be:	429a      	cmp	r2, r3
 80019c0:	d308      	bcc.n	80019d4 <OLED_UpdateAnimation+0x3c>
    {
        anim->currentValue = anim->endValue;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	68da      	ldr	r2, [r3, #12]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	611a      	str	r2, [r3, #16]
        anim->isActive = 0;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	751a      	strb	r2, [r3, #20]
        return 0;
 80019d0:	2300      	movs	r3, #0
 80019d2:	e02f      	b.n	8001a34 <OLED_UpdateAnimation+0x9c>
    }

    // 计算当前进度 (0.0 - 1.0)
    float progress = (float)elapsedTime / anim->duration;
 80019d4:	6978      	ldr	r0, [r7, #20]
 80019d6:	f7fe fc6f 	bl	80002b8 <__aeabi_ui2f>
 80019da:	4604      	mov	r4, r0
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7fe fc69 	bl	80002b8 <__aeabi_ui2f>
 80019e6:	4603      	mov	r3, r0
 80019e8:	4619      	mov	r1, r3
 80019ea:	4620      	mov	r0, r4
 80019ec:	f7fe fd70 	bl	80004d0 <__aeabi_fdiv>
 80019f0:	4603      	mov	r3, r0
 80019f2:	613b      	str	r3, [r7, #16]

    // 应用缓动函数
    float easedProgress = GetEaseValue(progress, anim->easeType);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	7d5b      	ldrb	r3, [r3, #21]
 80019f8:	4619      	mov	r1, r3
 80019fa:	6938      	ldr	r0, [r7, #16]
 80019fc:	f7ff fee8 	bl	80017d0 <GetEaseValue>
 8001a00:	60f8      	str	r0, [r7, #12]

    // 计算当前值
    anim->currentValue = anim->startValue + (anim->endValue - anim->startValue) * easedProgress;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	689c      	ldr	r4, [r3, #8]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	68da      	ldr	r2, [r3, #12]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4610      	mov	r0, r2
 8001a12:	f7fe fb9f 	bl	8000154 <__aeabi_fsub>
 8001a16:	4603      	mov	r3, r0
 8001a18:	68f9      	ldr	r1, [r7, #12]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7fe fca4 	bl	8000368 <__aeabi_fmul>
 8001a20:	4603      	mov	r3, r0
 8001a22:	4619      	mov	r1, r3
 8001a24:	4620      	mov	r0, r4
 8001a26:	f7fe fb97 	bl	8000158 <__addsf3>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	611a      	str	r2, [r3, #16]

    return 1;
 8001a32:	2301      	movs	r3, #1
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	371c      	adds	r7, #28
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd90      	pop	{r4, r7, pc}

08001a3c <OLED_GetAnimationValue>:

// 获取当前动画值
float OLED_GetAnimationValue(Animation_t *anim)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
    return anim->currentValue;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	691b      	ldr	r3, [r3, #16]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bc80      	pop	{r7}
 8001a50:	4770      	bx	lr
	...

08001a54 <InitBlockAnimation>:

Animation_t blockXAnim, blockYAnim;
// 初始化方块动画
void InitBlockAnimation()
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af02      	add	r7, sp, #8
    // 设置方块从(0,0)移动到(100,40)，持续2秒，使用缓出三次方缓动
    OLED_InitAnimation(&blockXAnim, 0, 100, 2000, EASE_OUT_BOUNCE);
 8001a5a:	2311      	movs	r3, #17
 8001a5c:	9300      	str	r3, [sp, #0]
 8001a5e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001a62:	4a09      	ldr	r2, [pc, #36]	@ (8001a88 <InitBlockAnimation+0x34>)
 8001a64:	f04f 0100 	mov.w	r1, #0
 8001a68:	4808      	ldr	r0, [pc, #32]	@ (8001a8c <InitBlockAnimation+0x38>)
 8001a6a:	f7ff ff73 	bl	8001954 <OLED_InitAnimation>
    OLED_InitAnimation(&blockYAnim, 0, 40, 2000, EASE_OUT_CUBIC);
 8001a6e:	2305      	movs	r3, #5
 8001a70:	9300      	str	r3, [sp, #0]
 8001a72:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001a76:	4a06      	ldr	r2, [pc, #24]	@ (8001a90 <InitBlockAnimation+0x3c>)
 8001a78:	f04f 0100 	mov.w	r1, #0
 8001a7c:	4805      	ldr	r0, [pc, #20]	@ (8001a94 <InitBlockAnimation+0x40>)
 8001a7e:	f7ff ff69 	bl	8001954 <OLED_InitAnimation>
}
 8001a82:	bf00      	nop
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	42c80000 	.word	0x42c80000
 8001a8c:	200008d4 	.word	0x200008d4
 8001a90:	42200000 	.word	0x42200000
 8001a94:	200008ec 	.word	0x200008ec

08001a98 <UpdateAndDrawBlock>:

// 更新并绘制方块
void UpdateAndDrawBlock()
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
    uint32_t currentTime = HAL_GetTick();
 8001a9e:	f000 f995 	bl	8001dcc <HAL_GetTick>
 8001aa2:	6078      	str	r0, [r7, #4]

    // 更新动画
    OLED_UpdateAnimation(&blockXAnim, currentTime);
 8001aa4:	6879      	ldr	r1, [r7, #4]
 8001aa6:	4813      	ldr	r0, [pc, #76]	@ (8001af4 <UpdateAndDrawBlock+0x5c>)
 8001aa8:	f7ff ff76 	bl	8001998 <OLED_UpdateAnimation>
    OLED_UpdateAnimation(&blockYAnim, currentTime);
 8001aac:	6879      	ldr	r1, [r7, #4]
 8001aae:	4812      	ldr	r0, [pc, #72]	@ (8001af8 <UpdateAndDrawBlock+0x60>)
 8001ab0:	f7ff ff72 	bl	8001998 <OLED_UpdateAnimation>

    // 获取当前位置
    uint8_t x = (uint8_t)OLED_GetAnimationValue(&blockXAnim);
 8001ab4:	480f      	ldr	r0, [pc, #60]	@ (8001af4 <UpdateAndDrawBlock+0x5c>)
 8001ab6:	f7ff ffc1 	bl	8001a3c <OLED_GetAnimationValue>
 8001aba:	4603      	mov	r3, r0
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7fe fe55 	bl	800076c <__aeabi_f2uiz>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	70fb      	strb	r3, [r7, #3]
    uint8_t y = (uint8_t)OLED_GetAnimationValue(&blockYAnim);
 8001ac6:	480c      	ldr	r0, [pc, #48]	@ (8001af8 <UpdateAndDrawBlock+0x60>)
 8001ac8:	f7ff ffb8 	bl	8001a3c <OLED_GetAnimationValue>
 8001acc:	4603      	mov	r3, r0
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7fe fe4c 	bl	800076c <__aeabi_f2uiz>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	70bb      	strb	r3, [r7, #2]

    // 清空缓冲区
    OLED_ClearBuffer();
 8001ad8:	f7fe ff90 	bl	80009fc <OLED_ClearBuffer>

    // 绘制方块
    OLED_DrawRectangle(x, y, 20, 20); // 绘制方块
 8001adc:	78b9      	ldrb	r1, [r7, #2]
 8001ade:	78f8      	ldrb	r0, [r7, #3]
 8001ae0:	2314      	movs	r3, #20
 8001ae2:	2214      	movs	r2, #20
 8001ae4:	f000 f820 	bl	8001b28 <OLED_DrawRectangle>

    // 更新显示
    OLED_UpdateDisplayVSync();
 8001ae8:	f7fe ffb4 	bl	8000a54 <OLED_UpdateDisplayVSync>
}
 8001aec:	bf00      	nop
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	200008d4 	.word	0x200008d4
 8001af8:	200008ec 	.word	0x200008ec

08001afc <AnimationLoop>:

// 在主循环中调用
void AnimationLoop()
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
    InitBlockAnimation();
 8001b00:	f7ff ffa8 	bl	8001a54 <InitBlockAnimation>

    while (1)
    {
        UpdateAndDrawBlock();
 8001b04:	f7ff ffc8 	bl	8001a98 <UpdateAndDrawBlock>

        // 如果动画已完成，可以重新开始或执行其他操作
        if (!blockXAnim.isActive && !blockYAnim.isActive)
 8001b08:	4b05      	ldr	r3, [pc, #20]	@ (8001b20 <AnimationLoop+0x24>)
 8001b0a:	7d1b      	ldrb	r3, [r3, #20]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d1f9      	bne.n	8001b04 <AnimationLoop+0x8>
 8001b10:	4b04      	ldr	r3, [pc, #16]	@ (8001b24 <AnimationLoop+0x28>)
 8001b12:	7d1b      	ldrb	r3, [r3, #20]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d000      	beq.n	8001b1a <AnimationLoop+0x1e>
        UpdateAndDrawBlock();
 8001b18:	e7f4      	b.n	8001b04 <AnimationLoop+0x8>
        {
            // 重新开始动画或执行其他操作
            // InitBlockAnimation();
            break;
 8001b1a:	bf00      	nop
        }
    }
}
 8001b1c:	bf00      	nop
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	200008d4 	.word	0x200008d4
 8001b24:	200008ec 	.word	0x200008ec

08001b28 <OLED_DrawRectangle>:
    }
}

// 绘制空心矩形
void OLED_DrawRectangle(uint8_t x, uint8_t y, uint8_t width, uint8_t height) //! UPDATEDISPLAY REQUIRED
{
 8001b28:	b590      	push	{r4, r7, lr}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	4604      	mov	r4, r0
 8001b30:	4608      	mov	r0, r1
 8001b32:	4611      	mov	r1, r2
 8001b34:	461a      	mov	r2, r3
 8001b36:	4623      	mov	r3, r4
 8001b38:	71fb      	strb	r3, [r7, #7]
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	71bb      	strb	r3, [r7, #6]
 8001b3e:	460b      	mov	r3, r1
 8001b40:	717b      	strb	r3, [r7, #5]
 8001b42:	4613      	mov	r3, r2
 8001b44:	713b      	strb	r3, [r7, #4]
    // 基础边界检查和裁剪
    if (x >= OLED_WIDTH || y >= OLED_HEIGHT || width == 0 || height == 0)
 8001b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	db57      	blt.n	8001bfe <OLED_DrawRectangle+0xd6>
 8001b4e:	79bb      	ldrb	r3, [r7, #6]
 8001b50:	2b3f      	cmp	r3, #63	@ 0x3f
 8001b52:	d854      	bhi.n	8001bfe <OLED_DrawRectangle+0xd6>
 8001b54:	797b      	ldrb	r3, [r7, #5]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d051      	beq.n	8001bfe <OLED_DrawRectangle+0xd6>
 8001b5a:	793b      	ldrb	r3, [r7, #4]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d04e      	beq.n	8001bfe <OLED_DrawRectangle+0xd6>
        return;
    if (x + width > OLED_WIDTH)
 8001b60:	79fa      	ldrb	r2, [r7, #7]
 8001b62:	797b      	ldrb	r3, [r7, #5]
 8001b64:	4413      	add	r3, r2
 8001b66:	2b80      	cmp	r3, #128	@ 0x80
 8001b68:	dd06      	ble.n	8001b78 <OLED_DrawRectangle+0x50>
        width = OLED_WIDTH - x;
 8001b6a:	79fb      	ldrb	r3, [r7, #7]
 8001b6c:	f1c3 23ff 	rsb	r3, r3, #4278255360	@ 0xff00ff00
 8001b70:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 8001b74:	3380      	adds	r3, #128	@ 0x80
 8001b76:	717b      	strb	r3, [r7, #5]
    if (y + height > OLED_HEIGHT)
 8001b78:	79ba      	ldrb	r2, [r7, #6]
 8001b7a:	793b      	ldrb	r3, [r7, #4]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	2b40      	cmp	r3, #64	@ 0x40
 8001b80:	dd03      	ble.n	8001b8a <OLED_DrawRectangle+0x62>
        height = OLED_HEIGHT - y;
 8001b82:	79bb      	ldrb	r3, [r7, #6]
 8001b84:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8001b88:	713b      	strb	r3, [r7, #4]

    uint8_t x2 = x + width - 1;
 8001b8a:	79fa      	ldrb	r2, [r7, #7]
 8001b8c:	797b      	ldrb	r3, [r7, #5]
 8001b8e:	4413      	add	r3, r2
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	3b01      	subs	r3, #1
 8001b94:	737b      	strb	r3, [r7, #13]
    uint8_t y2 = y + height - 1;
 8001b96:	79ba      	ldrb	r2, [r7, #6]
 8001b98:	793b      	ldrb	r3, [r7, #4]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	733b      	strb	r3, [r7, #12]

    // 绘制水平线
    for (uint8_t i = x; i <= x2; i++)
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
 8001ba4:	73fb      	strb	r3, [r7, #15]
 8001ba6:	e00e      	b.n	8001bc6 <OLED_DrawRectangle+0x9e>
    {
        OLED_WritePixel(i, y, 1);  // 顶线
 8001ba8:	79b9      	ldrb	r1, [r7, #6]
 8001baa:	7bfb      	ldrb	r3, [r7, #15]
 8001bac:	2201      	movs	r2, #1
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7fe ffaa 	bl	8000b08 <OLED_WritePixel>
        OLED_WritePixel(i, y2, 1); // 底线
 8001bb4:	7b39      	ldrb	r1, [r7, #12]
 8001bb6:	7bfb      	ldrb	r3, [r7, #15]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7fe ffa4 	bl	8000b08 <OLED_WritePixel>
    for (uint8_t i = x; i <= x2; i++)
 8001bc0:	7bfb      	ldrb	r3, [r7, #15]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	73fb      	strb	r3, [r7, #15]
 8001bc6:	7bfa      	ldrb	r2, [r7, #15]
 8001bc8:	7b7b      	ldrb	r3, [r7, #13]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d9ec      	bls.n	8001ba8 <OLED_DrawRectangle+0x80>
    }

    // 绘制垂直线
    for (uint8_t j = y + 1; j < y2; j++)
 8001bce:	79bb      	ldrb	r3, [r7, #6]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	73bb      	strb	r3, [r7, #14]
 8001bd4:	e00e      	b.n	8001bf4 <OLED_DrawRectangle+0xcc>
    {
        OLED_WritePixel(x, j, 1);  // 左线
 8001bd6:	7bb9      	ldrb	r1, [r7, #14]
 8001bd8:	79fb      	ldrb	r3, [r7, #7]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7fe ff93 	bl	8000b08 <OLED_WritePixel>
        OLED_WritePixel(x2, j, 1); // 右线
 8001be2:	7bb9      	ldrb	r1, [r7, #14]
 8001be4:	7b7b      	ldrb	r3, [r7, #13]
 8001be6:	2201      	movs	r2, #1
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7fe ff8d 	bl	8000b08 <OLED_WritePixel>
    for (uint8_t j = y + 1; j < y2; j++)
 8001bee:	7bbb      	ldrb	r3, [r7, #14]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	73bb      	strb	r3, [r7, #14]
 8001bf4:	7bba      	ldrb	r2, [r7, #14]
 8001bf6:	7b3b      	ldrb	r3, [r7, #12]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d3ec      	bcc.n	8001bd6 <OLED_DrawRectangle+0xae>
 8001bfc:	e000      	b.n	8001c00 <OLED_DrawRectangle+0xd8>
        return;
 8001bfe:	bf00      	nop
    }
}
 8001c00:	3714      	adds	r7, #20
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd90      	pop	{r4, r7, pc}
	...

08001c08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c0e:	4b15      	ldr	r3, [pc, #84]	@ (8001c64 <HAL_MspInit+0x5c>)
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	4a14      	ldr	r2, [pc, #80]	@ (8001c64 <HAL_MspInit+0x5c>)
 8001c14:	f043 0301 	orr.w	r3, r3, #1
 8001c18:	6193      	str	r3, [r2, #24]
 8001c1a:	4b12      	ldr	r3, [pc, #72]	@ (8001c64 <HAL_MspInit+0x5c>)
 8001c1c:	699b      	ldr	r3, [r3, #24]
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	60bb      	str	r3, [r7, #8]
 8001c24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c26:	4b0f      	ldr	r3, [pc, #60]	@ (8001c64 <HAL_MspInit+0x5c>)
 8001c28:	69db      	ldr	r3, [r3, #28]
 8001c2a:	4a0e      	ldr	r2, [pc, #56]	@ (8001c64 <HAL_MspInit+0x5c>)
 8001c2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c30:	61d3      	str	r3, [r2, #28]
 8001c32:	4b0c      	ldr	r3, [pc, #48]	@ (8001c64 <HAL_MspInit+0x5c>)
 8001c34:	69db      	ldr	r3, [r3, #28]
 8001c36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c3a:	607b      	str	r3, [r7, #4]
 8001c3c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c68 <HAL_MspInit+0x60>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001c52:	60fb      	str	r3, [r7, #12]
 8001c54:	4a04      	ldr	r2, [pc, #16]	@ (8001c68 <HAL_MspInit+0x60>)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	3714      	adds	r7, #20
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bc80      	pop	{r7}
 8001c62:	4770      	bx	lr
 8001c64:	40021000 	.word	0x40021000
 8001c68:	40010000 	.word	0x40010000

08001c6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c70:	bf00      	nop
 8001c72:	e7fd      	b.n	8001c70 <NMI_Handler+0x4>

08001c74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c78:	bf00      	nop
 8001c7a:	e7fd      	b.n	8001c78 <HardFault_Handler+0x4>

08001c7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c80:	bf00      	nop
 8001c82:	e7fd      	b.n	8001c80 <MemManage_Handler+0x4>

08001c84 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c88:	bf00      	nop
 8001c8a:	e7fd      	b.n	8001c88 <BusFault_Handler+0x4>

08001c8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c90:	bf00      	nop
 8001c92:	e7fd      	b.n	8001c90 <UsageFault_Handler+0x4>

08001c94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c98:	bf00      	nop
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bc80      	pop	{r7}
 8001c9e:	4770      	bx	lr

08001ca0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ca4:	bf00      	nop
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr

08001cac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cb0:	bf00      	nop
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bc80      	pop	{r7}
 8001cb6:	4770      	bx	lr

08001cb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cbc:	f000 f874 	bl	8001da8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cc0:	bf00      	nop
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cc8:	bf00      	nop
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bc80      	pop	{r7}
 8001cce:	4770      	bx	lr

08001cd0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001cd0:	f7ff fff8 	bl	8001cc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cd4:	480b      	ldr	r0, [pc, #44]	@ (8001d04 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001cd6:	490c      	ldr	r1, [pc, #48]	@ (8001d08 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001cd8:	4a0c      	ldr	r2, [pc, #48]	@ (8001d0c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001cda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cdc:	e002      	b.n	8001ce4 <LoopCopyDataInit>

08001cde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ce0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ce2:	3304      	adds	r3, #4

08001ce4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ce4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ce6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ce8:	d3f9      	bcc.n	8001cde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cea:	4a09      	ldr	r2, [pc, #36]	@ (8001d10 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001cec:	4c09      	ldr	r4, [pc, #36]	@ (8001d14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cf0:	e001      	b.n	8001cf6 <LoopFillZerobss>

08001cf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cf4:	3204      	adds	r2, #4

08001cf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cf8:	d3fb      	bcc.n	8001cf2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cfa:	f001 fbbb 	bl	8003474 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cfe:	f7fe fe0d 	bl	800091c <main>
  bx lr
 8001d02:	4770      	bx	lr
  ldr r0, =_sdata
 8001d04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d08:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001d0c:	08004dcc 	.word	0x08004dcc
  ldr r2, =_sbss
 8001d10:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001d14:	20000a40 	.word	0x20000a40

08001d18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d18:	e7fe      	b.n	8001d18 <ADC1_2_IRQHandler>
	...

08001d1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d20:	4b08      	ldr	r3, [pc, #32]	@ (8001d44 <HAL_Init+0x28>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a07      	ldr	r2, [pc, #28]	@ (8001d44 <HAL_Init+0x28>)
 8001d26:	f043 0310 	orr.w	r3, r3, #16
 8001d2a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d2c:	2003      	movs	r0, #3
 8001d2e:	f000 f92b 	bl	8001f88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d32:	200f      	movs	r0, #15
 8001d34:	f000 f808 	bl	8001d48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d38:	f7ff ff66 	bl	8001c08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40022000 	.word	0x40022000

08001d48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d50:	4b12      	ldr	r3, [pc, #72]	@ (8001d9c <HAL_InitTick+0x54>)
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	4b12      	ldr	r3, [pc, #72]	@ (8001da0 <HAL_InitTick+0x58>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	4619      	mov	r1, r3
 8001d5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d66:	4618      	mov	r0, r3
 8001d68:	f000 f935 	bl	8001fd6 <HAL_SYSTICK_Config>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e00e      	b.n	8001d94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2b0f      	cmp	r3, #15
 8001d7a:	d80a      	bhi.n	8001d92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	6879      	ldr	r1, [r7, #4]
 8001d80:	f04f 30ff 	mov.w	r0, #4294967295
 8001d84:	f000 f90b 	bl	8001f9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d88:	4a06      	ldr	r2, [pc, #24]	@ (8001da4 <HAL_InitTick+0x5c>)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	e000      	b.n	8001d94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3708      	adds	r7, #8
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	20000000 	.word	0x20000000
 8001da0:	20000008 	.word	0x20000008
 8001da4:	20000004 	.word	0x20000004

08001da8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dac:	4b05      	ldr	r3, [pc, #20]	@ (8001dc4 <HAL_IncTick+0x1c>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	461a      	mov	r2, r3
 8001db2:	4b05      	ldr	r3, [pc, #20]	@ (8001dc8 <HAL_IncTick+0x20>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4413      	add	r3, r2
 8001db8:	4a03      	ldr	r2, [pc, #12]	@ (8001dc8 <HAL_IncTick+0x20>)
 8001dba:	6013      	str	r3, [r2, #0]
}
 8001dbc:	bf00      	nop
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bc80      	pop	{r7}
 8001dc2:	4770      	bx	lr
 8001dc4:	20000008 	.word	0x20000008
 8001dc8:	20000904 	.word	0x20000904

08001dcc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  return uwTick;
 8001dd0:	4b02      	ldr	r3, [pc, #8]	@ (8001ddc <HAL_GetTick+0x10>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bc80      	pop	{r7}
 8001dda:	4770      	bx	lr
 8001ddc:	20000904 	.word	0x20000904

08001de0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001de8:	f7ff fff0 	bl	8001dcc <HAL_GetTick>
 8001dec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001df8:	d005      	beq.n	8001e06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8001e24 <HAL_Delay+0x44>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	461a      	mov	r2, r3
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	4413      	add	r3, r2
 8001e04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e06:	bf00      	nop
 8001e08:	f7ff ffe0 	bl	8001dcc <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d8f7      	bhi.n	8001e08 <HAL_Delay+0x28>
  {
  }
}
 8001e18:	bf00      	nop
 8001e1a:	bf00      	nop
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	20000008 	.word	0x20000008

08001e28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f003 0307 	and.w	r3, r3, #7
 8001e36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e38:	4b0c      	ldr	r3, [pc, #48]	@ (8001e6c <__NVIC_SetPriorityGrouping+0x44>)
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e3e:	68ba      	ldr	r2, [r7, #8]
 8001e40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e44:	4013      	ands	r3, r2
 8001e46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e5a:	4a04      	ldr	r2, [pc, #16]	@ (8001e6c <__NVIC_SetPriorityGrouping+0x44>)
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	60d3      	str	r3, [r2, #12]
}
 8001e60:	bf00      	nop
 8001e62:	3714      	adds	r7, #20
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bc80      	pop	{r7}
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	e000ed00 	.word	0xe000ed00

08001e70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e74:	4b04      	ldr	r3, [pc, #16]	@ (8001e88 <__NVIC_GetPriorityGrouping+0x18>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	0a1b      	lsrs	r3, r3, #8
 8001e7a:	f003 0307 	and.w	r3, r3, #7
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bc80      	pop	{r7}
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	e000ed00 	.word	0xe000ed00

08001e8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	4603      	mov	r3, r0
 8001e94:	6039      	str	r1, [r7, #0]
 8001e96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	db0a      	blt.n	8001eb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	b2da      	uxtb	r2, r3
 8001ea4:	490c      	ldr	r1, [pc, #48]	@ (8001ed8 <__NVIC_SetPriority+0x4c>)
 8001ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eaa:	0112      	lsls	r2, r2, #4
 8001eac:	b2d2      	uxtb	r2, r2
 8001eae:	440b      	add	r3, r1
 8001eb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001eb4:	e00a      	b.n	8001ecc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	b2da      	uxtb	r2, r3
 8001eba:	4908      	ldr	r1, [pc, #32]	@ (8001edc <__NVIC_SetPriority+0x50>)
 8001ebc:	79fb      	ldrb	r3, [r7, #7]
 8001ebe:	f003 030f 	and.w	r3, r3, #15
 8001ec2:	3b04      	subs	r3, #4
 8001ec4:	0112      	lsls	r2, r2, #4
 8001ec6:	b2d2      	uxtb	r2, r2
 8001ec8:	440b      	add	r3, r1
 8001eca:	761a      	strb	r2, [r3, #24]
}
 8001ecc:	bf00      	nop
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bc80      	pop	{r7}
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	e000e100 	.word	0xe000e100
 8001edc:	e000ed00 	.word	0xe000ed00

08001ee0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b089      	sub	sp, #36	@ 0x24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f003 0307 	and.w	r3, r3, #7
 8001ef2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	f1c3 0307 	rsb	r3, r3, #7
 8001efa:	2b04      	cmp	r3, #4
 8001efc:	bf28      	it	cs
 8001efe:	2304      	movcs	r3, #4
 8001f00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	3304      	adds	r3, #4
 8001f06:	2b06      	cmp	r3, #6
 8001f08:	d902      	bls.n	8001f10 <NVIC_EncodePriority+0x30>
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	3b03      	subs	r3, #3
 8001f0e:	e000      	b.n	8001f12 <NVIC_EncodePriority+0x32>
 8001f10:	2300      	movs	r3, #0
 8001f12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f14:	f04f 32ff 	mov.w	r2, #4294967295
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	43da      	mvns	r2, r3
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	401a      	ands	r2, r3
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f28:	f04f 31ff 	mov.w	r1, #4294967295
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f32:	43d9      	mvns	r1, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f38:	4313      	orrs	r3, r2
         );
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3724      	adds	r7, #36	@ 0x24
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bc80      	pop	{r7}
 8001f42:	4770      	bx	lr

08001f44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f54:	d301      	bcc.n	8001f5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f56:	2301      	movs	r3, #1
 8001f58:	e00f      	b.n	8001f7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f5a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f84 <SysTick_Config+0x40>)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f62:	210f      	movs	r1, #15
 8001f64:	f04f 30ff 	mov.w	r0, #4294967295
 8001f68:	f7ff ff90 	bl	8001e8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f6c:	4b05      	ldr	r3, [pc, #20]	@ (8001f84 <SysTick_Config+0x40>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f72:	4b04      	ldr	r3, [pc, #16]	@ (8001f84 <SysTick_Config+0x40>)
 8001f74:	2207      	movs	r2, #7
 8001f76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	e000e010 	.word	0xe000e010

08001f88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f7ff ff49 	bl	8001e28 <__NVIC_SetPriorityGrouping>
}
 8001f96:	bf00      	nop
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b086      	sub	sp, #24
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	60b9      	str	r1, [r7, #8]
 8001fa8:	607a      	str	r2, [r7, #4]
 8001faa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fac:	2300      	movs	r3, #0
 8001fae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fb0:	f7ff ff5e 	bl	8001e70 <__NVIC_GetPriorityGrouping>
 8001fb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	68b9      	ldr	r1, [r7, #8]
 8001fba:	6978      	ldr	r0, [r7, #20]
 8001fbc:	f7ff ff90 	bl	8001ee0 <NVIC_EncodePriority>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fc6:	4611      	mov	r1, r2
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff ff5f 	bl	8001e8c <__NVIC_SetPriority>
}
 8001fce:	bf00      	nop
 8001fd0:	3718      	adds	r7, #24
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b082      	sub	sp, #8
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f7ff ffb0 	bl	8001f44 <SysTick_Config>
 8001fe4:	4603      	mov	r3, r0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
	...

08001ff0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b08b      	sub	sp, #44	@ 0x2c
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ffe:	2300      	movs	r3, #0
 8002000:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002002:	e169      	b.n	80022d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002004:	2201      	movs	r2, #1
 8002006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	69fa      	ldr	r2, [r7, #28]
 8002014:	4013      	ands	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	429a      	cmp	r2, r3
 800201e:	f040 8158 	bne.w	80022d2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	4a9a      	ldr	r2, [pc, #616]	@ (8002290 <HAL_GPIO_Init+0x2a0>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d05e      	beq.n	80020ea <HAL_GPIO_Init+0xfa>
 800202c:	4a98      	ldr	r2, [pc, #608]	@ (8002290 <HAL_GPIO_Init+0x2a0>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d875      	bhi.n	800211e <HAL_GPIO_Init+0x12e>
 8002032:	4a98      	ldr	r2, [pc, #608]	@ (8002294 <HAL_GPIO_Init+0x2a4>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d058      	beq.n	80020ea <HAL_GPIO_Init+0xfa>
 8002038:	4a96      	ldr	r2, [pc, #600]	@ (8002294 <HAL_GPIO_Init+0x2a4>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d86f      	bhi.n	800211e <HAL_GPIO_Init+0x12e>
 800203e:	4a96      	ldr	r2, [pc, #600]	@ (8002298 <HAL_GPIO_Init+0x2a8>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d052      	beq.n	80020ea <HAL_GPIO_Init+0xfa>
 8002044:	4a94      	ldr	r2, [pc, #592]	@ (8002298 <HAL_GPIO_Init+0x2a8>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d869      	bhi.n	800211e <HAL_GPIO_Init+0x12e>
 800204a:	4a94      	ldr	r2, [pc, #592]	@ (800229c <HAL_GPIO_Init+0x2ac>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d04c      	beq.n	80020ea <HAL_GPIO_Init+0xfa>
 8002050:	4a92      	ldr	r2, [pc, #584]	@ (800229c <HAL_GPIO_Init+0x2ac>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d863      	bhi.n	800211e <HAL_GPIO_Init+0x12e>
 8002056:	4a92      	ldr	r2, [pc, #584]	@ (80022a0 <HAL_GPIO_Init+0x2b0>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d046      	beq.n	80020ea <HAL_GPIO_Init+0xfa>
 800205c:	4a90      	ldr	r2, [pc, #576]	@ (80022a0 <HAL_GPIO_Init+0x2b0>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d85d      	bhi.n	800211e <HAL_GPIO_Init+0x12e>
 8002062:	2b12      	cmp	r3, #18
 8002064:	d82a      	bhi.n	80020bc <HAL_GPIO_Init+0xcc>
 8002066:	2b12      	cmp	r3, #18
 8002068:	d859      	bhi.n	800211e <HAL_GPIO_Init+0x12e>
 800206a:	a201      	add	r2, pc, #4	@ (adr r2, 8002070 <HAL_GPIO_Init+0x80>)
 800206c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002070:	080020eb 	.word	0x080020eb
 8002074:	080020c5 	.word	0x080020c5
 8002078:	080020d7 	.word	0x080020d7
 800207c:	08002119 	.word	0x08002119
 8002080:	0800211f 	.word	0x0800211f
 8002084:	0800211f 	.word	0x0800211f
 8002088:	0800211f 	.word	0x0800211f
 800208c:	0800211f 	.word	0x0800211f
 8002090:	0800211f 	.word	0x0800211f
 8002094:	0800211f 	.word	0x0800211f
 8002098:	0800211f 	.word	0x0800211f
 800209c:	0800211f 	.word	0x0800211f
 80020a0:	0800211f 	.word	0x0800211f
 80020a4:	0800211f 	.word	0x0800211f
 80020a8:	0800211f 	.word	0x0800211f
 80020ac:	0800211f 	.word	0x0800211f
 80020b0:	0800211f 	.word	0x0800211f
 80020b4:	080020cd 	.word	0x080020cd
 80020b8:	080020e1 	.word	0x080020e1
 80020bc:	4a79      	ldr	r2, [pc, #484]	@ (80022a4 <HAL_GPIO_Init+0x2b4>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d013      	beq.n	80020ea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80020c2:	e02c      	b.n	800211e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	623b      	str	r3, [r7, #32]
          break;
 80020ca:	e029      	b.n	8002120 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	3304      	adds	r3, #4
 80020d2:	623b      	str	r3, [r7, #32]
          break;
 80020d4:	e024      	b.n	8002120 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	3308      	adds	r3, #8
 80020dc:	623b      	str	r3, [r7, #32]
          break;
 80020de:	e01f      	b.n	8002120 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	330c      	adds	r3, #12
 80020e6:	623b      	str	r3, [r7, #32]
          break;
 80020e8:	e01a      	b.n	8002120 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d102      	bne.n	80020f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80020f2:	2304      	movs	r3, #4
 80020f4:	623b      	str	r3, [r7, #32]
          break;
 80020f6:	e013      	b.n	8002120 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d105      	bne.n	800210c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002100:	2308      	movs	r3, #8
 8002102:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	69fa      	ldr	r2, [r7, #28]
 8002108:	611a      	str	r2, [r3, #16]
          break;
 800210a:	e009      	b.n	8002120 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800210c:	2308      	movs	r3, #8
 800210e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	69fa      	ldr	r2, [r7, #28]
 8002114:	615a      	str	r2, [r3, #20]
          break;
 8002116:	e003      	b.n	8002120 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002118:	2300      	movs	r3, #0
 800211a:	623b      	str	r3, [r7, #32]
          break;
 800211c:	e000      	b.n	8002120 <HAL_GPIO_Init+0x130>
          break;
 800211e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	2bff      	cmp	r3, #255	@ 0xff
 8002124:	d801      	bhi.n	800212a <HAL_GPIO_Init+0x13a>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	e001      	b.n	800212e <HAL_GPIO_Init+0x13e>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	3304      	adds	r3, #4
 800212e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	2bff      	cmp	r3, #255	@ 0xff
 8002134:	d802      	bhi.n	800213c <HAL_GPIO_Init+0x14c>
 8002136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	e002      	b.n	8002142 <HAL_GPIO_Init+0x152>
 800213c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800213e:	3b08      	subs	r3, #8
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	210f      	movs	r1, #15
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	fa01 f303 	lsl.w	r3, r1, r3
 8002150:	43db      	mvns	r3, r3
 8002152:	401a      	ands	r2, r3
 8002154:	6a39      	ldr	r1, [r7, #32]
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	fa01 f303 	lsl.w	r3, r1, r3
 800215c:	431a      	orrs	r2, r3
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800216a:	2b00      	cmp	r3, #0
 800216c:	f000 80b1 	beq.w	80022d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002170:	4b4d      	ldr	r3, [pc, #308]	@ (80022a8 <HAL_GPIO_Init+0x2b8>)
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	4a4c      	ldr	r2, [pc, #304]	@ (80022a8 <HAL_GPIO_Init+0x2b8>)
 8002176:	f043 0301 	orr.w	r3, r3, #1
 800217a:	6193      	str	r3, [r2, #24]
 800217c:	4b4a      	ldr	r3, [pc, #296]	@ (80022a8 <HAL_GPIO_Init+0x2b8>)
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	f003 0301 	and.w	r3, r3, #1
 8002184:	60bb      	str	r3, [r7, #8]
 8002186:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002188:	4a48      	ldr	r2, [pc, #288]	@ (80022ac <HAL_GPIO_Init+0x2bc>)
 800218a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800218c:	089b      	lsrs	r3, r3, #2
 800218e:	3302      	adds	r3, #2
 8002190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002194:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002198:	f003 0303 	and.w	r3, r3, #3
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	220f      	movs	r2, #15
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	43db      	mvns	r3, r3
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	4013      	ands	r3, r2
 80021aa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4a40      	ldr	r2, [pc, #256]	@ (80022b0 <HAL_GPIO_Init+0x2c0>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d013      	beq.n	80021dc <HAL_GPIO_Init+0x1ec>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4a3f      	ldr	r2, [pc, #252]	@ (80022b4 <HAL_GPIO_Init+0x2c4>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d00d      	beq.n	80021d8 <HAL_GPIO_Init+0x1e8>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a3e      	ldr	r2, [pc, #248]	@ (80022b8 <HAL_GPIO_Init+0x2c8>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d007      	beq.n	80021d4 <HAL_GPIO_Init+0x1e4>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a3d      	ldr	r2, [pc, #244]	@ (80022bc <HAL_GPIO_Init+0x2cc>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d101      	bne.n	80021d0 <HAL_GPIO_Init+0x1e0>
 80021cc:	2303      	movs	r3, #3
 80021ce:	e006      	b.n	80021de <HAL_GPIO_Init+0x1ee>
 80021d0:	2304      	movs	r3, #4
 80021d2:	e004      	b.n	80021de <HAL_GPIO_Init+0x1ee>
 80021d4:	2302      	movs	r3, #2
 80021d6:	e002      	b.n	80021de <HAL_GPIO_Init+0x1ee>
 80021d8:	2301      	movs	r3, #1
 80021da:	e000      	b.n	80021de <HAL_GPIO_Init+0x1ee>
 80021dc:	2300      	movs	r3, #0
 80021de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021e0:	f002 0203 	and.w	r2, r2, #3
 80021e4:	0092      	lsls	r2, r2, #2
 80021e6:	4093      	lsls	r3, r2
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80021ee:	492f      	ldr	r1, [pc, #188]	@ (80022ac <HAL_GPIO_Init+0x2bc>)
 80021f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f2:	089b      	lsrs	r3, r3, #2
 80021f4:	3302      	adds	r3, #2
 80021f6:	68fa      	ldr	r2, [r7, #12]
 80021f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d006      	beq.n	8002216 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002208:	4b2d      	ldr	r3, [pc, #180]	@ (80022c0 <HAL_GPIO_Init+0x2d0>)
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	492c      	ldr	r1, [pc, #176]	@ (80022c0 <HAL_GPIO_Init+0x2d0>)
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	4313      	orrs	r3, r2
 8002212:	608b      	str	r3, [r1, #8]
 8002214:	e006      	b.n	8002224 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002216:	4b2a      	ldr	r3, [pc, #168]	@ (80022c0 <HAL_GPIO_Init+0x2d0>)
 8002218:	689a      	ldr	r2, [r3, #8]
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	43db      	mvns	r3, r3
 800221e:	4928      	ldr	r1, [pc, #160]	@ (80022c0 <HAL_GPIO_Init+0x2d0>)
 8002220:	4013      	ands	r3, r2
 8002222:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d006      	beq.n	800223e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002230:	4b23      	ldr	r3, [pc, #140]	@ (80022c0 <HAL_GPIO_Init+0x2d0>)
 8002232:	68da      	ldr	r2, [r3, #12]
 8002234:	4922      	ldr	r1, [pc, #136]	@ (80022c0 <HAL_GPIO_Init+0x2d0>)
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	4313      	orrs	r3, r2
 800223a:	60cb      	str	r3, [r1, #12]
 800223c:	e006      	b.n	800224c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800223e:	4b20      	ldr	r3, [pc, #128]	@ (80022c0 <HAL_GPIO_Init+0x2d0>)
 8002240:	68da      	ldr	r2, [r3, #12]
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	43db      	mvns	r3, r3
 8002246:	491e      	ldr	r1, [pc, #120]	@ (80022c0 <HAL_GPIO_Init+0x2d0>)
 8002248:	4013      	ands	r3, r2
 800224a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d006      	beq.n	8002266 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002258:	4b19      	ldr	r3, [pc, #100]	@ (80022c0 <HAL_GPIO_Init+0x2d0>)
 800225a:	685a      	ldr	r2, [r3, #4]
 800225c:	4918      	ldr	r1, [pc, #96]	@ (80022c0 <HAL_GPIO_Init+0x2d0>)
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	4313      	orrs	r3, r2
 8002262:	604b      	str	r3, [r1, #4]
 8002264:	e006      	b.n	8002274 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002266:	4b16      	ldr	r3, [pc, #88]	@ (80022c0 <HAL_GPIO_Init+0x2d0>)
 8002268:	685a      	ldr	r2, [r3, #4]
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	43db      	mvns	r3, r3
 800226e:	4914      	ldr	r1, [pc, #80]	@ (80022c0 <HAL_GPIO_Init+0x2d0>)
 8002270:	4013      	ands	r3, r2
 8002272:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d021      	beq.n	80022c4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002280:	4b0f      	ldr	r3, [pc, #60]	@ (80022c0 <HAL_GPIO_Init+0x2d0>)
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	490e      	ldr	r1, [pc, #56]	@ (80022c0 <HAL_GPIO_Init+0x2d0>)
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	4313      	orrs	r3, r2
 800228a:	600b      	str	r3, [r1, #0]
 800228c:	e021      	b.n	80022d2 <HAL_GPIO_Init+0x2e2>
 800228e:	bf00      	nop
 8002290:	10320000 	.word	0x10320000
 8002294:	10310000 	.word	0x10310000
 8002298:	10220000 	.word	0x10220000
 800229c:	10210000 	.word	0x10210000
 80022a0:	10120000 	.word	0x10120000
 80022a4:	10110000 	.word	0x10110000
 80022a8:	40021000 	.word	0x40021000
 80022ac:	40010000 	.word	0x40010000
 80022b0:	40010800 	.word	0x40010800
 80022b4:	40010c00 	.word	0x40010c00
 80022b8:	40011000 	.word	0x40011000
 80022bc:	40011400 	.word	0x40011400
 80022c0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80022c4:	4b0b      	ldr	r3, [pc, #44]	@ (80022f4 <HAL_GPIO_Init+0x304>)
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	43db      	mvns	r3, r3
 80022cc:	4909      	ldr	r1, [pc, #36]	@ (80022f4 <HAL_GPIO_Init+0x304>)
 80022ce:	4013      	ands	r3, r2
 80022d0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80022d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d4:	3301      	adds	r3, #1
 80022d6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022de:	fa22 f303 	lsr.w	r3, r2, r3
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	f47f ae8e 	bne.w	8002004 <HAL_GPIO_Init+0x14>
  }
}
 80022e8:	bf00      	nop
 80022ea:	bf00      	nop
 80022ec:	372c      	adds	r7, #44	@ 0x2c
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bc80      	pop	{r7}
 80022f2:	4770      	bx	lr
 80022f4:	40010400 	.word	0x40010400

080022f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	460b      	mov	r3, r1
 8002302:	807b      	strh	r3, [r7, #2]
 8002304:	4613      	mov	r3, r2
 8002306:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002308:	787b      	ldrb	r3, [r7, #1]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d003      	beq.n	8002316 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800230e:	887a      	ldrh	r2, [r7, #2]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002314:	e003      	b.n	800231e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002316:	887b      	ldrh	r3, [r7, #2]
 8002318:	041a      	lsls	r2, r3, #16
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	611a      	str	r2, [r3, #16]
}
 800231e:	bf00      	nop
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	bc80      	pop	{r7}
 8002326:	4770      	bx	lr

08002328 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d101      	bne.n	800233a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e12b      	b.n	8002592 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002340:	b2db      	uxtb	r3, r3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d106      	bne.n	8002354 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f7fe faa6 	bl	80008a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2224      	movs	r2, #36	@ 0x24
 8002358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f022 0201 	bic.w	r2, r2, #1
 800236a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800237a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800238a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800238c:	f001 f832 	bl	80033f4 <HAL_RCC_GetPCLK1Freq>
 8002390:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	4a81      	ldr	r2, [pc, #516]	@ (800259c <HAL_I2C_Init+0x274>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d807      	bhi.n	80023ac <HAL_I2C_Init+0x84>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	4a80      	ldr	r2, [pc, #512]	@ (80025a0 <HAL_I2C_Init+0x278>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	bf94      	ite	ls
 80023a4:	2301      	movls	r3, #1
 80023a6:	2300      	movhi	r3, #0
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	e006      	b.n	80023ba <HAL_I2C_Init+0x92>
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	4a7d      	ldr	r2, [pc, #500]	@ (80025a4 <HAL_I2C_Init+0x27c>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	bf94      	ite	ls
 80023b4:	2301      	movls	r3, #1
 80023b6:	2300      	movhi	r3, #0
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e0e7      	b.n	8002592 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	4a78      	ldr	r2, [pc, #480]	@ (80025a8 <HAL_I2C_Init+0x280>)
 80023c6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ca:	0c9b      	lsrs	r3, r3, #18
 80023cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	68ba      	ldr	r2, [r7, #8]
 80023de:	430a      	orrs	r2, r1
 80023e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	6a1b      	ldr	r3, [r3, #32]
 80023e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	4a6a      	ldr	r2, [pc, #424]	@ (800259c <HAL_I2C_Init+0x274>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d802      	bhi.n	80023fc <HAL_I2C_Init+0xd4>
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	3301      	adds	r3, #1
 80023fa:	e009      	b.n	8002410 <HAL_I2C_Init+0xe8>
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002402:	fb02 f303 	mul.w	r3, r2, r3
 8002406:	4a69      	ldr	r2, [pc, #420]	@ (80025ac <HAL_I2C_Init+0x284>)
 8002408:	fba2 2303 	umull	r2, r3, r2, r3
 800240c:	099b      	lsrs	r3, r3, #6
 800240e:	3301      	adds	r3, #1
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	6812      	ldr	r2, [r2, #0]
 8002414:	430b      	orrs	r3, r1
 8002416:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	69db      	ldr	r3, [r3, #28]
 800241e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002422:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	495c      	ldr	r1, [pc, #368]	@ (800259c <HAL_I2C_Init+0x274>)
 800242c:	428b      	cmp	r3, r1
 800242e:	d819      	bhi.n	8002464 <HAL_I2C_Init+0x13c>
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	1e59      	subs	r1, r3, #1
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	fbb1 f3f3 	udiv	r3, r1, r3
 800243e:	1c59      	adds	r1, r3, #1
 8002440:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002444:	400b      	ands	r3, r1
 8002446:	2b00      	cmp	r3, #0
 8002448:	d00a      	beq.n	8002460 <HAL_I2C_Init+0x138>
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	1e59      	subs	r1, r3, #1
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	fbb1 f3f3 	udiv	r3, r1, r3
 8002458:	3301      	adds	r3, #1
 800245a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800245e:	e051      	b.n	8002504 <HAL_I2C_Init+0x1dc>
 8002460:	2304      	movs	r3, #4
 8002462:	e04f      	b.n	8002504 <HAL_I2C_Init+0x1dc>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d111      	bne.n	8002490 <HAL_I2C_Init+0x168>
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	1e58      	subs	r0, r3, #1
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6859      	ldr	r1, [r3, #4]
 8002474:	460b      	mov	r3, r1
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	440b      	add	r3, r1
 800247a:	fbb0 f3f3 	udiv	r3, r0, r3
 800247e:	3301      	adds	r3, #1
 8002480:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002484:	2b00      	cmp	r3, #0
 8002486:	bf0c      	ite	eq
 8002488:	2301      	moveq	r3, #1
 800248a:	2300      	movne	r3, #0
 800248c:	b2db      	uxtb	r3, r3
 800248e:	e012      	b.n	80024b6 <HAL_I2C_Init+0x18e>
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	1e58      	subs	r0, r3, #1
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6859      	ldr	r1, [r3, #4]
 8002498:	460b      	mov	r3, r1
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	440b      	add	r3, r1
 800249e:	0099      	lsls	r1, r3, #2
 80024a0:	440b      	add	r3, r1
 80024a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80024a6:	3301      	adds	r3, #1
 80024a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	bf0c      	ite	eq
 80024b0:	2301      	moveq	r3, #1
 80024b2:	2300      	movne	r3, #0
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <HAL_I2C_Init+0x196>
 80024ba:	2301      	movs	r3, #1
 80024bc:	e022      	b.n	8002504 <HAL_I2C_Init+0x1dc>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d10e      	bne.n	80024e4 <HAL_I2C_Init+0x1bc>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	1e58      	subs	r0, r3, #1
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6859      	ldr	r1, [r3, #4]
 80024ce:	460b      	mov	r3, r1
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	440b      	add	r3, r1
 80024d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80024d8:	3301      	adds	r3, #1
 80024da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80024e2:	e00f      	b.n	8002504 <HAL_I2C_Init+0x1dc>
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	1e58      	subs	r0, r3, #1
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6859      	ldr	r1, [r3, #4]
 80024ec:	460b      	mov	r3, r1
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	440b      	add	r3, r1
 80024f2:	0099      	lsls	r1, r3, #2
 80024f4:	440b      	add	r3, r1
 80024f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80024fa:	3301      	adds	r3, #1
 80024fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002500:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002504:	6879      	ldr	r1, [r7, #4]
 8002506:	6809      	ldr	r1, [r1, #0]
 8002508:	4313      	orrs	r3, r2
 800250a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	69da      	ldr	r2, [r3, #28]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a1b      	ldr	r3, [r3, #32]
 800251e:	431a      	orrs	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	430a      	orrs	r2, r1
 8002526:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002532:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	6911      	ldr	r1, [r2, #16]
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	68d2      	ldr	r2, [r2, #12]
 800253e:	4311      	orrs	r1, r2
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	6812      	ldr	r2, [r2, #0]
 8002544:	430b      	orrs	r3, r1
 8002546:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	695a      	ldr	r2, [r3, #20]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	431a      	orrs	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	430a      	orrs	r2, r1
 8002562:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f042 0201 	orr.w	r2, r2, #1
 8002572:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2220      	movs	r2, #32
 800257e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	000186a0 	.word	0x000186a0
 80025a0:	001e847f 	.word	0x001e847f
 80025a4:	003d08ff 	.word	0x003d08ff
 80025a8:	431bde83 	.word	0x431bde83
 80025ac:	10624dd3 	.word	0x10624dd3

080025b0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b088      	sub	sp, #32
 80025b4:	af02      	add	r7, sp, #8
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	607a      	str	r2, [r7, #4]
 80025ba:	461a      	mov	r2, r3
 80025bc:	460b      	mov	r3, r1
 80025be:	817b      	strh	r3, [r7, #10]
 80025c0:	4613      	mov	r3, r2
 80025c2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025c4:	f7ff fc02 	bl	8001dcc <HAL_GetTick>
 80025c8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b20      	cmp	r3, #32
 80025d4:	f040 80e0 	bne.w	8002798 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	9300      	str	r3, [sp, #0]
 80025dc:	2319      	movs	r3, #25
 80025de:	2201      	movs	r2, #1
 80025e0:	4970      	ldr	r1, [pc, #448]	@ (80027a4 <HAL_I2C_Master_Transmit+0x1f4>)
 80025e2:	68f8      	ldr	r0, [r7, #12]
 80025e4:	f000 f964 	bl	80028b0 <I2C_WaitOnFlagUntilTimeout>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80025ee:	2302      	movs	r3, #2
 80025f0:	e0d3      	b.n	800279a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d101      	bne.n	8002600 <HAL_I2C_Master_Transmit+0x50>
 80025fc:	2302      	movs	r3, #2
 80025fe:	e0cc      	b.n	800279a <HAL_I2C_Master_Transmit+0x1ea>
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	2b01      	cmp	r3, #1
 8002614:	d007      	beq.n	8002626 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f042 0201 	orr.w	r2, r2, #1
 8002624:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002634:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2221      	movs	r2, #33	@ 0x21
 800263a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2210      	movs	r2, #16
 8002642:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2200      	movs	r2, #0
 800264a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	893a      	ldrh	r2, [r7, #8]
 8002656:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800265c:	b29a      	uxth	r2, r3
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	4a50      	ldr	r2, [pc, #320]	@ (80027a8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002666:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002668:	8979      	ldrh	r1, [r7, #10]
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	6a3a      	ldr	r2, [r7, #32]
 800266e:	68f8      	ldr	r0, [r7, #12]
 8002670:	f000 f89c 	bl	80027ac <I2C_MasterRequestWrite>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e08d      	b.n	800279a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800267e:	2300      	movs	r3, #0
 8002680:	613b      	str	r3, [r7, #16]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	695b      	ldr	r3, [r3, #20]
 8002688:	613b      	str	r3, [r7, #16]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	613b      	str	r3, [r7, #16]
 8002692:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002694:	e066      	b.n	8002764 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002696:	697a      	ldr	r2, [r7, #20]
 8002698:	6a39      	ldr	r1, [r7, #32]
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f000 fa22 	bl	8002ae4 <I2C_WaitOnTXEFlagUntilTimeout>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d00d      	beq.n	80026c2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026aa:	2b04      	cmp	r3, #4
 80026ac:	d107      	bne.n	80026be <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e06b      	b.n	800279a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c6:	781a      	ldrb	r2, [r3, #0]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d2:	1c5a      	adds	r2, r3, #1
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026dc:	b29b      	uxth	r3, r3
 80026de:	3b01      	subs	r3, #1
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026ea:	3b01      	subs	r3, #1
 80026ec:	b29a      	uxth	r2, r3
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	695b      	ldr	r3, [r3, #20]
 80026f8:	f003 0304 	and.w	r3, r3, #4
 80026fc:	2b04      	cmp	r3, #4
 80026fe:	d11b      	bne.n	8002738 <HAL_I2C_Master_Transmit+0x188>
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002704:	2b00      	cmp	r3, #0
 8002706:	d017      	beq.n	8002738 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800270c:	781a      	ldrb	r2, [r3, #0]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002718:	1c5a      	adds	r2, r3, #1
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002722:	b29b      	uxth	r3, r3
 8002724:	3b01      	subs	r3, #1
 8002726:	b29a      	uxth	r2, r3
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002730:	3b01      	subs	r3, #1
 8002732:	b29a      	uxth	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002738:	697a      	ldr	r2, [r7, #20]
 800273a:	6a39      	ldr	r1, [r7, #32]
 800273c:	68f8      	ldr	r0, [r7, #12]
 800273e:	f000 fa19 	bl	8002b74 <I2C_WaitOnBTFFlagUntilTimeout>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00d      	beq.n	8002764 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800274c:	2b04      	cmp	r3, #4
 800274e:	d107      	bne.n	8002760 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800275e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e01a      	b.n	800279a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002768:	2b00      	cmp	r3, #0
 800276a:	d194      	bne.n	8002696 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800277a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2220      	movs	r2, #32
 8002780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2200      	movs	r2, #0
 8002790:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002794:	2300      	movs	r3, #0
 8002796:	e000      	b.n	800279a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002798:	2302      	movs	r3, #2
  }
}
 800279a:	4618      	mov	r0, r3
 800279c:	3718      	adds	r7, #24
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	00100002 	.word	0x00100002
 80027a8:	ffff0000 	.word	0xffff0000

080027ac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b088      	sub	sp, #32
 80027b0:	af02      	add	r7, sp, #8
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	607a      	str	r2, [r7, #4]
 80027b6:	603b      	str	r3, [r7, #0]
 80027b8:	460b      	mov	r3, r1
 80027ba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027c0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	2b08      	cmp	r3, #8
 80027c6:	d006      	beq.n	80027d6 <I2C_MasterRequestWrite+0x2a>
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d003      	beq.n	80027d6 <I2C_MasterRequestWrite+0x2a>
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80027d4:	d108      	bne.n	80027e8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80027e4:	601a      	str	r2, [r3, #0]
 80027e6:	e00b      	b.n	8002800 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ec:	2b12      	cmp	r3, #18
 80027ee:	d107      	bne.n	8002800 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80027fe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	9300      	str	r3, [sp, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800280c:	68f8      	ldr	r0, [r7, #12]
 800280e:	f000 f84f 	bl	80028b0 <I2C_WaitOnFlagUntilTimeout>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d00d      	beq.n	8002834 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002822:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002826:	d103      	bne.n	8002830 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800282e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e035      	b.n	80028a0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	691b      	ldr	r3, [r3, #16]
 8002838:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800283c:	d108      	bne.n	8002850 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800283e:	897b      	ldrh	r3, [r7, #10]
 8002840:	b2db      	uxtb	r3, r3
 8002842:	461a      	mov	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800284c:	611a      	str	r2, [r3, #16]
 800284e:	e01b      	b.n	8002888 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002850:	897b      	ldrh	r3, [r7, #10]
 8002852:	11db      	asrs	r3, r3, #7
 8002854:	b2db      	uxtb	r3, r3
 8002856:	f003 0306 	and.w	r3, r3, #6
 800285a:	b2db      	uxtb	r3, r3
 800285c:	f063 030f 	orn	r3, r3, #15
 8002860:	b2da      	uxtb	r2, r3
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	490e      	ldr	r1, [pc, #56]	@ (80028a8 <I2C_MasterRequestWrite+0xfc>)
 800286e:	68f8      	ldr	r0, [r7, #12]
 8002870:	f000 f898 	bl	80029a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e010      	b.n	80028a0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800287e:	897b      	ldrh	r3, [r7, #10]
 8002880:	b2da      	uxtb	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	4907      	ldr	r1, [pc, #28]	@ (80028ac <I2C_MasterRequestWrite+0x100>)
 800288e:	68f8      	ldr	r0, [r7, #12]
 8002890:	f000 f888 	bl	80029a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e000      	b.n	80028a0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800289e:	2300      	movs	r3, #0
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3718      	adds	r7, #24
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	00010008 	.word	0x00010008
 80028ac:	00010002 	.word	0x00010002

080028b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	603b      	str	r3, [r7, #0]
 80028bc:	4613      	mov	r3, r2
 80028be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028c0:	e048      	b.n	8002954 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028c8:	d044      	beq.n	8002954 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028ca:	f7ff fa7f 	bl	8001dcc <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	683a      	ldr	r2, [r7, #0]
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d302      	bcc.n	80028e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d139      	bne.n	8002954 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	0c1b      	lsrs	r3, r3, #16
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d10d      	bne.n	8002906 <I2C_WaitOnFlagUntilTimeout+0x56>
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	695b      	ldr	r3, [r3, #20]
 80028f0:	43da      	mvns	r2, r3
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	4013      	ands	r3, r2
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	bf0c      	ite	eq
 80028fc:	2301      	moveq	r3, #1
 80028fe:	2300      	movne	r3, #0
 8002900:	b2db      	uxtb	r3, r3
 8002902:	461a      	mov	r2, r3
 8002904:	e00c      	b.n	8002920 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	699b      	ldr	r3, [r3, #24]
 800290c:	43da      	mvns	r2, r3
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	4013      	ands	r3, r2
 8002912:	b29b      	uxth	r3, r3
 8002914:	2b00      	cmp	r3, #0
 8002916:	bf0c      	ite	eq
 8002918:	2301      	moveq	r3, #1
 800291a:	2300      	movne	r3, #0
 800291c:	b2db      	uxtb	r3, r3
 800291e:	461a      	mov	r2, r3
 8002920:	79fb      	ldrb	r3, [r7, #7]
 8002922:	429a      	cmp	r2, r3
 8002924:	d116      	bne.n	8002954 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2200      	movs	r2, #0
 800292a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2220      	movs	r2, #32
 8002930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002940:	f043 0220 	orr.w	r2, r3, #32
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e023      	b.n	800299c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	0c1b      	lsrs	r3, r3, #16
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2b01      	cmp	r3, #1
 800295c:	d10d      	bne.n	800297a <I2C_WaitOnFlagUntilTimeout+0xca>
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	695b      	ldr	r3, [r3, #20]
 8002964:	43da      	mvns	r2, r3
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	4013      	ands	r3, r2
 800296a:	b29b      	uxth	r3, r3
 800296c:	2b00      	cmp	r3, #0
 800296e:	bf0c      	ite	eq
 8002970:	2301      	moveq	r3, #1
 8002972:	2300      	movne	r3, #0
 8002974:	b2db      	uxtb	r3, r3
 8002976:	461a      	mov	r2, r3
 8002978:	e00c      	b.n	8002994 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	43da      	mvns	r2, r3
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	4013      	ands	r3, r2
 8002986:	b29b      	uxth	r3, r3
 8002988:	2b00      	cmp	r3, #0
 800298a:	bf0c      	ite	eq
 800298c:	2301      	moveq	r3, #1
 800298e:	2300      	movne	r3, #0
 8002990:	b2db      	uxtb	r3, r3
 8002992:	461a      	mov	r2, r3
 8002994:	79fb      	ldrb	r3, [r7, #7]
 8002996:	429a      	cmp	r2, r3
 8002998:	d093      	beq.n	80028c2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3710      	adds	r7, #16
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
 80029b0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029b2:	e071      	b.n	8002a98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029c2:	d123      	bne.n	8002a0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029d2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80029dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2200      	movs	r2, #0
 80029e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2220      	movs	r2, #32
 80029e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f8:	f043 0204 	orr.w	r2, r3, #4
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e067      	b.n	8002adc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a12:	d041      	beq.n	8002a98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a14:	f7ff f9da 	bl	8001dcc <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d302      	bcc.n	8002a2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d136      	bne.n	8002a98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	0c1b      	lsrs	r3, r3, #16
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d10c      	bne.n	8002a4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	695b      	ldr	r3, [r3, #20]
 8002a3a:	43da      	mvns	r2, r3
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	4013      	ands	r3, r2
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	bf14      	ite	ne
 8002a46:	2301      	movne	r3, #1
 8002a48:	2300      	moveq	r3, #0
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	e00b      	b.n	8002a66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	43da      	mvns	r2, r3
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	bf14      	ite	ne
 8002a60:	2301      	movne	r3, #1
 8002a62:	2300      	moveq	r3, #0
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d016      	beq.n	8002a98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2220      	movs	r2, #32
 8002a74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a84:	f043 0220 	orr.w	r2, r3, #32
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e021      	b.n	8002adc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	0c1b      	lsrs	r3, r3, #16
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d10c      	bne.n	8002abc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	695b      	ldr	r3, [r3, #20]
 8002aa8:	43da      	mvns	r2, r3
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	4013      	ands	r3, r2
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	bf14      	ite	ne
 8002ab4:	2301      	movne	r3, #1
 8002ab6:	2300      	moveq	r3, #0
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	e00b      	b.n	8002ad4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	43da      	mvns	r2, r3
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	bf14      	ite	ne
 8002ace:	2301      	movne	r3, #1
 8002ad0:	2300      	moveq	r3, #0
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	f47f af6d 	bne.w	80029b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3710      	adds	r7, #16
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002af0:	e034      	b.n	8002b5c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002af2:	68f8      	ldr	r0, [r7, #12]
 8002af4:	f000 f886 	bl	8002c04 <I2C_IsAcknowledgeFailed>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e034      	b.n	8002b6c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b08:	d028      	beq.n	8002b5c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b0a:	f7ff f95f 	bl	8001dcc <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	68ba      	ldr	r2, [r7, #8]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d302      	bcc.n	8002b20 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d11d      	bne.n	8002b5c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b2a:	2b80      	cmp	r3, #128	@ 0x80
 8002b2c:	d016      	beq.n	8002b5c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2200      	movs	r2, #0
 8002b32:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2220      	movs	r2, #32
 8002b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b48:	f043 0220 	orr.w	r2, r3, #32
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e007      	b.n	8002b6c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b66:	2b80      	cmp	r3, #128	@ 0x80
 8002b68:	d1c3      	bne.n	8002af2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3710      	adds	r7, #16
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b80:	e034      	b.n	8002bec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	f000 f83e 	bl	8002c04 <I2C_IsAcknowledgeFailed>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e034      	b.n	8002bfc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b98:	d028      	beq.n	8002bec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b9a:	f7ff f917 	bl	8001dcc <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	68ba      	ldr	r2, [r7, #8]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d302      	bcc.n	8002bb0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d11d      	bne.n	8002bec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	f003 0304 	and.w	r3, r3, #4
 8002bba:	2b04      	cmp	r3, #4
 8002bbc:	d016      	beq.n	8002bec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2220      	movs	r2, #32
 8002bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd8:	f043 0220 	orr.w	r2, r3, #32
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e007      	b.n	8002bfc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	f003 0304 	and.w	r3, r3, #4
 8002bf6:	2b04      	cmp	r3, #4
 8002bf8:	d1c3      	bne.n	8002b82 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3710      	adds	r7, #16
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c1a:	d11b      	bne.n	8002c54 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002c24:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2220      	movs	r2, #32
 8002c30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c40:	f043 0204 	orr.w	r2, r3, #4
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e000      	b.n	8002c56 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bc80      	pop	{r7}
 8002c5e:	4770      	bx	lr

08002c60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b086      	sub	sp, #24
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d101      	bne.n	8002c72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e272      	b.n	8003158 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0301 	and.w	r3, r3, #1
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	f000 8087 	beq.w	8002d8e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c80:	4b92      	ldr	r3, [pc, #584]	@ (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f003 030c 	and.w	r3, r3, #12
 8002c88:	2b04      	cmp	r3, #4
 8002c8a:	d00c      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c8c:	4b8f      	ldr	r3, [pc, #572]	@ (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f003 030c 	and.w	r3, r3, #12
 8002c94:	2b08      	cmp	r3, #8
 8002c96:	d112      	bne.n	8002cbe <HAL_RCC_OscConfig+0x5e>
 8002c98:	4b8c      	ldr	r3, [pc, #560]	@ (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ca0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ca4:	d10b      	bne.n	8002cbe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ca6:	4b89      	ldr	r3, [pc, #548]	@ (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d06c      	beq.n	8002d8c <HAL_RCC_OscConfig+0x12c>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d168      	bne.n	8002d8c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e24c      	b.n	8003158 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cc6:	d106      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x76>
 8002cc8:	4b80      	ldr	r3, [pc, #512]	@ (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a7f      	ldr	r2, [pc, #508]	@ (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002cce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cd2:	6013      	str	r3, [r2, #0]
 8002cd4:	e02e      	b.n	8002d34 <HAL_RCC_OscConfig+0xd4>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d10c      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x98>
 8002cde:	4b7b      	ldr	r3, [pc, #492]	@ (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a7a      	ldr	r2, [pc, #488]	@ (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002ce4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ce8:	6013      	str	r3, [r2, #0]
 8002cea:	4b78      	ldr	r3, [pc, #480]	@ (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a77      	ldr	r2, [pc, #476]	@ (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002cf0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cf4:	6013      	str	r3, [r2, #0]
 8002cf6:	e01d      	b.n	8002d34 <HAL_RCC_OscConfig+0xd4>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d00:	d10c      	bne.n	8002d1c <HAL_RCC_OscConfig+0xbc>
 8002d02:	4b72      	ldr	r3, [pc, #456]	@ (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a71      	ldr	r2, [pc, #452]	@ (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002d08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d0c:	6013      	str	r3, [r2, #0]
 8002d0e:	4b6f      	ldr	r3, [pc, #444]	@ (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a6e      	ldr	r2, [pc, #440]	@ (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002d14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d18:	6013      	str	r3, [r2, #0]
 8002d1a:	e00b      	b.n	8002d34 <HAL_RCC_OscConfig+0xd4>
 8002d1c:	4b6b      	ldr	r3, [pc, #428]	@ (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a6a      	ldr	r2, [pc, #424]	@ (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002d22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d26:	6013      	str	r3, [r2, #0]
 8002d28:	4b68      	ldr	r3, [pc, #416]	@ (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a67      	ldr	r2, [pc, #412]	@ (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002d2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d32:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d013      	beq.n	8002d64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d3c:	f7ff f846 	bl	8001dcc <HAL_GetTick>
 8002d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d42:	e008      	b.n	8002d56 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d44:	f7ff f842 	bl	8001dcc <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	2b64      	cmp	r3, #100	@ 0x64
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e200      	b.n	8003158 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d56:	4b5d      	ldr	r3, [pc, #372]	@ (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d0f0      	beq.n	8002d44 <HAL_RCC_OscConfig+0xe4>
 8002d62:	e014      	b.n	8002d8e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d64:	f7ff f832 	bl	8001dcc <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d6c:	f7ff f82e 	bl	8001dcc <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b64      	cmp	r3, #100	@ 0x64
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e1ec      	b.n	8003158 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d7e:	4b53      	ldr	r3, [pc, #332]	@ (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1f0      	bne.n	8002d6c <HAL_RCC_OscConfig+0x10c>
 8002d8a:	e000      	b.n	8002d8e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d063      	beq.n	8002e62 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d9a:	4b4c      	ldr	r3, [pc, #304]	@ (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f003 030c 	and.w	r3, r3, #12
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00b      	beq.n	8002dbe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002da6:	4b49      	ldr	r3, [pc, #292]	@ (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f003 030c 	and.w	r3, r3, #12
 8002dae:	2b08      	cmp	r3, #8
 8002db0:	d11c      	bne.n	8002dec <HAL_RCC_OscConfig+0x18c>
 8002db2:	4b46      	ldr	r3, [pc, #280]	@ (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d116      	bne.n	8002dec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dbe:	4b43      	ldr	r3, [pc, #268]	@ (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d005      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x176>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d001      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e1c0      	b.n	8003158 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dd6:	4b3d      	ldr	r3, [pc, #244]	@ (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	4939      	ldr	r1, [pc, #228]	@ (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dea:	e03a      	b.n	8002e62 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	691b      	ldr	r3, [r3, #16]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d020      	beq.n	8002e36 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002df4:	4b36      	ldr	r3, [pc, #216]	@ (8002ed0 <HAL_RCC_OscConfig+0x270>)
 8002df6:	2201      	movs	r2, #1
 8002df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dfa:	f7fe ffe7 	bl	8001dcc <HAL_GetTick>
 8002dfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e00:	e008      	b.n	8002e14 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e02:	f7fe ffe3 	bl	8001dcc <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d901      	bls.n	8002e14 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e1a1      	b.n	8003158 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e14:	4b2d      	ldr	r3, [pc, #180]	@ (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d0f0      	beq.n	8002e02 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e20:	4b2a      	ldr	r3, [pc, #168]	@ (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	695b      	ldr	r3, [r3, #20]
 8002e2c:	00db      	lsls	r3, r3, #3
 8002e2e:	4927      	ldr	r1, [pc, #156]	@ (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	600b      	str	r3, [r1, #0]
 8002e34:	e015      	b.n	8002e62 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e36:	4b26      	ldr	r3, [pc, #152]	@ (8002ed0 <HAL_RCC_OscConfig+0x270>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e3c:	f7fe ffc6 	bl	8001dcc <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e44:	f7fe ffc2 	bl	8001dcc <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e180      	b.n	8003158 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e56:	4b1d      	ldr	r3, [pc, #116]	@ (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1f0      	bne.n	8002e44 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0308 	and.w	r3, r3, #8
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d03a      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d019      	beq.n	8002eaa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e76:	4b17      	ldr	r3, [pc, #92]	@ (8002ed4 <HAL_RCC_OscConfig+0x274>)
 8002e78:	2201      	movs	r2, #1
 8002e7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e7c:	f7fe ffa6 	bl	8001dcc <HAL_GetTick>
 8002e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e82:	e008      	b.n	8002e96 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e84:	f7fe ffa2 	bl	8001dcc <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e160      	b.n	8003158 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e96:	4b0d      	ldr	r3, [pc, #52]	@ (8002ecc <HAL_RCC_OscConfig+0x26c>)
 8002e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d0f0      	beq.n	8002e84 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002ea2:	2001      	movs	r0, #1
 8002ea4:	f000 faba 	bl	800341c <RCC_Delay>
 8002ea8:	e01c      	b.n	8002ee4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002eaa:	4b0a      	ldr	r3, [pc, #40]	@ (8002ed4 <HAL_RCC_OscConfig+0x274>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eb0:	f7fe ff8c 	bl	8001dcc <HAL_GetTick>
 8002eb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eb6:	e00f      	b.n	8002ed8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eb8:	f7fe ff88 	bl	8001dcc <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d908      	bls.n	8002ed8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e146      	b.n	8003158 <HAL_RCC_OscConfig+0x4f8>
 8002eca:	bf00      	nop
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	42420000 	.word	0x42420000
 8002ed4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ed8:	4b92      	ldr	r3, [pc, #584]	@ (8003124 <HAL_RCC_OscConfig+0x4c4>)
 8002eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002edc:	f003 0302 	and.w	r3, r3, #2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d1e9      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0304 	and.w	r3, r3, #4
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f000 80a6 	beq.w	800303e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ef6:	4b8b      	ldr	r3, [pc, #556]	@ (8003124 <HAL_RCC_OscConfig+0x4c4>)
 8002ef8:	69db      	ldr	r3, [r3, #28]
 8002efa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10d      	bne.n	8002f1e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f02:	4b88      	ldr	r3, [pc, #544]	@ (8003124 <HAL_RCC_OscConfig+0x4c4>)
 8002f04:	69db      	ldr	r3, [r3, #28]
 8002f06:	4a87      	ldr	r2, [pc, #540]	@ (8003124 <HAL_RCC_OscConfig+0x4c4>)
 8002f08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f0c:	61d3      	str	r3, [r2, #28]
 8002f0e:	4b85      	ldr	r3, [pc, #532]	@ (8003124 <HAL_RCC_OscConfig+0x4c4>)
 8002f10:	69db      	ldr	r3, [r3, #28]
 8002f12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f16:	60bb      	str	r3, [r7, #8]
 8002f18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f1e:	4b82      	ldr	r3, [pc, #520]	@ (8003128 <HAL_RCC_OscConfig+0x4c8>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d118      	bne.n	8002f5c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f2a:	4b7f      	ldr	r3, [pc, #508]	@ (8003128 <HAL_RCC_OscConfig+0x4c8>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a7e      	ldr	r2, [pc, #504]	@ (8003128 <HAL_RCC_OscConfig+0x4c8>)
 8002f30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f36:	f7fe ff49 	bl	8001dcc <HAL_GetTick>
 8002f3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f3c:	e008      	b.n	8002f50 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f3e:	f7fe ff45 	bl	8001dcc <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	2b64      	cmp	r3, #100	@ 0x64
 8002f4a:	d901      	bls.n	8002f50 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e103      	b.n	8003158 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f50:	4b75      	ldr	r3, [pc, #468]	@ (8003128 <HAL_RCC_OscConfig+0x4c8>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d0f0      	beq.n	8002f3e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d106      	bne.n	8002f72 <HAL_RCC_OscConfig+0x312>
 8002f64:	4b6f      	ldr	r3, [pc, #444]	@ (8003124 <HAL_RCC_OscConfig+0x4c4>)
 8002f66:	6a1b      	ldr	r3, [r3, #32]
 8002f68:	4a6e      	ldr	r2, [pc, #440]	@ (8003124 <HAL_RCC_OscConfig+0x4c4>)
 8002f6a:	f043 0301 	orr.w	r3, r3, #1
 8002f6e:	6213      	str	r3, [r2, #32]
 8002f70:	e02d      	b.n	8002fce <HAL_RCC_OscConfig+0x36e>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d10c      	bne.n	8002f94 <HAL_RCC_OscConfig+0x334>
 8002f7a:	4b6a      	ldr	r3, [pc, #424]	@ (8003124 <HAL_RCC_OscConfig+0x4c4>)
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	4a69      	ldr	r2, [pc, #420]	@ (8003124 <HAL_RCC_OscConfig+0x4c4>)
 8002f80:	f023 0301 	bic.w	r3, r3, #1
 8002f84:	6213      	str	r3, [r2, #32]
 8002f86:	4b67      	ldr	r3, [pc, #412]	@ (8003124 <HAL_RCC_OscConfig+0x4c4>)
 8002f88:	6a1b      	ldr	r3, [r3, #32]
 8002f8a:	4a66      	ldr	r2, [pc, #408]	@ (8003124 <HAL_RCC_OscConfig+0x4c4>)
 8002f8c:	f023 0304 	bic.w	r3, r3, #4
 8002f90:	6213      	str	r3, [r2, #32]
 8002f92:	e01c      	b.n	8002fce <HAL_RCC_OscConfig+0x36e>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	2b05      	cmp	r3, #5
 8002f9a:	d10c      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x356>
 8002f9c:	4b61      	ldr	r3, [pc, #388]	@ (8003124 <HAL_RCC_OscConfig+0x4c4>)
 8002f9e:	6a1b      	ldr	r3, [r3, #32]
 8002fa0:	4a60      	ldr	r2, [pc, #384]	@ (8003124 <HAL_RCC_OscConfig+0x4c4>)
 8002fa2:	f043 0304 	orr.w	r3, r3, #4
 8002fa6:	6213      	str	r3, [r2, #32]
 8002fa8:	4b5e      	ldr	r3, [pc, #376]	@ (8003124 <HAL_RCC_OscConfig+0x4c4>)
 8002faa:	6a1b      	ldr	r3, [r3, #32]
 8002fac:	4a5d      	ldr	r2, [pc, #372]	@ (8003124 <HAL_RCC_OscConfig+0x4c4>)
 8002fae:	f043 0301 	orr.w	r3, r3, #1
 8002fb2:	6213      	str	r3, [r2, #32]
 8002fb4:	e00b      	b.n	8002fce <HAL_RCC_OscConfig+0x36e>
 8002fb6:	4b5b      	ldr	r3, [pc, #364]	@ (8003124 <HAL_RCC_OscConfig+0x4c4>)
 8002fb8:	6a1b      	ldr	r3, [r3, #32]
 8002fba:	4a5a      	ldr	r2, [pc, #360]	@ (8003124 <HAL_RCC_OscConfig+0x4c4>)
 8002fbc:	f023 0301 	bic.w	r3, r3, #1
 8002fc0:	6213      	str	r3, [r2, #32]
 8002fc2:	4b58      	ldr	r3, [pc, #352]	@ (8003124 <HAL_RCC_OscConfig+0x4c4>)
 8002fc4:	6a1b      	ldr	r3, [r3, #32]
 8002fc6:	4a57      	ldr	r2, [pc, #348]	@ (8003124 <HAL_RCC_OscConfig+0x4c4>)
 8002fc8:	f023 0304 	bic.w	r3, r3, #4
 8002fcc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d015      	beq.n	8003002 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fd6:	f7fe fef9 	bl	8001dcc <HAL_GetTick>
 8002fda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fdc:	e00a      	b.n	8002ff4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fde:	f7fe fef5 	bl	8001dcc <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d901      	bls.n	8002ff4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e0b1      	b.n	8003158 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ff4:	4b4b      	ldr	r3, [pc, #300]	@ (8003124 <HAL_RCC_OscConfig+0x4c4>)
 8002ff6:	6a1b      	ldr	r3, [r3, #32]
 8002ff8:	f003 0302 	and.w	r3, r3, #2
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d0ee      	beq.n	8002fde <HAL_RCC_OscConfig+0x37e>
 8003000:	e014      	b.n	800302c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003002:	f7fe fee3 	bl	8001dcc <HAL_GetTick>
 8003006:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003008:	e00a      	b.n	8003020 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800300a:	f7fe fedf 	bl	8001dcc <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003018:	4293      	cmp	r3, r2
 800301a:	d901      	bls.n	8003020 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e09b      	b.n	8003158 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003020:	4b40      	ldr	r3, [pc, #256]	@ (8003124 <HAL_RCC_OscConfig+0x4c4>)
 8003022:	6a1b      	ldr	r3, [r3, #32]
 8003024:	f003 0302 	and.w	r3, r3, #2
 8003028:	2b00      	cmp	r3, #0
 800302a:	d1ee      	bne.n	800300a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800302c:	7dfb      	ldrb	r3, [r7, #23]
 800302e:	2b01      	cmp	r3, #1
 8003030:	d105      	bne.n	800303e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003032:	4b3c      	ldr	r3, [pc, #240]	@ (8003124 <HAL_RCC_OscConfig+0x4c4>)
 8003034:	69db      	ldr	r3, [r3, #28]
 8003036:	4a3b      	ldr	r2, [pc, #236]	@ (8003124 <HAL_RCC_OscConfig+0x4c4>)
 8003038:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800303c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	69db      	ldr	r3, [r3, #28]
 8003042:	2b00      	cmp	r3, #0
 8003044:	f000 8087 	beq.w	8003156 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003048:	4b36      	ldr	r3, [pc, #216]	@ (8003124 <HAL_RCC_OscConfig+0x4c4>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f003 030c 	and.w	r3, r3, #12
 8003050:	2b08      	cmp	r3, #8
 8003052:	d061      	beq.n	8003118 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	69db      	ldr	r3, [r3, #28]
 8003058:	2b02      	cmp	r3, #2
 800305a:	d146      	bne.n	80030ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800305c:	4b33      	ldr	r3, [pc, #204]	@ (800312c <HAL_RCC_OscConfig+0x4cc>)
 800305e:	2200      	movs	r2, #0
 8003060:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003062:	f7fe feb3 	bl	8001dcc <HAL_GetTick>
 8003066:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003068:	e008      	b.n	800307c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800306a:	f7fe feaf 	bl	8001dcc <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	2b02      	cmp	r3, #2
 8003076:	d901      	bls.n	800307c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e06d      	b.n	8003158 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800307c:	4b29      	ldr	r3, [pc, #164]	@ (8003124 <HAL_RCC_OscConfig+0x4c4>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1f0      	bne.n	800306a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a1b      	ldr	r3, [r3, #32]
 800308c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003090:	d108      	bne.n	80030a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003092:	4b24      	ldr	r3, [pc, #144]	@ (8003124 <HAL_RCC_OscConfig+0x4c4>)
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	4921      	ldr	r1, [pc, #132]	@ (8003124 <HAL_RCC_OscConfig+0x4c4>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030a4:	4b1f      	ldr	r3, [pc, #124]	@ (8003124 <HAL_RCC_OscConfig+0x4c4>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a19      	ldr	r1, [r3, #32]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b4:	430b      	orrs	r3, r1
 80030b6:	491b      	ldr	r1, [pc, #108]	@ (8003124 <HAL_RCC_OscConfig+0x4c4>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030bc:	4b1b      	ldr	r3, [pc, #108]	@ (800312c <HAL_RCC_OscConfig+0x4cc>)
 80030be:	2201      	movs	r2, #1
 80030c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c2:	f7fe fe83 	bl	8001dcc <HAL_GetTick>
 80030c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030c8:	e008      	b.n	80030dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ca:	f7fe fe7f 	bl	8001dcc <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d901      	bls.n	80030dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e03d      	b.n	8003158 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030dc:	4b11      	ldr	r3, [pc, #68]	@ (8003124 <HAL_RCC_OscConfig+0x4c4>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d0f0      	beq.n	80030ca <HAL_RCC_OscConfig+0x46a>
 80030e8:	e035      	b.n	8003156 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ea:	4b10      	ldr	r3, [pc, #64]	@ (800312c <HAL_RCC_OscConfig+0x4cc>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f0:	f7fe fe6c 	bl	8001dcc <HAL_GetTick>
 80030f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030f6:	e008      	b.n	800310a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030f8:	f7fe fe68 	bl	8001dcc <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b02      	cmp	r3, #2
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e026      	b.n	8003158 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800310a:	4b06      	ldr	r3, [pc, #24]	@ (8003124 <HAL_RCC_OscConfig+0x4c4>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1f0      	bne.n	80030f8 <HAL_RCC_OscConfig+0x498>
 8003116:	e01e      	b.n	8003156 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	69db      	ldr	r3, [r3, #28]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d107      	bne.n	8003130 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e019      	b.n	8003158 <HAL_RCC_OscConfig+0x4f8>
 8003124:	40021000 	.word	0x40021000
 8003128:	40007000 	.word	0x40007000
 800312c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003130:	4b0b      	ldr	r3, [pc, #44]	@ (8003160 <HAL_RCC_OscConfig+0x500>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	429a      	cmp	r2, r3
 8003142:	d106      	bne.n	8003152 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800314e:	429a      	cmp	r2, r3
 8003150:	d001      	beq.n	8003156 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e000      	b.n	8003158 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003156:	2300      	movs	r3, #0
}
 8003158:	4618      	mov	r0, r3
 800315a:	3718      	adds	r7, #24
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	40021000 	.word	0x40021000

08003164 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d101      	bne.n	8003178 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e0d0      	b.n	800331a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003178:	4b6a      	ldr	r3, [pc, #424]	@ (8003324 <HAL_RCC_ClockConfig+0x1c0>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0307 	and.w	r3, r3, #7
 8003180:	683a      	ldr	r2, [r7, #0]
 8003182:	429a      	cmp	r2, r3
 8003184:	d910      	bls.n	80031a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003186:	4b67      	ldr	r3, [pc, #412]	@ (8003324 <HAL_RCC_ClockConfig+0x1c0>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f023 0207 	bic.w	r2, r3, #7
 800318e:	4965      	ldr	r1, [pc, #404]	@ (8003324 <HAL_RCC_ClockConfig+0x1c0>)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	4313      	orrs	r3, r2
 8003194:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003196:	4b63      	ldr	r3, [pc, #396]	@ (8003324 <HAL_RCC_ClockConfig+0x1c0>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0307 	and.w	r3, r3, #7
 800319e:	683a      	ldr	r2, [r7, #0]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d001      	beq.n	80031a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e0b8      	b.n	800331a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d020      	beq.n	80031f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0304 	and.w	r3, r3, #4
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d005      	beq.n	80031cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031c0:	4b59      	ldr	r3, [pc, #356]	@ (8003328 <HAL_RCC_ClockConfig+0x1c4>)
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	4a58      	ldr	r2, [pc, #352]	@ (8003328 <HAL_RCC_ClockConfig+0x1c4>)
 80031c6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80031ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0308 	and.w	r3, r3, #8
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d005      	beq.n	80031e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031d8:	4b53      	ldr	r3, [pc, #332]	@ (8003328 <HAL_RCC_ClockConfig+0x1c4>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	4a52      	ldr	r2, [pc, #328]	@ (8003328 <HAL_RCC_ClockConfig+0x1c4>)
 80031de:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80031e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031e4:	4b50      	ldr	r3, [pc, #320]	@ (8003328 <HAL_RCC_ClockConfig+0x1c4>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	494d      	ldr	r1, [pc, #308]	@ (8003328 <HAL_RCC_ClockConfig+0x1c4>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d040      	beq.n	8003284 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d107      	bne.n	800321a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800320a:	4b47      	ldr	r3, [pc, #284]	@ (8003328 <HAL_RCC_ClockConfig+0x1c4>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d115      	bne.n	8003242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e07f      	b.n	800331a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	2b02      	cmp	r3, #2
 8003220:	d107      	bne.n	8003232 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003222:	4b41      	ldr	r3, [pc, #260]	@ (8003328 <HAL_RCC_ClockConfig+0x1c4>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d109      	bne.n	8003242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e073      	b.n	800331a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003232:	4b3d      	ldr	r3, [pc, #244]	@ (8003328 <HAL_RCC_ClockConfig+0x1c4>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e06b      	b.n	800331a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003242:	4b39      	ldr	r3, [pc, #228]	@ (8003328 <HAL_RCC_ClockConfig+0x1c4>)
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f023 0203 	bic.w	r2, r3, #3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	4936      	ldr	r1, [pc, #216]	@ (8003328 <HAL_RCC_ClockConfig+0x1c4>)
 8003250:	4313      	orrs	r3, r2
 8003252:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003254:	f7fe fdba 	bl	8001dcc <HAL_GetTick>
 8003258:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800325a:	e00a      	b.n	8003272 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800325c:	f7fe fdb6 	bl	8001dcc <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	f241 3288 	movw	r2, #5000	@ 0x1388
 800326a:	4293      	cmp	r3, r2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e053      	b.n	800331a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003272:	4b2d      	ldr	r3, [pc, #180]	@ (8003328 <HAL_RCC_ClockConfig+0x1c4>)
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f003 020c 	and.w	r2, r3, #12
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	429a      	cmp	r2, r3
 8003282:	d1eb      	bne.n	800325c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003284:	4b27      	ldr	r3, [pc, #156]	@ (8003324 <HAL_RCC_ClockConfig+0x1c0>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0307 	and.w	r3, r3, #7
 800328c:	683a      	ldr	r2, [r7, #0]
 800328e:	429a      	cmp	r2, r3
 8003290:	d210      	bcs.n	80032b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003292:	4b24      	ldr	r3, [pc, #144]	@ (8003324 <HAL_RCC_ClockConfig+0x1c0>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f023 0207 	bic.w	r2, r3, #7
 800329a:	4922      	ldr	r1, [pc, #136]	@ (8003324 <HAL_RCC_ClockConfig+0x1c0>)
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	4313      	orrs	r3, r2
 80032a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032a2:	4b20      	ldr	r3, [pc, #128]	@ (8003324 <HAL_RCC_ClockConfig+0x1c0>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0307 	and.w	r3, r3, #7
 80032aa:	683a      	ldr	r2, [r7, #0]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d001      	beq.n	80032b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e032      	b.n	800331a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0304 	and.w	r3, r3, #4
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d008      	beq.n	80032d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032c0:	4b19      	ldr	r3, [pc, #100]	@ (8003328 <HAL_RCC_ClockConfig+0x1c4>)
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	4916      	ldr	r1, [pc, #88]	@ (8003328 <HAL_RCC_ClockConfig+0x1c4>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0308 	and.w	r3, r3, #8
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d009      	beq.n	80032f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80032de:	4b12      	ldr	r3, [pc, #72]	@ (8003328 <HAL_RCC_ClockConfig+0x1c4>)
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	00db      	lsls	r3, r3, #3
 80032ec:	490e      	ldr	r1, [pc, #56]	@ (8003328 <HAL_RCC_ClockConfig+0x1c4>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032f2:	f000 f821 	bl	8003338 <HAL_RCC_GetSysClockFreq>
 80032f6:	4602      	mov	r2, r0
 80032f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003328 <HAL_RCC_ClockConfig+0x1c4>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	091b      	lsrs	r3, r3, #4
 80032fe:	f003 030f 	and.w	r3, r3, #15
 8003302:	490a      	ldr	r1, [pc, #40]	@ (800332c <HAL_RCC_ClockConfig+0x1c8>)
 8003304:	5ccb      	ldrb	r3, [r1, r3]
 8003306:	fa22 f303 	lsr.w	r3, r2, r3
 800330a:	4a09      	ldr	r2, [pc, #36]	@ (8003330 <HAL_RCC_ClockConfig+0x1cc>)
 800330c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800330e:	4b09      	ldr	r3, [pc, #36]	@ (8003334 <HAL_RCC_ClockConfig+0x1d0>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4618      	mov	r0, r3
 8003314:	f7fe fd18 	bl	8001d48 <HAL_InitTick>

  return HAL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3710      	adds	r7, #16
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	40022000 	.word	0x40022000
 8003328:	40021000 	.word	0x40021000
 800332c:	080049a8 	.word	0x080049a8
 8003330:	20000000 	.word	0x20000000
 8003334:	20000004 	.word	0x20000004

08003338 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003338:	b480      	push	{r7}
 800333a:	b087      	sub	sp, #28
 800333c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800333e:	2300      	movs	r3, #0
 8003340:	60fb      	str	r3, [r7, #12]
 8003342:	2300      	movs	r3, #0
 8003344:	60bb      	str	r3, [r7, #8]
 8003346:	2300      	movs	r3, #0
 8003348:	617b      	str	r3, [r7, #20]
 800334a:	2300      	movs	r3, #0
 800334c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800334e:	2300      	movs	r3, #0
 8003350:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003352:	4b1e      	ldr	r3, [pc, #120]	@ (80033cc <HAL_RCC_GetSysClockFreq+0x94>)
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f003 030c 	and.w	r3, r3, #12
 800335e:	2b04      	cmp	r3, #4
 8003360:	d002      	beq.n	8003368 <HAL_RCC_GetSysClockFreq+0x30>
 8003362:	2b08      	cmp	r3, #8
 8003364:	d003      	beq.n	800336e <HAL_RCC_GetSysClockFreq+0x36>
 8003366:	e027      	b.n	80033b8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003368:	4b19      	ldr	r3, [pc, #100]	@ (80033d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800336a:	613b      	str	r3, [r7, #16]
      break;
 800336c:	e027      	b.n	80033be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	0c9b      	lsrs	r3, r3, #18
 8003372:	f003 030f 	and.w	r3, r3, #15
 8003376:	4a17      	ldr	r2, [pc, #92]	@ (80033d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003378:	5cd3      	ldrb	r3, [r2, r3]
 800337a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d010      	beq.n	80033a8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003386:	4b11      	ldr	r3, [pc, #68]	@ (80033cc <HAL_RCC_GetSysClockFreq+0x94>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	0c5b      	lsrs	r3, r3, #17
 800338c:	f003 0301 	and.w	r3, r3, #1
 8003390:	4a11      	ldr	r2, [pc, #68]	@ (80033d8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003392:	5cd3      	ldrb	r3, [r2, r3]
 8003394:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a0d      	ldr	r2, [pc, #52]	@ (80033d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800339a:	fb03 f202 	mul.w	r2, r3, r2
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033a4:	617b      	str	r3, [r7, #20]
 80033a6:	e004      	b.n	80033b2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a0c      	ldr	r2, [pc, #48]	@ (80033dc <HAL_RCC_GetSysClockFreq+0xa4>)
 80033ac:	fb02 f303 	mul.w	r3, r2, r3
 80033b0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	613b      	str	r3, [r7, #16]
      break;
 80033b6:	e002      	b.n	80033be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80033b8:	4b05      	ldr	r3, [pc, #20]	@ (80033d0 <HAL_RCC_GetSysClockFreq+0x98>)
 80033ba:	613b      	str	r3, [r7, #16]
      break;
 80033bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033be:	693b      	ldr	r3, [r7, #16]
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	371c      	adds	r7, #28
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bc80      	pop	{r7}
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	40021000 	.word	0x40021000
 80033d0:	007a1200 	.word	0x007a1200
 80033d4:	080049c0 	.word	0x080049c0
 80033d8:	080049d0 	.word	0x080049d0
 80033dc:	003d0900 	.word	0x003d0900

080033e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033e0:	b480      	push	{r7}
 80033e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033e4:	4b02      	ldr	r3, [pc, #8]	@ (80033f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80033e6:	681b      	ldr	r3, [r3, #0]
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bc80      	pop	{r7}
 80033ee:	4770      	bx	lr
 80033f0:	20000000 	.word	0x20000000

080033f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033f8:	f7ff fff2 	bl	80033e0 <HAL_RCC_GetHCLKFreq>
 80033fc:	4602      	mov	r2, r0
 80033fe:	4b05      	ldr	r3, [pc, #20]	@ (8003414 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	0a1b      	lsrs	r3, r3, #8
 8003404:	f003 0307 	and.w	r3, r3, #7
 8003408:	4903      	ldr	r1, [pc, #12]	@ (8003418 <HAL_RCC_GetPCLK1Freq+0x24>)
 800340a:	5ccb      	ldrb	r3, [r1, r3]
 800340c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003410:	4618      	mov	r0, r3
 8003412:	bd80      	pop	{r7, pc}
 8003414:	40021000 	.word	0x40021000
 8003418:	080049b8 	.word	0x080049b8

0800341c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003424:	4b0a      	ldr	r3, [pc, #40]	@ (8003450 <RCC_Delay+0x34>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a0a      	ldr	r2, [pc, #40]	@ (8003454 <RCC_Delay+0x38>)
 800342a:	fba2 2303 	umull	r2, r3, r2, r3
 800342e:	0a5b      	lsrs	r3, r3, #9
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	fb02 f303 	mul.w	r3, r2, r3
 8003436:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003438:	bf00      	nop
  }
  while (Delay --);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	1e5a      	subs	r2, r3, #1
 800343e:	60fa      	str	r2, [r7, #12]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d1f9      	bne.n	8003438 <RCC_Delay+0x1c>
}
 8003444:	bf00      	nop
 8003446:	bf00      	nop
 8003448:	3714      	adds	r7, #20
 800344a:	46bd      	mov	sp, r7
 800344c:	bc80      	pop	{r7}
 800344e:	4770      	bx	lr
 8003450:	20000000 	.word	0x20000000
 8003454:	10624dd3 	.word	0x10624dd3

08003458 <memset>:
 8003458:	4603      	mov	r3, r0
 800345a:	4402      	add	r2, r0
 800345c:	4293      	cmp	r3, r2
 800345e:	d100      	bne.n	8003462 <memset+0xa>
 8003460:	4770      	bx	lr
 8003462:	f803 1b01 	strb.w	r1, [r3], #1
 8003466:	e7f9      	b.n	800345c <memset+0x4>

08003468 <__errno>:
 8003468:	4b01      	ldr	r3, [pc, #4]	@ (8003470 <__errno+0x8>)
 800346a:	6818      	ldr	r0, [r3, #0]
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	2000000c 	.word	0x2000000c

08003474 <__libc_init_array>:
 8003474:	b570      	push	{r4, r5, r6, lr}
 8003476:	2600      	movs	r6, #0
 8003478:	4d0c      	ldr	r5, [pc, #48]	@ (80034ac <__libc_init_array+0x38>)
 800347a:	4c0d      	ldr	r4, [pc, #52]	@ (80034b0 <__libc_init_array+0x3c>)
 800347c:	1b64      	subs	r4, r4, r5
 800347e:	10a4      	asrs	r4, r4, #2
 8003480:	42a6      	cmp	r6, r4
 8003482:	d109      	bne.n	8003498 <__libc_init_array+0x24>
 8003484:	f001 fa84 	bl	8004990 <_init>
 8003488:	2600      	movs	r6, #0
 800348a:	4d0a      	ldr	r5, [pc, #40]	@ (80034b4 <__libc_init_array+0x40>)
 800348c:	4c0a      	ldr	r4, [pc, #40]	@ (80034b8 <__libc_init_array+0x44>)
 800348e:	1b64      	subs	r4, r4, r5
 8003490:	10a4      	asrs	r4, r4, #2
 8003492:	42a6      	cmp	r6, r4
 8003494:	d105      	bne.n	80034a2 <__libc_init_array+0x2e>
 8003496:	bd70      	pop	{r4, r5, r6, pc}
 8003498:	f855 3b04 	ldr.w	r3, [r5], #4
 800349c:	4798      	blx	r3
 800349e:	3601      	adds	r6, #1
 80034a0:	e7ee      	b.n	8003480 <__libc_init_array+0xc>
 80034a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80034a6:	4798      	blx	r3
 80034a8:	3601      	adds	r6, #1
 80034aa:	e7f2      	b.n	8003492 <__libc_init_array+0x1e>
 80034ac:	08004dc4 	.word	0x08004dc4
 80034b0:	08004dc4 	.word	0x08004dc4
 80034b4:	08004dc4 	.word	0x08004dc4
 80034b8:	08004dc8 	.word	0x08004dc8

080034bc <memcpy>:
 80034bc:	440a      	add	r2, r1
 80034be:	4291      	cmp	r1, r2
 80034c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80034c4:	d100      	bne.n	80034c8 <memcpy+0xc>
 80034c6:	4770      	bx	lr
 80034c8:	b510      	push	{r4, lr}
 80034ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80034ce:	4291      	cmp	r1, r2
 80034d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80034d4:	d1f9      	bne.n	80034ca <memcpy+0xe>
 80034d6:	bd10      	pop	{r4, pc}

080034d8 <powf>:
 80034d8:	b570      	push	{r4, r5, r6, lr}
 80034da:	460c      	mov	r4, r1
 80034dc:	4606      	mov	r6, r0
 80034de:	f000 fa43 	bl	8003968 <__ieee754_powf>
 80034e2:	4621      	mov	r1, r4
 80034e4:	4605      	mov	r5, r0
 80034e6:	4620      	mov	r0, r4
 80034e8:	f7fd f904 	bl	80006f4 <__aeabi_fcmpun>
 80034ec:	bb68      	cbnz	r0, 800354a <powf+0x72>
 80034ee:	2100      	movs	r1, #0
 80034f0:	4630      	mov	r0, r6
 80034f2:	f7fd f8cd 	bl	8000690 <__aeabi_fcmpeq>
 80034f6:	b190      	cbz	r0, 800351e <powf+0x46>
 80034f8:	2100      	movs	r1, #0
 80034fa:	4620      	mov	r0, r4
 80034fc:	f7fd f8c8 	bl	8000690 <__aeabi_fcmpeq>
 8003500:	2800      	cmp	r0, #0
 8003502:	d133      	bne.n	800356c <powf+0x94>
 8003504:	4620      	mov	r0, r4
 8003506:	f000 f8c1 	bl	800368c <finitef>
 800350a:	b1f0      	cbz	r0, 800354a <powf+0x72>
 800350c:	2100      	movs	r1, #0
 800350e:	4620      	mov	r0, r4
 8003510:	f7fd f8c8 	bl	80006a4 <__aeabi_fcmplt>
 8003514:	b1c8      	cbz	r0, 800354a <powf+0x72>
 8003516:	f7ff ffa7 	bl	8003468 <__errno>
 800351a:	2322      	movs	r3, #34	@ 0x22
 800351c:	e014      	b.n	8003548 <powf+0x70>
 800351e:	4628      	mov	r0, r5
 8003520:	f000 f8b4 	bl	800368c <finitef>
 8003524:	b998      	cbnz	r0, 800354e <powf+0x76>
 8003526:	4630      	mov	r0, r6
 8003528:	f000 f8b0 	bl	800368c <finitef>
 800352c:	b178      	cbz	r0, 800354e <powf+0x76>
 800352e:	4620      	mov	r0, r4
 8003530:	f000 f8ac 	bl	800368c <finitef>
 8003534:	b158      	cbz	r0, 800354e <powf+0x76>
 8003536:	4629      	mov	r1, r5
 8003538:	4628      	mov	r0, r5
 800353a:	f7fd f8db 	bl	80006f4 <__aeabi_fcmpun>
 800353e:	2800      	cmp	r0, #0
 8003540:	d0e9      	beq.n	8003516 <powf+0x3e>
 8003542:	f7ff ff91 	bl	8003468 <__errno>
 8003546:	2321      	movs	r3, #33	@ 0x21
 8003548:	6003      	str	r3, [r0, #0]
 800354a:	4628      	mov	r0, r5
 800354c:	bd70      	pop	{r4, r5, r6, pc}
 800354e:	2100      	movs	r1, #0
 8003550:	4628      	mov	r0, r5
 8003552:	f7fd f89d 	bl	8000690 <__aeabi_fcmpeq>
 8003556:	2800      	cmp	r0, #0
 8003558:	d0f7      	beq.n	800354a <powf+0x72>
 800355a:	4630      	mov	r0, r6
 800355c:	f000 f896 	bl	800368c <finitef>
 8003560:	2800      	cmp	r0, #0
 8003562:	d0f2      	beq.n	800354a <powf+0x72>
 8003564:	4620      	mov	r0, r4
 8003566:	f000 f891 	bl	800368c <finitef>
 800356a:	e7d3      	b.n	8003514 <powf+0x3c>
 800356c:	f04f 557e 	mov.w	r5, #1065353216	@ 0x3f800000
 8003570:	e7eb      	b.n	800354a <powf+0x72>

08003572 <sqrtf>:
 8003572:	b538      	push	{r3, r4, r5, lr}
 8003574:	4605      	mov	r5, r0
 8003576:	f000 f891 	bl	800369c <__ieee754_sqrtf>
 800357a:	4629      	mov	r1, r5
 800357c:	4604      	mov	r4, r0
 800357e:	4628      	mov	r0, r5
 8003580:	f7fd f8b8 	bl	80006f4 <__aeabi_fcmpun>
 8003584:	b968      	cbnz	r0, 80035a2 <sqrtf+0x30>
 8003586:	2100      	movs	r1, #0
 8003588:	4628      	mov	r0, r5
 800358a:	f7fd f88b 	bl	80006a4 <__aeabi_fcmplt>
 800358e:	b140      	cbz	r0, 80035a2 <sqrtf+0x30>
 8003590:	f7ff ff6a 	bl	8003468 <__errno>
 8003594:	2321      	movs	r3, #33	@ 0x21
 8003596:	2100      	movs	r1, #0
 8003598:	6003      	str	r3, [r0, #0]
 800359a:	4608      	mov	r0, r1
 800359c:	f7fc ff98 	bl	80004d0 <__aeabi_fdiv>
 80035a0:	4604      	mov	r4, r0
 80035a2:	4620      	mov	r0, r4
 80035a4:	bd38      	pop	{r3, r4, r5, pc}
	...

080035a8 <cosf>:
 80035a8:	b507      	push	{r0, r1, r2, lr}
 80035aa:	4a1a      	ldr	r2, [pc, #104]	@ (8003614 <cosf+0x6c>)
 80035ac:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 80035b0:	4293      	cmp	r3, r2
 80035b2:	4601      	mov	r1, r0
 80035b4:	d805      	bhi.n	80035c2 <cosf+0x1a>
 80035b6:	2100      	movs	r1, #0
 80035b8:	b003      	add	sp, #12
 80035ba:	f85d eb04 	ldr.w	lr, [sp], #4
 80035be:	f000 b8dd 	b.w	800377c <__kernel_cosf>
 80035c2:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80035c6:	d304      	bcc.n	80035d2 <cosf+0x2a>
 80035c8:	f7fc fdc4 	bl	8000154 <__aeabi_fsub>
 80035cc:	b003      	add	sp, #12
 80035ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80035d2:	4669      	mov	r1, sp
 80035d4:	f000 fd28 	bl	8004028 <__ieee754_rem_pio2f>
 80035d8:	f000 0203 	and.w	r2, r0, #3
 80035dc:	2a01      	cmp	r2, #1
 80035de:	d007      	beq.n	80035f0 <cosf+0x48>
 80035e0:	2a02      	cmp	r2, #2
 80035e2:	d00c      	beq.n	80035fe <cosf+0x56>
 80035e4:	b982      	cbnz	r2, 8003608 <cosf+0x60>
 80035e6:	9901      	ldr	r1, [sp, #4]
 80035e8:	9800      	ldr	r0, [sp, #0]
 80035ea:	f000 f8c7 	bl	800377c <__kernel_cosf>
 80035ee:	e7ed      	b.n	80035cc <cosf+0x24>
 80035f0:	9901      	ldr	r1, [sp, #4]
 80035f2:	9800      	ldr	r0, [sp, #0]
 80035f4:	f000 f942 	bl	800387c <__kernel_sinf>
 80035f8:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 80035fc:	e7e6      	b.n	80035cc <cosf+0x24>
 80035fe:	9901      	ldr	r1, [sp, #4]
 8003600:	9800      	ldr	r0, [sp, #0]
 8003602:	f000 f8bb 	bl	800377c <__kernel_cosf>
 8003606:	e7f7      	b.n	80035f8 <cosf+0x50>
 8003608:	2201      	movs	r2, #1
 800360a:	9901      	ldr	r1, [sp, #4]
 800360c:	9800      	ldr	r0, [sp, #0]
 800360e:	f000 f935 	bl	800387c <__kernel_sinf>
 8003612:	e7db      	b.n	80035cc <cosf+0x24>
 8003614:	3f490fd8 	.word	0x3f490fd8

08003618 <sinf>:
 8003618:	b507      	push	{r0, r1, r2, lr}
 800361a:	4a1b      	ldr	r2, [pc, #108]	@ (8003688 <sinf+0x70>)
 800361c:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8003620:	4293      	cmp	r3, r2
 8003622:	4601      	mov	r1, r0
 8003624:	d806      	bhi.n	8003634 <sinf+0x1c>
 8003626:	2200      	movs	r2, #0
 8003628:	2100      	movs	r1, #0
 800362a:	b003      	add	sp, #12
 800362c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003630:	f000 b924 	b.w	800387c <__kernel_sinf>
 8003634:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8003638:	d304      	bcc.n	8003644 <sinf+0x2c>
 800363a:	f7fc fd8b 	bl	8000154 <__aeabi_fsub>
 800363e:	b003      	add	sp, #12
 8003640:	f85d fb04 	ldr.w	pc, [sp], #4
 8003644:	4669      	mov	r1, sp
 8003646:	f000 fcef 	bl	8004028 <__ieee754_rem_pio2f>
 800364a:	f000 0003 	and.w	r0, r0, #3
 800364e:	2801      	cmp	r0, #1
 8003650:	d008      	beq.n	8003664 <sinf+0x4c>
 8003652:	2802      	cmp	r0, #2
 8003654:	d00b      	beq.n	800366e <sinf+0x56>
 8003656:	b990      	cbnz	r0, 800367e <sinf+0x66>
 8003658:	2201      	movs	r2, #1
 800365a:	9901      	ldr	r1, [sp, #4]
 800365c:	9800      	ldr	r0, [sp, #0]
 800365e:	f000 f90d 	bl	800387c <__kernel_sinf>
 8003662:	e7ec      	b.n	800363e <sinf+0x26>
 8003664:	9901      	ldr	r1, [sp, #4]
 8003666:	9800      	ldr	r0, [sp, #0]
 8003668:	f000 f888 	bl	800377c <__kernel_cosf>
 800366c:	e7e7      	b.n	800363e <sinf+0x26>
 800366e:	2201      	movs	r2, #1
 8003670:	9901      	ldr	r1, [sp, #4]
 8003672:	9800      	ldr	r0, [sp, #0]
 8003674:	f000 f902 	bl	800387c <__kernel_sinf>
 8003678:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800367c:	e7df      	b.n	800363e <sinf+0x26>
 800367e:	9901      	ldr	r1, [sp, #4]
 8003680:	9800      	ldr	r0, [sp, #0]
 8003682:	f000 f87b 	bl	800377c <__kernel_cosf>
 8003686:	e7f7      	b.n	8003678 <sinf+0x60>
 8003688:	3f490fd8 	.word	0x3f490fd8

0800368c <finitef>:
 800368c:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8003690:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8003694:	bfac      	ite	ge
 8003696:	2000      	movge	r0, #0
 8003698:	2001      	movlt	r0, #1
 800369a:	4770      	bx	lr

0800369c <__ieee754_sqrtf>:
 800369c:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 80036a0:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80036a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036a8:	4603      	mov	r3, r0
 80036aa:	4604      	mov	r4, r0
 80036ac:	d30a      	bcc.n	80036c4 <__ieee754_sqrtf+0x28>
 80036ae:	4601      	mov	r1, r0
 80036b0:	f7fc fe5a 	bl	8000368 <__aeabi_fmul>
 80036b4:	4601      	mov	r1, r0
 80036b6:	4620      	mov	r0, r4
 80036b8:	f7fc fd4e 	bl	8000158 <__addsf3>
 80036bc:	4604      	mov	r4, r0
 80036be:	4620      	mov	r0, r4
 80036c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036c4:	2a00      	cmp	r2, #0
 80036c6:	d0fa      	beq.n	80036be <__ieee754_sqrtf+0x22>
 80036c8:	2800      	cmp	r0, #0
 80036ca:	da06      	bge.n	80036da <__ieee754_sqrtf+0x3e>
 80036cc:	4601      	mov	r1, r0
 80036ce:	f7fc fd41 	bl	8000154 <__aeabi_fsub>
 80036d2:	4601      	mov	r1, r0
 80036d4:	f7fc fefc 	bl	80004d0 <__aeabi_fdiv>
 80036d8:	e7f0      	b.n	80036bc <__ieee754_sqrtf+0x20>
 80036da:	f010 41ff 	ands.w	r1, r0, #2139095040	@ 0x7f800000
 80036de:	d03c      	beq.n	800375a <__ieee754_sqrtf+0xbe>
 80036e0:	15c2      	asrs	r2, r0, #23
 80036e2:	2400      	movs	r4, #0
 80036e4:	2019      	movs	r0, #25
 80036e6:	4626      	mov	r6, r4
 80036e8:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 80036ec:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80036f0:	f1a2 057f 	sub.w	r5, r2, #127	@ 0x7f
 80036f4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80036f8:	07d2      	lsls	r2, r2, #31
 80036fa:	bf58      	it	pl
 80036fc:	005b      	lslpl	r3, r3, #1
 80036fe:	106d      	asrs	r5, r5, #1
 8003700:	005b      	lsls	r3, r3, #1
 8003702:	1872      	adds	r2, r6, r1
 8003704:	429a      	cmp	r2, r3
 8003706:	bfcf      	iteee	gt
 8003708:	461a      	movgt	r2, r3
 800370a:	1856      	addle	r6, r2, r1
 800370c:	1864      	addle	r4, r4, r1
 800370e:	1a9a      	suble	r2, r3, r2
 8003710:	3801      	subs	r0, #1
 8003712:	ea4f 0342 	mov.w	r3, r2, lsl #1
 8003716:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800371a:	d1f2      	bne.n	8003702 <__ieee754_sqrtf+0x66>
 800371c:	b1ba      	cbz	r2, 800374e <__ieee754_sqrtf+0xb2>
 800371e:	4e15      	ldr	r6, [pc, #84]	@ (8003774 <__ieee754_sqrtf+0xd8>)
 8003720:	4f15      	ldr	r7, [pc, #84]	@ (8003778 <__ieee754_sqrtf+0xdc>)
 8003722:	6830      	ldr	r0, [r6, #0]
 8003724:	6839      	ldr	r1, [r7, #0]
 8003726:	f7fc fd15 	bl	8000154 <__aeabi_fsub>
 800372a:	f8d6 8000 	ldr.w	r8, [r6]
 800372e:	4601      	mov	r1, r0
 8003730:	4640      	mov	r0, r8
 8003732:	f7fc ffc1 	bl	80006b8 <__aeabi_fcmple>
 8003736:	b150      	cbz	r0, 800374e <__ieee754_sqrtf+0xb2>
 8003738:	6830      	ldr	r0, [r6, #0]
 800373a:	6839      	ldr	r1, [r7, #0]
 800373c:	f7fc fd0c 	bl	8000158 <__addsf3>
 8003740:	6836      	ldr	r6, [r6, #0]
 8003742:	4601      	mov	r1, r0
 8003744:	4630      	mov	r0, r6
 8003746:	f7fc ffad 	bl	80006a4 <__aeabi_fcmplt>
 800374a:	b170      	cbz	r0, 800376a <__ieee754_sqrtf+0xce>
 800374c:	3402      	adds	r4, #2
 800374e:	1064      	asrs	r4, r4, #1
 8003750:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 8003754:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 8003758:	e7b1      	b.n	80036be <__ieee754_sqrtf+0x22>
 800375a:	005b      	lsls	r3, r3, #1
 800375c:	0218      	lsls	r0, r3, #8
 800375e:	460a      	mov	r2, r1
 8003760:	f101 0101 	add.w	r1, r1, #1
 8003764:	d5f9      	bpl.n	800375a <__ieee754_sqrtf+0xbe>
 8003766:	4252      	negs	r2, r2
 8003768:	e7bb      	b.n	80036e2 <__ieee754_sqrtf+0x46>
 800376a:	3401      	adds	r4, #1
 800376c:	f024 0401 	bic.w	r4, r4, #1
 8003770:	e7ed      	b.n	800374e <__ieee754_sqrtf+0xb2>
 8003772:	bf00      	nop
 8003774:	080049d8 	.word	0x080049d8
 8003778:	080049d4 	.word	0x080049d4

0800377c <__kernel_cosf>:
 800377c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003780:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 8003784:	f1b5 5f48 	cmp.w	r5, #838860800	@ 0x32000000
 8003788:	4606      	mov	r6, r0
 800378a:	4688      	mov	r8, r1
 800378c:	d203      	bcs.n	8003796 <__kernel_cosf+0x1a>
 800378e:	f7fc ffc7 	bl	8000720 <__aeabi_f2iz>
 8003792:	2800      	cmp	r0, #0
 8003794:	d05c      	beq.n	8003850 <__kernel_cosf+0xd4>
 8003796:	4631      	mov	r1, r6
 8003798:	4630      	mov	r0, r6
 800379a:	f7fc fde5 	bl	8000368 <__aeabi_fmul>
 800379e:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80037a2:	4604      	mov	r4, r0
 80037a4:	f7fc fde0 	bl	8000368 <__aeabi_fmul>
 80037a8:	492b      	ldr	r1, [pc, #172]	@ (8003858 <__kernel_cosf+0xdc>)
 80037aa:	4607      	mov	r7, r0
 80037ac:	4620      	mov	r0, r4
 80037ae:	f7fc fddb 	bl	8000368 <__aeabi_fmul>
 80037b2:	492a      	ldr	r1, [pc, #168]	@ (800385c <__kernel_cosf+0xe0>)
 80037b4:	f7fc fcd0 	bl	8000158 <__addsf3>
 80037b8:	4621      	mov	r1, r4
 80037ba:	f7fc fdd5 	bl	8000368 <__aeabi_fmul>
 80037be:	4928      	ldr	r1, [pc, #160]	@ (8003860 <__kernel_cosf+0xe4>)
 80037c0:	f7fc fcc8 	bl	8000154 <__aeabi_fsub>
 80037c4:	4621      	mov	r1, r4
 80037c6:	f7fc fdcf 	bl	8000368 <__aeabi_fmul>
 80037ca:	4926      	ldr	r1, [pc, #152]	@ (8003864 <__kernel_cosf+0xe8>)
 80037cc:	f7fc fcc4 	bl	8000158 <__addsf3>
 80037d0:	4621      	mov	r1, r4
 80037d2:	f7fc fdc9 	bl	8000368 <__aeabi_fmul>
 80037d6:	4924      	ldr	r1, [pc, #144]	@ (8003868 <__kernel_cosf+0xec>)
 80037d8:	f7fc fcbc 	bl	8000154 <__aeabi_fsub>
 80037dc:	4621      	mov	r1, r4
 80037de:	f7fc fdc3 	bl	8000368 <__aeabi_fmul>
 80037e2:	4922      	ldr	r1, [pc, #136]	@ (800386c <__kernel_cosf+0xf0>)
 80037e4:	f7fc fcb8 	bl	8000158 <__addsf3>
 80037e8:	4621      	mov	r1, r4
 80037ea:	f7fc fdbd 	bl	8000368 <__aeabi_fmul>
 80037ee:	4621      	mov	r1, r4
 80037f0:	f7fc fdba 	bl	8000368 <__aeabi_fmul>
 80037f4:	4641      	mov	r1, r8
 80037f6:	4604      	mov	r4, r0
 80037f8:	4630      	mov	r0, r6
 80037fa:	f7fc fdb5 	bl	8000368 <__aeabi_fmul>
 80037fe:	4601      	mov	r1, r0
 8003800:	4620      	mov	r0, r4
 8003802:	f7fc fca7 	bl	8000154 <__aeabi_fsub>
 8003806:	4b1a      	ldr	r3, [pc, #104]	@ (8003870 <__kernel_cosf+0xf4>)
 8003808:	4604      	mov	r4, r0
 800380a:	429d      	cmp	r5, r3
 800380c:	d80a      	bhi.n	8003824 <__kernel_cosf+0xa8>
 800380e:	4601      	mov	r1, r0
 8003810:	4638      	mov	r0, r7
 8003812:	f7fc fc9f 	bl	8000154 <__aeabi_fsub>
 8003816:	4601      	mov	r1, r0
 8003818:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800381c:	f7fc fc9a 	bl	8000154 <__aeabi_fsub>
 8003820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003824:	4b13      	ldr	r3, [pc, #76]	@ (8003874 <__kernel_cosf+0xf8>)
 8003826:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800382a:	429d      	cmp	r5, r3
 800382c:	bf8c      	ite	hi
 800382e:	4d12      	ldrhi	r5, [pc, #72]	@ (8003878 <__kernel_cosf+0xfc>)
 8003830:	f105 457f 	addls.w	r5, r5, #4278190080	@ 0xff000000
 8003834:	4629      	mov	r1, r5
 8003836:	f7fc fc8d 	bl	8000154 <__aeabi_fsub>
 800383a:	4629      	mov	r1, r5
 800383c:	4606      	mov	r6, r0
 800383e:	4638      	mov	r0, r7
 8003840:	f7fc fc88 	bl	8000154 <__aeabi_fsub>
 8003844:	4621      	mov	r1, r4
 8003846:	f7fc fc85 	bl	8000154 <__aeabi_fsub>
 800384a:	4601      	mov	r1, r0
 800384c:	4630      	mov	r0, r6
 800384e:	e7e5      	b.n	800381c <__kernel_cosf+0xa0>
 8003850:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8003854:	e7e4      	b.n	8003820 <__kernel_cosf+0xa4>
 8003856:	bf00      	nop
 8003858:	ad47d74e 	.word	0xad47d74e
 800385c:	310f74f6 	.word	0x310f74f6
 8003860:	3493f27c 	.word	0x3493f27c
 8003864:	37d00d01 	.word	0x37d00d01
 8003868:	3ab60b61 	.word	0x3ab60b61
 800386c:	3d2aaaab 	.word	0x3d2aaaab
 8003870:	3e999999 	.word	0x3e999999
 8003874:	3f480000 	.word	0x3f480000
 8003878:	3e900000 	.word	0x3e900000

0800387c <__kernel_sinf>:
 800387c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003880:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8003884:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8003888:	4604      	mov	r4, r0
 800388a:	460f      	mov	r7, r1
 800388c:	4691      	mov	r9, r2
 800388e:	d203      	bcs.n	8003898 <__kernel_sinf+0x1c>
 8003890:	f7fc ff46 	bl	8000720 <__aeabi_f2iz>
 8003894:	2800      	cmp	r0, #0
 8003896:	d035      	beq.n	8003904 <__kernel_sinf+0x88>
 8003898:	4621      	mov	r1, r4
 800389a:	4620      	mov	r0, r4
 800389c:	f7fc fd64 	bl	8000368 <__aeabi_fmul>
 80038a0:	4605      	mov	r5, r0
 80038a2:	4601      	mov	r1, r0
 80038a4:	4620      	mov	r0, r4
 80038a6:	f7fc fd5f 	bl	8000368 <__aeabi_fmul>
 80038aa:	4929      	ldr	r1, [pc, #164]	@ (8003950 <__kernel_sinf+0xd4>)
 80038ac:	4606      	mov	r6, r0
 80038ae:	4628      	mov	r0, r5
 80038b0:	f7fc fd5a 	bl	8000368 <__aeabi_fmul>
 80038b4:	4927      	ldr	r1, [pc, #156]	@ (8003954 <__kernel_sinf+0xd8>)
 80038b6:	f7fc fc4d 	bl	8000154 <__aeabi_fsub>
 80038ba:	4629      	mov	r1, r5
 80038bc:	f7fc fd54 	bl	8000368 <__aeabi_fmul>
 80038c0:	4925      	ldr	r1, [pc, #148]	@ (8003958 <__kernel_sinf+0xdc>)
 80038c2:	f7fc fc49 	bl	8000158 <__addsf3>
 80038c6:	4629      	mov	r1, r5
 80038c8:	f7fc fd4e 	bl	8000368 <__aeabi_fmul>
 80038cc:	4923      	ldr	r1, [pc, #140]	@ (800395c <__kernel_sinf+0xe0>)
 80038ce:	f7fc fc41 	bl	8000154 <__aeabi_fsub>
 80038d2:	4629      	mov	r1, r5
 80038d4:	f7fc fd48 	bl	8000368 <__aeabi_fmul>
 80038d8:	4921      	ldr	r1, [pc, #132]	@ (8003960 <__kernel_sinf+0xe4>)
 80038da:	f7fc fc3d 	bl	8000158 <__addsf3>
 80038de:	4680      	mov	r8, r0
 80038e0:	f1b9 0f00 	cmp.w	r9, #0
 80038e4:	d111      	bne.n	800390a <__kernel_sinf+0x8e>
 80038e6:	4601      	mov	r1, r0
 80038e8:	4628      	mov	r0, r5
 80038ea:	f7fc fd3d 	bl	8000368 <__aeabi_fmul>
 80038ee:	491d      	ldr	r1, [pc, #116]	@ (8003964 <__kernel_sinf+0xe8>)
 80038f0:	f7fc fc30 	bl	8000154 <__aeabi_fsub>
 80038f4:	4631      	mov	r1, r6
 80038f6:	f7fc fd37 	bl	8000368 <__aeabi_fmul>
 80038fa:	4601      	mov	r1, r0
 80038fc:	4620      	mov	r0, r4
 80038fe:	f7fc fc2b 	bl	8000158 <__addsf3>
 8003902:	4604      	mov	r4, r0
 8003904:	4620      	mov	r0, r4
 8003906:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800390a:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800390e:	4638      	mov	r0, r7
 8003910:	f7fc fd2a 	bl	8000368 <__aeabi_fmul>
 8003914:	4641      	mov	r1, r8
 8003916:	4681      	mov	r9, r0
 8003918:	4630      	mov	r0, r6
 800391a:	f7fc fd25 	bl	8000368 <__aeabi_fmul>
 800391e:	4601      	mov	r1, r0
 8003920:	4648      	mov	r0, r9
 8003922:	f7fc fc17 	bl	8000154 <__aeabi_fsub>
 8003926:	4629      	mov	r1, r5
 8003928:	f7fc fd1e 	bl	8000368 <__aeabi_fmul>
 800392c:	4639      	mov	r1, r7
 800392e:	f7fc fc11 	bl	8000154 <__aeabi_fsub>
 8003932:	490c      	ldr	r1, [pc, #48]	@ (8003964 <__kernel_sinf+0xe8>)
 8003934:	4605      	mov	r5, r0
 8003936:	4630      	mov	r0, r6
 8003938:	f7fc fd16 	bl	8000368 <__aeabi_fmul>
 800393c:	4601      	mov	r1, r0
 800393e:	4628      	mov	r0, r5
 8003940:	f7fc fc0a 	bl	8000158 <__addsf3>
 8003944:	4601      	mov	r1, r0
 8003946:	4620      	mov	r0, r4
 8003948:	f7fc fc04 	bl	8000154 <__aeabi_fsub>
 800394c:	e7d9      	b.n	8003902 <__kernel_sinf+0x86>
 800394e:	bf00      	nop
 8003950:	2f2ec9d3 	.word	0x2f2ec9d3
 8003954:	32d72f34 	.word	0x32d72f34
 8003958:	3638ef1b 	.word	0x3638ef1b
 800395c:	39500d01 	.word	0x39500d01
 8003960:	3c088889 	.word	0x3c088889
 8003964:	3e2aaaab 	.word	0x3e2aaaab

08003968 <__ieee754_powf>:
 8003968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800396c:	f031 4b00 	bics.w	fp, r1, #2147483648	@ 0x80000000
 8003970:	4681      	mov	r9, r0
 8003972:	460f      	mov	r7, r1
 8003974:	4606      	mov	r6, r0
 8003976:	460c      	mov	r4, r1
 8003978:	b087      	sub	sp, #28
 800397a:	d10c      	bne.n	8003996 <__ieee754_powf+0x2e>
 800397c:	f480 0680 	eor.w	r6, r0, #4194304	@ 0x400000
 8003980:	0076      	lsls	r6, r6, #1
 8003982:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8003986:	f240 8310 	bls.w	8003faa <__ieee754_powf+0x642>
 800398a:	4639      	mov	r1, r7
 800398c:	4648      	mov	r0, r9
 800398e:	f7fc fbe3 	bl	8000158 <__addsf3>
 8003992:	4601      	mov	r1, r0
 8003994:	e043      	b.n	8003a1e <__ieee754_powf+0xb6>
 8003996:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 800399a:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800399e:	d802      	bhi.n	80039a6 <__ieee754_powf+0x3e>
 80039a0:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 80039a4:	d908      	bls.n	80039b8 <__ieee754_powf+0x50>
 80039a6:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 80039aa:	d1ee      	bne.n	800398a <__ieee754_powf+0x22>
 80039ac:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 80039b0:	0064      	lsls	r4, r4, #1
 80039b2:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 80039b6:	e7e6      	b.n	8003986 <__ieee754_powf+0x1e>
 80039b8:	2800      	cmp	r0, #0
 80039ba:	da1f      	bge.n	80039fc <__ieee754_powf+0x94>
 80039bc:	f1bb 4f97 	cmp.w	fp, #1266679808	@ 0x4b800000
 80039c0:	f080 82f8 	bcs.w	8003fb4 <__ieee754_powf+0x64c>
 80039c4:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 80039c8:	d32f      	bcc.n	8003a2a <__ieee754_powf+0xc2>
 80039ca:	ea4f 53eb 	mov.w	r3, fp, asr #23
 80039ce:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 80039d2:	fa4b f503 	asr.w	r5, fp, r3
 80039d6:	fa05 f303 	lsl.w	r3, r5, r3
 80039da:	455b      	cmp	r3, fp
 80039dc:	d123      	bne.n	8003a26 <__ieee754_powf+0xbe>
 80039de:	f005 0501 	and.w	r5, r5, #1
 80039e2:	f1c5 0502 	rsb	r5, r5, #2
 80039e6:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 80039ea:	d11f      	bne.n	8003a2c <__ieee754_powf+0xc4>
 80039ec:	2c00      	cmp	r4, #0
 80039ee:	4649      	mov	r1, r9
 80039f0:	da15      	bge.n	8003a1e <__ieee754_powf+0xb6>
 80039f2:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80039f6:	f7fc fd6b 	bl	80004d0 <__aeabi_fdiv>
 80039fa:	e7ca      	b.n	8003992 <__ieee754_powf+0x2a>
 80039fc:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 8003a00:	d111      	bne.n	8003a26 <__ieee754_powf+0xbe>
 8003a02:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8003a06:	f000 82d0 	beq.w	8003faa <__ieee754_powf+0x642>
 8003a0a:	d904      	bls.n	8003a16 <__ieee754_powf+0xae>
 8003a0c:	2c00      	cmp	r4, #0
 8003a0e:	f280 82cf 	bge.w	8003fb0 <__ieee754_powf+0x648>
 8003a12:	2100      	movs	r1, #0
 8003a14:	e003      	b.n	8003a1e <__ieee754_powf+0xb6>
 8003a16:	2c00      	cmp	r4, #0
 8003a18:	dafb      	bge.n	8003a12 <__ieee754_powf+0xaa>
 8003a1a:	f107 4100 	add.w	r1, r7, #2147483648	@ 0x80000000
 8003a1e:	4608      	mov	r0, r1
 8003a20:	b007      	add	sp, #28
 8003a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a26:	2500      	movs	r5, #0
 8003a28:	e7dd      	b.n	80039e6 <__ieee754_powf+0x7e>
 8003a2a:	2500      	movs	r5, #0
 8003a2c:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8003a30:	d104      	bne.n	8003a3c <__ieee754_powf+0xd4>
 8003a32:	4649      	mov	r1, r9
 8003a34:	4648      	mov	r0, r9
 8003a36:	f7fc fc97 	bl	8000368 <__aeabi_fmul>
 8003a3a:	e7aa      	b.n	8003992 <__ieee754_powf+0x2a>
 8003a3c:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8003a40:	f040 82bd 	bne.w	8003fbe <__ieee754_powf+0x656>
 8003a44:	2e00      	cmp	r6, #0
 8003a46:	f2c0 82ba 	blt.w	8003fbe <__ieee754_powf+0x656>
 8003a4a:	4648      	mov	r0, r9
 8003a4c:	b007      	add	sp, #28
 8003a4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a52:	f7ff be23 	b.w	800369c <__ieee754_sqrtf>
 8003a56:	2d01      	cmp	r5, #1
 8003a58:	d1e1      	bne.n	8003a1e <__ieee754_powf+0xb6>
 8003a5a:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 8003a5e:	e798      	b.n	8003992 <__ieee754_powf+0x2a>
 8003a60:	0ff3      	lsrs	r3, r6, #31
 8003a62:	3b01      	subs	r3, #1
 8003a64:	9303      	str	r3, [sp, #12]
 8003a66:	432b      	orrs	r3, r5
 8003a68:	d101      	bne.n	8003a6e <__ieee754_powf+0x106>
 8003a6a:	4649      	mov	r1, r9
 8003a6c:	e2c5      	b.n	8003ffa <__ieee754_powf+0x692>
 8003a6e:	f1bb 4f9a 	cmp.w	fp, #1291845632	@ 0x4d000000
 8003a72:	f240 809b 	bls.w	8003bac <__ieee754_powf+0x244>
 8003a76:	4b46      	ldr	r3, [pc, #280]	@ (8003b90 <__ieee754_powf+0x228>)
 8003a78:	4598      	cmp	r8, r3
 8003a7a:	d807      	bhi.n	8003a8c <__ieee754_powf+0x124>
 8003a7c:	2c00      	cmp	r4, #0
 8003a7e:	da0a      	bge.n	8003a96 <__ieee754_powf+0x12e>
 8003a80:	2000      	movs	r0, #0
 8003a82:	b007      	add	sp, #28
 8003a84:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a88:	f000 bc9d 	b.w	80043c6 <__math_oflowf>
 8003a8c:	4b41      	ldr	r3, [pc, #260]	@ (8003b94 <__ieee754_powf+0x22c>)
 8003a8e:	4598      	cmp	r8, r3
 8003a90:	d907      	bls.n	8003aa2 <__ieee754_powf+0x13a>
 8003a92:	2c00      	cmp	r4, #0
 8003a94:	dcf4      	bgt.n	8003a80 <__ieee754_powf+0x118>
 8003a96:	2000      	movs	r0, #0
 8003a98:	b007      	add	sp, #28
 8003a9a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a9e:	f000 bc8e 	b.w	80043be <__math_uflowf>
 8003aa2:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003aa6:	f7fc fb55 	bl	8000154 <__aeabi_fsub>
 8003aaa:	493b      	ldr	r1, [pc, #236]	@ (8003b98 <__ieee754_powf+0x230>)
 8003aac:	4606      	mov	r6, r0
 8003aae:	f7fc fc5b 	bl	8000368 <__aeabi_fmul>
 8003ab2:	493a      	ldr	r1, [pc, #232]	@ (8003b9c <__ieee754_powf+0x234>)
 8003ab4:	4680      	mov	r8, r0
 8003ab6:	4630      	mov	r0, r6
 8003ab8:	f7fc fc56 	bl	8000368 <__aeabi_fmul>
 8003abc:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 8003ac0:	4681      	mov	r9, r0
 8003ac2:	4630      	mov	r0, r6
 8003ac4:	f7fc fc50 	bl	8000368 <__aeabi_fmul>
 8003ac8:	4601      	mov	r1, r0
 8003aca:	4835      	ldr	r0, [pc, #212]	@ (8003ba0 <__ieee754_powf+0x238>)
 8003acc:	f7fc fb42 	bl	8000154 <__aeabi_fsub>
 8003ad0:	4631      	mov	r1, r6
 8003ad2:	f7fc fc49 	bl	8000368 <__aeabi_fmul>
 8003ad6:	4601      	mov	r1, r0
 8003ad8:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 8003adc:	f7fc fb3a 	bl	8000154 <__aeabi_fsub>
 8003ae0:	4631      	mov	r1, r6
 8003ae2:	4682      	mov	sl, r0
 8003ae4:	4630      	mov	r0, r6
 8003ae6:	f7fc fc3f 	bl	8000368 <__aeabi_fmul>
 8003aea:	4601      	mov	r1, r0
 8003aec:	4650      	mov	r0, sl
 8003aee:	f7fc fc3b 	bl	8000368 <__aeabi_fmul>
 8003af2:	492c      	ldr	r1, [pc, #176]	@ (8003ba4 <__ieee754_powf+0x23c>)
 8003af4:	f7fc fc38 	bl	8000368 <__aeabi_fmul>
 8003af8:	4601      	mov	r1, r0
 8003afa:	4648      	mov	r0, r9
 8003afc:	f7fc fb2a 	bl	8000154 <__aeabi_fsub>
 8003b00:	4601      	mov	r1, r0
 8003b02:	4606      	mov	r6, r0
 8003b04:	4640      	mov	r0, r8
 8003b06:	f7fc fb27 	bl	8000158 <__addsf3>
 8003b0a:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 8003b0e:	f02b 0b0f 	bic.w	fp, fp, #15
 8003b12:	4641      	mov	r1, r8
 8003b14:	4658      	mov	r0, fp
 8003b16:	f7fc fb1d 	bl	8000154 <__aeabi_fsub>
 8003b1a:	4601      	mov	r1, r0
 8003b1c:	4630      	mov	r0, r6
 8003b1e:	f7fc fb19 	bl	8000154 <__aeabi_fsub>
 8003b22:	9b03      	ldr	r3, [sp, #12]
 8003b24:	3d01      	subs	r5, #1
 8003b26:	f36f 040b 	bfc	r4, #0, #12
 8003b2a:	431d      	orrs	r5, r3
 8003b2c:	4606      	mov	r6, r0
 8003b2e:	4621      	mov	r1, r4
 8003b30:	4638      	mov	r0, r7
 8003b32:	bf14      	ite	ne
 8003b34:	f04f 557e 	movne.w	r5, #1065353216	@ 0x3f800000
 8003b38:	4d1b      	ldreq	r5, [pc, #108]	@ (8003ba8 <__ieee754_powf+0x240>)
 8003b3a:	f7fc fb0b 	bl	8000154 <__aeabi_fsub>
 8003b3e:	4659      	mov	r1, fp
 8003b40:	f7fc fc12 	bl	8000368 <__aeabi_fmul>
 8003b44:	4639      	mov	r1, r7
 8003b46:	4680      	mov	r8, r0
 8003b48:	4630      	mov	r0, r6
 8003b4a:	f7fc fc0d 	bl	8000368 <__aeabi_fmul>
 8003b4e:	4601      	mov	r1, r0
 8003b50:	4640      	mov	r0, r8
 8003b52:	f7fc fb01 	bl	8000158 <__addsf3>
 8003b56:	4621      	mov	r1, r4
 8003b58:	4606      	mov	r6, r0
 8003b5a:	4658      	mov	r0, fp
 8003b5c:	f7fc fc04 	bl	8000368 <__aeabi_fmul>
 8003b60:	4601      	mov	r1, r0
 8003b62:	4607      	mov	r7, r0
 8003b64:	4630      	mov	r0, r6
 8003b66:	f7fc faf7 	bl	8000158 <__addsf3>
 8003b6a:	2800      	cmp	r0, #0
 8003b6c:	4604      	mov	r4, r0
 8003b6e:	4680      	mov	r8, r0
 8003b70:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8003b74:	f340 813f 	ble.w	8003df6 <__ieee754_powf+0x48e>
 8003b78:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8003b7c:	f240 8128 	bls.w	8003dd0 <__ieee754_powf+0x468>
 8003b80:	2100      	movs	r1, #0
 8003b82:	4628      	mov	r0, r5
 8003b84:	f7fc fd8e 	bl	80006a4 <__aeabi_fcmplt>
 8003b88:	3800      	subs	r0, #0
 8003b8a:	bf18      	it	ne
 8003b8c:	2001      	movne	r0, #1
 8003b8e:	e778      	b.n	8003a82 <__ieee754_powf+0x11a>
 8003b90:	3f7ffff3 	.word	0x3f7ffff3
 8003b94:	3f800007 	.word	0x3f800007
 8003b98:	3fb8aa00 	.word	0x3fb8aa00
 8003b9c:	36eca570 	.word	0x36eca570
 8003ba0:	3eaaaaab 	.word	0x3eaaaaab
 8003ba4:	3fb8aa3b 	.word	0x3fb8aa3b
 8003ba8:	bf800000 	.word	0xbf800000
 8003bac:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8003bb0:	f040 810a 	bne.w	8003dc8 <__ieee754_powf+0x460>
 8003bb4:	f04f 4197 	mov.w	r1, #1266679808	@ 0x4b800000
 8003bb8:	f7fc fbd6 	bl	8000368 <__aeabi_fmul>
 8003bbc:	f06f 0217 	mvn.w	r2, #23
 8003bc0:	4682      	mov	sl, r0
 8003bc2:	ea4f 53ea 	mov.w	r3, sl, asr #23
 8003bc6:	3b7f      	subs	r3, #127	@ 0x7f
 8003bc8:	441a      	add	r2, r3
 8003bca:	4b95      	ldr	r3, [pc, #596]	@ (8003e20 <__ieee754_powf+0x4b8>)
 8003bcc:	f3ca 0a16 	ubfx	sl, sl, #0, #23
 8003bd0:	459a      	cmp	sl, r3
 8003bd2:	f04a 567e 	orr.w	r6, sl, #1065353216	@ 0x3f800000
 8003bd6:	dd06      	ble.n	8003be6 <__ieee754_powf+0x27e>
 8003bd8:	4b92      	ldr	r3, [pc, #584]	@ (8003e24 <__ieee754_powf+0x4bc>)
 8003bda:	459a      	cmp	sl, r3
 8003bdc:	f340 80f6 	ble.w	8003dcc <__ieee754_powf+0x464>
 8003be0:	3201      	adds	r2, #1
 8003be2:	f5a6 0600 	sub.w	r6, r6, #8388608	@ 0x800000
 8003be6:	2300      	movs	r3, #0
 8003be8:	9301      	str	r3, [sp, #4]
 8003bea:	9205      	str	r2, [sp, #20]
 8003bec:	4b8e      	ldr	r3, [pc, #568]	@ (8003e28 <__ieee754_powf+0x4c0>)
 8003bee:	9a01      	ldr	r2, [sp, #4]
 8003bf0:	4630      	mov	r0, r6
 8003bf2:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 8003bf6:	46b2      	mov	sl, r6
 8003bf8:	4659      	mov	r1, fp
 8003bfa:	f7fc faab 	bl	8000154 <__aeabi_fsub>
 8003bfe:	4631      	mov	r1, r6
 8003c00:	4681      	mov	r9, r0
 8003c02:	4658      	mov	r0, fp
 8003c04:	f7fc faa8 	bl	8000158 <__addsf3>
 8003c08:	4601      	mov	r1, r0
 8003c0a:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8003c0e:	f7fc fc5f 	bl	80004d0 <__aeabi_fdiv>
 8003c12:	4601      	mov	r1, r0
 8003c14:	9004      	str	r0, [sp, #16]
 8003c16:	4648      	mov	r0, r9
 8003c18:	f7fc fba6 	bl	8000368 <__aeabi_fmul>
 8003c1c:	9002      	str	r0, [sp, #8]
 8003c1e:	9b02      	ldr	r3, [sp, #8]
 8003c20:	1076      	asrs	r6, r6, #1
 8003c22:	f36f 030b 	bfc	r3, #0, #12
 8003c26:	4698      	mov	r8, r3
 8003c28:	f046 5600 	orr.w	r6, r6, #536870912	@ 0x20000000
 8003c2c:	9b01      	ldr	r3, [sp, #4]
 8003c2e:	f506 2680 	add.w	r6, r6, #262144	@ 0x40000
 8003c32:	eb06 5643 	add.w	r6, r6, r3, lsl #21
 8003c36:	4631      	mov	r1, r6
 8003c38:	4640      	mov	r0, r8
 8003c3a:	f7fc fb95 	bl	8000368 <__aeabi_fmul>
 8003c3e:	4601      	mov	r1, r0
 8003c40:	4648      	mov	r0, r9
 8003c42:	f7fc fa87 	bl	8000154 <__aeabi_fsub>
 8003c46:	4659      	mov	r1, fp
 8003c48:	4681      	mov	r9, r0
 8003c4a:	4630      	mov	r0, r6
 8003c4c:	f7fc fa82 	bl	8000154 <__aeabi_fsub>
 8003c50:	4601      	mov	r1, r0
 8003c52:	4650      	mov	r0, sl
 8003c54:	f7fc fa7e 	bl	8000154 <__aeabi_fsub>
 8003c58:	4641      	mov	r1, r8
 8003c5a:	f7fc fb85 	bl	8000368 <__aeabi_fmul>
 8003c5e:	4601      	mov	r1, r0
 8003c60:	4648      	mov	r0, r9
 8003c62:	f7fc fa77 	bl	8000154 <__aeabi_fsub>
 8003c66:	9b04      	ldr	r3, [sp, #16]
 8003c68:	4619      	mov	r1, r3
 8003c6a:	f7fc fb7d 	bl	8000368 <__aeabi_fmul>
 8003c6e:	9902      	ldr	r1, [sp, #8]
 8003c70:	4683      	mov	fp, r0
 8003c72:	4608      	mov	r0, r1
 8003c74:	f7fc fb78 	bl	8000368 <__aeabi_fmul>
 8003c78:	4606      	mov	r6, r0
 8003c7a:	496c      	ldr	r1, [pc, #432]	@ (8003e2c <__ieee754_powf+0x4c4>)
 8003c7c:	f7fc fb74 	bl	8000368 <__aeabi_fmul>
 8003c80:	496b      	ldr	r1, [pc, #428]	@ (8003e30 <__ieee754_powf+0x4c8>)
 8003c82:	f7fc fa69 	bl	8000158 <__addsf3>
 8003c86:	4631      	mov	r1, r6
 8003c88:	f7fc fb6e 	bl	8000368 <__aeabi_fmul>
 8003c8c:	4969      	ldr	r1, [pc, #420]	@ (8003e34 <__ieee754_powf+0x4cc>)
 8003c8e:	f7fc fa63 	bl	8000158 <__addsf3>
 8003c92:	4631      	mov	r1, r6
 8003c94:	f7fc fb68 	bl	8000368 <__aeabi_fmul>
 8003c98:	4967      	ldr	r1, [pc, #412]	@ (8003e38 <__ieee754_powf+0x4d0>)
 8003c9a:	f7fc fa5d 	bl	8000158 <__addsf3>
 8003c9e:	4631      	mov	r1, r6
 8003ca0:	f7fc fb62 	bl	8000368 <__aeabi_fmul>
 8003ca4:	4965      	ldr	r1, [pc, #404]	@ (8003e3c <__ieee754_powf+0x4d4>)
 8003ca6:	f7fc fa57 	bl	8000158 <__addsf3>
 8003caa:	4631      	mov	r1, r6
 8003cac:	f7fc fb5c 	bl	8000368 <__aeabi_fmul>
 8003cb0:	4963      	ldr	r1, [pc, #396]	@ (8003e40 <__ieee754_powf+0x4d8>)
 8003cb2:	f7fc fa51 	bl	8000158 <__addsf3>
 8003cb6:	4631      	mov	r1, r6
 8003cb8:	4681      	mov	r9, r0
 8003cba:	4630      	mov	r0, r6
 8003cbc:	f7fc fb54 	bl	8000368 <__aeabi_fmul>
 8003cc0:	4601      	mov	r1, r0
 8003cc2:	4648      	mov	r0, r9
 8003cc4:	f7fc fb50 	bl	8000368 <__aeabi_fmul>
 8003cc8:	4606      	mov	r6, r0
 8003cca:	4641      	mov	r1, r8
 8003ccc:	9802      	ldr	r0, [sp, #8]
 8003cce:	f7fc fa43 	bl	8000158 <__addsf3>
 8003cd2:	4659      	mov	r1, fp
 8003cd4:	f7fc fb48 	bl	8000368 <__aeabi_fmul>
 8003cd8:	4631      	mov	r1, r6
 8003cda:	f7fc fa3d 	bl	8000158 <__addsf3>
 8003cde:	4641      	mov	r1, r8
 8003ce0:	4681      	mov	r9, r0
 8003ce2:	4640      	mov	r0, r8
 8003ce4:	f7fc fb40 	bl	8000368 <__aeabi_fmul>
 8003ce8:	4956      	ldr	r1, [pc, #344]	@ (8003e44 <__ieee754_powf+0x4dc>)
 8003cea:	4682      	mov	sl, r0
 8003cec:	f7fc fa34 	bl	8000158 <__addsf3>
 8003cf0:	4649      	mov	r1, r9
 8003cf2:	f7fc fa31 	bl	8000158 <__addsf3>
 8003cf6:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 8003cfa:	f026 060f 	bic.w	r6, r6, #15
 8003cfe:	4631      	mov	r1, r6
 8003d00:	4640      	mov	r0, r8
 8003d02:	f7fc fb31 	bl	8000368 <__aeabi_fmul>
 8003d06:	494f      	ldr	r1, [pc, #316]	@ (8003e44 <__ieee754_powf+0x4dc>)
 8003d08:	4680      	mov	r8, r0
 8003d0a:	4630      	mov	r0, r6
 8003d0c:	f7fc fa22 	bl	8000154 <__aeabi_fsub>
 8003d10:	4651      	mov	r1, sl
 8003d12:	f7fc fa1f 	bl	8000154 <__aeabi_fsub>
 8003d16:	4601      	mov	r1, r0
 8003d18:	4648      	mov	r0, r9
 8003d1a:	f7fc fa1b 	bl	8000154 <__aeabi_fsub>
 8003d1e:	9902      	ldr	r1, [sp, #8]
 8003d20:	f7fc fb22 	bl	8000368 <__aeabi_fmul>
 8003d24:	4631      	mov	r1, r6
 8003d26:	4681      	mov	r9, r0
 8003d28:	4658      	mov	r0, fp
 8003d2a:	f7fc fb1d 	bl	8000368 <__aeabi_fmul>
 8003d2e:	4601      	mov	r1, r0
 8003d30:	4648      	mov	r0, r9
 8003d32:	f7fc fa11 	bl	8000158 <__addsf3>
 8003d36:	4682      	mov	sl, r0
 8003d38:	4601      	mov	r1, r0
 8003d3a:	4640      	mov	r0, r8
 8003d3c:	f7fc fa0c 	bl	8000158 <__addsf3>
 8003d40:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 8003d44:	f026 060f 	bic.w	r6, r6, #15
 8003d48:	4630      	mov	r0, r6
 8003d4a:	493f      	ldr	r1, [pc, #252]	@ (8003e48 <__ieee754_powf+0x4e0>)
 8003d4c:	f7fc fb0c 	bl	8000368 <__aeabi_fmul>
 8003d50:	4641      	mov	r1, r8
 8003d52:	4681      	mov	r9, r0
 8003d54:	4630      	mov	r0, r6
 8003d56:	f7fc f9fd 	bl	8000154 <__aeabi_fsub>
 8003d5a:	4601      	mov	r1, r0
 8003d5c:	4650      	mov	r0, sl
 8003d5e:	f7fc f9f9 	bl	8000154 <__aeabi_fsub>
 8003d62:	493a      	ldr	r1, [pc, #232]	@ (8003e4c <__ieee754_powf+0x4e4>)
 8003d64:	f7fc fb00 	bl	8000368 <__aeabi_fmul>
 8003d68:	4939      	ldr	r1, [pc, #228]	@ (8003e50 <__ieee754_powf+0x4e8>)
 8003d6a:	4680      	mov	r8, r0
 8003d6c:	4630      	mov	r0, r6
 8003d6e:	f7fc fafb 	bl	8000368 <__aeabi_fmul>
 8003d72:	4601      	mov	r1, r0
 8003d74:	4640      	mov	r0, r8
 8003d76:	f7fc f9ef 	bl	8000158 <__addsf3>
 8003d7a:	4b36      	ldr	r3, [pc, #216]	@ (8003e54 <__ieee754_powf+0x4ec>)
 8003d7c:	9a01      	ldr	r2, [sp, #4]
 8003d7e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003d82:	f7fc f9e9 	bl	8000158 <__addsf3>
 8003d86:	9a05      	ldr	r2, [sp, #20]
 8003d88:	4606      	mov	r6, r0
 8003d8a:	4610      	mov	r0, r2
 8003d8c:	f7fc fa98 	bl	80002c0 <__aeabi_i2f>
 8003d90:	4680      	mov	r8, r0
 8003d92:	4b31      	ldr	r3, [pc, #196]	@ (8003e58 <__ieee754_powf+0x4f0>)
 8003d94:	9a01      	ldr	r2, [sp, #4]
 8003d96:	4631      	mov	r1, r6
 8003d98:	f853 a022 	ldr.w	sl, [r3, r2, lsl #2]
 8003d9c:	4648      	mov	r0, r9
 8003d9e:	f7fc f9db 	bl	8000158 <__addsf3>
 8003da2:	4651      	mov	r1, sl
 8003da4:	f7fc f9d8 	bl	8000158 <__addsf3>
 8003da8:	4641      	mov	r1, r8
 8003daa:	f7fc f9d5 	bl	8000158 <__addsf3>
 8003dae:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 8003db2:	f02b 0b0f 	bic.w	fp, fp, #15
 8003db6:	4641      	mov	r1, r8
 8003db8:	4658      	mov	r0, fp
 8003dba:	f7fc f9cb 	bl	8000154 <__aeabi_fsub>
 8003dbe:	4651      	mov	r1, sl
 8003dc0:	f7fc f9c8 	bl	8000154 <__aeabi_fsub>
 8003dc4:	4649      	mov	r1, r9
 8003dc6:	e6a6      	b.n	8003b16 <__ieee754_powf+0x1ae>
 8003dc8:	2200      	movs	r2, #0
 8003dca:	e6fa      	b.n	8003bc2 <__ieee754_powf+0x25a>
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e70b      	b.n	8003be8 <__ieee754_powf+0x280>
 8003dd0:	d148      	bne.n	8003e64 <__ieee754_powf+0x4fc>
 8003dd2:	4922      	ldr	r1, [pc, #136]	@ (8003e5c <__ieee754_powf+0x4f4>)
 8003dd4:	4630      	mov	r0, r6
 8003dd6:	f7fc f9bf 	bl	8000158 <__addsf3>
 8003dda:	4639      	mov	r1, r7
 8003ddc:	4681      	mov	r9, r0
 8003dde:	4620      	mov	r0, r4
 8003de0:	f7fc f9b8 	bl	8000154 <__aeabi_fsub>
 8003de4:	4601      	mov	r1, r0
 8003de6:	4648      	mov	r0, r9
 8003de8:	f7fc fc7a 	bl	80006e0 <__aeabi_fcmpgt>
 8003dec:	2800      	cmp	r0, #0
 8003dee:	f47f aec7 	bne.w	8003b80 <__ieee754_powf+0x218>
 8003df2:	2386      	movs	r3, #134	@ 0x86
 8003df4:	e03b      	b.n	8003e6e <__ieee754_powf+0x506>
 8003df6:	4a1a      	ldr	r2, [pc, #104]	@ (8003e60 <__ieee754_powf+0x4f8>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d907      	bls.n	8003e0c <__ieee754_powf+0x4a4>
 8003dfc:	2100      	movs	r1, #0
 8003dfe:	4628      	mov	r0, r5
 8003e00:	f7fc fc50 	bl	80006a4 <__aeabi_fcmplt>
 8003e04:	3800      	subs	r0, #0
 8003e06:	bf18      	it	ne
 8003e08:	2001      	movne	r0, #1
 8003e0a:	e645      	b.n	8003a98 <__ieee754_powf+0x130>
 8003e0c:	d12a      	bne.n	8003e64 <__ieee754_powf+0x4fc>
 8003e0e:	4639      	mov	r1, r7
 8003e10:	f7fc f9a0 	bl	8000154 <__aeabi_fsub>
 8003e14:	4631      	mov	r1, r6
 8003e16:	f7fc fc59 	bl	80006cc <__aeabi_fcmpge>
 8003e1a:	2800      	cmp	r0, #0
 8003e1c:	d0e9      	beq.n	8003df2 <__ieee754_powf+0x48a>
 8003e1e:	e7ed      	b.n	8003dfc <__ieee754_powf+0x494>
 8003e20:	001cc471 	.word	0x001cc471
 8003e24:	005db3d6 	.word	0x005db3d6
 8003e28:	080049ec 	.word	0x080049ec
 8003e2c:	3e53f142 	.word	0x3e53f142
 8003e30:	3e6c3255 	.word	0x3e6c3255
 8003e34:	3e8ba305 	.word	0x3e8ba305
 8003e38:	3eaaaaab 	.word	0x3eaaaaab
 8003e3c:	3edb6db7 	.word	0x3edb6db7
 8003e40:	3f19999a 	.word	0x3f19999a
 8003e44:	40400000 	.word	0x40400000
 8003e48:	3f763800 	.word	0x3f763800
 8003e4c:	3f76384f 	.word	0x3f76384f
 8003e50:	369dc3a0 	.word	0x369dc3a0
 8003e54:	080049dc 	.word	0x080049dc
 8003e58:	080049e4 	.word	0x080049e4
 8003e5c:	3338aa3c 	.word	0x3338aa3c
 8003e60:	43160000 	.word	0x43160000
 8003e64:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8003e68:	f240 809b 	bls.w	8003fa2 <__ieee754_powf+0x63a>
 8003e6c:	15db      	asrs	r3, r3, #23
 8003e6e:	f44f 0400 	mov.w	r4, #8388608	@ 0x800000
 8003e72:	3b7e      	subs	r3, #126	@ 0x7e
 8003e74:	411c      	asrs	r4, r3
 8003e76:	4444      	add	r4, r8
 8003e78:	f3c4 53c7 	ubfx	r3, r4, #23, #8
 8003e7c:	4961      	ldr	r1, [pc, #388]	@ (8004004 <__ieee754_powf+0x69c>)
 8003e7e:	3b7f      	subs	r3, #127	@ 0x7f
 8003e80:	4119      	asrs	r1, r3
 8003e82:	4021      	ands	r1, r4
 8003e84:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8003e88:	f1c3 0317 	rsb	r3, r3, #23
 8003e8c:	f444 0400 	orr.w	r4, r4, #8388608	@ 0x800000
 8003e90:	4638      	mov	r0, r7
 8003e92:	411c      	asrs	r4, r3
 8003e94:	f1b8 0f00 	cmp.w	r8, #0
 8003e98:	bfb8      	it	lt
 8003e9a:	4264      	neglt	r4, r4
 8003e9c:	f7fc f95a 	bl	8000154 <__aeabi_fsub>
 8003ea0:	4607      	mov	r7, r0
 8003ea2:	4631      	mov	r1, r6
 8003ea4:	4638      	mov	r0, r7
 8003ea6:	f7fc f957 	bl	8000158 <__addsf3>
 8003eaa:	f420 687f 	bic.w	r8, r0, #4080	@ 0xff0
 8003eae:	f028 080f 	bic.w	r8, r8, #15
 8003eb2:	4640      	mov	r0, r8
 8003eb4:	4954      	ldr	r1, [pc, #336]	@ (8004008 <__ieee754_powf+0x6a0>)
 8003eb6:	f7fc fa57 	bl	8000368 <__aeabi_fmul>
 8003eba:	4639      	mov	r1, r7
 8003ebc:	4681      	mov	r9, r0
 8003ebe:	4640      	mov	r0, r8
 8003ec0:	f7fc f948 	bl	8000154 <__aeabi_fsub>
 8003ec4:	4601      	mov	r1, r0
 8003ec6:	4630      	mov	r0, r6
 8003ec8:	f7fc f944 	bl	8000154 <__aeabi_fsub>
 8003ecc:	494f      	ldr	r1, [pc, #316]	@ (800400c <__ieee754_powf+0x6a4>)
 8003ece:	f7fc fa4b 	bl	8000368 <__aeabi_fmul>
 8003ed2:	494f      	ldr	r1, [pc, #316]	@ (8004010 <__ieee754_powf+0x6a8>)
 8003ed4:	4606      	mov	r6, r0
 8003ed6:	4640      	mov	r0, r8
 8003ed8:	f7fc fa46 	bl	8000368 <__aeabi_fmul>
 8003edc:	4601      	mov	r1, r0
 8003ede:	4630      	mov	r0, r6
 8003ee0:	f7fc f93a 	bl	8000158 <__addsf3>
 8003ee4:	4607      	mov	r7, r0
 8003ee6:	4601      	mov	r1, r0
 8003ee8:	4648      	mov	r0, r9
 8003eea:	f7fc f935 	bl	8000158 <__addsf3>
 8003eee:	4649      	mov	r1, r9
 8003ef0:	4606      	mov	r6, r0
 8003ef2:	f7fc f92f 	bl	8000154 <__aeabi_fsub>
 8003ef6:	4601      	mov	r1, r0
 8003ef8:	4638      	mov	r0, r7
 8003efa:	f7fc f92b 	bl	8000154 <__aeabi_fsub>
 8003efe:	4631      	mov	r1, r6
 8003f00:	4680      	mov	r8, r0
 8003f02:	4630      	mov	r0, r6
 8003f04:	f7fc fa30 	bl	8000368 <__aeabi_fmul>
 8003f08:	4607      	mov	r7, r0
 8003f0a:	4942      	ldr	r1, [pc, #264]	@ (8004014 <__ieee754_powf+0x6ac>)
 8003f0c:	f7fc fa2c 	bl	8000368 <__aeabi_fmul>
 8003f10:	4941      	ldr	r1, [pc, #260]	@ (8004018 <__ieee754_powf+0x6b0>)
 8003f12:	f7fc f91f 	bl	8000154 <__aeabi_fsub>
 8003f16:	4639      	mov	r1, r7
 8003f18:	f7fc fa26 	bl	8000368 <__aeabi_fmul>
 8003f1c:	493f      	ldr	r1, [pc, #252]	@ (800401c <__ieee754_powf+0x6b4>)
 8003f1e:	f7fc f91b 	bl	8000158 <__addsf3>
 8003f22:	4639      	mov	r1, r7
 8003f24:	f7fc fa20 	bl	8000368 <__aeabi_fmul>
 8003f28:	493d      	ldr	r1, [pc, #244]	@ (8004020 <__ieee754_powf+0x6b8>)
 8003f2a:	f7fc f913 	bl	8000154 <__aeabi_fsub>
 8003f2e:	4639      	mov	r1, r7
 8003f30:	f7fc fa1a 	bl	8000368 <__aeabi_fmul>
 8003f34:	493b      	ldr	r1, [pc, #236]	@ (8004024 <__ieee754_powf+0x6bc>)
 8003f36:	f7fc f90f 	bl	8000158 <__addsf3>
 8003f3a:	4639      	mov	r1, r7
 8003f3c:	f7fc fa14 	bl	8000368 <__aeabi_fmul>
 8003f40:	4601      	mov	r1, r0
 8003f42:	4630      	mov	r0, r6
 8003f44:	f7fc f906 	bl	8000154 <__aeabi_fsub>
 8003f48:	4607      	mov	r7, r0
 8003f4a:	4601      	mov	r1, r0
 8003f4c:	4630      	mov	r0, r6
 8003f4e:	f7fc fa0b 	bl	8000368 <__aeabi_fmul>
 8003f52:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8003f56:	4681      	mov	r9, r0
 8003f58:	4638      	mov	r0, r7
 8003f5a:	f7fc f8fb 	bl	8000154 <__aeabi_fsub>
 8003f5e:	4601      	mov	r1, r0
 8003f60:	4648      	mov	r0, r9
 8003f62:	f7fc fab5 	bl	80004d0 <__aeabi_fdiv>
 8003f66:	4641      	mov	r1, r8
 8003f68:	4607      	mov	r7, r0
 8003f6a:	4630      	mov	r0, r6
 8003f6c:	f7fc f9fc 	bl	8000368 <__aeabi_fmul>
 8003f70:	4641      	mov	r1, r8
 8003f72:	f7fc f8f1 	bl	8000158 <__addsf3>
 8003f76:	4601      	mov	r1, r0
 8003f78:	4638      	mov	r0, r7
 8003f7a:	f7fc f8eb 	bl	8000154 <__aeabi_fsub>
 8003f7e:	4631      	mov	r1, r6
 8003f80:	f7fc f8e8 	bl	8000154 <__aeabi_fsub>
 8003f84:	4601      	mov	r1, r0
 8003f86:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8003f8a:	f7fc f8e3 	bl	8000154 <__aeabi_fsub>
 8003f8e:	eb00 53c4 	add.w	r3, r0, r4, lsl #23
 8003f92:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003f96:	da06      	bge.n	8003fa6 <__ieee754_powf+0x63e>
 8003f98:	4621      	mov	r1, r4
 8003f9a:	f000 f9af 	bl	80042fc <scalbnf>
 8003f9e:	4629      	mov	r1, r5
 8003fa0:	e549      	b.n	8003a36 <__ieee754_powf+0xce>
 8003fa2:	2400      	movs	r4, #0
 8003fa4:	e77d      	b.n	8003ea2 <__ieee754_powf+0x53a>
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	e7f9      	b.n	8003f9e <__ieee754_powf+0x636>
 8003faa:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003fae:	e536      	b.n	8003a1e <__ieee754_powf+0xb6>
 8003fb0:	4639      	mov	r1, r7
 8003fb2:	e534      	b.n	8003a1e <__ieee754_powf+0xb6>
 8003fb4:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 8003fb8:	f43f ad23 	beq.w	8003a02 <__ieee754_powf+0x9a>
 8003fbc:	2502      	movs	r5, #2
 8003fbe:	4648      	mov	r0, r9
 8003fc0:	f000 f998 	bl	80042f4 <fabsf>
 8003fc4:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8003fc8:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8003fcc:	46c2      	mov	sl, r8
 8003fce:	4601      	mov	r1, r0
 8003fd0:	d003      	beq.n	8003fda <__ieee754_powf+0x672>
 8003fd2:	f1b8 0f00 	cmp.w	r8, #0
 8003fd6:	f47f ad43 	bne.w	8003a60 <__ieee754_powf+0xf8>
 8003fda:	2c00      	cmp	r4, #0
 8003fdc:	da04      	bge.n	8003fe8 <__ieee754_powf+0x680>
 8003fde:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8003fe2:	f7fc fa75 	bl	80004d0 <__aeabi_fdiv>
 8003fe6:	4601      	mov	r1, r0
 8003fe8:	2e00      	cmp	r6, #0
 8003fea:	f6bf ad18 	bge.w	8003a1e <__ieee754_powf+0xb6>
 8003fee:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8003ff2:	ea58 0805 	orrs.w	r8, r8, r5
 8003ff6:	f47f ad2e 	bne.w	8003a56 <__ieee754_powf+0xee>
 8003ffa:	4608      	mov	r0, r1
 8003ffc:	f7fc f8aa 	bl	8000154 <__aeabi_fsub>
 8004000:	4601      	mov	r1, r0
 8004002:	e4f8      	b.n	80039f6 <__ieee754_powf+0x8e>
 8004004:	ff800000 	.word	0xff800000
 8004008:	3f317200 	.word	0x3f317200
 800400c:	3f317218 	.word	0x3f317218
 8004010:	35bfbe8c 	.word	0x35bfbe8c
 8004014:	3331bb4c 	.word	0x3331bb4c
 8004018:	35ddea0e 	.word	0x35ddea0e
 800401c:	388ab355 	.word	0x388ab355
 8004020:	3b360b61 	.word	0x3b360b61
 8004024:	3e2aaaab 	.word	0x3e2aaaab

08004028 <__ieee754_rem_pio2f>:
 8004028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800402c:	4aa4      	ldr	r2, [pc, #656]	@ (80042c0 <__ieee754_rem_pio2f+0x298>)
 800402e:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 8004032:	4590      	cmp	r8, r2
 8004034:	460c      	mov	r4, r1
 8004036:	4682      	mov	sl, r0
 8004038:	b087      	sub	sp, #28
 800403a:	d804      	bhi.n	8004046 <__ieee754_rem_pio2f+0x1e>
 800403c:	2300      	movs	r3, #0
 800403e:	6008      	str	r0, [r1, #0]
 8004040:	604b      	str	r3, [r1, #4]
 8004042:	2500      	movs	r5, #0
 8004044:	e01d      	b.n	8004082 <__ieee754_rem_pio2f+0x5a>
 8004046:	4a9f      	ldr	r2, [pc, #636]	@ (80042c4 <__ieee754_rem_pio2f+0x29c>)
 8004048:	4590      	cmp	r8, r2
 800404a:	d84f      	bhi.n	80040ec <__ieee754_rem_pio2f+0xc4>
 800404c:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 8004050:	2800      	cmp	r0, #0
 8004052:	499d      	ldr	r1, [pc, #628]	@ (80042c8 <__ieee754_rem_pio2f+0x2a0>)
 8004054:	4f9d      	ldr	r7, [pc, #628]	@ (80042cc <__ieee754_rem_pio2f+0x2a4>)
 8004056:	f025 050f 	bic.w	r5, r5, #15
 800405a:	dd24      	ble.n	80040a6 <__ieee754_rem_pio2f+0x7e>
 800405c:	f7fc f87a 	bl	8000154 <__aeabi_fsub>
 8004060:	42bd      	cmp	r5, r7
 8004062:	4606      	mov	r6, r0
 8004064:	d011      	beq.n	800408a <__ieee754_rem_pio2f+0x62>
 8004066:	499a      	ldr	r1, [pc, #616]	@ (80042d0 <__ieee754_rem_pio2f+0x2a8>)
 8004068:	f7fc f874 	bl	8000154 <__aeabi_fsub>
 800406c:	4601      	mov	r1, r0
 800406e:	4605      	mov	r5, r0
 8004070:	4630      	mov	r0, r6
 8004072:	f7fc f86f 	bl	8000154 <__aeabi_fsub>
 8004076:	4996      	ldr	r1, [pc, #600]	@ (80042d0 <__ieee754_rem_pio2f+0x2a8>)
 8004078:	f7fc f86c 	bl	8000154 <__aeabi_fsub>
 800407c:	6025      	str	r5, [r4, #0]
 800407e:	2501      	movs	r5, #1
 8004080:	6060      	str	r0, [r4, #4]
 8004082:	4628      	mov	r0, r5
 8004084:	b007      	add	sp, #28
 8004086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800408a:	4992      	ldr	r1, [pc, #584]	@ (80042d4 <__ieee754_rem_pio2f+0x2ac>)
 800408c:	f7fc f862 	bl	8000154 <__aeabi_fsub>
 8004090:	4991      	ldr	r1, [pc, #580]	@ (80042d8 <__ieee754_rem_pio2f+0x2b0>)
 8004092:	4606      	mov	r6, r0
 8004094:	f7fc f85e 	bl	8000154 <__aeabi_fsub>
 8004098:	4601      	mov	r1, r0
 800409a:	4605      	mov	r5, r0
 800409c:	4630      	mov	r0, r6
 800409e:	f7fc f859 	bl	8000154 <__aeabi_fsub>
 80040a2:	498d      	ldr	r1, [pc, #564]	@ (80042d8 <__ieee754_rem_pio2f+0x2b0>)
 80040a4:	e7e8      	b.n	8004078 <__ieee754_rem_pio2f+0x50>
 80040a6:	f7fc f857 	bl	8000158 <__addsf3>
 80040aa:	42bd      	cmp	r5, r7
 80040ac:	4606      	mov	r6, r0
 80040ae:	d00f      	beq.n	80040d0 <__ieee754_rem_pio2f+0xa8>
 80040b0:	4987      	ldr	r1, [pc, #540]	@ (80042d0 <__ieee754_rem_pio2f+0x2a8>)
 80040b2:	f7fc f851 	bl	8000158 <__addsf3>
 80040b6:	4601      	mov	r1, r0
 80040b8:	4605      	mov	r5, r0
 80040ba:	4630      	mov	r0, r6
 80040bc:	f7fc f84a 	bl	8000154 <__aeabi_fsub>
 80040c0:	4983      	ldr	r1, [pc, #524]	@ (80042d0 <__ieee754_rem_pio2f+0x2a8>)
 80040c2:	f7fc f849 	bl	8000158 <__addsf3>
 80040c6:	6025      	str	r5, [r4, #0]
 80040c8:	6060      	str	r0, [r4, #4]
 80040ca:	f04f 35ff 	mov.w	r5, #4294967295
 80040ce:	e7d8      	b.n	8004082 <__ieee754_rem_pio2f+0x5a>
 80040d0:	4980      	ldr	r1, [pc, #512]	@ (80042d4 <__ieee754_rem_pio2f+0x2ac>)
 80040d2:	f7fc f841 	bl	8000158 <__addsf3>
 80040d6:	4980      	ldr	r1, [pc, #512]	@ (80042d8 <__ieee754_rem_pio2f+0x2b0>)
 80040d8:	4606      	mov	r6, r0
 80040da:	f7fc f83d 	bl	8000158 <__addsf3>
 80040de:	4601      	mov	r1, r0
 80040e0:	4605      	mov	r5, r0
 80040e2:	4630      	mov	r0, r6
 80040e4:	f7fc f836 	bl	8000154 <__aeabi_fsub>
 80040e8:	497b      	ldr	r1, [pc, #492]	@ (80042d8 <__ieee754_rem_pio2f+0x2b0>)
 80040ea:	e7ea      	b.n	80040c2 <__ieee754_rem_pio2f+0x9a>
 80040ec:	4a7b      	ldr	r2, [pc, #492]	@ (80042dc <__ieee754_rem_pio2f+0x2b4>)
 80040ee:	4590      	cmp	r8, r2
 80040f0:	f200 8095 	bhi.w	800421e <__ieee754_rem_pio2f+0x1f6>
 80040f4:	f000 f8fe 	bl	80042f4 <fabsf>
 80040f8:	4979      	ldr	r1, [pc, #484]	@ (80042e0 <__ieee754_rem_pio2f+0x2b8>)
 80040fa:	4606      	mov	r6, r0
 80040fc:	f7fc f934 	bl	8000368 <__aeabi_fmul>
 8004100:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8004104:	f7fc f828 	bl	8000158 <__addsf3>
 8004108:	f7fc fb0a 	bl	8000720 <__aeabi_f2iz>
 800410c:	4605      	mov	r5, r0
 800410e:	f7fc f8d7 	bl	80002c0 <__aeabi_i2f>
 8004112:	496d      	ldr	r1, [pc, #436]	@ (80042c8 <__ieee754_rem_pio2f+0x2a0>)
 8004114:	4681      	mov	r9, r0
 8004116:	f7fc f927 	bl	8000368 <__aeabi_fmul>
 800411a:	4601      	mov	r1, r0
 800411c:	4630      	mov	r0, r6
 800411e:	f7fc f819 	bl	8000154 <__aeabi_fsub>
 8004122:	496b      	ldr	r1, [pc, #428]	@ (80042d0 <__ieee754_rem_pio2f+0x2a8>)
 8004124:	4607      	mov	r7, r0
 8004126:	4648      	mov	r0, r9
 8004128:	f7fc f91e 	bl	8000368 <__aeabi_fmul>
 800412c:	2d1f      	cmp	r5, #31
 800412e:	4606      	mov	r6, r0
 8004130:	dc0e      	bgt.n	8004150 <__ieee754_rem_pio2f+0x128>
 8004132:	4a6c      	ldr	r2, [pc, #432]	@ (80042e4 <__ieee754_rem_pio2f+0x2bc>)
 8004134:	1e69      	subs	r1, r5, #1
 8004136:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800413a:	f02a 4300 	bic.w	r3, sl, #2147483648	@ 0x80000000
 800413e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004142:	4293      	cmp	r3, r2
 8004144:	d004      	beq.n	8004150 <__ieee754_rem_pio2f+0x128>
 8004146:	4631      	mov	r1, r6
 8004148:	4638      	mov	r0, r7
 800414a:	f7fc f803 	bl	8000154 <__aeabi_fsub>
 800414e:	e00b      	b.n	8004168 <__ieee754_rem_pio2f+0x140>
 8004150:	4631      	mov	r1, r6
 8004152:	4638      	mov	r0, r7
 8004154:	f7fb fffe 	bl	8000154 <__aeabi_fsub>
 8004158:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800415c:	ebc3 53d8 	rsb	r3, r3, r8, lsr #23
 8004160:	2b08      	cmp	r3, #8
 8004162:	ea4f 5be8 	mov.w	fp, r8, asr #23
 8004166:	dc01      	bgt.n	800416c <__ieee754_rem_pio2f+0x144>
 8004168:	6020      	str	r0, [r4, #0]
 800416a:	e026      	b.n	80041ba <__ieee754_rem_pio2f+0x192>
 800416c:	4959      	ldr	r1, [pc, #356]	@ (80042d4 <__ieee754_rem_pio2f+0x2ac>)
 800416e:	4648      	mov	r0, r9
 8004170:	f7fc f8fa 	bl	8000368 <__aeabi_fmul>
 8004174:	4606      	mov	r6, r0
 8004176:	4601      	mov	r1, r0
 8004178:	4638      	mov	r0, r7
 800417a:	f7fb ffeb 	bl	8000154 <__aeabi_fsub>
 800417e:	4601      	mov	r1, r0
 8004180:	4680      	mov	r8, r0
 8004182:	4638      	mov	r0, r7
 8004184:	f7fb ffe6 	bl	8000154 <__aeabi_fsub>
 8004188:	4631      	mov	r1, r6
 800418a:	f7fb ffe3 	bl	8000154 <__aeabi_fsub>
 800418e:	4606      	mov	r6, r0
 8004190:	4951      	ldr	r1, [pc, #324]	@ (80042d8 <__ieee754_rem_pio2f+0x2b0>)
 8004192:	4648      	mov	r0, r9
 8004194:	f7fc f8e8 	bl	8000368 <__aeabi_fmul>
 8004198:	4631      	mov	r1, r6
 800419a:	f7fb ffdb 	bl	8000154 <__aeabi_fsub>
 800419e:	4601      	mov	r1, r0
 80041a0:	4606      	mov	r6, r0
 80041a2:	4640      	mov	r0, r8
 80041a4:	f7fb ffd6 	bl	8000154 <__aeabi_fsub>
 80041a8:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80041ac:	ebab 0b03 	sub.w	fp, fp, r3
 80041b0:	f1bb 0f19 	cmp.w	fp, #25
 80041b4:	dc18      	bgt.n	80041e8 <__ieee754_rem_pio2f+0x1c0>
 80041b6:	4647      	mov	r7, r8
 80041b8:	6020      	str	r0, [r4, #0]
 80041ba:	f8d4 8000 	ldr.w	r8, [r4]
 80041be:	4638      	mov	r0, r7
 80041c0:	4641      	mov	r1, r8
 80041c2:	f7fb ffc7 	bl	8000154 <__aeabi_fsub>
 80041c6:	4631      	mov	r1, r6
 80041c8:	f7fb ffc4 	bl	8000154 <__aeabi_fsub>
 80041cc:	f1ba 0f00 	cmp.w	sl, #0
 80041d0:	6060      	str	r0, [r4, #4]
 80041d2:	f6bf af56 	bge.w	8004082 <__ieee754_rem_pio2f+0x5a>
 80041d6:	f108 4800 	add.w	r8, r8, #2147483648	@ 0x80000000
 80041da:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 80041de:	f8c4 8000 	str.w	r8, [r4]
 80041e2:	6060      	str	r0, [r4, #4]
 80041e4:	426d      	negs	r5, r5
 80041e6:	e74c      	b.n	8004082 <__ieee754_rem_pio2f+0x5a>
 80041e8:	493f      	ldr	r1, [pc, #252]	@ (80042e8 <__ieee754_rem_pio2f+0x2c0>)
 80041ea:	4648      	mov	r0, r9
 80041ec:	f7fc f8bc 	bl	8000368 <__aeabi_fmul>
 80041f0:	4606      	mov	r6, r0
 80041f2:	4601      	mov	r1, r0
 80041f4:	4640      	mov	r0, r8
 80041f6:	f7fb ffad 	bl	8000154 <__aeabi_fsub>
 80041fa:	4601      	mov	r1, r0
 80041fc:	4607      	mov	r7, r0
 80041fe:	4640      	mov	r0, r8
 8004200:	f7fb ffa8 	bl	8000154 <__aeabi_fsub>
 8004204:	4631      	mov	r1, r6
 8004206:	f7fb ffa5 	bl	8000154 <__aeabi_fsub>
 800420a:	4606      	mov	r6, r0
 800420c:	4937      	ldr	r1, [pc, #220]	@ (80042ec <__ieee754_rem_pio2f+0x2c4>)
 800420e:	4648      	mov	r0, r9
 8004210:	f7fc f8aa 	bl	8000368 <__aeabi_fmul>
 8004214:	4631      	mov	r1, r6
 8004216:	f7fb ff9d 	bl	8000154 <__aeabi_fsub>
 800421a:	4606      	mov	r6, r0
 800421c:	e793      	b.n	8004146 <__ieee754_rem_pio2f+0x11e>
 800421e:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8004222:	d305      	bcc.n	8004230 <__ieee754_rem_pio2f+0x208>
 8004224:	4601      	mov	r1, r0
 8004226:	f7fb ff95 	bl	8000154 <__aeabi_fsub>
 800422a:	6060      	str	r0, [r4, #4]
 800422c:	6020      	str	r0, [r4, #0]
 800422e:	e708      	b.n	8004042 <__ieee754_rem_pio2f+0x1a>
 8004230:	ea4f 56e8 	mov.w	r6, r8, asr #23
 8004234:	3e86      	subs	r6, #134	@ 0x86
 8004236:	eba8 58c6 	sub.w	r8, r8, r6, lsl #23
 800423a:	4640      	mov	r0, r8
 800423c:	f7fc fa70 	bl	8000720 <__aeabi_f2iz>
 8004240:	f7fc f83e 	bl	80002c0 <__aeabi_i2f>
 8004244:	4601      	mov	r1, r0
 8004246:	9003      	str	r0, [sp, #12]
 8004248:	4640      	mov	r0, r8
 800424a:	f7fb ff83 	bl	8000154 <__aeabi_fsub>
 800424e:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8004252:	f7fc f889 	bl	8000368 <__aeabi_fmul>
 8004256:	4607      	mov	r7, r0
 8004258:	f7fc fa62 	bl	8000720 <__aeabi_f2iz>
 800425c:	f7fc f830 	bl	80002c0 <__aeabi_i2f>
 8004260:	4601      	mov	r1, r0
 8004262:	9004      	str	r0, [sp, #16]
 8004264:	4605      	mov	r5, r0
 8004266:	4638      	mov	r0, r7
 8004268:	f7fb ff74 	bl	8000154 <__aeabi_fsub>
 800426c:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8004270:	f7fc f87a 	bl	8000368 <__aeabi_fmul>
 8004274:	2100      	movs	r1, #0
 8004276:	9005      	str	r0, [sp, #20]
 8004278:	f7fc fa0a 	bl	8000690 <__aeabi_fcmpeq>
 800427c:	b1f0      	cbz	r0, 80042bc <__ieee754_rem_pio2f+0x294>
 800427e:	2100      	movs	r1, #0
 8004280:	4628      	mov	r0, r5
 8004282:	f7fc fa05 	bl	8000690 <__aeabi_fcmpeq>
 8004286:	2800      	cmp	r0, #0
 8004288:	bf14      	ite	ne
 800428a:	2301      	movne	r3, #1
 800428c:	2302      	moveq	r3, #2
 800428e:	4a18      	ldr	r2, [pc, #96]	@ (80042f0 <__ieee754_rem_pio2f+0x2c8>)
 8004290:	4621      	mov	r1, r4
 8004292:	9201      	str	r2, [sp, #4]
 8004294:	2202      	movs	r2, #2
 8004296:	a803      	add	r0, sp, #12
 8004298:	9200      	str	r2, [sp, #0]
 800429a:	4632      	mov	r2, r6
 800429c:	f000 f898 	bl	80043d0 <__kernel_rem_pio2f>
 80042a0:	f1ba 0f00 	cmp.w	sl, #0
 80042a4:	4605      	mov	r5, r0
 80042a6:	f6bf aeec 	bge.w	8004082 <__ieee754_rem_pio2f+0x5a>
 80042aa:	6823      	ldr	r3, [r4, #0]
 80042ac:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80042b0:	6023      	str	r3, [r4, #0]
 80042b2:	6863      	ldr	r3, [r4, #4]
 80042b4:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80042b8:	6063      	str	r3, [r4, #4]
 80042ba:	e793      	b.n	80041e4 <__ieee754_rem_pio2f+0x1bc>
 80042bc:	2303      	movs	r3, #3
 80042be:	e7e6      	b.n	800428e <__ieee754_rem_pio2f+0x266>
 80042c0:	3f490fd8 	.word	0x3f490fd8
 80042c4:	4016cbe3 	.word	0x4016cbe3
 80042c8:	3fc90f80 	.word	0x3fc90f80
 80042cc:	3fc90fd0 	.word	0x3fc90fd0
 80042d0:	37354443 	.word	0x37354443
 80042d4:	37354400 	.word	0x37354400
 80042d8:	2e85a308 	.word	0x2e85a308
 80042dc:	43490f80 	.word	0x43490f80
 80042e0:	3f22f984 	.word	0x3f22f984
 80042e4:	080049f4 	.word	0x080049f4
 80042e8:	2e85a300 	.word	0x2e85a300
 80042ec:	248d3132 	.word	0x248d3132
 80042f0:	08004a74 	.word	0x08004a74

080042f4 <fabsf>:
 80042f4:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80042f8:	4770      	bx	lr
	...

080042fc <scalbnf>:
 80042fc:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8004300:	b538      	push	{r3, r4, r5, lr}
 8004302:	4603      	mov	r3, r0
 8004304:	460d      	mov	r5, r1
 8004306:	4604      	mov	r4, r0
 8004308:	d02e      	beq.n	8004368 <scalbnf+0x6c>
 800430a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800430e:	d304      	bcc.n	800431a <scalbnf+0x1e>
 8004310:	4601      	mov	r1, r0
 8004312:	f7fb ff21 	bl	8000158 <__addsf3>
 8004316:	4603      	mov	r3, r0
 8004318:	e026      	b.n	8004368 <scalbnf+0x6c>
 800431a:	f010 4fff 	tst.w	r0, #2139095040	@ 0x7f800000
 800431e:	d118      	bne.n	8004352 <scalbnf+0x56>
 8004320:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
 8004324:	f7fc f820 	bl	8000368 <__aeabi_fmul>
 8004328:	4a17      	ldr	r2, [pc, #92]	@ (8004388 <scalbnf+0x8c>)
 800432a:	4603      	mov	r3, r0
 800432c:	4295      	cmp	r5, r2
 800432e:	db0c      	blt.n	800434a <scalbnf+0x4e>
 8004330:	4604      	mov	r4, r0
 8004332:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8004336:	3a19      	subs	r2, #25
 8004338:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800433c:	428d      	cmp	r5, r1
 800433e:	dd0a      	ble.n	8004356 <scalbnf+0x5a>
 8004340:	4912      	ldr	r1, [pc, #72]	@ (800438c <scalbnf+0x90>)
 8004342:	4618      	mov	r0, r3
 8004344:	f361 001e 	bfi	r0, r1, #0, #31
 8004348:	e000      	b.n	800434c <scalbnf+0x50>
 800434a:	4911      	ldr	r1, [pc, #68]	@ (8004390 <scalbnf+0x94>)
 800434c:	f7fc f80c 	bl	8000368 <__aeabi_fmul>
 8004350:	e7e1      	b.n	8004316 <scalbnf+0x1a>
 8004352:	0dd2      	lsrs	r2, r2, #23
 8004354:	e7f0      	b.n	8004338 <scalbnf+0x3c>
 8004356:	1951      	adds	r1, r2, r5
 8004358:	29fe      	cmp	r1, #254	@ 0xfe
 800435a:	dcf1      	bgt.n	8004340 <scalbnf+0x44>
 800435c:	2900      	cmp	r1, #0
 800435e:	dd05      	ble.n	800436c <scalbnf+0x70>
 8004360:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 8004364:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 8004368:	4618      	mov	r0, r3
 800436a:	bd38      	pop	{r3, r4, r5, pc}
 800436c:	f111 0f16 	cmn.w	r1, #22
 8004370:	da01      	bge.n	8004376 <scalbnf+0x7a>
 8004372:	4907      	ldr	r1, [pc, #28]	@ (8004390 <scalbnf+0x94>)
 8004374:	e7e5      	b.n	8004342 <scalbnf+0x46>
 8004376:	f101 0019 	add.w	r0, r1, #25
 800437a:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 800437e:	f04f 514c 	mov.w	r1, #855638016	@ 0x33000000
 8004382:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 8004386:	e7e1      	b.n	800434c <scalbnf+0x50>
 8004388:	ffff3cb0 	.word	0xffff3cb0
 800438c:	7149f2ca 	.word	0x7149f2ca
 8004390:	0da24260 	.word	0x0da24260

08004394 <with_errnof>:
 8004394:	b538      	push	{r3, r4, r5, lr}
 8004396:	4604      	mov	r4, r0
 8004398:	460d      	mov	r5, r1
 800439a:	f7ff f865 	bl	8003468 <__errno>
 800439e:	6005      	str	r5, [r0, #0]
 80043a0:	4620      	mov	r0, r4
 80043a2:	bd38      	pop	{r3, r4, r5, pc}

080043a4 <xflowf>:
 80043a4:	b508      	push	{r3, lr}
 80043a6:	b140      	cbz	r0, 80043ba <xflowf+0x16>
 80043a8:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 80043ac:	f7fb ffdc 	bl	8000368 <__aeabi_fmul>
 80043b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80043b4:	2122      	movs	r1, #34	@ 0x22
 80043b6:	f7ff bfed 	b.w	8004394 <with_errnof>
 80043ba:	4608      	mov	r0, r1
 80043bc:	e7f6      	b.n	80043ac <xflowf+0x8>

080043be <__math_uflowf>:
 80043be:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 80043c2:	f7ff bfef 	b.w	80043a4 <xflowf>

080043c6 <__math_oflowf>:
 80043c6:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 80043ca:	f7ff bfeb 	b.w	80043a4 <xflowf>
	...

080043d0 <__kernel_rem_pio2f>:
 80043d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043d4:	b0db      	sub	sp, #364	@ 0x16c
 80043d6:	9202      	str	r2, [sp, #8]
 80043d8:	9304      	str	r3, [sp, #16]
 80043da:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 80043dc:	4bac      	ldr	r3, [pc, #688]	@ (8004690 <__kernel_rem_pio2f+0x2c0>)
 80043de:	9005      	str	r0, [sp, #20]
 80043e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043e4:	9100      	str	r1, [sp, #0]
 80043e6:	9301      	str	r3, [sp, #4]
 80043e8:	9b04      	ldr	r3, [sp, #16]
 80043ea:	3b01      	subs	r3, #1
 80043ec:	9303      	str	r3, [sp, #12]
 80043ee:	9b02      	ldr	r3, [sp, #8]
 80043f0:	1d1a      	adds	r2, r3, #4
 80043f2:	f2c0 8099 	blt.w	8004528 <__kernel_rem_pio2f+0x158>
 80043f6:	1edc      	subs	r4, r3, #3
 80043f8:	bf48      	it	mi
 80043fa:	1d1c      	addmi	r4, r3, #4
 80043fc:	10e4      	asrs	r4, r4, #3
 80043fe:	2500      	movs	r5, #0
 8004400:	f04f 0b00 	mov.w	fp, #0
 8004404:	1c67      	adds	r7, r4, #1
 8004406:	00fb      	lsls	r3, r7, #3
 8004408:	9306      	str	r3, [sp, #24]
 800440a:	9b02      	ldr	r3, [sp, #8]
 800440c:	9a03      	ldr	r2, [sp, #12]
 800440e:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 8004412:	9b01      	ldr	r3, [sp, #4]
 8004414:	eba4 0802 	sub.w	r8, r4, r2
 8004418:	eb03 0902 	add.w	r9, r3, r2
 800441c:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 800441e:	ae1e      	add	r6, sp, #120	@ 0x78
 8004420:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 8004424:	454d      	cmp	r5, r9
 8004426:	f340 8081 	ble.w	800452c <__kernel_rem_pio2f+0x15c>
 800442a:	9a04      	ldr	r2, [sp, #16]
 800442c:	ab1e      	add	r3, sp, #120	@ 0x78
 800442e:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 8004432:	f04f 0900 	mov.w	r9, #0
 8004436:	2300      	movs	r3, #0
 8004438:	f50d 7a8c 	add.w	sl, sp, #280	@ 0x118
 800443c:	9a01      	ldr	r2, [sp, #4]
 800443e:	4591      	cmp	r9, r2
 8004440:	f340 809a 	ble.w	8004578 <__kernel_rem_pio2f+0x1a8>
 8004444:	4613      	mov	r3, r2
 8004446:	aa0a      	add	r2, sp, #40	@ 0x28
 8004448:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800444c:	9308      	str	r3, [sp, #32]
 800444e:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 8004450:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004454:	9c01      	ldr	r4, [sp, #4]
 8004456:	9307      	str	r3, [sp, #28]
 8004458:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 800445c:	4646      	mov	r6, r8
 800445e:	4625      	mov	r5, r4
 8004460:	f04f 4987 	mov.w	r9, #1132462080	@ 0x43800000
 8004464:	ab5a      	add	r3, sp, #360	@ 0x168
 8004466:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800446a:	f853 bc50 	ldr.w	fp, [r3, #-80]
 800446e:	f50d 7a8c 	add.w	sl, sp, #280	@ 0x118
 8004472:	2d00      	cmp	r5, #0
 8004474:	f300 8085 	bgt.w	8004582 <__kernel_rem_pio2f+0x1b2>
 8004478:	4639      	mov	r1, r7
 800447a:	4658      	mov	r0, fp
 800447c:	f7ff ff3e 	bl	80042fc <scalbnf>
 8004480:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 8004484:	4605      	mov	r5, r0
 8004486:	f7fb ff6f 	bl	8000368 <__aeabi_fmul>
 800448a:	f000 fa3f 	bl	800490c <floorf>
 800448e:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 8004492:	f7fb ff69 	bl	8000368 <__aeabi_fmul>
 8004496:	4601      	mov	r1, r0
 8004498:	4628      	mov	r0, r5
 800449a:	f7fb fe5b 	bl	8000154 <__aeabi_fsub>
 800449e:	4605      	mov	r5, r0
 80044a0:	f7fc f93e 	bl	8000720 <__aeabi_f2iz>
 80044a4:	4606      	mov	r6, r0
 80044a6:	f7fb ff0b 	bl	80002c0 <__aeabi_i2f>
 80044aa:	4601      	mov	r1, r0
 80044ac:	4628      	mov	r0, r5
 80044ae:	f7fb fe51 	bl	8000154 <__aeabi_fsub>
 80044b2:	2f00      	cmp	r7, #0
 80044b4:	4681      	mov	r9, r0
 80044b6:	f340 8081 	ble.w	80045bc <__kernel_rem_pio2f+0x1ec>
 80044ba:	1e62      	subs	r2, r4, #1
 80044bc:	ab0a      	add	r3, sp, #40	@ 0x28
 80044be:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80044c2:	f1c7 0108 	rsb	r1, r7, #8
 80044c6:	fa45 f301 	asr.w	r3, r5, r1
 80044ca:	441e      	add	r6, r3
 80044cc:	408b      	lsls	r3, r1
 80044ce:	1aed      	subs	r5, r5, r3
 80044d0:	ab0a      	add	r3, sp, #40	@ 0x28
 80044d2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80044d6:	f1c7 0307 	rsb	r3, r7, #7
 80044da:	411d      	asrs	r5, r3
 80044dc:	2d00      	cmp	r5, #0
 80044de:	dd7a      	ble.n	80045d6 <__kernel_rem_pio2f+0x206>
 80044e0:	2200      	movs	r2, #0
 80044e2:	4692      	mov	sl, r2
 80044e4:	3601      	adds	r6, #1
 80044e6:	4294      	cmp	r4, r2
 80044e8:	f300 80aa 	bgt.w	8004640 <__kernel_rem_pio2f+0x270>
 80044ec:	2f00      	cmp	r7, #0
 80044ee:	dd05      	ble.n	80044fc <__kernel_rem_pio2f+0x12c>
 80044f0:	2f01      	cmp	r7, #1
 80044f2:	f000 80b6 	beq.w	8004662 <__kernel_rem_pio2f+0x292>
 80044f6:	2f02      	cmp	r7, #2
 80044f8:	f000 80bd 	beq.w	8004676 <__kernel_rem_pio2f+0x2a6>
 80044fc:	2d02      	cmp	r5, #2
 80044fe:	d16a      	bne.n	80045d6 <__kernel_rem_pio2f+0x206>
 8004500:	4649      	mov	r1, r9
 8004502:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8004506:	f7fb fe25 	bl	8000154 <__aeabi_fsub>
 800450a:	4681      	mov	r9, r0
 800450c:	f1ba 0f00 	cmp.w	sl, #0
 8004510:	d061      	beq.n	80045d6 <__kernel_rem_pio2f+0x206>
 8004512:	4639      	mov	r1, r7
 8004514:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8004518:	f7ff fef0 	bl	80042fc <scalbnf>
 800451c:	4601      	mov	r1, r0
 800451e:	4648      	mov	r0, r9
 8004520:	f7fb fe18 	bl	8000154 <__aeabi_fsub>
 8004524:	4681      	mov	r9, r0
 8004526:	e056      	b.n	80045d6 <__kernel_rem_pio2f+0x206>
 8004528:	2400      	movs	r4, #0
 800452a:	e768      	b.n	80043fe <__kernel_rem_pio2f+0x2e>
 800452c:	eb18 0f05 	cmn.w	r8, r5
 8004530:	d407      	bmi.n	8004542 <__kernel_rem_pio2f+0x172>
 8004532:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 8004536:	f7fb fec3 	bl	80002c0 <__aeabi_i2f>
 800453a:	f846 0b04 	str.w	r0, [r6], #4
 800453e:	3501      	adds	r5, #1
 8004540:	e770      	b.n	8004424 <__kernel_rem_pio2f+0x54>
 8004542:	4658      	mov	r0, fp
 8004544:	e7f9      	b.n	800453a <__kernel_rem_pio2f+0x16a>
 8004546:	9307      	str	r3, [sp, #28]
 8004548:	9b05      	ldr	r3, [sp, #20]
 800454a:	f85b 1d04 	ldr.w	r1, [fp, #-4]!
 800454e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8004552:	f7fb ff09 	bl	8000368 <__aeabi_fmul>
 8004556:	4601      	mov	r1, r0
 8004558:	4630      	mov	r0, r6
 800455a:	f7fb fdfd 	bl	8000158 <__addsf3>
 800455e:	4606      	mov	r6, r0
 8004560:	9b07      	ldr	r3, [sp, #28]
 8004562:	f108 0801 	add.w	r8, r8, #1
 8004566:	9a03      	ldr	r2, [sp, #12]
 8004568:	4590      	cmp	r8, r2
 800456a:	ddec      	ble.n	8004546 <__kernel_rem_pio2f+0x176>
 800456c:	f84a 6b04 	str.w	r6, [sl], #4
 8004570:	f109 0901 	add.w	r9, r9, #1
 8004574:	3504      	adds	r5, #4
 8004576:	e761      	b.n	800443c <__kernel_rem_pio2f+0x6c>
 8004578:	46ab      	mov	fp, r5
 800457a:	461e      	mov	r6, r3
 800457c:	f04f 0800 	mov.w	r8, #0
 8004580:	e7f1      	b.n	8004566 <__kernel_rem_pio2f+0x196>
 8004582:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 8004586:	4658      	mov	r0, fp
 8004588:	f7fb feee 	bl	8000368 <__aeabi_fmul>
 800458c:	f7fc f8c8 	bl	8000720 <__aeabi_f2iz>
 8004590:	f7fb fe96 	bl	80002c0 <__aeabi_i2f>
 8004594:	4649      	mov	r1, r9
 8004596:	9009      	str	r0, [sp, #36]	@ 0x24
 8004598:	f7fb fee6 	bl	8000368 <__aeabi_fmul>
 800459c:	4601      	mov	r1, r0
 800459e:	4658      	mov	r0, fp
 80045a0:	f7fb fdd8 	bl	8000154 <__aeabi_fsub>
 80045a4:	f7fc f8bc 	bl	8000720 <__aeabi_f2iz>
 80045a8:	3d01      	subs	r5, #1
 80045aa:	f846 0b04 	str.w	r0, [r6], #4
 80045ae:	f85a 1025 	ldr.w	r1, [sl, r5, lsl #2]
 80045b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80045b4:	f7fb fdd0 	bl	8000158 <__addsf3>
 80045b8:	4683      	mov	fp, r0
 80045ba:	e75a      	b.n	8004472 <__kernel_rem_pio2f+0xa2>
 80045bc:	d105      	bne.n	80045ca <__kernel_rem_pio2f+0x1fa>
 80045be:	1e63      	subs	r3, r4, #1
 80045c0:	aa0a      	add	r2, sp, #40	@ 0x28
 80045c2:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 80045c6:	11ed      	asrs	r5, r5, #7
 80045c8:	e788      	b.n	80044dc <__kernel_rem_pio2f+0x10c>
 80045ca:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80045ce:	f7fc f87d 	bl	80006cc <__aeabi_fcmpge>
 80045d2:	4605      	mov	r5, r0
 80045d4:	bb90      	cbnz	r0, 800463c <__kernel_rem_pio2f+0x26c>
 80045d6:	2100      	movs	r1, #0
 80045d8:	4648      	mov	r0, r9
 80045da:	f7fc f859 	bl	8000690 <__aeabi_fcmpeq>
 80045de:	2800      	cmp	r0, #0
 80045e0:	f000 8090 	beq.w	8004704 <__kernel_rem_pio2f+0x334>
 80045e4:	2200      	movs	r2, #0
 80045e6:	1e63      	subs	r3, r4, #1
 80045e8:	9901      	ldr	r1, [sp, #4]
 80045ea:	428b      	cmp	r3, r1
 80045ec:	da4a      	bge.n	8004684 <__kernel_rem_pio2f+0x2b4>
 80045ee:	2a00      	cmp	r2, #0
 80045f0:	d076      	beq.n	80046e0 <__kernel_rem_pio2f+0x310>
 80045f2:	3c01      	subs	r4, #1
 80045f4:	ab0a      	add	r3, sp, #40	@ 0x28
 80045f6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80045fa:	3f08      	subs	r7, #8
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d0f8      	beq.n	80045f2 <__kernel_rem_pio2f+0x222>
 8004600:	4639      	mov	r1, r7
 8004602:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8004606:	f7ff fe79 	bl	80042fc <scalbnf>
 800460a:	46a2      	mov	sl, r4
 800460c:	4607      	mov	r7, r0
 800460e:	f04f 596e 	mov.w	r9, #998244352	@ 0x3b800000
 8004612:	f50d 788c 	add.w	r8, sp, #280	@ 0x118
 8004616:	f1ba 0f00 	cmp.w	sl, #0
 800461a:	f280 80a1 	bge.w	8004760 <__kernel_rem_pio2f+0x390>
 800461e:	4627      	mov	r7, r4
 8004620:	2200      	movs	r2, #0
 8004622:	2f00      	cmp	r7, #0
 8004624:	f2c0 80cb 	blt.w	80047be <__kernel_rem_pio2f+0x3ee>
 8004628:	a946      	add	r1, sp, #280	@ 0x118
 800462a:	4690      	mov	r8, r2
 800462c:	f04f 0a00 	mov.w	sl, #0
 8004630:	4b18      	ldr	r3, [pc, #96]	@ (8004694 <__kernel_rem_pio2f+0x2c4>)
 8004632:	eb01 0b87 	add.w	fp, r1, r7, lsl #2
 8004636:	eba4 0907 	sub.w	r9, r4, r7
 800463a:	e0b4      	b.n	80047a6 <__kernel_rem_pio2f+0x3d6>
 800463c:	2502      	movs	r5, #2
 800463e:	e74f      	b.n	80044e0 <__kernel_rem_pio2f+0x110>
 8004640:	f858 3b04 	ldr.w	r3, [r8], #4
 8004644:	f1ba 0f00 	cmp.w	sl, #0
 8004648:	d108      	bne.n	800465c <__kernel_rem_pio2f+0x28c>
 800464a:	b123      	cbz	r3, 8004656 <__kernel_rem_pio2f+0x286>
 800464c:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8004650:	f848 3c04 	str.w	r3, [r8, #-4]
 8004654:	2301      	movs	r3, #1
 8004656:	469a      	mov	sl, r3
 8004658:	3201      	adds	r2, #1
 800465a:	e744      	b.n	80044e6 <__kernel_rem_pio2f+0x116>
 800465c:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8004660:	e7f6      	b.n	8004650 <__kernel_rem_pio2f+0x280>
 8004662:	1e62      	subs	r2, r4, #1
 8004664:	ab0a      	add	r3, sp, #40	@ 0x28
 8004666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800466a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800466e:	a90a      	add	r1, sp, #40	@ 0x28
 8004670:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004674:	e742      	b.n	80044fc <__kernel_rem_pio2f+0x12c>
 8004676:	1e62      	subs	r2, r4, #1
 8004678:	ab0a      	add	r3, sp, #40	@ 0x28
 800467a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800467e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004682:	e7f4      	b.n	800466e <__kernel_rem_pio2f+0x29e>
 8004684:	a90a      	add	r1, sp, #40	@ 0x28
 8004686:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800468a:	3b01      	subs	r3, #1
 800468c:	430a      	orrs	r2, r1
 800468e:	e7ab      	b.n	80045e8 <__kernel_rem_pio2f+0x218>
 8004690:	08004db8 	.word	0x08004db8
 8004694:	08004d8c 	.word	0x08004d8c
 8004698:	3301      	adds	r3, #1
 800469a:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800469e:	2900      	cmp	r1, #0
 80046a0:	d0fa      	beq.n	8004698 <__kernel_rem_pio2f+0x2c8>
 80046a2:	9a04      	ldr	r2, [sp, #16]
 80046a4:	a91e      	add	r1, sp, #120	@ 0x78
 80046a6:	18a2      	adds	r2, r4, r2
 80046a8:	1c66      	adds	r6, r4, #1
 80046aa:	eb01 0582 	add.w	r5, r1, r2, lsl #2
 80046ae:	441c      	add	r4, r3
 80046b0:	f50d 798c 	add.w	r9, sp, #280	@ 0x118
 80046b4:	42b4      	cmp	r4, r6
 80046b6:	f6ff aecf 	blt.w	8004458 <__kernel_rem_pio2f+0x88>
 80046ba:	9b07      	ldr	r3, [sp, #28]
 80046bc:	46ab      	mov	fp, r5
 80046be:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80046c2:	f7fb fdfd 	bl	80002c0 <__aeabi_i2f>
 80046c6:	f04f 0a00 	mov.w	sl, #0
 80046ca:	f04f 0800 	mov.w	r8, #0
 80046ce:	6028      	str	r0, [r5, #0]
 80046d0:	9b03      	ldr	r3, [sp, #12]
 80046d2:	459a      	cmp	sl, r3
 80046d4:	dd07      	ble.n	80046e6 <__kernel_rem_pio2f+0x316>
 80046d6:	f849 8026 	str.w	r8, [r9, r6, lsl #2]
 80046da:	3504      	adds	r5, #4
 80046dc:	3601      	adds	r6, #1
 80046de:	e7e9      	b.n	80046b4 <__kernel_rem_pio2f+0x2e4>
 80046e0:	2301      	movs	r3, #1
 80046e2:	9a08      	ldr	r2, [sp, #32]
 80046e4:	e7d9      	b.n	800469a <__kernel_rem_pio2f+0x2ca>
 80046e6:	9b05      	ldr	r3, [sp, #20]
 80046e8:	f85b 0904 	ldr.w	r0, [fp], #-4
 80046ec:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 80046f0:	f7fb fe3a 	bl	8000368 <__aeabi_fmul>
 80046f4:	4601      	mov	r1, r0
 80046f6:	4640      	mov	r0, r8
 80046f8:	f7fb fd2e 	bl	8000158 <__addsf3>
 80046fc:	f10a 0a01 	add.w	sl, sl, #1
 8004700:	4680      	mov	r8, r0
 8004702:	e7e5      	b.n	80046d0 <__kernel_rem_pio2f+0x300>
 8004704:	9b06      	ldr	r3, [sp, #24]
 8004706:	9a02      	ldr	r2, [sp, #8]
 8004708:	4648      	mov	r0, r9
 800470a:	1a99      	subs	r1, r3, r2
 800470c:	f7ff fdf6 	bl	80042fc <scalbnf>
 8004710:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8004714:	4680      	mov	r8, r0
 8004716:	f7fb ffd9 	bl	80006cc <__aeabi_fcmpge>
 800471a:	b1f8      	cbz	r0, 800475c <__kernel_rem_pio2f+0x38c>
 800471c:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 8004720:	4640      	mov	r0, r8
 8004722:	f7fb fe21 	bl	8000368 <__aeabi_fmul>
 8004726:	f7fb fffb 	bl	8000720 <__aeabi_f2iz>
 800472a:	f7fb fdc9 	bl	80002c0 <__aeabi_i2f>
 800472e:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8004732:	4681      	mov	r9, r0
 8004734:	f7fb fe18 	bl	8000368 <__aeabi_fmul>
 8004738:	4601      	mov	r1, r0
 800473a:	4640      	mov	r0, r8
 800473c:	f7fb fd0a 	bl	8000154 <__aeabi_fsub>
 8004740:	f7fb ffee 	bl	8000720 <__aeabi_f2iz>
 8004744:	ab0a      	add	r3, sp, #40	@ 0x28
 8004746:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800474a:	4648      	mov	r0, r9
 800474c:	3401      	adds	r4, #1
 800474e:	3708      	adds	r7, #8
 8004750:	f7fb ffe6 	bl	8000720 <__aeabi_f2iz>
 8004754:	ab0a      	add	r3, sp, #40	@ 0x28
 8004756:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800475a:	e751      	b.n	8004600 <__kernel_rem_pio2f+0x230>
 800475c:	4640      	mov	r0, r8
 800475e:	e7f7      	b.n	8004750 <__kernel_rem_pio2f+0x380>
 8004760:	ab0a      	add	r3, sp, #40	@ 0x28
 8004762:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8004766:	f7fb fdab 	bl	80002c0 <__aeabi_i2f>
 800476a:	4639      	mov	r1, r7
 800476c:	f7fb fdfc 	bl	8000368 <__aeabi_fmul>
 8004770:	4649      	mov	r1, r9
 8004772:	f848 002a 	str.w	r0, [r8, sl, lsl #2]
 8004776:	4638      	mov	r0, r7
 8004778:	f7fb fdf6 	bl	8000368 <__aeabi_fmul>
 800477c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004780:	4607      	mov	r7, r0
 8004782:	e748      	b.n	8004616 <__kernel_rem_pio2f+0x246>
 8004784:	f853 0b04 	ldr.w	r0, [r3], #4
 8004788:	f85b 1b04 	ldr.w	r1, [fp], #4
 800478c:	9203      	str	r2, [sp, #12]
 800478e:	9302      	str	r3, [sp, #8]
 8004790:	f7fb fdea 	bl	8000368 <__aeabi_fmul>
 8004794:	4601      	mov	r1, r0
 8004796:	4640      	mov	r0, r8
 8004798:	f7fb fcde 	bl	8000158 <__addsf3>
 800479c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80047a0:	4680      	mov	r8, r0
 80047a2:	f10a 0a01 	add.w	sl, sl, #1
 80047a6:	9901      	ldr	r1, [sp, #4]
 80047a8:	458a      	cmp	sl, r1
 80047aa:	dc01      	bgt.n	80047b0 <__kernel_rem_pio2f+0x3e0>
 80047ac:	45ca      	cmp	sl, r9
 80047ae:	dde9      	ble.n	8004784 <__kernel_rem_pio2f+0x3b4>
 80047b0:	ab5a      	add	r3, sp, #360	@ 0x168
 80047b2:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 80047b6:	f849 8ca0 	str.w	r8, [r9, #-160]
 80047ba:	3f01      	subs	r7, #1
 80047bc:	e731      	b.n	8004622 <__kernel_rem_pio2f+0x252>
 80047be:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	dc07      	bgt.n	80047d4 <__kernel_rem_pio2f+0x404>
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	dc4e      	bgt.n	8004866 <__kernel_rem_pio2f+0x496>
 80047c8:	d02e      	beq.n	8004828 <__kernel_rem_pio2f+0x458>
 80047ca:	f006 0007 	and.w	r0, r6, #7
 80047ce:	b05b      	add	sp, #364	@ 0x16c
 80047d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047d4:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 80047d6:	2b03      	cmp	r3, #3
 80047d8:	d1f7      	bne.n	80047ca <__kernel_rem_pio2f+0x3fa>
 80047da:	f10d 0bc8 	add.w	fp, sp, #200	@ 0xc8
 80047de:	eb0b 0784 	add.w	r7, fp, r4, lsl #2
 80047e2:	46b8      	mov	r8, r7
 80047e4:	46a2      	mov	sl, r4
 80047e6:	f1ba 0f00 	cmp.w	sl, #0
 80047ea:	dc49      	bgt.n	8004880 <__kernel_rem_pio2f+0x4b0>
 80047ec:	46a1      	mov	r9, r4
 80047ee:	f1b9 0f01 	cmp.w	r9, #1
 80047f2:	dc60      	bgt.n	80048b6 <__kernel_rem_pio2f+0x4e6>
 80047f4:	2000      	movs	r0, #0
 80047f6:	2c01      	cmp	r4, #1
 80047f8:	dc76      	bgt.n	80048e8 <__kernel_rem_pio2f+0x518>
 80047fa:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 80047fc:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 80047fe:	2d00      	cmp	r5, #0
 8004800:	d178      	bne.n	80048f4 <__kernel_rem_pio2f+0x524>
 8004802:	9900      	ldr	r1, [sp, #0]
 8004804:	600a      	str	r2, [r1, #0]
 8004806:	460a      	mov	r2, r1
 8004808:	604b      	str	r3, [r1, #4]
 800480a:	6090      	str	r0, [r2, #8]
 800480c:	e7dd      	b.n	80047ca <__kernel_rem_pio2f+0x3fa>
 800480e:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 8004812:	f7fb fca1 	bl	8000158 <__addsf3>
 8004816:	3c01      	subs	r4, #1
 8004818:	2c00      	cmp	r4, #0
 800481a:	daf8      	bge.n	800480e <__kernel_rem_pio2f+0x43e>
 800481c:	b10d      	cbz	r5, 8004822 <__kernel_rem_pio2f+0x452>
 800481e:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8004822:	9b00      	ldr	r3, [sp, #0]
 8004824:	6018      	str	r0, [r3, #0]
 8004826:	e7d0      	b.n	80047ca <__kernel_rem_pio2f+0x3fa>
 8004828:	2000      	movs	r0, #0
 800482a:	af32      	add	r7, sp, #200	@ 0xc8
 800482c:	e7f4      	b.n	8004818 <__kernel_rem_pio2f+0x448>
 800482e:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 8004832:	f7fb fc91 	bl	8000158 <__addsf3>
 8004836:	f108 38ff 	add.w	r8, r8, #4294967295
 800483a:	f1b8 0f00 	cmp.w	r8, #0
 800483e:	daf6      	bge.n	800482e <__kernel_rem_pio2f+0x45e>
 8004840:	b1ad      	cbz	r5, 800486e <__kernel_rem_pio2f+0x49e>
 8004842:	f100 4300 	add.w	r3, r0, #2147483648	@ 0x80000000
 8004846:	9a00      	ldr	r2, [sp, #0]
 8004848:	4601      	mov	r1, r0
 800484a:	6013      	str	r3, [r2, #0]
 800484c:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 800484e:	f7fb fc81 	bl	8000154 <__aeabi_fsub>
 8004852:	f04f 0801 	mov.w	r8, #1
 8004856:	4544      	cmp	r4, r8
 8004858:	da0b      	bge.n	8004872 <__kernel_rem_pio2f+0x4a2>
 800485a:	b10d      	cbz	r5, 8004860 <__kernel_rem_pio2f+0x490>
 800485c:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8004860:	9b00      	ldr	r3, [sp, #0]
 8004862:	6058      	str	r0, [r3, #4]
 8004864:	e7b1      	b.n	80047ca <__kernel_rem_pio2f+0x3fa>
 8004866:	46a0      	mov	r8, r4
 8004868:	2000      	movs	r0, #0
 800486a:	af32      	add	r7, sp, #200	@ 0xc8
 800486c:	e7e5      	b.n	800483a <__kernel_rem_pio2f+0x46a>
 800486e:	4603      	mov	r3, r0
 8004870:	e7e9      	b.n	8004846 <__kernel_rem_pio2f+0x476>
 8004872:	f857 1f04 	ldr.w	r1, [r7, #4]!
 8004876:	f7fb fc6f 	bl	8000158 <__addsf3>
 800487a:	f108 0801 	add.w	r8, r8, #1
 800487e:	e7ea      	b.n	8004856 <__kernel_rem_pio2f+0x486>
 8004880:	f8d8 3000 	ldr.w	r3, [r8]
 8004884:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8004888:	4619      	mov	r1, r3
 800488a:	4610      	mov	r0, r2
 800488c:	9302      	str	r3, [sp, #8]
 800488e:	9201      	str	r2, [sp, #4]
 8004890:	f7fb fc62 	bl	8000158 <__addsf3>
 8004894:	9a01      	ldr	r2, [sp, #4]
 8004896:	4601      	mov	r1, r0
 8004898:	4681      	mov	r9, r0
 800489a:	4610      	mov	r0, r2
 800489c:	f7fb fc5a 	bl	8000154 <__aeabi_fsub>
 80048a0:	9b02      	ldr	r3, [sp, #8]
 80048a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80048a6:	4619      	mov	r1, r3
 80048a8:	f7fb fc56 	bl	8000158 <__addsf3>
 80048ac:	f848 0904 	str.w	r0, [r8], #-4
 80048b0:	f8c8 9000 	str.w	r9, [r8]
 80048b4:	e797      	b.n	80047e6 <__kernel_rem_pio2f+0x416>
 80048b6:	f857 3c04 	ldr.w	r3, [r7, #-4]
 80048ba:	f8d7 a000 	ldr.w	sl, [r7]
 80048be:	4618      	mov	r0, r3
 80048c0:	4651      	mov	r1, sl
 80048c2:	9301      	str	r3, [sp, #4]
 80048c4:	f7fb fc48 	bl	8000158 <__addsf3>
 80048c8:	9b01      	ldr	r3, [sp, #4]
 80048ca:	4601      	mov	r1, r0
 80048cc:	4680      	mov	r8, r0
 80048ce:	4618      	mov	r0, r3
 80048d0:	f7fb fc40 	bl	8000154 <__aeabi_fsub>
 80048d4:	4651      	mov	r1, sl
 80048d6:	f7fb fc3f 	bl	8000158 <__addsf3>
 80048da:	f847 0904 	str.w	r0, [r7], #-4
 80048de:	f109 39ff 	add.w	r9, r9, #4294967295
 80048e2:	f8c7 8000 	str.w	r8, [r7]
 80048e6:	e782      	b.n	80047ee <__kernel_rem_pio2f+0x41e>
 80048e8:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 80048ec:	f7fb fc34 	bl	8000158 <__addsf3>
 80048f0:	3c01      	subs	r4, #1
 80048f2:	e780      	b.n	80047f6 <__kernel_rem_pio2f+0x426>
 80048f4:	9900      	ldr	r1, [sp, #0]
 80048f6:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 80048fa:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80048fe:	600a      	str	r2, [r1, #0]
 8004900:	604b      	str	r3, [r1, #4]
 8004902:	460a      	mov	r2, r1
 8004904:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8004908:	e77f      	b.n	800480a <__kernel_rem_pio2f+0x43a>
 800490a:	bf00      	nop

0800490c <floorf>:
 800490c:	b570      	push	{r4, r5, r6, lr}
 800490e:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 8004912:	3d7f      	subs	r5, #127	@ 0x7f
 8004914:	2d16      	cmp	r5, #22
 8004916:	4601      	mov	r1, r0
 8004918:	4604      	mov	r4, r0
 800491a:	f020 4600 	bic.w	r6, r0, #2147483648	@ 0x80000000
 800491e:	dc26      	bgt.n	800496e <floorf+0x62>
 8004920:	2d00      	cmp	r5, #0
 8004922:	da0f      	bge.n	8004944 <floorf+0x38>
 8004924:	4917      	ldr	r1, [pc, #92]	@ (8004984 <floorf+0x78>)
 8004926:	f7fb fc17 	bl	8000158 <__addsf3>
 800492a:	2100      	movs	r1, #0
 800492c:	f7fb fed8 	bl	80006e0 <__aeabi_fcmpgt>
 8004930:	b130      	cbz	r0, 8004940 <floorf+0x34>
 8004932:	2c00      	cmp	r4, #0
 8004934:	da23      	bge.n	800497e <floorf+0x72>
 8004936:	2e00      	cmp	r6, #0
 8004938:	4c13      	ldr	r4, [pc, #76]	@ (8004988 <floorf+0x7c>)
 800493a:	bf08      	it	eq
 800493c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8004940:	4621      	mov	r1, r4
 8004942:	e01a      	b.n	800497a <floorf+0x6e>
 8004944:	4e11      	ldr	r6, [pc, #68]	@ (800498c <floorf+0x80>)
 8004946:	412e      	asrs	r6, r5
 8004948:	4230      	tst	r0, r6
 800494a:	d016      	beq.n	800497a <floorf+0x6e>
 800494c:	490d      	ldr	r1, [pc, #52]	@ (8004984 <floorf+0x78>)
 800494e:	f7fb fc03 	bl	8000158 <__addsf3>
 8004952:	2100      	movs	r1, #0
 8004954:	f7fb fec4 	bl	80006e0 <__aeabi_fcmpgt>
 8004958:	2800      	cmp	r0, #0
 800495a:	d0f1      	beq.n	8004940 <floorf+0x34>
 800495c:	2c00      	cmp	r4, #0
 800495e:	bfbe      	ittt	lt
 8004960:	f44f 0300 	movlt.w	r3, #8388608	@ 0x800000
 8004964:	412b      	asrlt	r3, r5
 8004966:	18e4      	addlt	r4, r4, r3
 8004968:	ea24 0406 	bic.w	r4, r4, r6
 800496c:	e7e8      	b.n	8004940 <floorf+0x34>
 800496e:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 8004972:	d302      	bcc.n	800497a <floorf+0x6e>
 8004974:	f7fb fbf0 	bl	8000158 <__addsf3>
 8004978:	4601      	mov	r1, r0
 800497a:	4608      	mov	r0, r1
 800497c:	bd70      	pop	{r4, r5, r6, pc}
 800497e:	2400      	movs	r4, #0
 8004980:	e7de      	b.n	8004940 <floorf+0x34>
 8004982:	bf00      	nop
 8004984:	7149f2ca 	.word	0x7149f2ca
 8004988:	bf800000 	.word	0xbf800000
 800498c:	007fffff 	.word	0x007fffff

08004990 <_init>:
 8004990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004992:	bf00      	nop
 8004994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004996:	bc08      	pop	{r3}
 8004998:	469e      	mov	lr, r3
 800499a:	4770      	bx	lr

0800499c <_fini>:
 800499c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800499e:	bf00      	nop
 80049a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049a2:	bc08      	pop	{r3}
 80049a4:	469e      	mov	lr, r3
 80049a6:	4770      	bx	lr
